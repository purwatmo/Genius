
master4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  0001526a  0001531e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001526a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b57  0080023a  0080023a  00015458  2**0
                  ALLOC
  3 .eeprom       00000857  00810000  00810000  00015458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000126c  00000000  00000000  00015cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000004cb  00000000  00000000  00016f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  000173e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00002532  00000000  00000000  00017527  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000bcc6  00000000  00000000  00019a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000fed  00000000  00000000  0002571f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d51a  00000000  00000000  0002670c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001200  00000000  00000000  00033c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000540e  00000000  00000000  00034e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008684  00000000  00000000  0003a236  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000071d  00000000  00000000  000428ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00042fd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__ctors_end>
       4:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
       8:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
       c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      10:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      14:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      18:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      1c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      20:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      24:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      28:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      2c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      30:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__vector_12>
      34:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      38:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      3c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      40:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      44:	0c 94 a3 94 	jmp	0x12946	; 0x12946 <__vector_17>
      48:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__vector_18>
      4c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      50:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      54:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      58:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      5c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      60:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      64:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      68:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      6c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      70:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      74:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      78:	0c 94 6c 91 	jmp	0x122d8	; 0x122d8 <__vector_30>
      7c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      80:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      84:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      88:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__bad_interrupt>
      8c:	01 41       	sbci	r16, 0x11	; 17
      8e:	07 41       	sbci	r16, 0x17	; 23
      90:	0b 41       	sbci	r16, 0x1B	; 27
      92:	22 41       	sbci	r18, 0x12	; 18
      94:	3c 41       	sbci	r19, 0x1C	; 28
      96:	40 41       	sbci	r20, 0x10	; 16
      98:	6b 41       	sbci	r22, 0x1B	; 27
      9a:	85 41       	sbci	r24, 0x15	; 21
      9c:	8b 41       	sbci	r24, 0x1B	; 27
      9e:	93 41       	sbci	r25, 0x13	; 19
      a0:	96 41       	sbci	r25, 0x16	; 22
      a2:	99 41       	sbci	r25, 0x19	; 25
      a4:	9c 41       	sbci	r25, 0x1C	; 28
      a6:	9f 41       	sbci	r25, 0x1F	; 31
      a8:	a2 41       	sbci	r26, 0x12	; 18
      aa:	a6 41       	sbci	r26, 0x16	; 22
      ac:	a9 41       	sbci	r26, 0x19	; 25
      ae:	ae 41       	sbci	r26, 0x1E	; 30
      b0:	b5 41       	sbci	r27, 0x15	; 21
      b2:	7c 50       	subi	r23, 0x0C	; 12
      b4:	80 50       	subi	r24, 0x00	; 0
      b6:	9c 50       	subi	r25, 0x0C	; 12
      b8:	40 54       	subi	r20, 0x40	; 64
      ba:	40 54       	subi	r20, 0x40	; 64
      bc:	40 54       	subi	r20, 0x40	; 64
      be:	40 54       	subi	r20, 0x40	; 64
      c0:	df 50       	subi	r29, 0x0F	; 15
      c2:	40 54       	subi	r20, 0x40	; 64
      c4:	ff 50       	subi	r31, 0x0F	; 15
      c6:	40 54       	subi	r20, 0x40	; 64
      c8:	1c 51       	subi	r17, 0x1C	; 28
      ca:	a1 51       	subi	r26, 0x11	; 17
      cc:	fa 51       	subi	r31, 0x1A	; 26
      ce:	1d 52       	subi	r17, 0x2D	; 45
      d0:	c2 50       	subi	r28, 0x02	; 2
      d2:	40 54       	subi	r20, 0x40	; 64
      d4:	b4 51       	subi	r27, 0x14	; 20
      d6:	33 52       	subi	r19, 0x23	; 35
      d8:	6b 52       	subi	r22, 0x2B	; 43
      da:	83 52       	subi	r24, 0x23	; 35
      dc:	b3 52       	subi	r27, 0x23	; 35
      de:	c0 52       	subi	r28, 0x20	; 32
      e0:	ab 53       	subi	r26, 0x3B	; 59
      e2:	bb 53       	subi	r27, 0x3B	; 59
      e4:	01 54       	subi	r16, 0x41	; 65
      e6:	20 54       	subi	r18, 0x40	; 64
      e8:	32 54       	subi	r19, 0x42	; 66
      ea:	38 54       	subi	r19, 0x48	; 72
      ec:	3c 54       	subi	r19, 0x4C	; 76
      ee:	a8 5b       	subi	r26, 0xB8	; 184
      f0:	c2 5b       	subi	r28, 0xB2	; 178
      f2:	d4 5b       	subi	r29, 0xB4	; 180
      f4:	07 5c       	subi	r16, 0xC7	; 199
      f6:	37 5c       	subi	r19, 0xC7	; 199
      f8:	4d 5c       	subi	r20, 0xCD	; 205
      fa:	88 5c       	subi	r24, 0xC8	; 200
      fc:	c0 5c       	subi	r28, 0xC0	; 192
      fe:	02 5d       	subi	r16, 0xD2	; 210
     100:	0a 5d       	subi	r16, 0xDA	; 218
     102:	22 5e       	subi	r18, 0xE2	; 226
     104:	2e 5e       	subi	r18, 0xEE	; 238
     106:	65 5e       	subi	r22, 0xE5	; 229
     108:	a3 5e       	subi	r26, 0xE3	; 227
     10a:	ba 5e       	subi	r27, 0xEA	; 234
     10c:	d4 5e       	subi	r29, 0xE4	; 228
     10e:	2f 5f       	subi	r18, 0xFF	; 255
     110:	1d 5c       	subi	r17, 0xCD	; 205
     112:	da 5c       	subi	r29, 0xCA	; 202
     114:	7f 5e       	subi	r23, 0xEF	; 239
     116:	a6 5c       	subi	r26, 0xC6	; 198
     118:	22 5d       	subi	r18, 0xD2	; 210
     11a:	6b 5d       	subi	r22, 0xDB	; 219
     11c:	87 5d       	subi	r24, 0xD7	; 215
     11e:	a1 5d       	subi	r26, 0xD1	; 209
     120:	ea 5d       	subi	r30, 0xDA	; 218
     122:	08 5e       	subi	r16, 0xE8	; 232
     124:	bd 77       	andi	r27, 0x7D	; 125
     126:	fb 77       	andi	r31, 0x7B	; 123
     128:	07 78       	andi	r16, 0x87	; 135
     12a:	48 78       	andi	r20, 0x88	; 136
     12c:	5a 78       	andi	r21, 0x8A	; 138
     12e:	6a 78       	andi	r22, 0x8A	; 138
     130:	8d 78       	andi	r24, 0x8D	; 141
     132:	38 79       	andi	r19, 0x98	; 152
     134:	42 79       	andi	r20, 0x92	; 146
     136:	11 80       	ldd	r1, Z+1	; 0x01
     138:	a4 79       	andi	r26, 0x94	; 148
     13a:	b4 7a       	andi	r27, 0xA4	; 164
     13c:	09 7b       	andi	r16, 0xB9	; 185
     13e:	4e 7b       	andi	r20, 0xBE	; 190
     140:	c1 7b       	andi	r28, 0xB1	; 177
     142:	51 7c       	andi	r21, 0xC1	; 193
     144:	7e 7c       	andi	r23, 0xCE	; 206
     146:	41 7d       	andi	r20, 0xD1	; 209
     148:	6c 7d       	andi	r22, 0xDC	; 220
     14a:	25 7e       	andi	r18, 0xE5	; 229
     14c:	3e 7e       	andi	r19, 0xEE	; 238
     14e:	39 7f       	andi	r19, 0xF9	; 249
     150:	b5 7e       	andi	r27, 0xE5	; 229
     152:	f7 7e       	andi	r31, 0xE7	; 231
     154:	d2 7f       	andi	r29, 0xF2	; 242
     156:	00 80       	ld	r0, Z
     158:	11 80       	ldd	r1, Z+1	; 0x01
     15a:	3f 7f       	andi	r19, 0xFF	; 255
     15c:	c1 7f       	andi	r28, 0xF1	; 241
     15e:	04 80       	ldd	r0, Z+4	; 0x04
     160:	0a 80       	ldd	r0, Y+2	; 0x02
     162:	b5 80       	ldd	r11, Z+5	; 0x05
     164:	cb 80       	ldd	r12, Y+3	; 0x03
     166:	d0 80       	ld	r13, Z
     168:	05 81       	ldd	r16, Z+5	; 0x05
     16a:	35 81       	ldd	r19, Z+5	; 0x05
     16c:	7a 81       	ldd	r23, Y+2	; 0x02
     16e:	98 81       	ld	r25, Y
     170:	b8 81       	ld	r27, Y
     172:	f2 81       	ldd	r31, Z+2	; 0x02
     174:	55 82       	std	Z+5, r5	; 0x05
     176:	6a 86       	std	Y+10, r6	; 0x0a
     178:	1b 81       	ldd	r17, Y+3	; 0x03
     17a:	93 86       	std	Z+11, r9	; 0x0b
     17c:	88 87       	std	Y+8, r24	; 0x08
     17e:	37 87       	std	Z+15, r19	; 0x0f
     180:	6e 87       	std	Y+14, r22	; 0x0e
     182:	bc 87       	std	Y+12, r27	; 0x0c
     184:	a2 87       	std	Z+10, r26	; 0x0a
     186:	d3 87       	std	Z+11, r29	; 0x0b
     188:	ec 87       	std	Y+12, r30	; 0x0c
     18a:	fe 87       	std	Y+14, r31	; 0x0e
     18c:	ad 86       	std	Y+13, r10	; 0x0d
     18e:	00 87       	std	Z+8, r16	; 0x08
     190:	1d 87       	std	Y+13, r17	; 0x0d
     192:	66 82       	std	Z+6, r6	; 0x06
     194:	82 82       	std	Z+2, r8	; 0x02
     196:	a7 82       	std	Z+7, r10	; 0x07
     198:	b4 82       	std	Z+4, r11	; 0x04
     19a:	d0 82       	st	Z, r13
     19c:	e5 82       	std	Z+5, r14	; 0x05
     19e:	0d 83       	std	Y+5, r16	; 0x05
     1a0:	22 83       	std	Z+2, r18	; 0x02
     1a2:	4a 83       	std	Y+2, r20	; 0x02
     1a4:	6a 83       	std	Y+2, r22	; 0x02
     1a6:	9b 83       	std	Y+3, r25	; 0x03
     1a8:	a8 83       	st	Y, r26
     1aa:	01 84       	ldd	r0, Z+9	; 0x09
     1ac:	7f 84       	ldd	r7, Y+15	; 0x0f
     1ae:	92 84       	ldd	r9, Z+10	; 0x0a
     1b0:	be 84       	ldd	r11, Y+14	; 0x0e
     1b2:	be 84       	ldd	r11, Y+14	; 0x0e
     1b4:	a5 84       	ldd	r10, Z+13	; 0x0d
     1b6:	b8 84       	ldd	r11, Y+8	; 0x08
     1b8:	c1 84       	ldd	r12, Z+9	; 0x09
     1ba:	dc 84       	ldd	r13, Y+12	; 0x0c
     1bc:	ef 84       	ldd	r14, Y+15	; 0x0f
     1be:	fa 84       	ldd	r15, Y+10	; 0x0a
     1c0:	0f 85       	ldd	r16, Y+15	; 0x0f
     1c2:	24 85       	ldd	r18, Z+12	; 0x0c
     1c4:	44 85       	ldd	r20, Z+12	; 0x0c
     1c6:	68 85       	ldd	r22, Y+8	; 0x08
     1c8:	7d 85       	ldd	r23, Y+13	; 0x0d
     1ca:	92 85       	ldd	r25, Z+10	; 0x0a
     1cc:	a7 85       	ldd	r26, Z+15	; 0x0f
     1ce:	bc 85       	ldd	r27, Y+12	; 0x0c
     1d0:	d1 85       	ldd	r29, Z+9	; 0x09
     1d2:	e6 85       	ldd	r30, Z+14	; 0x0e
     1d4:	fb 85       	ldd	r31, Y+11	; 0x0b
     1d6:	08 86       	std	Y+8, r0	; 0x08
     1d8:	1d 86       	std	Y+13, r1	; 0x0d
     1da:	3e 86       	std	Y+14, r3	; 0x0e
     1dc:	3d 9a       	sbi	0x07, 5	; 7
     1de:	59 9a       	sbi	0x0b, 1	; 11
     1e0:	5d 9b       	sbis	0x0b, 5	; 11
     1e2:	8b 9b       	sbis	0x11, 3	; 17
     1e4:	b4 9b       	sbis	0x16, 4	; 22
     1e6:	27 9c       	mul	r2, r7
     1e8:	35 9c       	mul	r3, r5
     1ea:	3c 9c       	mul	r3, r12
     1ec:	78 9c       	mul	r7, r8
     1ee:	9f 9c       	mul	r9, r15
     1f0:	e2 9c       	mul	r14, r2
     1f2:	ec 9c       	mul	r14, r12
     1f4:	ab 9c       	mul	r10, r11
     1f6:	f2 9c       	mul	r15, r2
     1f8:	0c 9d       	mul	r16, r12
     1fa:	00 9d       	mul	r16, r0
     1fc:	08 9d       	mul	r16, r8
     1fe:	69 9a       	sbi	0x0d, 1	; 13
     200:	f9 9a       	sbi	0x1f, 1	; 31
     202:	1b 9b       	sbis	0x03, 3	; 3
     204:	27 9b       	sbis	0x04, 7	; 4
     206:	39 9b       	sbis	0x07, 1	; 7
     208:	49 9b       	sbis	0x09, 1	; 9
     20a:	57 9b       	sbis	0x0a, 7	; 10
     20c:	57 9b       	sbis	0x0a, 7	; 10
     20e:	8e 9d       	mul	r24, r14
     210:	91 9d       	mul	r25, r1
     212:	26 9e       	mul	r2, r22
     214:	35 9e       	mul	r3, r21
     216:	66 9e       	mul	r6, r22
     218:	74 9e       	mul	r7, r20
     21a:	a0 9e       	mul	r10, r16
     21c:	45 9e       	mul	r4, r21
     21e:	52 9e       	mul	r5, r18
     220:	5c 9e       	mul	r5, r28
     222:	aa 9e       	mul	r10, r26
     224:	b7 9e       	mul	r11, r23
     226:	c2 9e       	mul	r12, r18
     228:	c5 9e       	mul	r12, r21
     22a:	c8 9e       	mul	r12, r24
     22c:	cb 9e       	mul	r12, r27
     22e:	ce 9e       	mul	r12, r30
     230:	d1 9e       	mul	r13, r17
     232:	d4 9e       	mul	r13, r20
     234:	d7 9e       	mul	r13, r23
     236:	f9 9e       	mul	r15, r25
     238:	e7 9e       	mul	r14, r23
     23a:	da 9e       	mul	r13, r26
     23c:	f2 9e       	mul	r15, r18
     23e:	10 9e       	mul	r1, r16

00000240 <__c.3073>:
     240:	49 6e 69 74 69 61 6c 69 7a 65 2e 2e 2e 20 00        Initialize... .

0000024f <__c.3068>:
     24f:	57 61 74 63 68 44 6f 67 00                          WatchDog.

00000258 <__c.3066>:
     258:	42 72 6f 77 6e 4f 75 74 00                          BrownOut.

00000261 <__c.3064>:
     261:	45 78 74 65 72 6e 61 6c 00                          External.

0000026a <__c.3059>:
     26a:	50 6f 77 65 72 4f 6e 00                             PowerOn.

00000272 <__prodloc>:
     272:	01 06 02 06 01 0d 02 0d 01 14 02 14                 ............

0000027e <__prntloc>:
     27e:	01 08 02 08 03 08 04 08 01 13 02 13                 ............

0000028a <__prntlmt>:
     28a:	02 03 04 02 0f 0f                                   ......

00000290 <__prntstr>:
     290:	01 01 00 00 00 00                                   ......

00000296 <__hostloc>:
     296:	01 0a 02 0a 03 0a                                   ......

0000029c <MaxKeyHit>:
     29c:	02 04 03 03 03 03 03 04 03 04                       ..........

000002a6 <strDispenserName1>:
     2a6:	4e 2f 41 00                                         N/A.

000002aa <strDispenserName2>:
     2aa:	47 69 6c 62 61 72 63 6f 00                          Gilbarco.

000002b3 <strDispenserName3>:
     2b3:	57 61 79 6e 65 20 44 41 52 54 00                    Wayne DART.

000002be <strDispenserName4>:
     2be:	54 61 74 73 75 6e 6f 00                             Tatsuno.

000002c6 <strDispenserName5>:
     2c6:	4c 47 00                                            LG.

000002c9 <DefListDispenserName>:
     2c9:	a6 02 aa 02 b3 02 be 02 c6 02                       ..........

000002d3 <__c.7311>:
     2d3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2e3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2f3:	20 20 20 20 20 20 20 20 00                                  .

000002fc <__c.7309>:
     2fc:	20 20 20 20 20 20 53 65 6d 6f 67 61 20 53 65 6c           Semoga Sel
     30c:	61 6d 61 74 20 53 61 6d 70 61 69 20 54 75 6a 75     amat Sampai Tuju
     31c:	61 6e 20 20 20 20 20 20 00                          an      .

00000325 <__c.7307>:
     325:	20 20 20 20 20 20 20 20 20 20 20 20 53 65 6c 61                 Sela
     335:	6d 61 74 20 20 4a 61 6c 61 6e 20 20 20 20 20 20     mat  Jalan      
     345:	20 20 20 20 20 20 20 20 00                                  .

0000034e <__c.7305>:
     34e:	20 20 20 20 20 20 20 20 20 20 20 20 20 54 65 72                  Ter
     35e:	69 6d 61 20 4b 61 73 69 68 20 20 20 20 20 20 20     ima Kasih       
     36e:	20 20 20 20 20 20 20 20 00                                  .

00000377 <__c.7303>:
     377:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     387:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     397:	20 20 20 20 20 20 20 20 00                                  .

000003a0 <__c.7301>:
     3a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3b0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3c0:	20 20 20 20 20 20 20 20 00                                  .

000003c9 <__c.7299>:
     3c9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3d9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3e9:	20 20 20 20 20 20 20 20 00                                  .

000003f2 <__c.7297>:
     3f2:	20 20 20 20 20 20 20 20 20 20 20 20 4a 61 6b 61                 Jaka
     402:	72 74 61 20 53 65 6c 61 74 61 6e 20 20 20 20 20     rta Selatan     
     412:	20 20 20 20 20 20 20 20 00                                  .

0000041b <__c.7295>:
     41b:	20 20 20 20 20 20 20 20 4a 4c 2e 20 52 53 20 46             JL. RS F
     42b:	61 74 6d 61 77 61 74 69 20 4e 6f 2e 35 35 20 20     atmawati No.55  
     43b:	20 20 20 20 20 20 20 20 00                                  .

00000444 <__c.7293>:
     444:	20 20 20 20 50 54 2e 20 48 41 4e 49 4e 44 4f 20         PT. HANINDO 
     454:	41 55 54 4f 4d 41 54 49 4f 4e 20 53 4f 4c 55 54     AUTOMATION SOLUT
     464:	49 4f 4e 53 20 20 20 20 00                          IONS    .

0000046d <__c.7291>:
     46d:	30 30 30 30 30 30 00                                000000.

00000474 <__c.7289>:
     474:	42 52 49 00                                         BRI.

00000478 <__c.7287>:
     478:	42 4e 49 00                                         BNI.

0000047c <__c.7285>:
     47c:	4d 61 6e 64 69 72 69 00                             Mandiri.

00000484 <__c.7283>:
     484:	42 43 41 00                                         BCA.

00000488 <__c.7281>:
     488:	44 69 65 73 65 6c 20 20 00                          Diesel  .

00000491 <__c.7279>:
     491:	42 69 6f 53 6f 6c 72 20 00                          BioSolr .

0000049a <__c.7277>:
     49a:	53 6f 6c 61 72 20 20 20 00                          Solar   .

000004a3 <__c.7275>:
     4a3:	50 72 65 6d 69 75 6d 20 00                          Premium .

000004ac <__c.7273>:
     4ac:	50 65 72 74 61 6d 61 78 00                          Pertamax.

000004b5 <__c.7271>:
     4b5:	50 65 72 74 2b 20 20 20 00                          Pert+   .

000004be <__c.7269>:
     4be:	36 35 30 30 00                                      6500.

000004c3 <__c.7267>:
     4c3:	34 35 30 30 00                                      4500.

000004c8 <__c.7265>:
     4c8:	36 35 30 30 00                                      6500.

000004cd <__c.7263>:
     4cd:	34 35 30 30 00                                      4500.

000004d2 <__c.7261>:
     4d2:	37 32 35 30 00                                      7250.

000004d7 <__c.7259>:
     4d7:	36 35 30 30 00                                      6500.

000004dc <__c.7257>:
     4dc:	20 20 00                                              .

000004df <__c.7213>:
     4df:	25 64 00                                            %d.

000004e2 <__c.7211>:
     4e2:	54 25 2e 32 64 25 2e 32 64 25 73 25 73 25 73 25     T%.2d%.2d%s%s%s%
     4f2:	73 25 73 25 73 3a 00                                s%s%s:.

000004f9 <__c.7169>:
     4f9:	32 30 25 73 2f 25 73 2f 25 73 20 25 73 3a 25 73     20%s/%s/%s %s:%s
     509:	3a 25 73 00                                         :%s.

0000050d <__c.7146>:
     50d:	25 73 00                                            %s.

00000510 <__c.7140>:
     510:	25 73 00                                            %s.

00000513 <__c.7111>:
     513:	25 63 25 2e 32 64 3a 00                             %c%.2d:.

0000051b <__c.7095>:
     51b:	43 54 53 52 50 00                                   CTSRP.

00000521 <__c.7086>:
     521:	3a 00                                               :.

00000523 <__c.6984>:
     523:	4e 2f 41 00                                         N/A.

00000527 <__c.6975>:
     527:	25 73 00                                            %s.

0000052a <__c.6970>:
	...

0000052b <__c.6952>:
     52b:	25 64 2e 25 73 25 73 25 73 00                       %d.%s%s%s.

00000535 <__c.6950>:
     535:	25 64 2e 25 73 25 73 25 73 25 73 25 73 00           %d.%s%s%s%s%s.

00000543 <__c.6942>:
     543:	54 4f 54 41 4c 20 25 73 25 73 00                    TOTAL %s%s.

0000054e <__c.6940>:
     54e:	54 4f 54 41 4c 20 25 73 25 73 25 73 25 73 00        TOTAL %s%s%s%s.

0000055d <__c.6936>:
     55d:	25 73 25 73 00                                      %s%s.

00000562 <__c.6934>:
     562:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

0000056b <__c.6932>:
     56b:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     57b:	20 20 20 20 20 20 20 20 20 20 20 20 20 00                        .

00000589 <__c.6930>:
     589:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     599:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

000005a7 <__c.6928>:
     5a7:	41 77 61 6c 20 3a 25 73 25 73 00                    Awal :%s%s.

000005b2 <__c.6926>:
     5b2:	41 77 61 6c 20 3a 25 73 25 73 25 73 25 73 00        Awal :%s%s%s%s.

000005c1 <__c.6924>:
     5c1:	41 6b 68 69 72 3a 25 73 25 73 00                    Akhir:%s%s.

000005cc <__c.6922>:
     5cc:	41 6b 68 69 72 3a 25 73 25 73 25 73 25 73 00        Akhir:%s%s%s%s.

000005db <__c.6920>:
     5db:	50 25 64 2e 25 64 20 2d 20 25 73 20 00              P%d.%d - %s .

000005e8 <__c.6918>:
     5e8:	50 25 64 2e 25 64 20 2d 20 25 73 20 25 73 20 25     P%d.%d - %s %s %
     5f8:	73 00                                               s.

000005fa <__c.6916>:
     5fa:	48 61 72 67 61 3a 20 52 70 2e 25 73 00              Harga: Rp.%s.

00000607 <__c.6912>:
     607:	4e 2f 41 00                                         N/A.

0000060b <__c.6908>:
     60b:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     61b:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 20 20 20 20     OLUME(L)        
     62b:	20 20 20 20 20 20 00                                      .

00000632 <__c.6906>:
     632:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     642:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 52 55 50 49     OLUME(L)    RUPI
     652:	41 48 28 52 50 29 00                                AH(RP).

00000659 <__c.6902>:
     659:	41 6b 68 69 72 20 53 68 69 66 74 20 3a 20 25 73     Akhir Shift : %s
     669:	20 00                                                .

0000066b <__c.6900>:
     66b:	41 77 61 6c 20 20 53 68 69 66 74 20 3a 20 25 73     Awal  Shift : %s
     67b:	20 00                                                .

0000067d <__c.6898>:
     67d:	54 65 72 6d 69 6e 61 6c 20 49 44 20 3a 20 25 2e     Terminal ID : %.
     68d:	32 64 20 20 20 20 20 20 20 20 20 20 20 20 20 20     2d              
     69d:	20 20 20 20 20 00                                        .

000006a3 <__c.6896>:
     6a3:	20 20 20 20 20 20 20 20 4c 61 70 6f 72 61 6e 20             Laporan 
     6b3:	54 75 74 75 70 20 53 68 69 66 74 3a 20 25 73 20     Tutup Shift: %s 
     6c3:	20 20 20 20 20 00                                        .

000006c9 <__c.6893>:
     6c9:	25 64 00                                            %d.

000006cc <__c.6853>:
     6cc:	25 73 00                                            %s.

000006cf <__c.6848>:
     6cf:	30 00                                               0.

000006d1 <__c.6846>:
     6d1:	30 00                                               0.

000006d3 <__c.6800>:
     6d3:	25 73 00                                            %s.

000006d6 <__c.6798>:
     6d6:	25 73 00                                            %s.

000006d9 <__c.6796>:
     6d9:	25 73 00                                            %s.

000006dc <__c.6794>:
     6dc:	25 73 00                                            %s.

000006df <__c.6792>:
     6df:	25 73 00                                            %s.

000006e2 <__c.6682>:
     6e2:	25 73 00                                            %s.

000006e5 <__c.6627>:
     6e5:	30 30 30 30 30 30 30 30 00                          00000000.

000006ee <__c.6608>:
     6ee:	4f 70 65 72 61 74 6f 72 3a 20 25 73 00              Operator: %s.

000006fb <__c.6603>:
     6fb:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     70b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     71b:	2d 00                                               -.

0000071d <__c.6594>:
     71d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     72d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     73d:	20 20 20 00                                            .

00000741 <__c.6592>:
     741:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     751:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     761:	20 20 20 00                                            .

00000765 <__c.6536>:
     765:	20 20 20 20 20 4f 70 65 72 61 74 6f 72 3a 20 25          Operator: %
     775:	73 00                                               s.

00000777 <__c.6531>:
     777:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     787:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     797:	2d 2d 00                                            --.

0000079a <__c.6528>:
     79a:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 41          Surcharge A
     7aa:	6d 74 3a 20 25 73 00                                mt: %s.

000007b1 <__c.6525>:
     7b1:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 44          Surcharge D
     7c1:	73 63 3a 20 25 73 00                                sc: %s.

000007c8 <__c.6522>:
     7c8:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     7d8:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7e8:	2d 2d 00                                            --.

000007eb <__c.6519>:
     7eb:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     7fb:	41 20 3a 20 52 70 2e 25 73 00                       A : Rp.%s.

00000805 <__c.6516>:
     805:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     815:	56 20 3a 20 25 73 20 4c 00                          V : %s L.

0000081e <__c.6513>:
     81e:	20 20 20 20 20 54 6f 74 61 6c 20 52 65 64 65 65          Total Redee
     82e:	6d 20 3a 20 25 73 00                                m : %s.

00000835 <__c.6510>:
     835:	20 20 20 20 20 45 78 70 69 72 79 20 20 20 20 20          Expiry     
     845:	20 20 3a 20 25 73 00                                  : %s.

0000084c <__c.6507>:
     84c:	20 20 20 20 20 43 75 72 72 20 50 6f 69 6e 74 73          Curr Points
     85c:	20 20 3a 20 25 73 00                                  : %s.

00000863 <__c.6504>:
     863:	20 20 20 20 20 50 72 65 76 20 50 6f 69 6e 74 73          Prev Points
     873:	20 20 3a 20 25 73 00                                  : %s.

0000087a <__c.6501>:
     87a:	20 20 20 20 20 47 61 69 6e 20 50 6f 69 6e 74 73          Gain Points
     88a:	20 20 3a 20 25 73 00                                  : %s.

00000891 <__c.6498>:
     891:	20 20 20 20 20 43 6f 72 70 20 4e 61 6d 65 20 20          Corp Name  
     8a1:	20 20 3a 20 25 73 00                                  : %s.

000008a8 <__c.6495>:
     8a8:	20 20 20 20 20 43 6f 72 70 20 49 44 20 20 20 20          Corp ID    
     8b8:	20 20 3a 20 25 73 00                                  : %s.

000008bf <__c.6492>:
     8bf:	20 20 20 20 20 43 61 72 64 20 48 6f 6c 64 65 72          Card Holder
     8cf:	20 20 3a 20 25 73 20 00                               : %s .

000008d7 <__c.6489>:
     8d7:	20 20 20 20 20 43 61 72 64 20 49 44 20 20 20 20          Card ID    
     8e7:	20 20 3a 20 25 73 00                                  : %s.

000008ee <__c.6486>:
     8ee:	20 20 20 20 20 20 20 20 20 4c 4f 59 41 4c 54 59              LOYALTY
     8fe:	20 49 4e 46 4f 52 4d 41 54 49 4f 4e 20 20 20 20      INFORMATION    
     90e:	20 20 00                                              .

00000911 <__c.6483>:
     911:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     921:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     931:	2d 2d 00                                            --.

00000934 <__c.6480>:
     934:	20 20 20 20 2e 25 73 00                                 .%s.

0000093c <__c.6476>:
     93c:	20 20 20 20 54 61 6e 64 61 20 54 61 6e 67 61 6e         Tanda Tangan
     94c:	20 20 28 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f       (_____________
     95c:	5f 29 00                                            _).

0000095f <__c.6471>:
     95f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     96f:	20 20 20 20 20 20 00                                      .

00000976 <__c.6468>:
     976:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     986:	20 20 20 20 20 20 00                                      .

0000098d <__c.6465>:
     98d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     99d:	20 00                                                .

0000099f <__c.6463>:
     99f:	20 20 00                                              .

000009a2 <__c.6461>:
     9a2:	20 20 20 20 41 70 70 72 20 43 6f 64 65 3a 20 25         Appr Code: %
     9b2:	73 00                                               s.

000009b4 <__c.6459>:
     9b4:	25 73 20 20 00                                      %s  .

000009b9 <__c.6457>:
     9b9:	20 20 20 20 4e 61 6d 61 20 20 20 20 20 3a 20 25         Nama     : %
     9c9:	73 00                                               s.

000009cb <__c.6454>:
     9cb:	20 20 20 20 20 20 20 20 20 20 2a 2a 2a 20 50 55               *** PU
     9db:	4d 50 20 54 45 53 54 20 2a 2a 2a 20 20 20 20 20     MP TEST ***     
     9eb:	20 20 00                                              .

000009ee <__c.6452>:
     9ee:	20 20 20 20 56 6f 75 63 68 65 72 20 4e 6f 3a 20         Voucher No: 
     9fe:	25 73 00                                            %s.

00000a01 <__c.6450>:
     a01:	20 20 20 20 4b 61 72 74 75 20 49 44 20 3a 20 25         Kartu ID : %
     a11:	73 00                                               s.

00000a13 <__c.6447>:
     a13:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     a23:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a33:	2d 2d 00                                            --.

00000a36 <__c.6444>:
     a36:	20 20 20 20 20 20 4f 64 6f 6d 65 74 65 72 20 20           Odometer  
     a46:	20 20 3a 20 25 73 00                                  : %s.

00000a4d <__c.6441>:
     a4d:	20 20 20 20 20 20 4e 6f 2e 50 6f 6c 69 73 69 20           No.Polisi 
     a5d:	20 20 3a 20 25 73 00                                  : %s.

00000a64 <__c.6438>:
	...

00000a65 <__c.6436>:
     a65:	20 20 20 20 20 20 4a 6d 6c 20 52 75 70 69 61 68           Jml Rupiah
     a75:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000a7f <__c.6433>:
     a7f:	20 20 20 20 20 20 4a 6d 6c 20 4c 69 74 65 72 20           Jml Liter 
     a8f:	20 20 3a 20 25 73 20 4c 00                            : %s L.

00000a98 <__c.6430>:
	...

00000a99 <__c.6428>:
     a99:	20 20 20 20 20 20 48 61 72 67 61 2f 4c 20 20 20           Harga/L   
     aa9:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000ab3 <__c.6425>:
     ab3:	20 20 20 20 20 20 50 72 6f 64 75 6b 20 20 20 20           Produk    
     ac3:	20 20 3a 20 25 73 00                                  : %s.

00000aca <__c.6422>:
     aca:	20 20 20 20 20 20 50 75 6c 61 75 2f 50 6f 6d 70           Pulau/Pomp
     ada:	61 20 3a 20 5b 25 73 5d 2d 25 73 00                 a : [%s]-%s.

00000ae6 <__c.6419>:
     ae6:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     af6:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     b06:	2d 2d 00                                            --.

00000b09 <__c.6416>:
     b09:	20 20 20 20 20 20 57 61 6b 74 75 3a 20 25 73 20           Waktu: %s 
     b19:	25 73 20 00                                         %s .

00000b1d <__c.6412>:
     b1d:	20 20 20 20 20 20 53 68 69 66 74 3a 20 25 73 20           Shift: %s 
     b2d:	20 4e 6f 2e 54 72 61 6e 73 3a 20 25 73 20 00         No.Trans: %s .

00000b3c <__c.6395>:
     b3c:	20 00                                                .

00000b3e <__c.6393>:
     b3e:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     b4e:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     b5e:	20 20 20 00                                            .

00000b62 <__c.6162>:
     b62:	45 72 72 6f 72 20 4e 6f 20 43 6f 6e 6e 65 63 74     Error No Connect
     b72:	69 6f 6e 00                                         ion.

00000b76 <__c.6156>:
     b76:	50 72 6f 73 65 73 00                                Proses.

00000b7d <__c.6154>:
     b7d:	53 65 6e 64 20 52 65 71 75 65 73 74 00              Send Request.

00000b8a <__c.6149>:
     b8a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     b9a:	6e 74 65 72 00                                      nter.

00000b9f <__c.6147>:
     b9f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     baf:	6e 74 65 72 00                                      nter.

00000bb4 <__c.6144>:
     bb4:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     bc4:	74 65 72 20 00                                      ter .

00000bc9 <__c.6142>:
     bc9:	4f 64 6f 6d 65 74 65 72 3a 5f 20 00                 Odometer:_ .

00000bd5 <__c.6140>:
     bd5:	50 6c 61 74 20 4e 6f 3a 20 25 73 20 00              Plat No: %s .

00000be2 <__c.6137>:
     be2:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     bf2:	6e 74 65 72 00                                      nter.

00000bf7 <__c.6135>:
     bf7:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     c07:	6e 74 65 72 00                                      nter.

00000c0c <__c.6132>:
     c0c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c1c:	74 65 72 20 00                                      ter .

00000c21 <__c.6130>:
     c21:	5f 00                                               _.

00000c23 <__c.6128>:
     c23:	49 6e 70 75 74 20 50 6c 61 74 20 4e 6f 3a 20 00     Input Plat No: .

00000c33 <__c.6102>:
     c33:	23 29 53 61 76 65 00                                #)Save.

00000c3a <__c.6100>:
     c3a:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c47 <__c.6098>:
     c47:	25 64 00                                            %d.

00000c4a <__c.6086>:
     c4a:	25 64 00                                            %d.

00000c4d <__c.6078>:
     c4d:	23 29 53 61 76 65 00                                #)Save.

00000c54 <__c.6076>:
     c54:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c61 <__c.6074>:
     c61:	33 29 4e 6f 74 69 66 20 3a 20 20 20 20 20 2a 29     3)Notif :     *)
     c71:	45 78 69 74 00                                      Exit.

00000c76 <__c.6072>:
     c76:	32 29 44 2f 54 20 20 20 3a 00                       2)D/T   :.

00000c80 <__c.6070>:
     c80:	31 29 4d 6f 6e 65 79 20 3a 00                       1)Money :.

00000c8a <__c.6055>:
     c8a:	25 2e 32 64 00                                      %.2d.

00000c8f <__c.6053>:
     c8f:	25 64 00                                            %d.

00000c92 <__c.6036>:
     c92:	25 2e 32 64 00                                      %.2d.

00000c97 <__c.6034>:
     c97:	25 64 00                                            %d.

00000c9a <__c.6026>:
     c9a:	34 29 43 75 74 20 3a 20 20 2a 29 45 78 69 74 00     4)Cut :  *)Exit.

00000caa <__c.6024>:
     caa:	33 29 4c 6f 67 6f 3a 20 20 23 29 53 61 76 65 00     3)Logo:  #)Save.

00000cba <__c.6022>:
     cba:	32 29 53 69 7a 65 3a 20 20 36 29 53 70 61 63 65     2)Size:  6)Space
     cca:	20 3a 00                                             :.

00000ccd <__c.6020>:
     ccd:	31 29 54 79 70 65 3a 20 20 35 29 53 63 72 6f 6c     1)Type:  5)Scrol
     cdd:	6c 3a 00                                            l:.

00000ce0 <__c.5996>:
     ce0:	2a 29 43 61 6e 63 65 6c 20 20 20 20 20 20 23 29     *)Cancel      #)
     cf0:	53 61 76 65 00                                      Save.

00000cf5 <__c.5994>:
     cf5:	54 49 4d 45 20 3a 20 00                             TIME : .

00000cfd <__c.5992>:
     cfd:	44 41 54 45 20 3a 20 00                             DATE : .

00000d05 <__c.5973>:
     d05:	25 64 00                                            %d.

00000d08 <__c.5962>:
     d08:	25 64 00                                            %d.

00000d0b <__c.5954>:
     d0b:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 23 29     *)Exit        #)
     d1b:	53 61 76 65 00                                      Save.

00000d20 <__c.5952>:
     d20:	32 29 4e 32 3a 20 20 34 29 4e 34 3a 20 20 36 29     2)N2:  4)N4:  6)
     d30:	4e 36 3a 00                                         N6:.

00000d34 <__c.5950>:
     d34:	31 29 4e 31 3a 20 20 33 29 4e 33 3a 20 20 35 29     1)N1:  3)N3:  5)
     d44:	4e 35 3a 00                                         N5:.

00000d48 <__c.5948>:
     d48:	50 72 6f 64 75 63 74 20 46 49 50 25 2e 32 64 00     Product FIP%.2d.

00000d58 <__c.5918>:
     d58:	43 6f 6d 70 6c 65 74 65 64 00                       Completed.

00000d62 <__c.5916>:
     d62:	43 61 6e 63 65 6c 20 20 20 20 20 00                 Cancel     .

00000d6e <__c.5913>:
     d6e:	49 64 5b 25 64 5d 3d 25 2e 32 64 20 20 00           Id[%d]=%.2d  .

00000d7c <__c.5910>:
     d7c:	53 61 76 69 6e 67 2e 2e 00                          Saving...

00000d85 <__c.5908>:
     d85:	2d 50 75 6d 70 49 44 2d 00                          -PumpID-.

00000d8e <__c.5904>:
     d8e:	20 20 20 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 20         Not Allowed 
     d9e:	20 20 20 20 00                                          .

00000da3 <__c.5902>:
     da3:	20 20 44 75 70 6c 69 63 61 74 65 20 50 75 6d 70       Duplicate Pump
     db3:	49 44 20 20 00                                      ID  .

00000db8 <__c.5900>:
     db8:	20 20 20 20 20 20 57 61 72 6e 69 6e 67 21 20 20           Warning!  
     dc8:	20 20 20 20 00                                          .

00000dcd <__c.5888>:
     dcd:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ddd:	2e 32 64 00                                         .2d.

00000de1 <__c.5882>:
     de1:	23 29 53 61 76 65 00                                #)Save.

00000de8 <__c.5880>:
     de8:	2a 29 42 61 63 6b 00                                *)Back.

00000def <__c.5875>:
     def:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     dff:	2e 32 64 00                                         .2d.

00000e03 <__c.5843>:
     e03:	25 2e 32 64 00                                      %.2d.

00000e08 <__c.5837>:
     e08:	25 2e 32 64 00                                      %.2d.

00000e0d <__c.5835>:
     e0d:	34 29 34 3a 20 20 20 38 29 38 3a 20 20 20 2a 29     4)4:   8)8:   *)
     e1d:	45 78 69 74 00                                      Exit.

00000e22 <__c.5833>:
     e22:	33 29 33 3a 20 20 20 37 29 37 3a 20 20 20 23 29     3)3:   7)7:   #)
     e32:	53 61 76 65 00                                      Save.

00000e37 <__c.5831>:
     e37:	32 29 32 3a 20 20 20 36 29 36 3a 00                 2)2:   6)6:.

00000e43 <__c.5829>:
     e43:	31 29 31 3a 20 20 20 35 29 35 3a 00                 1)1:   5)5:.

00000e4f <__c.5811>:
     e4f:	5b 2a 5d 45 78 69 74 20 20 5b 23 5d 43 68 61 6e     [*]Exit  [#]Chan
     e5f:	67 65 20 00                                         ge .

00000e63 <__c.5809>:
     e63:	25 64 2e 25 73 00                                   %d.%s.

00000e69 <__c.5804>:
     e69:	2d 44 69 73 70 65 6e 73 65 72 20 42 72 61 6e 64     -Dispenser Brand
     e79:	2d 00                                               -.

00000e7b <__c.5789>:
     e7b:	2a 29 45 78 69 74 00                                *)Exit.

00000e82 <__c.5787>:
     e82:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00000e8c <__c.5785>:
     e8c:	31 29 49 44 00                                      1)ID.

00000e91 <__c.5779>:
     e91:	2a 29 45 78 69 74 00                                *)Exit.

00000e98 <__c.5774>:
     e98:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ea8:	2e 32 64 20 00                                      .2d .

00000ead <__c.5766>:
     ead:	25 2e 32 64 00                                      %.2d.

00000eb2 <__c.5670>:
     eb2:	5b 2a 5d 45 78 69 74 00                             [*]Exit.

00000eba <__c.5668>:
     eba:	36 2e 41 63 74 3a 25 64 00                          6.Act:%d.

00000ec3 <__c.5666>:
     ec3:	35 2e 44 6c 79 3a 25 64 00                          5.Dly:%d.

00000ecc <__c.5664>:
     ecc:	34 2e 54 69 6d 50 6f 6f 6c 3a 25 64 00              4.TimPool:%d.

00000ed9 <__c.5662>:
     ed9:	33 2e 54 72 79 53 65 6e 64 3a 25 64 00              3.TrySend:%d.

00000ee6 <__c.5660>:
     ee6:	32 2e 6e 4e 6f 50 75 6d 70 3a 25 64 00              2.nNoPump:%d.

00000ef3 <__c.5658>:
     ef3:	31 2e 4d 61 78 50 75 6d 70 3a 25 64 00              1.MaxPump:%d.

00000f00 <__c.5640>:
     f00:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00000f0d <__c.5635>:
     f0d:	43 4f 4d 25 64 3a 25 64 00                          COM%d:%d.

00000f16 <__c.5633>:
     f16:	20 20 20 20 20 2d 42 61 75 64 72 61 74 65 2d 20          -Baudrate- 
     f26:	20 20 20 20 00                                          .

00000f2b <__c.5628>:
     f2b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 00           [*]Back      .

00000f39 <__c.5626>:
     f39:	33 2e 43 4f 4d 33 3a 34 38 35 00                    3.COM3:485.

00000f44 <__c.5624>:
     f44:	33 2e 43 4f 4d 33 3a 32 33 32 00                    3.COM3:232.

00000f4f <__c.5622>:
     f4f:	33 2e 43 4f 4d 33 3a 54 54 4c 00                    3.COM3:TTL.

00000f5a <__c.5620>:
     f5a:	32 2e 42 61 75 64 72 61 74 65 00                    2.Baudrate.

00000f65 <__c.5618>:
     f65:	31 2e 4d 6f 64 65 3a 53 74 61 6e 64 61 6c 6f 6e     1.Mode:Standalon
     f75:	65 00                                               e.

00000f77 <__c.5616>:
     f77:	31 2e 4d 6f 64 65 3a 53 6c 61 76 65 00              1.Mode:Slave.

00000f84 <__c.5614>:
     f84:	31 2e 4d 6f 64 65 3a 4e 6f 6e 65 00                 1.Mode:None.

00000f90 <__c.5596>:
     f90:	49 6e 76 61 6c 69 64 20 4f 6c 64 20 50 61 73 73     Invalid Old Pass
     fa0:	77 6f 72 64 00                                      word.

00000fa5 <__c.5594>:
     fa5:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     fb5:	20 20 20 20 00                                          .

00000fba <__c.5592>:
     fba:	49 6e 76 61 6c 69 64 20 4e 65 77 20 50 61 73 73     Invalid New Pass
     fca:	77 6f 72 64 00                                      word.

00000fcf <__c.5590>:
     fcf:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     fdf:	20 20 20 20 00                                          .

00000fe4 <__c.5588>:
     fe4:	20 20 20 50 61 73 73 77 6f 72 64 20 53 61 76 65        Password Save
     ff4:	64 20 20 20 00                                      d   .

00000ff9 <__c.5586>:
     ff9:	20 20 20 20 20 43 6f 6d 70 6c 65 74 65 64 20 20          Completed  
    1009:	20 20 20 20 00                                          .

0000100e <__c.5582>:
    100e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    101e:	6e 74 65 72 00                                      nter.

00001023 <__c.5579>:
    1023:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1033:	6e 74 65 72 00                                      nter.

00001038 <__c.5576>:
    1038:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1048:	6e 74 65 72 00                                      nter.

0000104d <__c.5574>:
    104d:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    105d:	20 20 20 20 00                                          .

00001062 <__c.5570>:
    1062:	56 61 6c 69 64 61 74 69 6e 67 2e 2e 00              Validating...

0000106f <__c.5566>:
    106f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    107f:	6e 74 65 72 00                                      nter.

00001084 <__c.5563>:
    1084:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1094:	6e 74 65 72 00                                      nter.

00001099 <__c.5558>:
    1099:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10a9:	6e 74 65 72 00                                      nter.

000010ae <__c.5556>:
    10ae:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    10be:	20 20 20 20 00                                          .

000010c3 <__c.5552>:
    10c3:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10d3:	6e 74 65 72 00                                      nter.

000010d8 <__c.5549>:
    10d8:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    10e8:	6e 74 65 72 00                                      nter.

000010ed <__c.5544>:
    10ed:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10fd:	6e 74 65 72 00                                      nter.

00001102 <__c.5542>:
    1102:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    1112:	20 20 20 20 00                                          .

00001117 <__c.5538>:
    1117:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1127:	6e 74 65 72 00                                      nter.

0000112c <__c.5536>:
    112c:	4f 6c 64 3a 5f 00                                   Old:_.

00001132 <__c.5534>:
    1132:	2d 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 2d 00     -Administrator-.

00001142 <__c.5532>:
    1142:	2d 53 75 70 65 72 76 69 73 6f 72 2d 00              -Supervisor-.

0000114f <__c.5524>:
    114f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

0000115c <__c.5522>:
    115c:	32 2e 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 00     2.Administrator.

0000116c <__c.5520>:
    116c:	31 2e 53 75 70 65 72 76 69 73 6f 72 00              1.Supervisor.

00001179 <__c.5518>:
    1179:	2d 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72 64     -Change Password
    1189:	2d 00                                               -.

0000118b <__c.5515>:
    118b:	53 61 76 65 64 20 00                                Saved .

00001192 <__c.5509>:
    1192:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11a2:	6e 74 65 72 00                                      nter.

000011a7 <__c.5506>:
    11a7:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    11b7:	6e 74 65 72 00                                      nter.

000011bc <__c.5501>:
    11bc:	5b 2a 5d 4e 6f 20 20 20 20 5b 23 5d 59 65 73 00     [*]No    [#]Yes.

000011cc <__c.5499>:
    11cc:	53 61 76 65 3f 00                                   Save?.

000011d2 <__c.5497>:
    11d2:	4e 65 77 20 4f 70 65 72 61 74 6f 72 3a 00           New Operator:.

000011e0 <__c.5495>:
    11e0:	25 73 00                                            %s.

000011e3 <__c.5491>:
    11e3:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11f3:	6e 74 65 72 00                                      nter.

000011f8 <__c.5489>:
    11f8:	4e 65 77 20 3a 5f 20 20 20 20 20 20 20 20 20 20     New :_          
    1208:	20 20 20 20 00                                          .

0000120d <__c.5487>:
    120d:	4e 61 6d 65 3a 00                                   Name:.

00001213 <__c.5485>:
    1213:	25 73 00                                            %s.

00001216 <__c.5476>:
    1216:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1226:	20 00                                                .

00001228 <__c.5474>:
    1228:	32 2e 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72     2.Change Passwor
    1238:	64 00                                               d.

0000123a <__c.5472>:
    123a:	31 2e 43 68 61 6e 67 65 20 4f 70 65 72 61 74 6f     1.Change Operato
    124a:	72 00                                               r.

0000124c <__c.5439>:
    124c:	2a 29 42 61 63 6b 00                                *)Back.

00001253 <__c.5437>:
    1253:	34 2e 53 70 61 72 61 74 6f 72 3a 25 63 20 00        4.Sparator:%c .

00001262 <__c.5435>:
    1262:	33 2e 44 65 63 69 6d 61 6c 20 3a 25 63 20 00        3.Decimal :%c .

00001271 <__c.5433>:
    1271:	32 2e 54 2e 4d 6f 6e 65 79 20 3a 25 64 20 00        2.T.Money :%d .

00001280 <__c.5431>:
    1280:	31 2e 54 2e 56 6f 6c 75 6d 65 3a 25 64 20 00        1.T.Volume:%d .

0000128f <__c.5426>:
    128f:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4e 65 78 74     [*]Back  [#]Next
	...

000012a0 <__c.5424>:
    12a0:	33 2e 4d 6f 6e 65 79 20 3a 25 64 00                 3.Money :%d.

000012ac <__c.5422>:
    12ac:	32 2e 56 6f 6c 75 6d 65 3a 25 64 00                 2.Volume:%d.

000012b8 <__c.5420>:
    12b8:	31 2e 50 72 69 63 65 20 3a 25 64 00                 1.Price :%d.

000012c4 <__c.5405>:
    12c4:	34 29 42 72 61 6e 64 20 20 2a 29 45 78 69 74 00     4)Brand  *)Exit.

000012d4 <__c.5403>:
    12d4:	33 29 4c 61 62 65 6c 20 20 00                       3)Label  .

000012de <__c.5401>:
    12de:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

000012e8 <__c.5399>:
    12e8:	31 29 49 44 20 20 20 20 20 00                       1)ID     .

000012f2 <__c.5390>:
    12f2:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1302:	20 20 20 20 00                                          .

00001307 <__c.5388>:
    1307:	4e 65 77 3a 5f 00                                   New:_.

0000130d <__c.5386>:
    130d:	4f 6c 64 3a 25 73 00                                Old:%s.

00001314 <__c.5384>:
    1314:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1324:	20 20 20 20 00                                          .

00001329 <__c.5382>:
    1329:	4e 65 77 3a 5f 00                                   New:_.

0000132f <__c.5380>:
    132f:	45 64 69 74 20 50 72 6f 64 75 63 74 20 4e 61 6d     Edit Product Nam
    133f:	65 20 20 20 00                                      e   .

00001344 <__c.5378>:
    1344:	4f 6c 64 3a 25 73 00                                Old:%s.

0000134b <__c.5375>:
    134b:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 00           *)Back       .

00001359 <__c.5373>:
    1359:	32 29 25 73 00                                      2)%s.

0000135e <__c.5371>:
    135e:	31 29 25 73 00                                      1)%s.

00001363 <__c.5366>:
    1363:	2a 29 42 61 63 6b 00                                *)Back.

0000136a <__c.5361>:
    136a:	25 64 29 25 73 00                                   %d)%s.

00001370 <__c.5316>:
    1370:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 20 20 20     *)Back          
    1380:	20 20 20 20 00                                          .

00001385 <__c.5314>:
    1385:	33 29 50 75 6d 70 50 6f 6f 6c 69 6e 67 20 20 20     3)PumpPooling   
    1395:	20 20 20 20 00                                          .

0000139a <__c.5312>:
    139a:	32 29 53 79 73 74 65 6d 20 20 20 20 20 20 20 20     2)System        
    13aa:	20 20 20 20 00                                          .

000013af <__c.5310>:
    13af:	31 29 4f 70 65 72 61 74 6f 72 20 20 20 20 20 20     1)Operator      
    13bf:	20 20 20 20 00                                          .

000013c4 <__c.5307>:
    13c4:	34 29 44 61 74 65 74 69 6d 65 20 2a 29 45 78 69     4)Datetime *)Exi
    13d4:	74 20 20 20 00                                      t   .

000013d9 <__c.5305>:
    13d9:	33 29 44 65 63 69 6d 61 6c 20 20 37 29 4e 65 78     3)Decimal  7)Nex
    13e9:	74 20 20 20 00                                      t   .

000013ee <__c.5303>:
    13ee:	32 29 50 75 6d 70 20 20 20 20 20 36 29 48 6f 73     2)Pump     6)Hos
    13fe:	74 20 20 20 00                                      t   .

00001403 <__c.5301>:
    1403:	31 29 50 72 6f 64 75 63 74 20 20 35 29 50 72 69     1)Product  5)Pri
    1413:	6e 74 65 72 00                                      nter.

00001418 <__c.5285>:
    1418:	2e 00                                               ..

0000141a <__c.5283>:
    141a:	25 64 00                                            %d.

0000141d <__c.5281>:
    141d:	20 20 20 00                                            .

00001421 <__c.5279>:
    1421:	2e 00                                               ..

00001423 <__c.5277>:
    1423:	25 64 00                                            %d.

00001426 <__c.5275>:
    1426:	20 20 20 00                                            .

0000142a <__c.5268>:
    142a:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    143a:	78 74 20 20 00                                      xt  .

0000143f <__c.5266>:
    143f:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    144f:	2e 20 20 20 00                                      .   .

00001454 <__c.5264>:
    1454:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

00001465 <__c.5262>:
    1465:	53 65 72 76 65 72 20 49 50 00                       Server IP.

0000146f <__c.5242>:
    146f:	2e 00                                               ..

00001471 <__c.5240>:
    1471:	25 64 00                                            %d.

00001474 <__c.5238>:
    1474:	20 20 20 00                                            .

00001478 <__c.5236>:
    1478:	2e 00                                               ..

0000147a <__c.5234>:
    147a:	25 64 00                                            %d.

0000147d <__c.5232>:
    147d:	20 20 20 00                                            .

00001481 <__c.5225>:
    1481:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    1491:	78 74 20 20 00                                      xt  .

00001496 <__c.5223>:
    1496:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    14a6:	2e 20 20 20 00                                      .   .

000014ab <__c.5221>:
    14ab:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014bc <__c.5219>:
    14bc:	43 6c 69 65 6e 74 20 49 50 00                       Client IP.

000014c6 <__c.5197>:
    14c6:	25 73 25 73 00                                      %s%s.

000014cb <__c.5193>:
    14cb:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

000014d8 <__c.5191>:
    14d8:	53 61 76 65 20 46 6f 6f 74 65 72 25 64 20 3f 00     Save Footer%d ?.

000014e8 <__c.5187>:
    14e8:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000014f6 <__c.5185>:
    14f6:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

00001504 <__c.5182>:
    1504:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

00001513 <__c.5180>:
    1513:	45 64 69 74 20 46 6f 6f 74 65 72 25 64 20 00        Edit Footer%d .

00001522 <__c.5176>:
    1522:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    1532:	20 20 20 20 00                                          .

00001537 <__c.5174>:
    1537:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1547:	20 20 20 20 00                                          .

0000154c <__c.5172>:
    154c:	32 29 46 6f 6f 74 65 72 32 20 20 34 29 46 6f 6f     2)Footer2  4)Foo
    155c:	74 65 72 34 00                                      ter4.

00001561 <__c.5170>:
    1561:	31 29 46 6f 6f 74 65 72 31 20 20 33 29 46 6f 6f     1)Footer1  3)Foo
    1571:	74 65 72 33 00                                      ter3.

00001576 <__c.5157>:
    1576:	25 73 25 73 00                                      %s%s.

0000157b <__c.5153>:
    157b:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

00001588 <__c.5151>:
    1588:	53 61 76 65 20 48 65 61 64 65 72 25 64 20 3f 00     Save Header%d ?.

00001598 <__c.5147>:
    1598:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000015a6 <__c.5145>:
    15a6:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

000015b4 <__c.5142>:
    15b4:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

000015c3 <__c.5140>:
    15c3:	45 64 69 74 20 48 65 61 64 65 72 25 64 20 00        Edit Header%d .

000015d2 <__c.5136>:
    15d2:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    15e2:	20 20 20 20 00                                          .

000015e7 <__c.5134>:
    15e7:	33 29 48 65 61 64 65 72 33 20 20 36 29 48 65 61     3)Header3  6)Hea
    15f7:	64 65 72 36 00                                      der6.

000015fc <__c.5132>:
    15fc:	32 29 48 65 61 64 65 72 32 20 20 35 29 48 65 61     2)Header2  5)Hea
    160c:	64 65 72 35 00                                      der5.

00001611 <__c.5130>:
    1611:	31 29 48 65 61 64 65 72 31 20 20 34 29 48 65 61     1)Header1  4)Hea
    1621:	64 65 72 34 00                                      der4.

00001626 <__c.5102>:
    1626:	2a 29 45 78 69 74 00                                *)Exit.

0000162d <__c.5100>:
    162d:	33 29 50 61 73 73 77 6f 72 64 20 20 20 20 20 20     3)Password      
    163d:	20 20 20 20 00                                          .

00001642 <__c.5098>:
    1642:	32 29 46 6f 6f 74 65 72 20 20 20 20 20 20 20 20     2)Footer        
    1652:	20 20 20 20 00                                          .

00001657 <__c.5096>:
    1657:	31 29 48 65 61 64 65 72 20 20 20 20 20 20 20 20     1)Header        
    1667:	20 20 20 20 00                                          .

0000166c <__c.5094>:
    166c:	32 29 46 6f 6f 74 65 72 20 20 20 20 35 29 53 65     2)Footer    5)Se
    167c:	72 76 65 72 00                                      rver.

00001681 <__c.5092>:
    1681:	31 29 48 65 61 64 65 72 20 20 20 20 34 29 43 6c     1)Header    4)Cl
    1691:	69 65 6e 74 00                                      ient.

00001696 <__c.5078>:
    1696:	53 61 76 69 6e 67 20 53 68 69 66 74 44 61 74 61     Saving ShiftData
    16a6:	2e 2e 20 00                                         .. .

000016aa <__c.5073>:
    16aa:	25 73 20 25 73 00                                   %s %s.

000016b0 <__c.5071>:
    16b0:	50 72 69 6e 74 69 6e 67 20 54 6f 74 61 6c 69 7a     Printing Totaliz
    16c0:	65 72 00                                            er.

000016c3 <__c.5067>:
    16c3:	43 61 6e 63 65 6c 00                                Cancel.

000016ca <__c.5062>:
    16ca:	45 72 72 6f 72 20 2d 20 4e 6f 20 50 75 6d 70 3a     Error - No Pump:
    16da:	25 64 20 00                                         %d .

000016de <__c.5057>:
    16de:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

000016ec <__c.5053>:
    16ec:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

000016fa <__c.5051>:
    16fa:	54 6f 74 61 6c 69 7a 65 72 2e 2e 00                 Totalizer...

00001706 <__c.5003>:
    1706:	2a 29 45 78 69 74 00                                *)Exit.

0000170d <__c.5001>:
    170d:	33 2e 4c 6f 63 6b 20 50 75 6d 70 20 20 00           3.Lock Pump  .

0000171b <__c.4999>:
    171b:	32 2e 43 6c 6f 73 65 20 44 61 79 20 20 00           2.Close Day  .

00001729 <__c.4997>:
    1729:	31 2e 43 6c 6f 73 65 20 53 68 69 66 74 00           1.Close Shift.

00001737 <__c.4970>:
    1737:	34 29 53 65 74 74 69 6e 67 73 20 20 20 2a 29 45     4)Settings   *)E
    1747:	78 69 74 20 00                                      xit .

0000174c <__c.4968>:
    174c:	33 29 43 6c 6f 73 65 44 61 79 20 20 20 20 20 20     3)CloseDay      
    175c:	20 20 20 20 00                                          .

00001761 <__c.4966>:
    1761:	32 29 43 6c 6f 73 65 53 68 69 66 74 20 20 20 20     2)CloseShift    
    1771:	20 20 20 20 00                                          .

00001776 <__c.4964>:
    1776:	31 29 52 65 50 72 69 6e 74 20 20 20 20 20 20 20     1)RePrint       
    1786:	20 20 20 20 00                                          .

0000178b <__c.4952>:
    178b:	50 61 73 73 77 6f 72 64 20 52 65 73 74 6f 72 65     Password Restore
    179b:	64 00                                               d.

0000179d <__c.4948>:
    179d:	49 6e 76 61 6c 69 64 20 52 65 73 74 6f 72 65 20     Invalid Restore 
    17ad:	20 00                                                .

000017af <__c.4945>:
    17af:	30 30 30 30 30 00                                   00000.

000017b5 <__c.4943>:
    17b5:	31 31 31 31 31 00                                   11111.

000017bb <__c.4939>:
    17bb:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    17cb:	6e 74 65 72 00                                      nter.

000017d0 <__c.4936>:
    17d0:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    17e0:	6e 74 65 72 00                                      nter.

000017e5 <__c.4929>:
    17e5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    17f5:	6e 74 65 72 00                                      nter.

000017fa <__c.4927>:
    17fa:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    180a:	20 20 20 20 00                                          .

0000180f <__c.4925>:
    180f:	45 6e 74 65 72 20 52 65 73 74 6f 72 65 20 43 6f     Enter Restore Co
    181f:	64 65 20 20 00                                      de  .

00001824 <__c.4923>:
    1824:	4b 65 79 20 53 74 61 6d 70 3a 25 73 20 00           Key Stamp:%s .

00001832 <__c.4919>:
    1832:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    1842:	20 20 20 20 00                                          .

00001847 <__c.4916>:
	...

00001848 <__c.4914>:
    1848:	25 73 00                                            %s.

0000184b <__c.4912>:
    184b:	25 73 00                                            %s.

0000184e <__c.4909>:
    184e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    185e:	6e 74 65 72 00                                      nter.

00001863 <__c.4906>:
    1863:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1873:	6e 74 65 72 00                                      nter.

00001878 <__c.4899>:
	...

00001879 <__c.4897>:
    1879:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1889:	6e 74 65 72 00                                      nter.

0000188e <__c.4895>:
    188e:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    189e:	20 20 20 20 00                                          .

000018a3 <__c.4893>:
    18a3:	45 6e 74 65 72 20 47 65 4e 69 55 73 20 43 6f 64     Enter GeNiUs Cod
    18b3:	65 20 20 20 00                                      e   .

000018b8 <__c.4888>:
    18b8:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    18c8:	20 20 20 20 00                                          .

000018cd <__c.4885>:
    18cd:	52 65 73 65 74 20 43 6f 6d 70 6c 65 74 65 00        Reset Complete.

000018dc <__c.4882>:
    18dc:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 00           Please Wait...

000018ea <__c.4880>:
    18ea:	52 65 73 65 74 20 45 45 50 52 4f 4d 00              Reset EEPROM.

000018f7 <__c.4876>:
    18f7:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1907:	6e 74 65 72 00                                      nter.

0000190c <__c.4873>:
    190c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    191c:	6e 74 65 72 00                                      nter.

00001921 <__c.4866>:
    1921:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1931:	6e 74 65 72 00                                      nter.

00001936 <__c.4864>:
    1936:	52 65 73 65 74 43 6f 64 65 3a 5f 20 20 20 20 20     ResetCode:_     
    1946:	20 20 20 20 00                                          .

0000194b <__c.4862>:
    194b:	53 65 65 64 20 43 6f 64 65 3a 25 73 00              Seed Code:%s.

00001958 <__c.4860>:
    1958:	2d 4d 61 73 74 65 72 20 52 65 73 65 74 2d 00        -Master Reset-.

00001967 <__c.4858>:
	...

00001968 <__c.4856>:
    1968:	32 32 33 34 35 36 37 38 00                          22345678.

00001971 <__c.4854>:
    1971:	25 73 00                                            %s.

00001974 <__c.4845>:
    1974:	5b 2a 5d 45 78 69 74 20 20 20 20 20 20 20 20 20     [*]Exit         
    1984:	20 20 20 20 00                                          .

00001989 <__c.4843>:
    1989:	32 2e 4d 61 73 74 65 72 20 52 65 73 65 74 20 20     2.Master Reset  
    1999:	20 20 20 20 00                                          .

0000199e <__c.4841>:
    199e:	31 2e 52 65 73 74 6f 72 65 20 50 61 73 73 77 6f     1.Restore Passwo
    19ae:	72 64 20 20 00                                      rd  .

000019b3 <__c.4839>:
    19b3:	2d 53 79 73 74 65 6d 20 41 64 6d 69 6e 20 4c 65     -System Admin Le
    19c3:	76 65 6c 2d 00                                      vel-.

000019c8 <__c.4810>:
    19c8:	25 73 25 73 00                                      %s%s.

000019cd <__c.4792>:
    19cd:	25 73 00                                            %s.

000019d0 <__c.4777>:
    19d0:	25 63 00                                            %c.

000019d3 <__c.4775>:
    19d3:	32 30 25 73 00                                      20%s.

000019d8 <__c.4763>:
    19d8:	25 73 00                                            %s.

000019db <__c.4737>:
    19db:	34 32 36 34 36 33 36 00                             4264636.

000019e3 <__c.4734>:
    19e3:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    19f3:	6e 74 65 72 00                                      nter.

000019f8 <__c.4732>:
    19f8:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1a08:	6e 74 65 72 00                                      nter.

00001a0d <__c.4728>:
    1a0d:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a1d:	6e 74 65 72 00                                      nter.

00001a22 <__c.4726>:
    1a22:	5f 00                                               _.

00001a24 <__c.4724>:
    1a24:	50 41 53 53 57 4f 52 44 3a 00                       PASSWORD:.

00001a2e <__c.4709>:
    1a2e:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001a3c <__c.4684>:
    1a3c:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001a49 <__c.4682>:
    1a49:	4e 6f 20 52 65 70 6c 79 20 20 20 20 00              No Reply    .

00001a56 <__c.4678>:
    1a56:	20 20 20 20 20 20 20 00                                    .

00001a5e <__c.4675>:
    1a5e:	50 6c 65 61 73 65 20 57 61 69 74 00                 Please Wait.

00001a6a <__c.4672>:
    1a6a:	25 73 00                                            %s.

00001a6d <__c.4670>:
    1a6d:	50 55 4d 50 20 54 45 53 54 00                       PUMP TEST.

00001a77 <__c.4667>:
    1a77:	25 73 00                                            %s.

00001a7a <__c.4664>:
    1a7a:	25 73 00                                            %s.

00001a7d <__c.4662>:
    1a7d:	25 73 00                                            %s.

00001a80 <__c.4660>:
    1a80:	25 73 00                                            %s.

00001a83 <__c.4656>:
    1a83:	25 73 00                                            %s.

00001a86 <__c.4652>:
    1a86:	50 72 6f 73 65 73 00                                Proses.

00001a8d <__c.4650>:
    1a8d:	2d 4d 4f 50 20 56 6f 75 63 68 65 72 2d 00           -MOP Voucher-.

00001a9b <__c.4647>:
    1a9b:	50 72 6f 73 65 73 00                                Proses.

00001aa2 <__c.4645>:
    1aa2:	49 44 3a 25 73 00                                   ID:%s.

00001aa8 <__c.4641>:
    1aa8:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ab8:	69 74 00                                            it.

00001abb <__c.4639>:
    1abb:	46 49 50 25 73 00                                   FIP%s.

00001ac1 <__c.4637>:
    1ac1:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001ad0 <__c.4628>:
    1ad0:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1ae0:	6e 74 65 72 00                                      nter.

00001ae5 <__c.4626>:
    1ae5:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1af5:	6e 74 65 72 00                                      nter.

00001afa <__c.4623>:
    1afa:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b0a:	6e 74 65 72 00                                      nter.

00001b0f <__c.4621>:
    1b0f:	53 75 72 63 68 61 72 67 65 3a 20 20 20 5f 25 00     Surcharge:   _%.

00001b1f <__c.4619>:
    1b1f:	25 73 00                                            %s.

00001b22 <__c.4615>:
    1b22:	5b 2a 5d 42 61 63 6b 00                             [*]Back.

00001b2a <__c.4610>:
    1b2a:	25 64 2e 25 73 00                                   %d.%s.

00001b30 <__c.4608>:
    1b30:	53 65 6c 65 63 74 20 42 61 6e 6b 00                 Select Bank.

00001b3c <__c.4603>:
    1b3c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b4c:	6e 74 65 72 00                                      nter.

00001b51 <__c.4601>:
    1b51:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b61:	6e 74 65 72 00                                      nter.

00001b66 <__c.4598>:
    1b66:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b76:	6e 74 65 72 00                                      nter.

00001b7b <__c.4596>:
    1b7b:	5f 00                                               _.

00001b7d <__c.4594>:
    1b7d:	4b 6f 64 65 20 56 6f 75 63 68 65 72 00              Kode Voucher.

00001b8a <__c.4585>:
    1b8a:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1b9a:	20 20 20 20 00                                          .

00001b9f <__c.4583>:
    1b9f:	32 2e 42 61 6e 6b 20 20 20 20 34 2e 50 75 6d 70     2.Bank    4.Pump
    1baf:	54 65 73 74 00                                      Test.

00001bb4 <__c.4581>:
    1bb4:	31 2e 41 63 63 6f 75 6e 74 20 33 2e 56 6f 75 63     1.Account 3.Vouc
    1bc4:	68 65 72 20 00                                      her .

00001bc9 <__c.4579>:
    1bc9:	20 20 20 53 65 6c 65 63 74 20 50 61 79 6d 65 6e        Select Paymen
    1bd9:	74 20 20 20 00                                      t   .

00001bde <__c.4549>:
    1bde:	43 52 45 44 49 54 43 41 52 44 00                    CREDITCARD.

00001be9 <__c.4543>:
    1be9:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1bf9:	20 20 20 20 00                                          .

00001bfe <__c.4541>:
    1bfe:	32 2e 43 72 65 64 69 74 20 43 61 72 64 20 20 20     2.Credit Card   
    1c0e:	20 20 20 20 00                                          .

00001c13 <__c.4539>:
    1c13:	31 2e 44 65 62 69 74 2f 46 6c 61 73 68 20 43 61     1.Debit/Flash Ca
    1c23:	72 64 20 20 00                                      rd  .

00001c28 <__c.4537>:
    1c28:	53 65 6c 65 63 74 20 43 61 72 64 20 54 79 70 65     Select Card Type
	...

00001c39 <__c.4523>:
    1c39:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001c47 <__c.4521>:
    1c47:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001c55 <__c.4514>:
    1c55:	50 72 65 73 73 20 41 6e 79 20 4b 65 79 00           Press Any Key.

00001c63 <__c.4512>:
    1c63:	43 6d 20 56 6f 6c 3a 25 73 00                       Cm Vol:%s.

00001c6d <__c.4510>:
    1c6d:	43 4d 20 41 6d 74 3a 25 73 00                       CM Amt:%s.

00001c77 <__c.4508>:
    1c77:	50 6f 69 6e 74 73 3a 25 73 00                       Points:%s.

00001c81 <__c.4506>:
    1c81:	25 73 3a 25 73 00                                   %s:%s.

00001c87 <__c.4499>:
    1c87:	50 72 6f 73 65 73 00                                Proses.

00001c8e <__c.4497>:
    1c8e:	49 44 3a 25 73 00                                   ID:%s.

00001c94 <__c.4493>:
    1c94:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ca4:	69 74 00                                            it.

00001ca7 <__c.4491>:
    1ca7:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cb6 <__c.4488>:
    1cb6:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1cc6:	69 74 00                                            it.

00001cc9 <__c.4486>:
    1cc9:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cd8 <__c.4484>:
    1cd8:	46 49 50 3a 25 73 00                                FIP:%s.

00001cdf <__c.4478>:
    1cdf:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1cef:	20 00                                                .

00001cf1 <__c.4476>:
    1cf1:	32 2e 4c 6f 79 61 6c 74 79 20 55 70 64 61 74 65     2.Loyalty Update
    1d01:	20 00                                                .

00001d03 <__c.4474>:
    1d03:	31 2e 45 6e 71 75 69 72 79 20 20 20 20 20 20 20     1.Enquiry       
    1d13:	20 00                                                .

00001d15 <__c.4472>:
    1d15:	20 20 4d 65 6e 75 20 4c 6f 79 61 6c 74 79 20 20       Menu Loyalty  
    1d25:	20 00                                                .

00001d27 <__c.4456>:
    1d27:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001d35 <__c.4454>:
    1d35:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001d43 <__c.4448>:
    1d43:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d53:	69 74 00                                            it.

00001d56 <__c.4446>:
    1d56:	54 61 70 20 53 75 70 65 72 76 69 73 6f 72 20 43     Tap Supervisor C
    1d66:	61 72 64 00                                         ard.

00001d6a <__c.4444>:
    1d6a:	52 65 50 72 69 6e 74 20 46 49 50 3a 25 73 20 00     RePrint FIP:%s .

00001d7a <__c.4440>:
    1d7a:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    1d8a:	6b 73 69 20 00                                      ksi .

00001d8f <__c.4431>:
    1d8f:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001d9d <__c.4413>:
    1d9d:	25 2e 32 64 00                                      %.2d.

00001da2 <__c.4409>:
    1da2:	2a 29 45 78 69 74 00                                *)Exit.

00001da9 <__c.4407>:
    1da9:	23 29 4f 4b 20 00                                   #)OK .

00001daf <__c.4405>:
    1daf:	20 20 20 20 20 00                                        .

00001db5 <__c.4403>:
    1db5:	46 49 50 3a 5f 00                                   FIP:_.

00001dbb <__c.4398>:
    1dbb:	25 64 2e 50 25 73 20 7c 20 25 64 2e 50 25 73 00     %d.P%s | %d.P%s.

00001dcb <__c.4361>:
    1dcb:	30 32 25 73 25 73 25 73 25 73 25 73 25 73 25 73     02%s%s%s%s%s%s%s
	...

00001ddc <__c.4336>:
    1ddc:	30 00                                               0.

00001dde <__c.4290>:
    1dde:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1dee:	20 20 20 20 00                                          .

00001df3 <__c.4285>:
    1df3:	23 25 73 00                                         #%s.

00001df7 <__c.4283>:
    1df7:	25 2e 32 64 00                                      %.2d.

00001dfc <__c.4281>:
    1dfc:	40 46 49 50 3a 00                                   @FIP:.

00001e02 <__c.4279>:
    1e02:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e12:	20 20 20 20 00                                          .

00001e17 <__c.4275>:
    1e17:	50 72 69 6e 74 69 6e 67 20 46 49 50 25 73 20 00     Printing FIP%s .

00001e27 <__c.4258>:
    1e27:	44 3a 25 64 20 43 3a 25 63 20 20 00                 D:%d C:%c  .

00001e33 <__c.4249>:
    1e33:	25 73 20 25 73 00                                   %s %s.

00001e39 <__c.4240>:
    1e39:	4e 6f 20 50 75 6d 70 20 46 6f 75 6e 64 00           No Pump Found.

00001e47 <__c.4238>:
    1e47:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001e54 <__c.4236>:
    1e54:	50 75 6d 70 46 6f 75 6e 64 00                       PumpFound.

00001e5e <__c.4234>:
    1e5e:	43 6f 6e 6e 65 63 74 65 64 20 20 20 20 20 20 20     Connected       
    1e6e:	20 20 20 20 00                                          .

00001e73 <__c.4229>:
    1e73:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e83:	20 20 20 00                                            .

00001e87 <__c.4227>:
    1e87:	25 73 00                                            %s.

00001e8a <__c.4222>:
    1e8a:	53 63 61 6e 20 50 75 6d 70 00                       Scan Pump.

00001e94 <__c.4217>:
    1e94:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ea5 <__c.4215>:
    1ea5:	43 6f 6e 6e 65 63 74 00                             Connect.

00001ead <__c.4213>:
    1ead:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ebe <__c.4195>:
    1ebe:	43 4f 4d 25 64 3a 25 69 20 20 20 20 20 20 20 20     COM%d:%i        
    1ece:	20 20 20 00                                            .

00001ed2 <__c.4193>:
    1ed2:	49 6e 69 74 69 61 6c 69 7a 65 20 43 4f 4d 20 2e     Initialize COM .
    1ee2:	2e 2e 00                                            ...

00001ee5 <__c.4170>:
    1ee5:	0a 47 65 4e 69 55 73 20 54 69 63 6b 65 74 20 50     .GeNiUs Ticket P
    1ef5:	72 69 6e 74 65 72 20 0a 20 56 65 72 73 69 6f 6e     rinter . Version
    1f05:	3a 25 73 0a 20 4c 61 73 74 20 55 70 64 61 74 65     :%s. Last Update
    1f15:	20 25 73 20 0a 20 48 61 6e 69 6e 64 6f 20 41 75      %s . Hanindo Au
    1f25:	74 6f 6d 61 74 69 6f 6e 20 53 6f 6c 75 74 69 6f     tomation Solutio
    1f35:	6e 73 20 0a 20 77 77 77 2e 68 61 6e 69 6e 64 6f     ns . www.hanindo
    1f45:	67 72 6f 75 70 2e 63 6f 6d 0a 0a 0a 0a 0a 0a 0a     group.com.......
    1f55:	0a 00                                               ..

00001f57 <__c.4168>:
    1f57:	32 34 2f 30 32 2f 32 30 31 31 00                    24/02/2011.

00001f62 <__c.4166>:
    1f62:	32 2e 34 30 00                                      2.40.

00001f67 <__c.4157>:
    1f67:	46 75 65 6c 69 6e 67 20 40 46 49 50 3a 23 25 64     Fueling @FIP:#%d
	...

00001f78 <__c.4155>:
    1f78:	54 72 61 6e 73 61 6b 73 69 20 53 65 6c 65 73 61     Transaksi Selesa
    1f88:	69 00                                               i.

00001f8a <__c.4151>:
    1f8a:	49 44 3a 20 25 73 00                                ID: %s.

00001f91 <__c.4149>:
    1f91:	25 73 00                                            %s.

00001f94 <__c.4147>:
    1f94:	50 25 73 20 25 73 20 00                             P%s %s .

00001f9c <__c.4143>:
    1f9c:	46 49 50 20 54 69 64 61 6b 20 53 69 61 70 20 20     FIP Tidak Siap  
    1fac:	20 20 00                                              .

00001faf <__c.4140>:
    1faf:	41 75 74 68 6f 72 69 73 61 73 69 20 42 65 72 68     Authorisasi Berh
    1fbf:	61 73 69 6c 00                                      asil.

00001fc4 <__c.4136>:
    1fc4:	41 75 74 68 6f 72 69 73 61 73 69 20 47 61 67 61     Authorisasi Gaga
    1fd4:	6c 20 20 20 00                                      l   .

00001fd9 <__c.4132>:
    1fd9:	20 20 20 20 20 20 20 00                                    .

00001fe1 <__c.4129>:
    1fe1:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1ff1:	20 20 20 20 00                                          .

00001ff6 <__c.4127>:
    1ff6:	4d 6f 68 6f 6e 20 54 75 6e 67 67 75 20 20 20 20     Mohon Tunggu    
    2006:	20 20 20 20 00                                          .

0000200b <__c.4125>:
    200b:	25 73 00                                            %s.

0000200e <__c.4123>:
    200e:	50 25 73 20 25 73 20 00                             P%s %s .

00002016 <__c.4120>:
    2016:	43 61 6e 63 65 6c 20 54 72 61 6e 73 61 63 74 69     Cancel Transacti
    2026:	6f 6e 20 20 00                                      on  .

0000202b <__c.4117>:
    202b:	5b 2a 5d 42 61 63 6b 20 5b 30 5d 45 53 43 20 5b     [*]Back [0]ESC [
    203b:	23 5d 4f 4b 00                                      #]OK.

00002040 <__c.4115>:
    2040:	25 73 20 00                                         %s .

00002044 <__c.4113>:
    2044:	20 46 75 6c 6c 00                                    Full.

0000204a <__c.4111>:
    204a:	25 73 20 20 25 73 20 00                             %s  %s .

00002052 <__c.4109>:
    2052:	49 44 3a 20 25 73 00                                ID: %s.

00002059 <__c.4107>:
    2059:	25 73 20 00                                         %s .

0000205d <__c.4103>:
    205d:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    206d:	20 00                                                .

0000206f <__c.4101>:
    206f:	4f 64 6f 6d 65 74 65 72 3a 5f 20 20 20 20 20 20     Odometer:_      
    207f:	20 00                                                .

00002081 <__c.4099>:
    2081:	25 73 20 00                                         %s .

00002085 <__c.4097>:
    2085:	20 20 25 73 20 25 73 20 00                            %s %s .

0000208e <__c.4095>:
    208e:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 41 6d 6f     Pump Product Amo
    209e:	75 6e 74 00                                         unt.

000020a2 <__c.4093>:
    20a2:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 56 6f 6c     Pump Product Vol
    20b2:	75 6d 65 00                                         ume.

000020b6 <__c.4091>:
    20b6:	20 20 54 61 6e 6b 00                                  Tank.

000020bd <__c.4089>:
    20bd:	20 20 25 73 20 25 73 20 00                            %s %s .

000020c6 <__c.4087>:
    20c6:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 20 20 46     Pump Product   F
    20d6:	75 6c 6c 00                                         ull.

000020da <__c.4083>:
    20da:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    20ea:	20 20 20 20 00                                          .

000020ef <__c.4081>:
    20ef:	5b 32 5d 41 6d 6f 75 6e 74 3a 5f 20 20 20 20 20     [2]Amount:_     
    20ff:	20 20 20 20 00                                          .

00002104 <__c.4079>:
    2104:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2114:	20 20 20 20 00                                          .

00002119 <__c.4077>:
    2119:	50 25 73 2d 25 73 20 00                             P%s-%s .

00002121 <__c.4075>:
    2121:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    2131:	20 20 20 20 00                                          .

00002136 <__c.4073>:
    2136:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2146:	20 20 20 20 00                                          .

0000214b <__c.4071>:
    214b:	5b 31 5d 56 6f 6c 75 6d 65 3a 5f 20 20 20 20 20     [1]Volume:_     
    215b:	20 20 20 20 00                                          .

00002160 <__c.4069>:
    2160:	50 25 73 2d 25 73 20 00                             P%s-%s .

00002168 <__c.4066>:
    2168:	41 00                                               A.

0000216a <__c.4064>:
    216a:	41 00                                               A.

0000216c <__c.4062>:
    216c:	56 00                                               V.

0000216e <__c.4059>:
    216e:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 4e 65     [*]Back    [#]Ne
    217e:	78 74 20 20 00                                      xt  .

00002183 <__c.4057>:
    2183:	5b 32 5d 41 6d 6f 75 6e 74 20 20 20 20 20 20 20     [2]Amount       
    2193:	20 20 20 20 00                                          .

00002198 <__c.4055>:
    2198:	5b 31 5d 56 6f 6c 75 6d 65 20 20 20 20 20 20 20     [1]Volume       
    21a8:	20 20 20 20 00                                          .

000021ad <__c.4053>:
    21ad:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021b5 <__c.4050>:
    21b5:	25 73 00                                            %s.

000021b8 <__c.4047>:
    21b8:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    21c8:	20 20 20 20 00                                          .

000021cd <__c.4042>:
    21cd:	20 20 20 20 20 00                                        .

000021d3 <__c.4040>:
    21d3:	25 64 2e 25 73 00                                   %d.%s.

000021d9 <__c.4038>:
    21d9:	25 73 00                                            %s.

000021dc <__c.4036>:
    21dc:	50 6f 6d 70 61 2d 25 73 00                          Pompa-%s.

000021e5 <__c.4032>:
    21e5:	25 2e 32 64 00                                      %.2d.

000021ea <__c.4030>:
    21ea:	25 2e 32 64 00                                      %.2d.

000021ef <__c.4026>:
    21ef:	5b 2a 5d 42 61 74 61 6c 20 20 20 20 20 20 20 5b     [*]Batal       [
    21ff:	23 5d 4f 4b 00                                      #]OK.

00002204 <__c.4024>:
    2204:	25 73 20 25 73 00                                   %s %s.

0000220a <__c.4022>:
    220a:	25 73 00                                            %s.

0000220d <__c.4020>:
    220d:	25 73 00                                            %s.

00002210 <__c.4018>:
    2210:	25 73 00                                            %s.

00002213 <__c.4015>:
    2213:	4b 61 72 74 75 20 54 65 72 62 61 74 61 73 20 20     Kartu Terbatas  
    2223:	20 20 20 20 00                                          .

00002228 <__c.4013>:
    2228:	54 69 64 61 6b 20 54 65 72 64 61 66 74 61 72 20     Tidak Terdaftar 
    2238:	20 20 20 20 00                                          .

0000223d <__c.4010>:
    223d:	44 61 74 61 20 52 65 63 65 69 76 65 64 20 20 20     Data Received   
    224d:	20 20 20 20 00                                          .

00002252 <__c.4007>:
    2252:	54 43 50 2f 49 50 20 45 72 72 6f 72 20 20 20 20     TCP/IP Error    
    2262:	20 20 20 20 00                                          .

00002267 <__c.4005>:
    2267:	53 65 6e 64 69 6e 67 20 46 61 69 6c 65 64 20 20     Sending Failed  
    2277:	20 20 20 20 00                                          .

0000227c <__c.4002>:
    227c:	20 20 20 20 20 20 20 00                                    .

00002284 <__c.3997>:
    2284:	50 72 6f 73 65 73 00                                Proses.

0000228b <__c.3995>:
    228b:	49 44 3a 25 73 00                                   ID:%s.

00002291 <__c.3993>:
    2291:	20 20 20 4c 6f 63 61 6c 20 41 63 63 6f 75 6e 74        Local Account
    22a1:	20 20 20 00                                            .

000022a5 <__c.3878>:
    22a5:	25 2e 32 64 00                                      %.2d.

000022aa <__c.3851>:
    22aa:	46 39 36 38 43 46 46 42 00                          F968CFFB.

000022b3 <__c.3849>:
    22b3:	25 73 00                                            %s.

000022b6 <__c.3846>:
    22b6:	25 73 25 73 25 73 00                                %s%s%s.

000022bd <__c.3844>:
    22bd:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

000022c6 <__c.3841>:
    22c6:	25 73 25 73 00                                      %s%s.

000022cb <__c.3838>:
    22cb:	25 73 00                                            %s.

000022ce <__c.3836>:
    22ce:	46 30 30 30 30 30 30 30 45 31 32 33 34 35 36 46     F0000000E123456F
    22de:	46 46 46 46 00                                      FFFF.

000022e3 <__c.3834>:
    22e3:	25 73 25 73 25 64 00                                %s%s%d.

000022ea <__c.3832>:
    22ea:	25 73 25 73 25 64 00                                %s%s%d.

000022f1 <__c.3829>:
    22f1:	25 73 00                                            %s.

000022f4 <__c.3826>:
    22f4:	25 73 25 73 00                                      %s%s.

000022f9 <__c.3824>:
    22f9:	25 73 25 73 00                                      %s%s.

000022fe <__c.3822>:
    22fe:	25 73 25 73 00                                      %s%s.

00002303 <__c.3819>:
    2303:	25 73 25 73 00                                      %s%s.

00002308 <__c.3816>:
    2308:	25 73 25 73 00                                      %s%s.

0000230d <__c.3813>:
    230d:	25 73 00                                            %s.

00002310 <__c.3808>:
    2310:	25 73 31 00                                         %s1.

00002314 <__c.3805>:
    2314:	25 2e 32 58 00                                      %.2X.

00002319 <__c.3803>:
    2319:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2329:	2e 33 64 00                                         .3d.

0000232d <__c.3801>:
    232d:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    233d:	2e 33 64 00                                         .3d.

00002341 <__c.3799>:
    2341:	25 2e 32 64 00                                      %.2d.

00002346 <__c.3797>:
    2346:	25 2e 32 64 00                                      %.2d.

0000234b <__c.3746>:
    234b:	25 73 20 25 73 00                                   %s %s.

00002351 <__c.3744>:
    2351:	32 2e 34 30 00                                      2.40.

00002356 <__c.3742>:
    2356:	47 65 4e 69 55 73 00                                GeNiUs.

0000235d <__c.3732>:
    235d:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 20     Press any key.. 
    236d:	20 20 20 20 00                                          .

00002372 <__c.3724>:
    2372:	5b 31 5d 53 6c 61 76 65 20 5b 32 5d 53 74 61 6e     [1]Slave [2]Stan
    2382:	64 61 6c 6f 6e 65 00                                dalone.

00002389 <__c.3695>:
    2389:	3e 00                                               >.

0000238b <__c.3690>:
    238b:	25 2e 32 64 00                                      %.2d.

00002390 <__c.3688>:
    2390:	25 2e 32 64 00                                      %.2d.

00002395 <__c.3686>:
    2395:	30 00                                               0.

00002397 <__c.3684>:
    2397:	31 00                                               1.

00002399 <__c.3676>:
    2399:	25 64 00                                            %d.

0000239c <__c.3671>:
    239c:	25 2e 32 64 00                                      %.2d.

000023a1 <__c.3666>:
    23a1:	25 73 00                                            %s.

000023a4 <__c.3661>:
    23a4:	25 73 00                                            %s.

000023a7 <__c.3656>:
    23a7:	25 73 00                                            %s.

000023aa <__c.3654>:
    23aa:	3c 00                                               <.

000023ac <__c.3633>:
    23ac:	3c 4f 4b 3e 00                                      <OK>.

000023b1 <__c.3628>:
    23b1:	25 64 00                                            %d.

000023b4 <__c.3626>:
    23b4:	25 64 00                                            %d.

000023b7 <__c.3614>:
    23b7:	25 64 00                                            %d.

000023ba <__c.3603>:
    23ba:	3c 53 61 76 69 6e 67 3e 00                          <Saving>.

000023c3 <__c.3601>:
    23c3:	4c 65 6e 67 74 68 3a 25 64 00                       Length:%d.

000023cd <__c.3509>:
    23cd:	25 73 00                                            %s.

000023d0 <__c.3473>:
    23d0:	25 73 00                                            %s.

000023d3 <__c.3471>:
    23d3:	25 73 00                                            %s.

000023d6 <__c.3469>:
    23d6:	25 73 00                                            %s.

000023d9 <__c.3467>:
    23d9:	25 73 00                                            %s.

000023dc <__c.3465>:
    23dc:	25 2e 32 64 00                                      %.2d.

000023e1 <__c.3463>:
    23e1:	25 64 00                                            %d.

000023e4 <__c.3461>:
    23e4:	25 73 00                                            %s.

000023e7 <__c.3459>:
    23e7:	25 73 00                                            %s.

000023ea <__c.3457>:
    23ea:	25 73 00                                            %s.

000023ed <__c.3455>:
    23ed:	25 64 00                                            %d.

000023f0 <__c.3453>:
    23f0:	4e 2f 41 00                                         N/A.

000023f4 <__c.3415>:
    23f4:	25 64 00                                            %d.

000023f7 <__c.3413>:
    23f7:	25 73 00                                            %s.

000023fa <__c.3411>:
    23fa:	25 73 00                                            %s.

000023fd <__c.3377>:
    23fd:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    240d:	6b 73 69 20 00                                      ksi .

00002412 <__c.3374>:
    2412:	54 6f 74 61 6c 69 7a 65 72 41 6c 6c 20 20 20 20     TotalizerAll    
    2422:	20 00                                                .

00002424 <__c.3371>:
    2424:	43 6c 65 61 72 20 44 61 74 61 20 54 6f 74 61 6c     Clear Data Total
    2434:	69 7a 65 72 00                                      izer.

00002439 <__c.3359>:
    2439:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

0000244a <__c.3356>:
    244a:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    245a:	20 20 20 20 00                                          .

0000245f <__c.3353>:
    245f:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    246f:	20 20 20 20 00                                          .

00002474 <__c.3351>:
    2474:	4e 6f 20 52 65 73 70 6f 6e 73 65 2e 2e 20 20 20     No Response..   
    2484:	20 20 20 20 00                                          .

00002489 <__c.3348>:
    2489:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 20 20 20     Please Wait..   
    2499:	20 20 20 20 00                                          .

0000249e <__c.3345>:
    249e:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24ae:	20 20 20 20 00                                          .

000024b3 <__c.3342>:
    24b3:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    24c3:	6b 73 69 20 00                                      ksi .

000024c8 <__c.3337>:
    24c8:	53 65 64 61 6e 67 50 72 6f 73 65 73 00              SedangProses.

000024d5 <__c.3334>:
    24d5:	34 33 35 36 41 33 31 41 00                          4356A31A.

000024de <__c.1815>:
    24de:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    24ee:	20 20 20 20 00                                          .

000024f3 <__c.1813>:
    24f3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2503:	20 20 20 20 00                                          .

00002508 <__c.1811>:
    2508:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2518:	20 20 20 20 00                                          .

0000251d <__c.1809>:
    251d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    252d:	20 20 20 20 00                                          .

00002532 <__alphanum>:
    2532:	30 20 2e 00 00 00 31 2e 2c 3f 21 00 32 61 62 63     0 ....1.,?!.2abc
    2542:	00 00 33 64 65 66 00 00 34 67 68 69 00 00 35 6a     ..3def..4ghi..5j
    2552:	6b 6c 00 00 36 6d 6e 6f 00 00 37 70 71 72 73 00     kl..6mno..7pqrs.
    2562:	38 74 75 76 00 00 39 77 78 79 7a 00 30 20 2e 00     8tuv..9wxyz.0 ..
    2572:	00 00 31 26 40 2b 2d 00 32 41 42 43 00 00 33 44     ..1&@+-.2ABC..3D
    2582:	45 46 00 00 34 47 48 49 00 00 35 4a 4b 4c 00 00     EF..4GHI..5JKL..
    2592:	36 4d 4e 4f 00 00 37 50 51 52 53 00 38 54 55 56     6MNO..7PQRS.8TUV
    25a2:	00 00 39 57 58 59 5a 00                             ..9WXYZ.

000025aa <__maxchar>:
    25aa:	02 04 03 03 03 03 03 04 03 04                       ..........

000025b4 <__ctors_end>:
    25b4:	11 24       	eor	r1, r1
    25b6:	1f be       	out	0x3f, r1	; 63
    25b8:	cf ef       	ldi	r28, 0xFF	; 255
    25ba:	d0 e1       	ldi	r29, 0x10	; 16
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	cd bf       	out	0x3d, r28	; 61

000025c0 <__do_copy_data>:
    25c0:	12 e0       	ldi	r17, 0x02	; 2
    25c2:	a0 e0       	ldi	r26, 0x00	; 0
    25c4:	b1 e0       	ldi	r27, 0x01	; 1
    25c6:	ea e6       	ldi	r30, 0x6A	; 106
    25c8:	f2 e5       	ldi	r31, 0x52	; 82
    25ca:	01 e0       	ldi	r16, 0x01	; 1
    25cc:	0b bf       	out	0x3b, r16	; 59
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <__do_copy_data+0x14>
    25d0:	07 90       	elpm	r0, Z+
    25d2:	0d 92       	st	X+, r0
    25d4:	aa 33       	cpi	r26, 0x3A	; 58
    25d6:	b1 07       	cpc	r27, r17
    25d8:	d9 f7       	brne	.-10     	; 0x25d0 <__do_copy_data+0x10>

000025da <__do_clear_bss>:
    25da:	1d e0       	ldi	r17, 0x0D	; 13
    25dc:	aa e3       	ldi	r26, 0x3A	; 58
    25de:	b2 e0       	ldi	r27, 0x02	; 2
    25e0:	01 c0       	rjmp	.+2      	; 0x25e4 <.do_clear_bss_start>

000025e2 <.do_clear_bss_loop>:
    25e2:	1d 92       	st	X+, r1

000025e4 <.do_clear_bss_start>:
    25e4:	a1 39       	cpi	r26, 0x91	; 145
    25e6:	b1 07       	cpc	r27, r17
    25e8:	e1 f7       	brne	.-8      	; 0x25e2 <.do_clear_bss_loop>
    25ea:	0e 94 b1 13 	call	0x2762	; 0x2762 <main>
    25ee:	0c 94 33 a9 	jmp	0x15266	; 0x15266 <_exit>

000025f2 <__bad_interrupt>:
    25f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000025f6 <systemOnReset>:


void systemOnReset(){
     char SubMenu,KeyPressed,KeyChar,IsMasterReset=False;

     IsPowerOn=False;
    25f6:	10 92 98 03 	sts	0x0398, r1
     if (MCUCSR & 1){   // Power-on Reset
    25fa:	04 b6       	in	r0, 0x34	; 52
    25fc:	00 fe       	sbrs	r0, 0
    25fe:	32 c0       	rjmp	.+100    	; 0x2664 <systemOnReset+0x6e>
         MCUCSR=0;lcd_printf(1,1,PSTR("PowerOn"));//Wiznet Blm Ready
    2600:	14 be       	out	0x34, r1	; 52
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	4a e6       	ldi	r20, 0x6A	; 106
    2608:	52 e0       	ldi	r21, 0x02	; 2
    260a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 IsPowerOn=True;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	80 93 98 03 	sts	0x0398, r24
         //Master Reset Detection
		 PORTF = 0xFF; DDRF = 0xF0;
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	80 93 62 00 	sts	0x0062, r24
    261a:	80 ef       	ldi	r24, 0xF0	; 240
    261c:	80 93 61 00 	sts	0x0061, r24
		 KeyPressed=_key_scan(1);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		 KeyChar= _key_btn(KeyPressed);
    2626:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		 if (KeyChar=='5'){
    262a:	85 33       	cpi	r24, 0x35	; 53
    262c:	99 f5       	brne	.+102    	; 0x2694 <systemOnReset+0x9e>
		     system_beep(2);
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
		     IsMasterReset=True;
			 TCCR1B |= (1 << WGM12);
    2636:	8e b5       	in	r24, 0x2e	; 46
    2638:	88 60       	ori	r24, 0x08	; 8
    263a:	8e bd       	out	0x2e, r24	; 46
			 TIMSK |= (1 << OCIE1A);
    263c:	87 b7       	in	r24, 0x37	; 55
    263e:	80 61       	ori	r24, 0x10	; 16
    2640:	87 bf       	out	0x37, r24	; 55
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2642:	78 94       	sei
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2644:	88 e0       	ldi	r24, 0x08	; 8
    2646:	9d e3       	ldi	r25, 0x3D	; 61
    2648:	9b bd       	out	0x2b, r25	; 43
    264a:	8a bd       	out	0x2a, r24	; 42
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
    264c:	8e b5       	in	r24, 0x2e	; 46
    264e:	83 60       	ori	r24, 0x03	; 3
    2650:	8e bd       	out	0x2e, r24	; 46
		     while(IsMasterReset==True){
    2652:	03 c0       	rjmp	.+6      	; 0x265a <systemOnReset+0x64>
			       SubMenu=FMenuMaster();
				   if (SubMenu==MENU_DONE){
				       IsMasterReset=False;
					   lcd_clear();
    2654:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
					   break;
    2658:	1d c0       	rjmp	.+58     	; 0x2694 <systemOnReset+0x9e>
			 TIMSK |= (1 << OCIE1A);
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
		     while(IsMasterReset==True){
			       SubMenu=FMenuMaster();
    265a:	0e 94 1e 9a 	call	0x1343c	; 0x1343c <FMenuMaster>
				   if (SubMenu==MENU_DONE){
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	e1 f7       	brne	.-8      	; 0x265a <systemOnReset+0x64>
    2662:	f8 cf       	rjmp	.-16     	; 0x2654 <systemOnReset+0x5e>
				   }
			 }		 
		 }
         }
     else 
     if (MCUCSR & 2){   // External Reset
    2664:	04 b6       	in	r0, 0x34	; 52
    2666:	01 fe       	sbrs	r0, 1
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <systemOnReset+0x80>
         MCUCSR=0;lcd_printf(1,1,PSTR("External"));
    266a:	14 be       	out	0x34, r1	; 52
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	61 e0       	ldi	r22, 0x01	; 1
    2670:	41 e6       	ldi	r20, 0x61	; 97
    2672:	52 e0       	ldi	r21, 0x02	; 2
    2674:	0d c0       	rjmp	.+26     	; 0x2690 <systemOnReset+0x9a>
        }
     else 
     if (MCUCSR & 4){   // Brown-Out Reset
    2676:	04 b6       	in	r0, 0x34	; 52
    2678:	02 fe       	sbrs	r0, 2
    267a:	06 c0       	rjmp	.+12     	; 0x2688 <systemOnReset+0x92>
         MCUCSR=0;lcd_printf(1,1,PSTR("BrownOut"));
    267c:	14 be       	out	0x34, r1	; 52
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	61 e0       	ldi	r22, 0x01	; 1
    2682:	48 e5       	ldi	r20, 0x58	; 88
    2684:	52 e0       	ldi	r21, 0x02	; 2
    2686:	04 c0       	rjmp	.+8      	; 0x2690 <systemOnReset+0x9a>
         }
     else		  // Watchdog Reset
        {
         lcd_printf(1,1,PSTR("WatchDog"));
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	61 e0       	ldi	r22, 0x01	; 1
    268c:	4f e4       	ldi	r20, 0x4F	; 79
    268e:	52 e0       	ldi	r21, 0x02	; 2
    2690:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
        };
     MCUCSR=0;		  
    2694:	14 be       	out	0x34, r1	; 52
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2696:	8f ef       	ldi	r24, 0xFF	; 255
    2698:	9f ef       	ldi	r25, 0xFF	; 255
    269a:	a5 e3       	ldi	r26, 0x35	; 53
    269c:	81 50       	subi	r24, 0x01	; 1
    269e:	90 40       	sbci	r25, 0x00	; 0
    26a0:	a0 40       	sbci	r26, 0x00	; 0
    26a2:	e1 f7       	brne	.-8      	; 0x269c <systemOnReset+0xa6>
    26a4:	00 c0       	rjmp	.+0      	; 0x26a6 <systemOnReset+0xb0>
    26a6:	00 00       	nop
	 _delay_ms(1200);
}
    26a8:	08 95       	ret

000026aa <SystemInit>:


void SystemInit(){
	unsigned int __delay =300;
	lcd_init();
    26aa:	0e 94 ab 9f 	call	0x13f56	; 0x13f56 <lcd_init>
	lcd_clear();
    26ae:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	BackLightTrig();
    26b2:	0e 94 18 16 	call	0x2c30	; 0x2c30 <BackLightTrig>
	systemOnReset();
    26b6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <systemOnReset>

	lcd_printf(4, 1, PSTR("Initialize... "));
    26ba:	84 e0       	ldi	r24, 0x04	; 4
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	40 e4       	ldi	r20, 0x40	; 64
    26c0:	52 e0       	ldi	r21, 0x02	; 2
    26c2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    26c6:	8f ef       	ldi	r24, 0xFF	; 255
    26c8:	9f e7       	ldi	r25, 0x7F	; 127
    26ca:	ad e0       	ldi	r26, 0x0D	; 13
    26cc:	81 50       	subi	r24, 0x01	; 1
    26ce:	90 40       	sbci	r25, 0x00	; 0
    26d0:	a0 40       	sbci	r26, 0x00	; 0
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <SystemInit+0x22>
    26d4:	00 c0       	rjmp	.+0      	; 0x26d6 <SystemInit+0x2c>
    26d6:	00 00       	nop
	_delay_ms(__delay);
	PORTA = 0XFF;		// Buffer for PORTA
    26d8:	8f ef       	ldi	r24, 0xFF	; 255
    26da:	8b bb       	out	0x1b, r24	; 27
	DDRA = 0xFF;		// Pin 3 out (SS _SPI_SLAVE)
    26dc:	8a bb       	out	0x1a, r24	; 26
	sbi(PORTA, 3);		// Disable SS _SPI_SLAVE
    26de:	db 9a       	sbi	0x1b, 3	; 27

	//Buzzer PORTB.5
	PORTB = 0xFF;DDRB = 0xFF;
    26e0:	88 bb       	out	0x18, r24	; 24
    26e2:	87 bb       	out	0x17, r24	; 23
	PORTD = 0b00001101;
    26e4:	9d e0       	ldi	r25, 0x0D	; 13
    26e6:	92 bb       	out	0x12, r25	; 18
    DDRD =  0b00001001;
    26e8:	99 e0       	ldi	r25, 0x09	; 9
    26ea:	91 bb       	out	0x11, r25	; 17

	TWBR = 0xFF;
    26ec:	80 93 70 00 	sts	0x0070, r24
    //MMC
	PORTE = 0x0E;		// Buffer for PORTE
    26f0:	9e e0       	ldi	r25, 0x0E	; 14
    26f2:	93 b9       	out	0x03, r25	; 3
	DDRE = 0x0E;		// Pin 3 out (SS _SPI_MMC), pin 2 out (HB)
    26f4:	92 b9       	out	0x02, r25	; 2
	sbi(PORTE, 3);		// Disable SS _SPI_MMC
    26f6:	1b 9a       	sbi	0x03, 3	; 3
	cbi(PORTE, 2);		// HB on
    26f8:	1a 98       	cbi	0x03, 2	; 3

	//Keypad
	PORTF = 0xFF;		// Buffer for PORTF
    26fa:	80 93 62 00 	sts	0x0062, r24
	DDRF = 0xF0;		// 4 bit row, 4 bit column
    26fe:	80 ef       	ldi	r24, 0xF0	; 240
    2700:	80 93 61 00 	sts	0x0061, r24

  	_spi_init(0,1);//Slave
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	0e 94 fd a1 	call	0x143fa	; 0x143fa <_spi_init>
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    270c:	bb 9a       	sbi	0x17, 3	; 23
    270e:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    2710:	ba 98       	cbi	0x17, 2	; 23
    2712:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    2714:	b9 98       	cbi	0x17, 1	; 23
    2716:	c1 9a       	sbi	0x18, 1	; 24

	TCCR1B |= (1 << WGM12);
    2718:	8e b5       	in	r24, 0x2e	; 46
    271a:	88 60       	ori	r24, 0x08	; 8
    271c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
    271e:	87 b7       	in	r24, 0x37	; 55
    2720:	80 61       	ori	r24, 0x10	; 16
    2722:	87 bf       	out	0x37, r24	; 55
	sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2724:	78 94       	sei
	OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2726:	88 e0       	ldi	r24, 0x08	; 8
    2728:	9d e3       	ldi	r25, 0x3D	; 61
    272a:	9b bd       	out	0x2b, r25	; 43
    272c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11));
    272e:	8e b5       	in	r24, 0x2e	; 46
    2730:	83 60       	ori	r24, 0x03	; 3
    2732:	8e bd       	out	0x2e, r24	; 46

	SendSlaveCommand(SC_SLAVE,ST_NONE);
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
	
	InitComport();
    273c:	0e 94 3a 18 	call	0x3074	; 0x3074 <InitComport>
	_LIGHT_SET;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 8c 03 	sts	0x038C, r24
    2746:	10 92 8d 03 	sts	0x038D, r1
    274a:	e5 e6       	ldi	r30, 0x65	; 101
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8d 7f       	andi	r24, 0xFD	; 253
    2752:	80 83       	st	Z, r24
	InitPrinter();
    2754:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <InitPrinter>
    InitializeConnection();
    2758:	0e 94 6c 4a 	call	0x94d8	; 0x94d8 <InitializeConnection>
	lcd_clear();
    275c:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
}
    2760:	08 95       	ret

00002762 <main>:

//Master4 =1+20++2+1
void SystemInit();
//Program Utama
int main(){
	SystemInit();
    2762:	0e 94 55 13 	call	0x26aa	; 0x26aa <SystemInit>
	while(1){
	//FTestChar();
	//TestUserInput();
    FMenuIdle();
    2766:	0e 94 7e 9d 	call	0x13afc	; 0x13afc <FMenuIdle>
    276a:	fd cf       	rjmp	.-6      	; 0x2766 <main+0x4>

0000276c <__vector_12>:
	  strDispenserName3,
	  strDispenserName4,
	  strDispenserName5,
};

ISR(TIMER1_COMPA_vect){//Timer Overflow 1ms
    276c:	1f 92       	push	r1
    276e:	0f 92       	push	r0
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	0f 92       	push	r0
    2774:	11 24       	eor	r1, r1
    2776:	6f 93       	push	r22
    2778:	7f 93       	push	r23
    277a:	8f 93       	push	r24
    277c:	9f 93       	push	r25
	if(__key_light == 1){
    277e:	80 91 8c 03 	lds	r24, 0x038C
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	81 f4       	brne	.+32     	; 0x27a6 <__vector_12+0x3a>
		__key_lgtcnt++;
    2786:	80 91 8d 03 	lds	r24, 0x038D
    278a:	8f 5f       	subi	r24, 0xFF	; 255
    278c:	80 93 8d 03 	sts	0x038D, r24
		if(__key_lgtcnt == 150){
    2790:	86 39       	cpi	r24, 0x96	; 150
    2792:	49 f4       	brne	.+18     	; 0x27a6 <__vector_12+0x3a>
		   __key_light = 0; 
    2794:	10 92 8c 03 	sts	0x038C, r1
		   __key_lgtcnt = 0; 
    2798:	10 92 8d 03 	sts	0x038D, r1
		   sbi(PORTG, 1);
    279c:	80 91 65 00 	lds	r24, 0x0065
    27a0:	82 60       	ori	r24, 0x02	; 2
    27a2:	80 93 65 00 	sts	0x0065, r24
		   }
	}

	//Beep
	if (TimBeep>0){
    27a6:	80 91 9a 02 	lds	r24, 0x029A
    27aa:	88 23       	and	r24, r24
    27ac:	31 f0       	breq	.+12     	; 0x27ba <__vector_12+0x4e>
	    TimBeep--;
    27ae:	81 50       	subi	r24, 0x01	; 1
    27b0:	80 93 9a 02 	sts	0x029A, r24
		DDRB=(DDRB|0b00100000);
    27b4:	bd 9a       	sbi	0x17, 5	; 23
	    PORTB=(PORTB&0b11011111);
    27b6:	c5 98       	cbi	0x18, 5	; 24
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <__vector_12+0x58>
	    }
	else{PORTB=(PORTB|~PORTB);
    27ba:	98 b3       	in	r25, 0x18	; 24
    27bc:	88 b3       	in	r24, 0x18	; 24
    27be:	80 95       	com	r24
    27c0:	89 2b       	or	r24, r25
    27c2:	88 bb       	out	0x18, r24	; 24
		}
    //LocalAccount
	TimLocAcc++;
    27c4:	80 91 98 02 	lds	r24, 0x0298
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	80 93 98 02 	sts	0x0298, r24
	//DisplaTicker
    TimTicker++;
    27ce:	80 91 6e 02 	lds	r24, 0x026E
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	80 93 6e 02 	sts	0x026E, r24
	TimPressed++;
    27d8:	80 91 6f 02 	lds	r24, 0x026F
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	80 93 6f 02 	sts	0x026F, r24
	if ((TimPressed%5)==0){
    27e2:	65 e0       	ldi	r22, 0x05	; 5
    27e4:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    27e8:	99 23       	and	r25, r25
    27ea:	71 f4       	brne	.+28     	; 0x2808 <__vector_12+0x9c>
	    PORTE = PORTE^0x04;
    27ec:	83 b1       	in	r24, 0x03	; 3
    27ee:	94 e0       	ldi	r25, 0x04	; 4
    27f0:	89 27       	eor	r24, r25
    27f2:	83 b9       	out	0x03, r24	; 3
	    TimDisplay++;
    27f4:	80 91 70 02 	lds	r24, 0x0270
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	80 93 70 02 	sts	0x0270, r24
		TimPrintBusy++;
    27fe:	80 91 94 02 	lds	r24, 0x0294
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	80 93 94 02 	sts	0x0294, r24
	}
	if ((TimPressed%PRESSED_DELAY)==0){
    2808:	80 91 6f 02 	lds	r24, 0x026F
    280c:	6a e0       	ldi	r22, 0x0A	; 10
    280e:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    2812:	99 23       	and	r25, r25
    2814:	29 f4       	brne	.+10     	; 0x2820 <__vector_12+0xb4>
	     ProcTimeOut++;
    2816:	80 91 99 02 	lds	r24, 0x0299
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	80 93 99 02 	sts	0x0299, r24
	}
	TimSend++;
    2820:	80 91 56 0d 	lds	r24, 0x0D56
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	80 93 56 0d 	sts	0x0D56, r24
}
    282a:	9f 91       	pop	r25
    282c:	8f 91       	pop	r24
    282e:	7f 91       	pop	r23
    2830:	6f 91       	pop	r22
    2832:	0f 90       	pop	r0
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	0f 90       	pop	r0
    2838:	1f 90       	pop	r1
    283a:	18 95       	reti

0000283c <RePrintStandalone>:

char RePrintStandalone(char FIPAddr){
     char Result=PS_NONE;

   return Result;
}
    283c:	86 e1       	ldi	r24, 0x16	; 22
    283e:	08 95       	ret

00002840 <GetPumpStatusLabel>:
	 //BAsedOnGrade
   return Result;
}


char GetPumpStatusLabel(char xPumpStatus){
    2840:	8e 31       	cpi	r24, 0x1E	; 30
    2842:	30 f4       	brcc	.+12     	; 0x2850 <GetPumpStatusLabel+0x10>
    2844:	e8 2f       	mov	r30, r24
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	e4 5a       	subi	r30, 0xA4	; 164
    284a:	fe 4f       	sbci	r31, 0xFE	; 254
    284c:	80 81       	ld	r24, Z
    284e:	08 95       	ret
    2850:	88 e7       	ldi	r24, 0x78	; 120
	 default:
          Result='x';
		  break;         	 
	 }
  return Result;	 
}
    2852:	08 95       	ret

00002854 <SendPoolingCommand>:
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    2854:	80 93 85 06 	sts	0x0685, r24
	 PoolMsg=plMsg;
    2858:	60 93 b1 0c 	sts	0x0CB1, r22
     IsControlPooling=True;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	80 93 62 02 	sts	0x0262, r24
}
    2862:	08 95       	ret

00002864 <ScanHiddenKeyFlow>:
	    }
    }//MSGDetection
}

void ScanHiddenKeyFlow(char KeyIn){
}
    2864:	08 95       	ret

00002866 <__vector_18>:
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
}

ISR(USART0_RX_vect){
    2866:	1f 92       	push	r1
    2868:	0f 92       	push	r0
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	0f 92       	push	r0
    286e:	11 24       	eor	r1, r1
    2870:	8f 93       	push	r24
    2872:	9f 93       	push	r25
	char dataRX0,IsSPI=False;
	dataRX0= UDR0;
    2874:	8c b1       	in	r24, 0x0c	; 12
	//PrintBusyDetection
	if ((IsBusyIdlePrinting==True)||(IsBusyFreePrinting==True)){
    2876:	90 91 90 02 	lds	r25, 0x0290
    287a:	91 30       	cpi	r25, 0x01	; 1
    287c:	21 f0       	breq	.+8      	; 0x2886 <__vector_18+0x20>
    287e:	90 91 92 02 	lds	r25, 0x0292
    2882:	91 30       	cpi	r25, 0x01	; 1
    2884:	51 f4       	brne	.+20     	; 0x289a <__vector_18+0x34>
	    if (dataRX0==19)IsBusyPrint=True;
    2886:	83 31       	cpi	r24, 0x13	; 19
    2888:	21 f4       	brne	.+8      	; 0x2892 <__vector_18+0x2c>
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 91 02 	sts	0x0291, r24
    2890:	04 c0       	rjmp	.+8      	; 0x289a <__vector_18+0x34>
		else 
	    if (dataRX0==17)IsBusyPrint=False;	
    2892:	81 31       	cpi	r24, 0x11	; 17
    2894:	11 f4       	brne	.+4      	; 0x289a <__vector_18+0x34>
    2896:	10 92 91 02 	sts	0x0291, r1
	}
}
    289a:	9f 91       	pop	r25
    289c:	8f 91       	pop	r24
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	0f 90       	pop	r0
    28a4:	1f 90       	pop	r1
    28a6:	18 95       	reti

000028a8 <ScanCommand>:

char ScanCommand(char *strFlow,char *fCommand){
     char Result;
	 Result=False;
   return Result;
}
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	08 95       	ret

000028ac <ConfigProtocol>:
}

void ConfigProtocol(char dataIn){
     static char Conflow[7];
    //Configuration Data Request 
	if ((Conflow[6]=='i')&&(Conflow[5]=='C')&&(Conflow[4]=='o')&&(Conflow[3]=='n')&&(Conflow[2]=='f')&&(Conflow[1]=='?')&&(Conflow[0]==0x0D)&&(dataIn==0x0A)){
    28ac:	90 91 7d 03 	lds	r25, 0x037D
    28b0:	99 36       	cpi	r25, 0x69	; 105
    28b2:	e9 f4       	brne	.+58     	; 0x28ee <ConfigProtocol+0x42>
    28b4:	90 91 7c 03 	lds	r25, 0x037C
    28b8:	93 34       	cpi	r25, 0x43	; 67
    28ba:	c9 f4       	brne	.+50     	; 0x28ee <ConfigProtocol+0x42>
    28bc:	90 91 7b 03 	lds	r25, 0x037B
    28c0:	9f 36       	cpi	r25, 0x6F	; 111
    28c2:	a9 f4       	brne	.+42     	; 0x28ee <ConfigProtocol+0x42>
    28c4:	90 91 7a 03 	lds	r25, 0x037A
    28c8:	9e 36       	cpi	r25, 0x6E	; 110
    28ca:	89 f4       	brne	.+34     	; 0x28ee <ConfigProtocol+0x42>
    28cc:	90 91 79 03 	lds	r25, 0x0379
    28d0:	96 36       	cpi	r25, 0x66	; 102
    28d2:	69 f4       	brne	.+26     	; 0x28ee <ConfigProtocol+0x42>
    28d4:	90 91 78 03 	lds	r25, 0x0378
    28d8:	9f 33       	cpi	r25, 0x3F	; 63
    28da:	49 f4       	brne	.+18     	; 0x28ee <ConfigProtocol+0x42>
    28dc:	90 91 77 03 	lds	r25, 0x0377
    28e0:	9d 30       	cpi	r25, 0x0D	; 13
    28e2:	29 f4       	brne	.+10     	; 0x28ee <ConfigProtocol+0x42>
    28e4:	8a 30       	cpi	r24, 0x0A	; 10
    28e6:	19 f4       	brne	.+6      	; 0x28ee <ConfigProtocol+0x42>
	     //SendConfigParamater();        
		 ConfigCommand=CC_SEND_CONFIG;
    28e8:	92 e0       	ldi	r25, 0x02	; 2
    28ea:	90 93 8e 02 	sts	0x028E, r25
	}

	if (IsConfigFlow==True){        
    28ee:	90 91 63 02 	lds	r25, 0x0263
    28f2:	91 30       	cpi	r25, 0x01	; 1
    28f4:	71 f4       	brne	.+28     	; 0x2912 <ConfigProtocol+0x66>
	    rcv_trans[char_count]=dataIn;
    28f6:	20 91 67 02 	lds	r18, 0x0267
    28fa:	30 91 68 02 	lds	r19, 0x0268
    28fe:	f9 01       	movw	r30, r18
    2900:	e5 50       	subi	r30, 0x05	; 5
    2902:	f6 4f       	sbci	r31, 0xF6	; 246
    2904:	80 83       	st	Z, r24
	    char_count++; 
    2906:	2f 5f       	subi	r18, 0xFF	; 255
    2908:	3f 4f       	sbci	r19, 0xFF	; 255
    290a:	30 93 68 02 	sts	0x0268, r19
    290e:	20 93 67 02 	sts	0x0267, r18
	}
	if ((Conflow[0]==0x04)&&(dataIn==0x40)){
    2912:	90 91 77 03 	lds	r25, 0x0377
    2916:	94 30       	cpi	r25, 0x04	; 4
    2918:	51 f4       	brne	.+20     	; 0x292e <ConfigProtocol+0x82>
    291a:	80 34       	cpi	r24, 0x40	; 64
    291c:	e9 f4       	brne	.+58     	; 0x2958 <ConfigProtocol+0xac>
	     IsConfigFlow=True;
    291e:	21 e0       	ldi	r18, 0x01	; 1
    2920:	20 93 63 02 	sts	0x0263, r18
		 char_count=0;
    2924:	10 92 68 02 	sts	0x0268, r1
    2928:	10 92 67 02 	sts	0x0267, r1
    292c:	15 c0       	rjmp	.+42     	; 0x2958 <ConfigProtocol+0xac>
	}
	//SavingData
	if ((Conflow[0]==0x05)&&(dataIn==0x50)){
    292e:	95 30       	cpi	r25, 0x05	; 5
    2930:	99 f4       	brne	.+38     	; 0x2958 <ConfigProtocol+0xac>
    2932:	80 35       	cpi	r24, 0x50	; 80
    2934:	89 f4       	brne	.+34     	; 0x2958 <ConfigProtocol+0xac>
	     transLength=char_count;
    2936:	20 91 67 02 	lds	r18, 0x0267
    293a:	30 91 68 02 	lds	r19, 0x0268
    293e:	30 93 6a 02 	sts	0x026A, r19
    2942:	20 93 69 02 	sts	0x0269, r18
		 char_count=0;
    2946:	10 92 68 02 	sts	0x0268, r1
    294a:	10 92 67 02 	sts	0x0267, r1
	     IsConfigFlow=False;
    294e:	10 92 63 02 	sts	0x0263, r1
		 ConfigCommand=CC_SAVE_CONFIG;
    2952:	21 e0       	ldi	r18, 0x01	; 1
    2954:	20 93 8e 02 	sts	0x028E, r18
		 //SaveConfigParameter();
	}

	//Shifting
	Conflow[6]=Conflow[5];
    2958:	20 91 7c 03 	lds	r18, 0x037C
    295c:	20 93 7d 03 	sts	0x037D, r18
	Conflow[5]=Conflow[4];
    2960:	20 91 7b 03 	lds	r18, 0x037B
    2964:	20 93 7c 03 	sts	0x037C, r18
	Conflow[4]=Conflow[3];
    2968:	20 91 7a 03 	lds	r18, 0x037A
    296c:	20 93 7b 03 	sts	0x037B, r18
	Conflow[3]=Conflow[2];
    2970:	20 91 79 03 	lds	r18, 0x0379
    2974:	20 93 7a 03 	sts	0x037A, r18
	Conflow[2]=Conflow[1];
    2978:	20 91 78 03 	lds	r18, 0x0378
    297c:	20 93 79 03 	sts	0x0379, r18
	Conflow[1]=Conflow[0];
    2980:	90 93 78 03 	sts	0x0378, r25
	Conflow[0]=dataIn;
    2984:	80 93 77 03 	sts	0x0377, r24

}
    2988:	08 95       	ret

0000298a <system_beep>:
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    298a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    298c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    298e:	80 93 9a 02 	sts	0x029A, r24
}
    2992:	08 95       	ret

00002994 <systemRestart>:
	 iRestart=0;
	 while(iRestart<100){
	       strRestart[iRestart]=iRestart;
	       iRestart++;	 
	 }
}
    2994:	08 95       	ret

00002996 <systemForceType>:

char systemForceType(){
     char Result,KeyChar;
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
    2996:	84 e0       	ldi	r24, 0x04	; 4
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	42 e7       	ldi	r20, 0x72	; 114
    299c:	53 e2       	ldi	r21, 0x23	; 35
    299e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	 system_beep(1);
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	9f ef       	ldi	r25, 0xFF	; 255
    29ae:	a8 e0       	ldi	r26, 0x08	; 8
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	90 40       	sbci	r25, 0x00	; 0
    29b4:	a0 40       	sbci	r26, 0x00	; 0
    29b6:	e1 f7       	brne	.-8      	; 0x29b0 <systemForceType+0x1a>
    29b8:	00 c0       	rjmp	.+0      	; 0x29ba <systemForceType+0x24>
    29ba:	00 00       	nop
	 _delay_ms(200);
	 system_beep(2);
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
	 while(1){
	    KeyChar=_key_btn(_key_scan(1));
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    29ca:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		if ((KeyChar=='1')||(KeyChar=='2')){
    29ce:	98 2f       	mov	r25, r24
    29d0:	91 53       	subi	r25, 0x31	; 49
    29d2:	92 30       	cpi	r25, 0x02	; 2
    29d4:	b8 f7       	brcc	.-18     	; 0x29c4 <systemForceType+0x2e>
		    Result=KeyChar;
			break;
		}
	 }
	return Result;
}
    29d6:	08 95       	ret

000029d8 <system_stop>:

void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
    29d8:	84 e0       	ldi	r24, 0x04	; 4
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	4d e5       	ldi	r20, 0x5D	; 93
    29de:	53 e2       	ldi	r21, 0x23	; 35
    29e0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	 system_beep(5);
    29e4:	85 e0       	ldi	r24, 0x05	; 5
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
	 while(1){
		__key = _key_scan(1);
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		__num = _key_btn(__key);
    29f2:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
    29f6:	80 53       	subi	r24, 0x30	; 48
    29f8:	8a 30       	cpi	r24, 0x0A	; 10
    29fa:	20 f0       	brcs	.+8      	; 0x2a04 <system_stop+0x2c>
    29fc:	80 91 7a 02 	lds	r24, 0x027A
    2a00:	81 30       	cpi	r24, 0x01	; 1
    2a02:	a1 f7       	brne	.-24     	; 0x29ec <system_stop+0x14>
    2a04:	08 95       	ret

00002a06 <DisplayScreenIdle>:
		break;
	 }
}

void DisplayScreenIdle(void){
    2a06:	cf 92       	push	r12
    2a08:	df 92       	push	r13
    2a0a:	ef 92       	push	r14
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	a8 97       	sbiw	r28, 0x28	; 40
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
char strCodeName[10],strVersion[10],lcdteks[20];
    sprintf_P(strCodeName,PSTR(CODE_NAME)); 
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <DisplayScreenIdle+0x22>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <DisplayScreenIdle+0x24>
    2a2a:	7e 01       	movw	r14, r28
    2a2c:	08 94       	sec
    2a2e:	e1 1c       	adc	r14, r1
    2a30:	f1 1c       	adc	r15, r1
    2a32:	ad b7       	in	r26, 0x3d	; 61
    2a34:	be b7       	in	r27, 0x3e	; 62
    2a36:	12 96       	adiw	r26, 0x02	; 2
    2a38:	fc 92       	st	X, r15
    2a3a:	ee 92       	st	-X, r14
    2a3c:	11 97       	sbiw	r26, 0x01	; 1
    2a3e:	86 e5       	ldi	r24, 0x56	; 86
    2a40:	93 e2       	ldi	r25, 0x23	; 35
    2a42:	14 96       	adiw	r26, 0x04	; 4
    2a44:	9c 93       	st	X, r25
    2a46:	8e 93       	st	-X, r24
    2a48:	13 97       	sbiw	r26, 0x03	; 3
    2a4a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    sprintf_P(strVersion,PSTR(VERSION_NUM)); 
    2a4e:	8e 01       	movw	r16, r28
    2a50:	05 5f       	subi	r16, 0xF5	; 245
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	ed b7       	in	r30, 0x3d	; 61
    2a56:	fe b7       	in	r31, 0x3e	; 62
    2a58:	12 83       	std	Z+2, r17	; 0x02
    2a5a:	01 83       	std	Z+1, r16	; 0x01
    2a5c:	81 e5       	ldi	r24, 0x51	; 81
    2a5e:	93 e2       	ldi	r25, 0x23	; 35
    2a60:	94 83       	std	Z+4, r25	; 0x04
    2a62:	83 83       	std	Z+3, r24	; 0x03
    2a64:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    sprintf_P(lcdteks,PSTR("%s %s"),strCodeName,strVersion); 
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <DisplayScreenIdle+0x64>
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <DisplayScreenIdle+0x66>
    2a6c:	ed b7       	in	r30, 0x3d	; 61
    2a6e:	fe b7       	in	r31, 0x3e	; 62
    2a70:	31 96       	adiw	r30, 0x01	; 1
    2a72:	85 e1       	ldi	r24, 0x15	; 21
    2a74:	c8 2e       	mov	r12, r24
    2a76:	d1 2c       	mov	r13, r1
    2a78:	cc 0e       	add	r12, r28
    2a7a:	dd 1e       	adc	r13, r29
    2a7c:	ad b7       	in	r26, 0x3d	; 61
    2a7e:	be b7       	in	r27, 0x3e	; 62
    2a80:	12 96       	adiw	r26, 0x02	; 2
    2a82:	dc 92       	st	X, r13
    2a84:	ce 92       	st	-X, r12
    2a86:	11 97       	sbiw	r26, 0x01	; 1
    2a88:	8b e4       	ldi	r24, 0x4B	; 75
    2a8a:	93 e2       	ldi	r25, 0x23	; 35
    2a8c:	93 83       	std	Z+3, r25	; 0x03
    2a8e:	82 83       	std	Z+2, r24	; 0x02
    2a90:	f5 82       	std	Z+5, r15	; 0x05
    2a92:	e4 82       	std	Z+4, r14	; 0x04
    2a94:	17 83       	std	Z+7, r17	; 0x07
    2a96:	06 83       	std	Z+6, r16	; 0x06
    2a98:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	lcd_clear();
    2a9c:	ed b7       	in	r30, 0x3d	; 61
    2a9e:	fe b7       	in	r31, 0x3e	; 62
    2aa0:	38 96       	adiw	r30, 0x08	; 8
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	fe bf       	out	0x3e, r31	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	ed bf       	out	0x3d, r30	; 61
    2aac:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	lcd_print(1,1,lcdteks);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	a6 01       	movw	r20, r12
    2ab6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
}
    2aba:	a8 96       	adiw	r28, 0x28	; 40
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	1f 91       	pop	r17
    2acc:	0f 91       	pop	r16
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	08 95       	ret

00002ad8 <Low>:

char Low(char X){
     char Result;
	 Result=(0x0F&X);
	 return Result;
}
    2ad8:	8f 70       	andi	r24, 0x0F	; 15
    2ada:	08 95       	ret

00002adc <High>:
char High(char X){
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
    2adc:	82 95       	swap	r24
    2ade:	8f 70       	andi	r24, 0x0F	; 15
    2ae0:	08 95       	ret

00002ae2 <Str>:
char Str(char H){
unsigned char Conv=0;
        if ((H>=0)&&(H<=9)) Conv='0'+H;
    2ae2:	8a 30       	cpi	r24, 0x0A	; 10
    2ae4:	10 f4       	brcc	.+4      	; 0x2aea <Str+0x8>
    2ae6:	80 5d       	subi	r24, 0xD0	; 208
    2ae8:	08 95       	ret
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
    2aea:	98 2f       	mov	r25, r24
    2aec:	9a 50       	subi	r25, 0x0A	; 10
    2aee:	96 30       	cpi	r25, 0x06	; 6
    2af0:	10 f4       	brcc	.+4      	; 0x2af6 <Str+0x14>
    2af2:	89 5c       	subi	r24, 0xC9	; 201
    2af4:	08 95       	ret
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
char Str(char H){
unsigned char Conv=0;
    2af6:	80 e0       	ldi	r24, 0x00	; 0
        if ((H>=0)&&(H<=9)) Conv='0'+H;
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
        return (Conv);
}
    2af8:	08 95       	ret

00002afa <charToHex>:

void charToHex(char X, char *Result){
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	18 2f       	mov	r17, r24
    2b02:	eb 01       	movw	r28, r22
     Result[0]=Str(High(X));
    2b04:	82 95       	swap	r24
    2b06:	8f 70       	andi	r24, 0x0F	; 15
    2b08:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <Str>
    2b0c:	88 83       	st	Y, r24
	 Result[1]=Str(Low(X));
    2b0e:	81 2f       	mov	r24, r17
    2b10:	8f 70       	andi	r24, 0x0F	; 15
    2b12:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <Str>
    2b16:	89 83       	std	Y+1, r24	; 0x01
	 Result[2]=0;
    2b18:	1a 82       	std	Y+2, r1	; 0x02
	 
}
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	08 95       	ret

00002b22 <strToInt>:

char strToInt(char *str){
     char Result;
     Result=(((str[0]-'0')*10) +(str[0]-'0'));
    2b22:	fc 01       	movw	r30, r24
    2b24:	90 81       	ld	r25, Z
    2b26:	8b e0       	ldi	r24, 0x0B	; 11
    2b28:	98 9f       	mul	r25, r24
    2b2a:	80 2d       	mov	r24, r0
    2b2c:	11 24       	eor	r1, r1
	 return Result;
}
    2b2e:	80 51       	subi	r24, 0x10	; 16
    2b30:	08 95       	ret

00002b32 <intToStr>:

void intToStr(char X, char *str){
    2b32:	28 2f       	mov	r18, r24
    2b34:	fb 01       	movw	r30, r22
     char R,P,S;
	 R=X/100;
    2b36:	64 e6       	ldi	r22, 0x64	; 100
    2b38:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    2b3c:	38 2f       	mov	r19, r24
    2b3e:	89 2f       	mov	r24, r25
	 P=(X%100)/10;
    2b40:	6a e0       	ldi	r22, 0x0A	; 10
    2b42:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
	 S=X-(R*100)-(P*10);
    2b46:	9c e9       	ldi	r25, 0x9C	; 156
    2b48:	39 9f       	mul	r19, r25
    2b4a:	90 2d       	mov	r25, r0
    2b4c:	11 24       	eor	r1, r1
    2b4e:	92 0f       	add	r25, r18
    2b50:	46 ef       	ldi	r20, 0xF6	; 246
    2b52:	84 9f       	mul	r24, r20
    2b54:	40 2d       	mov	r20, r0
    2b56:	11 24       	eor	r1, r1
    2b58:	94 0f       	add	r25, r20
	 if (X>=100){
    2b5a:	24 36       	cpi	r18, 0x64	; 100
    2b5c:	40 f0       	brcs	.+16     	; 0x2b6e <intToStr+0x3c>
	     str[0]=('0'+R);
    2b5e:	30 5d       	subi	r19, 0xD0	; 208
    2b60:	30 83       	st	Z, r19
	     str[1]=('0'+P);
    2b62:	80 5d       	subi	r24, 0xD0	; 208
    2b64:	81 83       	std	Z+1, r24	; 0x01
	     str[2]=('0'+S);
    2b66:	90 5d       	subi	r25, 0xD0	; 208
    2b68:	92 83       	std	Z+2, r25	; 0x02
	     str[3]=0;
    2b6a:	13 82       	std	Z+3, r1	; 0x03
    2b6c:	08 95       	ret
	 if ((X>=10)&&(X>100)){
	     str[0]=('0'+P);
	     str[1]=('0'+S);
	     str[2]=0;
	 }else 
	 if (X<=10){
    2b6e:	2b 30       	cpi	r18, 0x0B	; 11
    2b70:	18 f4       	brcc	.+6      	; 0x2b78 <intToStr+0x46>
	     str[0]=('0'+S);
    2b72:	90 5d       	subi	r25, 0xD0	; 208
    2b74:	90 83       	st	Z, r25
	     str[1]=0;
    2b76:	11 82       	std	Z+1, r1	; 0x01
    2b78:	08 95       	ret

00002b7a <UpdateClientIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
     sprintf_P(strClientIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
	 */
}
    2b7a:	08 95       	ret

00002b7c <UpdateServerIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
		 sprintf_P(strServerIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
		 */
}
    2b7c:	08 95       	ret

00002b7e <UpdateIFT_ID>:
void UpdateIFT_ID(){
    /* char IdIFT;
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
	 sprintf_P(strIFT_ID,PSTR("%.2d"),IdIFT);
	 */
}
    2b7e:	08 95       	ret

00002b80 <UpdateSeqNum>:
/*
     if (SeqNum<100)SeqNum++;
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 
    2b80:	08 95       	ret

00002b82 <UpdateCardID>:

void UpdateCardID(){
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
    2b86:	ef e2       	ldi	r30, 0x2F	; 47
    2b88:	fd e0       	ldi	r31, 0x0D	; 13
    2b8a:	01 90       	ld	r0, Z+
    2b8c:	00 20       	and	r0, r0
    2b8e:	e9 f7       	brne	.-6      	; 0x2b8a <UpdateCardID+0x8>
    2b90:	31 97       	sbiw	r30, 0x01	; 1
    2b92:	ef 52       	subi	r30, 0x2F	; 47
    2b94:	fd 40       	sbci	r31, 0x0D	; 13
    2b96:	a7 e6       	ldi	r26, 0x67	; 103
    2b98:	bc e0       	ldi	r27, 0x0C	; 12
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    2b9c:	ef 01       	movw	r28, r30
    2b9e:	c5 5e       	subi	r28, 0xE5	; 229
    2ba0:	d2 4f       	sbci	r29, 0xF2	; 242
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
    2ba6:	24 e1       	ldi	r18, 0x14	; 20
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	2e 1b       	sub	r18, r30
    2bac:	3f 0b       	sbc	r19, r31
    2bae:	40 e2       	ldi	r20, 0x20	; 32
    2bb0:	82 17       	cp	r24, r18
    2bb2:	93 07       	cpc	r25, r19
    2bb4:	14 f4       	brge	.+4      	; 0x2bba <UpdateCardID+0x38>
    2bb6:	4c 93       	st	X, r20
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <UpdateCardID+0x3c>
		else strCardID[i]=strRFID[i-(20-LengthID)];
    2bba:	58 81       	ld	r21, Y
    2bbc:	5c 93       	st	X, r21
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	11 96       	adiw	r26, 0x01	; 1
    2bc2:	21 96       	adiw	r28, 0x01	; 1
} 

void UpdateCardID(){
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
    2bc4:	84 31       	cpi	r24, 0x14	; 20
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	99 f7       	brne	.-26     	; 0x2bb0 <UpdateCardID+0x2e>
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;
    2bca:	10 92 7b 0c 	sts	0x0C7B, r1

}
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	08 95       	ret

00002bd4 <ViewCardID>:
}




void ViewCardID(){//+12345678 -->12345678
    2bd4:	ef e2       	ldi	r30, 0x2F	; 47
    2bd6:	fd e0       	ldi	r31, 0x0D	; 13
    2bd8:	a7 e6       	ldi	r26, 0x67	; 103
    2bda:	bc e0       	ldi	r27, 0x0C	; 12
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
    2bdc:	81 91       	ld	r24, Z+
    2bde:	8d 93       	st	X+, r24



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
    2be0:	8d e0       	ldi	r24, 0x0D	; 13
    2be2:	e7 33       	cpi	r30, 0x37	; 55
    2be4:	f8 07       	cpc	r31, r24
    2be6:	d1 f7       	brne	.-12     	; 0x2bdc <ViewCardID+0x8>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
    2be8:	10 92 6f 0c 	sts	0x0C6F, r1
}
    2bec:	08 95       	ret

00002bee <StringCopy>:
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2bee:	28 2f       	mov	r18, r24
    2bf0:	39 2f       	mov	r19, r25
    2bf2:	d9 01       	movw	r26, r18
    2bf4:	fb 01       	movw	r30, r22
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	03 c0       	rjmp	.+6      	; 0x2c00 <StringCopy+0x12>
	     Dest[i]=Source[i];
    2bfa:	9d 91       	ld	r25, X+
    2bfc:	91 93       	st	Z+, r25
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2bfe:	8f 5f       	subi	r24, 0xFF	; 255
    2c00:	84 17       	cp	r24, r20
    2c02:	d8 f3       	brcs	.-10     	; 0x2bfa <StringCopy+0xc>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
    2c04:	64 0f       	add	r22, r20
    2c06:	71 1d       	adc	r23, r1
    2c08:	fb 01       	movw	r30, r22
    2c0a:	10 82       	st	Z, r1
}
    2c0c:	08 95       	ret

00002c0e <StringCopyPos>:
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
    2c0e:	dc 01       	movw	r26, r24
    2c10:	a4 0f       	add	r26, r20
    2c12:	b1 1d       	adc	r27, r1
     char i;
	 for (i=0;i<Length;i++){
    2c14:	fb 01       	movw	r30, r22
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <StringCopyPos+0x12>
	     Dest[i]=Source[SrcPos+i];
    2c1a:	9d 91       	ld	r25, X+
    2c1c:	91 93       	st	Z+, r25
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	82 17       	cp	r24, r18
    2c22:	d8 f3       	brcs	.-10     	; 0x2c1a <StringCopyPos+0xc>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
    2c24:	62 0f       	add	r22, r18
    2c26:	71 1d       	adc	r23, r1
    2c28:	fb 01       	movw	r30, r22
    2c2a:	10 82       	st	Z, r1
}
    2c2c:	08 95       	ret

00002c2e <TestLocalAccount>:

void TestLocalAccount(){

}
    2c2e:	08 95       	ret

00002c30 <BackLightTrig>:
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	80 93 8c 03 	sts	0x038C, r24
	 __key_lgtcnt = 0; 
    2c36:	10 92 8d 03 	sts	0x038D, r1
	 PORTG=PORTG&0b11111101;
    2c3a:	e5 e6       	ldi	r30, 0x65	; 101
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	8d 7f       	andi	r24, 0xFD	; 253
    2c42:	80 83       	st	Z, r24
}
    2c44:	08 95       	ret

00002c46 <ScanRFIDFlow>:

void ScanHiddenKeyFlow(char KeyIn){
}


void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
    2c46:	ee e4       	ldi	r30, 0x4E	; 78
    2c48:	f9 e0       	ldi	r31, 0x09	; 9
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
        strSerialFlow[19-i]=strSerialFlow[18-i];   
    2c4a:	92 91       	ld	r25, -Z
    2c4c:	91 83       	std	Z+1, r25	; 0x01

void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
    2c4e:	99 e0       	ldi	r25, 0x09	; 9
    2c50:	eb 33       	cpi	r30, 0x3B	; 59
    2c52:	f9 07       	cpc	r31, r25
    2c54:	d1 f7       	brne	.-12     	; 0x2c4a <ScanRFIDFlow+0x4>
        strSerialFlow[19-i]=strSerialFlow[18-i];   
	 }  strSerialFlow[0]=data;
    2c56:	80 93 3b 09 	sts	0x093B, r24
	 //Detection
	 if ((strSerialFlow[11]==0x02)&&(strSerialFlow[1]==0x0A)&&(strSerialFlow[0]==0x03)){
    2c5a:	90 91 46 09 	lds	r25, 0x0946
    2c5e:	92 30       	cpi	r25, 0x02	; 2
    2c60:	b1 f4       	brne	.+44     	; 0x2c8e <ScanRFIDFlow+0x48>
    2c62:	90 91 3c 09 	lds	r25, 0x093C
    2c66:	9a 30       	cpi	r25, 0x0A	; 10
    2c68:	91 f4       	brne	.+36     	; 0x2c8e <ScanRFIDFlow+0x48>
    2c6a:	83 30       	cpi	r24, 0x03	; 3
    2c6c:	81 f4       	brne	.+32     	; 0x2c8e <ScanRFIDFlow+0x48>
    2c6e:	3b 96       	adiw	r30, 0x0b	; 11
    2c70:	af e2       	ldi	r26, 0x2F	; 47
    2c72:	bd e0       	ldi	r27, 0x0D	; 13
		for(i=0;i<8;i++) strRFID[i]=strSerialFlow[10-i];
    2c74:	82 91       	ld	r24, -Z
    2c76:	8d 93       	st	X+, r24
    2c78:	89 e0       	ldi	r24, 0x09	; 9
    2c7a:	ee 33       	cpi	r30, 0x3E	; 62
    2c7c:	f8 07       	cpc	r31, r24
    2c7e:	d1 f7       	brne	.-12     	; 0x2c74 <ScanRFIDFlow+0x2e>
        strRFID[8]=0;
    2c80:	10 92 37 0d 	sts	0x0D37, r1
	    IsRFIDDetected=True;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	80 93 76 02 	sts	0x0276, r24
		BackLightTrig();
    2c8a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <BackLightTrig>
    2c8e:	08 95       	ret

00002c90 <GeneratePrintInit>:





void GeneratePrintInit(){//Create Initialize Print 
    2c90:	cf 92       	push	r12
    2c92:	df 92       	push	r13
    2c94:	ef 92       	push	r14
    2c96:	ff 92       	push	r15
    2c98:	0f 93       	push	r16
    2c9a:	1f 93       	push	r17
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	62 97       	sbiw	r28, 0x12	; 18
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
     char strVernum[6],strVerdate[12];
	 sprintf_P(strVernum,PSTR(VERSION_NUM));
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <GeneratePrintInit+0x22>
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <GeneratePrintInit+0x24>
    2cb4:	7e 01       	movw	r14, r28
    2cb6:	08 94       	sec
    2cb8:	e1 1c       	adc	r14, r1
    2cba:	f1 1c       	adc	r15, r1
    2cbc:	ad b7       	in	r26, 0x3d	; 61
    2cbe:	be b7       	in	r27, 0x3e	; 62
    2cc0:	12 96       	adiw	r26, 0x02	; 2
    2cc2:	fc 92       	st	X, r15
    2cc4:	ee 92       	st	-X, r14
    2cc6:	11 97       	sbiw	r26, 0x01	; 1
    2cc8:	82 e6       	ldi	r24, 0x62	; 98
    2cca:	9f e1       	ldi	r25, 0x1F	; 31
    2ccc:	14 96       	adiw	r26, 0x04	; 4
    2cce:	9c 93       	st	X, r25
    2cd0:	8e 93       	st	-X, r24
    2cd2:	13 97       	sbiw	r26, 0x03	; 3
    2cd4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 sprintf_P(strVerdate,PSTR(VERSION_DATE));
    2cd8:	97 e0       	ldi	r25, 0x07	; 7
    2cda:	c9 2e       	mov	r12, r25
    2cdc:	d1 2c       	mov	r13, r1
    2cde:	cc 0e       	add	r12, r28
    2ce0:	dd 1e       	adc	r13, r29
    2ce2:	ed b7       	in	r30, 0x3d	; 61
    2ce4:	fe b7       	in	r31, 0x3e	; 62
    2ce6:	d2 82       	std	Z+2, r13	; 0x02
    2ce8:	c1 82       	std	Z+1, r12	; 0x01
    2cea:	87 e5       	ldi	r24, 0x57	; 87
    2cec:	9f e1       	ldi	r25, 0x1F	; 31
    2cee:	94 83       	std	Z+4, r25	; 0x04
    2cf0:	83 83       	std	Z+3, r24	; 0x03
    2cf2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
     sprintf_P(PrintBuffer,PSTR("\nGeNiUs Ticket Printer \n Version:%s\n Last Update %s \n Hanindo Automation Solutions \n www.hanindogroup.com\n\n\n\n\n\n\n\n"),strVernum,strVerdate);
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <GeneratePrintInit+0x68>
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <GeneratePrintInit+0x6a>
    2cfa:	ed b7       	in	r30, 0x3d	; 61
    2cfc:	fe b7       	in	r31, 0x3e	; 62
    2cfe:	31 96       	adiw	r30, 0x01	; 1
    2d00:	0a ec       	ldi	r16, 0xCA	; 202
    2d02:	14 e0       	ldi	r17, 0x04	; 4
    2d04:	ad b7       	in	r26, 0x3d	; 61
    2d06:	be b7       	in	r27, 0x3e	; 62
    2d08:	12 96       	adiw	r26, 0x02	; 2
    2d0a:	1c 93       	st	X, r17
    2d0c:	0e 93       	st	-X, r16
    2d0e:	11 97       	sbiw	r26, 0x01	; 1
    2d10:	85 ee       	ldi	r24, 0xE5	; 229
    2d12:	9e e1       	ldi	r25, 0x1E	; 30
    2d14:	93 83       	std	Z+3, r25	; 0x03
    2d16:	82 83       	std	Z+2, r24	; 0x02
    2d18:	f5 82       	std	Z+5, r15	; 0x05
    2d1a:	e4 82       	std	Z+4, r14	; 0x04
    2d1c:	d7 82       	std	Z+7, r13	; 0x07
    2d1e:	c6 82       	std	Z+6, r12	; 0x06
    2d20:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(0,1,PrintBuffer);
    2d24:	ed b7       	in	r30, 0x3d	; 61
    2d26:	fe b7       	in	r31, 0x3e	; 62
    2d28:	38 96       	adiw	r30, 0x08	; 8
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	fe bf       	out	0x3e, r31	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	ed bf       	out	0x3d, r30	; 61
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	61 e0       	ldi	r22, 0x01	; 1
    2d38:	a8 01       	movw	r20, r16
    2d3a:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
	 LengthMessage81=strlen(PrintBuffer);
    2d3e:	f8 01       	movw	r30, r16
    2d40:	01 90       	ld	r0, Z+
    2d42:	00 20       	and	r0, r0
    2d44:	e9 f7       	brne	.-6      	; 0x2d40 <GeneratePrintInit+0xb0>
    2d46:	31 97       	sbiw	r30, 0x01	; 1
    2d48:	e0 1b       	sub	r30, r16
    2d4a:	f1 0b       	sbc	r31, r17
    2d4c:	f0 93 6c 02 	sts	0x026C, r31
    2d50:	e0 93 6b 02 	sts	0x026B, r30
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    2d54:	80 e3       	ldi	r24, 0x30	; 48
    2d56:	80 93 93 02 	sts	0x0293, r24
	 IsFreePrinting=True;
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	80 93 86 02 	sts	0x0286, r24
}
    2d60:	62 96       	adiw	r28, 0x12	; 18
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	df 90       	pop	r13
    2d7a:	cf 90       	pop	r12
    2d7c:	08 95       	ret

00002d7e <GetBaudrate>:
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
		 
	 }
}

int GetBaudrate(char brSetting){
    2d7e:	84 30       	cpi	r24, 0x04	; 4
    2d80:	48 f4       	brcc	.+18     	; 0x2d94 <GetBaudrate+0x16>
    2d82:	e8 2f       	mov	r30, r24
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	ee 0f       	add	r30, r30
    2d88:	ff 1f       	adc	r31, r31
    2d8a:	e6 58       	subi	r30, 0x86	; 134
    2d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8e:	20 81       	ld	r18, Z
    2d90:	31 81       	ldd	r19, Z+1	; 0x01
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <GetBaudrate+0x1a>
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
	 case br5787:
	      Result=5787;
     	  break;	 
	 }
   return Result;
}
    2d98:	c9 01       	movw	r24, r18
    2d9a:	08 95       	ret

00002d9c <InitMemory>:

	 }
}

void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    2d9c:	84 e4       	ldi	r24, 0x44	; 68
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    2da4:	80 93 3a 02 	sts	0x023A, r24
	 ActivePump=eeprom_read_byte(&DefActivePump);
    2da8:	89 e4       	ldi	r24, 0x49	; 73
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    2db0:	80 93 3b 02 	sts	0x023B, r24
}
    2db4:	08 95       	ret

00002db6 <InitStandalone>:
	      RunInitStandalone=False;
	      break;
	 }
  }
  */
}
    2db6:	08 95       	ret

00002db8 <DisplayQueueFIP>:


void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}
    2db8:	08 95       	ret

00002dba <DisplayDateTime>:

void DisplayDateTime(){
    2dba:	cf 92       	push	r12
    2dbc:	df 92       	push	r13
    2dbe:	ef 92       	push	r14
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	64 97       	sbiw	r28, 0x14	; 20
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20];
	 _datetime(0, strSystemDate, strSystemTime);
    2dda:	48 e9       	ldi	r20, 0x98	; 152
    2ddc:	e4 2e       	mov	r14, r20
    2dde:	44 e0       	ldi	r20, 0x04	; 4
    2de0:	f4 2e       	mov	r15, r20
    2de2:	32 e5       	ldi	r19, 0x52	; 82
    2de4:	c3 2e       	mov	r12, r19
    2de6:	39 e0       	ldi	r19, 0x09	; 9
    2de8:	d3 2e       	mov	r13, r19
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	b7 01       	movw	r22, r14
    2dee:	a6 01       	movw	r20, r12
    2df0:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <_datetime>
	 sprintf_P(lcdteks,PSTR("%s %s"),strSystemDate,strSystemTime);
    2df4:	8d b7       	in	r24, 0x3d	; 61
    2df6:	9e b7       	in	r25, 0x3e	; 62
    2df8:	08 97       	sbiw	r24, 0x08	; 8
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	9e bf       	out	0x3e, r25	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	8d bf       	out	0x3d, r24	; 61
    2e04:	ed b7       	in	r30, 0x3d	; 61
    2e06:	fe b7       	in	r31, 0x3e	; 62
    2e08:	31 96       	adiw	r30, 0x01	; 1
    2e0a:	8e 01       	movw	r16, r28
    2e0c:	0f 5f       	subi	r16, 0xFF	; 255
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	ad b7       	in	r26, 0x3d	; 61
    2e12:	be b7       	in	r27, 0x3e	; 62
    2e14:	12 96       	adiw	r26, 0x02	; 2
    2e16:	1c 93       	st	X, r17
    2e18:	0e 93       	st	-X, r16
    2e1a:	11 97       	sbiw	r26, 0x01	; 1
    2e1c:	83 e3       	ldi	r24, 0x33	; 51
    2e1e:	9e e1       	ldi	r25, 0x1E	; 30
    2e20:	93 83       	std	Z+3, r25	; 0x03
    2e22:	82 83       	std	Z+2, r24	; 0x02
    2e24:	f5 82       	std	Z+5, r15	; 0x05
    2e26:	e4 82       	std	Z+4, r14	; 0x04
    2e28:	d7 82       	std	Z+7, r13	; 0x07
    2e2a:	c6 82       	std	Z+6, r12	; 0x06
    2e2c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 lcd_print(2, 1, lcdteks);
    2e30:	8d b7       	in	r24, 0x3d	; 61
    2e32:	9e b7       	in	r25, 0x3e	; 62
    2e34:	08 96       	adiw	r24, 0x08	; 8
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	9e bf       	out	0x3e, r25	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	8d bf       	out	0x3d, r24	; 61
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	a8 01       	movw	r20, r16
    2e46:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
}
    2e4a:	64 96       	adiw	r28, 0x14	; 20
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	df 90       	pop	r13
    2e64:	cf 90       	pop	r12
    2e66:	08 95       	ret

00002e68 <DisplayTicker>:
	case tiDelayLeft:
         if (TimTicker>TICKER_DELAY)stDisplayTicker=tiRight;	     
	     break;
	}
*/
    if (TimTicker>(TICKER_DELAY*2+1)){
    2e68:	80 91 6e 02 	lds	r24, 0x026E
    2e6c:	86 31       	cpi	r24, 0x16	; 22
    2e6e:	38 f0       	brcs	.+14     	; 0x2e7e <DisplayTicker+0x16>
	    lcd_put(4, 1, '>');
    2e70:	84 e0       	ldi	r24, 0x04	; 4
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	4e e3       	ldi	r20, 0x3E	; 62
    2e76:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
		TimTicker=0;
    2e7a:	10 92 6e 02 	sts	0x026E, r1
	}
    if (TimTicker==TICKER_DELAY){
    2e7e:	80 91 6e 02 	lds	r24, 0x026E
    2e82:	8a 30       	cpi	r24, 0x0A	; 10
    2e84:	51 f4       	brne	.+20     	; 0x2e9a <DisplayTicker+0x32>
	    lcd_put(4, 1, '<');
    2e86:	84 e0       	ldi	r24, 0x04	; 4
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	4c e3       	ldi	r20, 0x3C	; 60
    2e8c:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
		TimTicker++;
    2e90:	80 91 6e 02 	lds	r24, 0x026E
    2e94:	8f 5f       	subi	r24, 0xFF	; 255
    2e96:	80 93 6e 02 	sts	0x026E, r24
    2e9a:	08 95       	ret

00002e9c <FTestChar>:
	}

}

char FTestChar(){
    2e9c:	0f 93       	push	r16
    2e9e:	1f 93       	push	r17
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	64 97       	sbiw	r28, 0x14	; 20
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20],Result;
char i=0;
     Result=MENU_NONE;
     sprintf_P(lcdteks,PSTR("D:%d C:%c  "),i,i);
    2eb4:	8d b7       	in	r24, 0x3d	; 61
    2eb6:	9e b7       	in	r25, 0x3e	; 62
    2eb8:	08 97       	sbiw	r24, 0x08	; 8
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	9e bf       	out	0x3e, r25	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	8d bf       	out	0x3d, r24	; 61
    2ec4:	ed b7       	in	r30, 0x3d	; 61
    2ec6:	fe b7       	in	r31, 0x3e	; 62
    2ec8:	31 96       	adiw	r30, 0x01	; 1
    2eca:	8e 01       	movw	r16, r28
    2ecc:	0f 5f       	subi	r16, 0xFF	; 255
    2ece:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed0:	ad b7       	in	r26, 0x3d	; 61
    2ed2:	be b7       	in	r27, 0x3e	; 62
    2ed4:	12 96       	adiw	r26, 0x02	; 2
    2ed6:	1c 93       	st	X, r17
    2ed8:	0e 93       	st	-X, r16
    2eda:	11 97       	sbiw	r26, 0x01	; 1
    2edc:	87 e2       	ldi	r24, 0x27	; 39
    2ede:	9e e1       	ldi	r25, 0x1E	; 30
    2ee0:	93 83       	std	Z+3, r25	; 0x03
    2ee2:	82 83       	std	Z+2, r24	; 0x02
    2ee4:	15 82       	std	Z+5, r1	; 0x05
    2ee6:	14 82       	std	Z+4, r1	; 0x04
    2ee8:	17 82       	std	Z+7, r1	; 0x07
    2eea:	16 82       	std	Z+6, r1	; 0x06
    2eec:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
     lcd_print(1,1,lcdteks);
    2ef0:	8d b7       	in	r24, 0x3d	; 61
    2ef2:	9e b7       	in	r25, 0x3e	; 62
    2ef4:	08 96       	adiw	r24, 0x08	; 8
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	9e bf       	out	0x3e, r25	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	8d bf       	out	0x3d, r24	; 61
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	a8 01       	movw	r20, r16
    2f06:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    2f0a:	8f ef       	ldi	r24, 0xFF	; 255
    2f0c:	9f eb       	ldi	r25, 0xBF	; 191
    2f0e:	a3 ef       	ldi	r26, 0xF3	; 243
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	81 50       	subi	r24, 0x01	; 1
    2f14:	90 40       	sbci	r25, 0x00	; 0
    2f16:	a0 40       	sbci	r26, 0x00	; 0
    2f18:	b0 40       	sbci	r27, 0x00	; 0
    2f1a:	d9 f7       	brne	.-10     	; 0x2f12 <FTestChar+0x76>
    2f1c:	00 c0       	rjmp	.+0      	; 0x2f1e <FTestChar+0x82>
    2f1e:	00 00       	nop
	 if (i==0xFF)Result=MENU_DONE;
	 i++;
     _delay_ms(6500);
  return Result;
}
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	64 96       	adiw	r28, 0x14	; 20
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	08 95       	ret

00002f38 <DisplayStandaloneSequence>:

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	28 97       	sbiw	r28, 0x08	; 8
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
     char MapSequence[8];

     //sprintf_P(MapSequence,PSTR("-\|/-|/"));
	 MapSequence[0]='-';
    2f4c:	3d e2       	ldi	r19, 0x2D	; 45
    2f4e:	39 83       	std	Y+1, r19	; 0x01
	 MapSequence[1]='`';//0x5C;
    2f50:	90 e6       	ldi	r25, 0x60	; 96
    2f52:	9a 83       	std	Y+2, r25	; 0x02
	 MapSequence[2]='|';
    2f54:	2c e7       	ldi	r18, 0x7C	; 124
    2f56:	2b 83       	std	Y+3, r18	; 0x03
	 MapSequence[3]='/';
    2f58:	9f e2       	ldi	r25, 0x2F	; 47
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
	 MapSequence[4]='-';
    2f5c:	3d 83       	std	Y+5, r19	; 0x05
	 MapSequence[5]=164;//0x5C;
    2f5e:	34 ea       	ldi	r19, 0xA4	; 164
    2f60:	3e 83       	std	Y+6, r19	; 0x06
	 MapSequence[6]='|';
    2f62:	2f 83       	std	Y+7, r18	; 0x07
	 MapSequence[7]='/';
    2f64:	98 87       	std	Y+8, r25	; 0x08
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    2f66:	90 91 61 02 	lds	r25, 0x0261
    2f6a:	99 23       	and	r25, r25
    2f6c:	31 f4       	brne	.+12     	; 0x2f7a <DisplayStandaloneSequence+0x42>
    2f6e:	47 70       	andi	r20, 0x07	; 7
    2f70:	fe 01       	movw	r30, r28
    2f72:	e4 0f       	add	r30, r20
    2f74:	f1 1d       	adc	r31, r1
    2f76:	41 81       	ldd	r20, Z+1	; 0x01
    2f78:	07 c0       	rjmp	.+14     	; 0x2f88 <DisplayStandaloneSequence+0x50>
	 else if (IsPoolingRestarted==True){
    2f7a:	90 91 61 02 	lds	r25, 0x0261
    2f7e:	91 30       	cpi	r25, 0x01	; 1
    2f80:	29 f4       	brne	.+10     	; 0x2f8c <DisplayStandaloneSequence+0x54>
	          IsPoolingRestarted=False;
    2f82:	10 92 61 02 	sts	0x0261, r1
	          lcd_put(x,y,'X');     
    2f86:	48 e5       	ldi	r20, 0x58	; 88
    2f88:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			  }

}
    2f8c:	28 96       	adiw	r28, 0x08	; 8
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <ShowMessage>:
	 }
}

void ShowMessage(char *Message){//Display Message on Line3
     char i;
}
    2f9e:	08 95       	ret

00002fa0 <systemSlave>:




void systemSlave(){
    _spi_enable(_SPI_NONE);	
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	0e 94 10 a2 	call	0x14420	; 0x14420 <_spi_enable>
  	_spi_init(0, 1);         //Slave
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	61 e0       	ldi	r22, 0x01	; 1
    2faa:	0e 94 fd a1 	call	0x143fa	; 0x143fa <_spi_init>
	sbi(DDRB,3);             //MISO Output
    2fae:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    2fb0:	bb 9a       	sbi	0x17, 3	; 23
    2fb2:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    2fb4:	ba 98       	cbi	0x17, 2	; 23
    2fb6:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    2fb8:	b9 98       	cbi	0x17, 1	; 23
    2fba:	c1 9a       	sbi	0x18, 1	; 24
}
    2fbc:	08 95       	ret

00002fbe <systemMaster>:

void systemMaster(){
  	_spi_init(1, 0);         //Master
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	0e 94 fd a1 	call	0x143fa	; 0x143fa <_spi_init>
    _spi_enable(_SPI_SLAVE); //Enable SS 
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	0e 94 10 a2 	call	0x14420	; 0x14420 <_spi_enable>
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
    2fcc:	bb 98       	cbi	0x17, 3	; 23
    2fce:	c3 9a       	sbi	0x18, 3	; 24
	sbi(DDRB,2);             //MOSI Output
    2fd0:	ba 9a       	sbi	0x17, 2	; 23
}
    2fd2:	08 95       	ret

00002fd4 <SendSlaveCommand>:
void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
	 PoolMsg=plMsg;
     IsControlPooling=True;
}
void SendSlaveCommand(char SlaveCommand,char SlaveMessage){     
    2fd4:	1f 93       	push	r17
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	0f 92       	push	r0
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	18 2f       	mov	r17, r24
	 systemMaster();
    2fe2:	69 83       	std	Y+1, r22	; 0x01
    2fe4:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <systemMaster>
	 _spi(0x05);
    2fe8:	85 e0       	ldi	r24, 0x05	; 5
    2fea:	0e 94 2b a2 	call	0x14456	; 0x14456 <_spi>
	 _spi(SlaveCommand);
    2fee:	81 2f       	mov	r24, r17
    2ff0:	0e 94 2b a2 	call	0x14456	; 0x14456 <_spi>
	 _spi(SlaveMessage);
    2ff4:	69 81       	ldd	r22, Y+1	; 0x01
    2ff6:	86 2f       	mov	r24, r22
    2ff8:	0e 94 2b a2 	call	0x14456	; 0x14456 <_spi>
	 _spi(0x06);
    2ffc:	86 e0       	ldi	r24, 0x06	; 6
    2ffe:	0e 94 2b a2 	call	0x14456	; 0x14456 <_spi>
	 systemSlave();
    3002:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <systemSlave>
}
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	1f 91       	pop	r17
    300e:	08 95       	ret

00003010 <SetBaudRate>:

void SetBaudRate(char ComAddr,char brMap){//Com1..Com4
unsigned int brValue=9600;
char brMessage=0;

     if ((ComAddr>=1)&&(ComAddr<=2)){
    3010:	98 2f       	mov	r25, r24
    3012:	91 50       	subi	r25, 0x01	; 1
    3014:	92 30       	cpi	r25, 0x02	; 2
    3016:	98 f4       	brcc	.+38     	; 0x303e <SetBaudRate+0x2e>
    3018:	64 30       	cpi	r22, 0x04	; 4
    301a:	48 f4       	brcc	.+18     	; 0x302e <SetBaudRate+0x1e>
    301c:	e6 2f       	mov	r30, r22
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	ee 0f       	add	r30, r30
    3022:	ff 1f       	adc	r31, r31
    3024:	e6 58       	subi	r30, 0x86	; 134
    3026:	fe 4f       	sbci	r31, 0xFE	; 254
    3028:	40 81       	ld	r20, Z
    302a:	51 81       	ldd	r21, Z+1	; 0x01
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <SetBaudRate+0x22>
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	50 e0       	ldi	r21, 0x00	; 0
	     brValue=GetBaudrate(brMap);
	      uart_init((ComAddr-1),brValue);
    3032:	60 e0       	ldi	r22, 0x00	; 0
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	89 2f       	mov	r24, r25
    3038:	0e 94 e3 a3 	call	0x147c6	; 0x147c6 <uart_init>
    303c:	08 95       	ret
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
    303e:	98 2f       	mov	r25, r24
    3040:	93 50       	subi	r25, 0x03	; 3
    3042:	92 30       	cpi	r25, 0x02	; 2
    3044:	b0 f4       	brcc	.+44     	; 0x3072 <SetBaudRate+0x62>
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
    3046:	e6 2f       	mov	r30, r22
    3048:	ef 70       	andi	r30, 0x0F	; 15
    304a:	68 2f       	mov	r22, r24
    304c:	62 95       	swap	r22
    304e:	60 7f       	andi	r22, 0xF0	; 240
    3050:	6e 2b       	or	r22, r30
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
    3052:	80 91 5e 02 	lds	r24, 0x025E
    3056:	88 23       	and	r24, r24
    3058:	49 f0       	breq	.+18     	; 0x306c <SetBaudRate+0x5c>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    305a:	86 e0       	ldi	r24, 0x06	; 6
    305c:	80 93 85 06 	sts	0x0685, r24
	 PoolMsg=plMsg;
    3060:	60 93 b1 0c 	sts	0x0CB1, r22
     IsControlPooling=True;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	80 93 62 02 	sts	0x0262, r24
    306a:	08 95       	ret
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
    306c:	86 e0       	ldi	r24, 0x06	; 6
    306e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
    3072:	08 95       	ret

00003074 <InitComport>:
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    3074:	9f 92       	push	r9
    3076:	af 92       	push	r10
    3078:	bf 92       	push	r11
    307a:	cf 92       	push	r12
    307c:	df 92       	push	r13
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	64 97       	sbiw	r28, 0x14	; 20
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
    309a:	83 e0       	ldi	r24, 0x03	; 3
    309c:	61 e0       	ldi	r22, 0x01	; 1
    309e:	42 ed       	ldi	r20, 0xD2	; 210
    30a0:	5e e1       	ldi	r21, 0x1E	; 30
    30a2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    30a6:	00 e0       	ldi	r16, 0x00	; 0
    30a8:	10 e0       	ldi	r17, 0x00	; 0
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    30aa:	6e 01       	movw	r12, r28
    30ac:	08 94       	sec
    30ae:	c1 1c       	adc	r12, r1
    30b0:	d1 1c       	adc	r13, r1
    30b2:	7e eb       	ldi	r23, 0xBE	; 190
    30b4:	a7 2e       	mov	r10, r23
    30b6:	7e e1       	ldi	r23, 0x1E	; 30
    30b8:	b7 2e       	mov	r11, r23
    30ba:	01 c0       	rjmp	.+2      	; 0x30be <InitComport+0x4a>

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    30bc:	87 01       	movw	r16, r14
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
    30be:	c8 01       	movw	r24, r16
    30c0:	80 5c       	subi	r24, 0xC0	; 192
    30c2:	9e 4f       	sbci	r25, 0xFE	; 254
    30c4:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    30c8:	98 2e       	mov	r9, r24
    30ca:	84 30       	cpi	r24, 0x04	; 4
    30cc:	68 f4       	brcc	.+26     	; 0x30e8 <InitComport+0x74>
    30ce:	e8 2f       	mov	r30, r24
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	ee 0f       	add	r30, r30
    30d4:	ff 1f       	adc	r31, r31
    30d6:	e6 58       	subi	r30, 0x86	; 134
    30d8:	fe 4f       	sbci	r31, 0xFE	; 254
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
    30de:	26 e1       	ldi	r18, 0x16	; 22
    30e0:	8b 39       	cpi	r24, 0x9B	; 155
    30e2:	92 07       	cpc	r25, r18
    30e4:	21 f0       	breq	.+8      	; 0x30ee <InitComport+0x7a>
    30e6:	05 c0       	rjmp	.+10     	; 0x30f2 <InitComport+0x7e>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <InitComport+0x7e>
    30ee:	85 eb       	ldi	r24, 0xB5	; 181
    30f0:	9f e2       	ldi	r25, 0x2F	; 47
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    30f2:	78 01       	movw	r14, r16
    30f4:	08 94       	sec
    30f6:	e1 1c       	adc	r14, r1
    30f8:	f1 1c       	adc	r15, r1
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    30fa:	ad b7       	in	r26, 0x3d	; 61
    30fc:	be b7       	in	r27, 0x3e	; 62
    30fe:	18 97       	sbiw	r26, 0x08	; 8
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	be bf       	out	0x3e, r27	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	ad bf       	out	0x3d, r26	; 61
    310a:	ed b7       	in	r30, 0x3d	; 61
    310c:	fe b7       	in	r31, 0x3e	; 62
    310e:	31 96       	adiw	r30, 0x01	; 1
    3110:	12 96       	adiw	r26, 0x02	; 2
    3112:	dc 92       	st	X, r13
    3114:	ce 92       	st	-X, r12
    3116:	11 97       	sbiw	r26, 0x01	; 1
    3118:	b3 82       	std	Z+3, r11	; 0x03
    311a:	a2 82       	std	Z+2, r10	; 0x02
    311c:	f5 82       	std	Z+5, r15	; 0x05
    311e:	e4 82       	std	Z+4, r14	; 0x04
    3120:	97 83       	std	Z+7, r25	; 0x07
    3122:	86 83       	std	Z+6, r24	; 0x06
    3124:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 lcd_print(4,1,lcdteks);
    3128:	2d b7       	in	r18, 0x3d	; 61
    312a:	3e b7       	in	r19, 0x3e	; 62
    312c:	28 5f       	subi	r18, 0xF8	; 248
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	3e bf       	out	0x3e, r19	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	2d bf       	out	0x3d, r18	; 61
    313a:	84 e0       	ldi	r24, 0x04	; 4
    313c:	61 e0       	ldi	r22, 0x01	; 1
    313e:	a6 01       	movw	r20, r12
    3140:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		 SetBaudRate(i+1,brMap);
    3144:	80 2f       	mov	r24, r16
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	69 2d       	mov	r22, r9
    314a:	0e 94 08 18 	call	0x3010	; 0x3010 <SetBaudRate>
 	     TimDisplay=0;
    314e:	10 92 70 02 	sts	0x0270, r1
	     while(TimDisplay<2){
    3152:	04 c0       	rjmp	.+8      	; 0x315c <InitComport+0xe8>
		     if (TimDisplay>1)break;
    3154:	80 91 70 02 	lds	r24, 0x0270
    3158:	82 30       	cpi	r24, 0x02	; 2
    315a:	20 f4       	brcc	.+8      	; 0x3164 <InitComport+0xf0>
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
		 lcd_print(4,1,lcdteks);
		 SetBaudRate(i+1,brMap);
 	     TimDisplay=0;
	     while(TimDisplay<2){
    315c:	80 91 70 02 	lds	r24, 0x0270
    3160:	82 30       	cpi	r24, 0x02	; 2
    3162:	c0 f3       	brcs	.-16     	; 0x3154 <InitComport+0xe0>

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    3164:	34 e0       	ldi	r19, 0x04	; 4
    3166:	e3 16       	cp	r14, r19
    3168:	f1 04       	cpc	r15, r1
    316a:	09 f0       	breq	.+2      	; 0x316e <InitComport+0xfa>
    316c:	a7 cf       	rjmp	.-178    	; 0x30bc <InitComport+0x48>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
		 };

	 }
}
    316e:	64 96       	adiw	r28, 0x14	; 20
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	bf 90       	pop	r11
    318c:	af 90       	pop	r10
    318e:	9f 90       	pop	r9
    3190:	08 95       	ret

00003192 <EDCSendByte>:
    _spi_enable(_SPI_SLAVE); //Enable SS 
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
	sbi(DDRB,2);             //MOSI Output
}

void EDCSendByte(char EDCData){
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	0f 92       	push	r0
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
     systemMaster();	 
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <systemMaster>
     _spi(EDCData);
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	0e 94 2b a2 	call	0x14456	; 0x14456 <_spi>
     systemSlave();
    31a8:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <systemSlave>
}
    31ac:	0f 90       	pop	r0
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <CalcLRC>:

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}
    31b4:	86 27       	eor	r24, r22
    31b6:	08 95       	ret

000031b8 <SendEDCMessage>:

void SendEDCMessage(){
    31b8:	ef 92       	push	r14
    31ba:	ff 92       	push	r15
    31bc:	0f 93       	push	r16
    31be:	1f 93       	push	r17
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	ec 97       	sbiw	r28, 0x3c	; 60
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61

     //GenerateData
	 //sprintf_P(strAmount,PSTR("%d"),100);//Testing Only
	 //AddZeroLead(strAmount,8);
	 //uart_printf(0,0,PSTR("StrStatus:"));uart_print(0,1,strStatus);
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     
    31d4:	8d b7       	in	r24, 0x3d	; 61
    31d6:	9e b7       	in	r25, 0x3e	; 62
    31d8:	42 97       	sbiw	r24, 0x12	; 18
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	9e bf       	out	0x3e, r25	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	8d bf       	out	0x3d, r24	; 61
    31e4:	ed b7       	in	r30, 0x3d	; 61
    31e6:	fe b7       	in	r31, 0x3e	; 62
    31e8:	31 96       	adiw	r30, 0x01	; 1
    31ea:	8e 01       	movw	r16, r28
    31ec:	0f 5f       	subi	r16, 0xFF	; 255
    31ee:	1f 4f       	sbci	r17, 0xFF	; 255
    31f0:	ad b7       	in	r26, 0x3d	; 61
    31f2:	be b7       	in	r27, 0x3e	; 62
    31f4:	12 96       	adiw	r26, 0x02	; 2
    31f6:	1c 93       	st	X, r17
    31f8:	0e 93       	st	-X, r16
    31fa:	11 97       	sbiw	r26, 0x01	; 1
    31fc:	8b ec       	ldi	r24, 0xCB	; 203
    31fe:	9d e1       	ldi	r25, 0x1D	; 29
    3200:	93 83       	std	Z+3, r25	; 0x03
    3202:	82 83       	std	Z+2, r24	; 0x02
    3204:	85 e6       	ldi	r24, 0x65	; 101
    3206:	9d e0       	ldi	r25, 0x0D	; 13
    3208:	95 83       	std	Z+5, r25	; 0x05
    320a:	84 83       	std	Z+4, r24	; 0x04
    320c:	87 e9       	ldi	r24, 0x97	; 151
    320e:	98 e0       	ldi	r25, 0x08	; 8
    3210:	97 83       	std	Z+7, r25	; 0x07
    3212:	86 83       	std	Z+6, r24	; 0x06
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	99 e0       	ldi	r25, 0x09	; 9
    3218:	91 87       	std	Z+9, r25	; 0x09
    321a:	80 87       	std	Z+8, r24	; 0x08
    321c:	8c e7       	ldi	r24, 0x7C	; 124
    321e:	96 e0       	ldi	r25, 0x06	; 6
    3220:	93 87       	std	Z+11, r25	; 0x0b
    3222:	82 87       	std	Z+10, r24	; 0x0a
    3224:	83 e5       	ldi	r24, 0x53	; 83
    3226:	94 e0       	ldi	r25, 0x04	; 4
    3228:	95 87       	std	Z+13, r25	; 0x0d
    322a:	84 87       	std	Z+12, r24	; 0x0c
    322c:	81 e9       	ldi	r24, 0x91	; 145
    322e:	9c e0       	ldi	r25, 0x0C	; 12
    3230:	97 87       	std	Z+15, r25	; 0x0f
    3232:	86 87       	std	Z+14, r24	; 0x0e
    3234:	88 e6       	ldi	r24, 0x68	; 104
    3236:	94 e0       	ldi	r25, 0x04	; 4
    3238:	91 8b       	std	Z+17, r25	; 0x11
    323a:	80 8b       	std	Z+16, r24	; 0x10
    323c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
    3240:	ed b7       	in	r30, 0x3d	; 61
    3242:	fe b7       	in	r31, 0x3e	; 62
    3244:	72 96       	adiw	r30, 0x12	; 18
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	fe bf       	out	0x3e, r31	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	ed bf       	out	0x3d, r30	; 61
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	0e 94 c9 18 	call	0x3192	; 0x3192 <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x02);	      
    3256:	e2 e0       	ldi	r30, 0x02	; 2
    3258:	fe 2e       	mov	r15, r30
	 for (i=0;i<strlen(SerialEDC);i++){
    325a:	ee 24       	eor	r14, r14
    325c:	11 c0       	rjmp	.+34     	; 0x3280 <SendEDCMessage+0xc8>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
    325e:	20 0f       	add	r18, r16
    3260:	31 1f       	adc	r19, r17
    3262:	d9 01       	movw	r26, r18
    3264:	8c 91       	ld	r24, X
     systemSlave();
}

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
    3266:	f8 26       	eor	r15, r24
	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
    3268:	0e 94 c9 18 	call	0x3192	; 0x3192 <EDCSendByte>
    326c:	8f ef       	ldi	r24, 0xFF	; 255
    326e:	9f e3       	ldi	r25, 0x3F	; 63
    3270:	a2 e0       	ldi	r26, 0x02	; 2
    3272:	81 50       	subi	r24, 0x01	; 1
    3274:	90 40       	sbci	r25, 0x00	; 0
    3276:	a0 40       	sbci	r26, 0x00	; 0
    3278:	e1 f7       	brne	.-8      	; 0x3272 <SendEDCMessage+0xba>
    327a:	00 c0       	rjmp	.+0      	; 0x327c <SendEDCMessage+0xc4>
    327c:	00 00       	nop
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
    327e:	e3 94       	inc	r14
    3280:	f8 01       	movw	r30, r16
    3282:	01 90       	ld	r0, Z+
    3284:	00 20       	and	r0, r0
    3286:	e9 f7       	brne	.-6      	; 0x3282 <SendEDCMessage+0xca>
    3288:	31 97       	sbiw	r30, 0x01	; 1
    328a:	e0 1b       	sub	r30, r16
    328c:	f1 0b       	sbc	r31, r17
    328e:	2e 2d       	mov	r18, r14
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	2e 17       	cp	r18, r30
    3294:	3f 07       	cpc	r19, r31
    3296:	18 f3       	brcs	.-58     	; 0x325e <SendEDCMessage+0xa6>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
		  //uart(0,1,SerialEDC[i]);
		  _delay_ms(SPI_EDC_DELAY);//min:8
	 }
     EDCSendByte(0x03);
    3298:	83 e0       	ldi	r24, 0x03	; 3
    329a:	0e 94 c9 18 	call	0x3192	; 0x3192 <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x03);	      
	 EDCSendByte(xCRC);
    329e:	83 e0       	ldi	r24, 0x03	; 3
    32a0:	8f 25       	eor	r24, r15
    32a2:	0e 94 c9 18 	call	0x3192	; 0x3192 <EDCSendByte>
}
    32a6:	ec 96       	adiw	r28, 0x3c	; 60
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	1f 91       	pop	r17
    32b8:	0f 91       	pop	r16
    32ba:	ff 90       	pop	r15
    32bc:	ef 90       	pop	r14
    32be:	08 95       	ret

000032c0 <systemEDC>:

void systemEDC(){//EDC Handler
     

}
    32c0:	08 95       	ret

000032c2 <FViewFreeMessage>:
char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
	 switch(stFreeMessage){
    32c2:	80 91 4b 03 	lds	r24, 0x034B
    32c6:	81 30       	cpi	r24, 0x01	; 1
    32c8:	49 f0       	breq	.+18     	; 0x32dc <FViewFreeMessage+0x1a>
    32ca:	81 30       	cpi	r24, 0x01	; 1
    32cc:	28 f0       	brcs	.+10     	; 0x32d8 <FViewFreeMessage+0x16>
    32ce:	82 30       	cpi	r24, 0x02	; 2
    32d0:	19 f1       	breq	.+70     	; 0x3318 <FViewFreeMessage+0x56>
    32d2:	83 30       	cpi	r24, 0x03	; 3
    32d4:	69 f5       	brne	.+90     	; 0x3330 <FViewFreeMessage+0x6e>
    32d6:	28 c0       	rjmp	.+80     	; 0x3328 <FViewFreeMessage+0x66>
	 case fmInit:
	      stFreeMessage=fmDisplayFreeMessage;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	23 c0       	rjmp	.+70     	; 0x3322 <FViewFreeMessage+0x60>
	      break;
     case fmDisplayFreeMessage:
		  lcd_clear();
    32dc:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	61 e0       	ldi	r22, 0x01	; 1
    32e4:	40 e7       	ldi	r20, 0x70	; 112
    32e6:	59 e0       	ldi	r21, 0x09	; 9
    32e8:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	61 e0       	ldi	r22, 0x01	; 1
    32f0:	41 e8       	ldi	r20, 0x81	; 129
    32f2:	58 e0       	ldi	r21, 0x08	; 8
    32f4:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	61 e0       	ldi	r22, 0x01	; 1
    32fc:	4a ee       	ldi	r20, 0xEA	; 234
    32fe:	58 e0       	ldi	r21, 0x08	; 8
    3300:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    3304:	84 e0       	ldi	r24, 0x04	; 4
    3306:	61 e0       	ldi	r22, 0x01	; 1
    3308:	44 eb       	ldi	r20, 0xB4	; 180
    330a:	5c e0       	ldi	r21, 0x0C	; 12
    330c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	      TimDisplay=0;
    3310:	10 92 70 02 	sts	0x0270, r1
	      stFreeMessage=fmDelayViewMesage;
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	05 c0       	rjmp	.+10     	; 0x3322 <FViewFreeMessage+0x60>
	      break;
	 case fmDelayViewMesage:  
	      if (TimDisplay>TIM_FREE_MESSAGE)stFreeMessage=fmFinishFreeMessage;
    3318:	80 91 70 02 	lds	r24, 0x0270
    331c:	8b 30       	cpi	r24, 0x0B	; 11
    331e:	50 f0       	brcs	.+20     	; 0x3334 <FViewFreeMessage+0x72>
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	80 93 4b 03 	sts	0x034B, r24
    3326:	04 c0       	rjmp	.+8      	; 0x3330 <FViewFreeMessage+0x6e>
	      break;
     case fmFinishFreeMessage:
          stFreeMessage=fmInit;
    3328:	10 92 4b 03 	sts	0x034B, r1
	      Result=MENU_DONE;
    332c:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    332e:	08 95       	ret

char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	08 95       	ret
    3334:	80 e0       	ldi	r24, 0x00	; 0
          stFreeMessage=fmInit;
	      Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    3336:	08 95       	ret

00003338 <GeniusCalc>:


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
     switch(cOption){
    3338:	88 23       	and	r24, r24
    333a:	19 f0       	breq	.+6      	; 0x3342 <GeniusCalc+0xa>
    333c:	81 30       	cpi	r24, 0x01	; 1
    333e:	d1 f4       	brne	.+52     	; 0x3374 <GeniusCalc+0x3c>
    3340:	0a c0       	rjmp	.+20     	; 0x3356 <GeniusCalc+0x1e>
	 case G_PLUS:                  // 5 + 8 = 1 + 3 = 4
	      valC_H=(valA+valB)/10;   //  
    3342:	86 2f       	mov	r24, r22
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	84 0f       	add	r24, r20
    3348:	91 1d       	adc	r25, r1
		  valC_L=(valA+valB)%10;   //
    334a:	6a e0       	ldi	r22, 0x0A	; 10
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
	      Result=valC_H+valC_L;
    3352:	86 0f       	add	r24, r22
	      break;
    3354:	08 95       	ret
	 case G_MULTY:                 
	      if (valA>0)xValA=valA;
    3356:	66 23       	and	r22, r22
    3358:	09 f4       	brne	.+2      	; 0x335c <GeniusCalc+0x24>
		  else xValA=1;
    335a:	61 e0       	ldi	r22, 0x01	; 1
	      if (valB>0)xValB=valB;
    335c:	44 23       	and	r20, r20
    335e:	09 f4       	brne	.+2      	; 0x3362 <GeniusCalc+0x2a>
		  else xValB=1;
    3360:	41 e0       	ldi	r20, 0x01	; 1
	      valC_H=(xValA*xValB)/10;   //  
    3362:	46 9f       	mul	r20, r22
    3364:	c0 01       	movw	r24, r0
    3366:	11 24       	eor	r1, r1
    3368:	6a e0       	ldi	r22, 0x0A	; 10
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
		  valC_L=(xValA*xValB)%10;   //
	      Result=GeniusCalc(G_PLUS,valC_H,valC_L);
    3370:	48 2f       	mov	r20, r24
    3372:	e7 cf       	rjmp	.-50     	; 0x3342 <GeniusCalc+0xa>
}


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
    3374:	80 e0       	ldi	r24, 0x00	; 0
	 case G_MINUS:
	      
	      break;
	 }
   return Result;
}
    3376:	08 95       	ret

00003378 <WrapCode>:

void WrapCode(char *strRawCode){
    3378:	bf 92       	push	r11
    337a:	cf 92       	push	r12
    337c:	df 92       	push	r13
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	60 97       	sbiw	r28, 0x10	; 16
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	8c 01       	movw	r16, r24
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
    339c:	40 e0       	ldi	r20, 0x00	; 0
	 for (i=0;i<strlen(strRawCode);i++){
    339e:	bb 24       	eor	r11, r11
    33a0:	6e 01       	movw	r12, r28
    33a2:	08 94       	sec
    33a4:	c1 1c       	adc	r12, r1
    33a6:	d1 1c       	adc	r13, r1
    33a8:	12 c0       	rjmp	.+36     	; 0x33ce <WrapCode+0x56>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
    33aa:	f8 01       	movw	r30, r16
    33ac:	ee 0d       	add	r30, r14
    33ae:	ff 1d       	adc	r31, r15
    33b0:	90 81       	ld	r25, Z
    33b2:	90 53       	subi	r25, 0x30	; 48
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	69 2f       	mov	r22, r25
    33b8:	98 8b       	std	Y+16, r25	; 0x10
    33ba:	0e 94 9c 19 	call	0x3338	; 0x3338 <GeniusCalc>
    33be:	f6 01       	movw	r30, r12
    33c0:	ee 0d       	add	r30, r14
    33c2:	ff 1d       	adc	r31, r15
    33c4:	80 5d       	subi	r24, 0xD0	; 208
    33c6:	80 83       	st	Z, r24
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    33c8:	b3 94       	inc	r11
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
    33ca:	98 89       	ldd	r25, Y+16	; 0x10
    33cc:	49 2f       	mov	r20, r25
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    33ce:	eb 2c       	mov	r14, r11
    33d0:	ff 24       	eor	r15, r15
    33d2:	f8 01       	movw	r30, r16
    33d4:	01 90       	ld	r0, Z+
    33d6:	00 20       	and	r0, r0
    33d8:	e9 f7       	brne	.-6      	; 0x33d4 <WrapCode+0x5c>
    33da:	31 97       	sbiw	r30, 0x01	; 1
    33dc:	e0 1b       	sub	r30, r16
    33de:	f1 0b       	sbc	r31, r17
    33e0:	ee 16       	cp	r14, r30
    33e2:	ff 06       	cpc	r15, r31
    33e4:	10 f3       	brcs	.-60     	; 0x33aa <WrapCode+0x32>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
    33e6:	ec 0d       	add	r30, r12
    33e8:	fd 1d       	adc	r31, r13
    33ea:	10 82       	st	Z, r1
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <WrapCode+0x76>
    33ee:	00 d0       	rcall	.+0      	; 0x33f0 <WrapCode+0x78>
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <WrapCode+0x7a>
    33f2:	ed b7       	in	r30, 0x3d	; 61
    33f4:	fe b7       	in	r31, 0x3e	; 62
    33f6:	31 96       	adiw	r30, 0x01	; 1
    33f8:	ad b7       	in	r26, 0x3d	; 61
    33fa:	be b7       	in	r27, 0x3e	; 62
    33fc:	12 96       	adiw	r26, 0x02	; 2
    33fe:	1c 93       	st	X, r17
    3400:	0e 93       	st	-X, r16
    3402:	11 97       	sbiw	r26, 0x01	; 1
    3404:	88 ed       	ldi	r24, 0xD8	; 216
    3406:	99 e1       	ldi	r25, 0x19	; 25
    3408:	93 83       	std	Z+3, r25	; 0x03
    340a:	82 83       	std	Z+2, r24	; 0x02
    340c:	d5 82       	std	Z+5, r13	; 0x05
    340e:	c4 82       	std	Z+4, r12	; 0x04
    3410:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    3414:	8d b7       	in	r24, 0x3d	; 61
    3416:	9e b7       	in	r25, 0x3e	; 62
    3418:	06 96       	adiw	r24, 0x06	; 6
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	9e bf       	out	0x3e, r25	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	8d bf       	out	0x3d, r24	; 61
}
    3424:	60 96       	adiw	r28, 0x10	; 16
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	ff 90       	pop	r15
    343a:	ef 90       	pop	r14
    343c:	df 90       	pop	r13
    343e:	cf 90       	pop	r12
    3440:	bf 90       	pop	r11
    3442:	08 95       	ret

00003444 <RemoveChar>:
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}

void RemoveChar(char *strSource, char cRem){
    3444:	1f 93       	push	r17
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	64 97       	sbiw	r28, 0x14	; 20
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
     char i,iAdd,sTemp[20];
     iAdd=0;
    345a:	70 e0       	ldi	r23, 0x00	; 0
	 for(i=0;i<strlen(strSource);i++){
    345c:	10 e0       	ldi	r17, 0x00	; 0
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
    345e:	ae 01       	movw	r20, r28
    3460:	4f 5f       	subi	r20, 0xFF	; 255
    3462:	5f 4f       	sbci	r21, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    3464:	0c c0       	rjmp	.+24     	; 0x347e <RemoveChar+0x3a>
	     if (strSource[i]!=cRem){
    3466:	28 0f       	add	r18, r24
    3468:	39 1f       	adc	r19, r25
    346a:	d9 01       	movw	r26, r18
    346c:	2c 91       	ld	r18, X
    346e:	26 17       	cp	r18, r22
    3470:	29 f0       	breq	.+10     	; 0x347c <RemoveChar+0x38>
		     sTemp[iAdd]=strSource[i];
    3472:	fa 01       	movw	r30, r20
    3474:	e7 0f       	add	r30, r23
    3476:	f1 1d       	adc	r31, r1
    3478:	20 83       	st	Z, r18
			 iAdd++;
    347a:	7f 5f       	subi	r23, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    347c:	1f 5f       	subi	r17, 0xFF	; 255
    347e:	21 2f       	mov	r18, r17
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	fc 01       	movw	r30, r24
    3484:	01 90       	ld	r0, Z+
    3486:	00 20       	and	r0, r0
    3488:	e9 f7       	brne	.-6      	; 0x3484 <RemoveChar+0x40>
    348a:	31 97       	sbiw	r30, 0x01	; 1
    348c:	e8 1b       	sub	r30, r24
    348e:	f9 0b       	sbc	r31, r25
    3490:	2e 17       	cp	r18, r30
    3492:	3f 07       	cpc	r19, r31
    3494:	40 f3       	brcs	.-48     	; 0x3466 <RemoveChar+0x22>
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
			 iAdd++;
          }
	 }sTemp[iAdd]=0;
    3496:	9e 01       	movw	r18, r28
    3498:	2f 5f       	subi	r18, 0xFF	; 255
    349a:	3f 4f       	sbci	r19, 0xFF	; 255
    349c:	f9 01       	movw	r30, r18
    349e:	e7 0f       	add	r30, r23
    34a0:	f1 1d       	adc	r31, r1
    34a2:	10 82       	st	Z, r1
	 sprintf_P(strSource,PSTR("%s"),sTemp);
    34a4:	00 d0       	rcall	.+0      	; 0x34a6 <RemoveChar+0x62>
    34a6:	00 d0       	rcall	.+0      	; 0x34a8 <RemoveChar+0x64>
    34a8:	00 d0       	rcall	.+0      	; 0x34aa <RemoveChar+0x66>
    34aa:	ed b7       	in	r30, 0x3d	; 61
    34ac:	fe b7       	in	r31, 0x3e	; 62
    34ae:	31 96       	adiw	r30, 0x01	; 1
    34b0:	ad b7       	in	r26, 0x3d	; 61
    34b2:	be b7       	in	r27, 0x3e	; 62
    34b4:	12 96       	adiw	r26, 0x02	; 2
    34b6:	9c 93       	st	X, r25
    34b8:	8e 93       	st	-X, r24
    34ba:	11 97       	sbiw	r26, 0x01	; 1
    34bc:	8d ec       	ldi	r24, 0xCD	; 205
    34be:	99 e1       	ldi	r25, 0x19	; 25
    34c0:	93 83       	std	Z+3, r25	; 0x03
    34c2:	82 83       	std	Z+2, r24	; 0x02
    34c4:	35 83       	std	Z+5, r19	; 0x05
    34c6:	24 83       	std	Z+4, r18	; 0x04
    34c8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    34cc:	ed b7       	in	r30, 0x3d	; 61
    34ce:	fe b7       	in	r31, 0x3e	; 62
    34d0:	36 96       	adiw	r30, 0x06	; 6
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	fe bf       	out	0x3e, r31	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	ed bf       	out	0x3d, r30	; 61
}
    34dc:	64 96       	adiw	r28, 0x14	; 20
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	1f 91       	pop	r17
    34ee:	08 95       	ret

000034f0 <GenerateKeyStamp>:


   return Result;
}

void GenerateKeyStamp(char *sTime, char *sGCode, char *strKeyStamp){//
    34f0:	9f 92       	push	r9
    34f2:	af 92       	push	r10
    34f4:	bf 92       	push	r11
    34f6:	cf 92       	push	r12
    34f8:	df 92       	push	r13
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	2d 97       	sbiw	r28, 0x0d	; 13
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	de bf       	out	0x3e, r29	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	fc 01       	movw	r30, r24
    3518:	7b 01       	movw	r14, r22
    351a:	6a 01       	movw	r12, r20
       KeyStamp: 68623252
	             65585577
	 */
     char seedIdx,sSeed[10],sAdd[3],i;
     
	 seedIdx=(sTime[5]-'0')%8; 
    351c:	85 81       	ldd	r24, Z+5	; 0x05
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	c0 97       	sbiw	r24, 0x30	; 48
    3522:	28 e0       	ldi	r18, 0x08	; 8
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	b9 01       	movw	r22, r18
    3528:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
	 sAdd[0]=sGCode[seedIdx];
    352c:	d7 01       	movw	r26, r14
    352e:	a8 0f       	add	r26, r24
    3530:	b1 1d       	adc	r27, r1
    3532:	8c 91       	ld	r24, X
    3534:	89 83       	std	Y+1, r24	; 0x01
     seedIdx=(sTime[6]-'0')%8;
    3536:	86 81       	ldd	r24, Z+6	; 0x06
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	c0 97       	sbiw	r24, 0x30	; 48
    353c:	b9 01       	movw	r22, r18
    353e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
	 sAdd[1]=sGCode[seedIdx];
    3542:	d7 01       	movw	r26, r14
    3544:	a8 0f       	add	r26, r24
    3546:	b1 1d       	adc	r27, r1
    3548:	8c 91       	ld	r24, X
    354a:	8a 83       	std	Y+2, r24	; 0x02
	 sAdd[2]=0;
    354c:	1b 82       	std	Y+3, r1	; 0x03

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
    354e:	8d b7       	in	r24, 0x3d	; 61
    3550:	9e b7       	in	r25, 0x3e	; 62
    3552:	08 97       	sbiw	r24, 0x08	; 8
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	9e bf       	out	0x3e, r25	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	8d bf       	out	0x3d, r24	; 61
    355e:	2d b7       	in	r18, 0x3d	; 61
    3560:	3e b7       	in	r19, 0x3e	; 62
    3562:	2f 5f       	subi	r18, 0xFF	; 255
    3564:	3f 4f       	sbci	r19, 0xFF	; 255
    3566:	8e 01       	movw	r16, r28
    3568:	0c 5f       	subi	r16, 0xFC	; 252
    356a:	1f 4f       	sbci	r17, 0xFF	; 255
    356c:	ad b7       	in	r26, 0x3d	; 61
    356e:	be b7       	in	r27, 0x3e	; 62
    3570:	12 96       	adiw	r26, 0x02	; 2
    3572:	1c 93       	st	X, r17
    3574:	0e 93       	st	-X, r16
    3576:	11 97       	sbiw	r26, 0x01	; 1
    3578:	88 ec       	ldi	r24, 0xC8	; 200
    357a:	99 e1       	ldi	r25, 0x19	; 25
    357c:	d9 01       	movw	r26, r18
    357e:	13 96       	adiw	r26, 0x03	; 3
    3580:	9c 93       	st	X, r25
    3582:	8e 93       	st	-X, r24
    3584:	12 97       	sbiw	r26, 0x02	; 2
    3586:	15 96       	adiw	r26, 0x05	; 5
    3588:	fc 93       	st	X, r31
    358a:	ee 93       	st	-X, r30
    358c:	14 97       	sbiw	r26, 0x04	; 4
    358e:	ce 01       	movw	r24, r28
    3590:	01 96       	adiw	r24, 0x01	; 1
    3592:	17 96       	adiw	r26, 0x07	; 7
    3594:	9c 93       	st	X, r25
    3596:	8e 93       	st	-X, r24
    3598:	16 97       	sbiw	r26, 0x06	; 6
    359a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
     for(i=0;i<strlen(sGCode);i++){
    359e:	ed b7       	in	r30, 0x3d	; 61
    35a0:	fe b7       	in	r31, 0x3e	; 62
    35a2:	38 96       	adiw	r30, 0x08	; 8
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	fe bf       	out	0x3e, r31	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	ed bf       	out	0x3d, r30	; 61
    35ae:	99 24       	eor	r9, r9
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    35b0:	58 01       	movw	r10, r16
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    35b2:	13 c0       	rjmp	.+38     	; 0x35da <GenerateKeyStamp+0xea>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    35b4:	f5 01       	movw	r30, r10
    35b6:	e0 0f       	add	r30, r16
    35b8:	f1 1f       	adc	r31, r17
    35ba:	60 81       	ld	r22, Z
    35bc:	60 53       	subi	r22, 0x30	; 48
    35be:	f7 01       	movw	r30, r14
    35c0:	e0 0f       	add	r30, r16
    35c2:	f1 1f       	adc	r31, r17
    35c4:	40 81       	ld	r20, Z
    35c6:	40 53       	subi	r20, 0x30	; 48
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	0e 94 9c 19 	call	0x3338	; 0x3338 <GeniusCalc>
    35ce:	f6 01       	movw	r30, r12
    35d0:	e0 0f       	add	r30, r16
    35d2:	f1 1f       	adc	r31, r17
    35d4:	80 5d       	subi	r24, 0xD0	; 208
    35d6:	80 83       	st	Z, r24
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    35d8:	93 94       	inc	r9
    35da:	09 2d       	mov	r16, r9
    35dc:	10 e0       	ldi	r17, 0x00	; 0
    35de:	f7 01       	movw	r30, r14
    35e0:	01 90       	ld	r0, Z+
    35e2:	00 20       	and	r0, r0
    35e4:	e9 f7       	brne	.-6      	; 0x35e0 <GenerateKeyStamp+0xf0>
    35e6:	31 97       	sbiw	r30, 0x01	; 1
    35e8:	ee 19       	sub	r30, r14
    35ea:	ff 09       	sbc	r31, r15
    35ec:	0e 17       	cp	r16, r30
    35ee:	1f 07       	cpc	r17, r31
    35f0:	08 f3       	brcs	.-62     	; 0x35b4 <GenerateKeyStamp+0xc4>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
    35f2:	ec 0d       	add	r30, r12
    35f4:	fd 1d       	adc	r31, r13
    35f6:	10 82       	st	Z, r1
     WrapCode(strKeyStamp);
    35f8:	c6 01       	movw	r24, r12
    35fa:	0e 94 bc 19 	call	0x3378	; 0x3378 <WrapCode>
}
    35fe:	2d 96       	adiw	r28, 0x0d	; 13
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	ff 90       	pop	r15
    3614:	ef 90       	pop	r14
    3616:	df 90       	pop	r13
    3618:	cf 90       	pop	r12
    361a:	bf 90       	pop	r11
    361c:	af 90       	pop	r10
    361e:	9f 90       	pop	r9
    3620:	08 95       	ret

00003622 <ValidateRestoreCode>:

char ValidateRestoreCode(char *sKeyStamp, char *sRestoreCode){//==RC_VALID
    3622:	cf 92       	push	r12
    3624:	df 92       	push	r13
    3626:	ff 92       	push	r15
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	6c 01       	movw	r12, r24
    3638:	8b 01       	movw	r16, r22

	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
    363a:	fc 01       	movw	r30, r24
    363c:	20 81       	ld	r18, Z
    363e:	20 53       	subi	r18, 0x30	; 48
	 for (i=0;i<nSum;i++){
    3640:	ff 24       	eor	r15, r15
    3642:	06 c0       	rjmp	.+12     	; 0x3650 <ValidateRestoreCode+0x2e>
         WrapCode(sKeyStamp);
    3644:	c6 01       	movw	r24, r12
    3646:	29 83       	std	Y+1, r18	; 0x01
    3648:	0e 94 bc 19 	call	0x3378	; 0x3378 <WrapCode>
	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
	 for (i=0;i<nSum;i++){
    364c:	f3 94       	inc	r15
    364e:	29 81       	ldd	r18, Y+1	; 0x01
    3650:	f2 16       	cp	r15, r18
    3652:	c0 f3       	brcs	.-16     	; 0x3644 <ValidateRestoreCode+0x22>
	 //uart_print(1,1,strSend);
     
	 //sprintf_P(strSend,PSTR("WrapStamp:%s"),sRestoreCode);
	 //uart_print(1,1,strSend);

	 if (strcmp(sKeyStamp,sRestoreCode)==0)
    3654:	c6 01       	movw	r24, r12
    3656:	b8 01       	movw	r22, r16
    3658:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	11 f4       	brne	.+4      	; 0x3664 <ValidateRestoreCode+0x42>
	     Result=RC_VALID;	 
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	01 c0       	rjmp	.+2      	; 0x3666 <ValidateRestoreCode+0x44>
     else Result=RC_INVALID;
    3664:	82 e0       	ldi	r24, 0x02	; 2

   return Result;
}
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	ff 90       	pop	r15
    3672:	df 90       	pop	r13
    3674:	cf 90       	pop	r12
    3676:	08 95       	ret

00003678 <FSubMenuAdmin>:

char FSubMenuAdmin(){
     char Result;
	 Result=MENU_DONE;
   return Result;
}
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	08 95       	ret

0000367c <CountNoPumpSatus>:
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    367c:	60 91 3a 02 	lds	r22, 0x023A
    3680:	28 2f       	mov	r18, r24
    3682:	39 2f       	mov	r19, r25
    3684:	f9 01       	movw	r30, r18
   return Result;
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
    3686:	80 e0       	ldi	r24, 0x00	; 0
	 for (i=0;i<PumpCountMax;i++){
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	05 c0       	rjmp	.+10     	; 0x3696 <CountNoPumpSatus+0x1a>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
    368c:	21 91       	ld	r18, Z+
    368e:	2d 32       	cpi	r18, 0x2D	; 45
    3690:	09 f4       	brne	.+2      	; 0x3694 <CountNoPumpSatus+0x18>
		      Result++;		  
    3692:	8f 5f       	subi	r24, 0xFF	; 255
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    3694:	9f 5f       	subi	r25, 0xFF	; 255
    3696:	96 17       	cp	r25, r22
    3698:	c8 f3       	brcs	.-14     	; 0x368c <CountNoPumpSatus+0x10>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    369a:	08 95       	ret

0000369c <CountTotalizerSatus>:
char CountTotalizerSatus(char *strPumpStatusTotalizer){
    369c:	9c 01       	movw	r18, r24
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    369e:	fc 01       	movw	r30, r24
    36a0:	01 90       	ld	r0, Z+
    36a2:	00 20       	and	r0, r0
    36a4:	e9 f7       	brne	.-6      	; 0x36a0 <CountTotalizerSatus+0x4>
    36a6:	31 97       	sbiw	r30, 0x01	; 1
    36a8:	e8 1b       	sub	r30, r24
    36aa:	f9 0b       	sbc	r31, r25
	 }
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
    36ac:	80 e0       	ldi	r24, 0x00	; 0
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	08 c0       	rjmp	.+16     	; 0x36c2 <CountTotalizerSatus+0x26>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
    36b2:	42 0f       	add	r20, r18
    36b4:	53 1f       	adc	r21, r19
    36b6:	da 01       	movw	r26, r20
    36b8:	4c 91       	ld	r20, X
    36ba:	44 35       	cpi	r20, 0x54	; 84
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <CountTotalizerSatus+0x24>
		      Result++;		  
    36be:	8f 5f       	subi	r24, 0xFF	; 255
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    36c0:	9f 5f       	subi	r25, 0xFF	; 255
    36c2:	49 2f       	mov	r20, r25
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	4e 17       	cp	r20, r30
    36c8:	5f 07       	cpc	r21, r31
    36ca:	98 f3       	brcs	.-26     	; 0x36b2 <CountTotalizerSatus+0x16>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    36cc:	08 95       	ret

000036ce <FCloseDay>:
   return Result;
}

char FCloseDay(){

}
    36ce:	08 95       	ret

000036d0 <FLockPump>:
char FLockPump(){

}
    36d0:	08 95       	ret

000036d2 <FMenuSettingPassword>:
char FMenuSettingPassword(){
     char Result;
   //_menu_password();
   Result=MENU_DONE;
   return Result;
}
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	08 95       	ret

000036d6 <FMenuSettingClientIP>:





char FMenuSettingClientIP(){
    36d6:	ff 92       	push	r15
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	64 97       	sbiw	r28, 0x14	; 20
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
     //Client IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
     Result=MENU_NONE;
    36f0:	10 92 1c 03 	sts	0x031C, r1
	 switch(stClientIP){
    36f4:	80 91 59 01 	lds	r24, 0x0159
    36f8:	82 30       	cpi	r24, 0x02	; 2
    36fa:	09 f4       	brne	.+2      	; 0x36fe <FMenuSettingClientIP+0x28>
    36fc:	7b c0       	rjmp	.+246    	; 0x37f4 <FMenuSettingClientIP+0x11e>
    36fe:	83 30       	cpi	r24, 0x03	; 3
    3700:	20 f4       	brcc	.+8      	; 0x370a <FMenuSettingClientIP+0x34>
    3702:	81 30       	cpi	r24, 0x01	; 1
    3704:	09 f0       	breq	.+2      	; 0x3708 <FMenuSettingClientIP+0x32>
    3706:	4a c2       	rjmp	.+1172   	; 0x3b9c <FMenuSettingClientIP+0x4c6>
    3708:	07 c0       	rjmp	.+14     	; 0x3718 <FMenuSettingClientIP+0x42>
    370a:	83 30       	cpi	r24, 0x03	; 3
    370c:	09 f4       	brne	.+2      	; 0x3710 <FMenuSettingClientIP+0x3a>
    370e:	41 c2       	rjmp	.+1154   	; 0x3b92 <FMenuSettingClientIP+0x4bc>
    3710:	84 30       	cpi	r24, 0x04	; 4
    3712:	09 f0       	breq	.+2      	; 0x3716 <FMenuSettingClientIP+0x40>
    3714:	43 c2       	rjmp	.+1158   	; 0x3b9c <FMenuSettingClientIP+0x4c6>
    3716:	31 c2       	rjmp	.+1122   	; 0x3b7a <FMenuSettingClientIP+0x4a4>
		  case cipInit:
			   lcd_clear();
    3718:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	           lcd_printf(1,1,PSTR("Client IP"));
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	61 e0       	ldi	r22, 0x01	; 1
    3720:	4c eb       	ldi	r20, 0xBC	; 188
    3722:	54 e1       	ldi	r21, 0x14	; 20
    3724:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefClientIP,4);
    3728:	85 e1       	ldi	r24, 0x15	; 21
    372a:	93 e0       	ldi	r25, 0x03	; 3
    372c:	68 e2       	ldi	r22, 0x28	; 40
    372e:	70 e0       	ldi	r23, 0x00	; 0
    3730:	44 e0       	ldi	r20, 0x04	; 4
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    3738:	2d b7       	in	r18, 0x3d	; 61
    373a:	3e b7       	in	r19, 0x3e	; 62
    373c:	2c 50       	subi	r18, 0x0C	; 12
    373e:	30 40       	sbci	r19, 0x00	; 0
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	3e bf       	out	0x3e, r19	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	2d bf       	out	0x3d, r18	; 61
    374a:	ed b7       	in	r30, 0x3d	; 61
    374c:	fe b7       	in	r31, 0x3e	; 62
    374e:	31 96       	adiw	r30, 0x01	; 1
    3750:	8e 01       	movw	r16, r28
    3752:	0f 5f       	subi	r16, 0xFF	; 255
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	ad b7       	in	r26, 0x3d	; 61
    3758:	be b7       	in	r27, 0x3e	; 62
    375a:	12 96       	adiw	r26, 0x02	; 2
    375c:	1c 93       	st	X, r17
    375e:	0e 93       	st	-X, r16
    3760:	11 97       	sbiw	r26, 0x01	; 1
    3762:	8b ea       	ldi	r24, 0xAB	; 171
    3764:	94 e1       	ldi	r25, 0x14	; 20
    3766:	93 83       	std	Z+3, r25	; 0x03
    3768:	82 83       	std	Z+2, r24	; 0x02
    376a:	80 91 15 03 	lds	r24, 0x0315
    376e:	84 83       	std	Z+4, r24	; 0x04
    3770:	15 82       	std	Z+5, r1	; 0x05
    3772:	80 91 16 03 	lds	r24, 0x0316
    3776:	86 83       	std	Z+6, r24	; 0x06
    3778:	17 82       	std	Z+7, r1	; 0x07
    377a:	80 91 17 03 	lds	r24, 0x0317
    377e:	80 87       	std	Z+8, r24	; 0x08
    3780:	11 86       	std	Z+9, r1	; 0x09
    3782:	80 91 18 03 	lds	r24, 0x0318
    3786:	82 87       	std	Z+10, r24	; 0x0a
    3788:	13 86       	std	Z+11, r1	; 0x0b
    378a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    378e:	2d b7       	in	r18, 0x3d	; 61
    3790:	3e b7       	in	r19, 0x3e	; 62
    3792:	24 5f       	subi	r18, 0xF4	; 244
    3794:	3f 4f       	sbci	r19, 0xFF	; 255
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	f8 94       	cli
    379a:	3e bf       	out	0x3e, r19	; 62
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	2d bf       	out	0x3d, r18	; 61
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	a8 01       	movw	r20, r16
    37a6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    37aa:	83 e0       	ldi	r24, 0x03	; 3
    37ac:	61 e0       	ldi	r22, 0x01	; 1
    37ae:	46 e9       	ldi	r20, 0x96	; 150
    37b0:	54 e1       	ldi	r21, 0x14	; 20
    37b2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    37b6:	84 e0       	ldi	r24, 0x04	; 4
    37b8:	61 e0       	ldi	r22, 0x01	; 1
    37ba:	41 e8       	ldi	r20, 0x81	; 129
    37bc:	54 e1       	ldi	r21, 0x14	; 20
    37be:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
               iLoop=0;
    37c2:	10 92 14 03 	sts	0x0314, r1
    37c6:	10 92 13 03 	sts	0x0313, r1
			   y=3,x=8;
    37ca:	83 e0       	ldi	r24, 0x03	; 3
    37cc:	80 93 1a 03 	sts	0x031A, r24
    37d0:	88 e0       	ldi	r24, 0x08	; 8
    37d2:	80 93 1b 03 	sts	0x031B, r24
			   iInput=0; iBlok=0;
    37d6:	10 92 19 03 	sts	0x0319, r1
    37da:	10 92 12 03 	sts	0x0312, r1
    37de:	10 92 11 03 	sts	0x0311, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    37e2:	80 e3       	ldi	r24, 0x30	; 48
    37e4:	80 93 1e 03 	sts	0x031E, r24
    37e8:	80 93 1f 03 	sts	0x031F, r24
    37ec:	80 93 20 03 	sts	0x0320, r24
			   stClientIP=cipInputIP; 
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	cc c1       	rjmp	.+920    	; 0x3b8c <FMenuSettingClientIP+0x4b6>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    37f4:	80 91 13 03 	lds	r24, 0x0313
    37f8:	90 91 14 03 	lds	r25, 0x0314
    37fc:	01 96       	adiw	r24, 0x01	; 1
    37fe:	90 93 14 03 	sts	0x0314, r25
    3802:	80 93 13 03 	sts	0x0313, r24
			   if ((iLoop%2000)==0){
    3806:	60 ed       	ldi	r22, 0xD0	; 208
    3808:	77 e0       	ldi	r23, 0x07	; 7
    380a:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	61 f4       	brne	.+24     	; 0x382a <FMenuSettingClientIP+0x154>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    3812:	60 91 11 03 	lds	r22, 0x0311
    3816:	66 0f       	add	r22, r22
    3818:	66 0f       	add	r22, r22
    381a:	80 91 1b 03 	lds	r24, 0x031B
    381e:	68 0f       	add	r22, r24
    3820:	80 91 1a 03 	lds	r24, 0x031A
    3824:	4f e5       	ldi	r20, 0x5F	; 95
    3826:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    382a:	80 91 13 03 	lds	r24, 0x0313
    382e:	90 91 14 03 	lds	r25, 0x0314
    3832:	60 ed       	ldi	r22, 0xD0	; 208
    3834:	77 e0       	ldi	r23, 0x07	; 7
    3836:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    383a:	33 e0       	ldi	r19, 0x03	; 3
    383c:	88 3e       	cpi	r24, 0xE8	; 232
    383e:	93 07       	cpc	r25, r19
    3840:	61 f4       	brne	.+24     	; 0x385a <FMenuSettingClientIP+0x184>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    3842:	60 91 11 03 	lds	r22, 0x0311
    3846:	66 0f       	add	r22, r22
    3848:	66 0f       	add	r22, r22
    384a:	80 91 1b 03 	lds	r24, 0x031B
    384e:	68 0f       	add	r22, r24
    3850:	80 91 1a 03 	lds	r24, 0x031A
    3854:	40 e2       	ldi	r20, 0x20	; 32
    3856:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    3860:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    3862:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
               if ((keyChar>='0')&&(keyChar<='9')){
    3866:	98 2f       	mov	r25, r24
    3868:	90 53       	subi	r25, 0x30	; 48
    386a:	9a 30       	cpi	r25, 0x0A	; 10
    386c:	08 f0       	brcs	.+2      	; 0x3870 <FMenuSettingClientIP+0x19a>
    386e:	d0 c0       	rjmp	.+416    	; 0x3a10 <FMenuSettingClientIP+0x33a>
    3870:	2f ef       	ldi	r18, 0xFF	; 255
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	48 e0       	ldi	r20, 0x08	; 8
    3876:	21 50       	subi	r18, 0x01	; 1
    3878:	30 40       	sbci	r19, 0x00	; 0
    387a:	40 40       	sbci	r20, 0x00	; 0
    387c:	e1 f7       	brne	.-8      	; 0x3876 <FMenuSettingClientIP+0x1a0>
    387e:	00 c0       	rjmp	.+0      	; 0x3880 <FMenuSettingClientIP+0x1aa>
    3880:	00 00       	nop
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    3882:	90 91 19 03 	lds	r25, 0x0319
    3886:	e9 2f       	mov	r30, r25
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	e2 5e       	subi	r30, 0xE2	; 226
    388c:	fc 4f       	sbci	r31, 0xFC	; 252
    388e:	80 83       	st	Z, r24
				   iInput++;                    
    3890:	9f 5f       	subi	r25, 0xFF	; 255
    3892:	90 93 19 03 	sts	0x0319, r25
				   for (i=1;i<(iInput+1);i++){
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	18 c0       	rjmp	.+48     	; 0x38ca <FMenuSettingClientIP+0x1f4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    389a:	60 91 1b 03 	lds	r22, 0x031B
    389e:	65 0f       	add	r22, r21
    38a0:	63 50       	subi	r22, 0x03	; 3
    38a2:	80 91 11 03 	lds	r24, 0x0311
    38a6:	88 0f       	add	r24, r24
    38a8:	88 0f       	add	r24, r24
    38aa:	68 0f       	add	r22, r24
    38ac:	80 91 1a 03 	lds	r24, 0x031A
    38b0:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
    38b4:	e0 91 1d 03 	lds	r30, 0x031D
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	e3 5e       	subi	r30, 0xE3	; 227
    38bc:	fc 4f       	sbci	r31, 0xFC	; 252
    38be:	80 81       	ld	r24, Z
    38c0:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    38c4:	80 91 1d 03 	lds	r24, 0x031D
    38c8:	8f 5f       	subi	r24, 0xFF	; 255
    38ca:	80 93 1d 03 	sts	0x031D, r24
    38ce:	40 91 19 03 	lds	r20, 0x0319
    38d2:	50 91 1d 03 	lds	r21, 0x031D
    38d6:	24 2f       	mov	r18, r20
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	85 2f       	mov	r24, r21
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	28 17       	cp	r18, r24
    38e0:	39 07       	cpc	r19, r25
    38e2:	dc f6       	brge	.-74     	; 0x389a <FMenuSettingClientIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    38e4:	43 30       	cpi	r20, 0x03	; 3
    38e6:	08 f4       	brcc	.+2      	; 0x38ea <FMenuSettingClientIP+0x214>
    38e8:	89 c0       	rjmp	.+274    	; 0x39fc <FMenuSettingClientIP+0x326>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    38ea:	60 91 11 03 	lds	r22, 0x0311
    38ee:	70 91 12 03 	lds	r23, 0x0312
    38f2:	fb 01       	movw	r30, r22
    38f4:	eb 5e       	subi	r30, 0xEB	; 235
    38f6:	fc 4f       	sbci	r31, 0xFC	; 252
    38f8:	80 91 20 03 	lds	r24, 0x0320
    38fc:	80 5d       	subi	r24, 0xD0	; 208
    38fe:	20 91 1e 03 	lds	r18, 0x031E
    3902:	94 e6       	ldi	r25, 0x64	; 100
    3904:	29 9f       	mul	r18, r25
    3906:	90 2d       	mov	r25, r0
    3908:	11 24       	eor	r1, r1
    390a:	89 0f       	add	r24, r25
    390c:	90 91 1f 03 	lds	r25, 0x031F
    3910:	99 0f       	add	r25, r25
    3912:	29 2f       	mov	r18, r25
    3914:	22 0f       	add	r18, r18
    3916:	22 0f       	add	r18, r18
    3918:	29 0f       	add	r18, r25
    391a:	82 0f       	add	r24, r18
    391c:	80 83       	st	Z, r24
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    391e:	80 e3       	ldi	r24, 0x30	; 48
    3920:	80 93 1e 03 	sts	0x031E, r24
    3924:	80 93 1f 03 	sts	0x031F, r24
    3928:	80 93 20 03 	sts	0x0320, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    392c:	66 0f       	add	r22, r22
    392e:	66 0f       	add	r22, r22
    3930:	80 91 1b 03 	lds	r24, 0x031B
    3934:	68 0f       	add	r22, r24
    3936:	64 1b       	sub	r22, r20
    3938:	80 91 1a 03 	lds	r24, 0x031A
    393c:	4d e7       	ldi	r20, 0x7D	; 125
    393e:	54 e1       	ldi	r21, 0x14	; 20
    3940:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    3944:	00 d0       	rcall	.+0      	; 0x3946 <FMenuSettingClientIP+0x270>
    3946:	00 d0       	rcall	.+0      	; 0x3948 <FMenuSettingClientIP+0x272>
    3948:	00 d0       	rcall	.+0      	; 0x394a <FMenuSettingClientIP+0x274>
    394a:	ed b7       	in	r30, 0x3d	; 61
    394c:	fe b7       	in	r31, 0x3e	; 62
    394e:	31 96       	adiw	r30, 0x01	; 1
    3950:	8e 01       	movw	r16, r28
    3952:	0f 5f       	subi	r16, 0xFF	; 255
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	ad b7       	in	r26, 0x3d	; 61
    3958:	be b7       	in	r27, 0x3e	; 62
    395a:	12 96       	adiw	r26, 0x02	; 2
    395c:	1c 93       	st	X, r17
    395e:	0e 93       	st	-X, r16
    3960:	11 97       	sbiw	r26, 0x01	; 1
    3962:	8a e7       	ldi	r24, 0x7A	; 122
    3964:	94 e1       	ldi	r25, 0x14	; 20
    3966:	93 83       	std	Z+3, r25	; 0x03
    3968:	82 83       	std	Z+2, r24	; 0x02
    396a:	a0 91 11 03 	lds	r26, 0x0311
    396e:	b0 91 12 03 	lds	r27, 0x0312
    3972:	ab 5e       	subi	r26, 0xEB	; 235
    3974:	bc 4f       	sbci	r27, 0xFC	; 252
    3976:	8c 91       	ld	r24, X
    3978:	84 83       	std	Z+4, r24	; 0x04
    397a:	15 82       	std	Z+5, r1	; 0x05
    397c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    3980:	f8 01       	movw	r30, r16
    3982:	01 90       	ld	r0, Z+
    3984:	00 20       	and	r0, r0
    3986:	e9 f7       	brne	.-6      	; 0x3982 <FMenuSettingClientIP+0x2ac>
    3988:	31 97       	sbiw	r30, 0x01	; 1
    398a:	e0 1b       	sub	r30, r16
    398c:	f1 0b       	sbc	r31, r17
    398e:	2d b7       	in	r18, 0x3d	; 61
    3990:	3e b7       	in	r19, 0x3e	; 62
    3992:	2a 5f       	subi	r18, 0xFA	; 250
    3994:	3f 4f       	sbci	r19, 0xFF	; 255
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	3e bf       	out	0x3e, r19	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	2d bf       	out	0x3d, r18	; 61
    39a0:	60 91 1b 03 	lds	r22, 0x031B
    39a4:	6f 5f       	subi	r22, 0xFF	; 255
    39a6:	80 91 11 03 	lds	r24, 0x0311
    39aa:	88 0f       	add	r24, r24
    39ac:	88 0f       	add	r24, r24
    39ae:	68 0f       	add	r22, r24
    39b0:	6e 1b       	sub	r22, r30
    39b2:	80 91 1a 03 	lds	r24, 0x031A
    39b6:	a8 01       	movw	r20, r16
    39b8:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    39bc:	80 91 11 03 	lds	r24, 0x0311
    39c0:	90 91 12 03 	lds	r25, 0x0312
    39c4:	00 97       	sbiw	r24, 0x00	; 0
    39c6:	71 f0       	breq	.+28     	; 0x39e4 <FMenuSettingClientIP+0x30e>
    39c8:	60 91 1b 03 	lds	r22, 0x031B
    39cc:	6f 5f       	subi	r22, 0xFF	; 255
    39ce:	81 50       	subi	r24, 0x01	; 1
    39d0:	90 4c       	sbci	r25, 0xC0	; 192
    39d2:	88 0f       	add	r24, r24
    39d4:	88 0f       	add	r24, r24
    39d6:	68 0f       	add	r22, r24
    39d8:	80 91 1a 03 	lds	r24, 0x031A
    39dc:	48 e7       	ldi	r20, 0x78	; 120
    39de:	54 e1       	ldi	r21, 0x14	; 20
    39e0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   iInput=0;
    39e4:	10 92 19 03 	sts	0x0319, r1
					   iBlok++;
    39e8:	20 91 11 03 	lds	r18, 0x0311
    39ec:	30 91 12 03 	lds	r19, 0x0312
    39f0:	2f 5f       	subi	r18, 0xFF	; 255
    39f2:	3f 4f       	sbci	r19, 0xFF	; 255
    39f4:	30 93 12 03 	sts	0x0312, r19
    39f8:	20 93 11 03 	sts	0x0311, r18

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    39fc:	80 91 11 03 	lds	r24, 0x0311
    3a00:	90 91 12 03 	lds	r25, 0x0312
    3a04:	84 30       	cpi	r24, 0x04	; 4
    3a06:	91 05       	cpc	r25, r1
    3a08:	18 f0       	brcs	.+6      	; 0x3a10 <FMenuSettingClientIP+0x33a>
    3a0a:	84 e0       	ldi	r24, 0x04	; 4
    3a0c:	80 93 59 01 	sts	0x0159, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    3a10:	3f 2d       	mov	r19, r15
    3a12:	37 3e       	cpi	r19, 0xE7	; 231
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <FMenuSettingClientIP+0x342>
    3a16:	b9 c0       	rjmp	.+370    	; 0x3b8a <FMenuSettingClientIP+0x4b4>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    3a18:	4f 2d       	mov	r20, r15
    3a1a:	47 3b       	cpi	r20, 0xB7	; 183
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <FMenuSettingClientIP+0x34a>
    3a1e:	be c0       	rjmp	.+380    	; 0x3b9c <FMenuSettingClientIP+0x4c6>
			       //NextInput
			       if (iBlok<4){
    3a20:	80 91 11 03 	lds	r24, 0x0311
    3a24:	90 91 12 03 	lds	r25, 0x0312
    3a28:	84 30       	cpi	r24, 0x04	; 4
    3a2a:	91 05       	cpc	r25, r1
    3a2c:	08 f0       	brcs	.+2      	; 0x3a30 <FMenuSettingClientIP+0x35a>
    3a2e:	9c c0       	rjmp	.+312    	; 0x3b68 <FMenuSettingClientIP+0x492>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    3a30:	20 91 19 03 	lds	r18, 0x0319
    3a34:	21 30       	cpi	r18, 0x01	; 1
    3a36:	39 f4       	brne	.+14     	; 0x3a46 <FMenuSettingClientIP+0x370>
    3a38:	fc 01       	movw	r30, r24
    3a3a:	eb 5e       	subi	r30, 0xEB	; 235
    3a3c:	fc 4f       	sbci	r31, 0xFC	; 252
    3a3e:	20 91 1e 03 	lds	r18, 0x031E
    3a42:	20 53       	subi	r18, 0x30	; 48
    3a44:	22 c0       	rjmp	.+68     	; 0x3a8a <FMenuSettingClientIP+0x3b4>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    3a46:	22 30       	cpi	r18, 0x02	; 2
    3a48:	49 f4       	brne	.+18     	; 0x3a5c <FMenuSettingClientIP+0x386>
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	eb 5e       	subi	r30, 0xEB	; 235
    3a4e:	fc 4f       	sbci	r31, 0xFC	; 252
    3a50:	20 91 1f 03 	lds	r18, 0x031F
    3a54:	20 51       	subi	r18, 0x10	; 16
    3a56:	30 91 1e 03 	lds	r19, 0x031E
    3a5a:	11 c0       	rjmp	.+34     	; 0x3a7e <FMenuSettingClientIP+0x3a8>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    3a5c:	23 30       	cpi	r18, 0x03	; 3
    3a5e:	b1 f4       	brne	.+44     	; 0x3a8c <FMenuSettingClientIP+0x3b6>
    3a60:	fc 01       	movw	r30, r24
    3a62:	eb 5e       	subi	r30, 0xEB	; 235
    3a64:	fc 4f       	sbci	r31, 0xFC	; 252
    3a66:	20 91 20 03 	lds	r18, 0x0320
    3a6a:	20 5d       	subi	r18, 0xD0	; 208
    3a6c:	40 91 1e 03 	lds	r20, 0x031E
    3a70:	34 e6       	ldi	r19, 0x64	; 100
    3a72:	43 9f       	mul	r20, r19
    3a74:	30 2d       	mov	r19, r0
    3a76:	11 24       	eor	r1, r1
    3a78:	23 0f       	add	r18, r19
    3a7a:	30 91 1f 03 	lds	r19, 0x031F
    3a7e:	33 0f       	add	r19, r19
    3a80:	43 2f       	mov	r20, r19
    3a82:	44 0f       	add	r20, r20
    3a84:	44 0f       	add	r20, r20
    3a86:	43 0f       	add	r20, r19
    3a88:	24 0f       	add	r18, r20
    3a8a:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3a8c:	20 e3       	ldi	r18, 0x30	; 48
    3a8e:	20 93 1e 03 	sts	0x031E, r18
    3a92:	20 93 1f 03 	sts	0x031F, r18
    3a96:	20 93 20 03 	sts	0x0320, r18
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    3a9a:	60 91 1b 03 	lds	r22, 0x031B
    3a9e:	63 50       	subi	r22, 0x03	; 3
    3aa0:	88 0f       	add	r24, r24
    3aa2:	88 0f       	add	r24, r24
    3aa4:	68 0f       	add	r22, r24
    3aa6:	80 91 1a 03 	lds	r24, 0x031A
    3aaa:	44 e7       	ldi	r20, 0x74	; 116
    3aac:	54 e1       	ldi	r21, 0x14	; 20
    3aae:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    3ab2:	00 d0       	rcall	.+0      	; 0x3ab4 <FMenuSettingClientIP+0x3de>
    3ab4:	00 d0       	rcall	.+0      	; 0x3ab6 <FMenuSettingClientIP+0x3e0>
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <FMenuSettingClientIP+0x3e2>
    3ab8:	ed b7       	in	r30, 0x3d	; 61
    3aba:	fe b7       	in	r31, 0x3e	; 62
    3abc:	31 96       	adiw	r30, 0x01	; 1
    3abe:	8e 01       	movw	r16, r28
    3ac0:	0f 5f       	subi	r16, 0xFF	; 255
    3ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac4:	ad b7       	in	r26, 0x3d	; 61
    3ac6:	be b7       	in	r27, 0x3e	; 62
    3ac8:	12 96       	adiw	r26, 0x02	; 2
    3aca:	1c 93       	st	X, r17
    3acc:	0e 93       	st	-X, r16
    3ace:	11 97       	sbiw	r26, 0x01	; 1
    3ad0:	81 e7       	ldi	r24, 0x71	; 113
    3ad2:	94 e1       	ldi	r25, 0x14	; 20
    3ad4:	93 83       	std	Z+3, r25	; 0x03
    3ad6:	82 83       	std	Z+2, r24	; 0x02
    3ad8:	a0 91 11 03 	lds	r26, 0x0311
    3adc:	b0 91 12 03 	lds	r27, 0x0312
    3ae0:	ab 5e       	subi	r26, 0xEB	; 235
    3ae2:	bc 4f       	sbci	r27, 0xFC	; 252
    3ae4:	8c 91       	ld	r24, X
    3ae6:	84 83       	std	Z+4, r24	; 0x04
    3ae8:	15 82       	std	Z+5, r1	; 0x05
    3aea:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    3aee:	f8 01       	movw	r30, r16
    3af0:	01 90       	ld	r0, Z+
    3af2:	00 20       	and	r0, r0
    3af4:	e9 f7       	brne	.-6      	; 0x3af0 <FMenuSettingClientIP+0x41a>
    3af6:	31 97       	sbiw	r30, 0x01	; 1
    3af8:	e0 1b       	sub	r30, r16
    3afa:	f1 0b       	sbc	r31, r17
    3afc:	2d b7       	in	r18, 0x3d	; 61
    3afe:	3e b7       	in	r19, 0x3e	; 62
    3b00:	2a 5f       	subi	r18, 0xFA	; 250
    3b02:	3f 4f       	sbci	r19, 0xFF	; 255
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	f8 94       	cli
    3b08:	3e bf       	out	0x3e, r19	; 62
    3b0a:	0f be       	out	0x3f, r0	; 63
    3b0c:	2d bf       	out	0x3d, r18	; 61
    3b0e:	60 91 1b 03 	lds	r22, 0x031B
    3b12:	6f 5f       	subi	r22, 0xFF	; 255
    3b14:	80 91 11 03 	lds	r24, 0x0311
    3b18:	88 0f       	add	r24, r24
    3b1a:	88 0f       	add	r24, r24
    3b1c:	68 0f       	add	r22, r24
    3b1e:	6e 1b       	sub	r22, r30
    3b20:	80 91 1a 03 	lds	r24, 0x031A
    3b24:	a8 01       	movw	r20, r16
    3b26:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    3b2a:	80 91 11 03 	lds	r24, 0x0311
    3b2e:	90 91 12 03 	lds	r25, 0x0312
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	71 f0       	breq	.+28     	; 0x3b52 <FMenuSettingClientIP+0x47c>
    3b36:	60 91 1b 03 	lds	r22, 0x031B
    3b3a:	6f 5f       	subi	r22, 0xFF	; 255
    3b3c:	81 50       	subi	r24, 0x01	; 1
    3b3e:	90 4c       	sbci	r25, 0xC0	; 192
    3b40:	88 0f       	add	r24, r24
    3b42:	88 0f       	add	r24, r24
    3b44:	68 0f       	add	r22, r24
    3b46:	80 91 1a 03 	lds	r24, 0x031A
    3b4a:	4f e6       	ldi	r20, 0x6F	; 111
    3b4c:	54 e1       	ldi	r21, 0x14	; 20
    3b4e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				       iInput=0;
    3b52:	10 92 19 03 	sts	0x0319, r1
					   iBlok++;	   
    3b56:	80 91 11 03 	lds	r24, 0x0311
    3b5a:	90 91 12 03 	lds	r25, 0x0312
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	90 93 12 03 	sts	0x0312, r25
    3b64:	80 93 11 03 	sts	0x0311, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    3b68:	80 91 11 03 	lds	r24, 0x0311
    3b6c:	90 91 12 03 	lds	r25, 0x0312
    3b70:	84 30       	cpi	r24, 0x04	; 4
    3b72:	91 05       	cpc	r25, r1
    3b74:	98 f0       	brcs	.+38     	; 0x3b9c <FMenuSettingClientIP+0x4c6>
    3b76:	84 e0       	ldi	r24, 0x04	; 4
    3b78:	09 c0       	rjmp	.+18     	; 0x3b8c <FMenuSettingClientIP+0x4b6>
			   }
		       break;
          case cipStoreIPblok://UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefClientIP,4);
    3b7a:	85 e1       	ldi	r24, 0x15	; 21
    3b7c:	93 e0       	ldi	r25, 0x03	; 3
    3b7e:	68 e2       	ldi	r22, 0x28	; 40
    3b80:	70 e0       	ldi	r23, 0x00	; 0
    3b82:	44 e0       	ldi	r20, 0x04	; 4
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
			   stClientIP=cipExit;
    3b8a:	83 e0       	ldi	r24, 0x03	; 3
    3b8c:	80 93 59 01 	sts	0x0159, r24
		       break; 
    3b90:	05 c0       	rjmp	.+10     	; 0x3b9c <FMenuSettingClientIP+0x4c6>
          case cipExit://Cancel IPConfig
		       stClientIP=cipInit;
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	80 93 59 01 	sts	0x0159, r24
		       Result=MENU_DONE;
    3b98:	80 93 1c 03 	sts	0x031C, r24
		       break;     
		  }//EndSwitch	 
    return Result;
}
    3b9c:	80 91 1c 03 	lds	r24, 0x031C
    3ba0:	64 96       	adiw	r28, 0x14	; 20
    3ba2:	0f b6       	in	r0, 0x3f	; 63
    3ba4:	f8 94       	cli
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	0f be       	out	0x3f, r0	; 63
    3baa:	cd bf       	out	0x3d, r28	; 61
    3bac:	cf 91       	pop	r28
    3bae:	df 91       	pop	r29
    3bb0:	1f 91       	pop	r17
    3bb2:	0f 91       	pop	r16
    3bb4:	ff 90       	pop	r15
    3bb6:	08 95       	ret

00003bb8 <FMenuSettingServerIP>:

char FMenuSettingServerIP(){
    3bb8:	ff 92       	push	r15
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	64 97       	sbiw	r28, 0x14	; 20
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
     //Server IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
	 Result=MENU_NONE;
    3bd2:	10 92 0c 03 	sts	0x030C, r1
     switch(stClientIP){
    3bd6:	80 91 58 01 	lds	r24, 0x0158
    3bda:	82 30       	cpi	r24, 0x02	; 2
    3bdc:	09 f4       	brne	.+2      	; 0x3be0 <FMenuSettingServerIP+0x28>
    3bde:	7b c0       	rjmp	.+246    	; 0x3cd6 <FMenuSettingServerIP+0x11e>
    3be0:	83 30       	cpi	r24, 0x03	; 3
    3be2:	20 f4       	brcc	.+8      	; 0x3bec <FMenuSettingServerIP+0x34>
    3be4:	81 30       	cpi	r24, 0x01	; 1
    3be6:	09 f0       	breq	.+2      	; 0x3bea <FMenuSettingServerIP+0x32>
    3be8:	4a c2       	rjmp	.+1172   	; 0x407e <FMenuSettingServerIP+0x4c6>
    3bea:	07 c0       	rjmp	.+14     	; 0x3bfa <FMenuSettingServerIP+0x42>
    3bec:	83 30       	cpi	r24, 0x03	; 3
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <FMenuSettingServerIP+0x3a>
    3bf0:	41 c2       	rjmp	.+1154   	; 0x4074 <FMenuSettingServerIP+0x4bc>
    3bf2:	84 30       	cpi	r24, 0x04	; 4
    3bf4:	09 f0       	breq	.+2      	; 0x3bf8 <FMenuSettingServerIP+0x40>
    3bf6:	43 c2       	rjmp	.+1158   	; 0x407e <FMenuSettingServerIP+0x4c6>
    3bf8:	31 c2       	rjmp	.+1122   	; 0x405c <FMenuSettingServerIP+0x4a4>
		  case cipInit:
			   lcd_clear();
    3bfa:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	           lcd_printf(1,1,PSTR("Server IP"));
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	61 e0       	ldi	r22, 0x01	; 1
    3c02:	45 e6       	ldi	r20, 0x65	; 101
    3c04:	54 e1       	ldi	r21, 0x14	; 20
    3c06:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefServerIP,4);
    3c0a:	85 e0       	ldi	r24, 0x05	; 5
    3c0c:	93 e0       	ldi	r25, 0x03	; 3
    3c0e:	6c e2       	ldi	r22, 0x2C	; 44
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	44 e0       	ldi	r20, 0x04	; 4
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    3c1a:	2d b7       	in	r18, 0x3d	; 61
    3c1c:	3e b7       	in	r19, 0x3e	; 62
    3c1e:	2c 50       	subi	r18, 0x0C	; 12
    3c20:	30 40       	sbci	r19, 0x00	; 0
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	3e bf       	out	0x3e, r19	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	2d bf       	out	0x3d, r18	; 61
    3c2c:	ed b7       	in	r30, 0x3d	; 61
    3c2e:	fe b7       	in	r31, 0x3e	; 62
    3c30:	31 96       	adiw	r30, 0x01	; 1
    3c32:	8e 01       	movw	r16, r28
    3c34:	0f 5f       	subi	r16, 0xFF	; 255
    3c36:	1f 4f       	sbci	r17, 0xFF	; 255
    3c38:	ad b7       	in	r26, 0x3d	; 61
    3c3a:	be b7       	in	r27, 0x3e	; 62
    3c3c:	12 96       	adiw	r26, 0x02	; 2
    3c3e:	1c 93       	st	X, r17
    3c40:	0e 93       	st	-X, r16
    3c42:	11 97       	sbiw	r26, 0x01	; 1
    3c44:	84 e5       	ldi	r24, 0x54	; 84
    3c46:	94 e1       	ldi	r25, 0x14	; 20
    3c48:	93 83       	std	Z+3, r25	; 0x03
    3c4a:	82 83       	std	Z+2, r24	; 0x02
    3c4c:	80 91 05 03 	lds	r24, 0x0305
    3c50:	84 83       	std	Z+4, r24	; 0x04
    3c52:	15 82       	std	Z+5, r1	; 0x05
    3c54:	80 91 06 03 	lds	r24, 0x0306
    3c58:	86 83       	std	Z+6, r24	; 0x06
    3c5a:	17 82       	std	Z+7, r1	; 0x07
    3c5c:	80 91 07 03 	lds	r24, 0x0307
    3c60:	80 87       	std	Z+8, r24	; 0x08
    3c62:	11 86       	std	Z+9, r1	; 0x09
    3c64:	80 91 08 03 	lds	r24, 0x0308
    3c68:	82 87       	std	Z+10, r24	; 0x0a
    3c6a:	13 86       	std	Z+11, r1	; 0x0b
    3c6c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    3c70:	2d b7       	in	r18, 0x3d	; 61
    3c72:	3e b7       	in	r19, 0x3e	; 62
    3c74:	24 5f       	subi	r18, 0xF4	; 244
    3c76:	3f 4f       	sbci	r19, 0xFF	; 255
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	3e bf       	out	0x3e, r19	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	2d bf       	out	0x3d, r18	; 61
    3c82:	82 e0       	ldi	r24, 0x02	; 2
    3c84:	61 e0       	ldi	r22, 0x01	; 1
    3c86:	a8 01       	movw	r20, r16
    3c88:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    3c8c:	83 e0       	ldi	r24, 0x03	; 3
    3c8e:	61 e0       	ldi	r22, 0x01	; 1
    3c90:	4f e3       	ldi	r20, 0x3F	; 63
    3c92:	54 e1       	ldi	r21, 0x14	; 20
    3c94:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    3c98:	84 e0       	ldi	r24, 0x04	; 4
    3c9a:	61 e0       	ldi	r22, 0x01	; 1
    3c9c:	4a e2       	ldi	r20, 0x2A	; 42
    3c9e:	54 e1       	ldi	r21, 0x14	; 20
    3ca0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
               iLoop=0;
    3ca4:	10 92 04 03 	sts	0x0304, r1
    3ca8:	10 92 03 03 	sts	0x0303, r1
			   y=3,x=8;
    3cac:	83 e0       	ldi	r24, 0x03	; 3
    3cae:	80 93 0a 03 	sts	0x030A, r24
    3cb2:	88 e0       	ldi	r24, 0x08	; 8
    3cb4:	80 93 0b 03 	sts	0x030B, r24
			   iInput=0; iBlok=0;
    3cb8:	10 92 09 03 	sts	0x0309, r1
    3cbc:	10 92 02 03 	sts	0x0302, r1
    3cc0:	10 92 01 03 	sts	0x0301, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3cc4:	80 e3       	ldi	r24, 0x30	; 48
    3cc6:	80 93 0e 03 	sts	0x030E, r24
    3cca:	80 93 0f 03 	sts	0x030F, r24
    3cce:	80 93 10 03 	sts	0x0310, r24
			   stClientIP=cipInputIP; 
    3cd2:	82 e0       	ldi	r24, 0x02	; 2
    3cd4:	cc c1       	rjmp	.+920    	; 0x406e <FMenuSettingServerIP+0x4b6>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    3cd6:	80 91 03 03 	lds	r24, 0x0303
    3cda:	90 91 04 03 	lds	r25, 0x0304
    3cde:	01 96       	adiw	r24, 0x01	; 1
    3ce0:	90 93 04 03 	sts	0x0304, r25
    3ce4:	80 93 03 03 	sts	0x0303, r24
			   if ((iLoop%2000)==0){
    3ce8:	60 ed       	ldi	r22, 0xD0	; 208
    3cea:	77 e0       	ldi	r23, 0x07	; 7
    3cec:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    3cf0:	00 97       	sbiw	r24, 0x00	; 0
    3cf2:	61 f4       	brne	.+24     	; 0x3d0c <FMenuSettingServerIP+0x154>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    3cf4:	60 91 01 03 	lds	r22, 0x0301
    3cf8:	66 0f       	add	r22, r22
    3cfa:	66 0f       	add	r22, r22
    3cfc:	80 91 0b 03 	lds	r24, 0x030B
    3d00:	68 0f       	add	r22, r24
    3d02:	80 91 0a 03 	lds	r24, 0x030A
    3d06:	4f e5       	ldi	r20, 0x5F	; 95
    3d08:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    3d0c:	80 91 03 03 	lds	r24, 0x0303
    3d10:	90 91 04 03 	lds	r25, 0x0304
    3d14:	60 ed       	ldi	r22, 0xD0	; 208
    3d16:	77 e0       	ldi	r23, 0x07	; 7
    3d18:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    3d1c:	33 e0       	ldi	r19, 0x03	; 3
    3d1e:	88 3e       	cpi	r24, 0xE8	; 232
    3d20:	93 07       	cpc	r25, r19
    3d22:	61 f4       	brne	.+24     	; 0x3d3c <FMenuSettingServerIP+0x184>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    3d24:	60 91 01 03 	lds	r22, 0x0301
    3d28:	66 0f       	add	r22, r22
    3d2a:	66 0f       	add	r22, r22
    3d2c:	80 91 0b 03 	lds	r24, 0x030B
    3d30:	68 0f       	add	r22, r24
    3d32:	80 91 0a 03 	lds	r24, 0x030A
    3d36:	40 e2       	ldi	r20, 0x20	; 32
    3d38:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    3d42:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    3d44:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
               if ((keyChar>='0')&&(keyChar<='9')){
    3d48:	98 2f       	mov	r25, r24
    3d4a:	90 53       	subi	r25, 0x30	; 48
    3d4c:	9a 30       	cpi	r25, 0x0A	; 10
    3d4e:	08 f0       	brcs	.+2      	; 0x3d52 <FMenuSettingServerIP+0x19a>
    3d50:	d0 c0       	rjmp	.+416    	; 0x3ef2 <FMenuSettingServerIP+0x33a>
    3d52:	2f ef       	ldi	r18, 0xFF	; 255
    3d54:	3f ef       	ldi	r19, 0xFF	; 255
    3d56:	48 e0       	ldi	r20, 0x08	; 8
    3d58:	21 50       	subi	r18, 0x01	; 1
    3d5a:	30 40       	sbci	r19, 0x00	; 0
    3d5c:	40 40       	sbci	r20, 0x00	; 0
    3d5e:	e1 f7       	brne	.-8      	; 0x3d58 <FMenuSettingServerIP+0x1a0>
    3d60:	00 c0       	rjmp	.+0      	; 0x3d62 <FMenuSettingServerIP+0x1aa>
    3d62:	00 00       	nop
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    3d64:	90 91 09 03 	lds	r25, 0x0309
    3d68:	e9 2f       	mov	r30, r25
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	e2 5f       	subi	r30, 0xF2	; 242
    3d6e:	fc 4f       	sbci	r31, 0xFC	; 252
    3d70:	80 83       	st	Z, r24
				   iInput++;                    
    3d72:	9f 5f       	subi	r25, 0xFF	; 255
    3d74:	90 93 09 03 	sts	0x0309, r25
				   for (i=1;i<(iInput+1);i++){
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	18 c0       	rjmp	.+48     	; 0x3dac <FMenuSettingServerIP+0x1f4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    3d7c:	60 91 0b 03 	lds	r22, 0x030B
    3d80:	65 0f       	add	r22, r21
    3d82:	63 50       	subi	r22, 0x03	; 3
    3d84:	80 91 01 03 	lds	r24, 0x0301
    3d88:	88 0f       	add	r24, r24
    3d8a:	88 0f       	add	r24, r24
    3d8c:	68 0f       	add	r22, r24
    3d8e:	80 91 0a 03 	lds	r24, 0x030A
    3d92:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
    3d96:	e0 91 0d 03 	lds	r30, 0x030D
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	e3 5f       	subi	r30, 0xF3	; 243
    3d9e:	fc 4f       	sbci	r31, 0xFC	; 252
    3da0:	80 81       	ld	r24, Z
    3da2:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    3da6:	80 91 0d 03 	lds	r24, 0x030D
    3daa:	8f 5f       	subi	r24, 0xFF	; 255
    3dac:	80 93 0d 03 	sts	0x030D, r24
    3db0:	40 91 09 03 	lds	r20, 0x0309
    3db4:	50 91 0d 03 	lds	r21, 0x030D
    3db8:	24 2f       	mov	r18, r20
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	85 2f       	mov	r24, r21
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	28 17       	cp	r18, r24
    3dc2:	39 07       	cpc	r19, r25
    3dc4:	dc f6       	brge	.-74     	; 0x3d7c <FMenuSettingServerIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    3dc6:	43 30       	cpi	r20, 0x03	; 3
    3dc8:	08 f4       	brcc	.+2      	; 0x3dcc <FMenuSettingServerIP+0x214>
    3dca:	89 c0       	rjmp	.+274    	; 0x3ede <FMenuSettingServerIP+0x326>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    3dcc:	60 91 01 03 	lds	r22, 0x0301
    3dd0:	70 91 02 03 	lds	r23, 0x0302
    3dd4:	fb 01       	movw	r30, r22
    3dd6:	eb 5f       	subi	r30, 0xFB	; 251
    3dd8:	fc 4f       	sbci	r31, 0xFC	; 252
    3dda:	80 91 10 03 	lds	r24, 0x0310
    3dde:	80 5d       	subi	r24, 0xD0	; 208
    3de0:	20 91 0e 03 	lds	r18, 0x030E
    3de4:	94 e6       	ldi	r25, 0x64	; 100
    3de6:	29 9f       	mul	r18, r25
    3de8:	90 2d       	mov	r25, r0
    3dea:	11 24       	eor	r1, r1
    3dec:	89 0f       	add	r24, r25
    3dee:	90 91 0f 03 	lds	r25, 0x030F
    3df2:	99 0f       	add	r25, r25
    3df4:	29 2f       	mov	r18, r25
    3df6:	22 0f       	add	r18, r18
    3df8:	22 0f       	add	r18, r18
    3dfa:	29 0f       	add	r18, r25
    3dfc:	82 0f       	add	r24, r18
    3dfe:	80 83       	st	Z, r24
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3e00:	80 e3       	ldi	r24, 0x30	; 48
    3e02:	80 93 0e 03 	sts	0x030E, r24
    3e06:	80 93 0f 03 	sts	0x030F, r24
    3e0a:	80 93 10 03 	sts	0x0310, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    3e0e:	66 0f       	add	r22, r22
    3e10:	66 0f       	add	r22, r22
    3e12:	80 91 0b 03 	lds	r24, 0x030B
    3e16:	68 0f       	add	r22, r24
    3e18:	64 1b       	sub	r22, r20
    3e1a:	80 91 0a 03 	lds	r24, 0x030A
    3e1e:	46 e2       	ldi	r20, 0x26	; 38
    3e20:	54 e1       	ldi	r21, 0x14	; 20
    3e22:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    3e26:	00 d0       	rcall	.+0      	; 0x3e28 <FMenuSettingServerIP+0x270>
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <FMenuSettingServerIP+0x272>
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <FMenuSettingServerIP+0x274>
    3e2c:	ed b7       	in	r30, 0x3d	; 61
    3e2e:	fe b7       	in	r31, 0x3e	; 62
    3e30:	31 96       	adiw	r30, 0x01	; 1
    3e32:	8e 01       	movw	r16, r28
    3e34:	0f 5f       	subi	r16, 0xFF	; 255
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	ad b7       	in	r26, 0x3d	; 61
    3e3a:	be b7       	in	r27, 0x3e	; 62
    3e3c:	12 96       	adiw	r26, 0x02	; 2
    3e3e:	1c 93       	st	X, r17
    3e40:	0e 93       	st	-X, r16
    3e42:	11 97       	sbiw	r26, 0x01	; 1
    3e44:	83 e2       	ldi	r24, 0x23	; 35
    3e46:	94 e1       	ldi	r25, 0x14	; 20
    3e48:	93 83       	std	Z+3, r25	; 0x03
    3e4a:	82 83       	std	Z+2, r24	; 0x02
    3e4c:	a0 91 01 03 	lds	r26, 0x0301
    3e50:	b0 91 02 03 	lds	r27, 0x0302
    3e54:	ab 5f       	subi	r26, 0xFB	; 251
    3e56:	bc 4f       	sbci	r27, 0xFC	; 252
    3e58:	8c 91       	ld	r24, X
    3e5a:	84 83       	std	Z+4, r24	; 0x04
    3e5c:	15 82       	std	Z+5, r1	; 0x05
    3e5e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    3e62:	f8 01       	movw	r30, r16
    3e64:	01 90       	ld	r0, Z+
    3e66:	00 20       	and	r0, r0
    3e68:	e9 f7       	brne	.-6      	; 0x3e64 <FMenuSettingServerIP+0x2ac>
    3e6a:	31 97       	sbiw	r30, 0x01	; 1
    3e6c:	e0 1b       	sub	r30, r16
    3e6e:	f1 0b       	sbc	r31, r17
    3e70:	2d b7       	in	r18, 0x3d	; 61
    3e72:	3e b7       	in	r19, 0x3e	; 62
    3e74:	2a 5f       	subi	r18, 0xFA	; 250
    3e76:	3f 4f       	sbci	r19, 0xFF	; 255
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	3e bf       	out	0x3e, r19	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	2d bf       	out	0x3d, r18	; 61
    3e82:	60 91 0b 03 	lds	r22, 0x030B
    3e86:	6f 5f       	subi	r22, 0xFF	; 255
    3e88:	80 91 01 03 	lds	r24, 0x0301
    3e8c:	88 0f       	add	r24, r24
    3e8e:	88 0f       	add	r24, r24
    3e90:	68 0f       	add	r22, r24
    3e92:	6e 1b       	sub	r22, r30
    3e94:	80 91 0a 03 	lds	r24, 0x030A
    3e98:	a8 01       	movw	r20, r16
    3e9a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    3e9e:	80 91 01 03 	lds	r24, 0x0301
    3ea2:	90 91 02 03 	lds	r25, 0x0302
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	71 f0       	breq	.+28     	; 0x3ec6 <FMenuSettingServerIP+0x30e>
    3eaa:	60 91 0b 03 	lds	r22, 0x030B
    3eae:	6f 5f       	subi	r22, 0xFF	; 255
    3eb0:	81 50       	subi	r24, 0x01	; 1
    3eb2:	90 4c       	sbci	r25, 0xC0	; 192
    3eb4:	88 0f       	add	r24, r24
    3eb6:	88 0f       	add	r24, r24
    3eb8:	68 0f       	add	r22, r24
    3eba:	80 91 0a 03 	lds	r24, 0x030A
    3ebe:	41 e2       	ldi	r20, 0x21	; 33
    3ec0:	54 e1       	ldi	r21, 0x14	; 20
    3ec2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   iInput=0;
    3ec6:	10 92 09 03 	sts	0x0309, r1
					   iBlok++;
    3eca:	20 91 01 03 	lds	r18, 0x0301
    3ece:	30 91 02 03 	lds	r19, 0x0302
    3ed2:	2f 5f       	subi	r18, 0xFF	; 255
    3ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed6:	30 93 02 03 	sts	0x0302, r19
    3eda:	20 93 01 03 	sts	0x0301, r18

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    3ede:	80 91 01 03 	lds	r24, 0x0301
    3ee2:	90 91 02 03 	lds	r25, 0x0302
    3ee6:	84 30       	cpi	r24, 0x04	; 4
    3ee8:	91 05       	cpc	r25, r1
    3eea:	18 f0       	brcs	.+6      	; 0x3ef2 <FMenuSettingServerIP+0x33a>
    3eec:	84 e0       	ldi	r24, 0x04	; 4
    3eee:	80 93 58 01 	sts	0x0158, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    3ef2:	3f 2d       	mov	r19, r15
    3ef4:	37 3e       	cpi	r19, 0xE7	; 231
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <FMenuSettingServerIP+0x342>
    3ef8:	b9 c0       	rjmp	.+370    	; 0x406c <FMenuSettingServerIP+0x4b4>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    3efa:	4f 2d       	mov	r20, r15
    3efc:	47 3b       	cpi	r20, 0xB7	; 183
    3efe:	09 f0       	breq	.+2      	; 0x3f02 <FMenuSettingServerIP+0x34a>
    3f00:	be c0       	rjmp	.+380    	; 0x407e <FMenuSettingServerIP+0x4c6>
			       //NextInput
			       if (iBlok<4){
    3f02:	80 91 01 03 	lds	r24, 0x0301
    3f06:	90 91 02 03 	lds	r25, 0x0302
    3f0a:	84 30       	cpi	r24, 0x04	; 4
    3f0c:	91 05       	cpc	r25, r1
    3f0e:	08 f0       	brcs	.+2      	; 0x3f12 <FMenuSettingServerIP+0x35a>
    3f10:	9c c0       	rjmp	.+312    	; 0x404a <FMenuSettingServerIP+0x492>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    3f12:	20 91 09 03 	lds	r18, 0x0309
    3f16:	21 30       	cpi	r18, 0x01	; 1
    3f18:	39 f4       	brne	.+14     	; 0x3f28 <FMenuSettingServerIP+0x370>
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	eb 5f       	subi	r30, 0xFB	; 251
    3f1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f20:	20 91 0e 03 	lds	r18, 0x030E
    3f24:	20 53       	subi	r18, 0x30	; 48
    3f26:	22 c0       	rjmp	.+68     	; 0x3f6c <FMenuSettingServerIP+0x3b4>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    3f28:	22 30       	cpi	r18, 0x02	; 2
    3f2a:	49 f4       	brne	.+18     	; 0x3f3e <FMenuSettingServerIP+0x386>
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	eb 5f       	subi	r30, 0xFB	; 251
    3f30:	fc 4f       	sbci	r31, 0xFC	; 252
    3f32:	20 91 0f 03 	lds	r18, 0x030F
    3f36:	20 51       	subi	r18, 0x10	; 16
    3f38:	30 91 0e 03 	lds	r19, 0x030E
    3f3c:	11 c0       	rjmp	.+34     	; 0x3f60 <FMenuSettingServerIP+0x3a8>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    3f3e:	23 30       	cpi	r18, 0x03	; 3
    3f40:	b1 f4       	brne	.+44     	; 0x3f6e <FMenuSettingServerIP+0x3b6>
    3f42:	fc 01       	movw	r30, r24
    3f44:	eb 5f       	subi	r30, 0xFB	; 251
    3f46:	fc 4f       	sbci	r31, 0xFC	; 252
    3f48:	20 91 10 03 	lds	r18, 0x0310
    3f4c:	20 5d       	subi	r18, 0xD0	; 208
    3f4e:	40 91 0e 03 	lds	r20, 0x030E
    3f52:	34 e6       	ldi	r19, 0x64	; 100
    3f54:	43 9f       	mul	r20, r19
    3f56:	30 2d       	mov	r19, r0
    3f58:	11 24       	eor	r1, r1
    3f5a:	23 0f       	add	r18, r19
    3f5c:	30 91 0f 03 	lds	r19, 0x030F
    3f60:	33 0f       	add	r19, r19
    3f62:	43 2f       	mov	r20, r19
    3f64:	44 0f       	add	r20, r20
    3f66:	44 0f       	add	r20, r20
    3f68:	43 0f       	add	r20, r19
    3f6a:	24 0f       	add	r18, r20
    3f6c:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3f6e:	20 e3       	ldi	r18, 0x30	; 48
    3f70:	20 93 0e 03 	sts	0x030E, r18
    3f74:	20 93 0f 03 	sts	0x030F, r18
    3f78:	20 93 10 03 	sts	0x0310, r18
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    3f7c:	60 91 0b 03 	lds	r22, 0x030B
    3f80:	63 50       	subi	r22, 0x03	; 3
    3f82:	88 0f       	add	r24, r24
    3f84:	88 0f       	add	r24, r24
    3f86:	68 0f       	add	r22, r24
    3f88:	80 91 0a 03 	lds	r24, 0x030A
    3f8c:	4d e1       	ldi	r20, 0x1D	; 29
    3f8e:	54 e1       	ldi	r21, 0x14	; 20
    3f90:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    3f94:	00 d0       	rcall	.+0      	; 0x3f96 <FMenuSettingServerIP+0x3de>
    3f96:	00 d0       	rcall	.+0      	; 0x3f98 <FMenuSettingServerIP+0x3e0>
    3f98:	00 d0       	rcall	.+0      	; 0x3f9a <FMenuSettingServerIP+0x3e2>
    3f9a:	ed b7       	in	r30, 0x3d	; 61
    3f9c:	fe b7       	in	r31, 0x3e	; 62
    3f9e:	31 96       	adiw	r30, 0x01	; 1
    3fa0:	8e 01       	movw	r16, r28
    3fa2:	0f 5f       	subi	r16, 0xFF	; 255
    3fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa6:	ad b7       	in	r26, 0x3d	; 61
    3fa8:	be b7       	in	r27, 0x3e	; 62
    3faa:	12 96       	adiw	r26, 0x02	; 2
    3fac:	1c 93       	st	X, r17
    3fae:	0e 93       	st	-X, r16
    3fb0:	11 97       	sbiw	r26, 0x01	; 1
    3fb2:	8a e1       	ldi	r24, 0x1A	; 26
    3fb4:	94 e1       	ldi	r25, 0x14	; 20
    3fb6:	93 83       	std	Z+3, r25	; 0x03
    3fb8:	82 83       	std	Z+2, r24	; 0x02
    3fba:	a0 91 01 03 	lds	r26, 0x0301
    3fbe:	b0 91 02 03 	lds	r27, 0x0302
    3fc2:	ab 5f       	subi	r26, 0xFB	; 251
    3fc4:	bc 4f       	sbci	r27, 0xFC	; 252
    3fc6:	8c 91       	ld	r24, X
    3fc8:	84 83       	std	Z+4, r24	; 0x04
    3fca:	15 82       	std	Z+5, r1	; 0x05
    3fcc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    3fd0:	f8 01       	movw	r30, r16
    3fd2:	01 90       	ld	r0, Z+
    3fd4:	00 20       	and	r0, r0
    3fd6:	e9 f7       	brne	.-6      	; 0x3fd2 <FMenuSettingServerIP+0x41a>
    3fd8:	31 97       	sbiw	r30, 0x01	; 1
    3fda:	e0 1b       	sub	r30, r16
    3fdc:	f1 0b       	sbc	r31, r17
    3fde:	2d b7       	in	r18, 0x3d	; 61
    3fe0:	3e b7       	in	r19, 0x3e	; 62
    3fe2:	2a 5f       	subi	r18, 0xFA	; 250
    3fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	3e bf       	out	0x3e, r19	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	2d bf       	out	0x3d, r18	; 61
    3ff0:	60 91 0b 03 	lds	r22, 0x030B
    3ff4:	6f 5f       	subi	r22, 0xFF	; 255
    3ff6:	80 91 01 03 	lds	r24, 0x0301
    3ffa:	88 0f       	add	r24, r24
    3ffc:	88 0f       	add	r24, r24
    3ffe:	68 0f       	add	r22, r24
    4000:	6e 1b       	sub	r22, r30
    4002:	80 91 0a 03 	lds	r24, 0x030A
    4006:	a8 01       	movw	r20, r16
    4008:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    400c:	80 91 01 03 	lds	r24, 0x0301
    4010:	90 91 02 03 	lds	r25, 0x0302
    4014:	00 97       	sbiw	r24, 0x00	; 0
    4016:	71 f0       	breq	.+28     	; 0x4034 <FMenuSettingServerIP+0x47c>
    4018:	60 91 0b 03 	lds	r22, 0x030B
    401c:	6f 5f       	subi	r22, 0xFF	; 255
    401e:	81 50       	subi	r24, 0x01	; 1
    4020:	90 4c       	sbci	r25, 0xC0	; 192
    4022:	88 0f       	add	r24, r24
    4024:	88 0f       	add	r24, r24
    4026:	68 0f       	add	r22, r24
    4028:	80 91 0a 03 	lds	r24, 0x030A
    402c:	48 e1       	ldi	r20, 0x18	; 24
    402e:	54 e1       	ldi	r21, 0x14	; 20
    4030:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				       iInput=0;
    4034:	10 92 09 03 	sts	0x0309, r1
					   iBlok++;	   
    4038:	80 91 01 03 	lds	r24, 0x0301
    403c:	90 91 02 03 	lds	r25, 0x0302
    4040:	01 96       	adiw	r24, 0x01	; 1
    4042:	90 93 02 03 	sts	0x0302, r25
    4046:	80 93 01 03 	sts	0x0301, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    404a:	80 91 01 03 	lds	r24, 0x0301
    404e:	90 91 02 03 	lds	r25, 0x0302
    4052:	84 30       	cpi	r24, 0x04	; 4
    4054:	91 05       	cpc	r25, r1
    4056:	98 f0       	brcs	.+38     	; 0x407e <FMenuSettingServerIP+0x4c6>
    4058:	84 e0       	ldi	r24, 0x04	; 4
    405a:	09 c0       	rjmp	.+18     	; 0x406e <FMenuSettingServerIP+0x4b6>
			   }
		       break;
          case cipStoreIPblok:
		       //UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefServerIP,4);
    405c:	85 e0       	ldi	r24, 0x05	; 5
    405e:	93 e0       	ldi	r25, 0x03	; 3
    4060:	6c e2       	ldi	r22, 0x2C	; 44
    4062:	70 e0       	ldi	r23, 0x00	; 0
    4064:	44 e0       	ldi	r20, 0x04	; 4
    4066:	50 e0       	ldi	r21, 0x00	; 0
    4068:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
			   stClientIP=cipExit;
    406c:	83 e0       	ldi	r24, 0x03	; 3
    406e:	80 93 58 01 	sts	0x0158, r24
		       break; 
    4072:	05 c0       	rjmp	.+10     	; 0x407e <FMenuSettingServerIP+0x4c6>
          case cipExit://Cancel IPConfig
			   stClientIP=cipInit;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	80 93 58 01 	sts	0x0158, r24
			   Result=MENU_DONE;
    407a:	80 93 0c 03 	sts	0x030C, r24
		       break;     
		  }//EndSwitch	 
	return Result;
}
    407e:	80 91 0c 03 	lds	r24, 0x030C
    4082:	64 96       	adiw	r28, 0x14	; 20
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	f8 94       	cli
    4088:	de bf       	out	0x3e, r29	; 62
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	cd bf       	out	0x3d, r28	; 61
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	ff 90       	pop	r15
    4098:	08 95       	ret

0000409a <menu_product>:
   return Result;
}

void menu_product(){

}
    409a:	08 95       	ret

0000409c <SelectMark>:
	      break;
	 }
    return Result;
}

char SelectMark(char InMark){
    409c:	cf 92       	push	r12
    409e:	df 92       	push	r13
    40a0:	ff 92       	push	r15
    40a2:	0f 93       	push	r16
    40a4:	1f 93       	push	r17
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	00 d0       	rcall	.+0      	; 0x40ac <SelectMark+0x10>
    40ac:	00 d0       	rcall	.+0      	; 0x40ae <SelectMark+0x12>
    40ae:	0f 92       	push	r0
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	f8 2e       	mov	r15, r24
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    40b6:	8e 01       	movw	r16, r28
    40b8:	0f 5f       	subi	r16, 0xFF	; 255
    40ba:	1f 4f       	sbci	r17, 0xFF	; 255
    40bc:	c8 01       	movw	r24, r16
    40be:	60 e4       	ldi	r22, 0x40	; 64
    40c0:	70 e0       	ldi	r23, 0x00	; 0
    40c2:	45 e0       	ldi	r20, 0x05	; 5
    40c4:	50 e0       	ldi	r21, 0x00	; 0
    40c6:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
    40ca:	f8 01       	movw	r30, r16
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
    40cc:	8f 2d       	mov	r24, r15
    return Result;
}

char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	30 e0       	ldi	r19, 0x00	; 0
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
    40d2:	05 e0       	ldi	r16, 0x05	; 5
    40d4:	10 e0       	ldi	r17, 0x00	; 0
    40d6:	6f 01       	movw	r12, r30
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
    40d8:	91 91       	ld	r25, Z+
    40da:	2f 5f       	subi	r18, 0xFF	; 255
    40dc:	3f 4f       	sbci	r19, 0xFF	; 255
    40de:	f9 16       	cp	r15, r25
    40e0:	41 f4       	brne	.+16     	; 0x40f2 <SelectMark+0x56>
		     Result=PMark[(i+1)%Length];
    40e2:	c9 01       	movw	r24, r18
    40e4:	b8 01       	movw	r22, r16
    40e6:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    40ea:	8c 0d       	add	r24, r12
    40ec:	9d 1d       	adc	r25, r13
    40ee:	dc 01       	movw	r26, r24
    40f0:	8c 91       	ld	r24, X
char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
    40f2:	25 30       	cpi	r18, 0x05	; 5
    40f4:	31 05       	cpc	r19, r1
    40f6:	81 f7       	brne	.-32     	; 0x40d8 <SelectMark+0x3c>
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
	 }
     return Result;
}
    40f8:	0f 90       	pop	r0
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	cf 91       	pop	r28
    4104:	df 91       	pop	r29
    4106:	1f 91       	pop	r17
    4108:	0f 91       	pop	r16
    410a:	ff 90       	pop	r15
    410c:	df 90       	pop	r13
    410e:	cf 90       	pop	r12
    4110:	08 95       	ret

00004112 <FSettingDec>:

	Result=MENU_DONE;
	return Result;
}

char FSettingDec(){
    4112:	cf 92       	push	r12
    4114:	df 92       	push	r13
    4116:	ef 92       	push	r14
    4118:	ff 92       	push	r15
    411a:	0f 93       	push	r16
    411c:	1f 93       	push	r17
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	64 97       	sbiw	r28, 0x14	; 20
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	f8 94       	cli
    412c:	de bf       	out	0x3e, r29	; 62
    412e:	0f be       	out	0x3f, r0	; 63
    4130:	cd bf       	out	0x3d, r28	; 61
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
	 switch(stSettingDecimal){
    4132:	80 91 fd 02 	lds	r24, 0x02FD
    4136:	82 30       	cpi	r24, 0x02	; 2
    4138:	09 f4       	brne	.+2      	; 0x413c <FSettingDec+0x2a>
    413a:	b2 c0       	rjmp	.+356    	; 0x42a0 <FSettingDec+0x18e>
    413c:	83 30       	cpi	r24, 0x03	; 3
    413e:	30 f4       	brcc	.+12     	; 0x414c <FSettingDec+0x3a>
    4140:	88 23       	and	r24, r24
    4142:	71 f0       	breq	.+28     	; 0x4160 <FSettingDec+0x4e>
    4144:	81 30       	cpi	r24, 0x01	; 1
    4146:	09 f0       	breq	.+2      	; 0x414a <FSettingDec+0x38>
    4148:	82 c1       	rjmp	.+772    	; 0x444e <FSettingDec+0x33c>
    414a:	89 c0       	rjmp	.+274    	; 0x425e <FSettingDec+0x14c>
    414c:	84 30       	cpi	r24, 0x04	; 4
    414e:	09 f4       	brne	.+2      	; 0x4152 <FSettingDec+0x40>
    4150:	76 c1       	rjmp	.+748    	; 0x443e <FSettingDec+0x32c>
    4152:	84 30       	cpi	r24, 0x04	; 4
    4154:	08 f4       	brcc	.+2      	; 0x4158 <FSettingDec+0x46>
    4156:	47 c1       	rjmp	.+654    	; 0x43e6 <FSettingDec+0x2d4>
    4158:	85 30       	cpi	r24, 0x05	; 5
    415a:	09 f0       	breq	.+2      	; 0x415e <FSettingDec+0x4c>
    415c:	78 c1       	rjmp	.+752    	; 0x444e <FSettingDec+0x33c>
    415e:	73 c1       	rjmp	.+742    	; 0x4446 <FSettingDec+0x334>
	 case sdInitDisplay:
	      lcd_clear();         //"12345678901234567890
    4160:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalPrice);
    4164:	89 e3       	ldi	r24, 0x39	; 57
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    416c:	d8 2e       	mov	r13, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalVolume);
    416e:	8a e3       	ldi	r24, 0x3A	; 58
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    4176:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMoney);
    4178:	8b e3       	ldi	r24, 0x3B	; 59
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    4180:	f8 2e       	mov	r15, r24

		  sprintf_P(lcdteks,PSTR("1.Price :%d"),PDecimalConfig[0]);
    4182:	00 d0       	rcall	.+0      	; 0x4184 <FSettingDec+0x72>
    4184:	00 d0       	rcall	.+0      	; 0x4186 <FSettingDec+0x74>
    4186:	00 d0       	rcall	.+0      	; 0x4188 <FSettingDec+0x76>
    4188:	ed b7       	in	r30, 0x3d	; 61
    418a:	fe b7       	in	r31, 0x3e	; 62
    418c:	31 96       	adiw	r30, 0x01	; 1
    418e:	8e 01       	movw	r16, r28
    4190:	0f 5f       	subi	r16, 0xFF	; 255
    4192:	1f 4f       	sbci	r17, 0xFF	; 255
    4194:	ad b7       	in	r26, 0x3d	; 61
    4196:	be b7       	in	r27, 0x3e	; 62
    4198:	12 96       	adiw	r26, 0x02	; 2
    419a:	1c 93       	st	X, r17
    419c:	0e 93       	st	-X, r16
    419e:	11 97       	sbiw	r26, 0x01	; 1
    41a0:	28 eb       	ldi	r18, 0xB8	; 184
    41a2:	32 e1       	ldi	r19, 0x12	; 18
    41a4:	33 83       	std	Z+3, r19	; 0x03
    41a6:	22 83       	std	Z+2, r18	; 0x02
    41a8:	d4 82       	std	Z+4, r13	; 0x04
    41aa:	15 82       	std	Z+5, r1	; 0x05
    41ac:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    41b0:	8d b7       	in	r24, 0x3d	; 61
    41b2:	9e b7       	in	r25, 0x3e	; 62
    41b4:	06 96       	adiw	r24, 0x06	; 6
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	9e bf       	out	0x3e, r25	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	8d bf       	out	0x3d, r24	; 61
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	61 e0       	ldi	r22, 0x01	; 1
    41c4:	a8 01       	movw	r20, r16
    41c6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.Volume:%d"),PDecimalConfig[1]);
    41ca:	00 d0       	rcall	.+0      	; 0x41cc <FSettingDec+0xba>
    41cc:	00 d0       	rcall	.+0      	; 0x41ce <FSettingDec+0xbc>
    41ce:	00 d0       	rcall	.+0      	; 0x41d0 <FSettingDec+0xbe>
    41d0:	ed b7       	in	r30, 0x3d	; 61
    41d2:	fe b7       	in	r31, 0x3e	; 62
    41d4:	31 96       	adiw	r30, 0x01	; 1
    41d6:	ad b7       	in	r26, 0x3d	; 61
    41d8:	be b7       	in	r27, 0x3e	; 62
    41da:	12 96       	adiw	r26, 0x02	; 2
    41dc:	1c 93       	st	X, r17
    41de:	0e 93       	st	-X, r16
    41e0:	11 97       	sbiw	r26, 0x01	; 1
    41e2:	2c ea       	ldi	r18, 0xAC	; 172
    41e4:	32 e1       	ldi	r19, 0x12	; 18
    41e6:	33 83       	std	Z+3, r19	; 0x03
    41e8:	22 83       	std	Z+2, r18	; 0x02
    41ea:	e4 82       	std	Z+4, r14	; 0x04
    41ec:	15 82       	std	Z+5, r1	; 0x05
    41ee:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    41f2:	8d b7       	in	r24, 0x3d	; 61
    41f4:	9e b7       	in	r25, 0x3e	; 62
    41f6:	06 96       	adiw	r24, 0x06	; 6
    41f8:	0f b6       	in	r0, 0x3f	; 63
    41fa:	f8 94       	cli
    41fc:	9e bf       	out	0x3e, r25	; 62
    41fe:	0f be       	out	0x3f, r0	; 63
    4200:	8d bf       	out	0x3d, r24	; 61
    4202:	82 e0       	ldi	r24, 0x02	; 2
    4204:	61 e0       	ldi	r22, 0x01	; 1
    4206:	a8 01       	movw	r20, r16
    4208:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Money :%d"),PDecimalConfig[2]);
    420c:	00 d0       	rcall	.+0      	; 0x420e <FSettingDec+0xfc>
    420e:	00 d0       	rcall	.+0      	; 0x4210 <FSettingDec+0xfe>
    4210:	00 d0       	rcall	.+0      	; 0x4212 <FSettingDec+0x100>
    4212:	ed b7       	in	r30, 0x3d	; 61
    4214:	fe b7       	in	r31, 0x3e	; 62
    4216:	31 96       	adiw	r30, 0x01	; 1
    4218:	ad b7       	in	r26, 0x3d	; 61
    421a:	be b7       	in	r27, 0x3e	; 62
    421c:	12 96       	adiw	r26, 0x02	; 2
    421e:	1c 93       	st	X, r17
    4220:	0e 93       	st	-X, r16
    4222:	11 97       	sbiw	r26, 0x01	; 1
    4224:	80 ea       	ldi	r24, 0xA0	; 160
    4226:	92 e1       	ldi	r25, 0x12	; 18
    4228:	93 83       	std	Z+3, r25	; 0x03
    422a:	82 83       	std	Z+2, r24	; 0x02
    422c:	f4 82       	std	Z+4, r15	; 0x04
    422e:	15 82       	std	Z+5, r1	; 0x05
    4230:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    4234:	8d b7       	in	r24, 0x3d	; 61
    4236:	9e b7       	in	r25, 0x3e	; 62
    4238:	06 96       	adiw	r24, 0x06	; 6
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	9e bf       	out	0x3e, r25	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	8d bf       	out	0x3d, r24	; 61
    4244:	83 e0       	ldi	r24, 0x03	; 3
    4246:	61 e0       	ldi	r22, 0x01	; 1
    4248:	a8 01       	movw	r20, r16
    424a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(4,1,PSTR("[*]Back  [#]Next"));
    424e:	84 e0       	ldi	r24, 0x04	; 4
    4250:	61 e0       	ldi	r22, 0x01	; 1
    4252:	4f e8       	ldi	r20, 0x8F	; 143
    4254:	52 e1       	ldi	r21, 0x12	; 18
    4256:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stSettingDecimal=sdSelectKey1;
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	f1 c0       	rjmp	.+482    	; 0x4440 <FSettingDec+0x32e>
		  break;
     case sdSelectKey1:
          KeyChar=_key_btn(_key_scan(1));
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    4264:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='3')){
    4268:	08 2f       	mov	r16, r24
    426a:	01 53       	subi	r16, 0x31	; 49
    426c:	03 30       	cpi	r16, 0x03	; 3
    426e:	80 f4       	brcc	.+32     	; 0x4290 <FSettingDec+0x17e>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalPrice+Addr);
    4270:	10 e0       	ldi	r17, 0x00	; 0
    4272:	07 5c       	subi	r16, 0xC7	; 199
    4274:	1f 4f       	sbci	r17, 0xFF	; 255
    4276:	c8 01       	movw	r24, r16
    4278:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;
    427c:	68 2f       	mov	r22, r24
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	6f 5f       	subi	r22, 0xFF	; 255
    4282:	7f 4f       	sbci	r23, 0xFF	; 255
    4284:	63 70       	andi	r22, 0x03	; 3
    4286:	70 70       	andi	r23, 0x00	; 0

			  eeprom_write_byte(&DefDecimalPrice+Addr,PDecimalConfig[Addr]);
    4288:	c8 01       	movw	r24, r16
    428a:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
    428e:	d4 c0       	rjmp	.+424    	; 0x4438 <FSettingDec+0x326>
              stSettingDecimal=sdInitDisplay;
		  }else if (KeyChar=='*') stSettingDecimal=sdExitSettingDecimal;
    4290:	8a 32       	cpi	r24, 0x2A	; 42
    4292:	11 f4       	brne	.+4      	; 0x4298 <FSettingDec+0x186>
    4294:	85 e0       	ldi	r24, 0x05	; 5
    4296:	d4 c0       	rjmp	.+424    	; 0x4440 <FSettingDec+0x32e>
		  else if (KeyChar=='#') stSettingDecimal=sdInitDisplay2;
    4298:	83 32       	cpi	r24, 0x23	; 35
    429a:	09 f0       	breq	.+2      	; 0x429e <FSettingDec+0x18c>
    429c:	d8 c0       	rjmp	.+432    	; 0x444e <FSettingDec+0x33c>
    429e:	cf c0       	rjmp	.+414    	; 0x443e <FSettingDec+0x32c>
          break;
     case sdInitDisplay2:
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalTotalVolume);
    42a0:	8c e3       	ldi	r24, 0x3C	; 60
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    42a8:	c8 2e       	mov	r12, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalTotalMoney);
    42aa:	8d e3       	ldi	r24, 0x3D	; 61
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    42b2:	d8 2e       	mov	r13, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMark);
    42b4:	8e e3       	ldi	r24, 0x3E	; 62
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    42bc:	e8 2e       	mov	r14, r24
		  PDecimalConfig[3]=eeprom_read_byte(&DefCurrencyMark);
    42be:	8f e3       	ldi	r24, 0x3F	; 63
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    42c6:	f8 2e       	mov	r15, r24
		  sprintf_P(lcdteks,PSTR("1.T.Volume:%d "),PDecimalConfig[0]);
    42c8:	00 d0       	rcall	.+0      	; 0x42ca <FSettingDec+0x1b8>
    42ca:	00 d0       	rcall	.+0      	; 0x42cc <FSettingDec+0x1ba>
    42cc:	00 d0       	rcall	.+0      	; 0x42ce <FSettingDec+0x1bc>
    42ce:	ed b7       	in	r30, 0x3d	; 61
    42d0:	fe b7       	in	r31, 0x3e	; 62
    42d2:	31 96       	adiw	r30, 0x01	; 1
    42d4:	8e 01       	movw	r16, r28
    42d6:	0f 5f       	subi	r16, 0xFF	; 255
    42d8:	1f 4f       	sbci	r17, 0xFF	; 255
    42da:	ad b7       	in	r26, 0x3d	; 61
    42dc:	be b7       	in	r27, 0x3e	; 62
    42de:	12 96       	adiw	r26, 0x02	; 2
    42e0:	1c 93       	st	X, r17
    42e2:	0e 93       	st	-X, r16
    42e4:	11 97       	sbiw	r26, 0x01	; 1
    42e6:	20 e8       	ldi	r18, 0x80	; 128
    42e8:	32 e1       	ldi	r19, 0x12	; 18
    42ea:	33 83       	std	Z+3, r19	; 0x03
    42ec:	22 83       	std	Z+2, r18	; 0x02
    42ee:	c4 82       	std	Z+4, r12	; 0x04
    42f0:	15 82       	std	Z+5, r1	; 0x05
    42f2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    42f6:	8d b7       	in	r24, 0x3d	; 61
    42f8:	9e b7       	in	r25, 0x3e	; 62
    42fa:	06 96       	adiw	r24, 0x06	; 6
    42fc:	0f b6       	in	r0, 0x3f	; 63
    42fe:	f8 94       	cli
    4300:	9e bf       	out	0x3e, r25	; 62
    4302:	0f be       	out	0x3f, r0	; 63
    4304:	8d bf       	out	0x3d, r24	; 61
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	61 e0       	ldi	r22, 0x01	; 1
    430a:	a8 01       	movw	r20, r16
    430c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.T.Money :%d "),PDecimalConfig[1]);
    4310:	00 d0       	rcall	.+0      	; 0x4312 <FSettingDec+0x200>
    4312:	00 d0       	rcall	.+0      	; 0x4314 <FSettingDec+0x202>
    4314:	00 d0       	rcall	.+0      	; 0x4316 <FSettingDec+0x204>
    4316:	ed b7       	in	r30, 0x3d	; 61
    4318:	fe b7       	in	r31, 0x3e	; 62
    431a:	31 96       	adiw	r30, 0x01	; 1
    431c:	ad b7       	in	r26, 0x3d	; 61
    431e:	be b7       	in	r27, 0x3e	; 62
    4320:	12 96       	adiw	r26, 0x02	; 2
    4322:	1c 93       	st	X, r17
    4324:	0e 93       	st	-X, r16
    4326:	11 97       	sbiw	r26, 0x01	; 1
    4328:	81 e7       	ldi	r24, 0x71	; 113
    432a:	92 e1       	ldi	r25, 0x12	; 18
    432c:	93 83       	std	Z+3, r25	; 0x03
    432e:	82 83       	std	Z+2, r24	; 0x02
    4330:	d4 82       	std	Z+4, r13	; 0x04
    4332:	15 82       	std	Z+5, r1	; 0x05
    4334:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    4338:	8d b7       	in	r24, 0x3d	; 61
    433a:	9e b7       	in	r25, 0x3e	; 62
    433c:	06 96       	adiw	r24, 0x06	; 6
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	9e bf       	out	0x3e, r25	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	8d bf       	out	0x3d, r24	; 61
    4348:	82 e0       	ldi	r24, 0x02	; 2
    434a:	61 e0       	ldi	r22, 0x01	; 1
    434c:	a8 01       	movw	r20, r16
    434e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Decimal :%c "),PDecimalConfig[2]);
    4352:	00 d0       	rcall	.+0      	; 0x4354 <FSettingDec+0x242>
    4354:	00 d0       	rcall	.+0      	; 0x4356 <FSettingDec+0x244>
    4356:	00 d0       	rcall	.+0      	; 0x4358 <FSettingDec+0x246>
    4358:	ed b7       	in	r30, 0x3d	; 61
    435a:	fe b7       	in	r31, 0x3e	; 62
    435c:	31 96       	adiw	r30, 0x01	; 1
    435e:	ad b7       	in	r26, 0x3d	; 61
    4360:	be b7       	in	r27, 0x3e	; 62
    4362:	12 96       	adiw	r26, 0x02	; 2
    4364:	1c 93       	st	X, r17
    4366:	0e 93       	st	-X, r16
    4368:	11 97       	sbiw	r26, 0x01	; 1
    436a:	82 e6       	ldi	r24, 0x62	; 98
    436c:	92 e1       	ldi	r25, 0x12	; 18
    436e:	93 83       	std	Z+3, r25	; 0x03
    4370:	82 83       	std	Z+2, r24	; 0x02
    4372:	e4 82       	std	Z+4, r14	; 0x04
    4374:	15 82       	std	Z+5, r1	; 0x05
    4376:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    437a:	8d b7       	in	r24, 0x3d	; 61
    437c:	9e b7       	in	r25, 0x3e	; 62
    437e:	06 96       	adiw	r24, 0x06	; 6
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	f8 94       	cli
    4384:	9e bf       	out	0x3e, r25	; 62
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	8d bf       	out	0x3d, r24	; 61
    438a:	83 e0       	ldi	r24, 0x03	; 3
    438c:	61 e0       	ldi	r22, 0x01	; 1
    438e:	a8 01       	movw	r20, r16
    4390:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("4.Sparator:%c "),PDecimalConfig[3]);
    4394:	00 d0       	rcall	.+0      	; 0x4396 <FSettingDec+0x284>
    4396:	00 d0       	rcall	.+0      	; 0x4398 <FSettingDec+0x286>
    4398:	00 d0       	rcall	.+0      	; 0x439a <FSettingDec+0x288>
    439a:	ed b7       	in	r30, 0x3d	; 61
    439c:	fe b7       	in	r31, 0x3e	; 62
    439e:	31 96       	adiw	r30, 0x01	; 1
    43a0:	ad b7       	in	r26, 0x3d	; 61
    43a2:	be b7       	in	r27, 0x3e	; 62
    43a4:	12 96       	adiw	r26, 0x02	; 2
    43a6:	1c 93       	st	X, r17
    43a8:	0e 93       	st	-X, r16
    43aa:	11 97       	sbiw	r26, 0x01	; 1
    43ac:	83 e5       	ldi	r24, 0x53	; 83
    43ae:	92 e1       	ldi	r25, 0x12	; 18
    43b0:	93 83       	std	Z+3, r25	; 0x03
    43b2:	82 83       	std	Z+2, r24	; 0x02
    43b4:	f4 82       	std	Z+4, r15	; 0x04
    43b6:	15 82       	std	Z+5, r1	; 0x05
    43b8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(4,1,lcdteks);
    43bc:	8d b7       	in	r24, 0x3d	; 61
    43be:	9e b7       	in	r25, 0x3e	; 62
    43c0:	06 96       	adiw	r24, 0x06	; 6
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	9e bf       	out	0x3e, r25	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	8d bf       	out	0x3d, r24	; 61
    43cc:	84 e0       	ldi	r24, 0x04	; 4
    43ce:	61 e0       	ldi	r22, 0x01	; 1
    43d0:	a8 01       	movw	r20, r16
    43d2:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(4,14,PSTR("*)Back"));
    43d6:	84 e0       	ldi	r24, 0x04	; 4
    43d8:	6e e0       	ldi	r22, 0x0E	; 14
    43da:	4c e4       	ldi	r20, 0x4C	; 76
    43dc:	52 e1       	ldi	r21, 0x12	; 18
    43de:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      stSettingDecimal=sdSelectKey2;
    43e2:	83 e0       	ldi	r24, 0x03	; 3
    43e4:	2d c0       	rjmp	.+90     	; 0x4440 <FSettingDec+0x32e>
	      break;
     case sdSelectKey2:
          KeyChar=_key_btn(_key_scan(1));
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    43ec:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    43f0:	08 2f       	mov	r16, r24
    43f2:	01 53       	subi	r16, 0x31	; 49
    43f4:	02 30       	cpi	r16, 0x02	; 2
    43f6:	68 f4       	brcc	.+26     	; 0x4412 <FSettingDec+0x300>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    43f8:	10 e0       	ldi	r17, 0x00	; 0
    43fa:	04 5c       	subi	r16, 0xC4	; 196
    43fc:	1f 4f       	sbci	r17, 0xFF	; 255
    43fe:	c8 01       	movw	r24, r16
    4400:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
		      PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;
    4404:	68 2f       	mov	r22, r24
    4406:	70 e0       	ldi	r23, 0x00	; 0
    4408:	6f 5f       	subi	r22, 0xFF	; 255
    440a:	7f 4f       	sbci	r23, 0xFF	; 255
    440c:	63 70       	andi	r22, 0x03	; 3
    440e:	70 70       	andi	r23, 0x00	; 0
    4410:	0d c0       	rjmp	.+26     	; 0x442c <FSettingDec+0x31a>

			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
              stSettingDecimal=sdInitDisplay2;
		  }else if ((KeyChar>='3')&&(KeyChar<='4')){
    4412:	98 2f       	mov	r25, r24
    4414:	93 53       	subi	r25, 0x33	; 51
    4416:	92 30       	cpi	r25, 0x02	; 2
    4418:	68 f4       	brcc	.+26     	; 0x4434 <FSettingDec+0x322>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    441a:	10 e0       	ldi	r17, 0x00	; 0
    441c:	04 5c       	subi	r16, 0xC4	; 196
    441e:	1f 4f       	sbci	r17, 0xFF	; 255
    4420:	c8 01       	movw	r24, r16
    4422:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=SelectMark(PDecimalConfig[Addr]);
    4426:	0e 94 4e 20 	call	0x409c	; 0x409c <SelectMark>
    442a:	68 2f       	mov	r22, r24
			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    442c:	c8 01       	movw	r24, r16
    442e:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
    4432:	05 c0       	rjmp	.+10     	; 0x443e <FSettingDec+0x32c>
              stSettingDecimal=sdInitDisplay2;
		  }else if (KeyChar=='*') stSettingDecimal=sdInitDisplay;
    4434:	8a 32       	cpi	r24, 0x2A	; 42
    4436:	59 f4       	brne	.+22     	; 0x444e <FSettingDec+0x33c>
    4438:	10 92 fd 02 	sts	0x02FD, r1
    443c:	08 c0       	rjmp	.+16     	; 0x444e <FSettingDec+0x33c>
		          stSettingDecimal=sdTestInput;
				  }*/
          break;
     case sdTestInput:
	      //if (TestUserInput()==MENU_DONE)
		  stSettingDecimal=sdInitDisplay2;
    443e:	82 e0       	ldi	r24, 0x02	; 2
    4440:	80 93 fd 02 	sts	0x02FD, r24
    4444:	04 c0       	rjmp	.+8      	; 0x444e <FSettingDec+0x33c>
	      break;
	 case sdExitSettingDecimal:
          stSettingDecimal=sdInitDisplay;
    4446:	10 92 fd 02 	sts	0x02FD, r1
		  Result=MENU_DONE;
    444a:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    444c:	01 c0       	rjmp	.+2      	; 0x4450 <FSettingDec+0x33e>
char FSettingDec(){
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
    444e:	80 e0       	ldi	r24, 0x00	; 0
          stSettingDecimal=sdInitDisplay;
		  Result=MENU_DONE;
	      break;
	 }
    return Result;
}
    4450:	64 96       	adiw	r28, 0x14	; 20
    4452:	0f b6       	in	r0, 0x3f	; 63
    4454:	f8 94       	cli
    4456:	de bf       	out	0x3e, r29	; 62
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	cd bf       	out	0x3d, r28	; 61
    445c:	cf 91       	pop	r28
    445e:	df 91       	pop	r29
    4460:	1f 91       	pop	r17
    4462:	0f 91       	pop	r16
    4464:	ff 90       	pop	r15
    4466:	ef 90       	pop	r14
    4468:	df 90       	pop	r13
    446a:	cf 90       	pop	r12
    446c:	08 95       	ret

0000446e <FSettingPumpPooling>:
	      break;
	 }
     return Result;
}

char FSettingPumpPooling(){//Parameter: PumpCount,
    446e:	ef 92       	push	r14
    4470:	ff 92       	push	r15
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	df 93       	push	r29
    4478:	cf 93       	push	r28
    447a:	cd b7       	in	r28, 0x3d	; 61
    447c:	de b7       	in	r29, 0x3e	; 62
    447e:	6b 97       	sbiw	r28, 0x1b	; 27
    4480:	0f b6       	in	r0, 0x3f	; 63
    4482:	f8 94       	cli
    4484:	de bf       	out	0x3e, r29	; 62
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	cd bf       	out	0x3d, r28	; 61
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
    448a:	80 91 f9 02 	lds	r24, 0x02F9
    448e:	82 30       	cpi	r24, 0x02	; 2
    4490:	09 f4       	brne	.+2      	; 0x4494 <FSettingPumpPooling+0x26>
    4492:	16 c1       	rjmp	.+556    	; 0x46c0 <FSettingPumpPooling+0x252>
    4494:	83 30       	cpi	r24, 0x03	; 3
    4496:	30 f4       	brcc	.+12     	; 0x44a4 <FSettingPumpPooling+0x36>
    4498:	88 23       	and	r24, r24
    449a:	59 f0       	breq	.+22     	; 0x44b2 <FSettingPumpPooling+0x44>
    449c:	81 30       	cpi	r24, 0x01	; 1
    449e:	09 f0       	breq	.+2      	; 0x44a2 <FSettingPumpPooling+0x34>
    44a0:	ea c1       	rjmp	.+980    	; 0x4876 <FSettingPumpPooling+0x408>
    44a2:	04 c1       	rjmp	.+520    	; 0x46ac <FSettingPumpPooling+0x23e>
    44a4:	83 30       	cpi	r24, 0x03	; 3
    44a6:	09 f4       	brne	.+2      	; 0x44aa <FSettingPumpPooling+0x3c>
    44a8:	d7 c1       	rjmp	.+942    	; 0x4858 <FSettingPumpPooling+0x3ea>
    44aa:	84 30       	cpi	r24, 0x04	; 4
    44ac:	09 f0       	breq	.+2      	; 0x44b0 <FSettingPumpPooling+0x42>
    44ae:	e3 c1       	rjmp	.+966    	; 0x4876 <FSettingPumpPooling+0x408>
    44b0:	de c1       	rjmp	.+956    	; 0x486e <FSettingPumpPooling+0x400>
	 case ppInitMenu:
          lcd_clear();
    44b2:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    44b6:	04 e4       	ldi	r16, 0x44	; 68
    44b8:	11 e0       	ldi	r17, 0x01	; 1
    44ba:	7e 01       	movw	r14, r28
    44bc:	08 94       	sec
    44be:	e1 1c       	adc	r14, r1
    44c0:	f1 1c       	adc	r15, r1
		  for (i=0;i<6;i++){
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
    44c2:	c8 01       	movw	r24, r16
    44c4:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    44c8:	d7 01       	movw	r26, r14
    44ca:	8d 93       	st	X+, r24
    44cc:	7d 01       	movw	r14, r26
    44ce:	0f 5f       	subi	r16, 0xFF	; 255
    44d0:	1f 4f       	sbci	r17, 0xFF	; 255
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
	 case ppInitMenu:
          lcd_clear();
		  for (i=0;i<6;i++){
    44d2:	b1 e0       	ldi	r27, 0x01	; 1
    44d4:	0a 34       	cpi	r16, 0x4A	; 74
    44d6:	1b 07       	cpc	r17, r27
    44d8:	a1 f7       	brne	.-24     	; 0x44c2 <FSettingPumpPooling+0x54>
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
		  }

		  sprintf_P(lcdteks,PSTR("1.MaxPump:%d"),PPoolingSetting[0]);lcd_print(1,1,lcdteks);
    44da:	00 d0       	rcall	.+0      	; 0x44dc <FSettingPumpPooling+0x6e>
    44dc:	00 d0       	rcall	.+0      	; 0x44de <FSettingPumpPooling+0x70>
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <FSettingPumpPooling+0x72>
    44e0:	ed b7       	in	r30, 0x3d	; 61
    44e2:	fe b7       	in	r31, 0x3e	; 62
    44e4:	31 96       	adiw	r30, 0x01	; 1
    44e6:	8e 01       	movw	r16, r28
    44e8:	09 5f       	subi	r16, 0xF9	; 249
    44ea:	1f 4f       	sbci	r17, 0xFF	; 255
    44ec:	ad b7       	in	r26, 0x3d	; 61
    44ee:	be b7       	in	r27, 0x3e	; 62
    44f0:	12 96       	adiw	r26, 0x02	; 2
    44f2:	1c 93       	st	X, r17
    44f4:	0e 93       	st	-X, r16
    44f6:	11 97       	sbiw	r26, 0x01	; 1
    44f8:	83 ef       	ldi	r24, 0xF3	; 243
    44fa:	9e e0       	ldi	r25, 0x0E	; 14
    44fc:	93 83       	std	Z+3, r25	; 0x03
    44fe:	82 83       	std	Z+2, r24	; 0x02
    4500:	89 81       	ldd	r24, Y+1	; 0x01
    4502:	84 83       	std	Z+4, r24	; 0x04
    4504:	15 82       	std	Z+5, r1	; 0x05
    4506:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    450a:	ed b7       	in	r30, 0x3d	; 61
    450c:	fe b7       	in	r31, 0x3e	; 62
    450e:	36 96       	adiw	r30, 0x06	; 6
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	fe bf       	out	0x3e, r31	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	ed bf       	out	0x3d, r30	; 61
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	61 e0       	ldi	r22, 0x01	; 1
    451e:	a8 01       	movw	r20, r16
    4520:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          sprintf_P(lcdteks,PSTR("2.nNoPump:%d"),PPoolingSetting[1]);lcd_print(2,1,lcdteks);
    4524:	00 d0       	rcall	.+0      	; 0x4526 <FSettingPumpPooling+0xb8>
    4526:	00 d0       	rcall	.+0      	; 0x4528 <FSettingPumpPooling+0xba>
    4528:	00 d0       	rcall	.+0      	; 0x452a <FSettingPumpPooling+0xbc>
    452a:	ed b7       	in	r30, 0x3d	; 61
    452c:	fe b7       	in	r31, 0x3e	; 62
    452e:	31 96       	adiw	r30, 0x01	; 1
    4530:	ad b7       	in	r26, 0x3d	; 61
    4532:	be b7       	in	r27, 0x3e	; 62
    4534:	12 96       	adiw	r26, 0x02	; 2
    4536:	1c 93       	st	X, r17
    4538:	0e 93       	st	-X, r16
    453a:	11 97       	sbiw	r26, 0x01	; 1
    453c:	86 ee       	ldi	r24, 0xE6	; 230
    453e:	9e e0       	ldi	r25, 0x0E	; 14
    4540:	93 83       	std	Z+3, r25	; 0x03
    4542:	82 83       	std	Z+2, r24	; 0x02
    4544:	8a 81       	ldd	r24, Y+2	; 0x02
    4546:	84 83       	std	Z+4, r24	; 0x04
    4548:	15 82       	std	Z+5, r1	; 0x05
    454a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    454e:	ed b7       	in	r30, 0x3d	; 61
    4550:	fe b7       	in	r31, 0x3e	; 62
    4552:	36 96       	adiw	r30, 0x06	; 6
    4554:	0f b6       	in	r0, 0x3f	; 63
    4556:	f8 94       	cli
    4558:	fe bf       	out	0x3e, r31	; 62
    455a:	0f be       	out	0x3f, r0	; 63
    455c:	ed bf       	out	0x3d, r30	; 61
    455e:	82 e0       	ldi	r24, 0x02	; 2
    4560:	61 e0       	ldi	r22, 0x01	; 1
    4562:	a8 01       	movw	r20, r16
    4564:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          sprintf_P(lcdteks,PSTR("3.TrySend:%d"),PPoolingSetting[2]);lcd_print(3,1,lcdteks);
    4568:	00 d0       	rcall	.+0      	; 0x456a <FSettingPumpPooling+0xfc>
    456a:	00 d0       	rcall	.+0      	; 0x456c <FSettingPumpPooling+0xfe>
    456c:	00 d0       	rcall	.+0      	; 0x456e <FSettingPumpPooling+0x100>
    456e:	ed b7       	in	r30, 0x3d	; 61
    4570:	fe b7       	in	r31, 0x3e	; 62
    4572:	31 96       	adiw	r30, 0x01	; 1
    4574:	ad b7       	in	r26, 0x3d	; 61
    4576:	be b7       	in	r27, 0x3e	; 62
    4578:	12 96       	adiw	r26, 0x02	; 2
    457a:	1c 93       	st	X, r17
    457c:	0e 93       	st	-X, r16
    457e:	11 97       	sbiw	r26, 0x01	; 1
    4580:	89 ed       	ldi	r24, 0xD9	; 217
    4582:	9e e0       	ldi	r25, 0x0E	; 14
    4584:	93 83       	std	Z+3, r25	; 0x03
    4586:	82 83       	std	Z+2, r24	; 0x02
    4588:	8b 81       	ldd	r24, Y+3	; 0x03
    458a:	84 83       	std	Z+4, r24	; 0x04
    458c:	15 82       	std	Z+5, r1	; 0x05
    458e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    4592:	ed b7       	in	r30, 0x3d	; 61
    4594:	fe b7       	in	r31, 0x3e	; 62
    4596:	36 96       	adiw	r30, 0x06	; 6
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	f8 94       	cli
    459c:	fe bf       	out	0x3e, r31	; 62
    459e:	0f be       	out	0x3f, r0	; 63
    45a0:	ed bf       	out	0x3d, r30	; 61
    45a2:	83 e0       	ldi	r24, 0x03	; 3
    45a4:	61 e0       	ldi	r22, 0x01	; 1
    45a6:	a8 01       	movw	r20, r16
    45a8:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          sprintf_P(lcdteks,PSTR("4.TimPool:%d"),PPoolingSetting[3]);lcd_print(4,1,lcdteks);
    45ac:	00 d0       	rcall	.+0      	; 0x45ae <FSettingPumpPooling+0x140>
    45ae:	00 d0       	rcall	.+0      	; 0x45b0 <FSettingPumpPooling+0x142>
    45b0:	00 d0       	rcall	.+0      	; 0x45b2 <FSettingPumpPooling+0x144>
    45b2:	ed b7       	in	r30, 0x3d	; 61
    45b4:	fe b7       	in	r31, 0x3e	; 62
    45b6:	31 96       	adiw	r30, 0x01	; 1
    45b8:	ad b7       	in	r26, 0x3d	; 61
    45ba:	be b7       	in	r27, 0x3e	; 62
    45bc:	12 96       	adiw	r26, 0x02	; 2
    45be:	1c 93       	st	X, r17
    45c0:	0e 93       	st	-X, r16
    45c2:	11 97       	sbiw	r26, 0x01	; 1
    45c4:	8c ec       	ldi	r24, 0xCC	; 204
    45c6:	9e e0       	ldi	r25, 0x0E	; 14
    45c8:	93 83       	std	Z+3, r25	; 0x03
    45ca:	82 83       	std	Z+2, r24	; 0x02
    45cc:	8c 81       	ldd	r24, Y+4	; 0x04
    45ce:	84 83       	std	Z+4, r24	; 0x04
    45d0:	15 82       	std	Z+5, r1	; 0x05
    45d2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    45d6:	ed b7       	in	r30, 0x3d	; 61
    45d8:	fe b7       	in	r31, 0x3e	; 62
    45da:	36 96       	adiw	r30, 0x06	; 6
    45dc:	0f b6       	in	r0, 0x3f	; 63
    45de:	f8 94       	cli
    45e0:	fe bf       	out	0x3e, r31	; 62
    45e2:	0f be       	out	0x3f, r0	; 63
    45e4:	ed bf       	out	0x3d, r30	; 61
    45e6:	84 e0       	ldi	r24, 0x04	; 4
    45e8:	61 e0       	ldi	r22, 0x01	; 1
    45ea:	a8 01       	movw	r20, r16
    45ec:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          sprintf_P(lcdteks,PSTR("5.Dly:%d"),PPoolingSetting[4]);lcd_print(1,13,lcdteks);
    45f0:	00 d0       	rcall	.+0      	; 0x45f2 <FSettingPumpPooling+0x184>
    45f2:	00 d0       	rcall	.+0      	; 0x45f4 <FSettingPumpPooling+0x186>
    45f4:	00 d0       	rcall	.+0      	; 0x45f6 <FSettingPumpPooling+0x188>
    45f6:	ed b7       	in	r30, 0x3d	; 61
    45f8:	fe b7       	in	r31, 0x3e	; 62
    45fa:	31 96       	adiw	r30, 0x01	; 1
    45fc:	ad b7       	in	r26, 0x3d	; 61
    45fe:	be b7       	in	r27, 0x3e	; 62
    4600:	12 96       	adiw	r26, 0x02	; 2
    4602:	1c 93       	st	X, r17
    4604:	0e 93       	st	-X, r16
    4606:	11 97       	sbiw	r26, 0x01	; 1
    4608:	83 ec       	ldi	r24, 0xC3	; 195
    460a:	9e e0       	ldi	r25, 0x0E	; 14
    460c:	93 83       	std	Z+3, r25	; 0x03
    460e:	82 83       	std	Z+2, r24	; 0x02
    4610:	8d 81       	ldd	r24, Y+5	; 0x05
    4612:	84 83       	std	Z+4, r24	; 0x04
    4614:	15 82       	std	Z+5, r1	; 0x05
    4616:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    461a:	ed b7       	in	r30, 0x3d	; 61
    461c:	fe b7       	in	r31, 0x3e	; 62
    461e:	36 96       	adiw	r30, 0x06	; 6
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	fe bf       	out	0x3e, r31	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	ed bf       	out	0x3d, r30	; 61
    462a:	81 e0       	ldi	r24, 0x01	; 1
    462c:	6d e0       	ldi	r22, 0x0D	; 13
    462e:	a8 01       	movw	r20, r16
    4630:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          sprintf_P(lcdteks,PSTR("6.Act:%d"),PPoolingSetting[5]);lcd_print(2,13,lcdteks);
    4634:	00 d0       	rcall	.+0      	; 0x4636 <FSettingPumpPooling+0x1c8>
    4636:	00 d0       	rcall	.+0      	; 0x4638 <FSettingPumpPooling+0x1ca>
    4638:	00 d0       	rcall	.+0      	; 0x463a <FSettingPumpPooling+0x1cc>
    463a:	ed b7       	in	r30, 0x3d	; 61
    463c:	fe b7       	in	r31, 0x3e	; 62
    463e:	31 96       	adiw	r30, 0x01	; 1
    4640:	ad b7       	in	r26, 0x3d	; 61
    4642:	be b7       	in	r27, 0x3e	; 62
    4644:	12 96       	adiw	r26, 0x02	; 2
    4646:	1c 93       	st	X, r17
    4648:	0e 93       	st	-X, r16
    464a:	11 97       	sbiw	r26, 0x01	; 1
    464c:	8a eb       	ldi	r24, 0xBA	; 186
    464e:	9e e0       	ldi	r25, 0x0E	; 14
    4650:	93 83       	std	Z+3, r25	; 0x03
    4652:	82 83       	std	Z+2, r24	; 0x02
    4654:	8e 81       	ldd	r24, Y+6	; 0x06
    4656:	84 83       	std	Z+4, r24	; 0x04
    4658:	15 82       	std	Z+5, r1	; 0x05
    465a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    465e:	ed b7       	in	r30, 0x3d	; 61
    4660:	fe b7       	in	r31, 0x3e	; 62
    4662:	36 96       	adiw	r30, 0x06	; 6
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	f8 94       	cli
    4668:	fe bf       	out	0x3e, r31	; 62
    466a:	0f be       	out	0x3f, r0	; 63
    466c:	ed bf       	out	0x3d, r30	; 61
    466e:	82 e0       	ldi	r24, 0x02	; 2
    4670:	6d e0       	ldi	r22, 0x0D	; 13
    4672:	a8 01       	movw	r20, r16
    4674:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          sprintf_P(lcdteks,PSTR("[*]Exit"));lcd_print(4,13,lcdteks);
    4678:	00 d0       	rcall	.+0      	; 0x467a <FSettingPumpPooling+0x20c>
    467a:	00 d0       	rcall	.+0      	; 0x467c <FSettingPumpPooling+0x20e>
    467c:	ad b7       	in	r26, 0x3d	; 61
    467e:	be b7       	in	r27, 0x3e	; 62
    4680:	12 96       	adiw	r26, 0x02	; 2
    4682:	1c 93       	st	X, r17
    4684:	0e 93       	st	-X, r16
    4686:	11 97       	sbiw	r26, 0x01	; 1
    4688:	82 eb       	ldi	r24, 0xB2	; 178
    468a:	9e e0       	ldi	r25, 0x0E	; 14
    468c:	14 96       	adiw	r26, 0x04	; 4
    468e:	9c 93       	st	X, r25
    4690:	8e 93       	st	-X, r24
    4692:	13 97       	sbiw	r26, 0x03	; 3
    4694:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    4698:	0f 90       	pop	r0
    469a:	0f 90       	pop	r0
    469c:	0f 90       	pop	r0
    469e:	0f 90       	pop	r0
    46a0:	84 e0       	ldi	r24, 0x04	; 4
    46a2:	6d e0       	ldi	r22, 0x0D	; 13
    46a4:	a8 01       	movw	r20, r16
    46a6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    46aa:	08 c0       	rjmp	.+16     	; 0x46bc <FSettingPumpPooling+0x24e>

          stPumpPooling=ppPoolingSettingInput;
	      break;
     case ppDisplaySequence:
          IsNewPoolingSequence=False;
    46ac:	10 92 5f 02 	sts	0x025F, r1
		  DisplayStandaloneSequence(3,14,iSequencePooling);
    46b0:	83 e0       	ldi	r24, 0x03	; 3
    46b2:	6e e0       	ldi	r22, 0x0E	; 14
    46b4:	40 91 5e 02 	lds	r20, 0x025E
    46b8:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <DisplayStandaloneSequence>
          stPumpPooling=ppPoolingSettingInput;
    46bc:	82 e0       	ldi	r24, 0x02	; 2
    46be:	6e c0       	rjmp	.+220    	; 0x479c <FSettingPumpPooling+0x32e>
	      break;
     case ppPoolingSettingInput:
	      if(IsNewPoolingSequence==True)stPumpPooling=ppDisplaySequence;
    46c0:	80 91 5f 02 	lds	r24, 0x025F
    46c4:	81 30       	cpi	r24, 0x01	; 1
    46c6:	11 f4       	brne	.+4      	; 0x46cc <FSettingPumpPooling+0x25e>
    46c8:	80 93 f9 02 	sts	0x02F9, r24

          KeyChar=_key_btn(_key_scan(1));
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    46d2:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    46d6:	28 2f       	mov	r18, r24
    46d8:	21 53       	subi	r18, 0x31	; 49
    46da:	26 30       	cpi	r18, 0x06	; 6
    46dc:	28 f4       	brcc	.+10     	; 0x46e8 <FSettingPumpPooling+0x27a>
		      Addr=KeyChar-'1';
			  TimSend=0;
    46de:	10 92 56 0d 	sts	0x0D56, r1
			  IsStandaloneAcknoledge=False;
    46e2:	10 92 60 02 	sts	0x0260, r1
    46e6:	01 c0       	rjmp	.+2      	; 0x46ea <FSettingPumpPooling+0x27c>
//SC_SET_POOLING_NO_PUMP_COUNT,SC_SET_POOLING_MAX_PUMP,SC_SET_POOLING_SEND,

char Result=MENU_NONE;
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
    46e8:	20 e0       	ldi	r18, 0x00	; 0
		  if ((KeyChar>='1')&&(KeyChar<='6')){
		      Addr=KeyChar-'1';
			  TimSend=0;
			  IsStandaloneAcknoledge=False;
          }
		  switch(KeyChar){
    46ea:	83 33       	cpi	r24, 0x33	; 51
    46ec:	09 f4       	brne	.+2      	; 0x46f0 <FSettingPumpPooling+0x282>
    46ee:	59 c0       	rjmp	.+178    	; 0x47a2 <FSettingPumpPooling+0x334>
    46f0:	84 33       	cpi	r24, 0x34	; 52
    46f2:	40 f4       	brcc	.+16     	; 0x4704 <FSettingPumpPooling+0x296>
    46f4:	81 33       	cpi	r24, 0x31	; 49
    46f6:	81 f0       	breq	.+32     	; 0x4718 <FSettingPumpPooling+0x2aa>
    46f8:	82 33       	cpi	r24, 0x32	; 50
    46fa:	b0 f5       	brcc	.+108    	; 0x4768 <FSettingPumpPooling+0x2fa>
    46fc:	8a 32       	cpi	r24, 0x2A	; 42
    46fe:	09 f0       	breq	.+2      	; 0x4702 <FSettingPumpPooling+0x294>
    4700:	ba c0       	rjmp	.+372    	; 0x4876 <FSettingPumpPooling+0x408>
    4702:	a8 c0       	rjmp	.+336    	; 0x4854 <FSettingPumpPooling+0x3e6>
    4704:	85 33       	cpi	r24, 0x35	; 53
    4706:	09 f4       	brne	.+2      	; 0x470a <FSettingPumpPooling+0x29c>
    4708:	7b c0       	rjmp	.+246    	; 0x4800 <FSettingPumpPooling+0x392>
    470a:	85 33       	cpi	r24, 0x35	; 53
    470c:	08 f4       	brcc	.+2      	; 0x4710 <FSettingPumpPooling+0x2a2>
    470e:	6a c0       	rjmp	.+212    	; 0x47e4 <FSettingPumpPooling+0x376>
    4710:	86 33       	cpi	r24, 0x36	; 54
    4712:	09 f0       	breq	.+2      	; 0x4716 <FSettingPumpPooling+0x2a8>
    4714:	b0 c0       	rjmp	.+352    	; 0x4876 <FSettingPumpPooling+0x408>
    4716:	82 c0       	rjmp	.+260    	; 0x481c <FSettingPumpPooling+0x3ae>
		  case '1'://MaxPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
    4718:	02 2f       	mov	r16, r18
    471a:	10 e0       	ldi	r17, 0x00	; 0
    471c:	fe 01       	movw	r30, r28
    471e:	31 96       	adiw	r30, 0x01	; 1
    4720:	e0 0f       	add	r30, r16
    4722:	f1 1f       	adc	r31, r17
    4724:	80 81       	ld	r24, Z
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	01 96       	adiw	r24, 0x01	; 1
    472a:	61 e1       	ldi	r22, 0x11	; 17
    472c:	70 e0       	ldi	r23, 0x00	; 0
    472e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    4732:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    4734:	00 97       	sbiw	r24, 0x00	; 0
    4736:	11 f4       	brne	.+4      	; 0x473c <FSettingPumpPooling+0x2ce>
    4738:	81 e0       	ldi	r24, 0x01	; 1
    473a:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
    473c:	fe 01       	movw	r30, r28
    473e:	e0 0f       	add	r30, r16
    4740:	f1 1f       	adc	r31, r17
    4742:	01 81       	ldd	r16, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    4744:	85 e1       	ldi	r24, 0x15	; 21
    4746:	80 93 85 06 	sts	0x0685, r24
	 PoolMsg=plMsg;
    474a:	00 93 b1 0c 	sts	0x0CB1, r16
     IsControlPooling=True;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	80 93 62 02 	sts	0x0262, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    4754:	82 2f       	mov	r24, r18
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	8c 5b       	subi	r24, 0xBC	; 188
    475a:	9e 4f       	sbci	r25, 0xFE	; 254
    475c:	60 2f       	mov	r22, r16
    475e:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			   PumpCountMax=PPoolingSetting[Addr];
    4762:	00 93 3a 02 	sts	0x023A, r16
    4766:	19 c0       	rjmp	.+50     	; 0x479a <FSettingPumpPooling+0x32c>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	fe 01       	movw	r30, r28
    476c:	e2 0f       	add	r30, r18
    476e:	f3 1f       	adc	r31, r19
    4770:	81 81       	ldd	r24, Z+1	; 0x01
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	65 e1       	ldi	r22, 0x15	; 21
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    477e:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    4780:	84 e1       	ldi	r24, 0x14	; 20
    4782:	80 93 85 06 	sts	0x0685, r24
	 PoolMsg=plMsg;
    4786:	60 93 b1 0c 	sts	0x0CB1, r22
     IsControlPooling=True;
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	80 93 62 02 	sts	0x0262, r24
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   //SendSlaveCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    4790:	c9 01       	movw	r24, r18
    4792:	8c 5b       	subi	r24, 0xBC	; 188
    4794:	9e 4f       	sbci	r25, 0xFE	; 254
    4796:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
    479a:	83 e0       	ldi	r24, 0x03	; 3
    479c:	80 93 f9 02 	sts	0x02F9, r24
    47a0:	6a c0       	rjmp	.+212    	; 0x4876 <FSettingPumpPooling+0x408>
		       break;
		  case '3'://TrySend
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    47a2:	02 2f       	mov	r16, r18
    47a4:	10 e0       	ldi	r17, 0x00	; 0
    47a6:	fe 01       	movw	r30, r28
    47a8:	31 96       	adiw	r30, 0x01	; 1
    47aa:	e0 0f       	add	r30, r16
    47ac:	f1 1f       	adc	r31, r17
    47ae:	80 81       	ld	r24, Z
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	01 96       	adiw	r24, 0x01	; 1
    47b4:	65 e1       	ldi	r22, 0x15	; 21
    47b6:	70 e0       	ldi	r23, 0x00	; 0
    47b8:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    47bc:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    47be:	00 97       	sbiw	r24, 0x00	; 0
    47c0:	11 f4       	brne	.+4      	; 0x47c6 <FSettingPumpPooling+0x358>
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
    47c6:	fe 01       	movw	r30, r28
    47c8:	e0 0f       	add	r30, r16
    47ca:	f1 1f       	adc	r31, r17
    47cc:	61 81       	ldd	r22, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    47ce:	86 e1       	ldi	r24, 0x16	; 22
    47d0:	80 93 85 06 	sts	0x0685, r24
	 PoolMsg=plMsg;
    47d4:	60 93 b1 0c 	sts	0x0CB1, r22
     IsControlPooling=True;
    47d8:	81 e0       	ldi	r24, 0x01	; 1
    47da:	80 93 62 02 	sts	0x0262, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    47de:	82 2f       	mov	r24, r18
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	d7 cf       	rjmp	.-82     	; 0x4792 <FSettingPumpPooling+0x324>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '4'://TimPool
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	fe 01       	movw	r30, r28
    47e8:	e2 0f       	add	r30, r18
    47ea:	f3 1f       	adc	r31, r19
    47ec:	81 81       	ldd	r24, Z+1	; 0x01
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	01 96       	adiw	r24, 0x01	; 1
    47f2:	65 e1       	ldi	r22, 0x15	; 21
    47f4:	70 e0       	ldi	r23, 0x00	; 0
    47f6:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    47fa:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    47fc:	87 e1       	ldi	r24, 0x17	; 23
    47fe:	c1 cf       	rjmp	.-126    	; 0x4782 <FSettingPumpPooling+0x314>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '5'://DelayNextPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%41); 
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	fe 01       	movw	r30, r28
    4804:	e2 0f       	add	r30, r18
    4806:	f3 1f       	adc	r31, r19
    4808:	81 81       	ldd	r24, Z+1	; 0x01
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	01 96       	adiw	r24, 0x01	; 1
    480e:	69 e2       	ldi	r22, 0x29	; 41
    4810:	70 e0       	ldi	r23, 0x00	; 0
    4812:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    4816:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    4818:	88 e1       	ldi	r24, 0x18	; 24
    481a:	b3 cf       	rjmp	.-154    	; 0x4782 <FSettingPumpPooling+0x314>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    481c:	84 e4       	ldi	r24, 0x44	; 68
    481e:	91 e0       	ldi	r25, 0x01	; 1
    4820:	2b 8f       	std	Y+27, r18	; 0x1b
    4822:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    4826:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4828:	30 e0       	ldi	r19, 0x00	; 0
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    482a:	fe 01       	movw	r30, r28
    482c:	e2 0f       	add	r30, r18
    482e:	f3 1f       	adc	r31, r19
    4830:	41 81       	ldd	r20, Z+1	; 0x01
    4832:	50 e0       	ldi	r21, 0x00	; 0
    4834:	4f 5f       	subi	r20, 0xFF	; 255
    4836:	5f 4f       	sbci	r21, 0xFF	; 255
    4838:	68 2f       	mov	r22, r24
    483a:	70 e0       	ldi	r23, 0x00	; 0
    483c:	6f 5f       	subi	r22, 0xFF	; 255
    483e:	7f 4f       	sbci	r23, 0xFF	; 255
    4840:	ca 01       	movw	r24, r20
    4842:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    4846:	68 2f       	mov	r22, r24
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    4848:	c9 01       	movw	r24, r18
    484a:	8c 5b       	subi	r24, 0xBC	; 188
    484c:	9e 4f       	sbci	r25, 0xFE	; 254
    484e:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
    4852:	0a c0       	rjmp	.+20     	; 0x4868 <FSettingPumpPooling+0x3fa>
			   stPumpPooling=ppInitMenu;
		       break;
		  case '*'://Exit
		       stPumpPooling=ppExitSettingPooling;		            
    4854:	84 e0       	ldi	r24, 0x04	; 4
    4856:	a2 cf       	rjmp	.-188    	; 0x479c <FSettingPumpPooling+0x32e>
		       break;
		  }  
	      break;
     case ppWaitPoolingRespond:	    
	      if ((IsStandaloneAcknoledge==True)||(TimSend>5))stPumpPooling=ppInitMenu;
    4858:	80 91 60 02 	lds	r24, 0x0260
    485c:	81 30       	cpi	r24, 0x01	; 1
    485e:	21 f0       	breq	.+8      	; 0x4868 <FSettingPumpPooling+0x3fa>
    4860:	80 91 56 0d 	lds	r24, 0x0D56
    4864:	86 30       	cpi	r24, 0x06	; 6
    4866:	38 f0       	brcs	.+14     	; 0x4876 <FSettingPumpPooling+0x408>
    4868:	10 92 f9 02 	sts	0x02F9, r1
    486c:	04 c0       	rjmp	.+8      	; 0x4876 <FSettingPumpPooling+0x408>
	      break;
     case ppExitSettingPooling:
          stPumpPooling=ppInitMenu;
    486e:	10 92 f9 02 	sts	0x02F9, r1
	      Result=MENU_DONE;
    4872:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    4874:	01 c0       	rjmp	.+2      	; 0x4878 <FSettingPumpPooling+0x40a>
char Result=MENU_NONE;
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
    4876:	80 e0       	ldi	r24, 0x00	; 0
          stPumpPooling=ppInitMenu;
	      Result=MENU_DONE;
	      break;
    }
return Result;
}
    4878:	6b 96       	adiw	r28, 0x1b	; 27
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	1f 91       	pop	r17
    488a:	0f 91       	pop	r16
    488c:	ff 90       	pop	r15
    488e:	ef 90       	pop	r14
    4890:	08 95       	ret

00004892 <FSettingSystem>:
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    4892:	af 92       	push	r10
    4894:	bf 92       	push	r11
    4896:	cf 92       	push	r12
    4898:	df 92       	push	r13
    489a:	ef 92       	push	r14
    489c:	ff 92       	push	r15
    489e:	0f 93       	push	r16
    48a0:	1f 93       	push	r17
    48a2:	df 93       	push	r29
    48a4:	cf 93       	push	r28
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	65 97       	sbiw	r28, 0x15	; 21
    48ac:	0f b6       	in	r0, 0x3f	; 63
    48ae:	f8 94       	cli
    48b0:	de bf       	out	0x3e, r29	; 62
    48b2:	0f be       	out	0x3f, r0	; 63
    48b4:	cd bf       	out	0x3d, r28	; 61
       char SubMenu,Result=MENU_NONE;
	   char HGMode;
       char lcdteks[20];
	   int bValue;

     switch(stSettingSytem){
    48b6:	80 91 fa 02 	lds	r24, 0x02FA
    48ba:	82 30       	cpi	r24, 0x02	; 2
    48bc:	09 f4       	brne	.+2      	; 0x48c0 <FSettingSystem+0x2e>
    48be:	bf c0       	rjmp	.+382    	; 0x4a3e <FSettingSystem+0x1ac>
    48c0:	83 30       	cpi	r24, 0x03	; 3
    48c2:	30 f4       	brcc	.+12     	; 0x48d0 <FSettingSystem+0x3e>
    48c4:	88 23       	and	r24, r24
    48c6:	71 f0       	breq	.+28     	; 0x48e4 <FSettingSystem+0x52>
    48c8:	81 30       	cpi	r24, 0x01	; 1
    48ca:	09 f0       	breq	.+2      	; 0x48ce <FSettingSystem+0x3c>
    48cc:	57 c1       	rjmp	.+686    	; 0x4b7c <FSettingSystem+0x2ea>
    48ce:	7f c0       	rjmp	.+254    	; 0x49ce <FSettingSystem+0x13c>
    48d0:	84 30       	cpi	r24, 0x04	; 4
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <FSettingSystem+0x44>
    48d4:	48 c1       	rjmp	.+656    	; 0x4b66 <FSettingSystem+0x2d4>
    48d6:	84 30       	cpi	r24, 0x04	; 4
    48d8:	08 f4       	brcc	.+2      	; 0x48dc <FSettingSystem+0x4a>
    48da:	17 c1       	rjmp	.+558    	; 0x4b0a <FSettingSystem+0x278>
    48dc:	85 30       	cpi	r24, 0x05	; 5
    48de:	09 f0       	breq	.+2      	; 0x48e2 <FSettingSystem+0x50>
    48e0:	4d c1       	rjmp	.+666    	; 0x4b7c <FSettingSystem+0x2ea>
    48e2:	48 c1       	rjmp	.+656    	; 0x4b74 <FSettingSystem+0x2e2>
	 case ssInitSettingSystem:
	      IFType=eeprom_read_byte(&DefInitIFT);
    48e4:	86 e3       	ldi	r24, 0x36	; 54
    48e6:	91 e0       	ldi	r25, 0x01	; 1
    48e8:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    48ec:	18 2f       	mov	r17, r24
    48ee:	80 93 00 01 	sts	0x0100, r24
		  HGMode=eeprom_read_byte(&DefHGMode);
    48f2:	82 ec       	ldi	r24, 0xC2	; 194
    48f4:	93 e0       	ldi	r25, 0x03	; 3
    48f6:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    48fa:	08 2f       	mov	r16, r24

	      if (IFType==IT_NONE)sprintf_P(lcdteks,PSTR("1.Mode:None"));
    48fc:	11 23       	and	r17, r17
    48fe:	89 f4       	brne	.+34     	; 0x4922 <FSettingSystem+0x90>
    4900:	00 d0       	rcall	.+0      	; 0x4902 <FSettingSystem+0x70>
    4902:	00 d0       	rcall	.+0      	; 0x4904 <FSettingSystem+0x72>
    4904:	ce 01       	movw	r24, r28
    4906:	01 96       	adiw	r24, 0x01	; 1
    4908:	ad b7       	in	r26, 0x3d	; 61
    490a:	be b7       	in	r27, 0x3e	; 62
    490c:	12 96       	adiw	r26, 0x02	; 2
    490e:	9c 93       	st	X, r25
    4910:	8e 93       	st	-X, r24
    4912:	11 97       	sbiw	r26, 0x01	; 1
    4914:	84 e8       	ldi	r24, 0x84	; 132
    4916:	9f e0       	ldi	r25, 0x0F	; 15
    4918:	14 96       	adiw	r26, 0x04	; 4
    491a:	9c 93       	st	X, r25
    491c:	8e 93       	st	-X, r24
    491e:	13 97       	sbiw	r26, 0x03	; 3
    4920:	23 c0       	rjmp	.+70     	; 0x4968 <FSettingSystem+0xd6>
		  else
	      if (IFType==IT_SLAVE)sprintf_P(lcdteks,PSTR("1.Mode:Slave"));
    4922:	11 30       	cpi	r17, 0x01	; 1
    4924:	71 f4       	brne	.+28     	; 0x4942 <FSettingSystem+0xb0>
    4926:	00 d0       	rcall	.+0      	; 0x4928 <FSettingSystem+0x96>
    4928:	00 d0       	rcall	.+0      	; 0x492a <FSettingSystem+0x98>
    492a:	9e 01       	movw	r18, r28
    492c:	2f 5f       	subi	r18, 0xFF	; 255
    492e:	3f 4f       	sbci	r19, 0xFF	; 255
    4930:	ed b7       	in	r30, 0x3d	; 61
    4932:	fe b7       	in	r31, 0x3e	; 62
    4934:	32 83       	std	Z+2, r19	; 0x02
    4936:	21 83       	std	Z+1, r18	; 0x01
    4938:	27 e7       	ldi	r18, 0x77	; 119
    493a:	3f e0       	ldi	r19, 0x0F	; 15
    493c:	34 83       	std	Z+4, r19	; 0x04
    493e:	23 83       	std	Z+3, r18	; 0x03
    4940:	13 c0       	rjmp	.+38     	; 0x4968 <FSettingSystem+0xd6>
		  else
	      if (IFType==IT_STANDALONE)sprintf_P(lcdteks,PSTR("1.Mode:Standalone"));
    4942:	12 30       	cpi	r17, 0x02	; 2
    4944:	b9 f4       	brne	.+46     	; 0x4974 <FSettingSystem+0xe2>
    4946:	00 d0       	rcall	.+0      	; 0x4948 <FSettingSystem+0xb6>
    4948:	00 d0       	rcall	.+0      	; 0x494a <FSettingSystem+0xb8>
    494a:	9e 01       	movw	r18, r28
    494c:	2f 5f       	subi	r18, 0xFF	; 255
    494e:	3f 4f       	sbci	r19, 0xFF	; 255
    4950:	ad b7       	in	r26, 0x3d	; 61
    4952:	be b7       	in	r27, 0x3e	; 62
    4954:	12 96       	adiw	r26, 0x02	; 2
    4956:	3c 93       	st	X, r19
    4958:	2e 93       	st	-X, r18
    495a:	11 97       	sbiw	r26, 0x01	; 1
    495c:	25 e6       	ldi	r18, 0x65	; 101
    495e:	3f e0       	ldi	r19, 0x0F	; 15
    4960:	14 96       	adiw	r26, 0x04	; 4
    4962:	3c 93       	st	X, r19
    4964:	2e 93       	st	-X, r18
    4966:	13 97       	sbiw	r26, 0x03	; 3
    4968:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    496c:	0f 90       	pop	r0
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0

	      lcd_clear();
    4974:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_print(1,1,lcdteks);
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	61 e0       	ldi	r22, 0x01	; 1
    497c:	ae 01       	movw	r20, r28
    497e:	4f 5f       	subi	r20, 0xFF	; 255
    4980:	5f 4f       	sbci	r21, 0xFF	; 255
    4982:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(2,1,PSTR("2.Baudrate"));
    4986:	82 e0       	ldi	r24, 0x02	; 2
    4988:	61 e0       	ldi	r22, 0x01	; 1
    498a:	4a e5       	ldi	r20, 0x5A	; 90
    498c:	5f e0       	ldi	r21, 0x0F	; 15
    498e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>

		  if (HGMode==HM_TTL)lcd_printf(3,1,PSTR("3.COM3:TTL"));
    4992:	00 23       	and	r16, r16
    4994:	29 f4       	brne	.+10     	; 0x49a0 <FSettingSystem+0x10e>
    4996:	83 e0       	ldi	r24, 0x03	; 3
    4998:	61 e0       	ldi	r22, 0x01	; 1
    499a:	4f e4       	ldi	r20, 0x4F	; 79
    499c:	5f e0       	ldi	r21, 0x0F	; 15
    499e:	0d c0       	rjmp	.+26     	; 0x49ba <FSettingSystem+0x128>
		  else
		  if (HGMode==HM_232)lcd_printf(3,1,PSTR("3.COM3:232"));
    49a0:	01 30       	cpi	r16, 0x01	; 1
    49a2:	29 f4       	brne	.+10     	; 0x49ae <FSettingSystem+0x11c>
    49a4:	83 e0       	ldi	r24, 0x03	; 3
    49a6:	61 e0       	ldi	r22, 0x01	; 1
    49a8:	44 e4       	ldi	r20, 0x44	; 68
    49aa:	5f e0       	ldi	r21, 0x0F	; 15
    49ac:	06 c0       	rjmp	.+12     	; 0x49ba <FSettingSystem+0x128>
		  else
		  if (HGMode==HM_485)lcd_printf(3,1,PSTR("3.COM3:485"));		  
    49ae:	02 30       	cpi	r16, 0x02	; 2
    49b0:	31 f4       	brne	.+12     	; 0x49be <FSettingSystem+0x12c>
    49b2:	83 e0       	ldi	r24, 0x03	; 3
    49b4:	61 e0       	ldi	r22, 0x01	; 1
    49b6:	49 e3       	ldi	r20, 0x39	; 57
    49b8:	5f e0       	ldi	r21, 0x0F	; 15
    49ba:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back      "));
    49be:	84 e0       	ldi	r24, 0x04	; 4
    49c0:	61 e0       	ldi	r22, 0x01	; 1
    49c2:	4b e2       	ldi	r20, 0x2B	; 43
    49c4:	5f e0       	ldi	r21, 0x0F	; 15
    49c6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stSettingSytem=ssMenuSelect;
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	c5 c0       	rjmp	.+394    	; 0x4b58 <FSettingSystem+0x2c6>
	      break;
     case ssMenuSelect:
          KeyPressed=_key_scan(1);
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    49d4:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if (KeyChar=='1'){
    49d8:	81 33       	cpi	r24, 0x31	; 49
    49da:	99 f4       	brne	.+38     	; 0x4a02 <FSettingSystem+0x170>
		      IFType=((IFType+1)%3);
    49dc:	80 91 00 01 	lds	r24, 0x0100
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	01 96       	adiw	r24, 0x01	; 1
    49e4:	63 e0       	ldi	r22, 0x03	; 3
    49e6:	70 e0       	ldi	r23, 0x00	; 0
    49e8:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    49ec:	80 93 00 01 	sts	0x0100, r24
			  SendSlaveCommand(IFType,DispenserBrand);
    49f0:	60 91 3c 02 	lds	r22, 0x023C
    49f4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
			  eeprom_write_byte(&DefInitIFT,IFType);
    49f8:	86 e3       	ldi	r24, 0x36	; 54
    49fa:	91 e0       	ldi	r25, 0x01	; 1
    49fc:	60 91 00 01 	lds	r22, 0x0100
    4a00:	17 c0       	rjmp	.+46     	; 0x4a30 <FSettingSystem+0x19e>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  else
		  if (KeyChar=='2'){
    4a02:	82 33       	cpi	r24, 0x32	; 50
    4a04:	09 f4       	brne	.+2      	; 0x4a08 <FSettingSystem+0x176>
    4a06:	a7 c0       	rjmp	.+334    	; 0x4b56 <FSettingSystem+0x2c4>
		      stSettingSytem=ssComSettings;
		  }
		  else
		  if (KeyChar=='3'){
    4a08:	83 33       	cpi	r24, 0x33	; 51
    4a0a:	a9 f4       	brne	.+42     	; 0x4a36 <FSettingSystem+0x1a4>
		      HGMode=eeprom_read_byte(&DefHGMode);
    4a0c:	82 ec       	ldi	r24, 0xC2	; 194
    4a0e:	93 e0       	ldi	r25, 0x03	; 3
    4a10:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
		      HGMode=((HGMode+1)%3);
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	01 96       	adiw	r24, 0x01	; 1
    4a18:	63 e0       	ldi	r22, 0x03	; 3
    4a1a:	70 e0       	ldi	r23, 0x00	; 0
    4a1c:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    4a20:	08 2f       	mov	r16, r24
			  SendSlaveCommand(SC_HGM_MODE,HGMode);
    4a22:	81 e2       	ldi	r24, 0x21	; 33
    4a24:	60 2f       	mov	r22, r16
    4a26:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
			  eeprom_write_byte(&DefHGMode,HGMode);
    4a2a:	82 ec       	ldi	r24, 0xC2	; 194
    4a2c:	93 e0       	ldi	r25, 0x03	; 3
    4a2e:	60 2f       	mov	r22, r16
    4a30:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
    4a34:	9c c0       	rjmp	.+312    	; 0x4b6e <FSettingSystem+0x2dc>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  //else
		  if (KeyChar=='*'){
    4a36:	8a 32       	cpi	r24, 0x2A	; 42
    4a38:	09 f4       	brne	.+2      	; 0x4a3c <FSettingSystem+0x1aa>
    4a3a:	93 c0       	rjmp	.+294    	; 0x4b62 <FSettingSystem+0x2d0>
    4a3c:	9f c0       	rjmp	.+318    	; 0x4b7c <FSettingSystem+0x2ea>
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
    4a3e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	61 e0       	ldi	r22, 0x01	; 1
    4a46:	46 e1       	ldi	r20, 0x16	; 22
    4a48:	5f e0       	ldi	r21, 0x0F	; 15
    4a4a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    4a4e:	00 e0       	ldi	r16, 0x00	; 0
    4a50:	10 e0       	ldi	r17, 0x00	; 0

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    4a52:	7e 01       	movw	r14, r28
    4a54:	08 94       	sec
    4a56:	e1 1c       	adc	r14, r1
    4a58:	f1 1c       	adc	r15, r1
    4a5a:	8d e0       	ldi	r24, 0x0D	; 13
    4a5c:	c8 2e       	mov	r12, r24
    4a5e:	8f e0       	ldi	r24, 0x0F	; 15
    4a60:	d8 2e       	mov	r13, r24
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    4a62:	bb e0       	ldi	r27, 0x0B	; 11
    4a64:	bb 2e       	mov	r11, r27
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    4a66:	a0 2e       	mov	r10, r16

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
    4a68:	c8 01       	movw	r24, r16
    4a6a:	80 5c       	subi	r24, 0xC0	; 192
    4a6c:	9e 4f       	sbci	r25, 0xFE	; 254
    4a6e:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    4a72:	84 30       	cpi	r24, 0x04	; 4
    4a74:	68 f4       	brcc	.+26     	; 0x4a90 <FSettingSystem+0x1fe>
    4a76:	e8 2f       	mov	r30, r24
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	ee 0f       	add	r30, r30
    4a7c:	ff 1f       	adc	r31, r31
    4a7e:	e6 58       	subi	r30, 0x86	; 134
    4a80:	fe 4f       	sbci	r31, 0xFE	; 254
    4a82:	80 81       	ld	r24, Z
    4a84:	91 81       	ldd	r25, Z+1	; 0x01
			   if (bValue==5787)bValue=12213;
    4a86:	b6 e1       	ldi	r27, 0x16	; 22
    4a88:	8b 39       	cpi	r24, 0x9B	; 155
    4a8a:	9b 07       	cpc	r25, r27
    4a8c:	21 f0       	breq	.+8      	; 0x4a96 <FSettingSystem+0x204>
    4a8e:	05 c0       	rjmp	.+10     	; 0x4a9a <FSettingSystem+0x208>
    4a90:	80 e0       	ldi	r24, 0x00	; 0
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <FSettingSystem+0x208>
    4a96:	85 eb       	ldi	r24, 0xB5	; 181
    4a98:	9f e2       	ldi	r25, 0x2F	; 47
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    4a9a:	0f 5f       	subi	r16, 0xFF	; 255
    4a9c:	1f 4f       	sbci	r17, 0xFF	; 255
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    4a9e:	ed b7       	in	r30, 0x3d	; 61
    4aa0:	fe b7       	in	r31, 0x3e	; 62
    4aa2:	38 97       	sbiw	r30, 0x08	; 8
    4aa4:	0f b6       	in	r0, 0x3f	; 63
    4aa6:	f8 94       	cli
    4aa8:	fe bf       	out	0x3e, r31	; 62
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	ed bf       	out	0x3d, r30	; 61
    4aae:	31 96       	adiw	r30, 0x01	; 1
    4ab0:	ad b7       	in	r26, 0x3d	; 61
    4ab2:	be b7       	in	r27, 0x3e	; 62
    4ab4:	12 96       	adiw	r26, 0x02	; 2
    4ab6:	fc 92       	st	X, r15
    4ab8:	ee 92       	st	-X, r14
    4aba:	11 97       	sbiw	r26, 0x01	; 1
    4abc:	d3 82       	std	Z+3, r13	; 0x03
    4abe:	c2 82       	std	Z+2, r12	; 0x02
    4ac0:	15 83       	std	Z+5, r17	; 0x05
    4ac2:	04 83       	std	Z+4, r16	; 0x04
    4ac4:	97 83       	std	Z+7, r25	; 0x07
    4ac6:	86 83       	std	Z+6, r24	; 0x06
    4ac8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    4acc:	ed b7       	in	r30, 0x3d	; 61
    4ace:	fe b7       	in	r31, 0x3e	; 62
    4ad0:	38 96       	adiw	r30, 0x08	; 8
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	fe bf       	out	0x3e, r31	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	ed bf       	out	0x3d, r30	; 61
    4adc:	8a 2d       	mov	r24, r10
    4ade:	81 70       	andi	r24, 0x01	; 1
    4ae0:	a6 94       	lsr	r10
    4ae2:	ab 9c       	mul	r10, r11
    4ae4:	60 2d       	mov	r22, r0
    4ae6:	11 24       	eor	r1, r1
    4ae8:	6f 5f       	subi	r22, 0xFF	; 255
    4aea:	8e 5f       	subi	r24, 0xFE	; 254
    4aec:	a7 01       	movw	r20, r14
    4aee:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
    4af2:	04 30       	cpi	r16, 0x04	; 4
    4af4:	11 05       	cpc	r17, r1
    4af6:	09 f0       	breq	.+2      	; 0x4afa <FSettingSystem+0x268>
    4af8:	b6 cf       	rjmp	.-148    	; 0x4a66 <FSettingSystem+0x1d4>
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
		  }
		  lcd_printf(4,1,PSTR("[*]Back     "));
    4afa:	84 e0       	ldi	r24, 0x04	; 4
    4afc:	61 e0       	ldi	r22, 0x01	; 1
    4afe:	40 e0       	ldi	r20, 0x00	; 0
    4b00:	5f e0       	ldi	r21, 0x0F	; 15
    4b02:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stSettingSytem=ssBaudrateInput;
    4b06:	83 e0       	ldi	r24, 0x03	; 3
    4b08:	27 c0       	rjmp	.+78     	; 0x4b58 <FSettingSystem+0x2c6>
	      break;
     case ssBaudrateInput:
	      KeyPressed=_key_scan(1);
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    4b10:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
    4b14:	48 2f       	mov	r20, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    4b16:	81 53       	subi	r24, 0x31	; 49
    4b18:	84 30       	cpi	r24, 0x04	; 4
    4b1a:	08 f5       	brcc	.+66     	; 0x4b5e <FSettingSystem+0x2cc>
		       brVal=eeprom_read_byte(&DefBaudrate[KeyChar-'1']);
    4b1c:	04 2f       	mov	r16, r20
    4b1e:	10 e0       	ldi	r17, 0x00	; 0
    4b20:	01 5f       	subi	r16, 0xF1	; 241
    4b22:	1e 4f       	sbci	r17, 0xFE	; 254
    4b24:	c8 01       	movw	r24, r16
    4b26:	4d 8b       	std	Y+21, r20	; 0x15
    4b28:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
			   brVal=((brVal+1)%3)+1;
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	2f 5f       	subi	r18, 0xFF	; 255
    4b32:	3f 4f       	sbci	r19, 0xFF	; 255
    4b34:	c9 01       	movw	r24, r18
    4b36:	63 e0       	ldi	r22, 0x03	; 3
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    4b3e:	e8 2e       	mov	r14, r24
    4b40:	e3 94       	inc	r14
			   SetBaudRate(KeyChar-'0',brVal);
    4b42:	4d 89       	ldd	r20, Y+21	; 0x15
    4b44:	84 2f       	mov	r24, r20
    4b46:	80 53       	subi	r24, 0x30	; 48
    4b48:	6e 2d       	mov	r22, r14
    4b4a:	0e 94 08 18 	call	0x3010	; 0x3010 <SetBaudRate>
			   eeprom_write_byte(&DefBaudrate[KeyChar-'1'],brVal);
    4b4e:	c8 01       	movw	r24, r16
    4b50:	6e 2d       	mov	r22, r14
    4b52:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
               stSettingSytem=ssComSettings;
    4b56:	82 e0       	ldi	r24, 0x02	; 2
    4b58:	80 93 fa 02 	sts	0x02FA, r24
    4b5c:	0f c0       	rjmp	.+30     	; 0x4b7c <FSettingSystem+0x2ea>
		  }else if (KeyChar=='*')
    4b5e:	4a 32       	cpi	r20, 0x2A	; 42
    4b60:	69 f4       	brne	.+26     	; 0x4b7c <FSettingSystem+0x2ea>
		      stSettingSytem=ssExitSystemSettings;		  	
    4b62:	85 e0       	ldi	r24, 0x05	; 5
    4b64:	f9 cf       	rjmp	.-14     	; 0x4b58 <FSettingSystem+0x2c6>
	      break;
	 case ssPumpPoolingSettings:
          SubMenu=FSettingPumpPooling();
    4b66:	0e 94 37 22 	call	0x446e	; 0x446e <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stSettingSytem=ssInitSettingSystem;
    4b6a:	81 30       	cpi	r24, 0x01	; 1
    4b6c:	39 f4       	brne	.+14     	; 0x4b7c <FSettingSystem+0x2ea>
    4b6e:	10 92 fa 02 	sts	0x02FA, r1
    4b72:	04 c0       	rjmp	.+8      	; 0x4b7c <FSettingSystem+0x2ea>
	      break;
     case ssExitSystemSettings:
	      stSettingSytem=ssInitSettingSystem;
    4b74:	10 92 fa 02 	sts	0x02FA, r1
	      Result=MENU_DONE;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    4b7a:	01 c0       	rjmp	.+2      	; 0x4b7e <FSettingSystem+0x2ec>
}

char FSettingSystem(){
static char stSettingSytem=ssInitSettingSystem;
       char KeyPressed,KeyChar,brVal,i;  
       char SubMenu,Result=MENU_NONE;
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
	      stSettingSytem=ssInitSettingSystem;
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    4b7e:	65 96       	adiw	r28, 0x15	; 21
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	cf 91       	pop	r28
    4b8c:	df 91       	pop	r29
    4b8e:	1f 91       	pop	r17
    4b90:	0f 91       	pop	r16
    4b92:	ff 90       	pop	r15
    4b94:	ef 90       	pop	r14
    4b96:	df 90       	pop	r13
    4b98:	cf 90       	pop	r12
    4b9a:	bf 90       	pop	r11
    4b9c:	af 90       	pop	r10
    4b9e:	08 95       	ret

00004ba0 <AddCharLag>:
}

//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	01 90       	ld	r0, Z+
    4ba4:	00 20       	and	r0, r0
    4ba6:	e9 f7       	brne	.-6      	; 0x4ba2 <AddCharLag+0x2>
    4ba8:	31 97       	sbiw	r30, 0x01	; 1
    4baa:	e8 1b       	sub	r30, r24
    4bac:	f9 0b       	sbc	r31, r25
  if (Length<Size){   
    4bae:	e4 17       	cp	r30, r20
    4bb0:	58 f4       	brcc	.+22     	; 0x4bc8 <AddCharLag+0x28>
     for(i=Length;i<Size;i++){
	    String[i]=CharAdded;
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	ae 0f       	add	r26, r30
    4bb6:	b1 1d       	adc	r27, r1
    4bb8:	6c 93       	st	X, r22
//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    4bba:	ef 5f       	subi	r30, 0xFF	; 255
    4bbc:	e4 17       	cp	r30, r20
    4bbe:	c8 f3       	brcs	.-14     	; 0x4bb2 <AddCharLag+0x12>
	    String[i]=CharAdded;
	 }String[Size]=0;
    4bc0:	84 0f       	add	r24, r20
    4bc2:	91 1d       	adc	r25, r1
    4bc4:	fc 01       	movw	r30, r24
    4bc6:	10 82       	st	Z, r1
    4bc8:	08 95       	ret

00004bca <AddCharLead>:
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    4bca:	9f 92       	push	r9
    4bcc:	af 92       	push	r10
    4bce:	bf 92       	push	r11
    4bd0:	cf 92       	push	r12
    4bd2:	df 92       	push	r13
    4bd4:	ef 92       	push	r14
    4bd6:	ff 92       	push	r15
    4bd8:	0f 93       	push	r16
    4bda:	1f 93       	push	r17
    4bdc:	df 93       	push	r29
    4bde:	cf 93       	push	r28
    4be0:	cd b7       	in	r28, 0x3d	; 61
    4be2:	de b7       	in	r29, 0x3e	; 62
    4be4:	6e 97       	sbiw	r28, 0x1e	; 30
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	f8 94       	cli
    4bea:	de bf       	out	0x3e, r29	; 62
    4bec:	0f be       	out	0x3f, r0	; 63
    4bee:	cd bf       	out	0x3d, r28	; 61
     char i,Length,strAdded[30];
     Length=strlen(String);
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	0d 90       	ld	r0, X+
    4bf4:	00 20       	and	r0, r0
    4bf6:	e9 f7       	brne	.-6      	; 0x4bf2 <AddCharLead+0x28>
    4bf8:	11 97       	sbiw	r26, 0x01	; 1
    4bfa:	7a 2f       	mov	r23, r26
    4bfc:	78 1b       	sub	r23, r24

	 if (Size>Length){
    4bfe:	74 17       	cp	r23, r20
    4c00:	d8 f5       	brcc	.+118    	; 0x4c78 <AddCharLead+0xae>
    4c02:	fe 01       	movw	r30, r28
    4c04:	31 96       	adiw	r30, 0x01	; 1
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    4c06:	c4 2e       	mov	r12, r20
    4c08:	dd 24       	eor	r13, r13
    4c0a:	7f 01       	movw	r14, r30
    4c0c:	ec 0c       	add	r14, r12
    4c0e:	fd 1c       	adc	r15, r13
    4c10:	df 01       	movw	r26, r30
    4c12:	01 c0       	rjmp	.+2      	; 0x4c16 <AddCharLead+0x4c>
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
    4c14:	6d 93       	st	X+, r22
void AddCharLead(char *String,char CharAdded,unsigned char Size){//
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    4c16:	ae 15       	cp	r26, r14
    4c18:	bf 05       	cpc	r27, r15
    4c1a:	e1 f7       	brne	.-8      	; 0x4c14 <AddCharLead+0x4a>
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
    4c1c:	24 2f       	mov	r18, r20
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	8e 01       	movw	r16, r28
    4c22:	0f 5f       	subi	r16, 0xFF	; 255
    4c24:	1f 4f       	sbci	r17, 0xFF	; 255
    4c26:	d8 01       	movw	r26, r16
    4c28:	a2 0f       	add	r26, r18
    4c2a:	b3 1f       	adc	r27, r19
    4c2c:	1c 92       	st	X, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4c2e:	54 2f       	mov	r21, r20
    4c30:	57 1b       	sub	r21, r23
	         strAdded[i]=String[i-(Size-Length)];
    4c32:	67 2f       	mov	r22, r23
    4c34:	70 e0       	ldi	r23, 0x00	; 0
    4c36:	62 1b       	sub	r22, r18
    4c38:	73 0b       	sbc	r23, r19
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4c3a:	0d c0       	rjmp	.+26     	; 0x4c56 <AddCharLead+0x8c>
	         strAdded[i]=String[i-(Size-Length)];
    4c3c:	a5 2f       	mov	r26, r21
    4c3e:	b0 e0       	ldi	r27, 0x00	; 0
    4c40:	58 01       	movw	r10, r16
    4c42:	aa 0e       	add	r10, r26
    4c44:	bb 1e       	adc	r11, r27
    4c46:	a8 0f       	add	r26, r24
    4c48:	b9 1f       	adc	r27, r25
    4c4a:	a6 0f       	add	r26, r22
    4c4c:	b7 1f       	adc	r27, r23
    4c4e:	9c 90       	ld	r9, X
    4c50:	d5 01       	movw	r26, r10
    4c52:	9c 92       	st	X, r9
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4c54:	5f 5f       	subi	r21, 0xFF	; 255
    4c56:	54 17       	cp	r21, r20
    4c58:	88 f3       	brcs	.-30     	; 0x4c3c <AddCharLead+0x72>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    4c5a:	d8 01       	movw	r26, r16
    4c5c:	a2 0f       	add	r26, r18
    4c5e:	b3 1f       	adc	r27, r19
    4c60:	1c 92       	st	X, r1
    4c62:	dc 01       	movw	r26, r24
	     //Spaced
         for(i=0;i<Size;i++){
    4c64:	02 c0       	rjmp	.+4      	; 0x4c6a <AddCharLead+0xa0>
	         String[i]=strAdded[i];
    4c66:	21 91       	ld	r18, Z+
    4c68:	2d 93       	st	X+, r18
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    4c6a:	ee 15       	cp	r30, r14
    4c6c:	ff 05       	cpc	r31, r15
    4c6e:	d9 f7       	brne	.-10     	; 0x4c66 <AddCharLead+0x9c>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    4c70:	8c 0d       	add	r24, r12
    4c72:	9d 1d       	adc	r25, r13
    4c74:	fc 01       	movw	r30, r24
    4c76:	10 82       	st	Z, r1
	 }
}
    4c78:	6e 96       	adiw	r28, 0x1e	; 30
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	f8 94       	cli
    4c7e:	de bf       	out	0x3e, r29	; 62
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	cd bf       	out	0x3d, r28	; 61
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	1f 91       	pop	r17
    4c8a:	0f 91       	pop	r16
    4c8c:	ff 90       	pop	r15
    4c8e:	ef 90       	pop	r14
    4c90:	df 90       	pop	r13
    4c92:	cf 90       	pop	r12
    4c94:	bf 90       	pop	r11
    4c96:	af 90       	pop	r10
    4c98:	9f 90       	pop	r9
    4c9a:	08 95       	ret

00004c9c <AddSpaceLag>:



void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	01 90       	ld	r0, Z+
    4ca0:	00 20       	and	r0, r0
    4ca2:	e9 f7       	brne	.-6      	; 0x4c9e <AddSpaceLag+0x2>
    4ca4:	31 97       	sbiw	r30, 0x01	; 1
    4ca6:	e8 1b       	sub	r30, r24
    4ca8:	f9 0b       	sbc	r31, r25
  if (Length<Size){   
    4caa:	e6 17       	cp	r30, r22
    4cac:	60 f4       	brcc	.+24     	; 0x4cc6 <AddSpaceLag+0x2a>
     for(i=Length;i<Size;i++){
	    String[i]=' ';
    4cae:	20 e2       	ldi	r18, 0x20	; 32
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	ae 0f       	add	r26, r30
    4cb4:	b1 1d       	adc	r27, r1
    4cb6:	2c 93       	st	X, r18

void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    4cb8:	ef 5f       	subi	r30, 0xFF	; 255
    4cba:	e6 17       	cp	r30, r22
    4cbc:	c8 f3       	brcs	.-14     	; 0x4cb0 <AddSpaceLag+0x14>
	    String[i]=' ';
	 }String[Size]=0;
    4cbe:	86 0f       	add	r24, r22
    4cc0:	91 1d       	adc	r25, r1
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	10 82       	st	Z, r1
    4cc6:	08 95       	ret

00004cc8 <AddSpaceLead>:
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    4cc8:	9f 92       	push	r9
    4cca:	af 92       	push	r10
    4ccc:	bf 92       	push	r11
    4cce:	cf 92       	push	r12
    4cd0:	df 92       	push	r13
    4cd2:	ef 92       	push	r14
    4cd4:	ff 92       	push	r15
    4cd6:	0f 93       	push	r16
    4cd8:	1f 93       	push	r17
    4cda:	df 93       	push	r29
    4cdc:	cf 93       	push	r28
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	e2 97       	sbiw	r28, 0x32	; 50
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
     char i,Length,strAdded[50];
     Length=strlen(String);
    4cee:	dc 01       	movw	r26, r24
    4cf0:	0d 90       	ld	r0, X+
    4cf2:	00 20       	and	r0, r0
    4cf4:	e9 f7       	brne	.-6      	; 0x4cf0 <AddSpaceLead+0x28>
    4cf6:	11 97       	sbiw	r26, 0x01	; 1
    4cf8:	4a 2f       	mov	r20, r26
    4cfa:	48 1b       	sub	r20, r24

	 if (Size>Length){
    4cfc:	46 17       	cp	r20, r22
    4cfe:	d8 f5       	brcc	.+118    	; 0x4d76 <AddSpaceLead+0xae>
    4d00:	fe 01       	movw	r30, r28
    4d02:	31 96       	adiw	r30, 0x01	; 1
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    4d04:	c6 2e       	mov	r12, r22
    4d06:	dd 24       	eor	r13, r13
    4d08:	7f 01       	movw	r14, r30
    4d0a:	ec 0c       	add	r14, r12
    4d0c:	fd 1c       	adc	r15, r13
    4d0e:	df 01       	movw	r26, r30
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
    4d10:	20 e2       	ldi	r18, 0x20	; 32
    4d12:	01 c0       	rjmp	.+2      	; 0x4d16 <AddSpaceLead+0x4e>
    4d14:	2d 93       	st	X+, r18
void AddSpaceLead(char *String,unsigned char Size){//
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    4d16:	ae 15       	cp	r26, r14
    4d18:	bf 05       	cpc	r27, r15
    4d1a:	e1 f7       	brne	.-8      	; 0x4d14 <AddSpaceLead+0x4c>
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
    4d1c:	26 2f       	mov	r18, r22
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	8e 01       	movw	r16, r28
    4d22:	0f 5f       	subi	r16, 0xFF	; 255
    4d24:	1f 4f       	sbci	r17, 0xFF	; 255
    4d26:	d8 01       	movw	r26, r16
    4d28:	a2 0f       	add	r26, r18
    4d2a:	b3 1f       	adc	r27, r19
    4d2c:	1c 92       	st	X, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4d2e:	76 2f       	mov	r23, r22
    4d30:	74 1b       	sub	r23, r20
	         strAdded[i]=String[i-(Size-Length)];
    4d32:	50 e0       	ldi	r21, 0x00	; 0
    4d34:	42 1b       	sub	r20, r18
    4d36:	53 0b       	sbc	r21, r19
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4d38:	0d c0       	rjmp	.+26     	; 0x4d54 <AddSpaceLead+0x8c>
	         strAdded[i]=String[i-(Size-Length)];
    4d3a:	a7 2f       	mov	r26, r23
    4d3c:	b0 e0       	ldi	r27, 0x00	; 0
    4d3e:	58 01       	movw	r10, r16
    4d40:	aa 0e       	add	r10, r26
    4d42:	bb 1e       	adc	r11, r27
    4d44:	a8 0f       	add	r26, r24
    4d46:	b9 1f       	adc	r27, r25
    4d48:	a4 0f       	add	r26, r20
    4d4a:	b5 1f       	adc	r27, r21
    4d4c:	9c 90       	ld	r9, X
    4d4e:	d5 01       	movw	r26, r10
    4d50:	9c 92       	st	X, r9
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4d52:	7f 5f       	subi	r23, 0xFF	; 255
    4d54:	76 17       	cp	r23, r22
    4d56:	88 f3       	brcs	.-30     	; 0x4d3a <AddSpaceLead+0x72>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    4d58:	d8 01       	movw	r26, r16
    4d5a:	a2 0f       	add	r26, r18
    4d5c:	b3 1f       	adc	r27, r19
    4d5e:	1c 92       	st	X, r1
    4d60:	dc 01       	movw	r26, r24
	     //Spaced
         for(i=0;i<Size;i++){
    4d62:	02 c0       	rjmp	.+4      	; 0x4d68 <AddSpaceLead+0xa0>
	         String[i]=strAdded[i];
    4d64:	21 91       	ld	r18, Z+
    4d66:	2d 93       	st	X+, r18
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    4d68:	ee 15       	cp	r30, r14
    4d6a:	ff 05       	cpc	r31, r15
    4d6c:	d9 f7       	brne	.-10     	; 0x4d64 <AddSpaceLead+0x9c>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    4d6e:	8c 0d       	add	r24, r12
    4d70:	9d 1d       	adc	r25, r13
    4d72:	fc 01       	movw	r30, r24
    4d74:	10 82       	st	Z, r1
	 }
}
    4d76:	e2 96       	adiw	r28, 0x32	; 50
    4d78:	0f b6       	in	r0, 0x3f	; 63
    4d7a:	f8 94       	cli
    4d7c:	de bf       	out	0x3e, r29	; 62
    4d7e:	0f be       	out	0x3f, r0	; 63
    4d80:	cd bf       	out	0x3d, r28	; 61
    4d82:	cf 91       	pop	r28
    4d84:	df 91       	pop	r29
    4d86:	1f 91       	pop	r17
    4d88:	0f 91       	pop	r16
    4d8a:	ff 90       	pop	r15
    4d8c:	ef 90       	pop	r14
    4d8e:	df 90       	pop	r13
    4d90:	cf 90       	pop	r12
    4d92:	bf 90       	pop	r11
    4d94:	af 90       	pop	r10
    4d96:	9f 90       	pop	r9
    4d98:	08 95       	ret

00004d9a <IFTSendMessage>:
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;

}

void IFTSendMessage(char MsgCode){//<STX>[IFTID][Seq][No][SrceIP][DestIP][MsgCode]
    4d9a:	cf 92       	push	r12
    4d9c:	df 92       	push	r13
    4d9e:	ef 92       	push	r14
    4da0:	ff 92       	push	r15
    4da2:	0f 93       	push	r16
    4da4:	1f 93       	push	r17
    4da6:	df 93       	push	r29
    4da8:	cf 93       	push	r28
    4daa:	cd b7       	in	r28, 0x3d	; 61
    4dac:	de b7       	in	r29, 0x3e	; 62
    4dae:	c1 54       	subi	r28, 0x41	; 65
    4db0:	d0 40       	sbci	r29, 0x00	; 0
    4db2:	0f b6       	in	r0, 0x3f	; 63
    4db4:	f8 94       	cli
    4db6:	de bf       	out	0x3e, r29	; 62
    4db8:	0f be       	out	0x3f, r0	; 63
    4dba:	cd bf       	out	0x3d, r28	; 61
    4dbc:	28 2f       	mov	r18, r24
	 char strSeqNum[3];
	 char ReadIP[4];
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	61 e0       	ldi	r22, 0x01	; 1
    4dc2:	41 e0       	ldi	r20, 0x01	; 1
    4dc4:	22 96       	adiw	r28, 0x02	; 2
    4dc6:	2f af       	std	Y+63, r18	; 0x3f
    4dc8:	22 97       	sbiw	r28, 0x02	; 2
    4dca:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    4dd6:	00 d0       	rcall	.+0      	; 0x4dd8 <IFTSendMessage+0x3e>
    4dd8:	00 d0       	rcall	.+0      	; 0x4dda <IFTSendMessage+0x40>
    4dda:	00 d0       	rcall	.+0      	; 0x4ddc <IFTSendMessage+0x42>
    4ddc:	ed b7       	in	r30, 0x3d	; 61
    4dde:	fe b7       	in	r31, 0x3e	; 62
    4de0:	31 96       	adiw	r30, 0x01	; 1
    4de2:	8e 01       	movw	r16, r28
    4de4:	0b 5f       	subi	r16, 0xFB	; 251
    4de6:	1f 4f       	sbci	r17, 0xFF	; 255
    4de8:	ad b7       	in	r26, 0x3d	; 61
    4dea:	be b7       	in	r27, 0x3e	; 62
    4dec:	12 96       	adiw	r26, 0x02	; 2
    4dee:	1c 93       	st	X, r17
    4df0:	0e 93       	st	-X, r16
    4df2:	11 97       	sbiw	r26, 0x01	; 1
    4df4:	46 e4       	ldi	r20, 0x46	; 70
    4df6:	53 e2       	ldi	r21, 0x23	; 35
    4df8:	53 83       	std	Z+3, r21	; 0x03
    4dfa:	42 83       	std	Z+2, r20	; 0x02
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    4dfc:	64 e6       	ldi	r22, 0x64	; 100
    4dfe:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    4e02:	94 83       	std	Z+4, r25	; 0x04
    4e04:	15 82       	std	Z+5, r1	; 0x05
    4e06:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(1, 0,strSend);
    4e0a:	8d b7       	in	r24, 0x3d	; 61
    4e0c:	9e b7       	in	r25, 0x3e	; 62
    4e0e:	06 96       	adiw	r24, 0x06	; 6
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	9e bf       	out	0x3e, r25	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	8d bf       	out	0x3d, r24	; 61
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	60 e0       	ldi	r22, 0x00	; 0
    4e1e:	a8 01       	movw	r20, r16
    4e20:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
     //[Seq]
	 SeqNum=((SeqNum+1)%100);
    4e24:	80 91 8c 02 	lds	r24, 0x028C
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	01 96       	adiw	r24, 0x01	; 1
    4e2c:	64 e6       	ldi	r22, 0x64	; 100
    4e2e:	70 e0       	ldi	r23, 0x00	; 0
    4e30:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    4e34:	80 93 8c 02 	sts	0x028C, r24
	 sprintf_P(strSend,PSTR("%.2d"),SeqNum);	 
    4e38:	00 d0       	rcall	.+0      	; 0x4e3a <IFTSendMessage+0xa0>
    4e3a:	00 d0       	rcall	.+0      	; 0x4e3c <IFTSendMessage+0xa2>
    4e3c:	00 d0       	rcall	.+0      	; 0x4e3e <IFTSendMessage+0xa4>
    4e3e:	ed b7       	in	r30, 0x3d	; 61
    4e40:	fe b7       	in	r31, 0x3e	; 62
    4e42:	31 96       	adiw	r30, 0x01	; 1
    4e44:	ad b7       	in	r26, 0x3d	; 61
    4e46:	be b7       	in	r27, 0x3e	; 62
    4e48:	12 96       	adiw	r26, 0x02	; 2
    4e4a:	1c 93       	st	X, r17
    4e4c:	0e 93       	st	-X, r16
    4e4e:	11 97       	sbiw	r26, 0x01	; 1
    4e50:	41 e4       	ldi	r20, 0x41	; 65
    4e52:	53 e2       	ldi	r21, 0x23	; 35
    4e54:	53 83       	std	Z+3, r21	; 0x03
    4e56:	42 83       	std	Z+2, r20	; 0x02
    4e58:	84 83       	std	Z+4, r24	; 0x04
    4e5a:	15 82       	std	Z+5, r1	; 0x05
    4e5c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(1, 0,strSend);
    4e60:	8d b7       	in	r24, 0x3d	; 61
    4e62:	9e b7       	in	r25, 0x3e	; 62
    4e64:	06 96       	adiw	r24, 0x06	; 6
    4e66:	0f b6       	in	r0, 0x3f	; 63
    4e68:	f8 94       	cli
    4e6a:	9e bf       	out	0x3e, r25	; 62
    4e6c:	0f be       	out	0x3f, r0	; 63
    4e6e:	8d bf       	out	0x3d, r24	; 61
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	60 e0       	ldi	r22, 0x00	; 0
    4e74:	a8 01       	movw	r20, r16
    4e76:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
	 //[ClientIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefClientIP,4);
    4e7a:	7e 01       	movw	r14, r28
    4e7c:	08 94       	sec
    4e7e:	e1 1c       	adc	r14, r1
    4e80:	f1 1c       	adc	r15, r1
    4e82:	c7 01       	movw	r24, r14
    4e84:	68 e2       	ldi	r22, 0x28	; 40
    4e86:	70 e0       	ldi	r23, 0x00	; 0
    4e88:	44 e0       	ldi	r20, 0x04	; 4
    4e8a:	50 e0       	ldi	r21, 0x00	; 0
    4e8c:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    4e90:	ad b7       	in	r26, 0x3d	; 61
    4e92:	be b7       	in	r27, 0x3e	; 62
    4e94:	1c 97       	sbiw	r26, 0x0c	; 12
    4e96:	0f b6       	in	r0, 0x3f	; 63
    4e98:	f8 94       	cli
    4e9a:	be bf       	out	0x3e, r27	; 62
    4e9c:	0f be       	out	0x3f, r0	; 63
    4e9e:	ad bf       	out	0x3d, r26	; 61
    4ea0:	ed b7       	in	r30, 0x3d	; 61
    4ea2:	fe b7       	in	r31, 0x3e	; 62
    4ea4:	31 96       	adiw	r30, 0x01	; 1
    4ea6:	12 96       	adiw	r26, 0x02	; 2
    4ea8:	1c 93       	st	X, r17
    4eaa:	0e 93       	st	-X, r16
    4eac:	11 97       	sbiw	r26, 0x01	; 1
    4eae:	8d e2       	ldi	r24, 0x2D	; 45
    4eb0:	93 e2       	ldi	r25, 0x23	; 35
    4eb2:	93 83       	std	Z+3, r25	; 0x03
    4eb4:	82 83       	std	Z+2, r24	; 0x02
    4eb6:	89 81       	ldd	r24, Y+1	; 0x01
    4eb8:	84 83       	std	Z+4, r24	; 0x04
    4eba:	15 82       	std	Z+5, r1	; 0x05
    4ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ebe:	86 83       	std	Z+6, r24	; 0x06
    4ec0:	17 82       	std	Z+7, r1	; 0x07
    4ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec4:	80 87       	std	Z+8, r24	; 0x08
    4ec6:	11 86       	std	Z+9, r1	; 0x09
    4ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eca:	82 87       	std	Z+10, r24	; 0x0a
    4ecc:	13 86       	std	Z+11, r1	; 0x0b
    4ece:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(1, 0,strSend);
    4ed2:	8d b7       	in	r24, 0x3d	; 61
    4ed4:	9e b7       	in	r25, 0x3e	; 62
    4ed6:	0c 96       	adiw	r24, 0x0c	; 12
    4ed8:	0f b6       	in	r0, 0x3f	; 63
    4eda:	f8 94       	cli
    4edc:	9e bf       	out	0x3e, r25	; 62
    4ede:	0f be       	out	0x3f, r0	; 63
    4ee0:	8d bf       	out	0x3d, r24	; 61
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	60 e0       	ldi	r22, 0x00	; 0
    4ee6:	a8 01       	movw	r20, r16
    4ee8:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
	 //[ServerIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefServerIP,4);
    4eec:	c7 01       	movw	r24, r14
    4eee:	6c e2       	ldi	r22, 0x2C	; 44
    4ef0:	70 e0       	ldi	r23, 0x00	; 0
    4ef2:	44 e0       	ldi	r20, 0x04	; 4
    4ef4:	50 e0       	ldi	r21, 0x00	; 0
    4ef6:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    4efa:	ad b7       	in	r26, 0x3d	; 61
    4efc:	be b7       	in	r27, 0x3e	; 62
    4efe:	1c 97       	sbiw	r26, 0x0c	; 12
    4f00:	0f b6       	in	r0, 0x3f	; 63
    4f02:	f8 94       	cli
    4f04:	be bf       	out	0x3e, r27	; 62
    4f06:	0f be       	out	0x3f, r0	; 63
    4f08:	ad bf       	out	0x3d, r26	; 61
    4f0a:	ed b7       	in	r30, 0x3d	; 61
    4f0c:	fe b7       	in	r31, 0x3e	; 62
    4f0e:	31 96       	adiw	r30, 0x01	; 1
    4f10:	12 96       	adiw	r26, 0x02	; 2
    4f12:	1c 93       	st	X, r17
    4f14:	0e 93       	st	-X, r16
    4f16:	11 97       	sbiw	r26, 0x01	; 1
    4f18:	89 e1       	ldi	r24, 0x19	; 25
    4f1a:	93 e2       	ldi	r25, 0x23	; 35
    4f1c:	93 83       	std	Z+3, r25	; 0x03
    4f1e:	82 83       	std	Z+2, r24	; 0x02
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	84 83       	std	Z+4, r24	; 0x04
    4f24:	15 82       	std	Z+5, r1	; 0x05
    4f26:	8a 81       	ldd	r24, Y+2	; 0x02
    4f28:	86 83       	std	Z+6, r24	; 0x06
    4f2a:	17 82       	std	Z+7, r1	; 0x07
    4f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2e:	80 87       	std	Z+8, r24	; 0x08
    4f30:	11 86       	std	Z+9, r1	; 0x09
    4f32:	8c 81       	ldd	r24, Y+4	; 0x04
    4f34:	82 87       	std	Z+10, r24	; 0x0a
    4f36:	13 86       	std	Z+11, r1	; 0x0b
    4f38:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(1, 0,strSend);
    4f3c:	8d b7       	in	r24, 0x3d	; 61
    4f3e:	9e b7       	in	r25, 0x3e	; 62
    4f40:	0c 96       	adiw	r24, 0x0c	; 12
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	9e bf       	out	0x3e, r25	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	8d bf       	out	0x3d, r24	; 61
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	a8 01       	movw	r20, r16
    4f52:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
	 //[MsgCode]
	 sprintf_P(strSend,PSTR("%.2X"),MsgCode);	 
    4f56:	00 d0       	rcall	.+0      	; 0x4f58 <IFTSendMessage+0x1be>
    4f58:	00 d0       	rcall	.+0      	; 0x4f5a <IFTSendMessage+0x1c0>
    4f5a:	00 d0       	rcall	.+0      	; 0x4f5c <IFTSendMessage+0x1c2>
    4f5c:	ed b7       	in	r30, 0x3d	; 61
    4f5e:	fe b7       	in	r31, 0x3e	; 62
    4f60:	31 96       	adiw	r30, 0x01	; 1
    4f62:	ad b7       	in	r26, 0x3d	; 61
    4f64:	be b7       	in	r27, 0x3e	; 62
    4f66:	12 96       	adiw	r26, 0x02	; 2
    4f68:	1c 93       	st	X, r17
    4f6a:	0e 93       	st	-X, r16
    4f6c:	11 97       	sbiw	r26, 0x01	; 1
    4f6e:	84 e1       	ldi	r24, 0x14	; 20
    4f70:	93 e2       	ldi	r25, 0x23	; 35
    4f72:	93 83       	std	Z+3, r25	; 0x03
    4f74:	82 83       	std	Z+2, r24	; 0x02
    4f76:	22 96       	adiw	r28, 0x02	; 2
    4f78:	2f ad       	ldd	r18, Y+63	; 0x3f
    4f7a:	22 97       	sbiw	r28, 0x02	; 2
    4f7c:	24 83       	std	Z+4, r18	; 0x04
    4f7e:	15 82       	std	Z+5, r1	; 0x05
    4f80:	22 96       	adiw	r28, 0x02	; 2
    4f82:	2f af       	std	Y+63, r18	; 0x3f
    4f84:	22 97       	sbiw	r28, 0x02	; 2
    4f86:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(1, 0,strSend);
    4f8a:	8d b7       	in	r24, 0x3d	; 61
    4f8c:	9e b7       	in	r25, 0x3e	; 62
    4f8e:	06 96       	adiw	r24, 0x06	; 6
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	9e bf       	out	0x3e, r25	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	8d bf       	out	0x3d, r24	; 61
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	60 e0       	ldi	r22, 0x00	; 0
    4f9e:	a8 01       	movw	r20, r16
    4fa0:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>

     switch(MsgCode){
    4fa4:	22 96       	adiw	r28, 0x02	; 2
    4fa6:	2f ad       	ldd	r18, Y+63	; 0x3f
    4fa8:	22 97       	sbiw	r28, 0x02	; 2
    4faa:	22 33       	cpi	r18, 0x32	; 50
    4fac:	09 f4       	brne	.+2      	; 0x4fb0 <IFTSendMessage+0x216>
    4fae:	7f c0       	rjmp	.+254    	; 0x50ae <IFTSendMessage+0x314>
    4fb0:	23 33       	cpi	r18, 0x33	; 51
    4fb2:	70 f4       	brcc	.+28     	; 0x4fd0 <IFTSendMessage+0x236>
    4fb4:	22 32       	cpi	r18, 0x22	; 34
    4fb6:	91 f1       	breq	.+100    	; 0x501c <IFTSendMessage+0x282>
    4fb8:	23 32       	cpi	r18, 0x23	; 35
    4fba:	20 f4       	brcc	.+8      	; 0x4fc4 <IFTSendMessage+0x22a>
    4fbc:	24 30       	cpi	r18, 0x04	; 4
    4fbe:	09 f0       	breq	.+2      	; 0x4fc2 <IFTSendMessage+0x228>
    4fc0:	1d c2       	rjmp	.+1082   	; 0x53fc <IFTSendMessage+0x662>
    4fc2:	19 c0       	rjmp	.+50     	; 0x4ff6 <IFTSendMessage+0x25c>
    4fc4:	24 32       	cpi	r18, 0x24	; 36
    4fc6:	d9 f1       	breq	.+118    	; 0x503e <IFTSendMessage+0x2a4>
    4fc8:	28 32       	cpi	r18, 0x28	; 40
    4fca:	09 f0       	breq	.+2      	; 0x4fce <IFTSendMessage+0x234>
    4fcc:	17 c2       	rjmp	.+1070   	; 0x53fc <IFTSendMessage+0x662>
    4fce:	53 c0       	rjmp	.+166    	; 0x5076 <IFTSendMessage+0x2dc>
    4fd0:	20 39       	cpi	r18, 0x90	; 144
    4fd2:	09 f4       	brne	.+2      	; 0x4fd6 <IFTSendMessage+0x23c>
    4fd4:	78 c1       	rjmp	.+752    	; 0x52c6 <IFTSendMessage+0x52c>
    4fd6:	21 39       	cpi	r18, 0x91	; 145
    4fd8:	38 f4       	brcc	.+14     	; 0x4fe8 <IFTSendMessage+0x24e>
    4fda:	26 35       	cpi	r18, 0x56	; 86
    4fdc:	09 f4       	brne	.+2      	; 0x4fe0 <IFTSendMessage+0x246>
    4fde:	d7 c0       	rjmp	.+430    	; 0x518e <IFTSendMessage+0x3f4>
    4fe0:	28 35       	cpi	r18, 0x58	; 88
    4fe2:	09 f0       	breq	.+2      	; 0x4fe6 <IFTSendMessage+0x24c>
    4fe4:	0b c2       	rjmp	.+1046   	; 0x53fc <IFTSendMessage+0x662>
    4fe6:	e8 c0       	rjmp	.+464    	; 0x51b8 <IFTSendMessage+0x41e>
    4fe8:	22 39       	cpi	r18, 0x92	; 146
    4fea:	09 f4       	brne	.+2      	; 0x4fee <IFTSendMessage+0x254>
    4fec:	8d c1       	rjmp	.+794    	; 0x5308 <IFTSendMessage+0x56e>
    4fee:	28 39       	cpi	r18, 0x98	; 152
    4ff0:	09 f0       	breq	.+2      	; 0x4ff4 <IFTSendMessage+0x25a>
    4ff2:	04 c2       	rjmp	.+1032   	; 0x53fc <IFTSendMessage+0x662>
    4ff4:	e0 c1       	rjmp	.+960    	; 0x53b6 <IFTSendMessage+0x61c>
	 case MSG_04://Transaction Number
	      sprintf_P(strSend,PSTR("%s1"),strTranNo);
    4ff6:	00 d0       	rcall	.+0      	; 0x4ff8 <IFTSendMessage+0x25e>
    4ff8:	00 d0       	rcall	.+0      	; 0x4ffa <IFTSendMessage+0x260>
    4ffa:	00 d0       	rcall	.+0      	; 0x4ffc <IFTSendMessage+0x262>
    4ffc:	ed b7       	in	r30, 0x3d	; 61
    4ffe:	fe b7       	in	r31, 0x3e	; 62
    5000:	31 96       	adiw	r30, 0x01	; 1
    5002:	ad b7       	in	r26, 0x3d	; 61
    5004:	be b7       	in	r27, 0x3e	; 62
    5006:	12 96       	adiw	r26, 0x02	; 2
    5008:	1c 93       	st	X, r17
    500a:	0e 93       	st	-X, r16
    500c:	11 97       	sbiw	r26, 0x01	; 1
    500e:	80 e1       	ldi	r24, 0x10	; 16
    5010:	93 e2       	ldi	r25, 0x23	; 35
    5012:	93 83       	std	Z+3, r25	; 0x03
    5014:	82 83       	std	Z+2, r24	; 0x02
    5016:	85 e6       	ldi	r24, 0x65	; 101
    5018:	9d e0       	ldi	r25, 0x0D	; 13
    501a:	df c1       	rjmp	.+958    	; 0x53da <IFTSendMessage+0x640>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_10://No Additional Parameter
	      break;
	 case MSG_22://strCardID
	      UpdateCardID();
    501c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    5020:	00 d0       	rcall	.+0      	; 0x5022 <IFTSendMessage+0x288>
    5022:	00 d0       	rcall	.+0      	; 0x5024 <IFTSendMessage+0x28a>
    5024:	00 d0       	rcall	.+0      	; 0x5026 <IFTSendMessage+0x28c>
    5026:	ed b7       	in	r30, 0x3d	; 61
    5028:	fe b7       	in	r31, 0x3e	; 62
    502a:	31 96       	adiw	r30, 0x01	; 1
    502c:	ad b7       	in	r26, 0x3d	; 61
    502e:	be b7       	in	r27, 0x3e	; 62
    5030:	12 96       	adiw	r26, 0x02	; 2
    5032:	1c 93       	st	X, r17
    5034:	0e 93       	st	-X, r16
    5036:	11 97       	sbiw	r26, 0x01	; 1
    5038:	8d e0       	ldi	r24, 0x0D	; 13
    503a:	93 e2       	ldi	r25, 0x23	; 35
    503c:	b8 c0       	rjmp	.+368    	; 0x51ae <IFTSendMessage+0x414>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_24://strCardID, FIP_ID
	      UpdateCardID();
    503e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strCardID,strFIP_ID);
    5042:	ad b7       	in	r26, 0x3d	; 61
    5044:	be b7       	in	r27, 0x3e	; 62
    5046:	18 97       	sbiw	r26, 0x08	; 8
    5048:	0f b6       	in	r0, 0x3f	; 63
    504a:	f8 94       	cli
    504c:	be bf       	out	0x3e, r27	; 62
    504e:	0f be       	out	0x3f, r0	; 63
    5050:	ad bf       	out	0x3d, r26	; 61
    5052:	ed b7       	in	r30, 0x3d	; 61
    5054:	fe b7       	in	r31, 0x3e	; 62
    5056:	31 96       	adiw	r30, 0x01	; 1
    5058:	12 96       	adiw	r26, 0x02	; 2
    505a:	1c 93       	st	X, r17
    505c:	0e 93       	st	-X, r16
    505e:	11 97       	sbiw	r26, 0x01	; 1
    5060:	88 e0       	ldi	r24, 0x08	; 8
    5062:	93 e2       	ldi	r25, 0x23	; 35
    5064:	93 83       	std	Z+3, r25	; 0x03
    5066:	82 83       	std	Z+2, r24	; 0x02
    5068:	87 e6       	ldi	r24, 0x67	; 103
    506a:	9c e0       	ldi	r25, 0x0C	; 12
    506c:	95 83       	std	Z+5, r25	; 0x05
    506e:	84 83       	std	Z+4, r24	; 0x04
    5070:	87 e9       	ldi	r24, 0x97	; 151
    5072:	98 e0       	ldi	r25, 0x08	; 8
    5074:	41 c1       	rjmp	.+642    	; 0x52f8 <IFTSendMessage+0x55e>
	      uart_print(1, 0,strSend);
	      break;

	 case MSG_28://strCardID, FIP_ID
	      UpdateCardID();
    5076:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strCardID);
    507a:	ad b7       	in	r26, 0x3d	; 61
    507c:	be b7       	in	r27, 0x3e	; 62
    507e:	18 97       	sbiw	r26, 0x08	; 8
    5080:	0f b6       	in	r0, 0x3f	; 63
    5082:	f8 94       	cli
    5084:	be bf       	out	0x3e, r27	; 62
    5086:	0f be       	out	0x3f, r0	; 63
    5088:	ad bf       	out	0x3d, r26	; 61
    508a:	ed b7       	in	r30, 0x3d	; 61
    508c:	fe b7       	in	r31, 0x3e	; 62
    508e:	31 96       	adiw	r30, 0x01	; 1
    5090:	12 96       	adiw	r26, 0x02	; 2
    5092:	1c 93       	st	X, r17
    5094:	0e 93       	st	-X, r16
    5096:	11 97       	sbiw	r26, 0x01	; 1
    5098:	83 e0       	ldi	r24, 0x03	; 3
    509a:	93 e2       	ldi	r25, 0x23	; 35
    509c:	93 83       	std	Z+3, r25	; 0x03
    509e:	82 83       	std	Z+2, r24	; 0x02
    50a0:	87 e9       	ldi	r24, 0x97	; 151
    50a2:	98 e0       	ldi	r25, 0x08	; 8
    50a4:	95 83       	std	Z+5, r25	; 0x05
    50a6:	84 83       	std	Z+4, r24	; 0x04
    50a8:	87 e6       	ldi	r24, 0x67	; 103
    50aa:	9c e0       	ldi	r25, 0x0C	; 12
    50ac:	25 c1       	rjmp	.+586    	; 0x52f8 <IFTSendMessage+0x55e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_32://Change MOP
	      UpdateCardID();
    50ae:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strPaymentType);
    50b2:	ad b7       	in	r26, 0x3d	; 61
    50b4:	be b7       	in	r27, 0x3e	; 62
    50b6:	18 97       	sbiw	r26, 0x08	; 8
    50b8:	0f b6       	in	r0, 0x3f	; 63
    50ba:	f8 94       	cli
    50bc:	be bf       	out	0x3e, r27	; 62
    50be:	0f be       	out	0x3f, r0	; 63
    50c0:	ad bf       	out	0x3d, r26	; 61
    50c2:	ed b7       	in	r30, 0x3d	; 61
    50c4:	fe b7       	in	r31, 0x3e	; 62
    50c6:	31 96       	adiw	r30, 0x01	; 1
    50c8:	12 96       	adiw	r26, 0x02	; 2
    50ca:	1c 93       	st	X, r17
    50cc:	0e 93       	st	-X, r16
    50ce:	11 97       	sbiw	r26, 0x01	; 1
    50d0:	8e ef       	ldi	r24, 0xFE	; 254
    50d2:	92 e2       	ldi	r25, 0x22	; 34
    50d4:	93 83       	std	Z+3, r25	; 0x03
    50d6:	82 83       	std	Z+2, r24	; 0x02
    50d8:	87 e9       	ldi	r24, 0x97	; 151
    50da:	98 e0       	ldi	r25, 0x08	; 8
    50dc:	95 83       	std	Z+5, r25	; 0x05
    50de:	84 83       	std	Z+4, r24	; 0x04
    50e0:	8e e2       	ldi	r24, 0x2E	; 46
    50e2:	98 e0       	ldi	r25, 0x08	; 8
    50e4:	97 83       	std	Z+7, r25	; 0x07
    50e6:	86 83       	std	Z+6, r24	; 0x06
    50e8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      uart_print(1,0,strSend);
    50ec:	8d b7       	in	r24, 0x3d	; 61
    50ee:	9e b7       	in	r25, 0x3e	; 62
    50f0:	08 96       	adiw	r24, 0x08	; 8
    50f2:	0f b6       	in	r0, 0x3f	; 63
    50f4:	f8 94       	cli
    50f6:	9e bf       	out	0x3e, r25	; 62
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	8d bf       	out	0x3d, r24	; 61
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	a8 01       	movw	r20, r16
    5102:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef1,strRef2);
    5106:	ad b7       	in	r26, 0x3d	; 61
    5108:	be b7       	in	r27, 0x3e	; 62
    510a:	18 97       	sbiw	r26, 0x08	; 8
    510c:	0f b6       	in	r0, 0x3f	; 63
    510e:	f8 94       	cli
    5110:	be bf       	out	0x3e, r27	; 62
    5112:	0f be       	out	0x3f, r0	; 63
    5114:	ad bf       	out	0x3d, r26	; 61
    5116:	ed b7       	in	r30, 0x3d	; 61
    5118:	fe b7       	in	r31, 0x3e	; 62
    511a:	31 96       	adiw	r30, 0x01	; 1
    511c:	12 96       	adiw	r26, 0x02	; 2
    511e:	1c 93       	st	X, r17
    5120:	0e 93       	st	-X, r16
    5122:	11 97       	sbiw	r26, 0x01	; 1
    5124:	89 ef       	ldi	r24, 0xF9	; 249
    5126:	92 e2       	ldi	r25, 0x22	; 34
    5128:	93 83       	std	Z+3, r25	; 0x03
    512a:	82 83       	std	Z+2, r24	; 0x02
    512c:	8c e6       	ldi	r24, 0x6C	; 108
    512e:	9d e0       	ldi	r25, 0x0D	; 13
    5130:	95 83       	std	Z+5, r25	; 0x05
    5132:	84 83       	std	Z+4, r24	; 0x04
    5134:	8c e7       	ldi	r24, 0x7C	; 124
    5136:	9c e0       	ldi	r25, 0x0C	; 12
    5138:	97 83       	std	Z+7, r25	; 0x07
    513a:	86 83       	std	Z+6, r24	; 0x06
    513c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  uart_print(1,0,strSend);
    5140:	8d b7       	in	r24, 0x3d	; 61
    5142:	9e b7       	in	r25, 0x3e	; 62
    5144:	08 96       	adiw	r24, 0x08	; 8
    5146:	0f b6       	in	r0, 0x3f	; 63
    5148:	f8 94       	cli
    514a:	9e bf       	out	0x3e, r25	; 62
    514c:	0f be       	out	0x3f, r0	; 63
    514e:	8d bf       	out	0x3d, r24	; 61
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	60 e0       	ldi	r22, 0x00	; 0
    5154:	a8 01       	movw	r20, r16
    5156:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    515a:	ad b7       	in	r26, 0x3d	; 61
    515c:	be b7       	in	r27, 0x3e	; 62
    515e:	18 97       	sbiw	r26, 0x08	; 8
    5160:	0f b6       	in	r0, 0x3f	; 63
    5162:	f8 94       	cli
    5164:	be bf       	out	0x3e, r27	; 62
    5166:	0f be       	out	0x3f, r0	; 63
    5168:	ad bf       	out	0x3d, r26	; 61
    516a:	ed b7       	in	r30, 0x3d	; 61
    516c:	fe b7       	in	r31, 0x3e	; 62
    516e:	31 96       	adiw	r30, 0x01	; 1
    5170:	12 96       	adiw	r26, 0x02	; 2
    5172:	1c 93       	st	X, r17
    5174:	0e 93       	st	-X, r16
    5176:	11 97       	sbiw	r26, 0x01	; 1
    5178:	84 ef       	ldi	r24, 0xF4	; 244
    517a:	92 e2       	ldi	r25, 0x22	; 34
    517c:	93 83       	std	Z+3, r25	; 0x03
    517e:	82 83       	std	Z+2, r24	; 0x02
    5180:	8b e5       	ldi	r24, 0x5B	; 91
    5182:	99 e0       	ldi	r25, 0x09	; 9
    5184:	95 83       	std	Z+5, r25	; 0x05
    5186:	84 83       	std	Z+4, r24	; 0x04
    5188:	83 e8       	ldi	r24, 0x83	; 131
    518a:	94 e0       	ldi	r25, 0x04	; 4
    518c:	b5 c0       	rjmp	.+362    	; 0x52f8 <IFTSendMessage+0x55e>
		  uart_print(1,0,strSend);
	      break;

	 case MSG_56://strCardID, FIP_ID
	      UpdateCardID();
    518e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    5192:	00 d0       	rcall	.+0      	; 0x5194 <IFTSendMessage+0x3fa>
    5194:	00 d0       	rcall	.+0      	; 0x5196 <IFTSendMessage+0x3fc>
    5196:	00 d0       	rcall	.+0      	; 0x5198 <IFTSendMessage+0x3fe>
    5198:	ed b7       	in	r30, 0x3d	; 61
    519a:	fe b7       	in	r31, 0x3e	; 62
    519c:	31 96       	adiw	r30, 0x01	; 1
    519e:	ad b7       	in	r26, 0x3d	; 61
    51a0:	be b7       	in	r27, 0x3e	; 62
    51a2:	12 96       	adiw	r26, 0x02	; 2
    51a4:	1c 93       	st	X, r17
    51a6:	0e 93       	st	-X, r16
    51a8:	11 97       	sbiw	r26, 0x01	; 1
    51aa:	81 ef       	ldi	r24, 0xF1	; 241
    51ac:	92 e2       	ldi	r25, 0x22	; 34
    51ae:	93 83       	std	Z+3, r25	; 0x03
    51b0:	82 83       	std	Z+2, r24	; 0x02
    51b2:	87 e6       	ldi	r24, 0x67	; 103
    51b4:	9c e0       	ldi	r25, 0x0C	; 12
    51b6:	11 c1       	rjmp	.+546    	; 0x53da <IFTSendMessage+0x640>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_58://Request Local Account Transaction
	      UpdateCardID();
    51b8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UpdateCardID>
		  AddSpaceLead(strBalanceValue,13);
    51bc:	2d ef       	ldi	r18, 0xFD	; 253
    51be:	e2 2e       	mov	r14, r18
    51c0:	2c e0       	ldi	r18, 0x0C	; 12
    51c2:	f2 2e       	mov	r15, r18
    51c4:	c7 01       	movw	r24, r14
    51c6:	6d e0       	ldi	r22, 0x0D	; 13
    51c8:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <AddSpaceLead>
		  AddSpaceLead(strOdometer,10);
    51cc:	91 ea       	ldi	r25, 0xA1	; 161
    51ce:	c9 2e       	mov	r12, r25
    51d0:	94 e0       	ldi	r25, 0x04	; 4
    51d2:	d9 2e       	mov	r13, r25
    51d4:	c6 01       	movw	r24, r12
    51d6:	6a e0       	ldi	r22, 0x0A	; 10
    51d8:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <AddSpaceLead>
		  CardType=0;
    51dc:	10 92 67 04 	sts	0x0467, r1
		  sprintf_P(strSend,PSTR("%s%s%d"),strCardID,strFIP_ID,NozzleID);
    51e0:	ad b7       	in	r26, 0x3d	; 61
    51e2:	be b7       	in	r27, 0x3e	; 62
    51e4:	1a 97       	sbiw	r26, 0x0a	; 10
    51e6:	0f b6       	in	r0, 0x3f	; 63
    51e8:	f8 94       	cli
    51ea:	be bf       	out	0x3e, r27	; 62
    51ec:	0f be       	out	0x3f, r0	; 63
    51ee:	ad bf       	out	0x3d, r26	; 61
    51f0:	ed b7       	in	r30, 0x3d	; 61
    51f2:	fe b7       	in	r31, 0x3e	; 62
    51f4:	31 96       	adiw	r30, 0x01	; 1
    51f6:	12 96       	adiw	r26, 0x02	; 2
    51f8:	1c 93       	st	X, r17
    51fa:	0e 93       	st	-X, r16
    51fc:	11 97       	sbiw	r26, 0x01	; 1
    51fe:	8a ee       	ldi	r24, 0xEA	; 234
    5200:	92 e2       	ldi	r25, 0x22	; 34
    5202:	93 83       	std	Z+3, r25	; 0x03
    5204:	82 83       	std	Z+2, r24	; 0x02
    5206:	87 e6       	ldi	r24, 0x67	; 103
    5208:	9c e0       	ldi	r25, 0x0C	; 12
    520a:	95 83       	std	Z+5, r25	; 0x05
    520c:	84 83       	std	Z+4, r24	; 0x04
    520e:	87 e9       	ldi	r24, 0x97	; 151
    5210:	98 e0       	ldi	r25, 0x08	; 8
    5212:	97 83       	std	Z+7, r25	; 0x07
    5214:	86 83       	std	Z+6, r24	; 0x06
    5216:	80 91 4b 08 	lds	r24, 0x084B
    521a:	80 87       	std	Z+8, r24	; 0x08
    521c:	11 86       	std	Z+9, r1	; 0x09
    521e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  uart_print(1,0,strSend);
    5222:	8d b7       	in	r24, 0x3d	; 61
    5224:	9e b7       	in	r25, 0x3e	; 62
    5226:	0a 96       	adiw	r24, 0x0a	; 10
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	f8 94       	cli
    522c:	9e bf       	out	0x3e, r25	; 62
    522e:	0f be       	out	0x3f, r0	; 63
    5230:	8d bf       	out	0x3d, r24	; 61
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	60 e0       	ldi	r22, 0x00	; 0
    5236:	a8 01       	movw	r20, r16
    5238:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%d"),strBalanceType,strBalanceValue,CardType);
    523c:	ad b7       	in	r26, 0x3d	; 61
    523e:	be b7       	in	r27, 0x3e	; 62
    5240:	1a 97       	sbiw	r26, 0x0a	; 10
    5242:	0f b6       	in	r0, 0x3f	; 63
    5244:	f8 94       	cli
    5246:	be bf       	out	0x3e, r27	; 62
    5248:	0f be       	out	0x3f, r0	; 63
    524a:	ad bf       	out	0x3d, r26	; 61
    524c:	ed b7       	in	r30, 0x3d	; 61
    524e:	fe b7       	in	r31, 0x3e	; 62
    5250:	31 96       	adiw	r30, 0x01	; 1
    5252:	12 96       	adiw	r26, 0x02	; 2
    5254:	1c 93       	st	X, r17
    5256:	0e 93       	st	-X, r16
    5258:	11 97       	sbiw	r26, 0x01	; 1
    525a:	83 ee       	ldi	r24, 0xE3	; 227
    525c:	92 e2       	ldi	r25, 0x22	; 34
    525e:	93 83       	std	Z+3, r25	; 0x03
    5260:	82 83       	std	Z+2, r24	; 0x02
    5262:	81 e8       	ldi	r24, 0x81	; 129
    5264:	94 e0       	ldi	r25, 0x04	; 4
    5266:	95 83       	std	Z+5, r25	; 0x05
    5268:	84 83       	std	Z+4, r24	; 0x04
    526a:	f7 82       	std	Z+7, r15	; 0x07
    526c:	e6 82       	std	Z+6, r14	; 0x06
    526e:	80 91 67 04 	lds	r24, 0x0467
    5272:	80 87       	std	Z+8, r24	; 0x08
    5274:	11 86       	std	Z+9, r1	; 0x09
    5276:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  uart_print(1,0,strSend);
    527a:	8d b7       	in	r24, 0x3d	; 61
    527c:	9e b7       	in	r25, 0x3e	; 62
    527e:	0a 96       	adiw	r24, 0x0a	; 10
    5280:	0f b6       	in	r0, 0x3f	; 63
    5282:	f8 94       	cli
    5284:	9e bf       	out	0x3e, r25	; 62
    5286:	0f be       	out	0x3f, r0	; 63
    5288:	8d bf       	out	0x3d, r24	; 61
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	60 e0       	ldi	r22, 0x00	; 0
    528e:	a8 01       	movw	r20, r16
    5290:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
		  uart_printf(1,0,PSTR("F0000000E123456FFFFF"));
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	60 e0       	ldi	r22, 0x00	; 0
    5298:	4e ec       	ldi	r20, 0xCE	; 206
    529a:	52 e2       	ldi	r21, 0x22	; 34
    529c:	0e 94 3a a4 	call	0x14874	; 0x14874 <uart_printf>
		  sprintf_P(strSend,PSTR("%s"),strOdometer);
    52a0:	00 d0       	rcall	.+0      	; 0x52a2 <IFTSendMessage+0x508>
    52a2:	00 d0       	rcall	.+0      	; 0x52a4 <IFTSendMessage+0x50a>
    52a4:	00 d0       	rcall	.+0      	; 0x52a6 <IFTSendMessage+0x50c>
    52a6:	ed b7       	in	r30, 0x3d	; 61
    52a8:	fe b7       	in	r31, 0x3e	; 62
    52aa:	31 96       	adiw	r30, 0x01	; 1
    52ac:	ad b7       	in	r26, 0x3d	; 61
    52ae:	be b7       	in	r27, 0x3e	; 62
    52b0:	12 96       	adiw	r26, 0x02	; 2
    52b2:	1c 93       	st	X, r17
    52b4:	0e 93       	st	-X, r16
    52b6:	11 97       	sbiw	r26, 0x01	; 1
    52b8:	8b ec       	ldi	r24, 0xCB	; 203
    52ba:	92 e2       	ldi	r25, 0x22	; 34
    52bc:	93 83       	std	Z+3, r25	; 0x03
    52be:	82 83       	std	Z+2, r24	; 0x02
    52c0:	d5 82       	std	Z+5, r13	; 0x05
    52c2:	c4 82       	std	Z+4, r12	; 0x04
    52c4:	8c c0       	rjmp	.+280    	; 0x53de <IFTSendMessage+0x644>
		  uart_print(1,0,strSend);
		  break;
	 case MSG_90://Request EDC
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strRef1);
    52c6:	ad b7       	in	r26, 0x3d	; 61
    52c8:	be b7       	in	r27, 0x3e	; 62
    52ca:	18 97       	sbiw	r26, 0x08	; 8
    52cc:	0f b6       	in	r0, 0x3f	; 63
    52ce:	f8 94       	cli
    52d0:	be bf       	out	0x3e, r27	; 62
    52d2:	0f be       	out	0x3f, r0	; 63
    52d4:	ad bf       	out	0x3d, r26	; 61
    52d6:	ed b7       	in	r30, 0x3d	; 61
    52d8:	fe b7       	in	r31, 0x3e	; 62
    52da:	31 96       	adiw	r30, 0x01	; 1
    52dc:	12 96       	adiw	r26, 0x02	; 2
    52de:	1c 93       	st	X, r17
    52e0:	0e 93       	st	-X, r16
    52e2:	11 97       	sbiw	r26, 0x01	; 1
    52e4:	86 ec       	ldi	r24, 0xC6	; 198
    52e6:	92 e2       	ldi	r25, 0x22	; 34
    52e8:	93 83       	std	Z+3, r25	; 0x03
    52ea:	82 83       	std	Z+2, r24	; 0x02
    52ec:	87 e9       	ldi	r24, 0x97	; 151
    52ee:	98 e0       	ldi	r25, 0x08	; 8
    52f0:	95 83       	std	Z+5, r25	; 0x05
    52f2:	84 83       	std	Z+4, r24	; 0x04
    52f4:	8c e6       	ldi	r24, 0x6C	; 108
    52f6:	9d e0       	ldi	r25, 0x0D	; 13
    52f8:	97 83       	std	Z+7, r25	; 0x07
    52fa:	86 83       	std	Z+6, r24	; 0x06
    52fc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      uart_print(1, 0,strSend);
    5300:	8d b7       	in	r24, 0x3d	; 61
    5302:	9e b7       	in	r25, 0x3e	; 62
    5304:	08 96       	adiw	r24, 0x08	; 8
    5306:	70 c0       	rjmp	.+224    	; 0x53e8 <IFTSendMessage+0x64e>
	      break;
	 case MSG_92://EDC Approval
		  sprintf_P(strSend,PSTR("%s%s%s%s"),strTranNo,strFIP_ID,strCardType,strCardID);
    5308:	ad b7       	in	r26, 0x3d	; 61
    530a:	be b7       	in	r27, 0x3e	; 62
    530c:	1c 97       	sbiw	r26, 0x0c	; 12
    530e:	0f b6       	in	r0, 0x3f	; 63
    5310:	f8 94       	cli
    5312:	be bf       	out	0x3e, r27	; 62
    5314:	0f be       	out	0x3f, r0	; 63
    5316:	ad bf       	out	0x3d, r26	; 61
    5318:	ed b7       	in	r30, 0x3d	; 61
    531a:	fe b7       	in	r31, 0x3e	; 62
    531c:	31 96       	adiw	r30, 0x01	; 1
    531e:	12 96       	adiw	r26, 0x02	; 2
    5320:	1c 93       	st	X, r17
    5322:	0e 93       	st	-X, r16
    5324:	11 97       	sbiw	r26, 0x01	; 1
    5326:	8d eb       	ldi	r24, 0xBD	; 189
    5328:	92 e2       	ldi	r25, 0x22	; 34
    532a:	93 83       	std	Z+3, r25	; 0x03
    532c:	82 83       	std	Z+2, r24	; 0x02
    532e:	85 e6       	ldi	r24, 0x65	; 101
    5330:	9d e0       	ldi	r25, 0x0D	; 13
    5332:	95 83       	std	Z+5, r25	; 0x05
    5334:	84 83       	std	Z+4, r24	; 0x04
    5336:	87 e9       	ldi	r24, 0x97	; 151
    5338:	98 e0       	ldi	r25, 0x08	; 8
    533a:	97 83       	std	Z+7, r25	; 0x07
    533c:	86 83       	std	Z+6, r24	; 0x06
    533e:	81 e8       	ldi	r24, 0x81	; 129
    5340:	9d e0       	ldi	r25, 0x0D	; 13
    5342:	91 87       	std	Z+9, r25	; 0x09
    5344:	80 87       	std	Z+8, r24	; 0x08
    5346:	87 e6       	ldi	r24, 0x67	; 103
    5348:	9c e0       	ldi	r25, 0x0C	; 12
    534a:	93 87       	std	Z+11, r25	; 0x0b
    534c:	82 87       	std	Z+10, r24	; 0x0a
    534e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      uart_print(1,0,strSend);	    
    5352:	8d b7       	in	r24, 0x3d	; 61
    5354:	9e b7       	in	r25, 0x3e	; 62
    5356:	0c 96       	adiw	r24, 0x0c	; 12
    5358:	0f b6       	in	r0, 0x3f	; 63
    535a:	f8 94       	cli
    535c:	9e bf       	out	0x3e, r25	; 62
    535e:	0f be       	out	0x3f, r0	; 63
    5360:	8d bf       	out	0x3d, r24	; 61
    5362:	81 e0       	ldi	r24, 0x01	; 1
    5364:	60 e0       	ldi	r22, 0x00	; 0
    5366:	a8 01       	movw	r20, r16
    5368:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%s"),strApprovalCode,strInvoiceNumber,strDateTime);
    536c:	ad b7       	in	r26, 0x3d	; 61
    536e:	be b7       	in	r27, 0x3e	; 62
    5370:	1a 97       	sbiw	r26, 0x0a	; 10
    5372:	0f b6       	in	r0, 0x3f	; 63
    5374:	f8 94       	cli
    5376:	be bf       	out	0x3e, r27	; 62
    5378:	0f be       	out	0x3f, r0	; 63
    537a:	ad bf       	out	0x3d, r26	; 61
    537c:	ed b7       	in	r30, 0x3d	; 61
    537e:	fe b7       	in	r31, 0x3e	; 62
    5380:	31 96       	adiw	r30, 0x01	; 1
    5382:	12 96       	adiw	r26, 0x02	; 2
    5384:	1c 93       	st	X, r17
    5386:	0e 93       	st	-X, r16
    5388:	11 97       	sbiw	r26, 0x01	; 1
    538a:	86 eb       	ldi	r24, 0xB6	; 182
    538c:	92 e2       	ldi	r25, 0x22	; 34
    538e:	93 83       	std	Z+3, r25	; 0x03
    5390:	82 83       	std	Z+2, r24	; 0x02
    5392:	8e ec       	ldi	r24, 0xCE	; 206
    5394:	98 e0       	ldi	r25, 0x08	; 8
    5396:	95 83       	std	Z+5, r25	; 0x05
    5398:	84 83       	std	Z+4, r24	; 0x04
    539a:	81 e3       	ldi	r24, 0x31	; 49
    539c:	98 e0       	ldi	r25, 0x08	; 8
    539e:	97 83       	std	Z+7, r25	; 0x07
    53a0:	86 83       	std	Z+6, r24	; 0x06
    53a2:	8d e9       	ldi	r24, 0x9D	; 157
    53a4:	9c e0       	ldi	r25, 0x0C	; 12
    53a6:	91 87       	std	Z+9, r25	; 0x09
    53a8:	80 87       	std	Z+8, r24	; 0x08
    53aa:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      uart_print(1,0,strSend);
    53ae:	8d b7       	in	r24, 0x3d	; 61
    53b0:	9e b7       	in	r25, 0x3e	; 62
    53b2:	0a 96       	adiw	r24, 0x0a	; 10
    53b4:	19 c0       	rjmp	.+50     	; 0x53e8 <IFTSendMessage+0x64e>
	      break;	 
	 case MSG_98://Request Transaction Info
	      sprintf_P(strSend,PSTR("%s"),strFIP_ID);
    53b6:	00 d0       	rcall	.+0      	; 0x53b8 <IFTSendMessage+0x61e>
    53b8:	00 d0       	rcall	.+0      	; 0x53ba <IFTSendMessage+0x620>
    53ba:	00 d0       	rcall	.+0      	; 0x53bc <IFTSendMessage+0x622>
    53bc:	ed b7       	in	r30, 0x3d	; 61
    53be:	fe b7       	in	r31, 0x3e	; 62
    53c0:	31 96       	adiw	r30, 0x01	; 1
    53c2:	ad b7       	in	r26, 0x3d	; 61
    53c4:	be b7       	in	r27, 0x3e	; 62
    53c6:	12 96       	adiw	r26, 0x02	; 2
    53c8:	1c 93       	st	X, r17
    53ca:	0e 93       	st	-X, r16
    53cc:	11 97       	sbiw	r26, 0x01	; 1
    53ce:	83 eb       	ldi	r24, 0xB3	; 179
    53d0:	92 e2       	ldi	r25, 0x22	; 34
    53d2:	93 83       	std	Z+3, r25	; 0x03
    53d4:	82 83       	std	Z+2, r24	; 0x02
    53d6:	87 e9       	ldi	r24, 0x97	; 151
    53d8:	98 e0       	ldi	r25, 0x08	; 8
    53da:	95 83       	std	Z+5, r25	; 0x05
    53dc:	84 83       	std	Z+4, r24	; 0x04
    53de:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      uart_print(1, 0,strSend);
    53e2:	8d b7       	in	r24, 0x3d	; 61
    53e4:	9e b7       	in	r25, 0x3e	; 62
    53e6:	06 96       	adiw	r24, 0x06	; 6
    53e8:	0f b6       	in	r0, 0x3f	; 63
    53ea:	f8 94       	cli
    53ec:	9e bf       	out	0x3e, r25	; 62
    53ee:	0f be       	out	0x3f, r0	; 63
    53f0:	8d bf       	out	0x3d, r24	; 61
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	60 e0       	ldi	r22, 0x00	; 0
    53f6:	a8 01       	movw	r20, r16
    53f8:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
	      break;

	 }     
     //[Checksum]
	 uart_printf(1,0,PSTR("F968CFFB"));
    53fc:	81 e0       	ldi	r24, 0x01	; 1
    53fe:	60 e0       	ldi	r22, 0x00	; 0
    5400:	4a ea       	ldi	r20, 0xAA	; 170
    5402:	52 e2       	ldi	r21, 0x22	; 34
    5404:	0e 94 3a a4 	call	0x14874	; 0x14874 <uart_printf>
	 //ETX
	 uart(1, 1,0x02);
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	61 e0       	ldi	r22, 0x01	; 1
    540c:	42 e0       	ldi	r20, 0x02	; 2
    540e:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
}
    5412:	cf 5b       	subi	r28, 0xBF	; 191
    5414:	df 4f       	sbci	r29, 0xFF	; 255
    5416:	0f b6       	in	r0, 0x3f	; 63
    5418:	f8 94       	cli
    541a:	de bf       	out	0x3e, r29	; 62
    541c:	0f be       	out	0x3f, r0	; 63
    541e:	cd bf       	out	0x3d, r28	; 61
    5420:	cf 91       	pop	r28
    5422:	df 91       	pop	r29
    5424:	1f 91       	pop	r17
    5426:	0f 91       	pop	r16
    5428:	ff 90       	pop	r15
    542a:	ef 90       	pop	r14
    542c:	df 90       	pop	r13
    542e:	cf 90       	pop	r12
    5430:	08 95       	ret

00005432 <sendMessage94>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_94);
    5432:	84 e9       	ldi	r24, 0x94	; 148
    5434:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5438:	08 95       	ret

0000543a <sendMessage92>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_92);
    543a:	82 e9       	ldi	r24, 0x92	; 146
    543c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5440:	08 95       	ret

00005442 <sendMessage90>:
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("E9445512"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_90);
    5442:	80 e9       	ldi	r24, 0x90	; 144
    5444:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5448:	08 95       	ret

0000544a <sendMessage58>:
	CardType=0;
	sprintf_P(strSend,PSTR("%dF0000000E123456FFFFF%sE9445512"),CardType,strOdometer);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_58);
    544a:	88 e5       	ldi	r24, 0x58	; 88
    544c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5450:	08 95       	ret

00005452 <sendMessage56>:
    uart_print(1, 0,strSend);	

	uart_printf(1,0,PSTR("AF968CFFB"));
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_56);
    5452:	86 e5       	ldi	r24, 0x56	; 86
    5454:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5458:	08 95       	ret

0000545a <sendMessage32>:
	sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("F968CFFB"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/IFTSendMessage(MSG_32);
    545a:	82 e3       	ldi	r24, 0x32	; 50
    545c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5460:	08 95       	ret

00005462 <sendMessage28>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strFIP_ID,strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_28);
    5462:	88 e2       	ldi	r24, 0x28	; 40
    5464:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5468:	08 95       	ret

0000546a <sendMessage24>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strCardID,strFIP_ID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_24);
    546a:	84 e2       	ldi	r24, 0x24	; 36
    546c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5470:	08 95       	ret

00005472 <sendMessage22>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%sF968CFFB"),strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_22);
    5472:	82 e2       	ldi	r24, 0x22	; 34
    5474:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5478:	08 95       	ret

0000547a <sendMessage10>:
	sprintf_P(strSend,PSTR("%s%s%s%s10F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	IsNewPacket=True;
	*/
	IsNewPacket=True;
    547a:	81 e0       	ldi	r24, 0x01	; 1
    547c:	80 93 66 02 	sts	0x0266, r24
	IFTSendMessage(MSG_10);
    5480:	80 e1       	ldi	r24, 0x10	; 16
    5482:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    5486:	08 95       	ret

00005488 <sendMessage04>:
	 UpdateServerIP();//ReadDestIP
	 //strTranNo = strReceiptNum
	 sprintf_P(strSend,PSTR("%s%s%s%s04%s1F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,strTranNo);
     uart_print(1, 0,strSend);
	 uart(1, 1,0x02);
	 */IFTSendMessage(MSG_04);
    5488:	84 e0       	ldi	r24, 0x04	; 4
    548a:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
}
    548e:	08 95       	ret

00005490 <AddZeroLag>:
	 }
}

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
    5490:	fc 01       	movw	r30, r24
    5492:	01 90       	ld	r0, Z+
    5494:	00 20       	and	r0, r0
    5496:	e9 f7       	brne	.-6      	; 0x5492 <AddZeroLag+0x2>
    5498:	31 97       	sbiw	r30, 0x01	; 1
    549a:	e8 1b       	sub	r30, r24
    549c:	f9 0b       	sbc	r31, r25
  if (Length<Size){   
    549e:	e6 17       	cp	r30, r22
    54a0:	60 f4       	brcc	.+24     	; 0x54ba <AddZeroLag+0x2a>
     for(i=Length;i<Size;i++){
	    String[i]='0';
    54a2:	20 e3       	ldi	r18, 0x30	; 48
    54a4:	dc 01       	movw	r26, r24
    54a6:	ae 0f       	add	r26, r30
    54a8:	b1 1d       	adc	r27, r1
    54aa:	2c 93       	st	X, r18

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    54ac:	ef 5f       	subi	r30, 0xFF	; 255
    54ae:	e6 17       	cp	r30, r22
    54b0:	c8 f3       	brcs	.-14     	; 0x54a4 <AddZeroLag+0x14>
	    String[i]='0';
	 }String[Size]=0;
    54b2:	86 0f       	add	r24, r22
    54b4:	91 1d       	adc	r25, r1
    54b6:	fc 01       	movw	r30, r24
    54b8:	10 82       	st	Z, r1
    54ba:	08 95       	ret

000054bc <AddZeroLead>:
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    54bc:	9f 92       	push	r9
    54be:	af 92       	push	r10
    54c0:	bf 92       	push	r11
    54c2:	cf 92       	push	r12
    54c4:	df 92       	push	r13
    54c6:	ef 92       	push	r14
    54c8:	ff 92       	push	r15
    54ca:	0f 93       	push	r16
    54cc:	1f 93       	push	r17
    54ce:	df 93       	push	r29
    54d0:	cf 93       	push	r28
    54d2:	cd b7       	in	r28, 0x3d	; 61
    54d4:	de b7       	in	r29, 0x3e	; 62
    54d6:	6e 97       	sbiw	r28, 0x1e	; 30
    54d8:	0f b6       	in	r0, 0x3f	; 63
    54da:	f8 94       	cli
    54dc:	de bf       	out	0x3e, r29	; 62
    54de:	0f be       	out	0x3f, r0	; 63
    54e0:	cd bf       	out	0x3d, r28	; 61
     char i,Length,strAdded[30];
     Length=strlen(String);
    54e2:	dc 01       	movw	r26, r24
    54e4:	0d 90       	ld	r0, X+
    54e6:	00 20       	and	r0, r0
    54e8:	e9 f7       	brne	.-6      	; 0x54e4 <AddZeroLead+0x28>
    54ea:	11 97       	sbiw	r26, 0x01	; 1
    54ec:	4a 2f       	mov	r20, r26
    54ee:	48 1b       	sub	r20, r24

	 if (Size>Length){
    54f0:	46 17       	cp	r20, r22
    54f2:	d8 f5       	brcc	.+118    	; 0x556a <AddZeroLead+0xae>
    54f4:	fe 01       	movw	r30, r28
    54f6:	31 96       	adiw	r30, 0x01	; 1
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    54f8:	c6 2e       	mov	r12, r22
    54fa:	dd 24       	eor	r13, r13
    54fc:	7f 01       	movw	r14, r30
    54fe:	ec 0c       	add	r14, r12
    5500:	fd 1c       	adc	r15, r13
    5502:	df 01       	movw	r26, r30
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
    5504:	20 e3       	ldi	r18, 0x30	; 48
    5506:	01 c0       	rjmp	.+2      	; 0x550a <AddZeroLead+0x4e>
    5508:	2d 93       	st	X+, r18
void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    550a:	ae 15       	cp	r26, r14
    550c:	bf 05       	cpc	r27, r15
    550e:	e1 f7       	brne	.-8      	; 0x5508 <AddZeroLead+0x4c>
	         strAdded[i]='0';
	     }strAdded[Size]=0;
    5510:	26 2f       	mov	r18, r22
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	8e 01       	movw	r16, r28
    5516:	0f 5f       	subi	r16, 0xFF	; 255
    5518:	1f 4f       	sbci	r17, 0xFF	; 255
    551a:	d8 01       	movw	r26, r16
    551c:	a2 0f       	add	r26, r18
    551e:	b3 1f       	adc	r27, r19
    5520:	1c 92       	st	X, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5522:	76 2f       	mov	r23, r22
    5524:	74 1b       	sub	r23, r20
	         strAdded[i]=String[i-(Size-Length)];
    5526:	50 e0       	ldi	r21, 0x00	; 0
    5528:	42 1b       	sub	r20, r18
    552a:	53 0b       	sbc	r21, r19
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    552c:	0d c0       	rjmp	.+26     	; 0x5548 <AddZeroLead+0x8c>
	         strAdded[i]=String[i-(Size-Length)];
    552e:	a7 2f       	mov	r26, r23
    5530:	b0 e0       	ldi	r27, 0x00	; 0
    5532:	58 01       	movw	r10, r16
    5534:	aa 0e       	add	r10, r26
    5536:	bb 1e       	adc	r11, r27
    5538:	a8 0f       	add	r26, r24
    553a:	b9 1f       	adc	r27, r25
    553c:	a4 0f       	add	r26, r20
    553e:	b5 1f       	adc	r27, r21
    5540:	9c 90       	ld	r9, X
    5542:	d5 01       	movw	r26, r10
    5544:	9c 92       	st	X, r9
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5546:	7f 5f       	subi	r23, 0xFF	; 255
    5548:	76 17       	cp	r23, r22
    554a:	88 f3       	brcs	.-30     	; 0x552e <AddZeroLead+0x72>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    554c:	d8 01       	movw	r26, r16
    554e:	a2 0f       	add	r26, r18
    5550:	b3 1f       	adc	r27, r19
    5552:	1c 92       	st	X, r1
    5554:	dc 01       	movw	r26, r24
	     //Zeroed
         for(i=0;i<Size;i++){
    5556:	02 c0       	rjmp	.+4      	; 0x555c <AddZeroLead+0xa0>
	         String[i]=strAdded[i];
    5558:	21 91       	ld	r18, Z+
    555a:	2d 93       	st	X+, r18
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Zeroed
         for(i=0;i<Size;i++){
    555c:	ee 15       	cp	r30, r14
    555e:	ff 05       	cpc	r31, r15
    5560:	d9 f7       	brne	.-10     	; 0x5558 <AddZeroLead+0x9c>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    5562:	8c 0d       	add	r24, r12
    5564:	9d 1d       	adc	r25, r13
    5566:	fc 01       	movw	r30, r24
    5568:	10 82       	st	Z, r1
	 }
}
    556a:	6e 96       	adiw	r28, 0x1e	; 30
    556c:	0f b6       	in	r0, 0x3f	; 63
    556e:	f8 94       	cli
    5570:	de bf       	out	0x3e, r29	; 62
    5572:	0f be       	out	0x3f, r0	; 63
    5574:	cd bf       	out	0x3d, r28	; 61
    5576:	cf 91       	pop	r28
    5578:	df 91       	pop	r29
    557a:	1f 91       	pop	r17
    557c:	0f 91       	pop	r16
    557e:	ff 90       	pop	r15
    5580:	ef 90       	pop	r14
    5582:	df 90       	pop	r13
    5584:	cf 90       	pop	r12
    5586:	bf 90       	pop	r11
    5588:	af 90       	pop	r10
    558a:	9f 90       	pop	r9
    558c:	08 95       	ret

0000558e <FormatDecimal>:

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    558e:	cf 92       	push	r12
    5590:	df 92       	push	r13
    5592:	ef 92       	push	r14
    5594:	ff 92       	push	r15
    5596:	0f 93       	push	r16
    5598:	1f 93       	push	r17
    559a:	df 93       	push	r29
    559c:	cf 93       	push	r28
    559e:	cd b7       	in	r28, 0x3d	; 61
    55a0:	de b7       	in	r29, 0x3e	; 62
    55a2:	65 97       	sbiw	r28, 0x15	; 21
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	cd bf       	out	0x3d, r28	; 61
    55ae:	8c 01       	movw	r16, r24
     char i,iPos,CommaPos,Length=0;                 //1->0,01 
	 char strDecimalFormated[20];
	 char DecPointMark;
     if (DecimalCfg>0){    
    55b0:	66 23       	and	r22, r22
    55b2:	09 f4       	brne	.+2      	; 0x55b6 <FormatDecimal+0x28>
    55b4:	56 c0       	rjmp	.+172    	; 0x5662 <FormatDecimal+0xd4>
		 DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    55b6:	8e e3       	ldi	r24, 0x3E	; 62
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	6d 8b       	std	Y+21, r22	; 0x15
    55bc:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    55c0:	f8 2e       	mov	r15, r24
		 Length=strlen(strRawData);
    55c2:	d8 01       	movw	r26, r16
    55c4:	0d 90       	ld	r0, X+
    55c6:	00 20       	and	r0, r0
    55c8:	e9 f7       	brne	.-6      	; 0x55c4 <FormatDecimal+0x36>
    55ca:	11 97       	sbiw	r26, 0x01	; 1
    55cc:	a0 1b       	sub	r26, r16

		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
    55ce:	6d 89       	ldd	r22, Y+21	; 0x15
    55d0:	6a 17       	cp	r22, r26
    55d2:	d8 f5       	brcc	.+118    	; 0x564a <FormatDecimal+0xbc>
    55d4:	ba 2f       	mov	r27, r26
    55d6:	b6 1b       	sub	r27, r22
    55d8:	98 01       	movw	r18, r16
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    55da:	68 01       	movw	r12, r16
			 Length=strlen(strRawData);
			 CommaPos=1;
			 }

		 
		 iPos=0;
    55dc:	60 e0       	ldi	r22, 0x00	; 0
		 for(i=0;i<Length;i++){
    55de:	70 e0       	ldi	r23, 0x00	; 0
			 if (i==CommaPos){
				 strDecimalFormated[iPos]=DecPointMark;
    55e0:	ce 01       	movw	r24, r28
    55e2:	01 96       	adiw	r24, 0x01	; 1
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    55e4:	12 c0       	rjmp	.+36     	; 0x560a <FormatDecimal+0x7c>
			 if (i==CommaPos){
    55e6:	7b 17       	cp	r23, r27
    55e8:	31 f4       	brne	.+12     	; 0x55f6 <FormatDecimal+0x68>
				 strDecimalFormated[iPos]=DecPointMark;
    55ea:	ac 01       	movw	r20, r24
    55ec:	46 0f       	add	r20, r22
    55ee:	51 1d       	adc	r21, r1
    55f0:	fa 01       	movw	r30, r20
    55f2:	f0 82       	st	Z, r15
				 iPos++;
    55f4:	6f 5f       	subi	r22, 0xFF	; 255
			}
			strDecimalFormated[iPos]=strRawData[i];
    55f6:	f6 01       	movw	r30, r12
    55f8:	e1 90       	ld	r14, Z+
    55fa:	6f 01       	movw	r12, r30
    55fc:	ac 01       	movw	r20, r24
    55fe:	46 0f       	add	r20, r22
    5600:	51 1d       	adc	r21, r1
    5602:	fa 01       	movw	r30, r20
    5604:	e0 82       	st	Z, r14
			//strDecimalFormated[iPos+1]=0;
			iPos++;
    5606:	6f 5f       	subi	r22, 0xFF	; 255
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    5608:	7f 5f       	subi	r23, 0xFF	; 255
    560a:	7a 17       	cp	r23, r26
    560c:	60 f3       	brcs	.-40     	; 0x55e6 <FormatDecimal+0x58>
				 iPos++;
			}
			strDecimalFormated[iPos]=strRawData[i];
			//strDecimalFormated[iPos+1]=0;
			iPos++;
		 }strDecimalFormated[iPos]=0;
    560e:	fe 01       	movw	r30, r28
    5610:	31 96       	adiw	r30, 0x01	; 1
    5612:	df 01       	movw	r26, r30
    5614:	a6 0f       	add	r26, r22
    5616:	b1 1d       	adc	r27, r1
    5618:	1c 92       	st	X, r1
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
    561a:	df 01       	movw	r26, r30
    561c:	0d 90       	ld	r0, X+
    561e:	00 20       	and	r0, r0
    5620:	e9 f7       	brne	.-6      	; 0x561c <FormatDecimal+0x8e>
    5622:	11 97       	sbiw	r26, 0x01	; 1

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    5624:	ae 1b       	sub	r26, r30
    5626:	6a 2f       	mov	r22, r26
    5628:	70 e0       	ldi	r23, 0x00	; 0
    562a:	cf 01       	movw	r24, r30
    562c:	86 0f       	add	r24, r22
    562e:	97 1f       	adc	r25, r23
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    5630:	04 c0       	rjmp	.+8      	; 0x563a <FormatDecimal+0xac>
			 strRawData[i]=strDecimalFormated[i];
    5632:	41 91       	ld	r20, Z+
    5634:	d9 01       	movw	r26, r18
    5636:	4d 93       	st	X+, r20
    5638:	9d 01       	movw	r18, r26
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    563a:	e8 17       	cp	r30, r24
    563c:	f9 07       	cpc	r31, r25
    563e:	c9 f7       	brne	.-14     	; 0x5632 <FormatDecimal+0xa4>
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
    5640:	db 01       	movw	r26, r22
    5642:	a0 0f       	add	r26, r16
    5644:	b1 1f       	adc	r27, r17
    5646:	1c 92       	st	X, r1
    5648:	0c c0       	rjmp	.+24     	; 0x5662 <FormatDecimal+0xd4>
		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
		 else CommaPos=1;


		 if (Length<=DecimalCfg){// 123 -> 0123
			 AddZeroLead(strRawData,(DecimalCfg+1));
    564a:	6f 5f       	subi	r22, 0xFF	; 255
    564c:	c8 01       	movw	r24, r16
    564e:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
			 //AddZeroLead(strRawData,(DecimalCfg+2));
			 Length=strlen(strRawData);
    5652:	d8 01       	movw	r26, r16
    5654:	0d 90       	ld	r0, X+
    5656:	00 20       	and	r0, r0
    5658:	e9 f7       	brne	.-6      	; 0x5654 <FormatDecimal+0xc6>
    565a:	11 97       	sbiw	r26, 0x01	; 1
    565c:	a0 1b       	sub	r26, r16
			 CommaPos=1;
    565e:	b1 e0       	ldi	r27, 0x01	; 1
    5660:	bb cf       	rjmp	.-138    	; 0x55d8 <FormatDecimal+0x4a>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}
    5662:	65 96       	adiw	r28, 0x15	; 21
    5664:	0f b6       	in	r0, 0x3f	; 63
    5666:	f8 94       	cli
    5668:	de bf       	out	0x3e, r29	; 62
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	cd bf       	out	0x3d, r28	; 61
    566e:	cf 91       	pop	r28
    5670:	df 91       	pop	r29
    5672:	1f 91       	pop	r17
    5674:	0f 91       	pop	r16
    5676:	ff 90       	pop	r15
    5678:	ef 90       	pop	r14
    567a:	df 90       	pop	r13
    567c:	cf 90       	pop	r12
    567e:	08 95       	ret

00005680 <FormatTotalizerVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatTotalizerVolume(char *strRawVolume){//96->0,96 
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
    5686:	8c e3       	ldi	r24, 0x3C	; 60
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    568e:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    5690:	ce 01       	movw	r24, r28
    5692:	0e 94 c7 2a 	call	0x558e	; 0x558e <FormatDecimal>
}
    5696:	df 91       	pop	r29
    5698:	cf 91       	pop	r28
    569a:	08 95       	ret

0000569c <FormatTotalizerMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}

void FormatTotalizerMoney(char *strRawMoney){
    569c:	cf 93       	push	r28
    569e:	df 93       	push	r29
    56a0:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
    56a2:	8d e3       	ldi	r24, 0x3D	; 61
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    56aa:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    56ac:	ce 01       	movw	r24, r28
    56ae:	0e 94 c7 2a 	call	0x558e	; 0x558e <FormatDecimal>
}
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	08 95       	ret

000056b8 <FormatVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatVolume(char *strRawVolume){//96->0,96 
    56b8:	cf 93       	push	r28
    56ba:	df 93       	push	r29
    56bc:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
    56be:	8a e3       	ldi	r24, 0x3A	; 58
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    56c6:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    56c8:	ce 01       	movw	r24, r28
    56ca:	0e 94 c7 2a 	call	0x558e	; 0x558e <FormatDecimal>
}
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	08 95       	ret

000056d4 <FormatMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
	 FormatDecimal(strRawPrice,DecCfg);
}

void FormatMoney(char *strRawMoney){
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
    56da:	8b e3       	ldi	r24, 0x3B	; 59
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    56e2:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    56e4:	ce 01       	movw	r24, r28
    56e6:	0e 94 c7 2a 	call	0x558e	; 0x558e <FormatDecimal>
}
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	08 95       	ret

000056f0 <FormatPrice>:
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}

void FormatPrice(char *strRawPrice){
    56f0:	cf 93       	push	r28
    56f2:	df 93       	push	r29
    56f4:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
    56f6:	89 e3       	ldi	r24, 0x39	; 57
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    56fe:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawPrice,DecCfg);
    5700:	ce 01       	movw	r24, r28
    5702:	0e 94 c7 2a 	call	0x558e	; 0x558e <FormatDecimal>
}
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	08 95       	ret

0000570c <leadingZero>:
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    570c:	00 d0       	rcall	.+0      	; 0x570e <leadingZero+0x2>
    570e:	00 d0       	rcall	.+0      	; 0x5710 <leadingZero+0x4>
    5710:	00 d0       	rcall	.+0      	; 0x5712 <leadingZero+0x6>
    5712:	ed b7       	in	r30, 0x3d	; 61
    5714:	fe b7       	in	r31, 0x3e	; 62
    5716:	31 96       	adiw	r30, 0x01	; 1
    5718:	ad b7       	in	r26, 0x3d	; 61
    571a:	be b7       	in	r27, 0x3e	; 62
    571c:	12 96       	adiw	r26, 0x02	; 2
    571e:	7c 93       	st	X, r23
    5720:	6e 93       	st	-X, r22
    5722:	11 97       	sbiw	r26, 0x01	; 1
    5724:	2d ea       	ldi	r18, 0xAD	; 173
    5726:	3e e0       	ldi	r19, 0x0E	; 14
    5728:	33 83       	std	Z+3, r19	; 0x03
    572a:	22 83       	std	Z+2, r18	; 0x02
    572c:	84 83       	std	Z+4, r24	; 0x04
    572e:	15 82       	std	Z+5, r1	; 0x05
    5730:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    5734:	8d b7       	in	r24, 0x3d	; 61
    5736:	9e b7       	in	r25, 0x3e	; 62
    5738:	06 96       	adiw	r24, 0x06	; 6
    573a:	0f b6       	in	r0, 0x3f	; 63
    573c:	f8 94       	cli
    573e:	9e bf       	out	0x3e, r25	; 62
    5740:	0f be       	out	0x3f, r0	; 63
    5742:	8d bf       	out	0x3d, r24	; 61

}
    5744:	08 95       	ret

00005746 <menu_FIP>:
	 }
  return Result;
}


char menu_FIP(char *xFIP,char *sFIPUsed){
    5746:	6f 92       	push	r6
    5748:	7f 92       	push	r7
    574a:	8f 92       	push	r8
    574c:	9f 92       	push	r9
    574e:	af 92       	push	r10
    5750:	bf 92       	push	r11
    5752:	cf 92       	push	r12
    5754:	df 92       	push	r13
    5756:	ef 92       	push	r14
    5758:	ff 92       	push	r15
    575a:	0f 93       	push	r16
    575c:	1f 93       	push	r17
    575e:	df 93       	push	r29
    5760:	cf 93       	push	r28
    5762:	cd b7       	in	r28, 0x3d	; 61
    5764:	de b7       	in	r29, 0x3e	; 62
    5766:	a2 97       	sbiw	r28, 0x22	; 34
    5768:	0f b6       	in	r0, 0x3f	; 63
    576a:	f8 94       	cli
    576c:	de bf       	out	0x3e, r29	; 62
    576e:	0f be       	out	0x3f, r0	; 63
    5770:	cd bf       	out	0x3d, r28	; 61
    5772:	8c 01       	movw	r16, r24
    5774:	7b 01       	movw	r14, r22

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
       char FIP[8],strPumpL[3],strPumpR[3],lcdteks[20];

       switch(stEnterFIP){
    5776:	80 91 4a 03 	lds	r24, 0x034A
    577a:	81 30       	cpi	r24, 0x01	; 1
    577c:	09 f4       	brne	.+2      	; 0x5780 <menu_FIP+0x3a>
    577e:	b5 c0       	rjmp	.+362    	; 0x58ea <menu_FIP+0x1a4>
    5780:	81 30       	cpi	r24, 0x01	; 1
    5782:	20 f0       	brcs	.+8      	; 0x578c <menu_FIP+0x46>
    5784:	82 30       	cpi	r24, 0x02	; 2
    5786:	09 f0       	breq	.+2      	; 0x578a <menu_FIP+0x44>
    5788:	37 c1       	rjmp	.+622    	; 0x59f8 <menu_FIP+0x2b2>
    578a:	34 c1       	rjmp	.+616    	; 0x59f4 <menu_FIP+0x2ae>
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
    578c:	8e 01       	movw	r16, r28
    578e:	09 5f       	subi	r16, 0xF9	; 249
    5790:	1f 4f       	sbci	r17, 0xFF	; 255
    5792:	c8 01       	movw	r24, r16
    5794:	65 e4       	ldi	r22, 0x45	; 69
    5796:	70 e0       	ldi	r23, 0x00	; 0
    5798:	48 e0       	ldi	r20, 0x08	; 8
    579a:	50 e0       	ldi	r21, 0x00	; 0
    579c:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		    lcd_clear(); 
    57a0:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		    for (iLoop=0;iLoop<8;iLoop++){
    57a4:	10 92 48 03 	sts	0x0348, r1
    57a8:	10 92 47 03 	sts	0x0347, r1
    57ac:	f8 01       	movw	r30, r16
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	06 c0       	rjmp	.+12     	; 0x57c0 <menu_FIP+0x7a>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
    57b4:	20 81       	ld	r18, Z
    57b6:	24 36       	cpi	r18, 0x64	; 100
    57b8:	08 f0       	brcs	.+2      	; 0x57bc <menu_FIP+0x76>
    57ba:	10 82       	st	Z, r1
    57bc:	01 96       	adiw	r24, 0x01	; 1
    57be:	31 96       	adiw	r30, 0x01	; 1

       switch(stEnterFIP){
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
    57c0:	88 30       	cpi	r24, 0x08	; 8
    57c2:	91 05       	cpc	r25, r1
    57c4:	b8 f3       	brcs	.-18     	; 0x57b4 <menu_FIP+0x6e>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    57c6:	10 92 48 03 	sts	0x0348, r1
    57ca:	10 92 47 03 	sts	0x0347, r1
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
    57ce:	e7 e0       	ldi	r30, 0x07	; 7
    57d0:	ae 2e       	mov	r10, r30
    57d2:	b1 2c       	mov	r11, r1
    57d4:	ac 0e       	add	r10, r28
    57d6:	bd 1e       	adc	r11, r29
    57d8:	8e 01       	movw	r16, r28
    57da:	0f 5f       	subi	r16, 0xFF	; 255
    57dc:	1f 4f       	sbci	r17, 0xFF	; 255
    57de:	7b e0       	ldi	r23, 0x0B	; 11
    57e0:	87 2e       	mov	r8, r23
    57e2:	91 2c       	mov	r9, r1
    57e4:	8c 0e       	add	r8, r28
    57e6:	9d 1e       	adc	r9, r29
    57e8:	64 e0       	ldi	r22, 0x04	; 4
    57ea:	e6 2e       	mov	r14, r22
    57ec:	f1 2c       	mov	r15, r1
    57ee:	ec 0e       	add	r14, r28
    57f0:	fd 1e       	adc	r15, r29
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    57f2:	5f e0       	ldi	r21, 0x0F	; 15
    57f4:	c5 2e       	mov	r12, r21
    57f6:	d1 2c       	mov	r13, r1
    57f8:	cc 0e       	add	r12, r28
    57fa:	dd 1e       	adc	r13, r29
    57fc:	4b eb       	ldi	r20, 0xBB	; 187
    57fe:	64 2e       	mov	r6, r20
    5800:	4d e1       	ldi	r20, 0x1D	; 29
    5802:	74 2e       	mov	r7, r20
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    5804:	4c c0       	rjmp	.+152    	; 0x589e <menu_FIP+0x158>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
    5806:	8a 0d       	add	r24, r10
    5808:	9b 1d       	adc	r25, r11
    580a:	dc 01       	movw	r26, r24
    580c:	8c 91       	ld	r24, X
    580e:	b8 01       	movw	r22, r16
    5810:	0e 94 86 2b 	call	0x570c	; 0x570c <leadingZero>
    5814:	e0 91 47 03 	lds	r30, 0x0347
    5818:	f0 91 48 03 	lds	r31, 0x0348
    581c:	e8 0d       	add	r30, r8
    581e:	f9 1d       	adc	r31, r9
    5820:	80 81       	ld	r24, Z
    5822:	b7 01       	movw	r22, r14
    5824:	0e 94 86 2b 	call	0x570c	; 0x570c <leadingZero>
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    5828:	80 91 47 03 	lds	r24, 0x0347
    582c:	90 91 48 03 	lds	r25, 0x0348
    5830:	ed b7       	in	r30, 0x3d	; 61
    5832:	fe b7       	in	r31, 0x3e	; 62
    5834:	3c 97       	sbiw	r30, 0x0c	; 12
    5836:	0f b6       	in	r0, 0x3f	; 63
    5838:	f8 94       	cli
    583a:	fe bf       	out	0x3e, r31	; 62
    583c:	0f be       	out	0x3f, r0	; 63
    583e:	ed bf       	out	0x3d, r30	; 61
    5840:	31 96       	adiw	r30, 0x01	; 1
    5842:	ad b7       	in	r26, 0x3d	; 61
    5844:	be b7       	in	r27, 0x3e	; 62
    5846:	12 96       	adiw	r26, 0x02	; 2
    5848:	dc 92       	st	X, r13
    584a:	ce 92       	st	-X, r12
    584c:	11 97       	sbiw	r26, 0x01	; 1
    584e:	73 82       	std	Z+3, r7	; 0x03
    5850:	62 82       	std	Z+2, r6	; 0x02
    5852:	9c 01       	movw	r18, r24
    5854:	2f 5f       	subi	r18, 0xFF	; 255
    5856:	3f 4f       	sbci	r19, 0xFF	; 255
    5858:	35 83       	std	Z+5, r19	; 0x05
    585a:	24 83       	std	Z+4, r18	; 0x04
    585c:	17 83       	std	Z+7, r17	; 0x07
    585e:	06 83       	std	Z+6, r16	; 0x06
    5860:	05 96       	adiw	r24, 0x05	; 5
    5862:	91 87       	std	Z+9, r25	; 0x09
    5864:	80 87       	std	Z+8, r24	; 0x08
    5866:	f3 86       	std	Z+11, r15	; 0x0b
    5868:	e2 86       	std	Z+10, r14	; 0x0a
    586a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			    lcd_print((iLoop+1),1,lcdteks);
    586e:	ed b7       	in	r30, 0x3d	; 61
    5870:	fe b7       	in	r31, 0x3e	; 62
    5872:	3c 96       	adiw	r30, 0x0c	; 12
    5874:	0f b6       	in	r0, 0x3f	; 63
    5876:	f8 94       	cli
    5878:	fe bf       	out	0x3e, r31	; 62
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	ed bf       	out	0x3d, r30	; 61
    587e:	80 91 47 03 	lds	r24, 0x0347
    5882:	8f 5f       	subi	r24, 0xFF	; 255
    5884:	61 e0       	ldi	r22, 0x01	; 1
    5886:	a6 01       	movw	r20, r12
    5888:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    588c:	80 91 47 03 	lds	r24, 0x0347
    5890:	90 91 48 03 	lds	r25, 0x0348
    5894:	01 96       	adiw	r24, 0x01	; 1
    5896:	90 93 48 03 	sts	0x0348, r25
    589a:	80 93 47 03 	sts	0x0347, r24
    589e:	80 91 47 03 	lds	r24, 0x0347
    58a2:	90 91 48 03 	lds	r25, 0x0348
    58a6:	84 30       	cpi	r24, 0x04	; 4
    58a8:	91 05       	cpc	r25, r1
    58aa:	08 f4       	brcc	.+2      	; 0x58ae <menu_FIP+0x168>
    58ac:	ac cf       	rjmp	.-168    	; 0x5806 <menu_FIP+0xc0>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
			    lcd_print((iLoop+1),1,lcdteks);
			}
		    lcd_printf(1,15,PSTR("FIP:_"));    //"1.P01 | 5.P05 FIP:_ "                                                                      
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	6f e0       	ldi	r22, 0x0F	; 15
    58b2:	45 eb       	ldi	r20, 0xB5	; 181
    58b4:	5d e1       	ldi	r21, 0x1D	; 29
    58b6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		    lcd_printf(2,15,PSTR("     "));    //"2.P02 | 6.P05       "
    58ba:	82 e0       	ldi	r24, 0x02	; 2
    58bc:	6f e0       	ldi	r22, 0x0F	; 15
    58be:	4f ea       	ldi	r20, 0xAF	; 175
    58c0:	5d e1       	ldi	r21, 0x1D	; 29
    58c2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		    lcd_printf(3,15,PSTR("#)OK "));    //"3.P03 | 7.P07 #)OK  "
    58c6:	83 e0       	ldi	r24, 0x03	; 3
    58c8:	6f e0       	ldi	r22, 0x0F	; 15
    58ca:	49 ea       	ldi	r20, 0xA9	; 169
    58cc:	5d e1       	ldi	r21, 0x1D	; 29
    58ce:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	        lcd_printf(4,15,PSTR("*)Exit"));   //"4.P04 | 8.P08 *)Exit"				
    58d2:	84 e0       	ldi	r24, 0x04	; 4
    58d4:	6f e0       	ldi	r22, 0x0F	; 15
    58d6:	42 ea       	ldi	r20, 0xA2	; 162
    58d8:	5d e1       	ldi	r21, 0x1D	; 29
    58da:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		    iLoop=0;
    58de:	10 92 48 03 	sts	0x0348, r1
    58e2:	10 92 47 03 	sts	0x0347, r1
		    stEnterFIP=efFIPInput;
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	82 c0       	rjmp	.+260    	; 0x59ee <menu_FIP+0x2a8>
	        break;
	   case efFIPInput:
		    iLoop++;
    58ea:	80 91 47 03 	lds	r24, 0x0347
    58ee:	90 91 48 03 	lds	r25, 0x0348
    58f2:	01 96       	adiw	r24, 0x01	; 1
    58f4:	90 93 48 03 	sts	0x0348, r25
    58f8:	80 93 47 03 	sts	0x0347, r24
		    KeyPressed=_key_scan(1);
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    5902:	c8 2e       	mov	r12, r24
		    KeyChar=_key_btn(KeyPressed);
    5904:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		    if ((KeyChar>='1')&&(KeyChar<='8')){
    5908:	3f ec       	ldi	r19, 0xCF	; 207
    590a:	a3 2e       	mov	r10, r19
    590c:	a8 0e       	add	r10, r24
    590e:	fa 2d       	mov	r31, r10
    5910:	f8 30       	cpi	r31, 0x08	; 8
    5912:	60 f4       	brcc	.+24     	; 0x592c <menu_FIP+0x1e6>
		 	     if (KeyCharLast!=KeyChar){
    5914:	90 91 5a 01 	lds	r25, 0x015A
    5918:	98 17       	cp	r25, r24
    591a:	41 f0       	breq	.+16     	; 0x592c <menu_FIP+0x1e6>
				     KeyCharLast=KeyChar;
    591c:	80 93 5a 01 	sts	0x015A, r24
				     iLoop=1000;
    5920:	88 ee       	ldi	r24, 0xE8	; 232
    5922:	93 e0       	ldi	r25, 0x03	; 3
    5924:	90 93 48 03 	sts	0x0348, r25
    5928:	80 93 47 03 	sts	0x0347, r24
                 }
		    }
 		    if ((iLoop%2000)==0){
    592c:	80 91 47 03 	lds	r24, 0x0347
    5930:	90 91 48 03 	lds	r25, 0x0348
    5934:	60 ed       	ldi	r22, 0xD0	; 208
    5936:	77 e0       	ldi	r23, 0x07	; 7
    5938:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    593c:	00 97       	sbiw	r24, 0x00	; 0
    593e:	39 f4       	brne	.+14     	; 0x594e <menu_FIP+0x208>
		        lcd_xy(1,19);_lcd('_'); 
    5940:	81 e0       	ldi	r24, 0x01	; 1
    5942:	63 e1       	ldi	r22, 0x13	; 19
    5944:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
    5948:	8f e5       	ldi	r24, 0x5F	; 95
    594a:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
			   }
           if ((iLoop%2000)==1000){
    594e:	80 91 47 03 	lds	r24, 0x0347
    5952:	90 91 48 03 	lds	r25, 0x0348
    5956:	60 ed       	ldi	r22, 0xD0	; 208
    5958:	77 e0       	ldi	r23, 0x07	; 7
    595a:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    595e:	23 e0       	ldi	r18, 0x03	; 3
    5960:	88 3e       	cpi	r24, 0xE8	; 232
    5962:	92 07       	cpc	r25, r18
    5964:	41 f4       	brne	.+16     	; 0x5976 <menu_FIP+0x230>
			    lcd_xy(1,19);_lcd(KeyCharLast); 
    5966:	81 e0       	ldi	r24, 0x01	; 1
    5968:	63 e1       	ldi	r22, 0x13	; 19
    596a:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
    596e:	80 91 5a 01 	lds	r24, 0x015A
    5972:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
			   }

		   if (((KeyChar>='1')&&(KeyChar<='8'))||(KeyPressed==_KEY_ENTER)&&(KeyCharLast!=' ')){ 
    5976:	3a 2d       	mov	r19, r10
    5978:	38 30       	cpi	r19, 0x08	; 8
    597a:	38 f0       	brcs	.+14     	; 0x598a <menu_FIP+0x244>
    597c:	8c 2d       	mov	r24, r12
    597e:	87 3b       	cpi	r24, 0xB7	; 183
    5980:	91 f5       	brne	.+100    	; 0x59e6 <menu_FIP+0x2a0>
    5982:	80 91 5a 01 	lds	r24, 0x015A
    5986:	80 32       	cpi	r24, 0x20	; 32
    5988:	b9 f1       	breq	.+110    	; 0x59f8 <menu_FIP+0x2b2>
		         FIP_Used=FIP[KeyCharLast-'1'];
    598a:	80 91 5a 01 	lds	r24, 0x015A
    598e:	fe 01       	movw	r30, r28
    5990:	ba 97       	sbiw	r30, 0x2a	; 42
    5992:	e8 0f       	add	r30, r24
    5994:	f1 1d       	adc	r31, r1
    5996:	20 81       	ld	r18, Z
    5998:	20 93 49 03 	sts	0x0349, r18
				 if (FIP_Used<=99){
    599c:	24 36       	cpi	r18, 0x64	; 100
    599e:	f0 f4       	brcc	.+60     	; 0x59dc <menu_FIP+0x296>
                     //leadingZero(FIP_Used,sFIPUsed);
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
    59a0:	d8 01       	movw	r26, r16
    59a2:	2c 93       	st	X, r18
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);
    59a4:	00 d0       	rcall	.+0      	; 0x59a6 <menu_FIP+0x260>
    59a6:	00 d0       	rcall	.+0      	; 0x59a8 <menu_FIP+0x262>
    59a8:	00 d0       	rcall	.+0      	; 0x59aa <menu_FIP+0x264>
    59aa:	ed b7       	in	r30, 0x3d	; 61
    59ac:	fe b7       	in	r31, 0x3e	; 62
    59ae:	31 96       	adiw	r30, 0x01	; 1
    59b0:	ad b7       	in	r26, 0x3d	; 61
    59b2:	be b7       	in	r27, 0x3e	; 62
    59b4:	12 96       	adiw	r26, 0x02	; 2
    59b6:	fc 92       	st	X, r15
    59b8:	ee 92       	st	-X, r14
    59ba:	11 97       	sbiw	r26, 0x01	; 1
    59bc:	8d e9       	ldi	r24, 0x9D	; 157
    59be:	9d e1       	ldi	r25, 0x1D	; 29
    59c0:	93 83       	std	Z+3, r25	; 0x03
    59c2:	82 83       	std	Z+2, r24	; 0x02
    59c4:	24 83       	std	Z+4, r18	; 0x04
    59c6:	15 82       	std	Z+5, r1	; 0x05
    59c8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    59cc:	ed b7       	in	r30, 0x3d	; 61
    59ce:	fe b7       	in	r31, 0x3e	; 62
    59d0:	36 96       	adiw	r30, 0x06	; 6
    59d2:	0f b6       	in	r0, 0x3f	; 63
    59d4:	f8 94       	cli
    59d6:	fe bf       	out	0x3e, r31	; 62
    59d8:	0f be       	out	0x3f, r0	; 63
    59da:	ed bf       	out	0x3d, r30	; 61

					 }
				 Result=FIP_DONE;
                 stEnterFIP=efExitFIPInput;
    59dc:	82 e0       	ldi	r24, 0x02	; 2
    59de:	80 93 4a 03 	sts	0x034A, r24
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);

					 }
				 Result=FIP_DONE;
    59e2:	80 e0       	ldi	r24, 0x00	; 0
                 stEnterFIP=efExitFIPInput;
    59e4:	0a c0       	rjmp	.+20     	; 0x59fa <menu_FIP+0x2b4>
		   }
		   else
		   if (KeyPressed==_KEY_CANCEL){
    59e6:	fc 2d       	mov	r31, r12
    59e8:	f7 3e       	cpi	r31, 0xE7	; 231
    59ea:	31 f4       	brne	.+12     	; 0x59f8 <menu_FIP+0x2b2>
               Result=FIP_CANCEL;
			   stEnterFIP=efExitFIPInput;
    59ec:	82 e0       	ldi	r24, 0x02	; 2
    59ee:	80 93 4a 03 	sts	0x034A, r24
    59f2:	03 c0       	rjmp	.+6      	; 0x59fa <menu_FIP+0x2b4>
		   }
	       break;
      case efExitFIPInput:
           stEnterFIP=efInit;
    59f4:	10 92 4a 03 	sts	0x034A, r1
static char stEnterFIP=efInit;
static char KeyCharLast=' ',FIP_Used=0;
static unsigned int iLoop;

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
    59f8:	81 e0       	ldi	r24, 0x01	; 1
      case efExitFIPInput:
           stEnterFIP=efInit;
	       break;
	 }
return Result;
}
    59fa:	a2 96       	adiw	r28, 0x22	; 34
    59fc:	0f b6       	in	r0, 0x3f	; 63
    59fe:	f8 94       	cli
    5a00:	de bf       	out	0x3e, r29	; 62
    5a02:	0f be       	out	0x3f, r0	; 63
    5a04:	cd bf       	out	0x3d, r28	; 61
    5a06:	cf 91       	pop	r28
    5a08:	df 91       	pop	r29
    5a0a:	1f 91       	pop	r17
    5a0c:	0f 91       	pop	r16
    5a0e:	ff 90       	pop	r15
    5a10:	ef 90       	pop	r14
    5a12:	df 90       	pop	r13
    5a14:	cf 90       	pop	r12
    5a16:	bf 90       	pop	r11
    5a18:	af 90       	pop	r10
    5a1a:	9f 90       	pop	r9
    5a1c:	8f 90       	pop	r8
    5a1e:	7f 90       	pop	r7
    5a20:	6f 90       	pop	r6
    5a22:	08 95       	ret

00005a24 <_scr_pump>:

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    5a24:	8f 92       	push	r8
    5a26:	9f 92       	push	r9
    5a28:	af 92       	push	r10
    5a2a:	bf 92       	push	r11
    5a2c:	cf 92       	push	r12
    5a2e:	df 92       	push	r13
    5a30:	ef 92       	push	r14
    5a32:	ff 92       	push	r15
    5a34:	0f 93       	push	r16
    5a36:	1f 93       	push	r17
    5a38:	df 93       	push	r29
    5a3a:	cf 93       	push	r28
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
    5a40:	6c 97       	sbiw	r28, 0x1c	; 28
    5a42:	0f b6       	in	r0, 0x3f	; 63
    5a44:	f8 94       	cli
    5a46:	de bf       	out	0x3e, r29	; 62
    5a48:	0f be       	out	0x3f, r0	; 63
    5a4a:	cd bf       	out	0x3d, r28	; 61
	 //char strPumpL[3],strPumpR[3];
	 char __pump_id[8];
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
    5a4c:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    5a50:	8f ef       	ldi	r24, 0xFF	; 255
    5a52:	9f e8       	ldi	r25, 0x8F	; 143
    5a54:	01 97       	sbiw	r24, 0x01	; 1
    5a56:	f1 f7       	brne	.-4      	; 0x5a54 <_scr_pump+0x30>
    5a58:	00 c0       	rjmp	.+0      	; 0x5a5a <_scr_pump+0x36>
    5a5a:	00 00       	nop
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    5a5c:	6e 01       	movw	r12, r28
    5a5e:	08 94       	sec
    5a60:	c1 1c       	adc	r12, r1
    5a62:	d1 1c       	adc	r13, r1
    5a64:	c6 01       	movw	r24, r12
    5a66:	65 e4       	ldi	r22, 0x45	; 69
    5a68:	70 e0       	ldi	r23, 0x00	; 0
    5a6a:	48 e0       	ldi	r20, 0x08	; 8
    5a6c:	50 e0       	ldi	r21, 0x00	; 0
    5a6e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
    5a72:	76 01       	movw	r14, r12
    5a74:	05 e0       	ldi	r16, 0x05	; 5
    5a76:	10 e0       	ldi	r17, 0x00	; 0
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    5a78:	a9 e0       	ldi	r26, 0x09	; 9
    5a7a:	aa 2e       	mov	r10, r26
    5a7c:	b1 2c       	mov	r11, r1
    5a7e:	ac 0e       	add	r10, r28
    5a80:	bd 1e       	adc	r11, r29
    5a82:	f8 e9       	ldi	r31, 0x98	; 152
    5a84:	8f 2e       	mov	r8, r31
    5a86:	fe e0       	ldi	r31, 0x0E	; 14
    5a88:	9f 2e       	mov	r9, r31
    5a8a:	d7 01       	movw	r26, r14
    5a8c:	2d 91       	ld	r18, X+
    5a8e:	7d 01       	movw	r14, r26
    5a90:	ed b7       	in	r30, 0x3d	; 61
    5a92:	fe b7       	in	r31, 0x3e	; 62
    5a94:	3c 97       	sbiw	r30, 0x0c	; 12
    5a96:	0f b6       	in	r0, 0x3f	; 63
    5a98:	f8 94       	cli
    5a9a:	fe bf       	out	0x3e, r31	; 62
    5a9c:	0f be       	out	0x3f, r0	; 63
    5a9e:	ed bf       	out	0x3d, r30	; 61
    5aa0:	31 96       	adiw	r30, 0x01	; 1
    5aa2:	ad b7       	in	r26, 0x3d	; 61
    5aa4:	be b7       	in	r27, 0x3e	; 62
    5aa6:	12 96       	adiw	r26, 0x02	; 2
    5aa8:	bc 92       	st	X, r11
    5aaa:	ae 92       	st	-X, r10
    5aac:	11 97       	sbiw	r26, 0x01	; 1
    5aae:	93 82       	std	Z+3, r9	; 0x03
    5ab0:	82 82       	std	Z+2, r8	; 0x02

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    5ab2:	c8 01       	movw	r24, r16
    5ab4:	04 97       	sbiw	r24, 0x04	; 4
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    5ab6:	95 83       	std	Z+5, r25	; 0x05
    5ab8:	84 83       	std	Z+4, r24	; 0x04
    5aba:	26 83       	std	Z+6, r18	; 0x06
    5abc:	17 82       	std	Z+7, r1	; 0x07
    5abe:	11 87       	std	Z+9, r17	; 0x09
    5ac0:	00 87       	std	Z+8, r16	; 0x08
    5ac2:	d7 01       	movw	r26, r14
    5ac4:	13 96       	adiw	r26, 0x03	; 3
    5ac6:	8c 91       	ld	r24, X
    5ac8:	82 87       	std	Z+10, r24	; 0x0a
    5aca:	13 86       	std	Z+11, r1	; 0x0b
    5acc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			 lcd_print((i+1),1,lcdteks);
    5ad0:	ed b7       	in	r30, 0x3d	; 61
    5ad2:	fe b7       	in	r31, 0x3e	; 62
    5ad4:	3c 96       	adiw	r30, 0x0c	; 12
    5ad6:	0f b6       	in	r0, 0x3f	; 63
    5ad8:	f8 94       	cli
    5ada:	fe bf       	out	0x3e, r31	; 62
    5adc:	0f be       	out	0x3f, r0	; 63
    5ade:	ed bf       	out	0x3d, r30	; 61
    5ae0:	8e 2d       	mov	r24, r14
    5ae2:	8c 19       	sub	r24, r12
    5ae4:	61 e0       	ldi	r22, 0x01	; 1
    5ae6:	a5 01       	movw	r20, r10
    5ae8:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    5aec:	0f 5f       	subi	r16, 0xFF	; 255
    5aee:	1f 4f       	sbci	r17, 0xFF	; 255
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    5af0:	09 30       	cpi	r16, 0x09	; 9
    5af2:	11 05       	cpc	r17, r1
    5af4:	51 f6       	brne	.-108    	; 0x5a8a <_scr_pump+0x66>
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
			 lcd_print((i+1),1,lcdteks);
		}
        lcd_printf(4,15,PSTR("*)Exit"));
    5af6:	84 e0       	ldi	r24, 0x04	; 4
    5af8:	6f e0       	ldi	r22, 0x0F	; 15
    5afa:	41 e9       	ldi	r20, 0x91	; 145
    5afc:	5e e0       	ldi	r21, 0x0E	; 14
    5afe:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
}
    5b02:	6c 96       	adiw	r28, 0x1c	; 28
    5b04:	0f b6       	in	r0, 0x3f	; 63
    5b06:	f8 94       	cli
    5b08:	de bf       	out	0x3e, r29	; 62
    5b0a:	0f be       	out	0x3f, r0	; 63
    5b0c:	cd bf       	out	0x3d, r28	; 61
    5b0e:	cf 91       	pop	r28
    5b10:	df 91       	pop	r29
    5b12:	1f 91       	pop	r17
    5b14:	0f 91       	pop	r16
    5b16:	ff 90       	pop	r15
    5b18:	ef 90       	pop	r14
    5b1a:	df 90       	pop	r13
    5b1c:	cf 90       	pop	r12
    5b1e:	bf 90       	pop	r11
    5b20:	af 90       	pop	r10
    5b22:	9f 90       	pop	r9
    5b24:	8f 90       	pop	r8
    5b26:	08 95       	ret

00005b28 <FMenuPumpLabel>:
		       break;		         
	      }
	 }     
}

void FMenuPumpLabel(){
    5b28:	bf 92       	push	r11
    5b2a:	cf 92       	push	r12
    5b2c:	df 92       	push	r13
    5b2e:	ef 92       	push	r14
    5b30:	ff 92       	push	r15
    5b32:	0f 93       	push	r16
    5b34:	1f 93       	push	r17
    5b36:	df 93       	push	r29
    5b38:	cf 93       	push	r28
    5b3a:	cd b7       	in	r28, 0x3d	; 61
    5b3c:	de b7       	in	r29, 0x3e	; 62
    5b3e:	2e 97       	sbiw	r28, 0x0e	; 14
    5b40:	0f b6       	in	r0, 0x3f	; 63
    5b42:	f8 94       	cli
    5b44:	de bf       	out	0x3e, r29	; 62
    5b46:	0f be       	out	0x3f, r0	; 63
    5b48:	cd bf       	out	0x3d, r28	; 61
	char PPumpLabel[8];
	unsigned char i, xPos,yPos,KeyPressed,KeyChar,strLabel[5];
	static char MaxCountId=16;

	eeprom_read_block((void*) &PPumpLabel, (const void*) &DefPumpLabel, 8);
    5b4a:	8e 01       	movw	r16, r28
    5b4c:	0a 5f       	subi	r16, 0xFA	; 250
    5b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b50:	c8 01       	movw	r24, r16
    5b52:	6d e4       	ldi	r22, 0x4D	; 77
    5b54:	70 e0       	ldi	r23, 0x00	; 0
    5b56:	48 e0       	ldi	r20, 0x08	; 8
    5b58:	50 e0       	ldi	r21, 0x00	; 0
    5b5a:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	MaxCountId=99;
    5b5e:	83 e6       	ldi	r24, 0x63	; 99
    5b60:	80 93 56 01 	sts	0x0156, r24
	lcd_clear();_delay_ms(10);
    5b64:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    5b68:	8f ef       	ldi	r24, 0xFF	; 255
    5b6a:	9f e8       	ldi	r25, 0x8F	; 143
    5b6c:	01 97       	sbiw	r24, 0x01	; 1
    5b6e:	f1 f7       	brne	.-4      	; 0x5b6c <FMenuPumpLabel+0x44>
    5b70:	00 c0       	rjmp	.+0      	; 0x5b72 <FMenuPumpLabel+0x4a>
    5b72:	00 00       	nop
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
    5b74:	81 e0       	ldi	r24, 0x01	; 1
    5b76:	61 e0       	ldi	r22, 0x01	; 1
    5b78:	43 e4       	ldi	r20, 0x43	; 67
    5b7a:	5e e0       	ldi	r21, 0x0E	; 14
    5b7c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
    5b80:	82 e0       	ldi	r24, 0x02	; 2
    5b82:	61 e0       	ldi	r22, 0x01	; 1
    5b84:	47 e3       	ldi	r20, 0x37	; 55
    5b86:	5e e0       	ldi	r21, 0x0E	; 14
    5b88:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
    5b8c:	83 e0       	ldi	r24, 0x03	; 3
    5b8e:	61 e0       	ldi	r22, 0x01	; 1
    5b90:	42 e2       	ldi	r20, 0x22	; 34
    5b92:	5e e0       	ldi	r21, 0x0E	; 14
    5b94:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    5b98:	84 e0       	ldi	r24, 0x04	; 4
    5b9a:	61 e0       	ldi	r22, 0x01	; 1
    5b9c:	4d e0       	ldi	r20, 0x0D	; 13
    5b9e:	5e e0       	ldi	r21, 0x0E	; 14
    5ba0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    5ba4:	78 01       	movw	r14, r16

	for(i=0;i< 8;i++){
    5ba6:	bb 24       	eor	r11, r11
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    5ba8:	8e 01       	movw	r16, r28
    5baa:	0f 5f       	subi	r16, 0xFF	; 255
    5bac:	1f 4f       	sbci	r17, 0xFF	; 255
    5bae:	88 e0       	ldi	r24, 0x08	; 8
    5bb0:	c8 2e       	mov	r12, r24
    5bb2:	8e e0       	ldi	r24, 0x0E	; 14
    5bb4:	d8 2e       	mov	r13, r24
    5bb6:	d7 01       	movw	r26, r14
    5bb8:	8d 91       	ld	r24, X+
    5bba:	7d 01       	movw	r14, r26
    5bbc:	00 d0       	rcall	.+0      	; 0x5bbe <FMenuPumpLabel+0x96>
    5bbe:	00 d0       	rcall	.+0      	; 0x5bc0 <FMenuPumpLabel+0x98>
    5bc0:	00 d0       	rcall	.+0      	; 0x5bc2 <FMenuPumpLabel+0x9a>
    5bc2:	ed b7       	in	r30, 0x3d	; 61
    5bc4:	fe b7       	in	r31, 0x3e	; 62
    5bc6:	31 96       	adiw	r30, 0x01	; 1
    5bc8:	ad b7       	in	r26, 0x3d	; 61
    5bca:	be b7       	in	r27, 0x3e	; 62
    5bcc:	12 96       	adiw	r26, 0x02	; 2
    5bce:	1c 93       	st	X, r17
    5bd0:	0e 93       	st	-X, r16
    5bd2:	11 97       	sbiw	r26, 0x01	; 1
    5bd4:	d3 82       	std	Z+3, r13	; 0x03
    5bd6:	c2 82       	std	Z+2, r12	; 0x02
    5bd8:	84 83       	std	Z+4, r24	; 0x04
    5bda:	15 82       	std	Z+5, r1	; 0x05
    5bdc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		xPos=1+(i%4);
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
    5be0:	ed b7       	in	r30, 0x3d	; 61
    5be2:	fe b7       	in	r31, 0x3e	; 62
    5be4:	36 96       	adiw	r30, 0x06	; 6
    5be6:	0f b6       	in	r0, 0x3f	; 63
    5be8:	f8 94       	cli
    5bea:	fe bf       	out	0x3e, r31	; 62
    5bec:	0f be       	out	0x3f, r0	; 63
    5bee:	ed bf       	out	0x3d, r30	; 61
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
		xPos=1+(i%4);
    5bf0:	8b 2d       	mov	r24, r11
    5bf2:	83 70       	andi	r24, 0x03	; 3
		yPos=5+(i/4)*8;
    5bf4:	6b 2d       	mov	r22, r11
    5bf6:	66 95       	lsr	r22
    5bf8:	66 95       	lsr	r22
    5bfa:	66 0f       	add	r22, r22
    5bfc:	66 0f       	add	r22, r22
    5bfe:	66 0f       	add	r22, r22
    5c00:	6b 5f       	subi	r22, 0xFB	; 251
        lcd_print(xPos,yPos,strLabel);
    5c02:	8f 5f       	subi	r24, 0xFF	; 255
    5c04:	a8 01       	movw	r20, r16
    5c06:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    5c0a:	b3 94       	inc	r11
    5c0c:	fb 2d       	mov	r31, r11
    5c0e:	f8 30       	cpi	r31, 0x08	; 8
    5c10:	91 f6       	brne	.-92     	; 0x5bb6 <FMenuPumpLabel+0x8e>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    5c12:	8e 01       	movw	r16, r28
    5c14:	0a 5f       	subi	r16, 0xFA	; 250
    5c16:	1f 4f       	sbci	r17, 0xFF	; 255
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    5c18:	7e 01       	movw	r14, r28
    5c1a:	08 94       	sec
    5c1c:	e1 1c       	adc	r14, r1
    5c1e:	f1 1c       	adc	r15, r1
    5c20:	b3 e0       	ldi	r27, 0x03	; 3
    5c22:	cb 2e       	mov	r12, r27
    5c24:	be e0       	ldi	r27, 0x0E	; 14
    5c26:	db 2e       	mov	r13, r27
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
	}

	while(1){
		KeyPressed = _key_scan(1);
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    5c2e:	98 2f       	mov	r25, r24
		KeyChar    = _key_btn(KeyPressed);
    5c30:	9e 87       	std	Y+14, r25	; 0x0e
    5c32:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		if(KeyPressed == _KEY_CANCEL)break;
    5c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c38:	97 3e       	cpi	r25, 0xE7	; 231
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <FMenuPumpLabel+0x116>
    5c3c:	4a c0       	rjmp	.+148    	; 0x5cd2 <FMenuPumpLabel+0x1aa>
		else
		if(KeyPressed == _KEY_ENTER){
    5c3e:	97 3b       	cpi	r25, 0xB7	; 183
    5c40:	49 f4       	brne	.+18     	; 0x5c54 <FMenuPumpLabel+0x12c>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
    5c42:	ce 01       	movw	r24, r28
    5c44:	06 96       	adiw	r24, 0x06	; 6
    5c46:	6d e4       	ldi	r22, 0x4D	; 77
    5c48:	70 e0       	ldi	r23, 0x00	; 0
    5c4a:	48 e0       	ldi	r20, 0x08	; 8
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    5c52:	3f c0       	rjmp	.+126    	; 0x5cd2 <FMenuPumpLabel+0x1aa>
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
    5c54:	68 2f       	mov	r22, r24
    5c56:	61 53       	subi	r22, 0x31	; 49
    5c58:	68 30       	cpi	r22, 0x08	; 8
    5c5a:	30 f7       	brcc	.-52     	; 0x5c28 <FMenuPumpLabel+0x100>
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    5c5c:	26 2f       	mov	r18, r22
    5c5e:	30 e0       	ldi	r19, 0x00	; 0
    5c60:	f8 01       	movw	r30, r16
    5c62:	e2 0f       	add	r30, r18
    5c64:	f3 1f       	adc	r31, r19
    5c66:	80 81       	ld	r24, Z
    5c68:	90 91 56 01 	lds	r25, 0x0156
    5c6c:	89 17       	cp	r24, r25
    5c6e:	11 f4       	brne	.+4      	; 0x5c74 <FMenuPumpLabel+0x14c>
			   PPumpLabel[i] = 0;
    5c70:	10 82       	st	Z, r1
    5c72:	02 c0       	rjmp	.+4      	; 0x5c78 <FMenuPumpLabel+0x150>
			else
			   PPumpLabel[i]++;
    5c74:	8f 5f       	subi	r24, 0xFF	; 255
    5c76:	80 83       	st	Z, r24
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    5c78:	00 d0       	rcall	.+0      	; 0x5c7a <FMenuPumpLabel+0x152>
    5c7a:	00 d0       	rcall	.+0      	; 0x5c7c <FMenuPumpLabel+0x154>
    5c7c:	00 d0       	rcall	.+0      	; 0x5c7e <FMenuPumpLabel+0x156>
    5c7e:	ed b7       	in	r30, 0x3d	; 61
    5c80:	fe b7       	in	r31, 0x3e	; 62
    5c82:	31 96       	adiw	r30, 0x01	; 1
    5c84:	ad b7       	in	r26, 0x3d	; 61
    5c86:	be b7       	in	r27, 0x3e	; 62
    5c88:	12 96       	adiw	r26, 0x02	; 2
    5c8a:	fc 92       	st	X, r15
    5c8c:	ee 92       	st	-X, r14
    5c8e:	11 97       	sbiw	r26, 0x01	; 1
    5c90:	d3 82       	std	Z+3, r13	; 0x03
    5c92:	c2 82       	std	Z+2, r12	; 0x02
    5c94:	20 0f       	add	r18, r16
    5c96:	31 1f       	adc	r19, r17
    5c98:	d9 01       	movw	r26, r18
    5c9a:	8c 91       	ld	r24, X
    5c9c:	84 83       	std	Z+4, r24	; 0x04
    5c9e:	15 82       	std	Z+5, r1	; 0x05
    5ca0:	6e 87       	std	Y+14, r22	; 0x0e
    5ca2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
            lcd_print(xPos,yPos,strLabel);
    5ca6:	ed b7       	in	r30, 0x3d	; 61
    5ca8:	fe b7       	in	r31, 0x3e	; 62
    5caa:	36 96       	adiw	r30, 0x06	; 6
    5cac:	0f b6       	in	r0, 0x3f	; 63
    5cae:	f8 94       	cli
    5cb0:	fe bf       	out	0x3e, r31	; 62
    5cb2:	0f be       	out	0x3f, r0	; 63
    5cb4:	ed bf       	out	0x3d, r30	; 61
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
    5cb6:	6e 85       	ldd	r22, Y+14	; 0x0e
    5cb8:	86 2f       	mov	r24, r22
    5cba:	83 70       	andi	r24, 0x03	; 3
		    yPos=5+(i/4)*8;
    5cbc:	66 95       	lsr	r22
    5cbe:	66 95       	lsr	r22
    5cc0:	66 0f       	add	r22, r22
    5cc2:	66 0f       	add	r22, r22
    5cc4:	66 0f       	add	r22, r22
    5cc6:	6b 5f       	subi	r22, 0xFB	; 251
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
            lcd_print(xPos,yPos,strLabel);
    5cc8:	8f 5f       	subi	r24, 0xFF	; 255
    5cca:	a7 01       	movw	r20, r14
    5ccc:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    5cd0:	ab cf       	rjmp	.-170    	; 0x5c28 <FMenuPumpLabel+0x100>
		}
	}
}
    5cd2:	2e 96       	adiw	r28, 0x0e	; 14
    5cd4:	0f b6       	in	r0, 0x3f	; 63
    5cd6:	f8 94       	cli
    5cd8:	de bf       	out	0x3e, r29	; 62
    5cda:	0f be       	out	0x3f, r0	; 63
    5cdc:	cd bf       	out	0x3d, r28	; 61
    5cde:	cf 91       	pop	r28
    5ce0:	df 91       	pop	r29
    5ce2:	1f 91       	pop	r17
    5ce4:	0f 91       	pop	r16
    5ce6:	ff 90       	pop	r15
    5ce8:	ef 90       	pop	r14
    5cea:	df 90       	pop	r13
    5cec:	cf 90       	pop	r12
    5cee:	bf 90       	pop	r11
    5cf0:	08 95       	ret

00005cf2 <IncValue>:

void IncValue(char *Value,char MinValue,char MaxValue){
    5cf2:	fc 01       	movw	r30, r24
     if ((*Value)<MaxValue){
    5cf4:	80 81       	ld	r24, Z
    5cf6:	84 17       	cp	r24, r20
    5cf8:	18 f4       	brcc	.+6      	; 0x5d00 <IncValue+0xe>
	     (*Value)++;
    5cfa:	8f 5f       	subi	r24, 0xFF	; 255
    5cfc:	80 83       	st	Z, r24
    5cfe:	08 95       	ret
	 }else *Value=MinValue;
    5d00:	60 83       	st	Z, r22
    5d02:	08 95       	ret

00005d04 <DecValue>:
}

void DecValue(char *Value,char MinValue,char MaxValue){
    5d04:	fc 01       	movw	r30, r24
     if ((*Value)>MinValue){
    5d06:	80 81       	ld	r24, Z
    5d08:	68 17       	cp	r22, r24
    5d0a:	18 f4       	brcc	.+6      	; 0x5d12 <DecValue+0xe>
	     (*Value)--;
    5d0c:	81 50       	subi	r24, 0x01	; 1
    5d0e:	80 83       	st	Z, r24
    5d10:	08 95       	ret
	 }else *Value=MaxValue;
    5d12:	40 83       	st	Z, r20
    5d14:	08 95       	ret

00005d16 <FSettingPumpID>:
}

char FSettingPumpID(){
    5d16:	9f 92       	push	r9
    5d18:	af 92       	push	r10
    5d1a:	bf 92       	push	r11
    5d1c:	cf 92       	push	r12
    5d1e:	df 92       	push	r13
    5d20:	ef 92       	push	r14
    5d22:	ff 92       	push	r15
    5d24:	0f 93       	push	r16
    5d26:	1f 93       	push	r17
    5d28:	df 93       	push	r29
    5d2a:	cf 93       	push	r28
    5d2c:	cd b7       	in	r28, 0x3d	; 61
    5d2e:	de b7       	in	r29, 0x3e	; 62
    5d30:	64 97       	sbiw	r28, 0x14	; 20
    5d32:	0f b6       	in	r0, 0x3f	; 63
    5d34:	f8 94       	cli
    5d36:	de bf       	out	0x3e, r29	; 62
    5d38:	0f be       	out	0x3f, r0	; 63
    5d3a:	cd bf       	out	0x3d, r28	; 61
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
	 switch (stMenuPumpID){
    5d3c:	80 91 f8 02 	lds	r24, 0x02F8
    5d40:	85 30       	cpi	r24, 0x05	; 5
    5d42:	09 f4       	brne	.+2      	; 0x5d46 <FSettingPumpID+0x30>
    5d44:	71 c1       	rjmp	.+738    	; 0x6028 <FSettingPumpID+0x312>
    5d46:	86 30       	cpi	r24, 0x06	; 6
    5d48:	90 f4       	brcc	.+36     	; 0x5d6e <FSettingPumpID+0x58>
    5d4a:	82 30       	cpi	r24, 0x02	; 2
    5d4c:	09 f4       	brne	.+2      	; 0x5d50 <FSettingPumpID+0x3a>
    5d4e:	87 c0       	rjmp	.+270    	; 0x5e5e <FSettingPumpID+0x148>
    5d50:	83 30       	cpi	r24, 0x03	; 3
    5d52:	30 f4       	brcc	.+12     	; 0x5d60 <FSettingPumpID+0x4a>
    5d54:	88 23       	and	r24, r24
    5d56:	f1 f0       	breq	.+60     	; 0x5d94 <FSettingPumpID+0x7e>
    5d58:	81 30       	cpi	r24, 0x01	; 1
    5d5a:	09 f0       	breq	.+2      	; 0x5d5e <FSettingPumpID+0x48>
    5d5c:	45 c2       	rjmp	.+1162   	; 0x61e8 <FSettingPumpID+0x4d2>
    5d5e:	2b c0       	rjmp	.+86     	; 0x5db6 <FSettingPumpID+0xa0>
    5d60:	83 30       	cpi	r24, 0x03	; 3
    5d62:	09 f4       	brne	.+2      	; 0x5d66 <FSettingPumpID+0x50>
    5d64:	3e c1       	rjmp	.+636    	; 0x5fe2 <FSettingPumpID+0x2cc>
    5d66:	84 30       	cpi	r24, 0x04	; 4
    5d68:	09 f0       	breq	.+2      	; 0x5d6c <FSettingPumpID+0x56>
    5d6a:	3e c2       	rjmp	.+1148   	; 0x61e8 <FSettingPumpID+0x4d2>
    5d6c:	56 c1       	rjmp	.+684    	; 0x601a <FSettingPumpID+0x304>
    5d6e:	88 30       	cpi	r24, 0x08	; 8
    5d70:	09 f4       	brne	.+2      	; 0x5d74 <FSettingPumpID+0x5e>
    5d72:	dd c1       	rjmp	.+954    	; 0x612e <FSettingPumpID+0x418>
    5d74:	89 30       	cpi	r24, 0x09	; 9
    5d76:	38 f4       	brcc	.+14     	; 0x5d86 <FSettingPumpID+0x70>
    5d78:	86 30       	cpi	r24, 0x06	; 6
    5d7a:	09 f4       	brne	.+2      	; 0x5d7e <FSettingPumpID+0x68>
    5d7c:	80 c1       	rjmp	.+768    	; 0x607e <FSettingPumpID+0x368>
    5d7e:	87 30       	cpi	r24, 0x07	; 7
    5d80:	09 f0       	breq	.+2      	; 0x5d84 <FSettingPumpID+0x6e>
    5d82:	32 c2       	rjmp	.+1124   	; 0x61e8 <FSettingPumpID+0x4d2>
    5d84:	17 c2       	rjmp	.+1070   	; 0x61b4 <FSettingPumpID+0x49e>
    5d86:	89 30       	cpi	r24, 0x09	; 9
    5d88:	09 f4       	brne	.+2      	; 0x5d8c <FSettingPumpID+0x76>
    5d8a:	1c c2       	rjmp	.+1080   	; 0x61c4 <FSettingPumpID+0x4ae>
    5d8c:	8a 30       	cpi	r24, 0x0A	; 10
    5d8e:	09 f0       	breq	.+2      	; 0x5d92 <FSettingPumpID+0x7c>
    5d90:	2b c2       	rjmp	.+1110   	; 0x61e8 <FSettingPumpID+0x4d2>
    5d92:	1e c2       	rjmp	.+1084   	; 0x61d0 <FSettingPumpID+0x4ba>
	 case mpInitPumpId:	      
	      //Disable PumpPooling
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    5d94:	80 91 00 01 	lds	r24, 0x0100
    5d98:	82 30       	cpi	r24, 0x02	; 2
    5d9a:	21 f4       	brne	.+8      	; 0x5da4 <FSettingPumpID+0x8e>
    5d9c:	8f e1       	ldi	r24, 0x1F	; 31
    5d9e:	60 e0       	ldi	r22, 0x00	; 0
    5da0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    5da4:	8e ee       	ldi	r24, 0xEE	; 238
    5da6:	92 e0       	ldi	r25, 0x02	; 2
    5da8:	65 e4       	ldi	r22, 0x45	; 69
    5daa:	70 e0       	ldi	r23, 0x00	; 0
    5dac:	48 e0       	ldi	r20, 0x08	; 8
    5dae:	50 e0       	ldi	r21, 0x00	; 0
    5db0:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
    5db4:	37 c1       	rjmp	.+622    	; 0x6024 <FSettingPumpID+0x30e>
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    5db6:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    5dba:	6e ee       	ldi	r22, 0xEE	; 238
    5dbc:	e6 2e       	mov	r14, r22
    5dbe:	62 e0       	ldi	r22, 0x02	; 2
    5dc0:	f6 2e       	mov	r15, r22
    5dc2:	05 e0       	ldi	r16, 0x05	; 5
    5dc4:	10 e0       	ldi	r17, 0x00	; 0
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    5dc6:	6e 01       	movw	r12, r28
    5dc8:	08 94       	sec
    5dca:	c1 1c       	adc	r12, r1
    5dcc:	d1 1c       	adc	r13, r1
    5dce:	5f ee       	ldi	r21, 0xEF	; 239
    5dd0:	a5 2e       	mov	r10, r21
    5dd2:	5d e0       	ldi	r21, 0x0D	; 13
    5dd4:	b5 2e       	mov	r11, r21
    5dd6:	d7 01       	movw	r26, r14
    5dd8:	2d 91       	ld	r18, X+
    5dda:	7d 01       	movw	r14, r26
    5ddc:	ed b7       	in	r30, 0x3d	; 61
    5dde:	fe b7       	in	r31, 0x3e	; 62
    5de0:	3c 97       	sbiw	r30, 0x0c	; 12
    5de2:	0f b6       	in	r0, 0x3f	; 63
    5de4:	f8 94       	cli
    5de6:	fe bf       	out	0x3e, r31	; 62
    5de8:	0f be       	out	0x3f, r0	; 63
    5dea:	ed bf       	out	0x3d, r30	; 61
    5dec:	31 96       	adiw	r30, 0x01	; 1
    5dee:	ad b7       	in	r26, 0x3d	; 61
    5df0:	be b7       	in	r27, 0x3e	; 62
    5df2:	12 96       	adiw	r26, 0x02	; 2
    5df4:	dc 92       	st	X, r13
    5df6:	ce 92       	st	-X, r12
    5df8:	11 97       	sbiw	r26, 0x01	; 1
    5dfa:	b3 82       	std	Z+3, r11	; 0x03
    5dfc:	a2 82       	std	Z+2, r10	; 0x02
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    5dfe:	c8 01       	movw	r24, r16
    5e00:	04 97       	sbiw	r24, 0x04	; 4
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    5e02:	95 83       	std	Z+5, r25	; 0x05
    5e04:	84 83       	std	Z+4, r24	; 0x04
    5e06:	26 83       	std	Z+6, r18	; 0x06
    5e08:	17 82       	std	Z+7, r1	; 0x07
    5e0a:	11 87       	std	Z+9, r17	; 0x09
    5e0c:	00 87       	std	Z+8, r16	; 0x08
    5e0e:	d7 01       	movw	r26, r14
    5e10:	13 96       	adiw	r26, 0x03	; 3
    5e12:	8c 91       	ld	r24, X
    5e14:	82 87       	std	Z+10, r24	; 0x0a
    5e16:	13 86       	std	Z+11, r1	; 0x0b
    5e18:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  lcd_print((iLoop+1),1,lcdteks);
    5e1c:	ed b7       	in	r30, 0x3d	; 61
    5e1e:	fe b7       	in	r31, 0x3e	; 62
    5e20:	3c 96       	adiw	r30, 0x0c	; 12
    5e22:	0f b6       	in	r0, 0x3f	; 63
    5e24:	f8 94       	cli
    5e26:	fe bf       	out	0x3e, r31	; 62
    5e28:	0f be       	out	0x3f, r0	; 63
    5e2a:	ed bf       	out	0x3d, r30	; 61
    5e2c:	80 2f       	mov	r24, r16
    5e2e:	84 50       	subi	r24, 0x04	; 4
    5e30:	61 e0       	ldi	r22, 0x01	; 1
    5e32:	a6 01       	movw	r20, r12
    5e34:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    5e38:	0f 5f       	subi	r16, 0xFF	; 255
    5e3a:	1f 4f       	sbci	r17, 0xFF	; 255
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
    5e3c:	09 30       	cpi	r16, 0x09	; 9
    5e3e:	11 05       	cpc	r17, r1
    5e40:	51 f6       	brne	.-108    	; 0x5dd6 <FSettingPumpID+0xc0>
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
			  lcd_print((iLoop+1),1,lcdteks);
          }
          lcd_printf(3,15,PSTR("*)Back"));
    5e42:	83 e0       	ldi	r24, 0x03	; 3
    5e44:	6f e0       	ldi	r22, 0x0F	; 15
    5e46:	48 ee       	ldi	r20, 0xE8	; 232
    5e48:	5d e0       	ldi	r21, 0x0D	; 13
    5e4a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(4,15,PSTR("#)Save"));
    5e4e:	84 e0       	ldi	r24, 0x04	; 4
    5e50:	6f e0       	ldi	r22, 0x0F	; 15
    5e52:	41 ee       	ldi	r20, 0xE1	; 225
    5e54:	5d e0       	ldi	r21, 0x0D	; 13
    5e56:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stMenuPumpID=mpSelectInput;
    5e5a:	82 e0       	ldi	r24, 0x02	; 2
    5e5c:	b0 c1       	rjmp	.+864    	; 0x61be <FSettingPumpID+0x4a8>
	      break;
     case mpSelectInput:
	      KeyPressed=_key_scan(1);
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
    5e60:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    5e64:	98 2e       	mov	r9, r24
	      KeyChar=_key_btn(KeyPressed);
    5e66:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
          if ((KeyChar>='1') && (KeyChar<='8')){
    5e6a:	98 2f       	mov	r25, r24
    5e6c:	91 53       	subi	r25, 0x31	; 49
    5e6e:	98 30       	cpi	r25, 0x08	; 8
    5e70:	08 f0       	brcs	.+2      	; 0x5e74 <FSettingPumpID+0x15e>
    5e72:	7f c0       	rjmp	.+254    	; 0x5f72 <FSettingPumpID+0x25c>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
    5e74:	90 91 00 01 	lds	r25, 0x0100
    5e78:	91 30       	cpi	r25, 0x01	; 1
    5e7a:	19 f0       	breq	.+6      	; 0x5e82 <FSettingPumpID+0x16c>
    5e7c:	92 30       	cpi	r25, 0x02	; 2
    5e7e:	a1 f5       	brne	.+104    	; 0x5ee8 <FSettingPumpID+0x1d2>
    5e80:	17 c0       	rjmp	.+46     	; 0x5eb0 <FSettingPumpID+0x19a>
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
    5e82:	90 91 f7 02 	lds	r25, 0x02F7
    5e86:	99 23       	and	r25, r25
    5e88:	41 f4       	brne	.+16     	; 0x5e9a <FSettingPumpID+0x184>
    5e8a:	e8 2f       	mov	r30, r24
    5e8c:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    5e8e:	e3 54       	subi	r30, 0x43	; 67
    5e90:	fd 4f       	sbci	r31, 0xFD	; 253
    5e92:	80 81       	ld	r24, Z
    5e94:	83 36       	cpi	r24, 0x63	; 99
    5e96:	c8 f4       	brcc	.+50     	; 0x5eca <FSettingPumpID+0x1b4>
    5e98:	16 c0       	rjmp	.+44     	; 0x5ec6 <FSettingPumpID+0x1b0>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
    5e9a:	91 30       	cpi	r25, 0x01	; 1
    5e9c:	29 f5       	brne	.+74     	; 0x5ee8 <FSettingPumpID+0x1d2>
    5e9e:	e8 2f       	mov	r30, r24
    5ea0:	f0 e0       	ldi	r31, 0x00	; 0
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    5ea2:	e3 54       	subi	r30, 0x43	; 67
    5ea4:	fd 4f       	sbci	r31, 0xFD	; 253
    5ea6:	80 81       	ld	r24, Z
    5ea8:	88 23       	and	r24, r24
    5eaa:	d1 f4       	brne	.+52     	; 0x5ee0 <FSettingPumpID+0x1ca>
	     (*Value)--;
	 }else *Value=MaxValue;
    5eac:	83 e6       	ldi	r24, 0x63	; 99
    5eae:	1b c0       	rjmp	.+54     	; 0x5ee6 <FSettingPumpID+0x1d0>
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
    5eb0:	90 91 f7 02 	lds	r25, 0x02F7
    5eb4:	99 23       	and	r25, r25
    5eb6:	59 f4       	brne	.+22     	; 0x5ece <FSettingPumpID+0x1b8>
    5eb8:	e8 2f       	mov	r30, r24
    5eba:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    5ebc:	e3 54       	subi	r30, 0x43	; 67
    5ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    5ec0:	80 81       	ld	r24, Z
    5ec2:	80 31       	cpi	r24, 0x10	; 16
    5ec4:	10 f4       	brcc	.+4      	; 0x5eca <FSettingPumpID+0x1b4>
	     (*Value)++;
    5ec6:	8f 5f       	subi	r24, 0xFF	; 255
    5ec8:	0e c0       	rjmp	.+28     	; 0x5ee6 <FSettingPumpID+0x1d0>
	 }else *Value=MinValue;
    5eca:	10 82       	st	Z, r1
    5ecc:	0d c0       	rjmp	.+26     	; 0x5ee8 <FSettingPumpID+0x1d2>
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
    5ece:	91 30       	cpi	r25, 0x01	; 1
    5ed0:	59 f4       	brne	.+22     	; 0x5ee8 <FSettingPumpID+0x1d2>
    5ed2:	e8 2f       	mov	r30, r24
    5ed4:	f0 e0       	ldi	r31, 0x00	; 0
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    5ed6:	e3 54       	subi	r30, 0x43	; 67
    5ed8:	fd 4f       	sbci	r31, 0xFD	; 253
    5eda:	80 81       	ld	r24, Z
    5edc:	88 23       	and	r24, r24
    5ede:	11 f0       	breq	.+4      	; 0x5ee4 <FSettingPumpID+0x1ce>
	     (*Value)--;
    5ee0:	81 50       	subi	r24, 0x01	; 1
    5ee2:	01 c0       	rjmp	.+2      	; 0x5ee6 <FSettingPumpID+0x1d0>
	 }else *Value=MaxValue;
    5ee4:	80 e1       	ldi	r24, 0x10	; 16
    5ee6:	80 83       	st	Z, r24
    5ee8:	4e ee       	ldi	r20, 0xEE	; 238
    5eea:	e4 2e       	mov	r14, r20
    5eec:	42 e0       	ldi	r20, 0x02	; 2
    5eee:	f4 2e       	mov	r15, r20
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    5ef0:	05 e0       	ldi	r16, 0x05	; 5
    5ef2:	10 e0       	ldi	r17, 0x00	; 0
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    5ef4:	6e 01       	movw	r12, r28
    5ef6:	08 94       	sec
    5ef8:	c1 1c       	adc	r12, r1
    5efa:	d1 1c       	adc	r13, r1
    5efc:	3d ec       	ldi	r19, 0xCD	; 205
    5efe:	a3 2e       	mov	r10, r19
    5f00:	3d e0       	ldi	r19, 0x0D	; 13
    5f02:	b3 2e       	mov	r11, r19
    5f04:	d7 01       	movw	r26, r14
    5f06:	2d 91       	ld	r18, X+
    5f08:	7d 01       	movw	r14, r26
    5f0a:	ed b7       	in	r30, 0x3d	; 61
    5f0c:	fe b7       	in	r31, 0x3e	; 62
    5f0e:	3c 97       	sbiw	r30, 0x0c	; 12
    5f10:	0f b6       	in	r0, 0x3f	; 63
    5f12:	f8 94       	cli
    5f14:	fe bf       	out	0x3e, r31	; 62
    5f16:	0f be       	out	0x3f, r0	; 63
    5f18:	ed bf       	out	0x3d, r30	; 61
    5f1a:	31 96       	adiw	r30, 0x01	; 1
    5f1c:	ad b7       	in	r26, 0x3d	; 61
    5f1e:	be b7       	in	r27, 0x3e	; 62
    5f20:	12 96       	adiw	r26, 0x02	; 2
    5f22:	dc 92       	st	X, r13
    5f24:	ce 92       	st	-X, r12
    5f26:	11 97       	sbiw	r26, 0x01	; 1
    5f28:	b3 82       	std	Z+3, r11	; 0x03
    5f2a:	a2 82       	std	Z+2, r10	; 0x02
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    5f2c:	c8 01       	movw	r24, r16
    5f2e:	04 97       	sbiw	r24, 0x04	; 4
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    5f30:	95 83       	std	Z+5, r25	; 0x05
    5f32:	84 83       	std	Z+4, r24	; 0x04
    5f34:	26 83       	std	Z+6, r18	; 0x06
    5f36:	17 82       	std	Z+7, r1	; 0x07
    5f38:	11 87       	std	Z+9, r17	; 0x09
    5f3a:	00 87       	std	Z+8, r16	; 0x08
    5f3c:	d7 01       	movw	r26, r14
    5f3e:	13 96       	adiw	r26, 0x03	; 3
    5f40:	8c 91       	ld	r24, X
    5f42:	82 87       	std	Z+10, r24	; 0x0a
    5f44:	13 86       	std	Z+11, r1	; 0x0b
    5f46:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				  lcd_print((iLoop+1),1,lcdteks);
    5f4a:	ed b7       	in	r30, 0x3d	; 61
    5f4c:	fe b7       	in	r31, 0x3e	; 62
    5f4e:	3c 96       	adiw	r30, 0x0c	; 12
    5f50:	0f b6       	in	r0, 0x3f	; 63
    5f52:	f8 94       	cli
    5f54:	fe bf       	out	0x3e, r31	; 62
    5f56:	0f be       	out	0x3f, r0	; 63
    5f58:	ed bf       	out	0x3d, r30	; 61
    5f5a:	80 2f       	mov	r24, r16
    5f5c:	84 50       	subi	r24, 0x04	; 4
    5f5e:	61 e0       	ldi	r22, 0x01	; 1
    5f60:	a6 01       	movw	r20, r12
    5f62:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    5f66:	0f 5f       	subi	r16, 0xFF	; 255
    5f68:	1f 4f       	sbci	r17, 0xFF	; 255
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
    5f6a:	09 30       	cpi	r16, 0x09	; 9
    5f6c:	11 05       	cpc	r17, r1
    5f6e:	51 f6       	brne	.-108    	; 0x5f04 <FSettingPumpID+0x1ee>
    5f70:	26 c0       	rjmp	.+76     	; 0x5fbe <FSettingPumpID+0x2a8>
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
    5f72:	83 32       	cpi	r24, 0x23	; 35
    5f74:	f9 f4       	brne	.+62     	; 0x5fb4 <FSettingPumpID+0x29e>
		      //Evaluate same PumpID
			  PumpCount=0;
    5f76:	ae ee       	ldi	r26, 0xEE	; 238
    5f78:	b2 e0       	ldi	r27, 0x02	; 2
    5f7a:	80 e0       	ldi	r24, 0x00	; 0
			  for (i=0;i<8;i++){
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
			       CheckPump=PPumpId[i];
    5f7e:	3d 91       	ld	r19, X+
				   if (CheckPump>0){
    5f80:	33 23       	and	r19, r19
    5f82:	69 f0       	breq	.+26     	; 0x5f9e <FSettingPumpID+0x288>
    5f84:	ee ee       	ldi	r30, 0xEE	; 238
    5f86:	f2 e0       	ldi	r31, 0x02	; 2
    5f88:	20 e0       	ldi	r18, 0x00	; 0
				      for(j=0;j<8;j++){					      
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
    5f8a:	92 17       	cp	r25, r18
    5f8c:	21 f0       	breq	.+8      	; 0x5f96 <FSettingPumpID+0x280>
    5f8e:	40 81       	ld	r20, Z
    5f90:	34 17       	cp	r19, r20
    5f92:	09 f4       	brne	.+2      	; 0x5f96 <FSettingPumpID+0x280>
						       PumpCount++;
    5f94:	8f 5f       	subi	r24, 0xFF	; 255
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
				   if (CheckPump>0){
				      for(j=0;j<8;j++){					      
    5f96:	2f 5f       	subi	r18, 0xFF	; 255
    5f98:	31 96       	adiw	r30, 0x01	; 1
    5f9a:	28 30       	cpi	r18, 0x08	; 8
    5f9c:	b1 f7       	brne	.-20     	; 0x5f8a <FSettingPumpID+0x274>
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
    5f9e:	9f 5f       	subi	r25, 0xFF	; 255
    5fa0:	98 30       	cpi	r25, 0x08	; 8
    5fa2:	69 f7       	brne	.-38     	; 0x5f7e <FSettingPumpID+0x268>
    5fa4:	80 93 ec 02 	sts	0x02EC, r24
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
						       PumpCount++;
					  }
				    }				     
				  }			       			  			  
			  if (PumpCount>0) stMenuPumpID=mpSaveFailed;
    5fa8:	88 23       	and	r24, r24
    5faa:	11 f0       	breq	.+4      	; 0x5fb0 <FSettingPumpID+0x29a>
    5fac:	83 e0       	ldi	r24, 0x03	; 3
    5fae:	05 c0       	rjmp	.+10     	; 0x5fba <FSettingPumpID+0x2a4>
			  else stMenuPumpID=mpSavingPumpId;
    5fb0:	85 e0       	ldi	r24, 0x05	; 5
    5fb2:	03 c0       	rjmp	.+6      	; 0x5fba <FSettingPumpID+0x2a4>
		  }	
		  else if (KeyChar=='*'){
    5fb4:	8a 32       	cpi	r24, 0x2A	; 42
    5fb6:	19 f4       	brne	.+6      	; 0x5fbe <FSettingPumpID+0x2a8>
		      stMenuPumpID=mpExitPumpId;
    5fb8:	8a e0       	ldi	r24, 0x0A	; 10
    5fba:	80 93 f8 02 	sts	0x02F8, r24
		  }
		  if (KeyPressed==_KEY_SHIFT){
    5fbe:	f9 2d       	mov	r31, r9
    5fc0:	fb 37       	cpi	r31, 0x7B	; 123
    5fc2:	09 f0       	breq	.+2      	; 0x5fc6 <FSettingPumpID+0x2b0>
    5fc4:	11 c1       	rjmp	.+546    	; 0x61e8 <FSettingPumpID+0x4d2>
		      if (IsShift==False)IsShift=True;
    5fc6:	80 91 f7 02 	lds	r24, 0x02F7
    5fca:	88 23       	and	r24, r24
    5fcc:	21 f4       	brne	.+8      	; 0x5fd6 <FSettingPumpID+0x2c0>
    5fce:	81 e0       	ldi	r24, 0x01	; 1
    5fd0:	80 93 f7 02 	sts	0x02F7, r24
    5fd4:	09 c1       	rjmp	.+530    	; 0x61e8 <FSettingPumpID+0x4d2>
			  else
			  if (IsShift==True)IsShift=False;
    5fd6:	81 30       	cpi	r24, 0x01	; 1
    5fd8:	09 f0       	breq	.+2      	; 0x5fdc <FSettingPumpID+0x2c6>
    5fda:	06 c1       	rjmp	.+524    	; 0x61e8 <FSettingPumpID+0x4d2>
    5fdc:	10 92 f7 02 	sts	0x02F7, r1
    5fe0:	03 c1       	rjmp	.+518    	; 0x61e8 <FSettingPumpID+0x4d2>
		  }
	      break;
     case mpSaveFailed:
	      lcd_clear();
    5fe2:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("      Warning!      "));
    5fe6:	81 e0       	ldi	r24, 0x01	; 1
    5fe8:	61 e0       	ldi	r22, 0x01	; 1
    5fea:	48 eb       	ldi	r20, 0xB8	; 184
    5fec:	5d e0       	ldi	r21, 0x0D	; 13
    5fee:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
    5ff2:	82 e0       	ldi	r24, 0x02	; 2
    5ff4:	61 e0       	ldi	r22, 0x01	; 1
    5ff6:	43 ea       	ldi	r20, 0xA3	; 163
    5ff8:	5d e0       	ldi	r21, 0x0D	; 13
    5ffa:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
    5ffe:	83 e0       	ldi	r24, 0x03	; 3
    6000:	61 e0       	ldi	r22, 0x01	; 1
    6002:	4e e8       	ldi	r20, 0x8E	; 142
    6004:	5d e0       	ldi	r21, 0x0D	; 13
    6006:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  system_beep(2);
    600a:	82 e0       	ldi	r24, 0x02	; 2
    600c:	90 e0       	ldi	r25, 0x00	; 0
    600e:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
	      TimDisplay=0;
    6012:	10 92 70 02 	sts	0x0270, r1
	      stMenuPumpID=mpDisplayFailed;
    6016:	84 e0       	ldi	r24, 0x04	; 4
    6018:	d2 c0       	rjmp	.+420    	; 0x61be <FSettingPumpID+0x4a8>
          break;	 
     case mpDisplayFailed:
	      if (TimDisplay>6) stMenuPumpID=mpDisplayPumpId;
    601a:	80 91 70 02 	lds	r24, 0x0270
    601e:	87 30       	cpi	r24, 0x07	; 7
    6020:	08 f4       	brcc	.+2      	; 0x6024 <FSettingPumpID+0x30e>
    6022:	e2 c0       	rjmp	.+452    	; 0x61e8 <FSettingPumpID+0x4d2>
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	cb c0       	rjmp	.+406    	; 0x61be <FSettingPumpID+0x4a8>
	      break;
     case mpSavingPumpId:
	      eeprom_write_block((const void*) &PPumpId, (void*) &DefPumpMap, 8);
    6028:	8e ee       	ldi	r24, 0xEE	; 238
    602a:	92 e0       	ldi	r25, 0x02	; 2
    602c:	65 e4       	ldi	r22, 0x45	; 69
    602e:	70 e0       	ldi	r23, 0x00	; 0
    6030:	48 e0       	ldi	r20, 0x08	; 8
    6032:	50 e0       	ldi	r21, 0x00	; 0
    6034:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
		  if (IFType==IT_STANDALONE){
    6038:	80 91 00 01 	lds	r24, 0x0100
    603c:	82 30       	cpi	r24, 0x02	; 2
    603e:	d9 f4       	brne	.+54     	; 0x6076 <FSettingPumpID+0x360>
		      //SendConfig to Slave
			  lcd_clear();
    6040:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
              lcd_printf(1,1,PSTR("-PumpID-"));
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	61 e0       	ldi	r22, 0x01	; 1
    6048:	45 e8       	ldi	r20, 0x85	; 133
    604a:	5d e0       	ldi	r21, 0x0D	; 13
    604c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
              lcd_printf(2,1,PSTR("Saving.."));
    6050:	82 e0       	ldi	r24, 0x02	; 2
    6052:	61 e0       	ldi	r22, 0x01	; 1
    6054:	4c e7       	ldi	r20, 0x7C	; 124
    6056:	5d e0       	ldi	r21, 0x0D	; 13
    6058:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			  Idx=0;
    605c:	10 92 f6 02 	sts	0x02F6, r1
			  PumpCount=0;
    6060:	10 92 ec 02 	sts	0x02EC, r1
              eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    6064:	8e ee       	ldi	r24, 0xEE	; 238
    6066:	92 e0       	ldi	r25, 0x02	; 2
    6068:	65 e4       	ldi	r22, 0x45	; 69
    606a:	70 e0       	ldi	r23, 0x00	; 0
    606c:	48 e0       	ldi	r20, 0x08	; 8
    606e:	50 e0       	ldi	r21, 0x00	; 0
    6070:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
    6074:	a3 c0       	rjmp	.+326    	; 0x61bc <FSettingPumpID+0x4a6>
              stMenuPumpID=mpSendConfigToSlave;
		  }else if (IFType==IT_SLAVE){
    6076:	81 30       	cpi	r24, 0x01	; 1
    6078:	09 f0       	breq	.+2      	; 0x607c <FSettingPumpID+0x366>
    607a:	b6 c0       	rjmp	.+364    	; 0x61e8 <FSettingPumpID+0x4d2>
    607c:	a7 c0       	rjmp	.+334    	; 0x61cc <FSettingPumpID+0x4b6>
		      //SendConfig to Slave              
              stMenuPumpID=mpExitPumpId;
		  }
	      break;
     case mpSendConfigToSlave:
	      IsStandaloneAcknoledge=False;
    607e:	10 92 60 02 	sts	0x0260, r1
	      if (PPumpId[Idx]!=0){
    6082:	60 91 f6 02 	lds	r22, 0x02F6
    6086:	86 2f       	mov	r24, r22
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	fc 01       	movw	r30, r24
    608c:	e2 51       	subi	r30, 0x12	; 18
    608e:	fd 4f       	sbci	r31, 0xFD	; 253
    6090:	30 81       	ld	r19, Z
    6092:	33 23       	and	r19, r19
    6094:	89 f0       	breq	.+34     	; 0x60b8 <FSettingPumpID+0x3a2>
		      PumpCount++;
    6096:	20 91 ec 02 	lds	r18, 0x02EC
    609a:	2f 5f       	subi	r18, 0xFF	; 255
    609c:	20 93 ec 02 	sts	0x02EC, r18
		      MsgPumpId=((Idx<<4)|(0x0F&PPumpId[Idx]));//[Idx][PumpId]
    60a0:	63 2f       	mov	r22, r19
    60a2:	6f 70       	andi	r22, 0x0F	; 15
    60a4:	24 e0       	ldi	r18, 0x04	; 4
    60a6:	88 0f       	add	r24, r24
    60a8:	99 1f       	adc	r25, r25
    60aa:	2a 95       	dec	r18
    60ac:	e1 f7       	brne	.-8      	; 0x60a6 <FSettingPumpID+0x390>
    60ae:	68 2b       	or	r22, r24
    60b0:	60 93 ed 02 	sts	0x02ED, r22
	         //SendPoolingCommand(SC_SET_PUMPID,MsgPumpId);
			  SendSlaveCommand(SC_SET_PUMPID,MsgPumpId);
    60b4:	8d e1       	ldi	r24, 0x1D	; 29
    60b6:	01 c0       	rjmp	.+2      	; 0x60ba <FSettingPumpID+0x3a4>
		  }else SendSlaveCommand(SC_CLEAR_PUMPID,Idx);//SendPoolingCommand(SC_CLEAR_PUMPID,Idx);
    60b8:	8e e1       	ldi	r24, 0x1E	; 30
    60ba:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
		  sprintf_P(lcdteks,PSTR("Id[%d]=%.2d  "),Idx+1,PPumpId[Idx]);
    60be:	80 91 f6 02 	lds	r24, 0x02F6
    60c2:	90 e0       	ldi	r25, 0x00	; 0
    60c4:	2d b7       	in	r18, 0x3d	; 61
    60c6:	3e b7       	in	r19, 0x3e	; 62
    60c8:	28 50       	subi	r18, 0x08	; 8
    60ca:	30 40       	sbci	r19, 0x00	; 0
    60cc:	0f b6       	in	r0, 0x3f	; 63
    60ce:	f8 94       	cli
    60d0:	3e bf       	out	0x3e, r19	; 62
    60d2:	0f be       	out	0x3f, r0	; 63
    60d4:	2d bf       	out	0x3d, r18	; 61
    60d6:	ed b7       	in	r30, 0x3d	; 61
    60d8:	fe b7       	in	r31, 0x3e	; 62
    60da:	31 96       	adiw	r30, 0x01	; 1
    60dc:	8e 01       	movw	r16, r28
    60de:	0f 5f       	subi	r16, 0xFF	; 255
    60e0:	1f 4f       	sbci	r17, 0xFF	; 255
    60e2:	ad b7       	in	r26, 0x3d	; 61
    60e4:	be b7       	in	r27, 0x3e	; 62
    60e6:	12 96       	adiw	r26, 0x02	; 2
    60e8:	1c 93       	st	X, r17
    60ea:	0e 93       	st	-X, r16
    60ec:	11 97       	sbiw	r26, 0x01	; 1
    60ee:	2e e6       	ldi	r18, 0x6E	; 110
    60f0:	3d e0       	ldi	r19, 0x0D	; 13
    60f2:	33 83       	std	Z+3, r19	; 0x03
    60f4:	22 83       	std	Z+2, r18	; 0x02
    60f6:	9c 01       	movw	r18, r24
    60f8:	2f 5f       	subi	r18, 0xFF	; 255
    60fa:	3f 4f       	sbci	r19, 0xFF	; 255
    60fc:	35 83       	std	Z+5, r19	; 0x05
    60fe:	24 83       	std	Z+4, r18	; 0x04
    6100:	82 51       	subi	r24, 0x12	; 18
    6102:	9d 4f       	sbci	r25, 0xFD	; 253
    6104:	dc 01       	movw	r26, r24
    6106:	8c 91       	ld	r24, X
    6108:	86 83       	std	Z+6, r24	; 0x06
    610a:	17 82       	std	Z+7, r1	; 0x07
    610c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    6110:	ed b7       	in	r30, 0x3d	; 61
    6112:	fe b7       	in	r31, 0x3e	; 62
    6114:	38 96       	adiw	r30, 0x08	; 8
    6116:	0f b6       	in	r0, 0x3f	; 63
    6118:	f8 94       	cli
    611a:	fe bf       	out	0x3e, r31	; 62
    611c:	0f be       	out	0x3f, r0	; 63
    611e:	ed bf       	out	0x3d, r30	; 61
    6120:	83 e0       	ldi	r24, 0x03	; 3
    6122:	61 e0       	ldi	r22, 0x01	; 1
    6124:	a8 01       	movw	r20, r16
    6126:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          stMenuPumpID=mpWaitSlaveReply;
    612a:	88 e0       	ldi	r24, 0x08	; 8
    612c:	48 c0       	rjmp	.+144    	; 0x61be <FSettingPumpID+0x4a8>
	      break;
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
    612e:	81 e0       	ldi	r24, 0x01	; 1
    6130:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    6134:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if (KeyChar=='*'){
    6138:	8a 32       	cpi	r24, 0x2A	; 42
    613a:	79 f4       	brne	.+30     	; 0x615a <FSettingPumpID+0x444>
		      system_beep(2);
    613c:	82 e0       	ldi	r24, 0x02	; 2
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
		      lcd_printf(2,1,PSTR("Cancel     "));
    6144:	82 e0       	ldi	r24, 0x02	; 2
    6146:	61 e0       	ldi	r22, 0x01	; 1
    6148:	42 e6       	ldi	r20, 0x62	; 98
    614a:	5d e0       	ldi	r21, 0x0D	; 13
    614c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			  TimDisplay=0;
    6150:	10 92 70 02 	sts	0x0270, r1
		      stMenuPumpID=mpDelayExitPumpId;
    6154:	89 e0       	ldi	r24, 0x09	; 9
    6156:	80 93 f8 02 	sts	0x02F8, r24
			  }
          if (IsStandaloneAcknoledge==True){
    615a:	00 91 60 02 	lds	r16, 0x0260
    615e:	01 30       	cpi	r16, 0x01	; 1
    6160:	09 f0       	breq	.+2      	; 0x6164 <FSettingPumpID+0x44e>
    6162:	42 c0       	rjmp	.+132    	; 0x61e8 <FSettingPumpID+0x4d2>
		      Idx++;
    6164:	80 91 f6 02 	lds	r24, 0x02F6
    6168:	8f 5f       	subi	r24, 0xFF	; 255
    616a:	80 93 f6 02 	sts	0x02F6, r24
		      if (Idx<8){//Finish, Send MaxPumpCount
    616e:	88 30       	cpi	r24, 0x08	; 8
    6170:	b8 f4       	brcc	.+46     	; 0x61a0 <FSettingPumpID+0x48a>
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
    6172:	84 e4       	ldi	r24, 0x44	; 68
    6174:	91 e0       	ldi	r25, 0x01	; 1
    6176:	60 91 ec 02 	lds	r22, 0x02EC
    617a:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    617e:	84 e4       	ldi	r24, 0x44	; 68
    6180:	91 e0       	ldi	r25, 0x01	; 1
    6182:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    6186:	80 93 3a 02 	sts	0x023A, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    618a:	95 e1       	ldi	r25, 0x15	; 21
    618c:	90 93 85 06 	sts	0x0685, r25
	 PoolMsg=plMsg;
    6190:	80 93 b1 0c 	sts	0x0CB1, r24
     IsControlPooling=True;
    6194:	00 93 62 02 	sts	0x0262, r16
		      Idx++;
		      if (Idx<8){//Finish, Send MaxPumpCount
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
                  SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PumpCountMax);
			      TimDisplay=0;		 
    6198:	10 92 70 02 	sts	0x0270, r1
				  stMenuPumpID=mpDelaySaveConfig;
    619c:	87 e0       	ldi	r24, 0x07	; 7
    619e:	0f c0       	rjmp	.+30     	; 0x61be <FSettingPumpID+0x4a8>
			  }else{lcd_printf(2,1,PSTR("Completed"));
    61a0:	82 e0       	ldi	r24, 0x02	; 2
    61a2:	61 e0       	ldi	r22, 0x01	; 1
    61a4:	48 e5       	ldi	r20, 0x58	; 88
    61a6:	5d e0       	ldi	r21, 0x0D	; 13
    61a8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					TimDisplay=0;
    61ac:	10 92 70 02 	sts	0x0270, r1
				    stMenuPumpID=mpDelayExitPumpId;
    61b0:	89 e0       	ldi	r24, 0x09	; 9
    61b2:	05 c0       	rjmp	.+10     	; 0x61be <FSettingPumpID+0x4a8>
				   }
			  }		  
	      break;
     case mpDelaySaveConfig:
	      if (TimDisplay>2)stMenuPumpID=mpSendConfigToSlave;
    61b4:	80 91 70 02 	lds	r24, 0x0270
    61b8:	83 30       	cpi	r24, 0x03	; 3
    61ba:	b0 f0       	brcs	.+44     	; 0x61e8 <FSettingPumpID+0x4d2>
    61bc:	86 e0       	ldi	r24, 0x06	; 6
    61be:	80 93 f8 02 	sts	0x02F8, r24
    61c2:	12 c0       	rjmp	.+36     	; 0x61e8 <FSettingPumpID+0x4d2>
	      break;
     case mpDelayExitPumpId:
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
    61c4:	80 91 70 02 	lds	r24, 0x0270
    61c8:	89 30       	cpi	r24, 0x09	; 9
    61ca:	70 f0       	brcs	.+28     	; 0x61e8 <FSettingPumpID+0x4d2>
    61cc:	8a e0       	ldi	r24, 0x0A	; 10
    61ce:	f7 cf       	rjmp	.-18     	; 0x61be <FSettingPumpID+0x4a8>
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
    61d0:	80 91 00 01 	lds	r24, 0x0100
    61d4:	82 30       	cpi	r24, 0x02	; 2
    61d6:	21 f4       	brne	.+8      	; 0x61e0 <FSettingPumpID+0x4ca>
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    61d8:	80 e2       	ldi	r24, 0x20	; 32
    61da:	60 e0       	ldi	r22, 0x00	; 0
    61dc:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
    61e0:	10 92 f8 02 	sts	0x02F8, r1
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	      Result=MENU_DONE;
    61e4:	81 e0       	ldi	r24, 0x01	; 1
          stMenuPumpID=mpInitPumpId;
	      break;
    61e6:	01 c0       	rjmp	.+2      	; 0x61ea <FSettingPumpID+0x4d4>
     static char stMenuPumpID=mpInitPumpId,IsShift=False;
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
    61e8:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
	      break;
	 }
   return Result;
}
    61ea:	64 96       	adiw	r28, 0x14	; 20
    61ec:	0f b6       	in	r0, 0x3f	; 63
    61ee:	f8 94       	cli
    61f0:	de bf       	out	0x3e, r29	; 62
    61f2:	0f be       	out	0x3f, r0	; 63
    61f4:	cd bf       	out	0x3d, r28	; 61
    61f6:	cf 91       	pop	r28
    61f8:	df 91       	pop	r29
    61fa:	1f 91       	pop	r17
    61fc:	0f 91       	pop	r16
    61fe:	ff 90       	pop	r15
    6200:	ef 90       	pop	r14
    6202:	df 90       	pop	r13
    6204:	cf 90       	pop	r12
    6206:	bf 90       	pop	r11
    6208:	af 90       	pop	r10
    620a:	9f 90       	pop	r9
    620c:	08 95       	ret

0000620e <_menu_pumpid>:

void _menu_pumpid(void){
	while(1){
	   if (FSettingPumpID()==MENU_DONE){
    620e:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <FSettingPumpID>
    6212:	81 30       	cpi	r24, 0x01	; 1
    6214:	e1 f7       	brne	.-8      	; 0x620e <_menu_pumpid>
	       break;
	   }	   
	}
}
    6216:	08 95       	ret

00006218 <_menu_pumpprodinput>:
				*/
		}
	}
}

void _menu_pumpprodinput(unsigned char __select){
    6218:	7f 92       	push	r7
    621a:	8f 92       	push	r8
    621c:	9f 92       	push	r9
    621e:	af 92       	push	r10
    6220:	bf 92       	push	r11
    6222:	cf 92       	push	r12
    6224:	df 92       	push	r13
    6226:	ef 92       	push	r14
    6228:	ff 92       	push	r15
    622a:	0f 93       	push	r16
    622c:	1f 93       	push	r17
    622e:	df 93       	push	r29
    6230:	cf 93       	push	r28
    6232:	cd b7       	in	r28, 0x3d	; 61
    6234:	de b7       	in	r29, 0x3e	; 62
    6236:	a8 97       	sbiw	r28, 0x28	; 40
    6238:	0f b6       	in	r0, 0x3f	; 63
    623a:	f8 94       	cli
    623c:	de bf       	out	0x3e, r29	; 62
    623e:	0f be       	out	0x3f, r0	; 63
    6240:	cd bf       	out	0x3d, r28	; 61
    6242:	a8 2e       	mov	r10, r24
	char 			__pump_prod[6],__pump_id[8];
	unsigned char	i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];

	eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    6244:	1c e0       	ldi	r17, 0x0C	; 12
    6246:	e1 2e       	mov	r14, r17
    6248:	f1 2c       	mov	r15, r1
    624a:	ec 0e       	add	r14, r28
    624c:	fd 1e       	adc	r15, r29
    624e:	c7 01       	movw	r24, r14
    6250:	65 e4       	ldi	r22, 0x45	; 69
    6252:	70 e0       	ldi	r23, 0x00	; 0
    6254:	48 e0       	ldi	r20, 0x08	; 8
    6256:	50 e0       	ldi	r21, 0x00	; 0
    6258:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	eeprom_read_block((void*) &__pump_prod, (const void*) &DefNozzleMap[__select], 6);
    625c:	86 e0       	ldi	r24, 0x06	; 6
    625e:	9a 2d       	mov	r25, r10
    6260:	98 9f       	mul	r25, r24
    6262:	60 01       	movw	r12, r0
    6264:	11 24       	eor	r1, r1
    6266:	a5 e5       	ldi	r26, 0x55	; 85
    6268:	b0 e0       	ldi	r27, 0x00	; 0
    626a:	ca 0e       	add	r12, r26
    626c:	db 1e       	adc	r13, r27
    626e:	b6 e0       	ldi	r27, 0x06	; 6
    6270:	8b 2e       	mov	r8, r27
    6272:	91 2c       	mov	r9, r1
    6274:	8c 0e       	add	r8, r28
    6276:	9d 1e       	adc	r9, r29
    6278:	c4 01       	movw	r24, r8
    627a:	b6 01       	movw	r22, r12
    627c:	46 e0       	ldi	r20, 0x06	; 6
    627e:	50 e0       	ldi	r21, 0x00	; 0
    6280:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>

	lcd_clear();_delay_ms(10);
    6284:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    6288:	ef ef       	ldi	r30, 0xFF	; 255
    628a:	ff e8       	ldi	r31, 0x8F	; 143
    628c:	31 97       	sbiw	r30, 0x01	; 1
    628e:	f1 f7       	brne	.-4      	; 0x628c <_menu_pumpprodinput+0x74>
    6290:	00 c0       	rjmp	.+0      	; 0x6292 <_menu_pumpprodinput+0x7a>
    6292:	00 00       	nop
    sprintf_P(lcdteks, PSTR("Product FIP%.2d"),__pump_id[__select]);
    6294:	00 d0       	rcall	.+0      	; 0x6296 <_menu_pumpprodinput+0x7e>
    6296:	00 d0       	rcall	.+0      	; 0x6298 <_menu_pumpprodinput+0x80>
    6298:	00 d0       	rcall	.+0      	; 0x629a <_menu_pumpprodinput+0x82>
    629a:	ed b7       	in	r30, 0x3d	; 61
    629c:	fe b7       	in	r31, 0x3e	; 62
    629e:	31 96       	adiw	r30, 0x01	; 1
    62a0:	8e 01       	movw	r16, r28
    62a2:	0c 5e       	subi	r16, 0xEC	; 236
    62a4:	1f 4f       	sbci	r17, 0xFF	; 255
    62a6:	ad b7       	in	r26, 0x3d	; 61
    62a8:	be b7       	in	r27, 0x3e	; 62
    62aa:	12 96       	adiw	r26, 0x02	; 2
    62ac:	1c 93       	st	X, r17
    62ae:	0e 93       	st	-X, r16
    62b0:	11 97       	sbiw	r26, 0x01	; 1
    62b2:	88 e4       	ldi	r24, 0x48	; 72
    62b4:	9d e0       	ldi	r25, 0x0D	; 13
    62b6:	93 83       	std	Z+3, r25	; 0x03
    62b8:	82 83       	std	Z+2, r24	; 0x02
    62ba:	d7 01       	movw	r26, r14
    62bc:	aa 0d       	add	r26, r10
    62be:	b1 1d       	adc	r27, r1
    62c0:	8c 91       	ld	r24, X
    62c2:	84 83       	std	Z+4, r24	; 0x04
    62c4:	15 82       	std	Z+5, r1	; 0x05
    62c6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    lcd_print(1, 1,lcdteks);
    62ca:	ed b7       	in	r30, 0x3d	; 61
    62cc:	fe b7       	in	r31, 0x3e	; 62
    62ce:	36 96       	adiw	r30, 0x06	; 6
    62d0:	0f b6       	in	r0, 0x3f	; 63
    62d2:	f8 94       	cli
    62d4:	fe bf       	out	0x3e, r31	; 62
    62d6:	0f be       	out	0x3f, r0	; 63
    62d8:	ed bf       	out	0x3d, r30	; 61
    62da:	81 e0       	ldi	r24, 0x01	; 1
    62dc:	61 e0       	ldi	r22, 0x01	; 1
    62de:	a8 01       	movw	r20, r16
    62e0:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
    62e4:	82 e0       	ldi	r24, 0x02	; 2
    62e6:	61 e0       	ldi	r22, 0x01	; 1
    62e8:	44 e3       	ldi	r20, 0x34	; 52
    62ea:	5d e0       	ldi	r21, 0x0D	; 13
    62ec:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
    62f0:	83 e0       	ldi	r24, 0x03	; 3
    62f2:	61 e0       	ldi	r22, 0x01	; 1
    62f4:	40 e2       	ldi	r20, 0x20	; 32
    62f6:	5d e0       	ldi	r21, 0x0D	; 13
    62f8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));
    62fc:	84 e0       	ldi	r24, 0x04	; 4
    62fe:	61 e0       	ldi	r22, 0x01	; 1
    6300:	4b e0       	ldi	r20, 0x0B	; 11
    6302:	5d e0       	ldi	r21, 0x0D	; 13
    6304:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    6308:	02 e7       	ldi	r16, 0x72	; 114
    630a:	12 e0       	ldi	r17, 0x02	; 2
    630c:	54 01       	movw	r10, r8

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
		__y = pgm_read_byte(&__prodloc[i][1]);

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    630e:	7e 01       	movw	r14, r28
    6310:	08 94       	sec
    6312:	e1 1c       	adc	r14, r1
    6314:	f1 1c       	adc	r15, r1
    6316:	a8 e0       	ldi	r26, 0x08	; 8
    6318:	8a 2e       	mov	r8, r26
    631a:	ad e0       	ldi	r26, 0x0D	; 13
    631c:	9a 2e       	mov	r9, r26
	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
    631e:	f8 01       	movw	r30, r16
    6320:	74 90       	lpm	r7, Z+
		__y = pgm_read_byte(&__prodloc[i][1]);
    6322:	31 96       	adiw	r30, 0x01	; 1
    6324:	64 91       	lpm	r22, Z+

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    6326:	d5 01       	movw	r26, r10
    6328:	8d 91       	ld	r24, X+
    632a:	5d 01       	movw	r10, r26
    632c:	00 d0       	rcall	.+0      	; 0x632e <_menu_pumpprodinput+0x116>
    632e:	00 d0       	rcall	.+0      	; 0x6330 <_menu_pumpprodinput+0x118>
    6330:	00 d0       	rcall	.+0      	; 0x6332 <_menu_pumpprodinput+0x11a>
    6332:	ad b7       	in	r26, 0x3d	; 61
    6334:	be b7       	in	r27, 0x3e	; 62
    6336:	11 96       	adiw	r26, 0x01	; 1
    6338:	ed b7       	in	r30, 0x3d	; 61
    633a:	fe b7       	in	r31, 0x3e	; 62
    633c:	f2 82       	std	Z+2, r15	; 0x02
    633e:	e1 82       	std	Z+1, r14	; 0x01
    6340:	13 96       	adiw	r26, 0x03	; 3
    6342:	9c 92       	st	X, r9
    6344:	8e 92       	st	-X, r8
    6346:	12 97       	sbiw	r26, 0x02	; 2
    6348:	14 96       	adiw	r26, 0x04	; 4
    634a:	8c 93       	st	X, r24
    634c:	14 97       	sbiw	r26, 0x04	; 4
    634e:	15 96       	adiw	r26, 0x05	; 5
    6350:	1c 92       	st	X, r1
    6352:	68 a7       	std	Y+40, r22	; 0x28
    6354:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		lcd_print(__x+1, __y, __buff);
    6358:	8d b7       	in	r24, 0x3d	; 61
    635a:	9e b7       	in	r25, 0x3e	; 62
    635c:	06 96       	adiw	r24, 0x06	; 6
    635e:	0f b6       	in	r0, 0x3f	; 63
    6360:	f8 94       	cli
    6362:	9e bf       	out	0x3e, r25	; 62
    6364:	0f be       	out	0x3f, r0	; 63
    6366:	8d bf       	out	0x3d, r24	; 61
    6368:	87 2d       	mov	r24, r7
    636a:	8f 5f       	subi	r24, 0xFF	; 255
    636c:	68 a5       	ldd	r22, Y+40	; 0x28
    636e:	a7 01       	movw	r20, r14
    6370:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    6374:	0e 5f       	subi	r16, 0xFE	; 254
    6376:	1f 4f       	sbci	r17, 0xFF	; 255

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
    6378:	92 e0       	ldi	r25, 0x02	; 2
    637a:	0e 37       	cpi	r16, 0x7E	; 126
    637c:	19 07       	cpc	r17, r25
    637e:	79 f6       	brne	.-98     	; 0x631e <_menu_pumpprodinput+0x106>
		if(__key == _KEY_ENTER){
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
			return;
		}
		if(__num >= '1' && __num <= '6'){
			if(__pump_prod[__num - '1'] == 6)
    6380:	8e 01       	movw	r16, r28
    6382:	0a 5f       	subi	r16, 0xFA	; 250
    6384:	1f 4f       	sbci	r17, 0xFF	; 255
			else
				__pump_prod[__num - '1']++;

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    6386:	7e 01       	movw	r14, r28
    6388:	08 94       	sec
    638a:	e1 1c       	adc	r14, r1
    638c:	f1 1c       	adc	r15, r1
    638e:	f5 e0       	ldi	r31, 0x05	; 5
    6390:	af 2e       	mov	r10, r31
    6392:	fd e0       	ldi	r31, 0x0D	; 13
    6394:	bf 2e       	mov	r11, r31
		//lcd_print(2+(i%2),(i/2)*6,lcdteks);
	}

	while(1){
		
		__key = _key_scan(1);
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    639c:	98 2f       	mov	r25, r24
		__num = _key_btn(__key);
    639e:	98 a7       	std	Y+40, r25	; 0x28
    63a0:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		if(__key == _KEY_CANCEL)
    63a4:	98 a5       	ldd	r25, Y+40	; 0x28
    63a6:	97 3e       	cpi	r25, 0xE7	; 231
    63a8:	09 f4       	brne	.+2      	; 0x63ac <_menu_pumpprodinput+0x194>
    63aa:	53 c0       	rjmp	.+166    	; 0x6452 <_menu_pumpprodinput+0x23a>
			return;
		if(__key == _KEY_ENTER){
    63ac:	97 3b       	cpi	r25, 0xB7	; 183
    63ae:	41 f4       	brne	.+16     	; 0x63c0 <_menu_pumpprodinput+0x1a8>
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
    63b0:	ce 01       	movw	r24, r28
    63b2:	06 96       	adiw	r24, 0x06	; 6
    63b4:	b6 01       	movw	r22, r12
    63b6:	46 e0       	ldi	r20, 0x06	; 6
    63b8:	50 e0       	ldi	r21, 0x00	; 0
    63ba:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    63be:	49 c0       	rjmp	.+146    	; 0x6452 <_menu_pumpprodinput+0x23a>
			return;
		}
		if(__num >= '1' && __num <= '6'){
    63c0:	98 2f       	mov	r25, r24
    63c2:	91 53       	subi	r25, 0x31	; 49
    63c4:	96 30       	cpi	r25, 0x06	; 6
    63c6:	38 f7       	brcc	.-50     	; 0x6396 <_menu_pumpprodinput+0x17e>
			if(__pump_prod[__num - '1'] == 6)
    63c8:	28 2f       	mov	r18, r24
    63ca:	30 e0       	ldi	r19, 0x00	; 0
    63cc:	21 53       	subi	r18, 0x31	; 49
    63ce:	30 40       	sbci	r19, 0x00	; 0
    63d0:	f8 01       	movw	r30, r16
    63d2:	e2 0f       	add	r30, r18
    63d4:	f3 1f       	adc	r31, r19
    63d6:	90 81       	ld	r25, Z
    63d8:	96 30       	cpi	r25, 0x06	; 6
    63da:	11 f4       	brne	.+4      	; 0x63e0 <_menu_pumpprodinput+0x1c8>
				__pump_prod[__num - '1'] = 0;
    63dc:	10 82       	st	Z, r1
    63de:	02 c0       	rjmp	.+4      	; 0x63e4 <_menu_pumpprodinput+0x1cc>
			else
				__pump_prod[__num - '1']++;
    63e0:	9f 5f       	subi	r25, 0xFF	; 255
    63e2:	90 83       	st	Z, r25

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
    63e4:	68 2f       	mov	r22, r24
    63e6:	70 e0       	ldi	r23, 0x00	; 0
    63e8:	61 53       	subi	r22, 0x31	; 49
    63ea:	70 40       	sbci	r23, 0x00	; 0
    63ec:	66 0f       	add	r22, r22
    63ee:	77 1f       	adc	r23, r23
    63f0:	fb 01       	movw	r30, r22
    63f2:	ee 58       	subi	r30, 0x8E	; 142
    63f4:	fd 4f       	sbci	r31, 0xFD	; 253
    63f6:	84 90       	lpm	r8, Z+
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
    63f8:	6d 58       	subi	r22, 0x8D	; 141
    63fa:	7d 4f       	sbci	r23, 0xFD	; 253
    63fc:	fb 01       	movw	r30, r22
    63fe:	64 91       	lpm	r22, Z+
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    6400:	00 d0       	rcall	.+0      	; 0x6402 <_menu_pumpprodinput+0x1ea>
    6402:	00 d0       	rcall	.+0      	; 0x6404 <_menu_pumpprodinput+0x1ec>
    6404:	00 d0       	rcall	.+0      	; 0x6406 <_menu_pumpprodinput+0x1ee>
    6406:	ad b7       	in	r26, 0x3d	; 61
    6408:	be b7       	in	r27, 0x3e	; 62
    640a:	11 96       	adiw	r26, 0x01	; 1
    640c:	ed b7       	in	r30, 0x3d	; 61
    640e:	fe b7       	in	r31, 0x3e	; 62
    6410:	f2 82       	std	Z+2, r15	; 0x02
    6412:	e1 82       	std	Z+1, r14	; 0x01
    6414:	13 96       	adiw	r26, 0x03	; 3
    6416:	bc 92       	st	X, r11
    6418:	ae 92       	st	-X, r10
    641a:	12 97       	sbiw	r26, 0x02	; 2
    641c:	20 0f       	add	r18, r16
    641e:	31 1f       	adc	r19, r17
    6420:	f9 01       	movw	r30, r18
    6422:	80 81       	ld	r24, Z
    6424:	14 96       	adiw	r26, 0x04	; 4
    6426:	8c 93       	st	X, r24
    6428:	14 97       	sbiw	r26, 0x04	; 4
    642a:	15 96       	adiw	r26, 0x05	; 5
    642c:	1c 92       	st	X, r1
    642e:	68 a7       	std	Y+40, r22	; 0x28
    6430:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			//_f_inttostr(__buff, __pump_prod[__num - 0x31]);
			lcd_print(__x+1, __y, __buff);
    6434:	8d b7       	in	r24, 0x3d	; 61
    6436:	9e b7       	in	r25, 0x3e	; 62
    6438:	06 96       	adiw	r24, 0x06	; 6
    643a:	0f b6       	in	r0, 0x3f	; 63
    643c:	f8 94       	cli
    643e:	9e bf       	out	0x3e, r25	; 62
    6440:	0f be       	out	0x3f, r0	; 63
    6442:	8d bf       	out	0x3d, r24	; 61
    6444:	88 2d       	mov	r24, r8
    6446:	8f 5f       	subi	r24, 0xFF	; 255
    6448:	68 a5       	ldd	r22, Y+40	; 0x28
    644a:	a7 01       	movw	r20, r14
    644c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    6450:	a2 cf       	rjmp	.-188    	; 0x6396 <_menu_pumpprodinput+0x17e>
		}
	}
}
    6452:	a8 96       	adiw	r28, 0x28	; 40
    6454:	0f b6       	in	r0, 0x3f	; 63
    6456:	f8 94       	cli
    6458:	de bf       	out	0x3e, r29	; 62
    645a:	0f be       	out	0x3f, r0	; 63
    645c:	cd bf       	out	0x3d, r28	; 61
    645e:	cf 91       	pop	r28
    6460:	df 91       	pop	r29
    6462:	1f 91       	pop	r17
    6464:	0f 91       	pop	r16
    6466:	ff 90       	pop	r15
    6468:	ef 90       	pop	r14
    646a:	df 90       	pop	r13
    646c:	cf 90       	pop	r12
    646e:	bf 90       	pop	r11
    6470:	af 90       	pop	r10
    6472:	9f 90       	pop	r9
    6474:	8f 90       	pop	r8
    6476:	7f 90       	pop	r7
    6478:	08 95       	ret

0000647a <_menu_pumpprod>:
}

void _menu_pumpprod(void){
	char KeyPressed,KeyChar;
	while(1){
		lcd_clear();
    647a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		_scr_pump();
    647e:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <_scr_pump>
		while(1){
			KeyPressed=_key_scan(1);
    6482:	81 e0       	ldi	r24, 0x01	; 1
    6484:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		    KeyChar=_key_btn(KeyPressed);
    6488:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
    648c:	98 2f       	mov	r25, r24

			if ((KeyChar>='1')&&(KeyChar<='8')){
    648e:	81 53       	subi	r24, 0x31	; 49
    6490:	88 30       	cpi	r24, 0x08	; 8
    6492:	18 f4       	brcc	.+6      	; 0x649a <_menu_pumpprod+0x20>
			     _menu_pumpprodinput(KeyChar-'1');
    6494:	0e 94 0c 31 	call	0x6218	; 0x6218 <_menu_pumpprodinput>
			}
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
    6498:	f0 cf       	rjmp	.-32     	; 0x647a <_menu_pumpprod>
		    KeyChar=_key_btn(KeyPressed);

			if ((KeyChar>='1')&&(KeyChar<='8')){
			     _menu_pumpprodinput(KeyChar-'1');
				break;
			}else if (KeyChar=='*'){
    649a:	9a 32       	cpi	r25, 0x2A	; 42
    649c:	91 f7       	brne	.-28     	; 0x6482 <_menu_pumpprod+0x8>
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
}
    649e:	08 95       	ret

000064a0 <_menu_pump>:

void _menu_pump(void){
	char __key;

	while(1){
		lcd_clear();_delay_ms(10);
    64a0:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    64a4:	8f ef       	ldi	r24, 0xFF	; 255
    64a6:	9f e8       	ldi	r25, 0x8F	; 143
    64a8:	01 97       	sbiw	r24, 0x01	; 1
    64aa:	f1 f7       	brne	.-4      	; 0x64a8 <_menu_pump+0x8>
    64ac:	00 c0       	rjmp	.+0      	; 0x64ae <_menu_pump+0xe>
    64ae:	00 00       	nop
		lcd_printf(1, 1, PSTR("1)ID"));
    64b0:	81 e0       	ldi	r24, 0x01	; 1
    64b2:	61 e0       	ldi	r22, 0x01	; 1
    64b4:	4c e8       	ldi	r20, 0x8C	; 140
    64b6:	5e e0       	ldi	r21, 0x0E	; 14
    64b8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		lcd_printf(2, 1, PSTR("2)Product"));
    64bc:	82 e0       	ldi	r24, 0x02	; 2
    64be:	61 e0       	ldi	r22, 0x01	; 1
    64c0:	42 e8       	ldi	r20, 0x82	; 130
    64c2:	5e e0       	ldi	r21, 0x0E	; 14
    64c4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		lcd_printf(4, 1, PSTR("*)Exit"));
    64c8:	84 e0       	ldi	r24, 0x04	; 4
    64ca:	61 e0       	ldi	r22, 0x01	; 1
    64cc:	4b e7       	ldi	r20, 0x7B	; 123
    64ce:	5e e0       	ldi	r21, 0x0E	; 14
    64d0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>

		while(1){
			__key = _key_scan(1);
    64d4:	81 e0       	ldi	r24, 0x01	; 1
    64d6:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
			if(__key == _KEY_CANCEL)
    64da:	87 3e       	cpi	r24, 0xE7	; 231
    64dc:	51 f0       	breq	.+20     	; 0x64f2 <_menu_pump+0x52>
				return;
			if(__key == _KEY_1){
    64de:	8e 3e       	cpi	r24, 0xEE	; 238
    64e0:	19 f4       	brne	.+6      	; 0x64e8 <_menu_pump+0x48>
				_menu_pumpid();
    64e2:	0e 94 07 31 	call	0x620e	; 0x620e <_menu_pumpid>
				break;
    64e6:	dc cf       	rjmp	.-72     	; 0x64a0 <_menu_pump>
			}
			if(__key == _KEY_2){
    64e8:	8e 3d       	cpi	r24, 0xDE	; 222
    64ea:	a1 f7       	brne	.-24     	; 0x64d4 <_menu_pump+0x34>
				_menu_pumpprod();
    64ec:	0e 94 3d 32 	call	0x647a	; 0x647a <_menu_pumpprod>
    64f0:	d7 cf       	rjmp	.-82     	; 0x64a0 <_menu_pump>
    64f2:	08 95       	ret

000064f4 <FSettingPump>:
	      break;
	 
	 }
*/
	 char __key,Result;
		lcd_clear();_delay_ms(10);
    64f4:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    64f8:	8f ef       	ldi	r24, 0xFF	; 255
    64fa:	9f e8       	ldi	r25, 0x8F	; 143
    64fc:	01 97       	sbiw	r24, 0x01	; 1
    64fe:	f1 f7       	brne	.-4      	; 0x64fc <FSettingPump+0x8>
    6500:	00 c0       	rjmp	.+0      	; 0x6502 <FSettingPump+0xe>
    6502:	00 00       	nop
		lcd_printf(1,1, PSTR("1)ID     "));
    6504:	81 e0       	ldi	r24, 0x01	; 1
    6506:	61 e0       	ldi	r22, 0x01	; 1
    6508:	48 ee       	ldi	r20, 0xE8	; 232
    650a:	52 e1       	ldi	r21, 0x12	; 18
    650c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		lcd_printf(2,1, PSTR("2)Product"));
    6510:	82 e0       	ldi	r24, 0x02	; 2
    6512:	61 e0       	ldi	r22, 0x01	; 1
    6514:	4e ed       	ldi	r20, 0xDE	; 222
    6516:	52 e1       	ldi	r21, 0x12	; 18
    6518:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		if (IFType==IT_STANDALONE){
    651c:	80 91 00 01 	lds	r24, 0x0100
    6520:	82 30       	cpi	r24, 0x02	; 2
    6522:	61 f4       	brne	.+24     	; 0x653c <FSettingPump+0x48>
		    lcd_printf(3,1, PSTR("3)Label  "));
    6524:	83 e0       	ldi	r24, 0x03	; 3
    6526:	61 e0       	ldi	r22, 0x01	; 1
    6528:	44 ed       	ldi	r20, 0xD4	; 212
    652a:	52 e1       	ldi	r21, 0x12	; 18
    652c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		    lcd_printf(4,1, PSTR("4)Brand  *)Exit"));
    6530:	84 e0       	ldi	r24, 0x04	; 4
    6532:	61 e0       	ldi	r22, 0x01	; 1
    6534:	44 ec       	ldi	r20, 0xC4	; 196
    6536:	52 e1       	ldi	r21, 0x12	; 18
    6538:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		}

		while(1){
			__key = _key_scan(1);
    653c:	81 e0       	ldi	r24, 0x01	; 1
    653e:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
			if(__key == _KEY_CANCEL)
    6542:	87 3e       	cpi	r24, 0xE7	; 231
    6544:	d9 f0       	breq	.+54     	; 0x657c <FSettingPump+0x88>
				break;
			if(__key == _KEY_1){
    6546:	8e 3e       	cpi	r24, 0xEE	; 238
    6548:	19 f4       	brne	.+6      	; 0x6550 <FSettingPump+0x5c>
				_menu_pumpid();
    654a:	0e 94 07 31 	call	0x620e	; 0x620e <_menu_pumpid>
				break;
    654e:	16 c0       	rjmp	.+44     	; 0x657c <FSettingPump+0x88>
			}
			if(__key == _KEY_2){
    6550:	8e 3d       	cpi	r24, 0xDE	; 222
    6552:	19 f4       	brne	.+6      	; 0x655a <FSettingPump+0x66>
				_menu_pumpprod();
    6554:	0e 94 3d 32 	call	0x647a	; 0x647a <_menu_pumpprod>
				break;
    6558:	11 c0       	rjmp	.+34     	; 0x657c <FSettingPump+0x88>
			}

			if((__key == _KEY_3)&&(IFType==IT_STANDALONE)){
    655a:	8e 3b       	cpi	r24, 0xBE	; 190
    655c:	39 f4       	brne	.+14     	; 0x656c <FSettingPump+0x78>
    655e:	80 91 00 01 	lds	r24, 0x0100
    6562:	82 30       	cpi	r24, 0x02	; 2
    6564:	59 f7       	brne	.-42     	; 0x653c <FSettingPump+0x48>
			    FMenuPumpLabel();
    6566:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <FMenuPumpLabel>
				break;
    656a:	08 c0       	rjmp	.+16     	; 0x657c <FSettingPump+0x88>
			}
			if((__key == _KEY_4)&&(IFType==IT_STANDALONE)){
    656c:	8d 3e       	cpi	r24, 0xED	; 237
    656e:	31 f7       	brne	.-52     	; 0x653c <FSettingPump+0x48>
    6570:	80 91 00 01 	lds	r24, 0x0100
    6574:	82 30       	cpi	r24, 0x02	; 2
    6576:	11 f7       	brne	.-60     	; 0x653c <FSettingPump+0x48>
			    FMenuPumpType();
    6578:	0e 94 ad 95 	call	0x12b5a	; 0x12b5a <FMenuPumpType>

		}

	Result=MENU_DONE;
	return Result;
}
    657c:	81 e0       	ldi	r24, 0x01	; 1
    657e:	08 95       	ret

00006580 <_menu_datetime>:
		}
	}
}


void _menu_datetime(void){
    6580:	9f 92       	push	r9
    6582:	af 92       	push	r10
    6584:	bf 92       	push	r11
    6586:	cf 92       	push	r12
    6588:	df 92       	push	r13
    658a:	ef 92       	push	r14
    658c:	ff 92       	push	r15
    658e:	0f 93       	push	r16
    6590:	1f 93       	push	r17
    6592:	df 93       	push	r29
    6594:	cf 93       	push	r28
    6596:	cd b7       	in	r28, 0x3d	; 61
    6598:	de b7       	in	r29, 0x3e	; 62
    659a:	c2 54       	subi	r28, 0x42	; 66
    659c:	d0 40       	sbci	r29, 0x00	; 0
    659e:	0f b6       	in	r0, 0x3f	; 63
    65a0:	f8 94       	cli
    65a2:	de bf       	out	0x3e, r29	; 62
    65a4:	0f be       	out	0x3f, r0	; 63
    65a6:	cd bf       	out	0x3d, r28	; 61
	int		__i = 0, __ii = 0;
	char	__key, __chr;
	char	__date[9];
	char	__time[9];
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
    65a8:	de 01       	movw	r26, r28
    65aa:	53 96       	adiw	r26, 0x13	; 19
    65ac:	e6 e2       	ldi	r30, 0x26	; 38
    65ae:	f1 e0       	ldi	r31, 0x01	; 1
    65b0:	80 e3       	ldi	r24, 0x30	; 48
    65b2:	01 90       	ld	r0, Z+
    65b4:	0d 92       	st	X+, r0
    65b6:	81 50       	subi	r24, 0x01	; 1
    65b8:	e1 f7       	brne	.-8      	; 0x65b2 <_menu_datetime+0x32>
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
    65ba:	8e 01       	movw	r16, r28
    65bc:	0f 5f       	subi	r16, 0xFF	; 255
    65be:	1f 4f       	sbci	r17, 0xFF	; 255
    65c0:	b8 01       	movw	r22, r16
    65c2:	ae 01       	movw	r20, r28
    65c4:	46 5f       	subi	r20, 0xF6	; 246
    65c6:	5f 4f       	sbci	r21, 0xFF	; 255
    65c8:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <_datetime>
    65cc:	65 e1       	ldi	r22, 0x15	; 21
    65ce:	c6 2e       	mov	r12, r22
    65d0:	d1 2c       	mov	r13, r1
    65d2:	cc 0e       	add	r12, r28
    65d4:	dd 1e       	adc	r13, r29
    65d6:	f6 01       	movw	r30, r12
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    65d8:	20 e0       	ldi	r18, 0x00	; 0
    65da:	30 e0       	ldi	r19, 0x00	; 0
    65dc:	80 e0       	ldi	r24, 0x00	; 0
    65de:	90 e0       	ldi	r25, 0x00	; 0
		if(__i == 2 || __i == 4)
    65e0:	82 30       	cpi	r24, 0x02	; 2
    65e2:	91 05       	cpc	r25, r1
    65e4:	19 f0       	breq	.+6      	; 0x65ec <_menu_datetime+0x6c>
    65e6:	84 30       	cpi	r24, 0x04	; 4
    65e8:	91 05       	cpc	r25, r1
    65ea:	11 f4       	brne	.+4      	; 0x65f0 <_menu_datetime+0x70>
			__ii++;
    65ec:	2f 5f       	subi	r18, 0xFF	; 255
    65ee:	3f 4f       	sbci	r19, 0xFF	; 255
		__map[__i][2] = __date[__ii];
    65f0:	d8 01       	movw	r26, r16
    65f2:	a2 0f       	add	r26, r18
    65f4:	b3 1f       	adc	r27, r19
    65f6:	4c 91       	ld	r20, X
    65f8:	40 83       	st	Z, r20
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    65fa:	01 96       	adiw	r24, 0x01	; 1
    65fc:	34 96       	adiw	r30, 0x04	; 4
    65fe:	86 30       	cpi	r24, 0x06	; 6
    6600:	91 05       	cpc	r25, r1
    6602:	19 f0       	breq	.+6      	; 0x660a <_menu_datetime+0x8a>
    6604:	2f 5f       	subi	r18, 0xFF	; 255
    6606:	3f 4f       	sbci	r19, 0xFF	; 255
    6608:	eb cf       	rjmp	.-42     	; 0x65e0 <_menu_datetime+0x60>
    660a:	5d e2       	ldi	r21, 0x2D	; 45
    660c:	a5 2e       	mov	r10, r21
    660e:	b1 2c       	mov	r11, r1
    6610:	ac 0e       	add	r10, r28
    6612:	bd 1e       	adc	r11, r29
    6614:	f5 01       	movw	r30, r10
    6616:	20 e0       	ldi	r18, 0x00	; 0
    6618:	30 e0       	ldi	r19, 0x00	; 0
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
    661a:	8e 01       	movw	r16, r28
    661c:	06 5f       	subi	r16, 0xF6	; 246
    661e:	1f 4f       	sbci	r17, 0xFF	; 255
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
    6620:	88 30       	cpi	r24, 0x08	; 8
    6622:	91 05       	cpc	r25, r1
    6624:	19 f0       	breq	.+6      	; 0x662c <_menu_datetime+0xac>
    6626:	8a 30       	cpi	r24, 0x0A	; 10
    6628:	91 05       	cpc	r25, r1
    662a:	11 f4       	brne	.+4      	; 0x6630 <_menu_datetime+0xb0>
			__ii++;
    662c:	2f 5f       	subi	r18, 0xFF	; 255
    662e:	3f 4f       	sbci	r19, 0xFF	; 255
		__map[__i][2] = __time[__ii];
    6630:	d8 01       	movw	r26, r16
    6632:	a2 0f       	add	r26, r18
    6634:	b3 1f       	adc	r27, r19
    6636:	4c 91       	ld	r20, X
    6638:	40 83       	st	Z, r20
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    663a:	01 96       	adiw	r24, 0x01	; 1
    663c:	34 96       	adiw	r30, 0x04	; 4
    663e:	8c 30       	cpi	r24, 0x0C	; 12
    6640:	91 05       	cpc	r25, r1
    6642:	19 f0       	breq	.+6      	; 0x664a <_menu_datetime+0xca>
    6644:	2f 5f       	subi	r18, 0xFF	; 255
    6646:	3f 4f       	sbci	r19, 0xFF	; 255
    6648:	eb cf       	rjmp	.-42     	; 0x6620 <_menu_datetime+0xa0>
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
	}

	lcd_clear();_delay_ms(10);
    664a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    664e:	8f ef       	ldi	r24, 0xFF	; 255
    6650:	9f e8       	ldi	r25, 0x8F	; 143
    6652:	01 97       	sbiw	r24, 0x01	; 1
    6654:	f1 f7       	brne	.-4      	; 0x6652 <_menu_datetime+0xd2>
    6656:	00 c0       	rjmp	.+0      	; 0x6658 <_menu_datetime+0xd8>
    6658:	00 00       	nop
	lcd_printf(1, 1, PSTR("DATE : "));
    665a:	81 e0       	ldi	r24, 0x01	; 1
    665c:	61 e0       	ldi	r22, 0x01	; 1
    665e:	4d ef       	ldi	r20, 0xFD	; 253
    6660:	5c e0       	ldi	r21, 0x0C	; 12
    6662:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(2, 1, PSTR("TIME : "));
    6666:	82 e0       	ldi	r24, 0x02	; 2
    6668:	61 e0       	ldi	r22, 0x01	; 1
    666a:	45 ef       	ldi	r20, 0xF5	; 245
    666c:	5c e0       	ldi	r21, 0x0C	; 12
    666e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_print(1, 8, __date);
    6672:	81 e0       	ldi	r24, 0x01	; 1
    6674:	68 e0       	ldi	r22, 0x08	; 8
    6676:	7e 01       	movw	r14, r28
    6678:	08 94       	sec
    667a:	e1 1c       	adc	r14, r1
    667c:	f1 1c       	adc	r15, r1
    667e:	a7 01       	movw	r20, r14
    6680:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	lcd_print(2, 8, __time);
    6684:	82 e0       	ldi	r24, 0x02	; 2
    6686:	68 e0       	ldi	r22, 0x08	; 8
    6688:	a8 01       	movw	r20, r16
    668a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));
    668e:	84 e0       	ldi	r24, 0x04	; 4
    6690:	61 e0       	ldi	r22, 0x01	; 1
    6692:	40 ee       	ldi	r20, 0xE0	; 224
    6694:	5c e0       	ldi	r21, 0x0C	; 12
    6696:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>

	__i = 0;
	lcd_xy(__map[__i][0], __map[__i][1]);
    669a:	8b 89       	ldd	r24, Y+19	; 0x13
    669c:	6c 89       	ldd	r22, Y+20	; 0x14
    669e:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
	CURSOR_SHOW;
    66a2:	8f e0       	ldi	r24, 0x0F	; 15
    66a4:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
	lcd_printf(2, 1, PSTR("TIME : "));
	lcd_print(1, 8, __date);
	lcd_print(2, 8, __time);
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));

	__i = 0;
    66a8:	00 e0       	ldi	r16, 0x00	; 0
    66aa:	10 e0       	ldi	r17, 0x00	; 0
	lcd_xy(__map[__i][0], __map[__i][1]);
	CURSOR_SHOW;

	while(1){
		
		__key = _key_scan(1);
    66ac:	81 e0       	ldi	r24, 0x01	; 1
    66ae:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    66b2:	98 2e       	mov	r9, r24
		__chr = _key_btn(__key);
    66b4:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		if(__chr >= 0x30 && __chr <= 0x39){
    66b8:	98 2f       	mov	r25, r24
    66ba:	90 53       	subi	r25, 0x30	; 48
    66bc:	9a 30       	cpi	r25, 0x0A	; 10
    66be:	08 f0       	brcs	.+2      	; 0x66c2 <_menu_datetime+0x142>
    66c0:	68 c0       	rjmp	.+208    	; 0x6792 <_menu_datetime+0x212>
			if(__i == 0 || __i == 2 || __i == 6 || __i == 8 || __i == 10){
    66c2:	01 15       	cp	r16, r1
    66c4:	11 05       	cpc	r17, r1
    66c6:	61 f0       	breq	.+24     	; 0x66e0 <_menu_datetime+0x160>
    66c8:	02 30       	cpi	r16, 0x02	; 2
    66ca:	11 05       	cpc	r17, r1
    66cc:	49 f0       	breq	.+18     	; 0x66e0 <_menu_datetime+0x160>
    66ce:	06 30       	cpi	r16, 0x06	; 6
    66d0:	11 05       	cpc	r17, r1
    66d2:	31 f0       	breq	.+12     	; 0x66e0 <_menu_datetime+0x160>
    66d4:	08 30       	cpi	r16, 0x08	; 8
    66d6:	11 05       	cpc	r17, r1
    66d8:	19 f0       	breq	.+6      	; 0x66e0 <_menu_datetime+0x160>
    66da:	0a 30       	cpi	r16, 0x0A	; 10
    66dc:	11 05       	cpc	r17, r1
    66de:	89 f4       	brne	.+34     	; 0x6702 <_menu_datetime+0x182>
				if((__chr - 0x30) <= __map[__i][3])
    66e0:	28 2f       	mov	r18, r24
    66e2:	30 e0       	ldi	r19, 0x00	; 0
    66e4:	20 53       	subi	r18, 0x30	; 48
    66e6:	30 40       	sbci	r19, 0x00	; 0
    66e8:	f8 01       	movw	r30, r16
    66ea:	ee 0f       	add	r30, r30
    66ec:	ff 1f       	adc	r31, r31
    66ee:	ee 0f       	add	r30, r30
    66f0:	ff 1f       	adc	r31, r31
    66f2:	ee 0d       	add	r30, r14
    66f4:	ff 1d       	adc	r31, r15
    66f6:	45 89       	ldd	r20, Z+21	; 0x15
    66f8:	50 e0       	ldi	r21, 0x00	; 0
    66fa:	42 17       	cp	r20, r18
    66fc:	53 07       	cpc	r21, r19
    66fe:	6c f5       	brge	.+90     	; 0x675a <_menu_datetime+0x1da>
    6700:	48 c0       	rjmp	.+144    	; 0x6792 <_menu_datetime+0x212>
					goto CETAK;
				else
					goto LEWAT;
			}
			if(__i == 1){
    6702:	01 30       	cpi	r16, 0x01	; 1
    6704:	11 05       	cpc	r17, r1
    6706:	61 f4       	brne	.+24     	; 0x6720 <_menu_datetime+0x1a0>
				if((__map[0][2] - 0x30) < __map[0][3])
    6708:	2d 89       	ldd	r18, Y+21	; 0x15
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	2f 52       	subi	r18, 0x2F	; 47
    670e:	30 40       	sbci	r19, 0x00	; 0
    6710:	4e 89       	ldd	r20, Y+22	; 0x16
    6712:	50 e0       	ldi	r21, 0x00	; 0
    6714:	42 17       	cp	r20, r18
    6716:	53 07       	cpc	r21, r19
    6718:	04 f5       	brge	.+64     	; 0x675a <_menu_datetime+0x1da>
					goto CETAK;
				if((__map[0][2] - 0x30) >= __map[0][3]){
					if(__chr < 0x32)
    671a:	82 33       	cpi	r24, 0x32	; 50
    671c:	f0 f0       	brcs	.+60     	; 0x675a <_menu_datetime+0x1da>
    671e:	39 c0       	rjmp	.+114    	; 0x6792 <_menu_datetime+0x212>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 3){
    6720:	03 30       	cpi	r16, 0x03	; 3
    6722:	11 05       	cpc	r17, r1
    6724:	61 f4       	brne	.+24     	; 0x673e <_menu_datetime+0x1be>
				if((__map[2][2] - 0x30) < __map[2][3])
    6726:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	2f 52       	subi	r18, 0x2F	; 47
    672c:	30 40       	sbci	r19, 0x00	; 0
    672e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    6730:	50 e0       	ldi	r21, 0x00	; 0
    6732:	42 17       	cp	r20, r18
    6734:	53 07       	cpc	r21, r19
    6736:	8c f4       	brge	.+34     	; 0x675a <_menu_datetime+0x1da>
					goto CETAK;
				if((__map[2][2] - 0x30) >= __map[2][3]){
					if(__chr < 0x33)
    6738:	83 33       	cpi	r24, 0x33	; 51
    673a:	78 f0       	brcs	.+30     	; 0x675a <_menu_datetime+0x1da>
    673c:	2a c0       	rjmp	.+84     	; 0x6792 <_menu_datetime+0x212>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 7){
    673e:	07 30       	cpi	r16, 0x07	; 7
    6740:	11 05       	cpc	r17, r1
    6742:	59 f4       	brne	.+22     	; 0x675a <_menu_datetime+0x1da>
				if((__map[6][2] - 0x30) < __map[6][3])
    6744:	2d a5       	ldd	r18, Y+45	; 0x2d
    6746:	30 e0       	ldi	r19, 0x00	; 0
    6748:	2f 52       	subi	r18, 0x2F	; 47
    674a:	30 40       	sbci	r19, 0x00	; 0
    674c:	4e a5       	ldd	r20, Y+46	; 0x2e
    674e:	50 e0       	ldi	r21, 0x00	; 0
    6750:	42 17       	cp	r20, r18
    6752:	53 07       	cpc	r21, r19
    6754:	14 f4       	brge	.+4      	; 0x675a <_menu_datetime+0x1da>
					goto CETAK;
				if((__map[6][2] - 0x30) >= __map[6][3]){
					if(__chr < 0x34)
    6756:	84 33       	cpi	r24, 0x34	; 52
    6758:	e0 f4       	brcc	.+56     	; 0x6792 <_menu_datetime+0x212>
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    675a:	f8 01       	movw	r30, r16
    675c:	ee 0f       	add	r30, r30
    675e:	ff 1f       	adc	r31, r31
    6760:	ee 0f       	add	r30, r30
    6762:	ff 1f       	adc	r31, r31
    6764:	ee 0d       	add	r30, r14
    6766:	ff 1d       	adc	r31, r15
    6768:	84 8b       	std	Z+20, r24	; 0x14
			_lcd(__chr);
    676a:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
			__i++;
    676e:	0f 5f       	subi	r16, 0xFF	; 255
    6770:	1f 4f       	sbci	r17, 0xFF	; 255
    6772:	0c 30       	cpi	r16, 0x0C	; 12
    6774:	11 05       	cpc	r17, r1
    6776:	14 f0       	brlt	.+4      	; 0x677c <_menu_datetime+0x1fc>
    6778:	0b e0       	ldi	r16, 0x0B	; 11
    677a:	10 e0       	ldi	r17, 0x00	; 0
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
    677c:	f8 01       	movw	r30, r16
    677e:	ee 0f       	add	r30, r30
    6780:	ff 1f       	adc	r31, r31
    6782:	ee 0f       	add	r30, r30
    6784:	ff 1f       	adc	r31, r31
    6786:	ee 0d       	add	r30, r14
    6788:	ff 1d       	adc	r31, r15
    678a:	82 89       	ldd	r24, Z+18	; 0x12
    678c:	63 89       	ldd	r22, Z+19	; 0x13
    678e:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
LEWAT:		;
		}
		if(__key == _KEY_SHIFT){
    6792:	99 2d       	mov	r25, r9
    6794:	9b 37       	cpi	r25, 0x7B	; 123
    6796:	41 f4       	brne	.+16     	; 0x67a8 <_menu_datetime+0x228>
			__i++;
    6798:	0f 5f       	subi	r16, 0xFF	; 255
    679a:	1f 4f       	sbci	r17, 0xFF	; 255
    679c:	0c 30       	cpi	r16, 0x0C	; 12
    679e:	11 05       	cpc	r17, r1
    67a0:	64 f0       	brlt	.+24     	; 0x67ba <_menu_datetime+0x23a>
    67a2:	0b e0       	ldi	r16, 0x0B	; 11
    67a4:	10 e0       	ldi	r17, 0x00	; 0
    67a6:	09 c0       	rjmp	.+18     	; 0x67ba <_menu_datetime+0x23a>
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CLEAR){
    67a8:	a9 2d       	mov	r26, r9
    67aa:	a7 37       	cpi	r26, 0x77	; 119
    67ac:	91 f4       	brne	.+36     	; 0x67d2 <_menu_datetime+0x252>
			__i--;
    67ae:	01 50       	subi	r16, 0x01	; 1
    67b0:	10 40       	sbci	r17, 0x00	; 0
    67b2:	17 ff       	sbrs	r17, 7
    67b4:	02 c0       	rjmp	.+4      	; 0x67ba <_menu_datetime+0x23a>
    67b6:	00 e0       	ldi	r16, 0x00	; 0
    67b8:	10 e0       	ldi	r17, 0x00	; 0
			if(__i <= 0)
				__i = 0;
			lcd_xy(__map[__i][0], __map[__i][1]);
    67ba:	f8 01       	movw	r30, r16
    67bc:	ee 0f       	add	r30, r30
    67be:	ff 1f       	adc	r31, r31
    67c0:	ee 0f       	add	r30, r30
    67c2:	ff 1f       	adc	r31, r31
    67c4:	ee 0d       	add	r30, r14
    67c6:	ff 1d       	adc	r31, r15
    67c8:	82 89       	ldd	r24, Z+18	; 0x12
    67ca:	63 89       	ldd	r22, Z+19	; 0x13
    67cc:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
    67d0:	6d cf       	rjmp	.-294    	; 0x66ac <_menu_datetime+0x12c>
		}
		if(__key == _KEY_CANCEL)
    67d2:	b9 2d       	mov	r27, r9
    67d4:	b7 3e       	cpi	r27, 0xE7	; 231
    67d6:	09 f4       	brne	.+2      	; 0x67da <_menu_datetime+0x25a>
    67d8:	47 c0       	rjmp	.+142    	; 0x6868 <_menu_datetime+0x2e8>
			break;
		if(__key == _KEY_ENTER){
    67da:	b7 3b       	cpi	r27, 0xB7	; 183
    67dc:	09 f0       	breq	.+2      	; 0x67e0 <_menu_datetime+0x260>
    67de:	66 cf       	rjmp	.-308    	; 0x66ac <_menu_datetime+0x12c>
    67e0:	20 e0       	ldi	r18, 0x00	; 0
    67e2:	30 e0       	ldi	r19, 0x00	; 0
    67e4:	80 e0       	ldi	r24, 0x00	; 0
    67e6:	90 e0       	ldi	r25, 0x00	; 0
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
    67e8:	ae 01       	movw	r20, r28
    67ea:	4f 5f       	subi	r20, 0xFF	; 255
    67ec:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
    67ee:	82 30       	cpi	r24, 0x02	; 2
    67f0:	91 05       	cpc	r25, r1
    67f2:	19 f0       	breq	.+6      	; 0x67fa <_menu_datetime+0x27a>
    67f4:	84 30       	cpi	r24, 0x04	; 4
    67f6:	91 05       	cpc	r25, r1
    67f8:	11 f4       	brne	.+4      	; 0x67fe <_menu_datetime+0x27e>
					__ii++;
    67fa:	2f 5f       	subi	r18, 0xFF	; 255
    67fc:	3f 4f       	sbci	r19, 0xFF	; 255
				__date[__ii] = __map[__i][2];
    67fe:	fa 01       	movw	r30, r20
    6800:	e2 0f       	add	r30, r18
    6802:	f3 1f       	adc	r31, r19
    6804:	d6 01       	movw	r26, r12
    6806:	6c 91       	ld	r22, X
    6808:	60 83       	st	Z, r22
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    680a:	01 96       	adiw	r24, 0x01	; 1
    680c:	64 e0       	ldi	r22, 0x04	; 4
    680e:	70 e0       	ldi	r23, 0x00	; 0
    6810:	c6 0e       	add	r12, r22
    6812:	d7 1e       	adc	r13, r23
    6814:	86 30       	cpi	r24, 0x06	; 6
    6816:	91 05       	cpc	r25, r1
    6818:	19 f0       	breq	.+6      	; 0x6820 <_menu_datetime+0x2a0>
    681a:	2f 5f       	subi	r18, 0xFF	; 255
    681c:	3f 4f       	sbci	r19, 0xFF	; 255
    681e:	e7 cf       	rjmp	.-50     	; 0x67ee <_menu_datetime+0x26e>
    6820:	20 e0       	ldi	r18, 0x00	; 0
    6822:	30 e0       	ldi	r19, 0x00	; 0
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
    6824:	ae 01       	movw	r20, r28
    6826:	46 5f       	subi	r20, 0xF6	; 246
    6828:	5f 4f       	sbci	r21, 0xFF	; 255
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
    682a:	88 30       	cpi	r24, 0x08	; 8
    682c:	91 05       	cpc	r25, r1
    682e:	19 f0       	breq	.+6      	; 0x6836 <_menu_datetime+0x2b6>
    6830:	8a 30       	cpi	r24, 0x0A	; 10
    6832:	91 05       	cpc	r25, r1
    6834:	11 f4       	brne	.+4      	; 0x683a <_menu_datetime+0x2ba>
					__ii++;
    6836:	2f 5f       	subi	r18, 0xFF	; 255
    6838:	3f 4f       	sbci	r19, 0xFF	; 255
				__time[__ii] = __map[__i][2];
    683a:	fa 01       	movw	r30, r20
    683c:	e2 0f       	add	r30, r18
    683e:	f3 1f       	adc	r31, r19
    6840:	d5 01       	movw	r26, r10
    6842:	6c 91       	ld	r22, X
    6844:	60 83       	st	Z, r22
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    6846:	01 96       	adiw	r24, 0x01	; 1
    6848:	64 e0       	ldi	r22, 0x04	; 4
    684a:	70 e0       	ldi	r23, 0x00	; 0
    684c:	a6 0e       	add	r10, r22
    684e:	b7 1e       	adc	r11, r23
    6850:	8c 30       	cpi	r24, 0x0C	; 12
    6852:	91 05       	cpc	r25, r1
    6854:	19 f0       	breq	.+6      	; 0x685c <_menu_datetime+0x2dc>
    6856:	2f 5f       	subi	r18, 0xFF	; 255
    6858:	3f 4f       	sbci	r19, 0xFF	; 255
    685a:	e7 cf       	rjmp	.-50     	; 0x682a <_menu_datetime+0x2aa>
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
			}
			_datetime(_DATETIME_WRITE, __date, __time);
    685c:	81 e0       	ldi	r24, 0x01	; 1
    685e:	be 01       	movw	r22, r28
    6860:	6f 5f       	subi	r22, 0xFF	; 255
    6862:	7f 4f       	sbci	r23, 0xFF	; 255
    6864:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <_datetime>
			break;
		}
	}
	CURSOR_HIDE;
    6868:	8c e0       	ldi	r24, 0x0C	; 12
    686a:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
}
    686e:	ce 5b       	subi	r28, 0xBE	; 190
    6870:	df 4f       	sbci	r29, 0xFF	; 255
    6872:	0f b6       	in	r0, 0x3f	; 63
    6874:	f8 94       	cli
    6876:	de bf       	out	0x3e, r29	; 62
    6878:	0f be       	out	0x3f, r0	; 63
    687a:	cd bf       	out	0x3d, r28	; 61
    687c:	cf 91       	pop	r28
    687e:	df 91       	pop	r29
    6880:	1f 91       	pop	r17
    6882:	0f 91       	pop	r16
    6884:	ff 90       	pop	r15
    6886:	ef 90       	pop	r14
    6888:	df 90       	pop	r13
    688a:	cf 90       	pop	r12
    688c:	bf 90       	pop	r11
    688e:	af 90       	pop	r10
    6890:	9f 90       	pop	r9
    6892:	08 95       	ret

00006894 <FSettingDatetime>:
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    6894:	0e 94 c0 32 	call	0x6580	; 0x6580 <_menu_datetime>
     return MENU_DONE;
}
    6898:	81 e0       	ldi	r24, 0x01	; 1
    689a:	08 95       	ret

0000689c <_menu_printer>:
}

//*************************************************************************
//  ngeset printer

void _menu_printer(void){
    689c:	4f 92       	push	r4
    689e:	5f 92       	push	r5
    68a0:	6f 92       	push	r6
    68a2:	7f 92       	push	r7
    68a4:	8f 92       	push	r8
    68a6:	9f 92       	push	r9
    68a8:	af 92       	push	r10
    68aa:	bf 92       	push	r11
    68ac:	cf 92       	push	r12
    68ae:	df 92       	push	r13
    68b0:	ef 92       	push	r14
    68b2:	ff 92       	push	r15
    68b4:	0f 93       	push	r16
    68b6:	1f 93       	push	r17
    68b8:	df 93       	push	r29
    68ba:	cf 93       	push	r28
    68bc:	cd b7       	in	r28, 0x3d	; 61
    68be:	de b7       	in	r29, 0x3e	; 62
    68c0:	2d 97       	sbiw	r28, 0x0d	; 13
    68c2:	0f b6       	in	r0, 0x3f	; 63
    68c4:	f8 94       	cli
    68c6:	de bf       	out	0x3e, r29	; 62
    68c8:	0f be       	out	0x3f, r0	; 63
    68ca:	cd bf       	out	0x3d, r28	; 61
	char 			__value[6];
	char	__i, __x, __y, __lmt, __start, __key, __num, __buff[6];
//	char lcdteks[20];

	__value[0] = eeprom_read_byte(&DefPrinterType);
    68cc:	80 e3       	ldi	r24, 0x30	; 48
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    68d4:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefPrintSize);
    68d6:	85 e3       	ldi	r24, 0x35	; 53
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    68de:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefPrintLogo);
    68e0:	84 e3       	ldi	r24, 0x34	; 52
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    68e8:	8b 83       	std	Y+3, r24	; 0x03
	__value[3] = eeprom_read_byte(&DefPrintAutoCut);
    68ea:	83 e3       	ldi	r24, 0x33	; 51
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    68f2:	8c 83       	std	Y+4, r24	; 0x04
	__value[4] = eeprom_read_byte(&DefPrintScrollEnd);
    68f4:	81 e3       	ldi	r24, 0x31	; 49
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    68fc:	8d 83       	std	Y+5, r24	; 0x05
	__value[5] = eeprom_read_byte(&DefPrintScrollSpace);
    68fe:	82 e3       	ldi	r24, 0x32	; 50
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    6906:	8e 83       	std	Y+6, r24	; 0x06

	lcd_clear();
    6908:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
    690c:	81 e0       	ldi	r24, 0x01	; 1
    690e:	61 e0       	ldi	r22, 0x01	; 1
    6910:	4d ec       	ldi	r20, 0xCD	; 205
    6912:	5c e0       	ldi	r21, 0x0C	; 12
    6914:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
    6918:	82 e0       	ldi	r24, 0x02	; 2
    691a:	61 e0       	ldi	r22, 0x01	; 1
    691c:	4a eb       	ldi	r20, 0xBA	; 186
    691e:	5c e0       	ldi	r21, 0x0C	; 12
    6920:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
    6924:	83 e0       	ldi	r24, 0x03	; 3
    6926:	61 e0       	ldi	r22, 0x01	; 1
    6928:	4a ea       	ldi	r20, 0xAA	; 170
    692a:	5c e0       	ldi	r21, 0x0C	; 12
    692c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));
    6930:	84 e0       	ldi	r24, 0x04	; 4
    6932:	61 e0       	ldi	r22, 0x01	; 1
    6934:	4a e9       	ldi	r20, 0x9A	; 154
    6936:	5c e0       	ldi	r21, 0x0C	; 12
    6938:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    693c:	0e e7       	ldi	r16, 0x7E	; 126
    693e:	12 e0       	ldi	r17, 0x02	; 2
    6940:	6e 01       	movw	r12, r28
    6942:	08 94       	sec
    6944:	c1 1c       	adc	r12, r1
    6946:	d1 1c       	adc	r13, r1

	for(__i = 0; __i < 6; __i++){
    6948:	88 24       	eor	r8, r8
		__x = pgm_read_byte(&__prntloc[__i][0]);
		__y = pgm_read_byte(&__prntloc[__i][1]);
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    694a:	97 e0       	ldi	r25, 0x07	; 7
    694c:	e9 2e       	mov	r14, r25
    694e:	f1 2c       	mov	r15, r1
    6950:	ec 0e       	add	r14, r28
    6952:	fd 1e       	adc	r15, r29
    6954:	87 e9       	ldi	r24, 0x97	; 151
    6956:	a8 2e       	mov	r10, r24
    6958:	8c e0       	ldi	r24, 0x0C	; 12
    695a:	b8 2e       	mov	r11, r24
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    695c:	b2 e9       	ldi	r27, 0x92	; 146
    695e:	4b 2e       	mov	r4, r27
    6960:	bc e0       	ldi	r27, 0x0C	; 12
    6962:	5b 2e       	mov	r5, r27
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
    6964:	f8 01       	movw	r30, r16
    6966:	64 90       	lpm	r6, Z+
		__y = pgm_read_byte(&__prntloc[__i][1]);
    6968:	31 96       	adiw	r30, 0x01	; 1
    696a:	74 90       	lpm	r7, Z+
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    696c:	d6 01       	movw	r26, r12
    696e:	9d 90       	ld	r9, X+
    6970:	6d 01       	movw	r12, r26
    6972:	00 d0       	rcall	.+0      	; 0x6974 <_menu_printer+0xd8>
    6974:	00 d0       	rcall	.+0      	; 0x6976 <_menu_printer+0xda>
    6976:	00 d0       	rcall	.+0      	; 0x6978 <_menu_printer+0xdc>
    6978:	ad b7       	in	r26, 0x3d	; 61
    697a:	be b7       	in	r27, 0x3e	; 62
    697c:	11 96       	adiw	r26, 0x01	; 1
    697e:	ed b7       	in	r30, 0x3d	; 61
    6980:	fe b7       	in	r31, 0x3e	; 62
    6982:	f2 82       	std	Z+2, r15	; 0x02
    6984:	e1 82       	std	Z+1, r14	; 0x01
    6986:	13 96       	adiw	r26, 0x03	; 3
    6988:	bc 92       	st	X, r11
    698a:	ae 92       	st	-X, r10
    698c:	12 97       	sbiw	r26, 0x02	; 2
    698e:	14 96       	adiw	r26, 0x04	; 4
    6990:	9c 92       	st	X, r9
    6992:	14 97       	sbiw	r26, 0x04	; 4
    6994:	15 96       	adiw	r26, 0x05	; 5
    6996:	1c 92       	st	X, r1
    6998:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    699c:	2d b7       	in	r18, 0x3d	; 61
    699e:	3e b7       	in	r19, 0x3e	; 62
    69a0:	2a 5f       	subi	r18, 0xFA	; 250
    69a2:	3f 4f       	sbci	r19, 0xFF	; 255
    69a4:	0f b6       	in	r0, 0x3f	; 63
    69a6:	f8 94       	cli
    69a8:	3e bf       	out	0x3e, r19	; 62
    69aa:	0f be       	out	0x3f, r0	; 63
    69ac:	2d bf       	out	0x3d, r18	; 61
    69ae:	38 2d       	mov	r19, r8
    69b0:	34 30       	cpi	r19, 0x04	; 4
    69b2:	f1 f4       	brne	.+60     	; 0x69f0 <_menu_printer+0x154>
    69b4:	00 d0       	rcall	.+0      	; 0x69b6 <_menu_printer+0x11a>
    69b6:	00 d0       	rcall	.+0      	; 0x69b8 <_menu_printer+0x11c>
    69b8:	00 d0       	rcall	.+0      	; 0x69ba <_menu_printer+0x11e>
    69ba:	ad b7       	in	r26, 0x3d	; 61
    69bc:	be b7       	in	r27, 0x3e	; 62
    69be:	11 96       	adiw	r26, 0x01	; 1
    69c0:	ed b7       	in	r30, 0x3d	; 61
    69c2:	fe b7       	in	r31, 0x3e	; 62
    69c4:	f2 82       	std	Z+2, r15	; 0x02
    69c6:	e1 82       	std	Z+1, r14	; 0x01
    69c8:	13 96       	adiw	r26, 0x03	; 3
    69ca:	5c 92       	st	X, r5
    69cc:	4e 92       	st	-X, r4
    69ce:	12 97       	sbiw	r26, 0x02	; 2
    69d0:	14 96       	adiw	r26, 0x04	; 4
    69d2:	9c 92       	st	X, r9
    69d4:	14 97       	sbiw	r26, 0x04	; 4
    69d6:	15 96       	adiw	r26, 0x05	; 5
    69d8:	1c 92       	st	X, r1
    69da:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    69de:	2d b7       	in	r18, 0x3d	; 61
    69e0:	3e b7       	in	r19, 0x3e	; 62
    69e2:	2a 5f       	subi	r18, 0xFA	; 250
    69e4:	3f 4f       	sbci	r19, 0xFF	; 255
    69e6:	0f b6       	in	r0, 0x3f	; 63
    69e8:	f8 94       	cli
    69ea:	3e bf       	out	0x3e, r19	; 62
    69ec:	0f be       	out	0x3f, r0	; 63
    69ee:	2d bf       	out	0x3d, r18	; 61
		//_f_punctuation(__buff, 0, 2, 0);
		lcd_print(__x, __y, __buff);
    69f0:	86 2d       	mov	r24, r6
    69f2:	67 2d       	mov	r22, r7
    69f4:	a7 01       	movw	r20, r14
    69f6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
    69fa:	83 94       	inc	r8
    69fc:	0e 5f       	subi	r16, 0xFE	; 254
    69fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6a00:	38 2d       	mov	r19, r8
    6a02:	36 30       	cpi	r19, 0x06	; 6
    6a04:	09 f0       	breq	.+2      	; 0x6a08 <_menu_printer+0x16c>
    6a06:	ae cf       	rjmp	.-164    	; 0x6964 <_menu_printer+0xc8>

		}
		if(__num >= 0x31 && __num <= 0x36){
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
			if(__value[__num - 0x31] == __lmt)
    6a08:	7e 01       	movw	r14, r28
    6a0a:	08 94       	sec
    6a0c:	e1 1c       	adc	r14, r1
    6a0e:	f1 1c       	adc	r15, r1
				__value[__num - 0x31] = __start;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    6a10:	8e 01       	movw	r16, r28
    6a12:	09 5f       	subi	r16, 0xF9	; 249
    6a14:	1f 4f       	sbci	r17, 0xFF	; 255
    6a16:	af e8       	ldi	r26, 0x8F	; 143
    6a18:	ca 2e       	mov	r12, r26
    6a1a:	ac e0       	ldi	r26, 0x0C	; 12
    6a1c:	da 2e       	mov	r13, r26
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    6a1e:	fa e8       	ldi	r31, 0x8A	; 138
    6a20:	8f 2e       	mov	r8, r31
    6a22:	fc e0       	ldi	r31, 0x0C	; 12
    6a24:	9f 2e       	mov	r9, r31
	}
    //sprintf_P(lcdteks,PSTR("6)Space :%.2d"),__value[5]);
	//lcd_print(2,10,lcdteks);

	while(1){	
		__key = _key_scan(1);
    6a26:	81 e0       	ldi	r24, 0x01	; 1
    6a28:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    6a2c:	98 2f       	mov	r25, r24
		__num = _key_btn(__key);
    6a2e:	9d 87       	std	Y+13, r25	; 0x0d
    6a30:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
    6a34:	a8 2e       	mov	r10, r24
		if(__key == _KEY_CANCEL)
    6a36:	9d 85       	ldd	r25, Y+13	; 0x0d
    6a38:	97 3e       	cpi	r25, 0xE7	; 231
    6a3a:	09 f4       	brne	.+2      	; 0x6a3e <_menu_printer+0x1a2>
    6a3c:	8b c0       	rjmp	.+278    	; 0x6b54 <_menu_printer+0x2b8>
			return;
		if(__key==_KEY_ENTER){
    6a3e:	97 3b       	cpi	r25, 0xB7	; 183
    6a40:	f1 f4       	brne	.+60     	; 0x6a7e <_menu_printer+0x1e2>
			eeprom_write_byte(&DefPrinterType, __value[0]);
    6a42:	80 e3       	ldi	r24, 0x30	; 48
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	69 81       	ldd	r22, Y+1	; 0x01
    6a48:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintSize, __value[1]);
    6a4c:	85 e3       	ldi	r24, 0x35	; 53
    6a4e:	90 e0       	ldi	r25, 0x00	; 0
    6a50:	6a 81       	ldd	r22, Y+2	; 0x02
    6a52:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    6a56:	84 e3       	ldi	r24, 0x34	; 52
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	6b 81       	ldd	r22, Y+3	; 0x03
    6a5c:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    6a60:	83 e3       	ldi	r24, 0x33	; 51
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	6c 81       	ldd	r22, Y+4	; 0x04
    6a66:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    6a6a:	81 e3       	ldi	r24, 0x31	; 49
    6a6c:	90 e0       	ldi	r25, 0x00	; 0
    6a6e:	6d 81       	ldd	r22, Y+5	; 0x05
    6a70:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    6a74:	82 e3       	ldi	r24, 0x32	; 50
    6a76:	90 e0       	ldi	r25, 0x00	; 0
    6a78:	6e 81       	ldd	r22, Y+6	; 0x06
    6a7a:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

		}
		if(__num >= 0x31 && __num <= 0x36){
    6a7e:	8a 2d       	mov	r24, r10
    6a80:	81 53       	subi	r24, 0x31	; 49
    6a82:	86 30       	cpi	r24, 0x06	; 6
    6a84:	80 f6       	brcc	.-96     	; 0x6a26 <_menu_printer+0x18a>
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
    6a86:	2a 2d       	mov	r18, r10
    6a88:	30 e0       	ldi	r19, 0x00	; 0
    6a8a:	21 53       	subi	r18, 0x31	; 49
    6a8c:	30 40       	sbci	r19, 0x00	; 0
    6a8e:	f9 01       	movw	r30, r18
    6a90:	e6 57       	subi	r30, 0x76	; 118
    6a92:	fd 4f       	sbci	r31, 0xFD	; 253
    6a94:	84 91       	lpm	r24, Z+
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
    6a96:	f9 01       	movw	r30, r18
    6a98:	e0 57       	subi	r30, 0x70	; 112
    6a9a:	fd 4f       	sbci	r31, 0xFD	; 253
    6a9c:	e4 91       	lpm	r30, Z+
			if(__value[__num - 0x31] == __lmt)
    6a9e:	d7 01       	movw	r26, r14
    6aa0:	a2 0f       	add	r26, r18
    6aa2:	b3 1f       	adc	r27, r19
    6aa4:	9c 91       	ld	r25, X
    6aa6:	98 17       	cp	r25, r24
    6aa8:	11 f4       	brne	.+4      	; 0x6aae <_menu_printer+0x212>
				__value[__num - 0x31] = __start;
    6aaa:	ec 93       	st	X, r30
    6aac:	02 c0       	rjmp	.+4      	; 0x6ab2 <_menu_printer+0x216>
			else
				__value[__num - 0x31]++;
    6aae:	9f 5f       	subi	r25, 0xFF	; 255
    6ab0:	9c 93       	st	X, r25
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
    6ab2:	b9 01       	movw	r22, r18
    6ab4:	66 0f       	add	r22, r22
    6ab6:	77 1f       	adc	r23, r23
    6ab8:	fb 01       	movw	r30, r22
    6aba:	e2 58       	subi	r30, 0x82	; 130
    6abc:	fd 4f       	sbci	r31, 0xFD	; 253
    6abe:	74 90       	lpm	r7, Z+
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
    6ac0:	61 58       	subi	r22, 0x81	; 129
    6ac2:	7d 4f       	sbci	r23, 0xFD	; 253
    6ac4:	fb 01       	movw	r30, r22
    6ac6:	64 90       	lpm	r6, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    6ac8:	2e 0d       	add	r18, r14
    6aca:	3f 1d       	adc	r19, r15
    6acc:	d9 01       	movw	r26, r18
    6ace:	4c 90       	ld	r4, X
    6ad0:	00 d0       	rcall	.+0      	; 0x6ad2 <_menu_printer+0x236>
    6ad2:	00 d0       	rcall	.+0      	; 0x6ad4 <_menu_printer+0x238>
    6ad4:	00 d0       	rcall	.+0      	; 0x6ad6 <_menu_printer+0x23a>
    6ad6:	ed b7       	in	r30, 0x3d	; 61
    6ad8:	fe b7       	in	r31, 0x3e	; 62
    6ada:	31 96       	adiw	r30, 0x01	; 1
    6adc:	ad b7       	in	r26, 0x3d	; 61
    6ade:	be b7       	in	r27, 0x3e	; 62
    6ae0:	12 96       	adiw	r26, 0x02	; 2
    6ae2:	1c 93       	st	X, r17
    6ae4:	0e 93       	st	-X, r16
    6ae6:	11 97       	sbiw	r26, 0x01	; 1
    6ae8:	d3 82       	std	Z+3, r13	; 0x03
    6aea:	c2 82       	std	Z+2, r12	; 0x02
    6aec:	44 82       	std	Z+4, r4	; 0x04
    6aee:	15 82       	std	Z+5, r1	; 0x05
    6af0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
    6af4:	8a 2d       	mov	r24, r10
    6af6:	85 53       	subi	r24, 0x35	; 53
    6af8:	ed b7       	in	r30, 0x3d	; 61
    6afa:	fe b7       	in	r31, 0x3e	; 62
    6afc:	36 96       	adiw	r30, 0x06	; 6
    6afe:	0f b6       	in	r0, 0x3f	; 63
    6b00:	f8 94       	cli
    6b02:	fe bf       	out	0x3e, r31	; 62
    6b04:	0f be       	out	0x3f, r0	; 63
    6b06:	ed bf       	out	0x3d, r30	; 61
    6b08:	82 30       	cpi	r24, 0x02	; 2
    6b0a:	f0 f4       	brcc	.+60     	; 0x6b48 <_menu_printer+0x2ac>
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    6b0c:	00 d0       	rcall	.+0      	; 0x6b0e <_menu_printer+0x272>
    6b0e:	00 d0       	rcall	.+0      	; 0x6b10 <_menu_printer+0x274>
    6b10:	00 d0       	rcall	.+0      	; 0x6b12 <_menu_printer+0x276>
    6b12:	ad b7       	in	r26, 0x3d	; 61
    6b14:	be b7       	in	r27, 0x3e	; 62
    6b16:	11 96       	adiw	r26, 0x01	; 1
    6b18:	ed b7       	in	r30, 0x3d	; 61
    6b1a:	fe b7       	in	r31, 0x3e	; 62
    6b1c:	12 83       	std	Z+2, r17	; 0x02
    6b1e:	01 83       	std	Z+1, r16	; 0x01
    6b20:	13 96       	adiw	r26, 0x03	; 3
    6b22:	9c 92       	st	X, r9
    6b24:	8e 92       	st	-X, r8
    6b26:	12 97       	sbiw	r26, 0x02	; 2
    6b28:	14 96       	adiw	r26, 0x04	; 4
    6b2a:	4c 92       	st	X, r4
    6b2c:	14 97       	sbiw	r26, 0x04	; 4
    6b2e:	15 96       	adiw	r26, 0x05	; 5
    6b30:	1c 92       	st	X, r1
    6b32:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    6b36:	2d b7       	in	r18, 0x3d	; 61
    6b38:	3e b7       	in	r19, 0x3e	; 62
    6b3a:	2a 5f       	subi	r18, 0xFA	; 250
    6b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b3e:	0f b6       	in	r0, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	3e bf       	out	0x3e, r19	; 62
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	2d bf       	out	0x3d, r18	; 61
				//_f_punctuation(__buff, 0, 2, 0);

			lcd_print(__x, __y, __buff);
    6b48:	87 2d       	mov	r24, r7
    6b4a:	66 2d       	mov	r22, r6
    6b4c:	a8 01       	movw	r20, r16
    6b4e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    6b52:	69 cf       	rjmp	.-302    	; 0x6a26 <_menu_printer+0x18a>
		}
	}
}
    6b54:	2d 96       	adiw	r28, 0x0d	; 13
    6b56:	0f b6       	in	r0, 0x3f	; 63
    6b58:	f8 94       	cli
    6b5a:	de bf       	out	0x3e, r29	; 62
    6b5c:	0f be       	out	0x3f, r0	; 63
    6b5e:	cd bf       	out	0x3d, r28	; 61
    6b60:	cf 91       	pop	r28
    6b62:	df 91       	pop	r29
    6b64:	1f 91       	pop	r17
    6b66:	0f 91       	pop	r16
    6b68:	ff 90       	pop	r15
    6b6a:	ef 90       	pop	r14
    6b6c:	df 90       	pop	r13
    6b6e:	cf 90       	pop	r12
    6b70:	bf 90       	pop	r11
    6b72:	af 90       	pop	r10
    6b74:	9f 90       	pop	r9
    6b76:	8f 90       	pop	r8
    6b78:	7f 90       	pop	r7
    6b7a:	6f 90       	pop	r6
    6b7c:	5f 90       	pop	r5
    6b7e:	4f 90       	pop	r4
    6b80:	08 95       	ret

00006b82 <FSettingPrinter>:
char FSettingDatetime(){
     _menu_datetime();
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    6b82:	0e 94 4e 34 	call	0x689c	; 0x689c <_menu_printer>
	 return MENU_DONE;
}
    6b86:	81 e0       	ldi	r24, 0x01	; 1
    6b88:	08 95       	ret

00006b8a <_menu_host>:
			lcd_print(__x, __y, __buff);
		}
	}
}

void _menu_host(void){
    6b8a:	4f 92       	push	r4
    6b8c:	5f 92       	push	r5
    6b8e:	6f 92       	push	r6
    6b90:	7f 92       	push	r7
    6b92:	8f 92       	push	r8
    6b94:	9f 92       	push	r9
    6b96:	af 92       	push	r10
    6b98:	bf 92       	push	r11
    6b9a:	df 92       	push	r13
    6b9c:	ef 92       	push	r14
    6b9e:	ff 92       	push	r15
    6ba0:	0f 93       	push	r16
    6ba2:	1f 93       	push	r17
    6ba4:	df 93       	push	r29
    6ba6:	cf 93       	push	r28
    6ba8:	cd b7       	in	r28, 0x3d	; 61
    6baa:	de b7       	in	r29, 0x3e	; 62
    6bac:	6e 97       	sbiw	r28, 0x1e	; 30
    6bae:	0f b6       	in	r0, 0x3f	; 63
    6bb0:	f8 94       	cli
    6bb2:	de bf       	out	0x3e, r29	; 62
    6bb4:	0f be       	out	0x3f, r0	; 63
    6bb6:	cd bf       	out	0x3d, r28	; 61
	char 			__value[4];
	unsigned char	__i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];
	char TermID;

	__value[0] = eeprom_read_byte(&DefPrintMoney);
    6bb8:	81 ec       	ldi	r24, 0xC1	; 193
    6bba:	93 e0       	ldi	r25, 0x03	; 3
    6bbc:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    6bc0:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefShowDateTime);
    6bc2:	87 e3       	ldi	r24, 0x37	; 55
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    6bca:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefNotifScreen);
    6bcc:	88 e3       	ldi	r24, 0x38	; 56
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    6bd4:	8b 83       	std	Y+3, r24	; 0x03
	TermID= eeprom_read_byte(&DefIFT_ID);
    6bd6:	80 e0       	ldi	r24, 0x00	; 0
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    6bde:	d8 2e       	mov	r13, r24


	lcd_clear();_delay_ms(10);
    6be0:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    6be4:	8f ef       	ldi	r24, 0xFF	; 255
    6be6:	9f e8       	ldi	r25, 0x8F	; 143
    6be8:	01 97       	sbiw	r24, 0x01	; 1
    6bea:	f1 f7       	brne	.-4      	; 0x6be8 <_menu_host+0x5e>
    6bec:	00 c0       	rjmp	.+0      	; 0x6bee <_menu_host+0x64>
    6bee:	00 00       	nop
	lcd_printf(1, 1, PSTR("1)Money :"));
    6bf0:	81 e0       	ldi	r24, 0x01	; 1
    6bf2:	61 e0       	ldi	r22, 0x01	; 1
    6bf4:	40 e8       	ldi	r20, 0x80	; 128
    6bf6:	5c e0       	ldi	r21, 0x0C	; 12
    6bf8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(2, 1, PSTR("2)D/T   :"));
    6bfc:	82 e0       	ldi	r24, 0x02	; 2
    6bfe:	61 e0       	ldi	r22, 0x01	; 1
    6c00:	46 e7       	ldi	r20, 0x76	; 118
    6c02:	5c e0       	ldi	r21, 0x0C	; 12
    6c04:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    6c08:	83 e0       	ldi	r24, 0x03	; 3
    6c0a:	61 e0       	ldi	r22, 0x01	; 1
    6c0c:	41 e6       	ldi	r20, 0x61	; 97
    6c0e:	5c e0       	ldi	r21, 0x0C	; 12
    6c10:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    6c14:	00 d0       	rcall	.+0      	; 0x6c16 <_menu_host+0x8c>
    6c16:	00 d0       	rcall	.+0      	; 0x6c18 <_menu_host+0x8e>
    6c18:	00 d0       	rcall	.+0      	; 0x6c1a <_menu_host+0x90>
    6c1a:	ed b7       	in	r30, 0x3d	; 61
    6c1c:	fe b7       	in	r31, 0x3e	; 62
    6c1e:	31 96       	adiw	r30, 0x01	; 1
    6c20:	8e 01       	movw	r16, r28
    6c22:	06 5f       	subi	r16, 0xF6	; 246
    6c24:	1f 4f       	sbci	r17, 0xFF	; 255
    6c26:	ad b7       	in	r26, 0x3d	; 61
    6c28:	be b7       	in	r27, 0x3e	; 62
    6c2a:	12 96       	adiw	r26, 0x02	; 2
    6c2c:	1c 93       	st	X, r17
    6c2e:	0e 93       	st	-X, r16
    6c30:	11 97       	sbiw	r26, 0x01	; 1
    6c32:	84 e5       	ldi	r24, 0x54	; 84
    6c34:	9c e0       	ldi	r25, 0x0C	; 12
    6c36:	93 83       	std	Z+3, r25	; 0x03
    6c38:	82 83       	std	Z+2, r24	; 0x02
    6c3a:	d4 82       	std	Z+4, r13	; 0x04
    6c3c:	15 82       	std	Z+5, r1	; 0x05
    6c3e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	lcd_print(4, 1,lcdteks);
    6c42:	ed b7       	in	r30, 0x3d	; 61
    6c44:	fe b7       	in	r31, 0x3e	; 62
    6c46:	36 96       	adiw	r30, 0x06	; 6
    6c48:	0f b6       	in	r0, 0x3f	; 63
    6c4a:	f8 94       	cli
    6c4c:	fe bf       	out	0x3e, r31	; 62
    6c4e:	0f be       	out	0x3f, r0	; 63
    6c50:	ed bf       	out	0x3d, r30	; 61
    6c52:	84 e0       	ldi	r24, 0x04	; 4
    6c54:	61 e0       	ldi	r22, 0x01	; 1
    6c56:	a8 01       	movw	r20, r16
    6c58:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	lcd_printf(4, 15, PSTR("#)Save"));
    6c5c:	84 e0       	ldi	r24, 0x04	; 4
    6c5e:	6f e0       	ldi	r22, 0x0F	; 15
    6c60:	4d e4       	ldi	r20, 0x4D	; 77
    6c62:	5c e0       	ldi	r21, 0x0C	; 12
    6c64:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    6c68:	06 e9       	ldi	r16, 0x96	; 150
    6c6a:	12 e0       	ldi	r17, 0x02	; 2
    6c6c:	7e 01       	movw	r14, r28
    6c6e:	08 94       	sec
    6c70:	e1 1c       	adc	r14, r1
    6c72:	f1 1c       	adc	r15, r1

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
		__y = pgm_read_byte(&__hostloc[__i][1]);
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    6c74:	f5 e0       	ldi	r31, 0x05	; 5
    6c76:	af 2e       	mov	r10, r31
    6c78:	b1 2c       	mov	r11, r1
    6c7a:	ac 0e       	add	r10, r28
    6c7c:	bd 1e       	adc	r11, r29
    6c7e:	ea e4       	ldi	r30, 0x4A	; 74
    6c80:	8e 2e       	mov	r8, r30
    6c82:	ec e0       	ldi	r30, 0x0C	; 12
    6c84:	9e 2e       	mov	r9, r30
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
    6c86:	f8 01       	movw	r30, r16
    6c88:	64 90       	lpm	r6, Z+
		__y = pgm_read_byte(&__hostloc[__i][1]);
    6c8a:	31 96       	adiw	r30, 0x01	; 1
    6c8c:	64 91       	lpm	r22, Z+
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    6c8e:	d7 01       	movw	r26, r14
    6c90:	8d 91       	ld	r24, X+
    6c92:	7d 01       	movw	r14, r26
    6c94:	00 d0       	rcall	.+0      	; 0x6c96 <_menu_host+0x10c>
    6c96:	00 d0       	rcall	.+0      	; 0x6c98 <_menu_host+0x10e>
    6c98:	00 d0       	rcall	.+0      	; 0x6c9a <_menu_host+0x110>
    6c9a:	ad b7       	in	r26, 0x3d	; 61
    6c9c:	be b7       	in	r27, 0x3e	; 62
    6c9e:	11 96       	adiw	r26, 0x01	; 1
    6ca0:	ed b7       	in	r30, 0x3d	; 61
    6ca2:	fe b7       	in	r31, 0x3e	; 62
    6ca4:	b2 82       	std	Z+2, r11	; 0x02
    6ca6:	a1 82       	std	Z+1, r10	; 0x01
    6ca8:	13 96       	adiw	r26, 0x03	; 3
    6caa:	9c 92       	st	X, r9
    6cac:	8e 92       	st	-X, r8
    6cae:	12 97       	sbiw	r26, 0x02	; 2
    6cb0:	14 96       	adiw	r26, 0x04	; 4
    6cb2:	8c 93       	st	X, r24
    6cb4:	14 97       	sbiw	r26, 0x04	; 4
    6cb6:	15 96       	adiw	r26, 0x05	; 5
    6cb8:	1c 92       	st	X, r1
    6cba:	6e 8f       	std	Y+30, r22	; 0x1e
    6cbc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
    6cc0:	8d b7       	in	r24, 0x3d	; 61
    6cc2:	9e b7       	in	r25, 0x3e	; 62
    6cc4:	06 96       	adiw	r24, 0x06	; 6
    6cc6:	0f b6       	in	r0, 0x3f	; 63
    6cc8:	f8 94       	cli
    6cca:	9e bf       	out	0x3e, r25	; 62
    6ccc:	0f be       	out	0x3f, r0	; 63
    6cce:	8d bf       	out	0x3d, r24	; 61
    6cd0:	86 2d       	mov	r24, r6
    6cd2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    6cd4:	a5 01       	movw	r20, r10
    6cd6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    6cda:	0e 5f       	subi	r16, 0xFE	; 254
    6cdc:	1f 4f       	sbci	r17, 0xFF	; 255
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
    6cde:	92 e0       	ldi	r25, 0x02	; 2
    6ce0:	0c 39       	cpi	r16, 0x9C	; 156
    6ce2:	19 07       	cpc	r17, r25
    6ce4:	81 f6       	brne	.-96     	; 0x6c86 <_menu_host+0xfc>
			lcd_print(__x, __y, __buff);
		}else
		if (__num=='4'){
		    if (TermID<=99)TermID++;
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    6ce6:	8e 01       	movw	r16, r28
    6ce8:	06 5f       	subi	r16, 0xF6	; 246
    6cea:	1f 4f       	sbci	r17, 0xFF	; 255
    6cec:	7a e3       	ldi	r23, 0x3A	; 58
    6cee:	67 2e       	mov	r6, r23
    6cf0:	7c e0       	ldi	r23, 0x0C	; 12
    6cf2:	77 2e       	mov	r7, r23
			eeprom_write_byte(&DefNotifScreen, __value[2]);
			eeprom_write_byte(&DefIFT_ID,TermID);
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
			if(__value[__num - 0x31] == 1)
    6cf4:	7e 01       	movw	r14, r28
    6cf6:	08 94       	sec
    6cf8:	e1 1c       	adc	r14, r1
    6cfa:	f1 1c       	adc	r15, r1
				__value[__num - 0x31] = 0;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    6cfc:	65 e0       	ldi	r22, 0x05	; 5
    6cfe:	a6 2e       	mov	r10, r22
    6d00:	b1 2c       	mov	r11, r1
    6d02:	ac 0e       	add	r10, r28
    6d04:	bd 1e       	adc	r11, r29
    6d06:	57 e4       	ldi	r21, 0x47	; 71
    6d08:	45 2e       	mov	r4, r21
    6d0a:	5c e0       	ldi	r21, 0x0C	; 12
    6d0c:	55 2e       	mov	r5, r21
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
	}

	while(1){
		__key = _key_scan(1);
    6d0e:	81 e0       	ldi	r24, 0x01	; 1
    6d10:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    6d14:	98 2f       	mov	r25, r24
		__num = _key_btn(__key);
    6d16:	9e 8f       	std	Y+30, r25	; 0x1e
    6d18:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>

		if(__key == _KEY_CANCEL)
    6d1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6d1e:	97 3e       	cpi	r25, 0xE7	; 231
    6d20:	09 f4       	brne	.+2      	; 0x6d24 <_menu_host+0x19a>
    6d22:	90 c0       	rjmp	.+288    	; 0x6e44 <_menu_host+0x2ba>
			return;
		if(__key==_KEY_ENTER){
    6d24:	97 3b       	cpi	r25, 0xB7	; 183
    6d26:	a9 f4       	brne	.+42     	; 0x6d52 <_menu_host+0x1c8>
			eeprom_write_byte(&DefPrintMoney, __value[0]);
    6d28:	81 ec       	ldi	r24, 0xC1	; 193
    6d2a:	93 e0       	ldi	r25, 0x03	; 3
    6d2c:	69 81       	ldd	r22, Y+1	; 0x01
    6d2e:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefShowDateTime, __value[1]);
    6d32:	87 e3       	ldi	r24, 0x37	; 55
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	6a 81       	ldd	r22, Y+2	; 0x02
    6d38:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefNotifScreen, __value[2]);
    6d3c:	88 e3       	ldi	r24, 0x38	; 56
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	6b 81       	ldd	r22, Y+3	; 0x03
    6d42:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
			eeprom_write_byte(&DefIFT_ID,TermID);
    6d46:	80 e0       	ldi	r24, 0x00	; 0
    6d48:	90 e0       	ldi	r25, 0x00	; 0
    6d4a:	6d 2d       	mov	r22, r13
    6d4c:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
    6d50:	79 c0       	rjmp	.+242    	; 0x6e44 <_menu_host+0x2ba>
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
    6d52:	98 2f       	mov	r25, r24
    6d54:	91 53       	subi	r25, 0x31	; 49
    6d56:	93 30       	cpi	r25, 0x03	; 3
    6d58:	08 f0       	brcs	.+2      	; 0x6d5c <_menu_host+0x1d2>
    6d5a:	44 c0       	rjmp	.+136    	; 0x6de4 <_menu_host+0x25a>
			if(__value[__num - 0x31] == 1)
    6d5c:	28 2f       	mov	r18, r24
    6d5e:	30 e0       	ldi	r19, 0x00	; 0
    6d60:	21 53       	subi	r18, 0x31	; 49
    6d62:	30 40       	sbci	r19, 0x00	; 0
    6d64:	f7 01       	movw	r30, r14
    6d66:	e2 0f       	add	r30, r18
    6d68:	f3 1f       	adc	r31, r19
    6d6a:	90 81       	ld	r25, Z
    6d6c:	91 30       	cpi	r25, 0x01	; 1
    6d6e:	11 f4       	brne	.+4      	; 0x6d74 <_menu_host+0x1ea>
				__value[__num - 0x31] = 0;
    6d70:	10 82       	st	Z, r1
    6d72:	02 c0       	rjmp	.+4      	; 0x6d78 <_menu_host+0x1ee>
			else
				__value[__num - 0x31]++;
    6d74:	9f 5f       	subi	r25, 0xFF	; 255
    6d76:	90 83       	st	Z, r25
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
    6d78:	68 2f       	mov	r22, r24
    6d7a:	70 e0       	ldi	r23, 0x00	; 0
    6d7c:	61 53       	subi	r22, 0x31	; 49
    6d7e:	70 40       	sbci	r23, 0x00	; 0
    6d80:	66 0f       	add	r22, r22
    6d82:	77 1f       	adc	r23, r23
    6d84:	fb 01       	movw	r30, r22
    6d86:	ea 56       	subi	r30, 0x6A	; 106
    6d88:	fd 4f       	sbci	r31, 0xFD	; 253
    6d8a:	84 90       	lpm	r8, Z+
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
    6d8c:	69 56       	subi	r22, 0x69	; 105
    6d8e:	7d 4f       	sbci	r23, 0xFD	; 253
    6d90:	fb 01       	movw	r30, r22
    6d92:	64 91       	lpm	r22, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    6d94:	00 d0       	rcall	.+0      	; 0x6d96 <_menu_host+0x20c>
    6d96:	00 d0       	rcall	.+0      	; 0x6d98 <_menu_host+0x20e>
    6d98:	00 d0       	rcall	.+0      	; 0x6d9a <_menu_host+0x210>
    6d9a:	ad b7       	in	r26, 0x3d	; 61
    6d9c:	be b7       	in	r27, 0x3e	; 62
    6d9e:	11 96       	adiw	r26, 0x01	; 1
    6da0:	ed b7       	in	r30, 0x3d	; 61
    6da2:	fe b7       	in	r31, 0x3e	; 62
    6da4:	b2 82       	std	Z+2, r11	; 0x02
    6da6:	a1 82       	std	Z+1, r10	; 0x01
    6da8:	13 96       	adiw	r26, 0x03	; 3
    6daa:	5c 92       	st	X, r5
    6dac:	4e 92       	st	-X, r4
    6dae:	12 97       	sbiw	r26, 0x02	; 2
    6db0:	2e 0d       	add	r18, r14
    6db2:	3f 1d       	adc	r19, r15
    6db4:	f9 01       	movw	r30, r18
    6db6:	80 81       	ld	r24, Z
    6db8:	14 96       	adiw	r26, 0x04	; 4
    6dba:	8c 93       	st	X, r24
    6dbc:	14 97       	sbiw	r26, 0x04	; 4
    6dbe:	15 96       	adiw	r26, 0x05	; 5
    6dc0:	1c 92       	st	X, r1
    6dc2:	6e 8f       	std	Y+30, r22	; 0x1e
    6dc4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			lcd_print(__x, __y, __buff);
    6dc8:	8d b7       	in	r24, 0x3d	; 61
    6dca:	9e b7       	in	r25, 0x3e	; 62
    6dcc:	06 96       	adiw	r24, 0x06	; 6
    6dce:	0f b6       	in	r0, 0x3f	; 63
    6dd0:	f8 94       	cli
    6dd2:	9e bf       	out	0x3e, r25	; 62
    6dd4:	0f be       	out	0x3f, r0	; 63
    6dd6:	8d bf       	out	0x3d, r24	; 61
    6dd8:	88 2d       	mov	r24, r8
    6dda:	6e 8d       	ldd	r22, Y+30	; 0x1e
    6ddc:	a5 01       	movw	r20, r10
    6dde:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    6de2:	95 cf       	rjmp	.-214    	; 0x6d0e <_menu_host+0x184>
		}else
		if (__num=='4'){
    6de4:	84 33       	cpi	r24, 0x34	; 52
    6de6:	09 f0       	breq	.+2      	; 0x6dea <_menu_host+0x260>
    6de8:	92 cf       	rjmp	.-220    	; 0x6d0e <_menu_host+0x184>
		    if (TermID<=99)TermID++;
    6dea:	9d 2d       	mov	r25, r13
    6dec:	94 36       	cpi	r25, 0x64	; 100
    6dee:	10 f4       	brcc	.+4      	; 0x6df4 <_menu_host+0x26a>
    6df0:	d3 94       	inc	r13
    6df2:	02 c0       	rjmp	.+4      	; 0x6df8 <_menu_host+0x26e>
			else TermID=1;
    6df4:	dd 24       	eor	r13, r13
    6df6:	d3 94       	inc	r13
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    6df8:	00 d0       	rcall	.+0      	; 0x6dfa <_menu_host+0x270>
    6dfa:	00 d0       	rcall	.+0      	; 0x6dfc <_menu_host+0x272>
    6dfc:	00 d0       	rcall	.+0      	; 0x6dfe <_menu_host+0x274>
    6dfe:	ed b7       	in	r30, 0x3d	; 61
    6e00:	fe b7       	in	r31, 0x3e	; 62
    6e02:	31 96       	adiw	r30, 0x01	; 1
    6e04:	ad b7       	in	r26, 0x3d	; 61
    6e06:	be b7       	in	r27, 0x3e	; 62
    6e08:	12 96       	adiw	r26, 0x02	; 2
    6e0a:	1c 93       	st	X, r17
    6e0c:	0e 93       	st	-X, r16
    6e0e:	11 97       	sbiw	r26, 0x01	; 1
    6e10:	73 82       	std	Z+3, r7	; 0x03
    6e12:	62 82       	std	Z+2, r6	; 0x02
    6e14:	d4 82       	std	Z+4, r13	; 0x04
    6e16:	15 82       	std	Z+5, r1	; 0x05
    6e18:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 lcd_print(4, 1,lcdteks);lcd_printf(4, 15, PSTR("#)Save"));
    6e1c:	ed b7       	in	r30, 0x3d	; 61
    6e1e:	fe b7       	in	r31, 0x3e	; 62
    6e20:	36 96       	adiw	r30, 0x06	; 6
    6e22:	0f b6       	in	r0, 0x3f	; 63
    6e24:	f8 94       	cli
    6e26:	fe bf       	out	0x3e, r31	; 62
    6e28:	0f be       	out	0x3f, r0	; 63
    6e2a:	ed bf       	out	0x3d, r30	; 61
    6e2c:	84 e0       	ldi	r24, 0x04	; 4
    6e2e:	61 e0       	ldi	r22, 0x01	; 1
    6e30:	a8 01       	movw	r20, r16
    6e32:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    6e36:	84 e0       	ldi	r24, 0x04	; 4
    6e38:	6f e0       	ldi	r22, 0x0F	; 15
    6e3a:	43 e3       	ldi	r20, 0x33	; 51
    6e3c:	5c e0       	ldi	r21, 0x0C	; 12
    6e3e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    6e42:	65 cf       	rjmp	.-310    	; 0x6d0e <_menu_host+0x184>
		 
		}

	}
}
    6e44:	6e 96       	adiw	r28, 0x1e	; 30
    6e46:	0f b6       	in	r0, 0x3f	; 63
    6e48:	f8 94       	cli
    6e4a:	de bf       	out	0x3e, r29	; 62
    6e4c:	0f be       	out	0x3f, r0	; 63
    6e4e:	cd bf       	out	0x3d, r28	; 61
    6e50:	cf 91       	pop	r28
    6e52:	df 91       	pop	r29
    6e54:	1f 91       	pop	r17
    6e56:	0f 91       	pop	r16
    6e58:	ff 90       	pop	r15
    6e5a:	ef 90       	pop	r14
    6e5c:	df 90       	pop	r13
    6e5e:	bf 90       	pop	r11
    6e60:	af 90       	pop	r10
    6e62:	9f 90       	pop	r9
    6e64:	8f 90       	pop	r8
    6e66:	7f 90       	pop	r7
    6e68:	6f 90       	pop	r6
    6e6a:	5f 90       	pop	r5
    6e6c:	4f 90       	pop	r4
    6e6e:	08 95       	ret

00006e70 <FSettingHost>:
char FSettingPrinter(){
     _menu_printer();
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    6e70:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <_menu_host>
	 return MENU_DONE;
}
    6e74:	81 e0       	ldi	r24, 0x01	; 1
    6e76:	08 95       	ret

00006e78 <zeroIP>:
		 
		}

	}
}
void zeroIP(unsigned char Val,char *StrResult){
    6e78:	28 2f       	mov	r18, r24
    6e7a:	fb 01       	movw	r30, r22
     unsigned char R,P,S;
	 if (Val>=100){
    6e7c:	84 36       	cpi	r24, 0x64	; 100
    6e7e:	d0 f0       	brcs	.+52     	; 0x6eb4 <zeroIP+0x3c>
	    R=(Val/100);
    6e80:	64 e6       	ldi	r22, 0x64	; 100
    6e82:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    6e86:	38 2f       	mov	r19, r24
    6e88:	89 2f       	mov	r24, r25
        P=((Val%100)/10);
    6e8a:	6a e0       	ldi	r22, 0x0A	; 10
    6e8c:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
		S=Val-((R*100)+(P*10)); 
        StrResult[0]='0'+R;//+(Val/100);
    6e90:	93 2f       	mov	r25, r19
    6e92:	90 5d       	subi	r25, 0xD0	; 208
    6e94:	90 83       	st	Z, r25
	    StrResult[1]='0'+P;//+((Val%100)/10);
    6e96:	98 2f       	mov	r25, r24
    6e98:	90 5d       	subi	r25, 0xD0	; 208
    6e9a:	91 83       	std	Z+1, r25	; 0x01
void zeroIP(unsigned char Val,char *StrResult){
     unsigned char R,P,S;
	 if (Val>=100){
	    R=(Val/100);
        P=((Val%100)/10);
		S=Val-((R*100)+(P*10)); 
    6e9c:	20 5d       	subi	r18, 0xD0	; 208
    6e9e:	9c e9       	ldi	r25, 0x9C	; 156
    6ea0:	39 9f       	mul	r19, r25
    6ea2:	30 2d       	mov	r19, r0
    6ea4:	11 24       	eor	r1, r1
    6ea6:	23 0f       	add	r18, r19
    6ea8:	96 ef       	ldi	r25, 0xF6	; 246
    6eaa:	89 9f       	mul	r24, r25
    6eac:	80 2d       	mov	r24, r0
    6eae:	11 24       	eor	r1, r1
        StrResult[0]='0'+R;//+(Val/100);
	    StrResult[1]='0'+P;//+((Val%100)/10);
		StrResult[2]='0'+S;//+(Val-((Val/100)*100)-((Val%100)/10));
    6eb0:	28 0f       	add	r18, r24
    6eb2:	12 c0       	rjmp	.+36     	; 0x6ed8 <zeroIP+0x60>
		StrResult[3]=0;
		}else     
	 if ((Val>=10)&&(Val<100)){
    6eb4:	8a 50       	subi	r24, 0x0A	; 10
    6eb6:	8a 35       	cpi	r24, 0x5A	; 90
    6eb8:	58 f4       	brcc	.+22     	; 0x6ed0 <zeroIP+0x58>
        StrResult[0]='0';
    6eba:	80 e3       	ldi	r24, 0x30	; 48
    6ebc:	80 83       	st	Z, r24
	    StrResult[1]=('0'+(Val/10));
    6ebe:	82 2f       	mov	r24, r18
    6ec0:	6a e0       	ldi	r22, 0x0A	; 10
    6ec2:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    6ec6:	80 5d       	subi	r24, 0xD0	; 208
    6ec8:	81 83       	std	Z+1, r24	; 0x01
		StrResult[2]=('0'+(Val%10));
    6eca:	90 5d       	subi	r25, 0xD0	; 208
    6ecc:	92 83       	std	Z+2, r25	; 0x02
    6ece:	05 c0       	rjmp	.+10     	; 0x6eda <zeroIP+0x62>
		StrResult[3]=0;
		}
     else
	 if (Val<10){
	    StrResult[0]='0';
    6ed0:	80 e3       	ldi	r24, 0x30	; 48
    6ed2:	80 83       	st	Z, r24
		StrResult[1]='0';
    6ed4:	81 83       	std	Z+1, r24	; 0x01
	    StrResult[2]='0'+Val;
    6ed6:	20 5d       	subi	r18, 0xD0	; 208
    6ed8:	22 83       	std	Z+2, r18	; 0x02
	    StrResult[3]=0;
    6eda:	13 82       	std	Z+3, r1	; 0x03
    6edc:	08 95       	ret

00006ede <clearString>:
	     break;
	}
  return Result;
}

void clearString(char *str){
    6ede:	cf 93       	push	r28
    6ee0:	df 93       	push	r29
     int i;
	 for(i=0;i<strlen(str);i++){
    6ee2:	28 2f       	mov	r18, r24
    6ee4:	39 2f       	mov	r19, r25
    6ee6:	e9 01       	movw	r28, r18
    6ee8:	20 e0       	ldi	r18, 0x00	; 0
    6eea:	30 e0       	ldi	r19, 0x00	; 0
    6eec:	03 c0       	rjmp	.+6      	; 0x6ef4 <clearString+0x16>
	    str[i]=0;
    6eee:	19 92       	st	Y+, r1
  return Result;
}

void clearString(char *str){
     int i;
	 for(i=0;i<strlen(str);i++){
    6ef0:	2f 5f       	subi	r18, 0xFF	; 255
    6ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ef4:	fc 01       	movw	r30, r24
    6ef6:	01 90       	ld	r0, Z+
    6ef8:	00 20       	and	r0, r0
    6efa:	e9 f7       	brne	.-6      	; 0x6ef6 <clearString+0x18>
    6efc:	31 97       	sbiw	r30, 0x01	; 1
    6efe:	e8 1b       	sub	r30, r24
    6f00:	f9 0b       	sbc	r31, r25
    6f02:	2e 17       	cp	r18, r30
    6f04:	3f 07       	cpc	r19, r31
    6f06:	98 f3       	brcs	.-26     	; 0x6eee <clearString+0x10>
	    str[i]=0;
	 }
}
    6f08:	df 91       	pop	r29
    6f0a:	cf 91       	pop	r28
    6f0c:	08 95       	ret

00006f0e <GetLocAccStatus>:


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    6f0e:	81 30       	cpi	r24, 0x01	; 1
    6f10:	31 f0       	breq	.+12     	; 0x6f1e <GetLocAccStatus+0x10>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    6f12:	82 30       	cpi	r24, 0x02	; 2
    6f14:	31 f0       	breq	.+12     	; 0x6f22 <GetLocAccStatus+0x14>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    6f16:	83 30       	cpi	r24, 0x03	; 3
    6f18:	31 f0       	breq	.+12     	; 0x6f26 <GetLocAccStatus+0x18>



char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
    6f1a:	80 e0       	ldi	r24, 0x00	; 0
    6f1c:	08 95       	ret
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    6f1e:	81 e0       	ldi	r24, 0x01	; 1
    6f20:	08 95       	ret
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    6f22:	82 e0       	ldi	r24, 0x02	; 2
    6f24:	08 95       	ret
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    6f26:	83 e0       	ldi	r24, 0x03	; 3
	 return Result;
}
    6f28:	08 95       	ret

00006f2a <RemSpaceLag>:
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    6f2a:	ef 92       	push	r14
    6f2c:	ff 92       	push	r15
    6f2e:	0f 93       	push	r16
    6f30:	1f 93       	push	r17
    6f32:	cf 93       	push	r28
    6f34:	df 93       	push	r29
    6f36:	fc 01       	movw	r30, r24
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
    6f38:	ec 01       	movw	r28, r24
    6f3a:	09 90       	ld	r0, Y+
    6f3c:	00 20       	and	r0, r0
    6f3e:	e9 f7       	brne	.-6      	; 0x6f3a <RemSpaceLag+0x10>
    6f40:	21 97       	sbiw	r28, 0x01	; 1
    6f42:	7e 01       	movw	r14, r28
    6f44:	e8 1a       	sub	r14, r24
     for(i=0;i<(Length-1);i++){
    6f46:	80 e0       	ldi	r24, 0x00	; 0
    6f48:	90 e0       	ldi	r25, 0x00	; 0
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
    6f4a:	10 e0       	ldi	r17, 0x00	; 0
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    6f4c:	4e 2d       	mov	r20, r14
    6f4e:	50 e0       	ldi	r21, 0x00	; 0
    6f50:	ba 01       	movw	r22, r20
    6f52:	61 50       	subi	r22, 0x01	; 1
    6f54:	70 40       	sbci	r23, 0x00	; 0
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    6f56:	0e 2d       	mov	r16, r14
    6f58:	01 50       	subi	r16, 0x01	; 1
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    6f5a:	16 c0       	rjmp	.+44     	; 0x6f88 <RemSpaceLag+0x5e>
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
    6f5c:	da 01       	movw	r26, r20
    6f5e:	a2 1b       	sub	r26, r18
    6f60:	b3 0b       	sbc	r27, r19
    6f62:	9f 01       	movw	r18, r30
    6f64:	2a 0f       	add	r18, r26
    6f66:	3b 1f       	adc	r19, r27
    6f68:	22 50       	subi	r18, 0x02	; 2
    6f6a:	30 40       	sbci	r19, 0x00	; 0
    6f6c:	e9 01       	movw	r28, r18
    6f6e:	28 81       	ld	r18, Y
    6f70:	20 32       	cpi	r18, 0x20	; 32
    6f72:	79 f4       	brne	.+30     	; 0x6f92 <RemSpaceLag+0x68>
    6f74:	11 97       	sbiw	r26, 0x01	; 1
    6f76:	ae 0f       	add	r26, r30
    6f78:	bf 1f       	adc	r27, r31
    6f7a:	01 96       	adiw	r24, 0x01	; 1
    6f7c:	2c 91       	ld	r18, X
    6f7e:	20 32       	cpi	r18, 0x20	; 32
    6f80:	41 f4       	brne	.+16     	; 0x6f92 <RemSpaceLag+0x68>
		      Spaced[Length-i-1]=0;
    6f82:	1c 92       	st	X, r1
    6f84:	10 2f       	mov	r17, r16
    6f86:	18 1b       	sub	r17, r24
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    6f88:	28 2f       	mov	r18, r24
    6f8a:	30 e0       	ldi	r19, 0x00	; 0
    6f8c:	26 17       	cp	r18, r22
    6f8e:	37 07       	cpc	r19, r23
    6f90:	2c f3       	brlt	.-54     	; 0x6f5c <RemSpaceLag+0x32>
		      Spaced[Length-i-1]=0;
			  PosSpaced=Length-i-2;
			  }
         else break;
	 }
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
    6f92:	df 01       	movw	r26, r30
    6f94:	a1 0f       	add	r26, r17
    6f96:	b1 1d       	adc	r27, r1
    6f98:	8c 91       	ld	r24, X
    6f9a:	80 32       	cpi	r24, 0x20	; 32
    6f9c:	09 f4       	brne	.+2      	; 0x6fa0 <RemSpaceLag+0x76>
    6f9e:	1c 92       	st	X, r1
	 if (Spaced[0]==' ')Spaced[0]=0;
    6fa0:	80 81       	ld	r24, Z
    6fa2:	80 32       	cpi	r24, 0x20	; 32
    6fa4:	09 f4       	brne	.+2      	; 0x6fa8 <RemSpaceLag+0x7e>
    6fa6:	10 82       	st	Z, r1
	 Spaced[strlen(Spaced)]=0;
    6fa8:	ee 2e       	mov	r14, r30
    6faa:	e7 01       	movw	r28, r14
    6fac:	7e 01       	movw	r14, r28
    6fae:	ff 2e       	mov	r15, r31
    6fb0:	d7 01       	movw	r26, r14
    6fb2:	0d 90       	ld	r0, X+
    6fb4:	00 20       	and	r0, r0
    6fb6:	e9 f7       	brne	.-6      	; 0x6fb2 <RemSpaceLag+0x88>
    6fb8:	11 97       	sbiw	r26, 0x01	; 1
    6fba:	ae 19       	sub	r26, r14
    6fbc:	bf 09       	sbc	r27, r15
    6fbe:	ae 0f       	add	r26, r30
    6fc0:	bf 1f       	adc	r27, r31
    6fc2:	1c 92       	st	X, r1
}
    6fc4:	df 91       	pop	r29
    6fc6:	cf 91       	pop	r28
    6fc8:	1f 91       	pop	r17
    6fca:	0f 91       	pop	r16
    6fcc:	ff 90       	pop	r15
    6fce:	ef 90       	pop	r14
    6fd0:	08 95       	ret

00006fd2 <RemSpaceLead>:

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
    6fd2:	1f 93       	push	r17
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
    6fd4:	dc 01       	movw	r26, r24
    6fd6:	0d 90       	ld	r0, X+
    6fd8:	00 20       	and	r0, r0
    6fda:	e9 f7       	brne	.-6      	; 0x6fd6 <RemSpaceLead+0x4>
    6fdc:	11 97       	sbiw	r26, 0x01	; 1
    6fde:	6a 2f       	mov	r22, r26
    6fe0:	68 1b       	sub	r22, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
    6fe2:	62 30       	cpi	r22, 0x02	; 2
    6fe4:	d8 f1       	brcs	.+118    	; 0x705c <RemSpaceLead+0x8a>
    6fe6:	dc 01       	movw	r26, r24
    6fe8:	2c 91       	ld	r18, X
    6fea:	20 32       	cpi	r18, 0x20	; 32
    6fec:	b9 f5       	brne	.+110    	; 0x705c <RemSpaceLead+0x8a>
    6fee:	fc 01       	movw	r30, r24
    6ff0:	40 e0       	ldi	r20, 0x00	; 0
    6ff2:	20 e0       	ldi	r18, 0x00	; 0
    6ff4:	30 e0       	ldi	r19, 0x00	; 0
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
    6ff6:	51 91       	ld	r21, Z+
    6ff8:	50 32       	cpi	r21, 0x20	; 32
    6ffa:	41 f4       	brne	.+16     	; 0x700c <RemSpaceLead+0x3a>
    6ffc:	50 81       	ld	r21, Z
    6ffe:	50 32       	cpi	r21, 0x20	; 32
    7000:	21 f4       	brne	.+8      	; 0x700a <RemSpaceLead+0x38>
    7002:	44 23       	and	r20, r20
    7004:	19 f4       	brne	.+6      	; 0x700c <RemSpaceLead+0x3a>
    7006:	2f 5f       	subi	r18, 0xFF	; 255
    7008:	01 c0       	rjmp	.+2      	; 0x700c <RemSpaceLead+0x3a>
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
    700a:	41 e0       	ldi	r20, 0x01	; 1

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
    700c:	3f 5f       	subi	r19, 0xFF	; 255
    700e:	36 17       	cp	r19, r22
    7010:	90 f3       	brcs	.-28     	; 0x6ff6 <RemSpaceLead+0x24>
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
    7012:	12 2f       	mov	r17, r18
    7014:	1f 5f       	subi	r17, 0xFF	; 255
	     for(i=0;i<strlen(Zeroed);i++){
    7016:	70 e0       	ldi	r23, 0x00	; 0
		     Zeroed[i]=Zeroed[i+ZeroPos];
    7018:	41 2f       	mov	r20, r17
    701a:	50 e0       	ldi	r21, 0x00	; 0
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    701c:	09 c0       	rjmp	.+18     	; 0x7030 <RemSpaceLead+0x5e>
		     Zeroed[i]=Zeroed[i+ZeroPos];
    701e:	28 0f       	add	r18, r24
    7020:	39 1f       	adc	r19, r25
    7022:	f9 01       	movw	r30, r18
    7024:	e4 0f       	add	r30, r20
    7026:	f5 1f       	adc	r31, r21
    7028:	e0 81       	ld	r30, Z
    702a:	d9 01       	movw	r26, r18
    702c:	ec 93       	st	X, r30
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    702e:	7f 5f       	subi	r23, 0xFF	; 255
    7030:	27 2f       	mov	r18, r23
    7032:	30 e0       	ldi	r19, 0x00	; 0
    7034:	fc 01       	movw	r30, r24
    7036:	01 90       	ld	r0, Z+
    7038:	00 20       	and	r0, r0
    703a:	e9 f7       	brne	.-6      	; 0x7036 <RemSpaceLead+0x64>
    703c:	31 97       	sbiw	r30, 0x01	; 1
    703e:	e8 1b       	sub	r30, r24
    7040:	f9 0b       	sbc	r31, r25
    7042:	2e 17       	cp	r18, r30
    7044:	3f 07       	cpc	r19, r31
    7046:	58 f3       	brcs	.-42     	; 0x701e <RemSpaceLead+0x4c>
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    7048:	26 2f       	mov	r18, r22
    704a:	21 1b       	sub	r18, r17
    704c:	05 c0       	rjmp	.+10     	; 0x7058 <RemSpaceLead+0x86>
		     Zeroed[i]=0;
    704e:	fc 01       	movw	r30, r24
    7050:	e2 0f       	add	r30, r18
    7052:	f1 1d       	adc	r31, r1
    7054:	10 82       	st	Z, r1
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    7056:	2f 5f       	subi	r18, 0xFF	; 255
    7058:	26 17       	cp	r18, r22
    705a:	c8 f3       	brcs	.-14     	; 0x704e <RemSpaceLead+0x7c>
		     Zeroed[i]=0;
		 }
     }
}
    705c:	1f 91       	pop	r17
    705e:	08 95       	ret

00007060 <FTestRemZero>:
	     RemZeroLead(strTest);  
		 uart_print(0,1,strTest);

	while (1){};
  #endif
}
    7060:	08 95       	ret

00007062 <RemZeroLead>:

void RemZeroLead(char *Zeroed){//Remove Zero Character 00001004 000050000 0 
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
    7062:	dc 01       	movw	r26, r24
    7064:	0d 90       	ld	r0, X+
    7066:	00 20       	and	r0, r0
    7068:	e9 f7       	brne	.-6      	; 0x7064 <RemZeroLead+0x2>
    706a:	11 97       	sbiw	r26, 0x01	; 1
    706c:	a8 1b       	sub	r26, r24
  if ((Length>1)&&(Zeroed[0]=='0')){
    706e:	a2 30       	cpi	r26, 0x02	; 2
    7070:	b8 f1       	brcs	.+110    	; 0x70e0 <RemZeroLead+0x7e>
    7072:	fc 01       	movw	r30, r24
    7074:	20 81       	ld	r18, Z
    7076:	20 33       	cpi	r18, 0x30	; 48
    7078:	99 f5       	brne	.+102    	; 0x70e0 <RemZeroLead+0x7e>
    707a:	58 2f       	mov	r21, r24
    707c:	e8 2f       	mov	r30, r24
    707e:	f9 2f       	mov	r31, r25
    7080:	40 e0       	ldi	r20, 0x00	; 0
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
    7082:	21 91       	ld	r18, Z+
    7084:	20 33       	cpi	r18, 0x30	; 48
    7086:	49 f4       	brne	.+18     	; 0x709a <RemZeroLead+0x38>
    7088:	20 81       	ld	r18, Z
    708a:	20 33       	cpi	r18, 0x30	; 48
    708c:	31 f5       	brne	.+76     	; 0x70da <RemZeroLead+0x78>
    708e:	4f 5f       	subi	r20, 0xFF	; 255
    7090:	04 c0       	rjmp	.+8      	; 0x709a <RemZeroLead+0x38>
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    7092:	2c 32       	cpi	r18, 0x2C	; 44
    7094:	39 f4       	brne	.+14     	; 0x70a4 <RemZeroLead+0x42>
    7096:	41 50       	subi	r20, 0x01	; 1
    7098:	05 c0       	rjmp	.+10     	; 0x70a4 <RemZeroLead+0x42>
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
    709a:	2e 2f       	mov	r18, r30
    709c:	25 1b       	sub	r18, r21
    709e:	2a 17       	cp	r18, r26
    70a0:	80 f3       	brcs	.-32     	; 0x7082 <RemZeroLead+0x20>
    70a2:	01 c0       	rjmp	.+2      	; 0x70a6 <RemZeroLead+0x44>
		         IsFound=True;
			     break;			  
			     }
	      }

		  if (IsFound==True)ZeroPos++;
    70a4:	4f 5f       	subi	r20, 0xFF	; 255
		  if (ZeroPos>=Length)ZeroPos=Length-1;
    70a6:	4a 17       	cp	r20, r26
    70a8:	10 f0       	brcs	.+4      	; 0x70ae <RemZeroLead+0x4c>
    70aa:	4a 2f       	mov	r20, r26
    70ac:	41 50       	subi	r20, 0x01	; 1
          for(i=0;i<(Length-ZeroPos);i++){
    70ae:	60 e0       	ldi	r22, 0x00	; 0
    70b0:	50 e0       	ldi	r21, 0x00	; 0
    70b2:	2a 2f       	mov	r18, r26
    70b4:	30 e0       	ldi	r19, 0x00	; 0
    70b6:	24 1b       	sub	r18, r20
    70b8:	35 0b       	sbc	r19, r21
    70ba:	09 c0       	rjmp	.+18     	; 0x70ce <RemZeroLead+0x6c>
	          Zeroed[i]=Zeroed[i+ZeroPos];
    70bc:	e8 0f       	add	r30, r24
    70be:	f9 1f       	adc	r31, r25
    70c0:	df 01       	movw	r26, r30
    70c2:	a4 0f       	add	r26, r20
    70c4:	b5 1f       	adc	r27, r21
    70c6:	7c 91       	ld	r23, X
    70c8:	70 83       	st	Z, r23
		      Zeroed[i+1]=0;
    70ca:	11 82       	std	Z+1, r1	; 0x01
			     }
	      }

		  if (IsFound==True)ZeroPos++;
		  if (ZeroPos>=Length)ZeroPos=Length-1;
          for(i=0;i<(Length-ZeroPos);i++){
    70cc:	6f 5f       	subi	r22, 0xFF	; 255
    70ce:	e6 2f       	mov	r30, r22
    70d0:	f0 e0       	ldi	r31, 0x00	; 0
    70d2:	e2 17       	cp	r30, r18
    70d4:	f3 07       	cpc	r31, r19
    70d6:	94 f3       	brlt	.-28     	; 0x70bc <RemZeroLead+0x5a>
    70d8:	08 95       	ret
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    70da:	2e 32       	cpi	r18, 0x2E	; 46
    70dc:	d1 f6       	brne	.-76     	; 0x7092 <RemZeroLead+0x30>
    70de:	db cf       	rjmp	.-74     	; 0x7096 <RemZeroLead+0x34>
    70e0:	08 95       	ret

000070e2 <UserInput>:
void ShowMessage(char *Message){//Display Message on Line3
     char i;
}


char UserInput(char TypeUI,char xPos, char yPos,char *strResult, unsigned int MaxValue, char MaxLength){
    70e2:	6f 92       	push	r6
    70e4:	7f 92       	push	r7
    70e6:	8f 92       	push	r8
    70e8:	9f 92       	push	r9
    70ea:	af 92       	push	r10
    70ec:	bf 92       	push	r11
    70ee:	cf 92       	push	r12
    70f0:	df 92       	push	r13
    70f2:	ef 92       	push	r14
    70f4:	ff 92       	push	r15
    70f6:	0f 93       	push	r16
    70f8:	1f 93       	push	r17
    70fa:	df 93       	push	r29
    70fc:	cf 93       	push	r28
    70fe:	0f 92       	push	r0
    7100:	cd b7       	in	r28, 0x3d	; 61
    7102:	de b7       	in	r29, 0x3e	; 62
    7104:	f8 2e       	mov	r15, r24
    7106:	96 2e       	mov	r9, r22
    7108:	d4 2e       	mov	r13, r20
    710a:	39 01       	movw	r6, r18
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
	 switch(stUserInput){// 100 ->199 500 90
    710c:	90 91 5d 03 	lds	r25, 0x035D
    7110:	92 30       	cpi	r25, 0x02	; 2
    7112:	09 f4       	brne	.+2      	; 0x7116 <UserInput+0x34>
    7114:	34 c2       	rjmp	.+1128   	; 0x757e <UserInput+0x49c>
    7116:	93 30       	cpi	r25, 0x03	; 3
    7118:	30 f4       	brcc	.+12     	; 0x7126 <UserInput+0x44>
    711a:	99 23       	and	r25, r25
    711c:	59 f0       	breq	.+22     	; 0x7134 <UserInput+0x52>
    711e:	91 30       	cpi	r25, 0x01	; 1
    7120:	09 f0       	breq	.+2      	; 0x7124 <UserInput+0x42>
    7122:	00 c3       	rjmp	.+1536   	; 0x7724 <UserInput+0x642>
    7124:	2c c0       	rjmp	.+88     	; 0x717e <UserInput+0x9c>
    7126:	93 30       	cpi	r25, 0x03	; 3
    7128:	09 f4       	brne	.+2      	; 0x712c <UserInput+0x4a>
    712a:	7b c2       	rjmp	.+1270   	; 0x7622 <UserInput+0x540>
    712c:	94 30       	cpi	r25, 0x04	; 4
    712e:	09 f0       	breq	.+2      	; 0x7132 <UserInput+0x50>
    7130:	f9 c2       	rjmp	.+1522   	; 0x7724 <UserInput+0x642>
    7132:	f3 c2       	rjmp	.+1510   	; 0x771a <UserInput+0x638>
	 case uiInit:
	      iLoop=0;
    7134:	10 92 4f 03 	sts	0x034F, r1
    7138:	10 92 4e 03 	sts	0x034E, r1
		  stUserInput=uiInput;
    713c:	81 e0       	ldi	r24, 0x01	; 1
    713e:	80 93 5d 03 	sts	0x035D, r24
		  xChar=xPos;yChar=yPos;
    7142:	60 93 5c 03 	sts	0x035C, r22
    7146:	40 93 5b 03 	sts	0x035B, r20
          iValuePos=0;
    714a:	10 92 5a 03 	sts	0x035A, r1
		  KeyTimeout=0;
    714e:	10 92 4d 03 	sts	0x034D, r1
    7152:	10 92 4c 03 	sts	0x034C, r1
		  IsSameKey=False;
    7156:	10 92 53 03 	sts	0x0353, r1
		  IsNextKey=False;
    715a:	10 92 52 03 	sts	0x0352, r1
		  IsNewKey=False;
    715e:	10 92 51 03 	sts	0x0351, r1
		  IsShifted=True;
    7162:	80 93 54 03 	sts	0x0354, r24
		  zKeyChar=' ';
    7166:	80 e2       	ldi	r24, 0x20	; 32
    7168:	80 93 59 03 	sts	0x0359, r24
		  iHit=0;
    716c:	10 92 55 03 	sts	0x0355, r1
		  IsFirst=False;
    7170:	10 92 50 03 	sts	0x0350, r1
		  IsDelete=False;
    7174:	10 92 56 03 	sts	0x0356, r1
		  Result=USER_NO_DATA;
    7178:	15 e0       	ldi	r17, 0x05	; 5
    717a:	c1 2e       	mov	r12, r17
		  stUserInput=uiInput;
	      break;
    717c:	d4 c2       	rjmp	.+1448   	; 0x7726 <UserInput+0x644>
	 case uiInput:
	      KeyPressed=_key_scan(1);                  //  _  ABC DEF GHI JKL MNO PQRS TUV WXYZ
    717e:	81 e0       	ldi	r24, 0x01	; 1
    7180:	99 83       	std	Y+1, r25	; 0x01
    7182:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    7186:	88 2e       	mov	r8, r24
		  KeyChar= _key_btn(KeyPressed);            //  1   2   3   4   5   6   7    8   9
    7188:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
    718c:	c8 2e       	mov	r12, r24
		  if (KeyPressed==_KEY_SHIFT){
    718e:	99 81       	ldd	r25, Y+1	; 0x01
    7190:	28 2d       	mov	r18, r8
    7192:	2b 37       	cpi	r18, 0x7B	; 123
    7194:	59 f4       	brne	.+22     	; 0x71ac <UserInput+0xca>
		      if (IsShifted==False)IsShifted=True;
    7196:	80 91 54 03 	lds	r24, 0x0354
    719a:	88 23       	and	r24, r24
    719c:	19 f4       	brne	.+6      	; 0x71a4 <UserInput+0xc2>
    719e:	90 93 54 03 	sts	0x0354, r25
    71a2:	04 c0       	rjmp	.+8      	; 0x71ac <UserInput+0xca>
			  else
		      if (IsShifted==True)IsShifted=False;
    71a4:	81 30       	cpi	r24, 0x01	; 1
    71a6:	11 f4       	brne	.+4      	; 0x71ac <UserInput+0xca>
    71a8:	10 92 54 03 	sts	0x0354, r1
			  }
          
		  if (IsSameKey==True){
    71ac:	80 91 53 03 	lds	r24, 0x0353
    71b0:	81 30       	cpi	r24, 0x01	; 1
    71b2:	f1 f4       	brne	.+60     	; 0x71f0 <UserInput+0x10e>
		      KeyTimeout++;
    71b4:	80 91 4c 03 	lds	r24, 0x034C
    71b8:	90 91 4d 03 	lds	r25, 0x034D
    71bc:	01 96       	adiw	r24, 0x01	; 1
    71be:	90 93 4d 03 	sts	0x034D, r25
    71c2:	80 93 4c 03 	sts	0x034C, r24
              if (KeyTimeout>1000){
    71c6:	a3 e0       	ldi	r26, 0x03	; 3
    71c8:	89 3e       	cpi	r24, 0xE9	; 233
    71ca:	9a 07       	cpc	r25, r26
    71cc:	88 f0       	brcs	.+34     	; 0x71f0 <UserInput+0x10e>
			      if (TypeUI==UI_ALPHANUM_PASSWORD)lcd_put(xChar,yChar,'*');
    71ce:	bf 2d       	mov	r27, r15
    71d0:	b5 30       	cpi	r27, 0x05	; 5
    71d2:	39 f4       	brne	.+14     	; 0x71e2 <UserInput+0x100>
    71d4:	80 91 5c 03 	lds	r24, 0x035C
    71d8:	60 91 5b 03 	lds	r22, 0x035B
    71dc:	4a e2       	ldi	r20, 0x2A	; 42
    71de:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>

		          IsNextKey=True;
    71e2:	81 e0       	ldi	r24, 0x01	; 1
    71e4:	80 93 52 03 	sts	0x0352, r24
				  iLoop=0;
    71e8:	10 92 4f 03 	sts	0x034F, r1
    71ec:	10 92 4e 03 	sts	0x034E, r1
			     }
              }
            
 
 		  //if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<=MaxLength))||(IsNextKey==True)){
		  if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<MaxLength))||(IsNextKey==True)){
    71f0:	8c 2d       	mov	r24, r12
    71f2:	80 53       	subi	r24, 0x30	; 48
    71f4:	8a 30       	cpi	r24, 0x0A	; 10
    71f6:	20 f4       	brcc	.+8      	; 0x7200 <UserInput+0x11e>
    71f8:	80 91 5a 03 	lds	r24, 0x035A
    71fc:	8e 15       	cp	r24, r14
    71fe:	28 f0       	brcs	.+10     	; 0x720a <UserInput+0x128>
    7200:	80 91 52 03 	lds	r24, 0x0352
    7204:	81 30       	cpi	r24, 0x01	; 1
    7206:	09 f0       	breq	.+2      	; 0x720a <UserInput+0x128>
    7208:	bf c0       	rjmp	.+382    	; 0x7388 <UserInput+0x2a6>
    720a:	8f ef       	ldi	r24, 0xFF	; 255
    720c:	9f e3       	ldi	r25, 0x3F	; 63
    720e:	ab e0       	ldi	r26, 0x0B	; 11
    7210:	81 50       	subi	r24, 0x01	; 1
    7212:	90 40       	sbci	r25, 0x00	; 0
    7214:	a0 40       	sbci	r26, 0x00	; 0
    7216:	e1 f7       	brne	.-8      	; 0x7210 <UserInput+0x12e>
    7218:	00 c0       	rjmp	.+0      	; 0x721a <UserInput+0x138>
    721a:	00 00       	nop
		       _delay_ms(250);
		       strResult[iValuePos]=KeyChar;
    721c:	80 91 5a 03 	lds	r24, 0x035A
    7220:	f3 01       	movw	r30, r6
    7222:	e8 0f       	add	r30, r24
    7224:	f1 1d       	adc	r31, r1
    7226:	c0 82       	st	Z, r12
		       strResult[iValuePos+1]=0;
    7228:	11 82       	std	Z+1, r1	; 0x01

			   if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)) 
    722a:	8f 2d       	mov	r24, r15
    722c:	81 50       	subi	r24, 0x01	; 1
    722e:	82 30       	cpi	r24, 0x02	; 2
    7230:	18 f0       	brcs	.+6      	; 0x7238 <UserInput+0x156>
    7232:	9f 2d       	mov	r25, r15
    7234:	94 30       	cpi	r25, 0x04	; 4
    7236:	31 f4       	brne	.+12     	; 0x7244 <UserInput+0x162>
			        NumbValue=atoi(strResult);
    7238:	c3 01       	movw	r24, r6
    723a:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
    723e:	a8 2e       	mov	r10, r24
    7240:	b9 2e       	mov	r11, r25
    7242:	02 c0       	rjmp	.+4      	; 0x7248 <UserInput+0x166>
			   else NumbValue=0;
    7244:	aa 24       	eor	r10, r10
    7246:	bb 24       	eor	r11, r11
				
			   if ((TypeUI==UI_ALPHANUM_R)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    7248:	af 2d       	mov	r26, r15
    724a:	a3 30       	cpi	r26, 0x03	; 3
    724c:	19 f0       	breq	.+6      	; 0x7254 <UserInput+0x172>
    724e:	a5 30       	cpi	r26, 0x05	; 5
    7250:	09 f0       	breq	.+2      	; 0x7254 <UserInput+0x172>
    7252:	61 c0       	rjmp	.+194    	; 0x7316 <UserInput+0x234>
			       if (KeyChar!=zKeyChar){
    7254:	e0 91 59 03 	lds	r30, 0x0359
    7258:	ce 16       	cp	r12, r30
    725a:	71 f0       	breq	.+28     	; 0x7278 <UserInput+0x196>
					   IsSameKey=False;
    725c:	10 92 53 03 	sts	0x0353, r1
					   IsNewKey=True;
    7260:	81 e0       	ldi	r24, 0x01	; 1
    7262:	80 93 51 03 	sts	0x0351, r24
				       iHit=0;
    7266:	10 92 55 03 	sts	0x0355, r1
					   iLoop=1000;
    726a:	88 ee       	ldi	r24, 0xE8	; 232
    726c:	93 e0       	ldi	r25, 0x03	; 3
    726e:	90 93 4f 03 	sts	0x034F, r25
    7272:	80 93 4e 03 	sts	0x034E, r24
    7276:	4f c0       	rjmp	.+158    	; 0x7316 <UserInput+0x234>
				   }
                   else{
				   if (IsNewKey==True){
    7278:	80 91 51 03 	lds	r24, 0x0351
    727c:	81 30       	cpi	r24, 0x01	; 1
    727e:	71 f4       	brne	.+28     	; 0x729c <UserInput+0x1ba>
					   IsNewKey=False;
    7280:	10 92 51 03 	sts	0x0351, r1
					   yChar--;
    7284:	80 91 5b 03 	lds	r24, 0x035B
    7288:	81 50       	subi	r24, 0x01	; 1
    728a:	80 93 5b 03 	sts	0x035B, r24
					   if (iValuePos>0) iValuePos--;
    728e:	80 91 5a 03 	lds	r24, 0x035A
    7292:	88 23       	and	r24, r24
    7294:	19 f0       	breq	.+6      	; 0x729c <UserInput+0x1ba>
    7296:	81 50       	subi	r24, 0x01	; 1
    7298:	80 93 5a 03 	sts	0x035A, r24
					   }
				   KeyTimeout=0;
    729c:	10 92 4d 03 	sts	0x034D, r1
    72a0:	10 92 4c 03 	sts	0x034C, r1
				   IsSameKey=True;
    72a4:	81 e0       	ldi	r24, 0x01	; 1
    72a6:	80 93 53 03 	sts	0x0353, r24
				   if (iHit<pgm_read_byte(&MaxKeyHit[(zKeyChar-'0')])) 
    72aa:	80 91 55 03 	lds	r24, 0x0355
    72ae:	f0 e0       	ldi	r31, 0x00	; 0
    72b0:	e4 59       	subi	r30, 0x94	; 148
    72b2:	fd 4f       	sbci	r31, 0xFD	; 253
    72b4:	e4 91       	lpm	r30, Z+
    72b6:	8e 17       	cp	r24, r30
    72b8:	20 f4       	brcc	.+8      	; 0x72c2 <UserInput+0x1e0>
				        iHit++;
    72ba:	8f 5f       	subi	r24, 0xFF	; 255
    72bc:	80 93 55 03 	sts	0x0355, r24
    72c0:	02 c0       	rjmp	.+4      	; 0x72c6 <UserInput+0x1e4>
                   else iHit=0;
    72c2:	10 92 55 03 	sts	0x0355, r1
				   iLoop=1000;
    72c6:	88 ee       	ldi	r24, 0xE8	; 232
    72c8:	93 e0       	ldi	r25, 0x03	; 3
    72ca:	90 93 4f 03 	sts	0x034F, r25
    72ce:	80 93 4e 03 	sts	0x034E, r24

                   zAlphaChar=AlphaChar;
    72d2:	80 91 57 03 	lds	r24, 0x0357
    72d6:	80 93 58 03 	sts	0x0358, r24
			       AlphaChar=_table_alphanum(IsShifted,KeyPressed,iHit);			   
    72da:	80 91 54 03 	lds	r24, 0x0354
    72de:	68 2d       	mov	r22, r8
    72e0:	40 91 55 03 	lds	r20, 0x0355
    72e4:	0e 94 d7 a1 	call	0x143ae	; 0x143ae <_table_alphanum>
    72e8:	80 93 57 03 	sts	0x0357, r24
                   
				   if (IsNextKey==True){
    72ec:	80 91 52 03 	lds	r24, 0x0352
    72f0:	81 30       	cpi	r24, 0x01	; 1
    72f2:	41 f4       	brne	.+16     	; 0x7304 <UserInput+0x222>
                       AlphaChar=zAlphaChar;       
    72f4:	80 91 58 03 	lds	r24, 0x0358
    72f8:	80 93 57 03 	sts	0x0357, r24
					   IsNextKey=False;
    72fc:	10 92 52 03 	sts	0x0352, r1
					   IsSameKey=False;
    7300:	10 92 53 03 	sts	0x0353, r1
				   }   
				   strResult[iValuePos]=AlphaChar;
    7304:	80 91 5a 03 	lds	r24, 0x035A
    7308:	f3 01       	movw	r30, r6
    730a:	e8 0f       	add	r30, r24
    730c:	f1 1d       	adc	r31, r1
    730e:	80 91 57 03 	lds	r24, 0x0357
    7312:	80 83       	st	Z, r24
		           strResult[iValuePos+1]=0;
    7314:	11 82       	std	Z+1, r1	; 0x01
				 }//endElse 
				 
			   }//EndAlphaNum

			 if (TypeUI==UI_NUMBER_L){
    7316:	bf 2d       	mov	r27, r15
    7318:	b2 30       	cpi	r27, 0x02	; 2
    731a:	71 f4       	brne	.+28     	; 0x7338 <UserInput+0x256>
			    if ((NumbValue<=MaxValue)||(MaxValue==0)){
    731c:	0a 15       	cp	r16, r10
    731e:	1b 05       	cpc	r17, r11
    7320:	18 f4       	brcc	.+6      	; 0x7328 <UserInput+0x246>
    7322:	01 15       	cp	r16, r1
    7324:	11 05       	cpc	r17, r1
    7326:	59 f5       	brne	.+86     	; 0x737e <UserInput+0x29c>
				     iValuePos++;
    7328:	80 91 5a 03 	lds	r24, 0x035A
    732c:	8f 5f       	subi	r24, 0xFF	; 255
    732e:	80 93 5a 03 	sts	0x035A, r24
					 stUserInput=uiInputDisp;
    7332:	83 e0       	ldi	r24, 0x03	; 3
    7334:	80 93 5d 03 	sts	0x035D, r24
				} 
			 }
  
			   if ((NumbValue<=MaxValue)||(MaxValue==0)){
    7338:	0a 15       	cp	r16, r10
    733a:	1b 05       	cpc	r17, r11
    733c:	18 f4       	brcc	.+6      	; 0x7344 <UserInput+0x262>
    733e:	01 15       	cp	r16, r1
    7340:	11 05       	cpc	r17, r1
    7342:	e9 f4       	brne	.+58     	; 0x737e <UserInput+0x29c>
			       if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    7344:	ef 2d       	mov	r30, r15
    7346:	e1 30       	cpi	r30, 0x01	; 1
    7348:	31 f0       	breq	.+12     	; 0x7356 <UserInput+0x274>
    734a:	e3 30       	cpi	r30, 0x03	; 3
    734c:	21 f0       	breq	.+8      	; 0x7356 <UserInput+0x274>
    734e:	e4 30       	cpi	r30, 0x04	; 4
    7350:	11 f0       	breq	.+4      	; 0x7356 <UserInput+0x274>
				       (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    7352:	e5 30       	cpi	r30, 0x05	; 5
    7354:	a1 f4       	brne	.+40     	; 0x737e <UserInput+0x29c>
				      if (IsSameKey==False){
    7356:	80 91 53 03 	lds	r24, 0x0353
    735a:	88 23       	and	r24, r24
    735c:	69 f4       	brne	.+26     	; 0x7378 <UserInput+0x296>
					      IsFirst=True;
    735e:	81 e0       	ldi	r24, 0x01	; 1
    7360:	80 93 50 03 	sts	0x0350, r24
					      iValuePos++;
    7364:	80 91 5a 03 	lds	r24, 0x035A
    7368:	8f 5f       	subi	r24, 0xFF	; 255
    736a:	80 93 5a 03 	sts	0x035A, r24
						  //FullEntry
						  if (iValuePos==MaxLength)Result=USER_FULL_ENTRY;
					      yChar++;
    736e:	80 91 5b 03 	lds	r24, 0x035B
    7372:	8f 5f       	subi	r24, 0xFF	; 255
    7374:	80 93 5b 03 	sts	0x035B, r24
						  //yChar=(yChar+1;//Max Display

						  }
                  stUserInput=uiInputDisp;
    7378:	83 e0       	ldi	r24, 0x03	; 3
    737a:	80 93 5d 03 	sts	0x035D, r24
				  }
			   }
              zKeyChar=KeyChar;
    737e:	c0 92 59 03 	sts	0x0359, r12
             Result=USER_ENTRY;
    7382:	b4 e0       	ldi	r27, 0x04	; 4
    7384:	cb 2e       	mov	r12, r27
    7386:	03 c0       	rjmp	.+6      	; 0x738e <UserInput+0x2ac>
     char Result;
	 static char UserInputResult=USER_NONE;
	 static char stUserInput=uiInit,xChar=0,yChar=0,iValuePos=0,zKeyChar,zAlphaChar,AlphaChar,IsDelete=False;
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
    7388:	aa 24       	eor	r10, r10
    738a:	bb 24       	eor	r11, r11
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
    738c:	cc 24       	eor	r12, r12
              zKeyChar=KeyChar;
             Result=USER_ENTRY;
             }//EndKeyChar
			 
                 
              if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)){
    738e:	2f 2d       	mov	r18, r15
    7390:	21 50       	subi	r18, 0x01	; 1
    7392:	22 30       	cpi	r18, 0x02	; 2
    7394:	18 f0       	brcs	.+6      	; 0x739c <UserInput+0x2ba>
    7396:	ff 2d       	mov	r31, r15
    7398:	f4 30       	cpi	r31, 0x04	; 4
    739a:	81 f4       	brne	.+32     	; 0x73bc <UserInput+0x2da>
                   if((NumbValue>MaxValue)||(iValuePos==MaxLength)){
    739c:	0a 15       	cp	r16, r10
    739e:	1b 05       	cpc	r17, r11
    73a0:	20 f0       	brcs	.+8      	; 0x73aa <UserInput+0x2c8>
    73a2:	80 91 5a 03 	lds	r24, 0x035A
    73a6:	8e 15       	cp	r24, r14
    73a8:	49 f4       	brne	.+18     	; 0x73bc <UserInput+0x2da>
			           if (MaxValue>0)system_beep(1);
    73aa:	01 15       	cp	r16, r1
    73ac:	11 05       	cpc	r17, r1
    73ae:	31 f0       	breq	.+12     	; 0x73bc <UserInput+0x2da>
    73b0:	81 e0       	ldi	r24, 0x01	; 1
    73b2:	90 e0       	ldi	r25, 0x00	; 0
    73b4:	29 83       	std	Y+1, r18	; 0x01
    73b6:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
    73ba:	29 81       	ldd	r18, Y+1	; 0x01
				   }
                 }
		  
		  //CANCEL OK
		  if (KeyPressed==_KEY_CANCEL){
    73bc:	88 2d       	mov	r24, r8
    73be:	87 3e       	cpi	r24, 0xE7	; 231
    73c0:	71 f4       	brne	.+28     	; 0x73de <UserInput+0x2fc>
		      if (iValuePos>0){
    73c2:	80 91 5a 03 	lds	r24, 0x035A
    73c6:	88 23       	and	r24, r24
    73c8:	41 f0       	breq	.+16     	; 0x73da <UserInput+0x2f8>
			      iLoop=1999;
    73ca:	8f ec       	ldi	r24, 0xCF	; 207
    73cc:	97 e0       	ldi	r25, 0x07	; 7
    73ce:	90 93 4f 03 	sts	0x034F, r25
    73d2:	80 93 4e 03 	sts	0x034E, r24
				  stUserInput=uiClearDisplay;
    73d6:	82 e0       	ldi	r24, 0x02	; 2
    73d8:	2a c0       	rjmp	.+84     	; 0x742e <UserInput+0x34c>
				  }
			  else{
			      UserInputResult=USER_CANCEL;
    73da:	81 e0       	ldi	r24, 0x01	; 1
    73dc:	25 c0       	rjmp	.+74     	; 0x7428 <UserInput+0x346>
			      stUserInput=uiFinished;
				  }
		  }
		  else {
		  if (KeyPressed==_KEY_ENTER){
    73de:	98 2d       	mov	r25, r8
    73e0:	97 3b       	cpi	r25, 0xB7	; 183
    73e2:	39 f5       	brne	.+78     	; 0x7432 <UserInput+0x350>
		      strResult[iValuePos]=0;
    73e4:	80 91 5a 03 	lds	r24, 0x035A
    73e8:	f3 01       	movw	r30, r6
    73ea:	e8 0f       	add	r30, r24
    73ec:	f1 1d       	adc	r31, r1
    73ee:	10 82       	st	Z, r1
			  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)){
    73f0:	22 30       	cpi	r18, 0x02	; 2
    73f2:	c8 f4       	brcc	.+50     	; 0x7426 <UserInput+0x344>
			       if (iValuePos==0)sprintf_P(strResult,PSTR("0"));
    73f4:	88 23       	and	r24, r24
    73f6:	a1 f4       	brne	.+40     	; 0x7420 <UserInput+0x33e>
    73f8:	00 d0       	rcall	.+0      	; 0x73fa <UserInput+0x318>
    73fa:	00 d0       	rcall	.+0      	; 0x73fc <UserInput+0x31a>
    73fc:	ad b7       	in	r26, 0x3d	; 61
    73fe:	be b7       	in	r27, 0x3e	; 62
    7400:	12 96       	adiw	r26, 0x02	; 2
    7402:	7c 92       	st	X, r7
    7404:	6e 92       	st	-X, r6
    7406:	11 97       	sbiw	r26, 0x01	; 1
    7408:	8c ed       	ldi	r24, 0xDC	; 220
    740a:	9d e1       	ldi	r25, 0x1D	; 29
    740c:	14 96       	adiw	r26, 0x04	; 4
    740e:	9c 93       	st	X, r25
    7410:	8e 93       	st	-X, r24
    7412:	13 97       	sbiw	r26, 0x03	; 3
    7414:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    7418:	0f 90       	pop	r0
    741a:	0f 90       	pop	r0
    741c:	0f 90       	pop	r0
    741e:	0f 90       	pop	r0
			       RemZeroLead(strResult);
    7420:	c3 01       	movw	r24, r6
    7422:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
				  }
		      UserInputResult=USER_OK;
    7426:	83 e0       	ldi	r24, 0x03	; 3
    7428:	80 93 5e 03 	sts	0x035E, r24
		      stUserInput=uiFinished;
    742c:	84 e0       	ldi	r24, 0x04	; 4
    742e:	80 93 5d 03 	sts	0x035D, r24
			  }
		  }//EndElse

		  if ((iLoop%2000)==0){
    7432:	80 91 4e 03 	lds	r24, 0x034E
    7436:	90 91 4f 03 	lds	r25, 0x034F
    743a:	60 ed       	ldi	r22, 0xD0	; 208
    743c:	77 e0       	ldi	r23, 0x07	; 7
    743e:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    7442:	00 97       	sbiw	r24, 0x00	; 0
    7444:	09 f0       	breq	.+2      	; 0x7448 <UserInput+0x366>
    7446:	4b c0       	rjmp	.+150    	; 0x74de <UserInput+0x3fc>
		      if (IsSameKey==True)
    7448:	80 91 53 03 	lds	r24, 0x0353
    744c:	81 30       	cpi	r24, 0x01	; 1
    744e:	c9 f4       	brne	.+50     	; 0x7482 <UserInput+0x3a0>
			      //lcd_put(xChar,yChar,AlphaChar); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),AlphaChar); 
    7450:	40 91 5a 03 	lds	r20, 0x035A
    7454:	84 2f       	mov	r24, r20
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	01 97       	sbiw	r24, 0x01	; 1
    745a:	8d 0d       	add	r24, r13
    745c:	91 1d       	adc	r25, r1
    745e:	64 e1       	ldi	r22, 0x14	; 20
    7460:	70 e0       	ldi	r23, 0x00	; 0
    7462:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    7466:	56 2f       	mov	r21, r22
    7468:	84 2f       	mov	r24, r20
    746a:	64 e1       	ldi	r22, 0x14	; 20
    746c:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    7470:	9d 0d       	add	r25, r13
    7472:	89 2d       	mov	r24, r9
    7474:	85 0f       	add	r24, r21
    7476:	69 2f       	mov	r22, r25
    7478:	40 91 57 03 	lds	r20, 0x0357
    747c:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
    7480:	2e c0       	rjmp	.+92     	; 0x74de <UserInput+0x3fc>
			  else {
			      if((TypeUI==UI_ALPHANUM_PASSWORD)&&(iValuePos>0))lcd_put(xChar,yChar-1,'*'); 
    7482:	bf 2d       	mov	r27, r15
    7484:	b5 30       	cpi	r27, 0x05	; 5
    7486:	61 f4       	brne	.+24     	; 0x74a0 <UserInput+0x3be>
    7488:	80 91 5a 03 	lds	r24, 0x035A
    748c:	88 23       	and	r24, r24
    748e:	41 f0       	breq	.+16     	; 0x74a0 <UserInput+0x3be>
    7490:	60 91 5b 03 	lds	r22, 0x035B
    7494:	61 50       	subi	r22, 0x01	; 1
    7496:	80 91 5c 03 	lds	r24, 0x035C
    749a:	4a e2       	ldi	r20, 0x2A	; 42
    749c:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			      //lcd_put(xChar,yChar,'_'); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),'_'); 
    74a0:	40 91 5a 03 	lds	r20, 0x035A
    74a4:	84 2f       	mov	r24, r20
    74a6:	90 e0       	ldi	r25, 0x00	; 0
    74a8:	01 97       	sbiw	r24, 0x01	; 1
    74aa:	8d 0d       	add	r24, r13
    74ac:	91 1d       	adc	r25, r1
    74ae:	64 e1       	ldi	r22, 0x14	; 20
    74b0:	70 e0       	ldi	r23, 0x00	; 0
    74b2:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    74b6:	56 2f       	mov	r21, r22
    74b8:	84 2f       	mov	r24, r20
    74ba:	64 e1       	ldi	r22, 0x14	; 20
    74bc:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    74c0:	9d 0d       	add	r25, r13
    74c2:	89 2d       	mov	r24, r9
    74c4:	85 0f       	add	r24, r21
    74c6:	69 2f       	mov	r22, r25
    74c8:	4f e5       	ldi	r20, 0x5F	; 95
    74ca:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>

				  if (IsFirst==True){
    74ce:	80 91 50 03 	lds	r24, 0x0350
    74d2:	81 30       	cpi	r24, 0x01	; 1
    74d4:	21 f4       	brne	.+8      	; 0x74de <UserInput+0x3fc>
				      IsFirst=False;
    74d6:	10 92 50 03 	sts	0x0350, r1
				      zKeyChar=0;
    74da:	10 92 59 03 	sts	0x0359, r1
					  }
				  }
			  }
          if ((iLoop%2000)==1000){
    74de:	80 91 4e 03 	lds	r24, 0x034E
    74e2:	90 91 4f 03 	lds	r25, 0x034F
    74e6:	60 ed       	ldi	r22, 0xD0	; 208
    74e8:	77 e0       	ldi	r23, 0x07	; 7
    74ea:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    74ee:	e3 e0       	ldi	r30, 0x03	; 3
    74f0:	88 3e       	cpi	r24, 0xE8	; 232
    74f2:	9e 07       	cpc	r25, r30
    74f4:	d1 f5       	brne	.+116    	; 0x756a <UserInput+0x488>
		      if (IsSameKey==True){
    74f6:	80 91 53 03 	lds	r24, 0x0353
    74fa:	81 30       	cpi	r24, 0x01	; 1
    74fc:	f9 f4       	brne	.+62     	; 0x753c <UserInput+0x45a>
			      if (TypeUI!=UI_NUM_PASSWORD)
    74fe:	ff 2d       	mov	r31, r15
    7500:	f4 30       	cpi	r31, 0x04	; 4
    7502:	b1 f0       	breq	.+44     	; 0x7530 <UserInput+0x44e>
				       //lcd_put(xChar,yChar,AlphaChar); 
					   lcd_put(xPos+((yPos+iValuePos-1)/20),yChar%21,AlphaChar); 
    7504:	80 91 5a 03 	lds	r24, 0x035A
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	01 97       	sbiw	r24, 0x01	; 1
    750c:	8d 0d       	add	r24, r13
    750e:	91 1d       	adc	r25, r1
    7510:	64 e1       	ldi	r22, 0x14	; 20
    7512:	70 e0       	ldi	r23, 0x00	; 0
    7514:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    7518:	26 2f       	mov	r18, r22
    751a:	80 91 5b 03 	lds	r24, 0x035B
    751e:	65 e1       	ldi	r22, 0x15	; 21
    7520:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    7524:	89 2d       	mov	r24, r9
    7526:	82 0f       	add	r24, r18
    7528:	69 2f       	mov	r22, r25
    752a:	40 91 57 03 	lds	r20, 0x0357
    752e:	1b c0       	rjmp	.+54     	; 0x7566 <UserInput+0x484>
					   
				  else lcd_put(xChar,yChar,'*'); 
    7530:	80 91 5c 03 	lds	r24, 0x035C
    7534:	60 91 5b 03 	lds	r22, 0x035B
    7538:	4a e2       	ldi	r20, 0x2A	; 42
    753a:	15 c0       	rjmp	.+42     	; 0x7566 <UserInput+0x484>
			  }
			  //else lcd_put(xChar,yChar,' '); 
			  else lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); 			  
    753c:	40 91 5a 03 	lds	r20, 0x035A
    7540:	84 2f       	mov	r24, r20
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	01 97       	sbiw	r24, 0x01	; 1
    7546:	8d 0d       	add	r24, r13
    7548:	91 1d       	adc	r25, r1
    754a:	64 e1       	ldi	r22, 0x14	; 20
    754c:	70 e0       	ldi	r23, 0x00	; 0
    754e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    7552:	56 2f       	mov	r21, r22
    7554:	84 2f       	mov	r24, r20
    7556:	64 e1       	ldi	r22, 0x14	; 20
    7558:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    755c:	9d 0d       	add	r25, r13
    755e:	89 2d       	mov	r24, r9
    7560:	85 0f       	add	r24, r21
    7562:	69 2f       	mov	r22, r25
    7564:	40 e2       	ldi	r20, 0x20	; 32
    7566:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			  }
          iLoop++;
    756a:	80 91 4e 03 	lds	r24, 0x034E
    756e:	90 91 4f 03 	lds	r25, 0x034F
    7572:	01 96       	adiw	r24, 0x01	; 1
    7574:	90 93 4f 03 	sts	0x034F, r25
    7578:	80 93 4e 03 	sts	0x034E, r24
          break;
    757c:	d4 c0       	rjmp	.+424    	; 0x7726 <UserInput+0x644>
     case uiClearDisplay:
          if (TypeUI==UI_NUMBER_L){
    757e:	82 30       	cpi	r24, 0x02	; 2
    7580:	a1 f4       	brne	.+40     	; 0x75aa <UserInput+0x4c8>
		      lcd_put(xChar,(yChar-iValuePos),' '); // 123_ 1_
    7582:	60 91 5b 03 	lds	r22, 0x035B
    7586:	80 91 5a 03 	lds	r24, 0x035A
    758a:	68 1b       	sub	r22, r24
    758c:	80 91 5c 03 	lds	r24, 0x035C
    7590:	40 e2       	ldi	r20, 0x20	; 32
    7592:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
		      strResult[iValuePos]=0;
    7596:	80 91 5a 03 	lds	r24, 0x035A
    759a:	f3 01       	movw	r30, r6
    759c:	e8 0f       	add	r30, r24
    759e:	f1 1d       	adc	r31, r1
    75a0:	10 82       	st	Z, r1
		      iValuePos--;
    75a2:	81 50       	subi	r24, 0x01	; 1
    75a4:	80 93 5a 03 	sts	0x035A, r24
    75a8:	30 c0       	rjmp	.+96     	; 0x760a <UserInput+0x528>
			  }
          else
		  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    75aa:	81 30       	cpi	r24, 0x01	; 1
    75ac:	31 f0       	breq	.+12     	; 0x75ba <UserInput+0x4d8>
    75ae:	83 30       	cpi	r24, 0x03	; 3
    75b0:	21 f0       	breq	.+8      	; 0x75ba <UserInput+0x4d8>
    75b2:	84 30       	cpi	r24, 0x04	; 4
    75b4:	11 f0       	breq	.+4      	; 0x75ba <UserInput+0x4d8>
		      (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    75b6:	85 30       	cpi	r24, 0x05	; 5
    75b8:	41 f5       	brne	.+80     	; 0x760a <UserInput+0x528>
		      //lcd_put(xChar,yChar,' '); // 123_ 1_
			  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); // 123_ 1_
    75ba:	40 91 5a 03 	lds	r20, 0x035A
    75be:	84 2f       	mov	r24, r20
    75c0:	90 e0       	ldi	r25, 0x00	; 0
    75c2:	01 97       	sbiw	r24, 0x01	; 1
    75c4:	8d 0d       	add	r24, r13
    75c6:	91 1d       	adc	r25, r1
    75c8:	64 e1       	ldi	r22, 0x14	; 20
    75ca:	70 e0       	ldi	r23, 0x00	; 0
    75cc:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    75d0:	56 2f       	mov	r21, r22
    75d2:	84 2f       	mov	r24, r20
    75d4:	64 e1       	ldi	r22, 0x14	; 20
    75d6:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
    75da:	9d 0d       	add	r25, r13
    75dc:	89 2d       	mov	r24, r9
    75de:	85 0f       	add	r24, r21
    75e0:	69 2f       	mov	r22, r25
    75e2:	40 e2       	ldi	r20, 0x20	; 32
    75e4:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			  
		      strResult[iValuePos]=0;
    75e8:	80 91 5a 03 	lds	r24, 0x035A
    75ec:	f3 01       	movw	r30, r6
    75ee:	e8 0f       	add	r30, r24
    75f0:	f1 1d       	adc	r31, r1
    75f2:	10 82       	st	Z, r1
		      iValuePos--;
    75f4:	81 50       	subi	r24, 0x01	; 1
    75f6:	80 93 5a 03 	sts	0x035A, r24
			  yChar--;
    75fa:	80 91 5b 03 	lds	r24, 0x035B
    75fe:	81 50       	subi	r24, 0x01	; 1
    7600:	80 93 5b 03 	sts	0x035B, r24
			  IsDelete=True;
    7604:	81 e0       	ldi	r24, 0x01	; 1
    7606:	80 93 56 03 	sts	0x0356, r24
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    760a:	80 91 5a 03 	lds	r24, 0x035A
    760e:	88 23       	and	r24, r24
    7610:	11 f0       	breq	.+4      	; 0x7616 <UserInput+0x534>
	 static char stUserInput=uiInit,xChar=0,yChar=0,iValuePos=0,zKeyChar,zAlphaChar,AlphaChar,IsDelete=False;
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
    7612:	cc 24       	eor	r12, r12
    7614:	02 c0       	rjmp	.+4      	; 0x761a <UserInput+0x538>
		      strResult[iValuePos]=0;
		      iValuePos--;
			  yChar--;
			  IsDelete=True;
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    7616:	a5 e0       	ldi	r26, 0x05	; 5
    7618:	ca 2e       	mov	r12, r26
		  stUserInput=uiInputDisp;//Redraw
    761a:	83 e0       	ldi	r24, 0x03	; 3
    761c:	80 93 5d 03 	sts	0x035D, r24
	      break;      
    7620:	82 c0       	rjmp	.+260    	; 0x7726 <UserInput+0x644>
     case uiInputDisp:
	      if(TypeUI==UI_ALPHANUM_PASSWORD){
    7622:	85 30       	cpi	r24, 0x05	; 5
    7624:	31 f5       	brne	.+76     	; 0x7672 <UserInput+0x590>
			  if (iValuePos>0){
    7626:	80 91 5a 03 	lds	r24, 0x035A
    762a:	88 23       	and	r24, r24
    762c:	c1 f0       	breq	.+48     	; 0x765e <UserInput+0x57c>
                  lcd_put(xChar,(yChar-2),'*');
    762e:	60 91 5b 03 	lds	r22, 0x035B
    7632:	62 50       	subi	r22, 0x02	; 2
    7634:	80 91 5c 03 	lds	r24, 0x035C
    7638:	4a e2       	ldi	r20, 0x2A	; 42
    763a:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			      if (IsDelete==True){
    763e:	80 91 56 03 	lds	r24, 0x0356
    7642:	60 91 5b 03 	lds	r22, 0x035B
    7646:	81 30       	cpi	r24, 0x01	; 1
    7648:	89 f0       	breq	.+34     	; 0x766c <UserInput+0x58a>
				      IsDelete=False;
			          lcd_put(xChar,(yChar-1),'*');
			          }
				  else lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
    764a:	61 50       	subi	r22, 0x01	; 1
    764c:	80 91 5a 03 	lds	r24, 0x035A
    7650:	f3 01       	movw	r30, r6
    7652:	e8 0f       	add	r30, r24
    7654:	f1 1d       	adc	r31, r1
    7656:	31 97       	sbiw	r30, 0x01	; 1
    7658:	80 91 5c 03 	lds	r24, 0x035C
    765c:	41 c0       	rjmp	.+130    	; 0x76e0 <UserInput+0x5fe>
			      }
			  else{ if(IsDelete==True){
    765e:	80 91 56 03 	lds	r24, 0x0356
    7662:	60 91 5b 03 	lds	r22, 0x035B
    7666:	81 30       	cpi	r24, 0x01	; 1
    7668:	09 f0       	breq	.+2      	; 0x766c <UserInput+0x58a>
    766a:	43 c0       	rjmp	.+134    	; 0x76f2 <UserInput+0x610>
			           IsDelete=False;
    766c:	10 92 56 03 	sts	0x0356, r1
    7670:	4a c0       	rjmp	.+148    	; 0x7706 <UserInput+0x624>
					   lcd_put(xChar,(yChar-1),'*');
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
    7672:	82 30       	cpi	r24, 0x02	; 2
    7674:	a1 f4       	brne	.+40     	; 0x769e <UserInput+0x5bc>
    7676:	00 e0       	ldi	r16, 0x00	; 0
    7678:	0d c0       	rjmp	.+26     	; 0x7694 <UserInput+0x5b2>
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
    767a:	60 91 5b 03 	lds	r22, 0x035B
    767e:	68 1b       	sub	r22, r24
    7680:	60 0f       	add	r22, r16
    7682:	f3 01       	movw	r30, r6
    7684:	e0 0f       	add	r30, r16
    7686:	f1 1d       	adc	r31, r1
    7688:	80 91 5c 03 	lds	r24, 0x035C
    768c:	40 81       	ld	r20, Z
    768e:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
    7692:	0f 5f       	subi	r16, 0xFF	; 255
    7694:	80 91 5a 03 	lds	r24, 0x035A
    7698:	08 17       	cp	r16, r24
    769a:	78 f3       	brcs	.-34     	; 0x767a <UserInput+0x598>
    769c:	3a c0       	rjmp	.+116    	; 0x7712 <UserInput+0x630>
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
		      }
		  }else
	      if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)){
    769e:	81 30       	cpi	r24, 0x01	; 1
    76a0:	11 f0       	breq	.+4      	; 0x76a6 <UserInput+0x5c4>
    76a2:	83 30       	cpi	r24, 0x03	; 3
    76a4:	61 f5       	brne	.+88     	; 0x76fe <UserInput+0x61c>
		      
			  //if (iValuePos>0) lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
			  if (iValuePos>0) lcd_put(xPos+((yPos+iValuePos-1)/21),yPos+((iValuePos-1)%20),strResult[iValuePos-1]);			  
    76a6:	e0 91 5a 03 	lds	r30, 0x035A
    76aa:	8d 2d       	mov	r24, r13
    76ac:	90 e0       	ldi	r25, 0x00	; 0
    76ae:	ee 23       	and	r30, r30
    76b0:	c9 f0       	breq	.+50     	; 0x76e4 <UserInput+0x602>
    76b2:	f0 e0       	ldi	r31, 0x00	; 0
    76b4:	9f 01       	movw	r18, r30
    76b6:	21 50       	subi	r18, 0x01	; 1
    76b8:	30 40       	sbci	r19, 0x00	; 0
    76ba:	82 0f       	add	r24, r18
    76bc:	93 1f       	adc	r25, r19
    76be:	65 e1       	ldi	r22, 0x15	; 21
    76c0:	70 e0       	ldi	r23, 0x00	; 0
    76c2:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    76c6:	46 2f       	mov	r20, r22
    76c8:	c9 01       	movw	r24, r18
    76ca:	64 e1       	ldi	r22, 0x14	; 20
    76cc:	70 e0       	ldi	r23, 0x00	; 0
    76ce:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    76d2:	6d 2d       	mov	r22, r13
    76d4:	68 0f       	add	r22, r24
    76d6:	e6 0d       	add	r30, r6
    76d8:	f7 1d       	adc	r31, r7
    76da:	31 97       	sbiw	r30, 0x01	; 1
    76dc:	89 2d       	mov	r24, r9
    76de:	84 0f       	add	r24, r20
    76e0:	40 81       	ld	r20, Z
    76e2:	15 c0       	rjmp	.+42     	; 0x770e <UserInput+0x62c>
			  else{ if ((yChar-1)>=yPos)lcd_put(xChar,(yChar-1),strResult[iValuePos]);
    76e4:	60 91 5b 03 	lds	r22, 0x035B
    76e8:	26 2f       	mov	r18, r22
    76ea:	30 e0       	ldi	r19, 0x00	; 0
    76ec:	82 17       	cp	r24, r18
    76ee:	93 07       	cpc	r25, r19
    76f0:	84 f4       	brge	.+32     	; 0x7712 <UserInput+0x630>
    76f2:	61 50       	subi	r22, 0x01	; 1
    76f4:	80 91 5c 03 	lds	r24, 0x035C
    76f8:	d3 01       	movw	r26, r6
    76fa:	4c 91       	ld	r20, X
    76fc:	08 c0       	rjmp	.+16     	; 0x770e <UserInput+0x62c>
			  }
		  }else
		  //DisplayAsterik *
		  if (TypeUI==UI_NUM_PASSWORD){
    76fe:	84 30       	cpi	r24, 0x04	; 4
    7700:	41 f4       	brne	.+16     	; 0x7712 <UserInput+0x630>
		      lcd_put(xChar,(yChar-1),'*');
    7702:	60 91 5b 03 	lds	r22, 0x035B
    7706:	61 50       	subi	r22, 0x01	; 1
    7708:	80 91 5c 03 	lds	r24, 0x035C
    770c:	4a e2       	ldi	r20, 0x2A	; 42
    770e:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
		  }

          stUserInput=uiInput;
    7712:	81 e0       	ldi	r24, 0x01	; 1
    7714:	80 93 5d 03 	sts	0x035D, r24
    7718:	05 c0       	rjmp	.+10     	; 0x7724 <UserInput+0x642>
	      break;	 
     case uiFinished:
	      Result=UserInputResult;
    771a:	c0 90 5e 03 	lds	r12, 0x035E
	      stUserInput=uiInit;
    771e:	10 92 5d 03 	sts	0x035D, r1
	      break;
    7722:	01 c0       	rjmp	.+2      	; 0x7726 <UserInput+0x644>
	 static char stUserInput=uiInit,xChar=0,yChar=0,iValuePos=0,zKeyChar,zAlphaChar,AlphaChar,IsDelete=False;
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
    7724:	cc 24       	eor	r12, r12
	      Result=UserInputResult;
	      stUserInput=uiInit;
	      break;
	 }
	 return Result;
}
    7726:	8c 2d       	mov	r24, r12
    7728:	0f 90       	pop	r0
    772a:	cf 91       	pop	r28
    772c:	df 91       	pop	r29
    772e:	1f 91       	pop	r17
    7730:	0f 91       	pop	r16
    7732:	ff 90       	pop	r15
    7734:	ef 90       	pop	r14
    7736:	df 90       	pop	r13
    7738:	cf 90       	pop	r12
    773a:	bf 90       	pop	r11
    773c:	af 90       	pop	r10
    773e:	9f 90       	pop	r9
    7740:	8f 90       	pop	r8
    7742:	7f 90       	pop	r7
    7744:	6f 90       	pop	r6
    7746:	08 95       	ret

00007748 <FSettingProduct>:

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    7748:	6f 92       	push	r6
    774a:	7f 92       	push	r7
    774c:	9f 92       	push	r9
    774e:	af 92       	push	r10
    7750:	bf 92       	push	r11
    7752:	cf 92       	push	r12
    7754:	df 92       	push	r13
    7756:	ef 92       	push	r14
    7758:	ff 92       	push	r15
    775a:	0f 93       	push	r16
    775c:	1f 93       	push	r17
    775e:	df 93       	push	r29
    7760:	cf 93       	push	r28
    7762:	cd b7       	in	r28, 0x3d	; 61
    7764:	de b7       	in	r29, 0x3e	; 62
    7766:	a1 97       	sbiw	r28, 0x21	; 33
    7768:	0f b6       	in	r0, 0x3f	; 63
    776a:	f8 94       	cli
    776c:	de bf       	out	0x3e, r29	; 62
    776e:	0f be       	out	0x3f, r0	; 63
    7770:	cd bf       	out	0x3d, r28	; 61
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
    7772:	80 91 ff 02 	lds	r24, 0x02FF
    7776:	83 30       	cpi	r24, 0x03	; 3
    7778:	09 f4       	brne	.+2      	; 0x777c <FSettingProduct+0x34>
    777a:	f3 c0       	rjmp	.+486    	; 0x7962 <FSettingProduct+0x21a>
    777c:	84 30       	cpi	r24, 0x04	; 4
    777e:	38 f4       	brcc	.+14     	; 0x778e <FSettingProduct+0x46>
    7780:	81 30       	cpi	r24, 0x01	; 1
    7782:	09 f4       	brne	.+2      	; 0x7786 <FSettingProduct+0x3e>
    7784:	6a c0       	rjmp	.+212    	; 0x785a <FSettingProduct+0x112>
    7786:	82 30       	cpi	r24, 0x02	; 2
    7788:	08 f0       	brcs	.+2      	; 0x778c <FSettingProduct+0x44>
    778a:	7a c0       	rjmp	.+244    	; 0x7880 <FSettingProduct+0x138>
    778c:	0a c0       	rjmp	.+20     	; 0x77a2 <FSettingProduct+0x5a>
    778e:	85 30       	cpi	r24, 0x05	; 5
    7790:	09 f4       	brne	.+2      	; 0x7794 <FSettingProduct+0x4c>
    7792:	72 c1       	rjmp	.+740    	; 0x7a78 <FSettingProduct+0x330>
    7794:	85 30       	cpi	r24, 0x05	; 5
    7796:	08 f4       	brcc	.+2      	; 0x779a <FSettingProduct+0x52>
    7798:	8d c1       	rjmp	.+794    	; 0x7ab4 <FSettingProduct+0x36c>
    779a:	86 30       	cpi	r24, 0x06	; 6
    779c:	09 f0       	breq	.+2      	; 0x77a0 <FSettingProduct+0x58>
    779e:	b0 c1       	rjmp	.+864    	; 0x7b00 <FSettingProduct+0x3b8>
    77a0:	ab c1       	rjmp	.+854    	; 0x7af8 <FSettingProduct+0x3b0>
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    77a2:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    77a6:	fb eb       	ldi	r31, 0xBB	; 187
    77a8:	ef 2e       	mov	r14, r31
    77aa:	f0 e0       	ldi	r31, 0x00	; 0
    77ac:	ff 2e       	mov	r15, r31
    77ae:	00 e0       	ldi	r16, 0x00	; 0
    77b0:	10 e0       	ldi	r17, 0x00	; 0
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    77b2:	6e 01       	movw	r12, r28
    77b4:	08 94       	sec
    77b6:	c1 1c       	adc	r12, r1
    77b8:	d1 1c       	adc	r13, r1
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    77ba:	ee e0       	ldi	r30, 0x0E	; 14
    77bc:	ae 2e       	mov	r10, r30
    77be:	b1 2c       	mov	r11, r1
    77c0:	ac 0e       	add	r10, r28
    77c2:	bd 1e       	adc	r11, r29
    77c4:	7a e6       	ldi	r23, 0x6A	; 106
    77c6:	67 2e       	mov	r6, r23
    77c8:	73 e1       	ldi	r23, 0x13	; 19
    77ca:	77 2e       	mov	r7, r23
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    77cc:	90 2e       	mov	r9, r16
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    77ce:	c6 01       	movw	r24, r12
    77d0:	b7 01       	movw	r22, r14
    77d2:	4d e0       	ldi	r20, 0x0D	; 13
    77d4:	50 e0       	ldi	r21, 0x00	; 0
    77d6:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    77da:	0f 5f       	subi	r16, 0xFF	; 255
    77dc:	1f 4f       	sbci	r17, 0xFF	; 255
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    77de:	8d b7       	in	r24, 0x3d	; 61
    77e0:	9e b7       	in	r25, 0x3e	; 62
    77e2:	08 97       	sbiw	r24, 0x08	; 8
    77e4:	0f b6       	in	r0, 0x3f	; 63
    77e6:	f8 94       	cli
    77e8:	9e bf       	out	0x3e, r25	; 62
    77ea:	0f be       	out	0x3f, r0	; 63
    77ec:	8d bf       	out	0x3d, r24	; 61
    77ee:	ed b7       	in	r30, 0x3d	; 61
    77f0:	fe b7       	in	r31, 0x3e	; 62
    77f2:	31 96       	adiw	r30, 0x01	; 1
    77f4:	ad b7       	in	r26, 0x3d	; 61
    77f6:	be b7       	in	r27, 0x3e	; 62
    77f8:	12 96       	adiw	r26, 0x02	; 2
    77fa:	bc 92       	st	X, r11
    77fc:	ae 92       	st	-X, r10
    77fe:	11 97       	sbiw	r26, 0x01	; 1
    7800:	73 82       	std	Z+3, r7	; 0x03
    7802:	62 82       	std	Z+2, r6	; 0x02
    7804:	15 83       	std	Z+5, r17	; 0x05
    7806:	04 83       	std	Z+4, r16	; 0x04
    7808:	d7 82       	std	Z+7, r13	; 0x07
    780a:	c6 82       	std	Z+6, r12	; 0x06
    780c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    7810:	8d b7       	in	r24, 0x3d	; 61
    7812:	9e b7       	in	r25, 0x3e	; 62
    7814:	08 96       	adiw	r24, 0x08	; 8
    7816:	0f b6       	in	r0, 0x3f	; 63
    7818:	f8 94       	cli
    781a:	9e bf       	out	0x3e, r25	; 62
    781c:	0f be       	out	0x3f, r0	; 63
    781e:	8d bf       	out	0x3d, r24	; 61
    7820:	89 2d       	mov	r24, r9
    7822:	83 70       	andi	r24, 0x03	; 3
    7824:	96 94       	lsr	r9
    7826:	96 94       	lsr	r9
    7828:	99 0c       	add	r9, r9
    782a:	69 2d       	mov	r22, r9
    782c:	66 0f       	add	r22, r22
    782e:	66 0f       	add	r22, r22
    7830:	69 0d       	add	r22, r9
    7832:	6f 5f       	subi	r22, 0xFF	; 255
    7834:	8f 5f       	subi	r24, 0xFF	; 255
    7836:	a5 01       	movw	r20, r10
    7838:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    783c:	ad e0       	ldi	r26, 0x0D	; 13
    783e:	b0 e0       	ldi	r27, 0x00	; 0
    7840:	ea 0e       	add	r14, r26
    7842:	fb 1e       	adc	r15, r27
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
    7844:	06 30       	cpi	r16, 0x06	; 6
    7846:	11 05       	cpc	r17, r1
    7848:	09 f6       	brne	.-126    	; 0x77cc <FSettingProduct+0x84>
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
		  }
		  lcd_printf(4,11,PSTR("*)Back"));
    784a:	84 e0       	ldi	r24, 0x04	; 4
    784c:	6b e0       	ldi	r22, 0x0B	; 11
    784e:	43 e6       	ldi	r20, 0x63	; 99
    7850:	53 e1       	ldi	r21, 0x13	; 19
    7852:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stMenuProduct=mpChangeProduct;
    7856:	81 e0       	ldi	r24, 0x01	; 1
    7858:	4c c1       	rjmp	.+664    	; 0x7af2 <FSettingProduct+0x3aa>
	      break;
     case mpChangeProduct:
		  KeyPressed=_key_scan(1);
    785a:	81 e0       	ldi	r24, 0x01	; 1
    785c:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    7860:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    7862:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    7866:	81 53       	subi	r24, 0x31	; 49
    7868:	86 30       	cpi	r24, 0x06	; 6
    786a:	28 f4       	brcc	.+10     	; 0x7876 <FSettingProduct+0x12e>
		      ProdID=KeyChar-'1';
    786c:	80 93 fe 02 	sts	0x02FE, r24
			  stMenuProduct=mpDispPrice;
    7870:	82 e0       	ldi	r24, 0x02	; 2
    7872:	80 93 ff 02 	sts	0x02FF, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
    7876:	07 3e       	cpi	r16, 0xE7	; 231
    7878:	09 f0       	breq	.+2      	; 0x787c <FSettingProduct+0x134>
    787a:	42 c1       	rjmp	.+644    	; 0x7b00 <FSettingProduct+0x3b8>
		      stMenuProduct=mpExitMenuProduct;
    787c:	86 e0       	ldi	r24, 0x06	; 6
    787e:	39 c1       	rjmp	.+626    	; 0x7af2 <FSettingProduct+0x3aa>
		  }
	      break;
     case mpDispPrice:
	 	  eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    7880:	60 91 fe 02 	lds	r22, 0x02FE
    7884:	8d e0       	ldi	r24, 0x0D	; 13
    7886:	68 9f       	mul	r22, r24
    7888:	b0 01       	movw	r22, r0
    788a:	11 24       	eor	r1, r1
    788c:	65 54       	subi	r22, 0x45	; 69
    788e:	7f 4f       	sbci	r23, 0xFF	; 255
    7890:	7e 01       	movw	r14, r28
    7892:	08 94       	sec
    7894:	e1 1c       	adc	r14, r1
    7896:	f1 1c       	adc	r15, r1
    7898:	c7 01       	movw	r24, r14
    789a:	4d e0       	ldi	r20, 0x0D	; 13
    789c:	50 e0       	ldi	r21, 0x00	; 0
    789e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[ProdID], 9);
    78a2:	6c e7       	ldi	r22, 0x7C	; 124
    78a4:	c6 2e       	mov	r12, r22
    78a6:	66 e0       	ldi	r22, 0x06	; 6
    78a8:	d6 2e       	mov	r13, r22
    78aa:	60 91 fe 02 	lds	r22, 0x02FE
    78ae:	89 e0       	ldi	r24, 0x09	; 9
    78b0:	68 9f       	mul	r22, r24
    78b2:	b0 01       	movw	r22, r0
    78b4:	11 24       	eor	r1, r1
    78b6:	6b 57       	subi	r22, 0x7B	; 123
    78b8:	7f 4f       	sbci	r23, 0xFF	; 255
    78ba:	c6 01       	movw	r24, r12
    78bc:	49 e0       	ldi	r20, 0x09	; 9
    78be:	50 e0       	ldi	r21, 0x00	; 0
    78c0:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("1)%s"),strProductName);
    78c4:	00 d0       	rcall	.+0      	; 0x78c6 <FSettingProduct+0x17e>
    78c6:	00 d0       	rcall	.+0      	; 0x78c8 <FSettingProduct+0x180>
    78c8:	00 d0       	rcall	.+0      	; 0x78ca <FSettingProduct+0x182>
    78ca:	ed b7       	in	r30, 0x3d	; 61
    78cc:	fe b7       	in	r31, 0x3e	; 62
    78ce:	31 96       	adiw	r30, 0x01	; 1
    78d0:	8e 01       	movw	r16, r28
    78d2:	02 5f       	subi	r16, 0xF2	; 242
    78d4:	1f 4f       	sbci	r17, 0xFF	; 255
    78d6:	ad b7       	in	r26, 0x3d	; 61
    78d8:	be b7       	in	r27, 0x3e	; 62
    78da:	12 96       	adiw	r26, 0x02	; 2
    78dc:	1c 93       	st	X, r17
    78de:	0e 93       	st	-X, r16
    78e0:	11 97       	sbiw	r26, 0x01	; 1
    78e2:	8e e5       	ldi	r24, 0x5E	; 94
    78e4:	93 e1       	ldi	r25, 0x13	; 19
    78e6:	93 83       	std	Z+3, r25	; 0x03
    78e8:	82 83       	std	Z+2, r24	; 0x02
    78ea:	f5 82       	std	Z+5, r15	; 0x05
    78ec:	e4 82       	std	Z+4, r14	; 0x04
    78ee:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_clear();lcd_print(1,1,lcdteks);
    78f2:	8d b7       	in	r24, 0x3d	; 61
    78f4:	9e b7       	in	r25, 0x3e	; 62
    78f6:	06 96       	adiw	r24, 0x06	; 6
    78f8:	0f b6       	in	r0, 0x3f	; 63
    78fa:	f8 94       	cli
    78fc:	9e bf       	out	0x3e, r25	; 62
    78fe:	0f be       	out	0x3f, r0	; 63
    7900:	8d bf       	out	0x3d, r24	; 61
    7902:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    7906:	81 e0       	ldi	r24, 0x01	; 1
    7908:	61 e0       	ldi	r22, 0x01	; 1
    790a:	a8 01       	movw	r20, r16
    790c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("2)%s"),strPrice);
    7910:	00 d0       	rcall	.+0      	; 0x7912 <FSettingProduct+0x1ca>
    7912:	00 d0       	rcall	.+0      	; 0x7914 <FSettingProduct+0x1cc>
    7914:	00 d0       	rcall	.+0      	; 0x7916 <FSettingProduct+0x1ce>
    7916:	ed b7       	in	r30, 0x3d	; 61
    7918:	fe b7       	in	r31, 0x3e	; 62
    791a:	31 96       	adiw	r30, 0x01	; 1
    791c:	ad b7       	in	r26, 0x3d	; 61
    791e:	be b7       	in	r27, 0x3e	; 62
    7920:	12 96       	adiw	r26, 0x02	; 2
    7922:	1c 93       	st	X, r17
    7924:	0e 93       	st	-X, r16
    7926:	11 97       	sbiw	r26, 0x01	; 1
    7928:	89 e5       	ldi	r24, 0x59	; 89
    792a:	93 e1       	ldi	r25, 0x13	; 19
    792c:	93 83       	std	Z+3, r25	; 0x03
    792e:	82 83       	std	Z+2, r24	; 0x02
    7930:	d5 82       	std	Z+5, r13	; 0x05
    7932:	c4 82       	std	Z+4, r12	; 0x04
    7934:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    7938:	8d b7       	in	r24, 0x3d	; 61
    793a:	9e b7       	in	r25, 0x3e	; 62
    793c:	06 96       	adiw	r24, 0x06	; 6
    793e:	0f b6       	in	r0, 0x3f	; 63
    7940:	f8 94       	cli
    7942:	9e bf       	out	0x3e, r25	; 62
    7944:	0f be       	out	0x3f, r0	; 63
    7946:	8d bf       	out	0x3d, r24	; 61
    7948:	82 e0       	ldi	r24, 0x02	; 2
    794a:	61 e0       	ldi	r22, 0x01	; 1
    794c:	a8 01       	movw	r20, r16
    794e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(4,1,PSTR("*)Back       "));
    7952:	84 e0       	ldi	r24, 0x04	; 4
    7954:	61 e0       	ldi	r22, 0x01	; 1
    7956:	4b e4       	ldi	r20, 0x4B	; 75
    7958:	53 e1       	ldi	r21, 0x13	; 19
    795a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stMenuProduct=mpIsEdit;
    795e:	83 e0       	ldi	r24, 0x03	; 3
    7960:	c8 c0       	rjmp	.+400    	; 0x7af2 <FSettingProduct+0x3aa>
	      break;
     case mpIsEdit:
		  KeyPressed=_key_scan(1);
    7962:	81 e0       	ldi	r24, 0x01	; 1
    7964:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    7968:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if (KeyChar=='*'){
    796c:	8a 32       	cpi	r24, 0x2A	; 42
    796e:	09 f4       	brne	.+2      	; 0x7972 <FSettingProduct+0x22a>
    7970:	9e c0       	rjmp	.+316    	; 0x7aae <FSettingProduct+0x366>
		      stMenuProduct=mpInitProduct;
		  }else
		  if (KeyChar=='1'){
    7972:	81 33       	cpi	r24, 0x31	; 49
    7974:	09 f0       	breq	.+2      	; 0x7978 <FSettingProduct+0x230>
    7976:	49 c0       	rjmp	.+146    	; 0x7a0a <FSettingProduct+0x2c2>
		      eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    7978:	60 91 fe 02 	lds	r22, 0x02FE
    797c:	8d e0       	ldi	r24, 0x0D	; 13
    797e:	68 9f       	mul	r22, r24
    7980:	b0 01       	movw	r22, r0
    7982:	11 24       	eor	r1, r1
    7984:	65 54       	subi	r22, 0x45	; 69
    7986:	7f 4f       	sbci	r23, 0xFF	; 255
    7988:	7e 01       	movw	r14, r28
    798a:	08 94       	sec
    798c:	e1 1c       	adc	r14, r1
    798e:	f1 1c       	adc	r15, r1
    7990:	c7 01       	movw	r24, r14
    7992:	4d e0       	ldi	r20, 0x0D	; 13
    7994:	50 e0       	ldi	r21, 0x00	; 0
    7996:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		      sprintf_P(lcdteks,PSTR("Old:%s"),strProductName);
    799a:	00 d0       	rcall	.+0      	; 0x799c <FSettingProduct+0x254>
    799c:	00 d0       	rcall	.+0      	; 0x799e <FSettingProduct+0x256>
    799e:	00 d0       	rcall	.+0      	; 0x79a0 <FSettingProduct+0x258>
    79a0:	ed b7       	in	r30, 0x3d	; 61
    79a2:	fe b7       	in	r31, 0x3e	; 62
    79a4:	31 96       	adiw	r30, 0x01	; 1
    79a6:	8e 01       	movw	r16, r28
    79a8:	02 5f       	subi	r16, 0xF2	; 242
    79aa:	1f 4f       	sbci	r17, 0xFF	; 255
    79ac:	ad b7       	in	r26, 0x3d	; 61
    79ae:	be b7       	in	r27, 0x3e	; 62
    79b0:	12 96       	adiw	r26, 0x02	; 2
    79b2:	1c 93       	st	X, r17
    79b4:	0e 93       	st	-X, r16
    79b6:	11 97       	sbiw	r26, 0x01	; 1
    79b8:	84 e4       	ldi	r24, 0x44	; 68
    79ba:	93 e1       	ldi	r25, 0x13	; 19
    79bc:	93 83       	std	Z+3, r25	; 0x03
    79be:	82 83       	std	Z+2, r24	; 0x02
    79c0:	f5 82       	std	Z+5, r15	; 0x05
    79c2:	e4 82       	std	Z+4, r14	; 0x04
    79c4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  lcd_printf(1,1,PSTR("Edit Product Name   "));
    79c8:	8d b7       	in	r24, 0x3d	; 61
    79ca:	9e b7       	in	r25, 0x3e	; 62
    79cc:	06 96       	adiw	r24, 0x06	; 6
    79ce:	0f b6       	in	r0, 0x3f	; 63
    79d0:	f8 94       	cli
    79d2:	9e bf       	out	0x3e, r25	; 62
    79d4:	0f be       	out	0x3f, r0	; 63
    79d6:	8d bf       	out	0x3d, r24	; 61
    79d8:	81 e0       	ldi	r24, 0x01	; 1
    79da:	61 e0       	ldi	r22, 0x01	; 1
    79dc:	4f e2       	ldi	r20, 0x2F	; 47
    79de:	53 e1       	ldi	r21, 0x13	; 19
    79e0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		       lcd_print(2,1,lcdteks);
    79e4:	82 e0       	ldi	r24, 0x02	; 2
    79e6:	61 e0       	ldi	r22, 0x01	; 1
    79e8:	a8 01       	movw	r20, r16
    79ea:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    79ee:	83 e0       	ldi	r24, 0x03	; 3
    79f0:	61 e0       	ldi	r22, 0x01	; 1
    79f2:	49 e2       	ldi	r20, 0x29	; 41
    79f4:	53 e1       	ldi	r21, 0x13	; 19
    79f6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    79fa:	84 e0       	ldi	r24, 0x04	; 4
    79fc:	61 e0       	ldi	r22, 0x01	; 1
    79fe:	44 e1       	ldi	r20, 0x14	; 20
    7a00:	53 e1       	ldi	r21, 0x13	; 19
    7a02:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      stMenuProduct=mpEditProductName;
    7a06:	85 e0       	ldi	r24, 0x05	; 5
    7a08:	74 c0       	rjmp	.+232    	; 0x7af2 <FSettingProduct+0x3aa>
		  }else
		  if (KeyChar=='2'){
    7a0a:	82 33       	cpi	r24, 0x32	; 50
    7a0c:	09 f0       	breq	.+2      	; 0x7a10 <FSettingProduct+0x2c8>
    7a0e:	78 c0       	rjmp	.+240    	; 0x7b00 <FSettingProduct+0x3b8>
		      uiResult=USER_NONE;
		      sprintf_P(lcdteks,PSTR("Old:%s"),strPrice);
    7a10:	00 d0       	rcall	.+0      	; 0x7a12 <FSettingProduct+0x2ca>
    7a12:	00 d0       	rcall	.+0      	; 0x7a14 <FSettingProduct+0x2cc>
    7a14:	00 d0       	rcall	.+0      	; 0x7a16 <FSettingProduct+0x2ce>
    7a16:	ed b7       	in	r30, 0x3d	; 61
    7a18:	fe b7       	in	r31, 0x3e	; 62
    7a1a:	31 96       	adiw	r30, 0x01	; 1
    7a1c:	8e 01       	movw	r16, r28
    7a1e:	02 5f       	subi	r16, 0xF2	; 242
    7a20:	1f 4f       	sbci	r17, 0xFF	; 255
    7a22:	ad b7       	in	r26, 0x3d	; 61
    7a24:	be b7       	in	r27, 0x3e	; 62
    7a26:	12 96       	adiw	r26, 0x02	; 2
    7a28:	1c 93       	st	X, r17
    7a2a:	0e 93       	st	-X, r16
    7a2c:	11 97       	sbiw	r26, 0x01	; 1
    7a2e:	8d e0       	ldi	r24, 0x0D	; 13
    7a30:	93 e1       	ldi	r25, 0x13	; 19
    7a32:	93 83       	std	Z+3, r25	; 0x03
    7a34:	82 83       	std	Z+2, r24	; 0x02
    7a36:	8c e7       	ldi	r24, 0x7C	; 124
    7a38:	96 e0       	ldi	r25, 0x06	; 6
    7a3a:	95 83       	std	Z+5, r25	; 0x05
    7a3c:	84 83       	std	Z+4, r24	; 0x04
    7a3e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		       lcd_print(2,1,lcdteks);
    7a42:	8d b7       	in	r24, 0x3d	; 61
    7a44:	9e b7       	in	r25, 0x3e	; 62
    7a46:	06 96       	adiw	r24, 0x06	; 6
    7a48:	0f b6       	in	r0, 0x3f	; 63
    7a4a:	f8 94       	cli
    7a4c:	9e bf       	out	0x3e, r25	; 62
    7a4e:	0f be       	out	0x3f, r0	; 63
    7a50:	8d bf       	out	0x3d, r24	; 61
    7a52:	82 e0       	ldi	r24, 0x02	; 2
    7a54:	61 e0       	ldi	r22, 0x01	; 1
    7a56:	a8 01       	movw	r20, r16
    7a58:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    7a5c:	83 e0       	ldi	r24, 0x03	; 3
    7a5e:	61 e0       	ldi	r22, 0x01	; 1
    7a60:	47 e0       	ldi	r20, 0x07	; 7
    7a62:	53 e1       	ldi	r21, 0x13	; 19
    7a64:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    7a68:	84 e0       	ldi	r24, 0x04	; 4
    7a6a:	61 e0       	ldi	r22, 0x01	; 1
    7a6c:	42 ef       	ldi	r20, 0xF2	; 242
    7a6e:	52 e1       	ldi	r21, 0x12	; 18
    7a70:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      stMenuProduct=mpEditPrice;
    7a74:	84 e0       	ldi	r24, 0x04	; 4
    7a76:	3d c0       	rjmp	.+122    	; 0x7af2 <FSettingProduct+0x3aa>
		  }
	      break;
     case mpEditProductName:
	      uiResult=UserInput(UI_ALPHANUM_R,3,5,strDescription,0,10);
    7a78:	83 e0       	ldi	r24, 0x03	; 3
    7a7a:	63 e0       	ldi	r22, 0x03	; 3
    7a7c:	45 e0       	ldi	r20, 0x05	; 5
    7a7e:	20 e0       	ldi	r18, 0x00	; 0
    7a80:	39 e0       	ldi	r19, 0x09	; 9
    7a82:	00 e0       	ldi	r16, 0x00	; 0
    7a84:	10 e0       	ldi	r17, 0x00	; 0
    7a86:	5a e0       	ldi	r21, 0x0A	; 10
    7a88:	e5 2e       	mov	r14, r21
    7a8a:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  if (uiResult==USER_OK){
    7a8e:	83 30       	cpi	r24, 0x03	; 3
    7a90:	69 f5       	brne	.+90     	; 0x7aec <FSettingProduct+0x3a4>
		      eeprom_write_block((const void*)&strDescription,(void*)&DefProductName[ProdID], 13);
    7a92:	60 91 fe 02 	lds	r22, 0x02FE
    7a96:	8d e0       	ldi	r24, 0x0D	; 13
    7a98:	68 9f       	mul	r22, r24
    7a9a:	b0 01       	movw	r22, r0
    7a9c:	11 24       	eor	r1, r1
    7a9e:	65 54       	subi	r22, 0x45	; 69
    7aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    7aa2:	80 e0       	ldi	r24, 0x00	; 0
    7aa4:	99 e0       	ldi	r25, 0x09	; 9
    7aa6:	4d e0       	ldi	r20, 0x0D	; 13
    7aa8:	50 e0       	ldi	r21, 0x00	; 0
    7aaa:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
		      stMenuProduct=mpInitProduct;
    7aae:	10 92 ff 02 	sts	0x02FF, r1
    7ab2:	26 c0       	rjmp	.+76     	; 0x7b00 <FSettingProduct+0x3b8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
	      break;
     case mpEditPrice:
	      uiResult=UserInput(UI_NUMBER_R,3,5,strPrice,0,7);
    7ab4:	81 e0       	ldi	r24, 0x01	; 1
    7ab6:	63 e0       	ldi	r22, 0x03	; 3
    7ab8:	45 e0       	ldi	r20, 0x05	; 5
    7aba:	2c e7       	ldi	r18, 0x7C	; 124
    7abc:	36 e0       	ldi	r19, 0x06	; 6
    7abe:	00 e0       	ldi	r16, 0x00	; 0
    7ac0:	10 e0       	ldi	r17, 0x00	; 0
    7ac2:	97 e0       	ldi	r25, 0x07	; 7
    7ac4:	e9 2e       	mov	r14, r25
    7ac6:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  if (uiResult==USER_OK){
    7aca:	83 30       	cpi	r24, 0x03	; 3
    7acc:	79 f4       	brne	.+30     	; 0x7aec <FSettingProduct+0x3a4>
		      eeprom_write_block((const void*)&strPrice,(void*)&DefProductPrice[ProdID], 9);
    7ace:	60 91 fe 02 	lds	r22, 0x02FE
    7ad2:	89 e0       	ldi	r24, 0x09	; 9
    7ad4:	68 9f       	mul	r22, r24
    7ad6:	b0 01       	movw	r22, r0
    7ad8:	11 24       	eor	r1, r1
    7ada:	6b 57       	subi	r22, 0x7B	; 123
    7adc:	7f 4f       	sbci	r23, 0xFF	; 255
    7ade:	8c e7       	ldi	r24, 0x7C	; 124
    7ae0:	96 e0       	ldi	r25, 0x06	; 6
    7ae2:	49 e0       	ldi	r20, 0x09	; 9
    7ae4:	50 e0       	ldi	r21, 0x00	; 0
    7ae6:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    7aea:	02 c0       	rjmp	.+4      	; 0x7af0 <FSettingProduct+0x3a8>
		      stMenuProduct=mpDispPrice;//stMenuProduct=mpInit;
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
    7aec:	81 30       	cpi	r24, 0x01	; 1
    7aee:	41 f4       	brne	.+16     	; 0x7b00 <FSettingProduct+0x3b8>
    7af0:	82 e0       	ldi	r24, 0x02	; 2
    7af2:	80 93 ff 02 	sts	0x02FF, r24
    7af6:	04 c0       	rjmp	.+8      	; 0x7b00 <FSettingProduct+0x3b8>
	      break;
     case mpExitMenuProduct:
	      stMenuProduct=mpInitProduct;
    7af8:	10 92 ff 02 	sts	0x02FF, r1
	      Result=MENU_DONE;
    7afc:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    7afe:	01 c0       	rjmp	.+2      	; 0x7b02 <FSettingProduct+0x3ba>
     char KeyPressed,KeyChar,uiResult=USER_NONE;
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
    7b00:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuProduct=mpInitProduct;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    7b02:	a1 96       	adiw	r28, 0x21	; 33
    7b04:	0f b6       	in	r0, 0x3f	; 63
    7b06:	f8 94       	cli
    7b08:	de bf       	out	0x3e, r29	; 62
    7b0a:	0f be       	out	0x3f, r0	; 63
    7b0c:	cd bf       	out	0x3d, r28	; 61
    7b0e:	cf 91       	pop	r28
    7b10:	df 91       	pop	r29
    7b12:	1f 91       	pop	r17
    7b14:	0f 91       	pop	r16
    7b16:	ff 90       	pop	r15
    7b18:	ef 90       	pop	r14
    7b1a:	df 90       	pop	r13
    7b1c:	cf 90       	pop	r12
    7b1e:	bf 90       	pop	r11
    7b20:	af 90       	pop	r10
    7b22:	9f 90       	pop	r9
    7b24:	7f 90       	pop	r7
    7b26:	6f 90       	pop	r6
    7b28:	08 95       	ret

00007b2a <FormatDate>:
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    7b2a:	df 93       	push	r29
    7b2c:	cf 93       	push	r28
    7b2e:	cd b7       	in	r28, 0x3d	; 61
    7b30:	de b7       	in	r29, 0x3e	; 62
    7b32:	2b 97       	sbiw	r28, 0x0b	; 11
    7b34:	0f b6       	in	r0, 0x3f	; 63
    7b36:	f8 94       	cli
    7b38:	de bf       	out	0x3e, r29	; 62
    7b3a:	0f be       	out	0x3f, r0	; 63
    7b3c:	cd bf       	out	0x3d, r28	; 61
    7b3e:	fb 01       	movw	r30, r22
     char i,sDate[11];

     sDate[0]=Date[8];
    7b40:	90 85       	ldd	r25, Z+8	; 0x08
    7b42:	99 83       	std	Y+1, r25	; 0x01
	 sDate[1]=Date[9];
    7b44:	91 85       	ldd	r25, Z+9	; 0x09
    7b46:	9a 83       	std	Y+2, r25	; 0x02
     sDate[2]=Date[7];
    7b48:	97 81       	ldd	r25, Z+7	; 0x07
    7b4a:	9b 83       	std	Y+3, r25	; 0x03
	 sDate[3]=Date[5];
    7b4c:	95 81       	ldd	r25, Z+5	; 0x05
    7b4e:	9c 83       	std	Y+4, r25	; 0x04
     sDate[4]=Date[6];
    7b50:	96 81       	ldd	r25, Z+6	; 0x06
    7b52:	9d 83       	std	Y+5, r25	; 0x05
	 sDate[5]=Date[4];
    7b54:	94 81       	ldd	r25, Z+4	; 0x04
    7b56:	9e 83       	std	Y+6, r25	; 0x06
	 switch(FmtYear){
    7b58:	88 23       	and	r24, r24
    7b5a:	41 f0       	breq	.+16     	; 0x7b6c <FormatDate+0x42>
    7b5c:	81 30       	cpi	r24, 0x01	; 1
    7b5e:	79 f4       	brne	.+30     	; 0x7b7e <FormatDate+0x54>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
          sDate[10]=0;
	      break;
	 case DATE_SHORT_YEAR:
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
    7b60:	82 81       	ldd	r24, Z+2	; 0x02
    7b62:	8f 83       	std	Y+7, r24	; 0x07
    7b64:	83 81       	ldd	r24, Z+3	; 0x03
    7b66:	88 87       	std	Y+8, r24	; 0x08
          sDate[8]=0;
    7b68:	19 86       	std	Y+9, r1	; 0x09
	      break;
    7b6a:	09 c0       	rjmp	.+18     	; 0x7b7e <FormatDate+0x54>
	 sDate[3]=Date[5];
     sDate[4]=Date[6];
	 sDate[5]=Date[4];
	 switch(FmtYear){
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
    7b6c:	80 81       	ld	r24, Z
    7b6e:	8f 83       	std	Y+7, r24	; 0x07
    7b70:	81 81       	ldd	r24, Z+1	; 0x01
    7b72:	88 87       	std	Y+8, r24	; 0x08
    7b74:	82 81       	ldd	r24, Z+2	; 0x02
    7b76:	89 87       	std	Y+9, r24	; 0x09
    7b78:	83 81       	ldd	r24, Z+3	; 0x03
    7b7a:	8a 87       	std	Y+10, r24	; 0x0a
          sDate[10]=0;
    7b7c:	1b 86       	std	Y+11, r1	; 0x0b
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    7b7e:	40 e0       	ldi	r20, 0x00	; 0
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
          sDate[8]=0;
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    7b80:	ce 01       	movw	r24, r28
    7b82:	01 96       	adiw	r24, 0x01	; 1
    7b84:	0a c0       	rjmp	.+20     	; 0x7b9a <FormatDate+0x70>
    7b86:	bf 01       	movw	r22, r30
    7b88:	62 0f       	add	r22, r18
    7b8a:	73 1f       	adc	r23, r19
    7b8c:	28 0f       	add	r18, r24
    7b8e:	39 1f       	adc	r19, r25
    7b90:	d9 01       	movw	r26, r18
    7b92:	2c 91       	ld	r18, X
    7b94:	db 01       	movw	r26, r22
    7b96:	2c 93       	st	X, r18
    7b98:	4f 5f       	subi	r20, 0xFF	; 255
    7b9a:	24 2f       	mov	r18, r20
    7b9c:	30 e0       	ldi	r19, 0x00	; 0
    7b9e:	dc 01       	movw	r26, r24
    7ba0:	0d 90       	ld	r0, X+
    7ba2:	00 20       	and	r0, r0
    7ba4:	e9 f7       	brne	.-6      	; 0x7ba0 <FormatDate+0x76>
    7ba6:	11 97       	sbiw	r26, 0x01	; 1
    7ba8:	a8 1b       	sub	r26, r24
    7baa:	b9 0b       	sbc	r27, r25
    7bac:	2a 17       	cp	r18, r26
    7bae:	3b 07       	cpc	r19, r27
    7bb0:	50 f3       	brcs	.-44     	; 0x7b86 <FormatDate+0x5c>
}
    7bb2:	2b 96       	adiw	r28, 0x0b	; 11
    7bb4:	0f b6       	in	r0, 0x3f	; 63
    7bb6:	f8 94       	cli
    7bb8:	de bf       	out	0x3e, r29	; 62
    7bba:	0f be       	out	0x3f, r0	; 63
    7bbc:	cd bf       	out	0x3d, r28	; 61
    7bbe:	cf 91       	pop	r28
    7bc0:	df 91       	pop	r29
    7bc2:	08 95       	ret

00007bc4 <StrAlignCenter>:

void StrAlignCenter(char *Source, unsigned int Length){
    7bc4:	0f 93       	push	r16
    7bc6:	1f 93       	push	r17
    7bc8:	cf 93       	push	r28
    7bca:	df 93       	push	r29
    7bcc:	8c 01       	movw	r16, r24
    7bce:	eb 01       	movw	r28, r22
char nAddedSpace,srcLength;
     RemSpaceLag(Source);
    7bd0:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
	 RemSpaceLead(Source);
    7bd4:	c8 01       	movw	r24, r16
    7bd6:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <RemSpaceLead>
	 srcLength=strlen(Source);
    7bda:	d8 01       	movw	r26, r16
    7bdc:	0d 90       	ld	r0, X+
    7bde:	00 20       	and	r0, r0
    7be0:	e9 f7       	brne	.-6      	; 0x7bdc <StrAlignCenter+0x18>
    7be2:	11 97       	sbiw	r26, 0x01	; 1
    7be4:	a0 1b       	sub	r26, r16
     nAddedSpace=(Length-srcLength)/2;
    7be6:	9e 01       	movw	r18, r28
    7be8:	2a 1b       	sub	r18, r26
    7bea:	31 09       	sbc	r19, r1
    7bec:	36 95       	lsr	r19
    7bee:	27 95       	ror	r18
     AddSpaceLead(Source,srcLength+nAddedSpace);
    7bf0:	6a 2f       	mov	r22, r26
    7bf2:	62 0f       	add	r22, r18
    7bf4:	c8 01       	movw	r24, r16
    7bf6:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <AddSpaceLead>
	 AddSpaceLag(Source,Length);
    7bfa:	c8 01       	movw	r24, r16
    7bfc:	6c 2f       	mov	r22, r28
    7bfe:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
}
    7c02:	df 91       	pop	r29
    7c04:	cf 91       	pop	r28
    7c06:	1f 91       	pop	r17
    7c08:	0f 91       	pop	r16
    7c0a:	08 95       	ret

00007c0c <StrPosCopy>:

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    7c0c:	fa 01       	movw	r30, r20
    7c0e:	e8 0f       	add	r30, r24
    7c10:	f9 1f       	adc	r31, r25
unsigned int i;
     for(i=0;i<Length;i++){
    7c12:	db 01       	movw	r26, r22
    7c14:	80 e0       	ldi	r24, 0x00	; 0
    7c16:	90 e0       	ldi	r25, 0x00	; 0
    7c18:	03 c0       	rjmp	.+6      	; 0x7c20 <StrPosCopy+0x14>
	    Dest[i]=Source[IdxSource+i];
    7c1a:	41 91       	ld	r20, Z+
    7c1c:	4d 93       	st	X+, r20
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    7c1e:	01 96       	adiw	r24, 0x01	; 1
    7c20:	82 17       	cp	r24, r18
    7c22:	93 07       	cpc	r25, r19
    7c24:	d0 f3       	brcs	.-12     	; 0x7c1a <StrPosCopy+0xe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    7c26:	62 0f       	add	r22, r18
    7c28:	73 1f       	adc	r23, r19
    7c2a:	fb 01       	movw	r30, r22
    7c2c:	10 82       	st	Z, r1
}
    7c2e:	08 95       	ret

00007c30 <FSettingOperator>:
char FSettingHost(){
     _menu_host();
	 return MENU_DONE;
}

char FSettingOperator(){//Change Active Operator, Change Password
    7c30:	ef 92       	push	r14
    7c32:	ff 92       	push	r15
    7c34:	0f 93       	push	r16
    7c36:	1f 93       	push	r17
    7c38:	df 93       	push	r29
    7c3a:	cf 93       	push	r28
    7c3c:	cd b7       	in	r28, 0x3d	; 61
    7c3e:	de b7       	in	r29, 0x3e	; 62
    7c40:	e5 97       	sbiw	r28, 0x35	; 53
    7c42:	0f b6       	in	r0, 0x3f	; 63
    7c44:	f8 94       	cli
    7c46:	de bf       	out	0x3e, r29	; 62
    7c48:	0f be       	out	0x3f, r0	; 63
    7c4a:	cd bf       	out	0x3d, r28	; 61
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
	 switch(stSettingOperator){
    7c4c:	80 91 fc 02 	lds	r24, 0x02FC
    7c50:	87 30       	cpi	r24, 0x07	; 7
    7c52:	09 f4       	brne	.+2      	; 0x7c56 <FSettingOperator+0x26>
    7c54:	68 c1       	rjmp	.+720    	; 0x7f26 <FSettingOperator+0x2f6>
    7c56:	88 30       	cpi	r24, 0x08	; 8
    7c58:	90 f4       	brcc	.+36     	; 0x7c7e <FSettingOperator+0x4e>
    7c5a:	83 30       	cpi	r24, 0x03	; 3
    7c5c:	09 f4       	brne	.+2      	; 0x7c60 <FSettingOperator+0x30>
    7c5e:	9f c0       	rjmp	.+318    	; 0x7d9e <FSettingOperator+0x16e>
    7c60:	84 30       	cpi	r24, 0x04	; 4
    7c62:	30 f4       	brcc	.+12     	; 0x7c70 <FSettingOperator+0x40>
    7c64:	81 30       	cpi	r24, 0x01	; 1
    7c66:	d1 f1       	breq	.+116    	; 0x7cdc <FSettingOperator+0xac>
    7c68:	82 30       	cpi	r24, 0x02	; 2
    7c6a:	08 f0       	brcs	.+2      	; 0x7c6e <FSettingOperator+0x3e>
    7c6c:	4a c0       	rjmp	.+148    	; 0x7d02 <FSettingOperator+0xd2>
    7c6e:	20 c0       	rjmp	.+64     	; 0x7cb0 <FSettingOperator+0x80>
    7c70:	85 30       	cpi	r24, 0x05	; 5
    7c72:	09 f4       	brne	.+2      	; 0x7c76 <FSettingOperator+0x46>
    7c74:	29 c1       	rjmp	.+594    	; 0x7ec8 <FSettingOperator+0x298>
    7c76:	86 30       	cpi	r24, 0x06	; 6
    7c78:	08 f0       	brcs	.+2      	; 0x7c7c <FSettingOperator+0x4c>
    7c7a:	42 c1       	rjmp	.+644    	; 0x7f00 <FSettingOperator+0x2d0>
    7c7c:	f9 c0       	rjmp	.+498    	; 0x7e70 <FSettingOperator+0x240>
    7c7e:	8b 30       	cpi	r24, 0x0B	; 11
    7c80:	09 f4       	brne	.+2      	; 0x7c84 <FSettingOperator+0x54>
    7c82:	13 c2       	rjmp	.+1062   	; 0x80aa <FSettingOperator+0x47a>
    7c84:	8c 30       	cpi	r24, 0x0C	; 12
    7c86:	38 f4       	brcc	.+14     	; 0x7c96 <FSettingOperator+0x66>
    7c88:	89 30       	cpi	r24, 0x09	; 9
    7c8a:	09 f4       	brne	.+2      	; 0x7c8e <FSettingOperator+0x5e>
    7c8c:	9a c1       	rjmp	.+820    	; 0x7fc2 <FSettingOperator+0x392>
    7c8e:	8a 30       	cpi	r24, 0x0A	; 10
    7c90:	08 f0       	brcs	.+2      	; 0x7c94 <FSettingOperator+0x64>
    7c92:	cc c1       	rjmp	.+920    	; 0x802c <FSettingOperator+0x3fc>
    7c94:	68 c1       	rjmp	.+720    	; 0x7f66 <FSettingOperator+0x336>
    7c96:	8d 30       	cpi	r24, 0x0D	; 13
    7c98:	09 f4       	brne	.+2      	; 0x7c9c <FSettingOperator+0x6c>
    7c9a:	86 c2       	rjmp	.+1292   	; 0x81a8 <FSettingOperator+0x578>
    7c9c:	8d 30       	cpi	r24, 0x0D	; 13
    7c9e:	08 f4       	brcc	.+2      	; 0x7ca2 <FSettingOperator+0x72>
    7ca0:	0b c2       	rjmp	.+1046   	; 0x80b8 <FSettingOperator+0x488>
    7ca2:	8e 30       	cpi	r24, 0x0E	; 14
    7ca4:	09 f4       	brne	.+2      	; 0x7ca8 <FSettingOperator+0x78>
    7ca6:	85 c2       	rjmp	.+1290   	; 0x81b2 <FSettingOperator+0x582>
    7ca8:	8f 30       	cpi	r24, 0x0F	; 15
    7caa:	09 f0       	breq	.+2      	; 0x7cae <FSettingOperator+0x7e>
    7cac:	8d c2       	rjmp	.+1306   	; 0x81c8 <FSettingOperator+0x598>
    7cae:	88 c2       	rjmp	.+1296   	; 0x81c0 <FSettingOperator+0x590>
	 case soMenuOption:
	      lcd_clear();
    7cb0:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Change Operator"));
    7cb4:	81 e0       	ldi	r24, 0x01	; 1
    7cb6:	61 e0       	ldi	r22, 0x01	; 1
    7cb8:	4a e3       	ldi	r20, 0x3A	; 58
    7cba:	52 e1       	ldi	r21, 0x12	; 18
    7cbc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Change Password"));
    7cc0:	82 e0       	ldi	r24, 0x02	; 2
    7cc2:	61 e0       	ldi	r22, 0x01	; 1
    7cc4:	48 e2       	ldi	r20, 0x28	; 40
    7cc6:	52 e1       	ldi	r21, 0x12	; 18
    7cc8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back          "));
    7ccc:	84 e0       	ldi	r24, 0x04	; 4
    7cce:	61 e0       	ldi	r22, 0x01	; 1
    7cd0:	46 e1       	ldi	r20, 0x16	; 22
    7cd2:	52 e1       	ldi	r21, 0x12	; 18
    7cd4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stSettingOperator=soMenuOptionInput;
    7cd8:	81 e0       	ldi	r24, 0x01	; 1
    7cda:	3a c2       	rjmp	.+1140   	; 0x8150 <FSettingOperator+0x520>
	      break;
     case soMenuOptionInput:
	      KeyPressed=_key_scan(1);
    7cdc:	81 e0       	ldi	r24, 0x01	; 1
    7cde:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    7ce2:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  switch(KeyChar){
    7ce6:	81 33       	cpi	r24, 0x31	; 49
    7ce8:	31 f0       	breq	.+12     	; 0x7cf6 <FSettingOperator+0xc6>
    7cea:	82 33       	cpi	r24, 0x32	; 50
    7cec:	31 f0       	breq	.+12     	; 0x7cfa <FSettingOperator+0xca>
    7cee:	8a 32       	cpi	r24, 0x2A	; 42
    7cf0:	09 f0       	breq	.+2      	; 0x7cf4 <FSettingOperator+0xc4>
    7cf2:	6a c2       	rjmp	.+1236   	; 0x81c8 <FSettingOperator+0x598>
    7cf4:	04 c0       	rjmp	.+8      	; 0x7cfe <FSettingOperator+0xce>
		  case '1':
		       stSettingOperator=soChangeOperatorInit;
    7cf6:	82 e0       	ldi	r24, 0x02	; 2
    7cf8:	2b c2       	rjmp	.+1110   	; 0x8150 <FSettingOperator+0x520>
		       break;
          case '2':
		       stSettingOperator=soChangePasswordInit;
    7cfa:	85 e0       	ldi	r24, 0x05	; 5
    7cfc:	29 c2       	rjmp	.+1106   	; 0x8150 <FSettingOperator+0x520>
		       break;
          case '*':
		       stSettingOperator=soExitSettingOperator;
    7cfe:	8f e0       	ldi	r24, 0x0F	; 15
    7d00:	27 c2       	rjmp	.+1102   	; 0x8150 <FSettingOperator+0x520>
		       break;
		  }
	      break;
     case soChangeOperatorInit:
	      lcd_clear();		  
    7d02:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    7d06:	8e 01       	movw	r16, r28
    7d08:	00 5f       	subi	r16, 0xF0	; 240
    7d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    7d0c:	c8 01       	movw	r24, r16
    7d0e:	65 e1       	ldi	r22, 0x15	; 21
    7d10:	70 e0       	ldi	r23, 0x00	; 0
    7d12:	42 e1       	ldi	r20, 0x12	; 18
    7d14:	50 e0       	ldi	r21, 0x00	; 0
    7d16:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
    7d1a:	c8 01       	movw	r24, r16
    7d1c:	b8 01       	movw	r22, r16
    7d1e:	40 e0       	ldi	r20, 0x00	; 0
    7d20:	50 e0       	ldi	r21, 0x00	; 0
    7d22:	2f e0       	ldi	r18, 0x0F	; 15
    7d24:	30 e0       	ldi	r19, 0x00	; 0
    7d26:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

		  sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    7d2a:	00 d0       	rcall	.+0      	; 0x7d2c <FSettingOperator+0xfc>
    7d2c:	00 d0       	rcall	.+0      	; 0x7d2e <FSettingOperator+0xfe>
    7d2e:	00 d0       	rcall	.+0      	; 0x7d30 <FSettingOperator+0x100>
    7d30:	ed b7       	in	r30, 0x3d	; 61
    7d32:	fe b7       	in	r31, 0x3e	; 62
    7d34:	31 96       	adiw	r30, 0x01	; 1
    7d36:	a2 e2       	ldi	r26, 0x22	; 34
    7d38:	ea 2e       	mov	r14, r26
    7d3a:	f1 2c       	mov	r15, r1
    7d3c:	ec 0e       	add	r14, r28
    7d3e:	fd 1e       	adc	r15, r29
    7d40:	ad b7       	in	r26, 0x3d	; 61
    7d42:	be b7       	in	r27, 0x3e	; 62
    7d44:	12 96       	adiw	r26, 0x02	; 2
    7d46:	fc 92       	st	X, r15
    7d48:	ee 92       	st	-X, r14
    7d4a:	11 97       	sbiw	r26, 0x01	; 1
    7d4c:	83 e1       	ldi	r24, 0x13	; 19
    7d4e:	92 e1       	ldi	r25, 0x12	; 18
    7d50:	93 83       	std	Z+3, r25	; 0x03
    7d52:	82 83       	std	Z+2, r24	; 0x02
    7d54:	15 83       	std	Z+5, r17	; 0x05
    7d56:	04 83       	std	Z+4, r16	; 0x04
    7d58:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_printf(1,1,PSTR("Name:"));
    7d5c:	8d b7       	in	r24, 0x3d	; 61
    7d5e:	9e b7       	in	r25, 0x3e	; 62
    7d60:	06 96       	adiw	r24, 0x06	; 6
    7d62:	0f b6       	in	r0, 0x3f	; 63
    7d64:	f8 94       	cli
    7d66:	9e bf       	out	0x3e, r25	; 62
    7d68:	0f be       	out	0x3f, r0	; 63
    7d6a:	8d bf       	out	0x3d, r24	; 61
    7d6c:	81 e0       	ldi	r24, 0x01	; 1
    7d6e:	61 e0       	ldi	r22, 0x01	; 1
    7d70:	4d e0       	ldi	r20, 0x0D	; 13
    7d72:	52 e1       	ldi	r21, 0x12	; 18
    7d74:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_print (1,6,lcdteks);
    7d78:	81 e0       	ldi	r24, 0x01	; 1
    7d7a:	66 e0       	ldi	r22, 0x06	; 6
    7d7c:	a7 01       	movw	r20, r14
    7d7e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(2,1,PSTR("New :_              "));
    7d82:	82 e0       	ldi	r24, 0x02	; 2
    7d84:	61 e0       	ldi	r22, 0x01	; 1
    7d86:	48 ef       	ldi	r20, 0xF8	; 248
    7d88:	51 e1       	ldi	r21, 0x11	; 17
    7d8a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    7d8e:	84 e0       	ldi	r24, 0x04	; 4
    7d90:	61 e0       	ldi	r22, 0x01	; 1
    7d92:	43 ee       	ldi	r20, 0xE3	; 227
    7d94:	51 e1       	ldi	r21, 0x11	; 17
    7d96:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stSettingOperator=soOperatorNameInput;
    7d9a:	83 e0       	ldi	r24, 0x03	; 3
    7d9c:	d9 c1       	rjmp	.+946    	; 0x8150 <FSettingOperator+0x520>
	      break;
     case soOperatorNameInput:
          uiResult=USER_NONE;
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
    7d9e:	83 e0       	ldi	r24, 0x03	; 3
    7da0:	62 e0       	ldi	r22, 0x02	; 2
    7da2:	46 e0       	ldi	r20, 0x06	; 6
    7da4:	20 e7       	ldi	r18, 0x70	; 112
    7da6:	39 e0       	ldi	r19, 0x09	; 9
    7da8:	00 e0       	ldi	r16, 0x00	; 0
    7daa:	10 e0       	ldi	r17, 0x00	; 0
    7dac:	f0 e1       	ldi	r31, 0x10	; 16
    7dae:	ef 2e       	mov	r14, r31
    7db0:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  switch(uiResult){
    7db4:	83 30       	cpi	r24, 0x03	; 3
    7db6:	51 f0       	breq	.+20     	; 0x7dcc <FSettingOperator+0x19c>
    7db8:	84 30       	cpi	r24, 0x04	; 4
    7dba:	08 f4       	brcc	.+2      	; 0x7dbe <FSettingOperator+0x18e>
    7dbc:	e3 c0       	rjmp	.+454    	; 0x7f84 <FSettingOperator+0x354>
    7dbe:	84 30       	cpi	r24, 0x04	; 4
    7dc0:	09 f4       	brne	.+2      	; 0x7dc4 <FSettingOperator+0x194>
    7dc2:	4c c0       	rjmp	.+152    	; 0x7e5c <FSettingOperator+0x22c>
    7dc4:	85 30       	cpi	r24, 0x05	; 5
    7dc6:	09 f0       	breq	.+2      	; 0x7dca <FSettingOperator+0x19a>
    7dc8:	ff c1       	rjmp	.+1022   	; 0x81c8 <FSettingOperator+0x598>
    7dca:	4d c0       	rjmp	.+154    	; 0x7e66 <FSettingOperator+0x236>
		  case USER_OK:
		       lcd_clear();
    7dcc:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
			   StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
    7dd0:	e0 e1       	ldi	r30, 0x10	; 16
    7dd2:	ee 2e       	mov	r14, r30
    7dd4:	f1 2c       	mov	r15, r1
    7dd6:	ec 0e       	add	r14, r28
    7dd8:	fd 1e       	adc	r15, r29
    7dda:	80 e7       	ldi	r24, 0x70	; 112
    7ddc:	99 e0       	ldi	r25, 0x09	; 9
    7dde:	b7 01       	movw	r22, r14
    7de0:	40 e0       	ldi	r20, 0x00	; 0
    7de2:	50 e0       	ldi	r21, 0x00	; 0
    7de4:	2f e0       	ldi	r18, 0x0F	; 15
    7de6:	30 e0       	ldi	r19, 0x00	; 0
    7de8:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		       sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    7dec:	00 d0       	rcall	.+0      	; 0x7dee <FSettingOperator+0x1be>
    7dee:	00 d0       	rcall	.+0      	; 0x7df0 <FSettingOperator+0x1c0>
    7df0:	00 d0       	rcall	.+0      	; 0x7df2 <FSettingOperator+0x1c2>
    7df2:	ed b7       	in	r30, 0x3d	; 61
    7df4:	fe b7       	in	r31, 0x3e	; 62
    7df6:	31 96       	adiw	r30, 0x01	; 1
    7df8:	8e 01       	movw	r16, r28
    7dfa:	0e 5d       	subi	r16, 0xDE	; 222
    7dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    7dfe:	ad b7       	in	r26, 0x3d	; 61
    7e00:	be b7       	in	r27, 0x3e	; 62
    7e02:	12 96       	adiw	r26, 0x02	; 2
    7e04:	1c 93       	st	X, r17
    7e06:	0e 93       	st	-X, r16
    7e08:	11 97       	sbiw	r26, 0x01	; 1
    7e0a:	80 ee       	ldi	r24, 0xE0	; 224
    7e0c:	91 e1       	ldi	r25, 0x11	; 17
    7e0e:	93 83       	std	Z+3, r25	; 0x03
    7e10:	82 83       	std	Z+2, r24	; 0x02
    7e12:	f5 82       	std	Z+5, r15	; 0x05
    7e14:	e4 82       	std	Z+4, r14	; 0x04
    7e16:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   lcd_printf(1,1,PSTR("New Operator:"));
    7e1a:	8d b7       	in	r24, 0x3d	; 61
    7e1c:	9e b7       	in	r25, 0x3e	; 62
    7e1e:	06 96       	adiw	r24, 0x06	; 6
    7e20:	0f b6       	in	r0, 0x3f	; 63
    7e22:	f8 94       	cli
    7e24:	9e bf       	out	0x3e, r25	; 62
    7e26:	0f be       	out	0x3f, r0	; 63
    7e28:	8d bf       	out	0x3d, r24	; 61
    7e2a:	81 e0       	ldi	r24, 0x01	; 1
    7e2c:	61 e0       	ldi	r22, 0x01	; 1
    7e2e:	42 ed       	ldi	r20, 0xD2	; 210
    7e30:	51 e1       	ldi	r21, 0x11	; 17
    7e32:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   lcd_print (2,1,lcdteks);
    7e36:	82 e0       	ldi	r24, 0x02	; 2
    7e38:	61 e0       	ldi	r22, 0x01	; 1
    7e3a:	a8 01       	movw	r20, r16
    7e3c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   lcd_printf(3,1,PSTR("Save?"));
    7e40:	83 e0       	ldi	r24, 0x03	; 3
    7e42:	61 e0       	ldi	r22, 0x01	; 1
    7e44:	4c ec       	ldi	r20, 0xCC	; 204
    7e46:	51 e1       	ldi	r21, 0x11	; 17
    7e48:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]No    [#]Yes"));
    7e4c:	84 e0       	ldi	r24, 0x04	; 4
    7e4e:	61 e0       	ldi	r22, 0x01	; 1
    7e50:	4c eb       	ldi	r20, 0xBC	; 188
    7e52:	51 e1       	ldi	r21, 0x11	; 17
    7e54:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
               stSettingOperator=soIsSaveOperatorName;
    7e58:	84 e0       	ldi	r24, 0x04	; 4
    7e5a:	7a c1       	rjmp	.+756    	; 0x8150 <FSettingOperator+0x520>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    7e5c:	84 e0       	ldi	r24, 0x04	; 4
    7e5e:	61 e0       	ldi	r22, 0x01	; 1
    7e60:	47 ea       	ldi	r20, 0xA7	; 167
    7e62:	51 e1       	ldi	r21, 0x11	; 17
    7e64:	db c0       	rjmp	.+438    	; 0x801c <FSettingOperator+0x3ec>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    7e66:	84 e0       	ldi	r24, 0x04	; 4
    7e68:	61 e0       	ldi	r22, 0x01	; 1
    7e6a:	42 e9       	ldi	r20, 0x92	; 146
    7e6c:	51 e1       	ldi	r21, 0x11	; 17
    7e6e:	d6 c0       	rjmp	.+428    	; 0x801c <FSettingOperator+0x3ec>
		       break;
		  }
	      break;
     case soIsSaveOperatorName:
          KeyPressed=_key_scan(1);
    7e70:	81 e0       	ldi	r24, 0x01	; 1
    7e72:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    7e76:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  switch(KeyChar){
    7e7a:	83 32       	cpi	r24, 0x23	; 35
    7e7c:	09 f0       	breq	.+2      	; 0x7e80 <FSettingOperator+0x250>
    7e7e:	49 c0       	rjmp	.+146    	; 0x7f12 <FSettingOperator+0x2e2>
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
          case '#':
		       StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
    7e80:	8e 01       	movw	r16, r28
    7e82:	00 5f       	subi	r16, 0xF0	; 240
    7e84:	1f 4f       	sbci	r17, 0xFF	; 255
    7e86:	80 e7       	ldi	r24, 0x70	; 112
    7e88:	99 e0       	ldi	r25, 0x09	; 9
    7e8a:	b8 01       	movw	r22, r16
    7e8c:	40 e0       	ldi	r20, 0x00	; 0
    7e8e:	50 e0       	ldi	r21, 0x00	; 0
    7e90:	2f e0       	ldi	r18, 0x0F	; 15
    7e92:	30 e0       	ldi	r19, 0x00	; 0
    7e94:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
               AddSpaceLag(strOperatorName,18); 
    7e98:	c8 01       	movw	r24, r16
    7e9a:	62 e1       	ldi	r22, 0x12	; 18
    7e9c:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
		       eeprom_write_block((const void*) &strOperatorName, (void*) &DefOperatorName,18);
    7ea0:	c8 01       	movw	r24, r16
    7ea2:	65 e1       	ldi	r22, 0x15	; 21
    7ea4:	70 e0       	ldi	r23, 0x00	; 0
    7ea6:	42 e1       	ldi	r20, 0x12	; 18
    7ea8:	50 e0       	ldi	r21, 0x00	; 0
    7eaa:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
		       lcd_printf(3,1,PSTR("Saved "));
    7eae:	83 e0       	ldi	r24, 0x03	; 3
    7eb0:	61 e0       	ldi	r22, 0x01	; 1
    7eb2:	4b e8       	ldi	r20, 0x8B	; 139
    7eb4:	51 e1       	ldi	r21, 0x11	; 17
    7eb6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   TimDisplay=0;
    7eba:	10 92 70 02 	sts	0x0270, r1
			   system_beep(1);
    7ebe:	81 e0       	ldi	r24, 0x01	; 1
    7ec0:	90 e0       	ldi	r25, 0x00	; 0
    7ec2:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
    7ec6:	43 c1       	rjmp	.+646    	; 0x814e <FSettingOperator+0x51e>
		       stSettingOperator=soDelayDisplaySaved;
		       break;
		  }	      
		  break;
     case soChangePasswordInit:
	      lcd_clear();
    7ec8:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("-Change Password-"));
    7ecc:	81 e0       	ldi	r24, 0x01	; 1
    7ece:	61 e0       	ldi	r22, 0x01	; 1
    7ed0:	49 e7       	ldi	r20, 0x79	; 121
    7ed2:	51 e1       	ldi	r21, 0x11	; 17
    7ed4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Supervisor"));
    7ed8:	82 e0       	ldi	r24, 0x02	; 2
    7eda:	61 e0       	ldi	r22, 0x01	; 1
    7edc:	4c e6       	ldi	r20, 0x6C	; 108
    7ede:	51 e1       	ldi	r21, 0x11	; 17
    7ee0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Administrator"));
    7ee4:	83 e0       	ldi	r24, 0x03	; 3
    7ee6:	61 e0       	ldi	r22, 0x01	; 1
    7ee8:	4c e5       	ldi	r20, 0x5C	; 92
    7eea:	51 e1       	ldi	r21, 0x11	; 17
    7eec:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back     "));
    7ef0:	84 e0       	ldi	r24, 0x04	; 4
    7ef2:	61 e0       	ldi	r22, 0x01	; 1
    7ef4:	4f e4       	ldi	r20, 0x4F	; 79
    7ef6:	51 e1       	ldi	r21, 0x11	; 17
    7ef8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stSettingOperator=soChangePasswordInput; 
    7efc:	86 e0       	ldi	r24, 0x06	; 6
    7efe:	28 c1       	rjmp	.+592    	; 0x8150 <FSettingOperator+0x520>
	      break;
     case soChangePasswordInput:
          KeyPressed=_key_scan(1);
    7f00:	81 e0       	ldi	r24, 0x01	; 1
    7f02:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    7f06:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  switch(KeyChar){
    7f0a:	81 33       	cpi	r24, 0x31	; 49
    7f0c:	31 f0       	breq	.+12     	; 0x7f1a <FSettingOperator+0x2ea>
    7f0e:	82 33       	cpi	r24, 0x32	; 50
    7f10:	31 f0       	breq	.+12     	; 0x7f1e <FSettingOperator+0x2ee>
    7f12:	8a 32       	cpi	r24, 0x2A	; 42
    7f14:	09 f0       	breq	.+2      	; 0x7f18 <FSettingOperator+0x2e8>
    7f16:	58 c1       	rjmp	.+688    	; 0x81c8 <FSettingOperator+0x598>
    7f18:	50 c1       	rjmp	.+672    	; 0x81ba <FSettingOperator+0x58a>
		  case '1':		 
		       PassType=PT_SUPERVISOR;
    7f1a:	81 e0       	ldi	r24, 0x01	; 1
    7f1c:	01 c0       	rjmp	.+2      	; 0x7f20 <FSettingOperator+0x2f0>
		       stSettingOperator=soOldPasswordDisplay;
		       break;
          case '2':		       
		       PassType=PT_ADMINISTRATOR;
    7f1e:	82 e0       	ldi	r24, 0x02	; 2
    7f20:	80 93 fb 02 	sts	0x02FB, r24
    7f24:	75 c0       	rjmp	.+234    	; 0x8010 <FSettingOperator+0x3e0>
		       stSettingOperator=soMenuOption;
		       break;
		  }	      
	      break;
     case soOldPasswordDisplay:
	 	  lcd_clear();
    7f26:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	      if (PassType==PT_SUPERVISOR){
    7f2a:	80 91 fb 02 	lds	r24, 0x02FB
    7f2e:	81 30       	cpi	r24, 0x01	; 1
    7f30:	21 f4       	brne	.+8      	; 0x7f3a <FSettingOperator+0x30a>
		      lcd_printf(1,1,PSTR("-Supervisor-"));              
    7f32:	61 e0       	ldi	r22, 0x01	; 1
    7f34:	42 e4       	ldi	r20, 0x42	; 66
    7f36:	51 e1       	ldi	r21, 0x11	; 17
    7f38:	06 c0       	rjmp	.+12     	; 0x7f46 <FSettingOperator+0x316>
		  }else if (PassType==PT_ADMINISTRATOR){		       
    7f3a:	82 30       	cpi	r24, 0x02	; 2
    7f3c:	31 f4       	brne	.+12     	; 0x7f4a <FSettingOperator+0x31a>
		       lcd_printf(1,1,PSTR("-Administrator-"));			   
    7f3e:	81 e0       	ldi	r24, 0x01	; 1
    7f40:	61 e0       	ldi	r22, 0x01	; 1
    7f42:	42 e3       	ldi	r20, 0x32	; 50
    7f44:	51 e1       	ldi	r21, 0x11	; 17
    7f46:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  }
		      lcd_printf(2,1,PSTR("Old:_"));
    7f4a:	82 e0       	ldi	r24, 0x02	; 2
    7f4c:	61 e0       	ldi	r22, 0x01	; 1
    7f4e:	4c e2       	ldi	r20, 0x2C	; 44
    7f50:	51 e1       	ldi	r21, 0x11	; 17
    7f52:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    7f56:	84 e0       	ldi	r24, 0x04	; 4
    7f58:	61 e0       	ldi	r22, 0x01	; 1
    7f5a:	47 e1       	ldi	r20, 0x17	; 23
    7f5c:	51 e1       	ldi	r21, 0x11	; 17
    7f5e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>

          stSettingOperator=soOldPasswordEntry;
    7f62:	88 e0       	ldi	r24, 0x08	; 8
    7f64:	f5 c0       	rjmp	.+490    	; 0x8150 <FSettingOperator+0x520>
	      break;
     case soOldPasswordEntry:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine1,0,8);           
    7f66:	84 e0       	ldi	r24, 0x04	; 4
    7f68:	62 e0       	ldi	r22, 0x02	; 2
    7f6a:	45 e0       	ldi	r20, 0x05	; 5
    7f6c:	20 e7       	ldi	r18, 0x70	; 112
    7f6e:	39 e0       	ldi	r19, 0x09	; 9
    7f70:	00 e0       	ldi	r16, 0x00	; 0
    7f72:	10 e0       	ldi	r17, 0x00	; 0
    7f74:	78 e0       	ldi	r23, 0x08	; 8
    7f76:	e7 2e       	mov	r14, r23
    7f78:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  switch(uiResult){
    7f7c:	83 30       	cpi	r24, 0x03	; 3
    7f7e:	61 f0       	breq	.+24     	; 0x7f98 <FSettingOperator+0x368>
    7f80:	84 30       	cpi	r24, 0x04	; 4
    7f82:	20 f4       	brcc	.+8      	; 0x7f8c <FSettingOperator+0x35c>
    7f84:	81 30       	cpi	r24, 0x01	; 1
    7f86:	09 f0       	breq	.+2      	; 0x7f8a <FSettingOperator+0x35a>
    7f88:	1f c1       	rjmp	.+574    	; 0x81c8 <FSettingOperator+0x598>
    7f8a:	17 c1       	rjmp	.+558    	; 0x81ba <FSettingOperator+0x58a>
    7f8c:	84 30       	cpi	r24, 0x04	; 4
    7f8e:	79 f0       	breq	.+30     	; 0x7fae <FSettingOperator+0x37e>
    7f90:	85 30       	cpi	r24, 0x05	; 5
    7f92:	09 f0       	breq	.+2      	; 0x7f96 <FSettingOperator+0x366>
    7f94:	19 c1       	rjmp	.+562    	; 0x81c8 <FSettingOperator+0x598>
    7f96:	10 c0       	rjmp	.+32     	; 0x7fb8 <FSettingOperator+0x388>
		  case USER_OK:
		       lcd_printf(2,1,PSTR("New:_               "));
    7f98:	82 e0       	ldi	r24, 0x02	; 2
    7f9a:	61 e0       	ldi	r22, 0x01	; 1
    7f9c:	42 e0       	ldi	r20, 0x02	; 2
    7f9e:	51 e1       	ldi	r21, 0x11	; 17
    7fa0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    7fa4:	84 e0       	ldi	r24, 0x04	; 4
    7fa6:	61 e0       	ldi	r22, 0x01	; 1
    7fa8:	4d ee       	ldi	r20, 0xED	; 237
    7faa:	50 e1       	ldi	r21, 0x10	; 16
    7fac:	70 c0       	rjmp	.+224    	; 0x808e <FSettingOperator+0x45e>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    7fae:	84 e0       	ldi	r24, 0x04	; 4
    7fb0:	61 e0       	ldi	r22, 0x01	; 1
    7fb2:	48 ed       	ldi	r20, 0xD8	; 216
    7fb4:	50 e1       	ldi	r21, 0x10	; 16
    7fb6:	32 c0       	rjmp	.+100    	; 0x801c <FSettingOperator+0x3ec>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    7fb8:	84 e0       	ldi	r24, 0x04	; 4
    7fba:	61 e0       	ldi	r22, 0x01	; 1
    7fbc:	43 ec       	ldi	r20, 0xC3	; 195
    7fbe:	50 e1       	ldi	r21, 0x10	; 16
    7fc0:	2d c0       	rjmp	.+90     	; 0x801c <FSettingOperator+0x3ec>
		       break;
		  }
	      break;
     case soNewPasswordEntry1:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine2,0,8);           
    7fc2:	84 e0       	ldi	r24, 0x04	; 4
    7fc4:	62 e0       	ldi	r22, 0x02	; 2
    7fc6:	45 e0       	ldi	r20, 0x05	; 5
    7fc8:	21 e8       	ldi	r18, 0x81	; 129
    7fca:	38 e0       	ldi	r19, 0x08	; 8
    7fcc:	00 e0       	ldi	r16, 0x00	; 0
    7fce:	10 e0       	ldi	r17, 0x00	; 0
    7fd0:	58 e0       	ldi	r21, 0x08	; 8
    7fd2:	e5 2e       	mov	r14, r21
    7fd4:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  switch(uiResult){
    7fd8:	83 30       	cpi	r24, 0x03	; 3
    7fda:	61 f0       	breq	.+24     	; 0x7ff4 <FSettingOperator+0x3c4>
    7fdc:	84 30       	cpi	r24, 0x04	; 4
    7fde:	20 f4       	brcc	.+8      	; 0x7fe8 <FSettingOperator+0x3b8>
    7fe0:	81 30       	cpi	r24, 0x01	; 1
    7fe2:	09 f0       	breq	.+2      	; 0x7fe6 <FSettingOperator+0x3b6>
    7fe4:	f1 c0       	rjmp	.+482    	; 0x81c8 <FSettingOperator+0x598>
    7fe6:	14 c0       	rjmp	.+40     	; 0x8010 <FSettingOperator+0x3e0>
    7fe8:	84 30       	cpi	r24, 0x04	; 4
    7fea:	a1 f0       	breq	.+40     	; 0x8014 <FSettingOperator+0x3e4>
    7fec:	85 30       	cpi	r24, 0x05	; 5
    7fee:	09 f0       	breq	.+2      	; 0x7ff2 <FSettingOperator+0x3c2>
    7ff0:	eb c0       	rjmp	.+470    	; 0x81c8 <FSettingOperator+0x598>
    7ff2:	17 c0       	rjmp	.+46     	; 0x8022 <FSettingOperator+0x3f2>
		  case USER_OK:
		       lcd_printf(3,1,PSTR("New:_               "));
    7ff4:	83 e0       	ldi	r24, 0x03	; 3
    7ff6:	61 e0       	ldi	r22, 0x01	; 1
    7ff8:	4e ea       	ldi	r20, 0xAE	; 174
    7ffa:	50 e1       	ldi	r21, 0x10	; 16
    7ffc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    8000:	84 e0       	ldi	r24, 0x04	; 4
    8002:	61 e0       	ldi	r22, 0x01	; 1
    8004:	49 e9       	ldi	r20, 0x99	; 153
    8006:	50 e1       	ldi	r21, 0x10	; 16
    8008:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		       stSettingOperator=soNewPasswordEntry2;
    800c:	8a e0       	ldi	r24, 0x0A	; 10
    800e:	a0 c0       	rjmp	.+320    	; 0x8150 <FSettingOperator+0x520>
		       break;
		  case USER_CANCEL:		       
			   stSettingOperator=soOldPasswordDisplay;
    8010:	87 e0       	ldi	r24, 0x07	; 7
    8012:	9e c0       	rjmp	.+316    	; 0x8150 <FSettingOperator+0x520>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    8014:	84 e0       	ldi	r24, 0x04	; 4
    8016:	61 e0       	ldi	r22, 0x01	; 1
    8018:	44 e8       	ldi	r20, 0x84	; 132
    801a:	50 e1       	ldi	r21, 0x10	; 16
    801c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    8020:	d3 c0       	rjmp	.+422    	; 0x81c8 <FSettingOperator+0x598>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    8022:	84 e0       	ldi	r24, 0x04	; 4
    8024:	61 e0       	ldi	r22, 0x01	; 1
    8026:	4f e6       	ldi	r20, 0x6F	; 111
    8028:	50 e1       	ldi	r21, 0x10	; 16
    802a:	f8 cf       	rjmp	.-16     	; 0x801c <FSettingOperator+0x3ec>
		       break;
		  }	      
	      break;
     case soNewPasswordEntry2:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,3,5,strFreeMessageLine3,0,8);           
    802c:	84 e0       	ldi	r24, 0x04	; 4
    802e:	63 e0       	ldi	r22, 0x03	; 3
    8030:	45 e0       	ldi	r20, 0x05	; 5
    8032:	2a ee       	ldi	r18, 0xEA	; 234
    8034:	38 e0       	ldi	r19, 0x08	; 8
    8036:	00 e0       	ldi	r16, 0x00	; 0
    8038:	10 e0       	ldi	r17, 0x00	; 0
    803a:	98 e0       	ldi	r25, 0x08	; 8
    803c:	e9 2e       	mov	r14, r25
    803e:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  switch(uiResult){
    8042:	83 30       	cpi	r24, 0x03	; 3
    8044:	61 f0       	breq	.+24     	; 0x805e <FSettingOperator+0x42e>
    8046:	84 30       	cpi	r24, 0x04	; 4
    8048:	20 f4       	brcc	.+8      	; 0x8052 <FSettingOperator+0x422>
    804a:	81 30       	cpi	r24, 0x01	; 1
    804c:	09 f0       	breq	.+2      	; 0x8050 <FSettingOperator+0x420>
    804e:	bc c0       	rjmp	.+376    	; 0x81c8 <FSettingOperator+0x598>
    8050:	12 c0       	rjmp	.+36     	; 0x8076 <FSettingOperator+0x446>
    8052:	84 30       	cpi	r24, 0x04	; 4
    8054:	01 f1       	breq	.+64     	; 0x8096 <FSettingOperator+0x466>
    8056:	85 30       	cpi	r24, 0x05	; 5
    8058:	09 f0       	breq	.+2      	; 0x805c <FSettingOperator+0x42c>
    805a:	b6 c0       	rjmp	.+364    	; 0x81c8 <FSettingOperator+0x598>
    805c:	21 c0       	rjmp	.+66     	; 0x80a0 <FSettingOperator+0x470>
		  case USER_OK:
		       lcd_clear();
    805e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
               lcd_printf(2,1,PSTR("Validating.."));
    8062:	82 e0       	ldi	r24, 0x02	; 2
    8064:	61 e0       	ldi	r22, 0x01	; 1
    8066:	42 e6       	ldi	r20, 0x62	; 98
    8068:	50 e1       	ldi	r21, 0x10	; 16
    806a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   TimDisplay=0;
    806e:	10 92 70 02 	sts	0x0270, r1
		       stSettingOperator=soDispValidatePassword;
    8072:	8b e0       	ldi	r24, 0x0B	; 11
    8074:	6d c0       	rjmp	.+218    	; 0x8150 <FSettingOperator+0x520>
		       break;
		  case USER_CANCEL:
               lcd_clear();
    8076:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
               lcd_printf(2,1,PSTR("New:_               "));
    807a:	82 e0       	ldi	r24, 0x02	; 2
    807c:	61 e0       	ldi	r22, 0x01	; 1
    807e:	4d e4       	ldi	r20, 0x4D	; 77
    8080:	50 e1       	ldi	r21, 0x10	; 16
    8082:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    8086:	84 e0       	ldi	r24, 0x04	; 4
    8088:	61 e0       	ldi	r22, 0x01	; 1
    808a:	48 e3       	ldi	r20, 0x38	; 56
    808c:	50 e1       	ldi	r21, 0x10	; 16
    808e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		       stSettingOperator=soNewPasswordEntry1;
    8092:	89 e0       	ldi	r24, 0x09	; 9
    8094:	5d c0       	rjmp	.+186    	; 0x8150 <FSettingOperator+0x520>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    8096:	84 e0       	ldi	r24, 0x04	; 4
    8098:	61 e0       	ldi	r22, 0x01	; 1
    809a:	43 e2       	ldi	r20, 0x23	; 35
    809c:	50 e1       	ldi	r21, 0x10	; 16
    809e:	be cf       	rjmp	.-132    	; 0x801c <FSettingOperator+0x3ec>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    80a0:	84 e0       	ldi	r24, 0x04	; 4
    80a2:	61 e0       	ldi	r22, 0x01	; 1
    80a4:	4e e0       	ldi	r20, 0x0E	; 14
    80a6:	50 e1       	ldi	r21, 0x10	; 16
    80a8:	b9 cf       	rjmp	.-142    	; 0x801c <FSettingOperator+0x3ec>
		       break;
		  }	      
	      break;
     case soDispValidatePassword:
	      if (TimDisplay>3)stSettingOperator=soValidatePassword;
    80aa:	80 91 70 02 	lds	r24, 0x0270
    80ae:	84 30       	cpi	r24, 0x04	; 4
    80b0:	08 f4       	brcc	.+2      	; 0x80b4 <FSettingOperator+0x484>
    80b2:	8a c0       	rjmp	.+276    	; 0x81c8 <FSettingOperator+0x598>
    80b4:	8c e0       	ldi	r24, 0x0C	; 12
    80b6:	4c c0       	rjmp	.+152    	; 0x8150 <FSettingOperator+0x520>
	      break;
     case soValidatePassword:
          if (PassType==PT_SUPERVISOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSysPassword, 10);		      			   
    80b8:	80 91 fb 02 	lds	r24, 0x02FB
    80bc:	81 30       	cpi	r24, 0x01	; 1
    80be:	29 f4       	brne	.+10     	; 0x80ca <FSettingOperator+0x49a>
    80c0:	ce 01       	movw	r24, r28
    80c2:	01 96       	adiw	r24, 0x01	; 1
    80c4:	6b e0       	ldi	r22, 0x0B	; 11
    80c6:	70 e0       	ldi	r23, 0x00	; 0
    80c8:	06 c0       	rjmp	.+12     	; 0x80d6 <FSettingOperator+0x4a6>
		  else 
		  if (PassType==PT_ADMINISTRATOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSpvPassword, 10);    
    80ca:	82 30       	cpi	r24, 0x02	; 2
    80cc:	41 f4       	brne	.+16     	; 0x80de <FSettingOperator+0x4ae>
    80ce:	ce 01       	movw	r24, r28
    80d0:	01 96       	adiw	r24, 0x01	; 1
    80d2:	61 e0       	ldi	r22, 0x01	; 1
    80d4:	70 e0       	ldi	r23, 0x00	; 0
    80d6:	4a e0       	ldi	r20, 0x0A	; 10
    80d8:	50 e0       	ldi	r21, 0x00	; 0
    80da:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  
		  //Check Old Validity
		  if (strcmp(strPassword,strFreeMessageLine1)==0){//OldMessage Valid
    80de:	ce 01       	movw	r24, r28
    80e0:	01 96       	adiw	r24, 0x01	; 1
    80e2:	60 e7       	ldi	r22, 0x70	; 112
    80e4:	79 e0       	ldi	r23, 0x09	; 9
    80e6:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    80ea:	00 97       	sbiw	r24, 0x00	; 0
    80ec:	09 f0       	breq	.+2      	; 0x80f0 <FSettingOperator+0x4c0>
    80ee:	46 c0       	rjmp	.+140    	; 0x817c <FSettingOperator+0x54c>
              if (strcmp(strFreeMessageLine2,strFreeMessageLine3)==0){
    80f0:	81 e8       	ldi	r24, 0x81	; 129
    80f2:	98 e0       	ldi	r25, 0x08	; 8
    80f4:	6a ee       	ldi	r22, 0xEA	; 234
    80f6:	78 e0       	ldi	r23, 0x08	; 8
    80f8:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    80fc:	00 97       	sbiw	r24, 0x00	; 0
    80fe:	59 f5       	brne	.+86     	; 0x8156 <FSettingOperator+0x526>
                  
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
    8100:	80 91 fb 02 	lds	r24, 0x02FB
    8104:	81 30       	cpi	r24, 0x01	; 1
    8106:	29 f4       	brne	.+10     	; 0x8112 <FSettingOperator+0x4e2>
    8108:	81 e8       	ldi	r24, 0x81	; 129
    810a:	98 e0       	ldi	r25, 0x08	; 8
    810c:	6b e0       	ldi	r22, 0x0B	; 11
    810e:	70 e0       	ldi	r23, 0x00	; 0
    8110:	06 c0       	rjmp	.+12     	; 0x811e <FSettingOperator+0x4ee>
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    
    8112:	82 30       	cpi	r24, 0x02	; 2
    8114:	41 f4       	brne	.+16     	; 0x8126 <FSettingOperator+0x4f6>
    8116:	81 e8       	ldi	r24, 0x81	; 129
    8118:	98 e0       	ldi	r25, 0x08	; 8
    811a:	61 e0       	ldi	r22, 0x01	; 1
    811c:	70 e0       	ldi	r23, 0x00	; 0
    811e:	4a e0       	ldi	r20, 0x0A	; 10
    8120:	50 e0       	ldi	r21, 0x00	; 0
    8122:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

			      system_beep(1);
    8126:	81 e0       	ldi	r24, 0x01	; 1
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
				  lcd_clear();
    812e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
			      lcd_printf(2,1,PSTR("     Completed      "));
    8132:	82 e0       	ldi	r24, 0x02	; 2
    8134:	61 e0       	ldi	r22, 0x01	; 1
    8136:	49 ef       	ldi	r20, 0xF9	; 249
    8138:	5f e0       	ldi	r21, 0x0F	; 15
    813a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
    813e:	83 e0       	ldi	r24, 0x03	; 3
    8140:	61 e0       	ldi	r22, 0x01	; 1
    8142:	44 ee       	ldi	r20, 0xE4	; 228
    8144:	5f e0       	ldi	r21, 0x0F	; 15
    8146:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				  TimDisplay=0;
    814a:	10 92 70 02 	sts	0x0270, r1
				  stSettingOperator=soDelayDisplaySaved;
    814e:	8e e0       	ldi	r24, 0x0E	; 14
    8150:	80 93 fc 02 	sts	0x02FC, r24
    8154:	39 c0       	rjmp	.+114    	; 0x81c8 <FSettingOperator+0x598>
			  }else {
			  system_beep(2);
    8156:	82 e0       	ldi	r24, 0x02	; 2
    8158:	90 e0       	ldi	r25, 0x00	; 0
    815a:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
		      TimDisplay=0;
    815e:	10 92 70 02 	sts	0x0270, r1
		      lcd_clear();
    8162:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		      lcd_printf(2,1,PSTR("      ERROR         "));
    8166:	82 e0       	ldi	r24, 0x02	; 2
    8168:	61 e0       	ldi	r22, 0x01	; 1
    816a:	4f ec       	ldi	r20, 0xCF	; 207
    816c:	5f e0       	ldi	r21, 0x0F	; 15
    816e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      lcd_printf(3,1,PSTR("Invalid New Password"));
    8172:	83 e0       	ldi	r24, 0x03	; 3
    8174:	61 e0       	ldi	r22, 0x01	; 1
    8176:	4a eb       	ldi	r20, 0xBA	; 186
    8178:	5f e0       	ldi	r21, 0x0F	; 15
    817a:	12 c0       	rjmp	.+36     	; 0x81a0 <FSettingOperator+0x570>
		      stSettingOperator=soDisplayInvalidPassword;
			  }
		  }else {
		   //InvalidOld Password
		   system_beep(2);
    817c:	82 e0       	ldi	r24, 0x02	; 2
    817e:	90 e0       	ldi	r25, 0x00	; 0
    8180:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
		   TimDisplay=0;
    8184:	10 92 70 02 	sts	0x0270, r1
		   lcd_clear();
    8188:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		   lcd_printf(2,1,PSTR("      ERROR         "));
    818c:	82 e0       	ldi	r24, 0x02	; 2
    818e:	61 e0       	ldi	r22, 0x01	; 1
    8190:	45 ea       	ldi	r20, 0xA5	; 165
    8192:	5f e0       	ldi	r21, 0x0F	; 15
    8194:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		   lcd_printf(3,1,PSTR("Invalid Old Password"));
    8198:	83 e0       	ldi	r24, 0x03	; 3
    819a:	61 e0       	ldi	r22, 0x01	; 1
    819c:	40 e9       	ldi	r20, 0x90	; 144
    819e:	5f e0       	ldi	r21, 0x0F	; 15
    81a0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		   stSettingOperator=soDisplayInvalidPassword;
    81a4:	8d e0       	ldi	r24, 0x0D	; 13
    81a6:	d4 cf       	rjmp	.-88     	; 0x8150 <FSettingOperator+0x520>
		   }
	      break;
     case soDisplayInvalidPassword:
	      if (TimDisplay>6)stSettingOperator=soMenuOption;
    81a8:	80 91 70 02 	lds	r24, 0x0270
    81ac:	87 30       	cpi	r24, 0x07	; 7
    81ae:	60 f0       	brcs	.+24     	; 0x81c8 <FSettingOperator+0x598>
    81b0:	04 c0       	rjmp	.+8      	; 0x81ba <FSettingOperator+0x58a>
	      break;
     case soDelayDisplaySaved:
	      if (TimDisplay>4)stSettingOperator=soMenuOption;
    81b2:	80 91 70 02 	lds	r24, 0x0270
    81b6:	85 30       	cpi	r24, 0x05	; 5
    81b8:	38 f0       	brcs	.+14     	; 0x81c8 <FSettingOperator+0x598>
    81ba:	10 92 fc 02 	sts	0x02FC, r1
    81be:	04 c0       	rjmp	.+8      	; 0x81c8 <FSettingOperator+0x598>
	      break;
	 case soExitSettingOperator:
	      stSettingOperator=soMenuOption;
    81c0:	10 92 fc 02 	sts	0x02FC, r1
	      Result=MENU_DONE;
    81c4:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    81c6:	01 c0       	rjmp	.+2      	; 0x81ca <FSettingOperator+0x59a>
	 static char PassType=PT_NONE;
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
    81c8:	80 e0       	ldi	r24, 0x00	; 0
	      stSettingOperator=soMenuOption;
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    81ca:	e5 96       	adiw	r28, 0x35	; 53
    81cc:	0f b6       	in	r0, 0x3f	; 63
    81ce:	f8 94       	cli
    81d0:	de bf       	out	0x3e, r29	; 62
    81d2:	0f be       	out	0x3f, r0	; 63
    81d4:	cd bf       	out	0x3d, r28	; 61
    81d6:	cf 91       	pop	r28
    81d8:	df 91       	pop	r29
    81da:	1f 91       	pop	r17
    81dc:	0f 91       	pop	r16
    81de:	ff 90       	pop	r15
    81e0:	ef 90       	pop	r14
    81e2:	08 95       	ret

000081e4 <FMenuSettings>:
char FMenuSettings(){
char Result=MENU_NONE;
static char stMenuSettings=msInit,PageSetting=1;
     char KeyPressed,KeyChar,SubMenu;

     switch(stMenuSettings){
    81e4:	e0 91 00 03 	lds	r30, 0x0300
    81e8:	f0 e0       	ldi	r31, 0x00	; 0
    81ea:	e3 31       	cpi	r30, 0x13	; 19
    81ec:	f1 05       	cpc	r31, r1
    81ee:	08 f0       	brcs	.+2      	; 0x81f2 <FMenuSettings+0xe>
    81f0:	c0 c0       	rjmp	.+384    	; 0x8372 <FMenuSettings+0x18e>
    81f2:	ea 5b       	subi	r30, 0xBA	; 186
    81f4:	ff 4f       	sbci	r31, 0xFF	; 255
    81f6:	ee 0f       	add	r30, r30
    81f8:	ff 1f       	adc	r31, r31
    81fa:	05 90       	lpm	r0, Z+
    81fc:	f4 91       	lpm	r31, Z+
    81fe:	e0 2d       	mov	r30, r0
    8200:	09 94       	ijmp
	 case msInit:
		  lcd_clear();
    8202:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  PageSetting=1;
    8206:	81 e0       	ldi	r24, 0x01	; 1
    8208:	80 93 57 01 	sts	0x0157, r24
    820c:	ab c0       	rjmp	.+342    	; 0x8364 <FMenuSettings+0x180>
		  stMenuSettings=msDisplayPage;
		  break;
	 case msDisplayPage:
	      stMenuSettings=msDisplayPage+PageSetting;
    820e:	80 91 57 01 	lds	r24, 0x0157
    8212:	8f 5f       	subi	r24, 0xFF	; 255
    8214:	a7 c0       	rjmp	.+334    	; 0x8364 <FMenuSettings+0x180>
          break; 	 
	 case msDisplayPage1:
		  lcd_printf(1, 1, PSTR("1)Product  5)Printer"));
    8216:	81 e0       	ldi	r24, 0x01	; 1
    8218:	61 e0       	ldi	r22, 0x01	; 1
    821a:	43 e0       	ldi	r20, 0x03	; 3
    821c:	54 e1       	ldi	r21, 0x14	; 20
    821e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)Pump     6)Host   "));
    8222:	82 e0       	ldi	r24, 0x02	; 2
    8224:	61 e0       	ldi	r22, 0x01	; 1
    8226:	4e ee       	ldi	r20, 0xEE	; 238
    8228:	53 e1       	ldi	r21, 0x13	; 19
    822a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)Decimal  7)Next   "));
    822e:	83 e0       	ldi	r24, 0x03	; 3
    8230:	61 e0       	ldi	r22, 0x01	; 1
    8232:	49 ed       	ldi	r20, 0xD9	; 217
    8234:	53 e1       	ldi	r21, 0x13	; 19
    8236:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4, 1, PSTR("4)Datetime *)Exit   "));
    823a:	84 e0       	ldi	r24, 0x04	; 4
    823c:	61 e0       	ldi	r22, 0x01	; 1
    823e:	44 ec       	ldi	r20, 0xC4	; 196
    8240:	53 e1       	ldi	r21, 0x13	; 19
    8242:	16 c0       	rjmp	.+44     	; 0x8270 <FMenuSettings+0x8c>
		  stMenuSettings=msSelection;
	      break;
	 case msDisplayPage2:
		  lcd_printf(1, 1, PSTR("1)Operator          "));
    8244:	81 e0       	ldi	r24, 0x01	; 1
    8246:	61 e0       	ldi	r22, 0x01	; 1
    8248:	4f ea       	ldi	r20, 0xAF	; 175
    824a:	53 e1       	ldi	r21, 0x13	; 19
    824c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)System            "));
    8250:	82 e0       	ldi	r24, 0x02	; 2
    8252:	61 e0       	ldi	r22, 0x01	; 1
    8254:	4a e9       	ldi	r20, 0x9A	; 154
    8256:	53 e1       	ldi	r21, 0x13	; 19
    8258:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)PumpPooling       "));
    825c:	83 e0       	ldi	r24, 0x03	; 3
    825e:	61 e0       	ldi	r22, 0x01	; 1
    8260:	45 e8       	ldi	r20, 0x85	; 133
    8262:	53 e1       	ldi	r21, 0x13	; 19
    8264:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4, 1, PSTR("*)Back              "));
    8268:	84 e0       	ldi	r24, 0x04	; 4
    826a:	61 e0       	ldi	r22, 0x01	; 1
    826c:	40 e7       	ldi	r20, 0x70	; 112
    826e:	53 e1       	ldi	r21, 0x13	; 19
    8270:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stMenuSettings=msSelection;
    8274:	84 e0       	ldi	r24, 0x04	; 4
    8276:	76 c0       	rjmp	.+236    	; 0x8364 <FMenuSettings+0x180>
	      break;
	 case msSelection:
	      stMenuSettings=msSelection+PageSetting;
    8278:	80 91 57 01 	lds	r24, 0x0157
    827c:	8c 5f       	subi	r24, 0xFC	; 252
    827e:	72 c0       	rjmp	.+228    	; 0x8364 <FMenuSettings+0x180>
          break;	 
	 case msSelectionPage1:
		  KeyPressed=_key_scan(1);
    8280:	81 e0       	ldi	r24, 0x01	; 1
    8282:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    8286:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  switch(KeyChar){
    828a:	84 33       	cpi	r24, 0x34	; 52
    828c:	d1 f0       	breq	.+52     	; 0x82c2 <FMenuSettings+0xde>
    828e:	85 33       	cpi	r24, 0x35	; 53
    8290:	50 f4       	brcc	.+20     	; 0x82a6 <FMenuSettings+0xc2>
    8292:	82 33       	cpi	r24, 0x32	; 50
    8294:	91 f0       	breq	.+36     	; 0x82ba <FMenuSettings+0xd6>
    8296:	83 33       	cpi	r24, 0x33	; 51
    8298:	90 f4       	brcc	.+36     	; 0x82be <FMenuSettings+0xda>
    829a:	8a 32       	cpi	r24, 0x2A	; 42
    829c:	d1 f0       	breq	.+52     	; 0x82d2 <FMenuSettings+0xee>
    829e:	81 33       	cpi	r24, 0x31	; 49
    82a0:	09 f0       	breq	.+2      	; 0x82a4 <FMenuSettings+0xc0>
    82a2:	67 c0       	rjmp	.+206    	; 0x8372 <FMenuSettings+0x18e>
    82a4:	08 c0       	rjmp	.+16     	; 0x82b6 <FMenuSettings+0xd2>
    82a6:	86 33       	cpi	r24, 0x36	; 54
    82a8:	81 f0       	breq	.+32     	; 0x82ca <FMenuSettings+0xe6>
    82aa:	86 33       	cpi	r24, 0x36	; 54
    82ac:	60 f0       	brcs	.+24     	; 0x82c6 <FMenuSettings+0xe2>
    82ae:	87 33       	cpi	r24, 0x37	; 55
    82b0:	09 f0       	breq	.+2      	; 0x82b4 <FMenuSettings+0xd0>
    82b2:	5f c0       	rjmp	.+190    	; 0x8372 <FMenuSettings+0x18e>
    82b4:	0c c0       	rjmp	.+24     	; 0x82ce <FMenuSettings+0xea>
		  case '1':
		       stMenuSettings=msMenuSettingProduct;
    82b6:	89 e0       	ldi	r24, 0x09	; 9
    82b8:	55 c0       	rjmp	.+170    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '2': 
		       stMenuSettings=msMenuSettingPump;
    82ba:	8a e0       	ldi	r24, 0x0A	; 10
    82bc:	53 c0       	rjmp	.+166    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingDec;
    82be:	8b e0       	ldi	r24, 0x0B	; 11
    82c0:	51 c0       	rjmp	.+162    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '4':
		       stMenuSettings=msMenuSettingDatetime;
    82c2:	8c e0       	ldi	r24, 0x0C	; 12
    82c4:	4f c0       	rjmp	.+158    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '5':
		       stMenuSettings=msMenuSettingPrinter;
    82c6:	8d e0       	ldi	r24, 0x0D	; 13
    82c8:	4d c0       	rjmp	.+154    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '6':
		       stMenuSettings=msMenuSettingHost;
    82ca:	8e e0       	ldi	r24, 0x0E	; 14
    82cc:	4b c0       	rjmp	.+150    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '7':
		       stMenuSettings=msMenuSettingNextPage;
    82ce:	87 e0       	ldi	r24, 0x07	; 7
    82d0:	49 c0       	rjmp	.+146    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingExit;
    82d2:	82 e1       	ldi	r24, 0x12	; 18
    82d4:	47 c0       	rjmp	.+142    	; 0x8364 <FMenuSettings+0x180>
		       break;			   
		  }
	      break;
	 case msSelectionPage2:
	 	  KeyPressed=_key_scan(1);
    82d6:	81 e0       	ldi	r24, 0x01	; 1
    82d8:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    82dc:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  switch(KeyChar){
    82e0:	82 33       	cpi	r24, 0x32	; 50
    82e2:	69 f0       	breq	.+26     	; 0x82fe <FMenuSettings+0x11a>
    82e4:	83 33       	cpi	r24, 0x33	; 51
    82e6:	30 f4       	brcc	.+12     	; 0x82f4 <FMenuSettings+0x110>
    82e8:	8a 32       	cpi	r24, 0x2A	; 42
    82ea:	69 f0       	breq	.+26     	; 0x8306 <FMenuSettings+0x122>
    82ec:	81 33       	cpi	r24, 0x31	; 49
    82ee:	09 f0       	breq	.+2      	; 0x82f2 <FMenuSettings+0x10e>
    82f0:	40 c0       	rjmp	.+128    	; 0x8372 <FMenuSettings+0x18e>
    82f2:	03 c0       	rjmp	.+6      	; 0x82fa <FMenuSettings+0x116>
    82f4:	83 33       	cpi	r24, 0x33	; 51
    82f6:	e9 f5       	brne	.+122    	; 0x8372 <FMenuSettings+0x18e>
    82f8:	04 c0       	rjmp	.+8      	; 0x8302 <FMenuSettings+0x11e>
		  case '1':
		       stMenuSettings=msMenuSettingOperator;
    82fa:	8f e0       	ldi	r24, 0x0F	; 15
    82fc:	33 c0       	rjmp	.+102    	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '2':
		       stMenuSettings=msMenuSettingSystem;
    82fe:	80 e1       	ldi	r24, 0x10	; 16
    8300:	31 c0       	rjmp	.+98     	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingPumpPooling;
    8302:	81 e1       	ldi	r24, 0x11	; 17
    8304:	2f c0       	rjmp	.+94     	; 0x8364 <FMenuSettings+0x180>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingBackPage;
    8306:	88 e0       	ldi	r24, 0x08	; 8
    8308:	2d c0       	rjmp	.+90     	; 0x8364 <FMenuSettings+0x180>
		       break;		  
		  }
	      break;
		  
	 case msMenuSettingNextPage:
	      if (PageSetting<2)PageSetting++;
    830a:	80 91 57 01 	lds	r24, 0x0157
    830e:	82 30       	cpi	r24, 0x02	; 2
    8310:	d8 f4       	brcc	.+54     	; 0x8348 <FMenuSettings+0x164>
    8312:	8f 5f       	subi	r24, 0xFF	; 255
    8314:	05 c0       	rjmp	.+10     	; 0x8320 <FMenuSettings+0x13c>
		  stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingBackPage:
	      if (PageSetting>1)PageSetting--;
    8316:	80 91 57 01 	lds	r24, 0x0157
    831a:	82 30       	cpi	r24, 0x02	; 2
    831c:	a8 f0       	brcs	.+42     	; 0x8348 <FMenuSettings+0x164>
    831e:	81 50       	subi	r24, 0x01	; 1
    8320:	80 93 57 01 	sts	0x0157, r24
    8324:	11 c0       	rjmp	.+34     	; 0x8348 <FMenuSettings+0x164>
		  stMenuSettings=msDisplayPage;
	      break;
//---Sub Menu Operations--------------------------------------------		  
     case msMenuSettingProduct:
	      SubMenu=FSettingProduct();
    8326:	0e 94 a4 3b 	call	0x7748	; 0x7748 <FSettingProduct>
    832a:	15 c0       	rjmp	.+42     	; 0x8356 <FMenuSettings+0x172>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingPump:
	      SubMenu=FSettingPump();
    832c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <FSettingPump>
    8330:	12 c0       	rjmp	.+36     	; 0x8356 <FMenuSettings+0x172>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingDec:
	      SubMenu=FSettingDec();
    8332:	0e 94 89 20 	call	0x4112	; 0x4112 <FSettingDec>
    8336:	0f c0       	rjmp	.+30     	; 0x8356 <FMenuSettings+0x172>
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    8338:	0e 94 c0 32 	call	0x6580	; 0x6580 <_menu_datetime>
    833c:	05 c0       	rjmp	.+10     	; 0x8348 <FMenuSettings+0x164>
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    833e:	0e 94 4e 34 	call	0x689c	; 0x689c <_menu_printer>
    8342:	02 c0       	rjmp	.+4      	; 0x8348 <FMenuSettings+0x164>
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    8344:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <_menu_host>
	      SubMenu=FSettingPrinter();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingHost:
	      SubMenu=FSettingHost();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    8348:	81 e0       	ldi	r24, 0x01	; 1
    834a:	0c c0       	rjmp	.+24     	; 0x8364 <FMenuSettings+0x180>
	      break;
     case msMenuSettingOperator:
          SubMenu=FSettingOperator();
    834c:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <FSettingOperator>
    8350:	02 c0       	rjmp	.+4      	; 0x8356 <FMenuSettings+0x172>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingSystem:
	      SubMenu=FSettingSystem();
    8352:	0e 94 49 24 	call	0x4892	; 0x4892 <FSettingSystem>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    8356:	81 30       	cpi	r24, 0x01	; 1
    8358:	61 f4       	brne	.+24     	; 0x8372 <FMenuSettings+0x18e>
    835a:	04 c0       	rjmp	.+8      	; 0x8364 <FMenuSettings+0x180>
	      break;	 
     case msMenuSettingPumpPooling:
	      SubMenu=FSettingPumpPooling();
    835c:	0e 94 37 22 	call	0x446e	; 0x446e <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    8360:	81 30       	cpi	r24, 0x01	; 1
    8362:	49 f4       	brne	.+18     	; 0x8376 <FMenuSettings+0x192>
    8364:	80 93 00 03 	sts	0x0300, r24
    8368:	04 c0       	rjmp	.+8      	; 0x8372 <FMenuSettings+0x18e>
	      break;
//------------------------------------------------------------------
     case msMenuSettingExit:
	      stMenuSettings=msInit;
    836a:	10 92 00 03 	sts	0x0300, r1
	      Result=MENU_DONE;
    836e:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    8370:	08 95       	ret
}



char FMenuSettings(){
char Result=MENU_NONE;
    8372:	80 e0       	ldi	r24, 0x00	; 0
    8374:	08 95       	ret
    8376:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuSettings=msInit;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    8378:	08 95       	ret

0000837a <ScanEDCFlow>:


	 //uart(0,1,data);

     //EDC-MSG
     if (data==0x02){
    837a:	82 30       	cpi	r24, 0x02	; 2
    837c:	39 f4       	brne	.+14     	; 0x838c <ScanEDCFlow+0x12>
	     IsEDCFlow=True;
    837e:	91 e0       	ldi	r25, 0x01	; 1
    8380:	90 93 81 03 	sts	0x0381, r25
		 nFlow=0;
    8384:	10 92 80 03 	sts	0x0380, r1
    8388:	10 92 7f 03 	sts	0x037F, r1
	 }//FillMessage
     if (IsEDCFlow==True){
    838c:	90 91 81 03 	lds	r25, 0x0381
    8390:	91 30       	cpi	r25, 0x01	; 1
    8392:	71 f4       	brne	.+28     	; 0x83b0 <ScanEDCFlow+0x36>
	     rcv_trans[nFlow]=data;
    8394:	20 91 7f 03 	lds	r18, 0x037F
    8398:	30 91 80 03 	lds	r19, 0x0380
    839c:	f9 01       	movw	r30, r18
    839e:	e5 50       	subi	r30, 0x05	; 5
    83a0:	f6 4f       	sbci	r31, 0xF6	; 246
    83a2:	80 83       	st	Z, r24
		 nFlow++;
    83a4:	2f 5f       	subi	r18, 0xFF	; 255
    83a6:	3f 4f       	sbci	r19, 0xFF	; 255
    83a8:	30 93 80 03 	sts	0x0380, r19
    83ac:	20 93 7f 03 	sts	0x037F, r18
	 }//CloseMessage
	 if ((data==0x03)||(nFlow>=MSG03_LENGTH)){
    83b0:	83 30       	cpi	r24, 0x03	; 3
    83b2:	41 f0       	breq	.+16     	; 0x83c4 <ScanEDCFlow+0x4a>
    83b4:	80 91 7f 03 	lds	r24, 0x037F
    83b8:	90 91 80 03 	lds	r25, 0x0380
    83bc:	8d 34       	cpi	r24, 0x4D	; 77
    83be:	91 05       	cpc	r25, r1
    83c0:	08 f4       	brcc	.+2      	; 0x83c4 <ScanEDCFlow+0x4a>
    83c2:	7f c0       	rjmp	.+254    	; 0x84c2 <ScanEDCFlow+0x148>
	     //for(i=0;i<nFlow;i++){uart(0,1,rcv_trans[i]);}
	     IsEDCFlow=False;
    83c4:	10 92 81 03 	sts	0x0381, r1
		 EDCMsgCode=((rcv_trans[1]-'0')*10)+(rcv_trans[2]-'0');
    83c8:	80 91 fd 09 	lds	r24, 0x09FD
    83cc:	80 51       	subi	r24, 0x10	; 16
    83ce:	90 91 fc 09 	lds	r25, 0x09FC
    83d2:	99 0f       	add	r25, r25
    83d4:	29 2f       	mov	r18, r25
    83d6:	22 0f       	add	r18, r18
    83d8:	22 0f       	add	r18, r18
    83da:	29 0f       	add	r18, r25
    83dc:	82 0f       	add	r24, r18

		 if (EDCMsgCode==0x03){
    83de:	83 30       	cpi	r24, 0x03	; 3
    83e0:	09 f0       	breq	.+2      	; 0x83e4 <ScanEDCFlow+0x6a>
    83e2:	4c c0       	rjmp	.+152    	; 0x847c <ScanEDCFlow+0x102>
	         StrPosCopy(rcv_trans,strTranNo,3,6);
    83e4:	8b ef       	ldi	r24, 0xFB	; 251
    83e6:	99 e0       	ldi	r25, 0x09	; 9
    83e8:	65 e6       	ldi	r22, 0x65	; 101
    83ea:	7d e0       	ldi	r23, 0x0D	; 13
    83ec:	43 e0       	ldi	r20, 0x03	; 3
    83ee:	50 e0       	ldi	r21, 0x00	; 0
    83f0:	26 e0       	ldi	r18, 0x06	; 6
    83f2:	30 e0       	ldi	r19, 0x00	; 0
    83f4:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strFIP_ID,9,2);
    83f8:	8b ef       	ldi	r24, 0xFB	; 251
    83fa:	99 e0       	ldi	r25, 0x09	; 9
    83fc:	67 e9       	ldi	r22, 0x97	; 151
    83fe:	78 e0       	ldi	r23, 0x08	; 8
    8400:	49 e0       	ldi	r20, 0x09	; 9
    8402:	50 e0       	ldi	r21, 0x00	; 0
    8404:	22 e0       	ldi	r18, 0x02	; 2
    8406:	30 e0       	ldi	r19, 0x00	; 0
    8408:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strCardType,11,15);
    840c:	8b ef       	ldi	r24, 0xFB	; 251
    840e:	99 e0       	ldi	r25, 0x09	; 9
    8410:	61 e8       	ldi	r22, 0x81	; 129
    8412:	7d e0       	ldi	r23, 0x0D	; 13
    8414:	4b e0       	ldi	r20, 0x0B	; 11
    8416:	50 e0       	ldi	r21, 0x00	; 0
    8418:	2f e0       	ldi	r18, 0x0F	; 15
    841a:	30 e0       	ldi	r19, 0x00	; 0
    841c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strCardID,26,19);
    8420:	8b ef       	ldi	r24, 0xFB	; 251
    8422:	99 e0       	ldi	r25, 0x09	; 9
    8424:	67 e6       	ldi	r22, 0x67	; 103
    8426:	7c e0       	ldi	r23, 0x0C	; 12
    8428:	4a e1       	ldi	r20, 0x1A	; 26
    842a:	50 e0       	ldi	r21, 0x00	; 0
    842c:	23 e1       	ldi	r18, 0x13	; 19
    842e:	30 e0       	ldi	r19, 0x00	; 0
    8430:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strApprovalCode,45,6);
    8434:	8b ef       	ldi	r24, 0xFB	; 251
    8436:	99 e0       	ldi	r25, 0x09	; 9
    8438:	6e ec       	ldi	r22, 0xCE	; 206
    843a:	78 e0       	ldi	r23, 0x08	; 8
    843c:	4d e2       	ldi	r20, 0x2D	; 45
    843e:	50 e0       	ldi	r21, 0x00	; 0
    8440:	26 e0       	ldi	r18, 0x06	; 6
    8442:	30 e0       	ldi	r19, 0x00	; 0
    8444:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strInvoiceNumber,51,10);
    8448:	8b ef       	ldi	r24, 0xFB	; 251
    844a:	99 e0       	ldi	r25, 0x09	; 9
    844c:	61 e3       	ldi	r22, 0x31	; 49
    844e:	78 e0       	ldi	r23, 0x08	; 8
    8450:	43 e3       	ldi	r20, 0x33	; 51
    8452:	50 e0       	ldi	r21, 0x00	; 0
    8454:	2a e0       	ldi	r18, 0x0A	; 10
    8456:	30 e0       	ldi	r19, 0x00	; 0
    8458:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strDateTime,61,14);
    845c:	8b ef       	ldi	r24, 0xFB	; 251
    845e:	99 e0       	ldi	r25, 0x09	; 9
    8460:	6d e9       	ldi	r22, 0x9D	; 157
    8462:	7c e0       	ldi	r23, 0x0C	; 12
    8464:	4d e3       	ldi	r20, 0x3D	; 61
    8466:	50 e0       	ldi	r21, 0x00	; 0
    8468:	2e e0       	ldi	r18, 0x0E	; 14
    846a:	30 e0       	ldi	r19, 0x00	; 0
    846c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		     IsEDCApproved=True;//Sending Message 92
    8470:	81 e0       	ldi	r24, 0x01	; 1
    8472:	80 93 77 02 	sts	0x0277, r24
			 IsPrintApprovalCode=True;
    8476:	80 93 78 02 	sts	0x0278, r24
    847a:	08 95       	ret
	    }else
		 if (EDCMsgCode==0x04){
    847c:	84 30       	cpi	r24, 0x04	; 4
    847e:	09 f5       	brne	.+66     	; 0x84c2 <ScanEDCFlow+0x148>
             StrPosCopy(rcv_trans,strApprovalCode,3,6);
    8480:	8b ef       	ldi	r24, 0xFB	; 251
    8482:	99 e0       	ldi	r25, 0x09	; 9
    8484:	6e ec       	ldi	r22, 0xCE	; 206
    8486:	78 e0       	ldi	r23, 0x08	; 8
    8488:	43 e0       	ldi	r20, 0x03	; 3
    848a:	50 e0       	ldi	r21, 0x00	; 0
    848c:	26 e0       	ldi	r18, 0x06	; 6
    848e:	30 e0       	ldi	r19, 0x00	; 0
    8490:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strInvoiceNumber,9,10);
    8494:	8b ef       	ldi	r24, 0xFB	; 251
    8496:	99 e0       	ldi	r25, 0x09	; 9
    8498:	61 e3       	ldi	r22, 0x31	; 49
    849a:	78 e0       	ldi	r23, 0x08	; 8
    849c:	49 e0       	ldi	r20, 0x09	; 9
    849e:	50 e0       	ldi	r21, 0x00	; 0
    84a0:	2a e0       	ldi	r18, 0x0A	; 10
    84a2:	30 e0       	ldi	r19, 0x00	; 0
    84a4:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
             StrPosCopy(rcv_trans,strDateTime,19,14);
    84a8:	8b ef       	ldi	r24, 0xFB	; 251
    84aa:	99 e0       	ldi	r25, 0x09	; 9
    84ac:	6d e9       	ldi	r22, 0x9D	; 157
    84ae:	7c e0       	ldi	r23, 0x0C	; 12
    84b0:	43 e1       	ldi	r20, 0x13	; 19
    84b2:	50 e0       	ldi	r21, 0x00	; 0
    84b4:	2e e0       	ldi	r18, 0x0E	; 14
    84b6:	30 e0       	ldi	r19, 0x00	; 0
    84b8:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			 IsVoidTransaction=True;
    84bc:	81 e0       	ldi	r24, 0x01	; 1
    84be:	80 93 79 02 	sts	0x0279, r24
    84c2:	08 95       	ret

000084c4 <GetMessageID>:
		  }
       IsStandaloneAcknoledge=True;
	  }
}

char GetMessageID(char *strMessageFlow){
    84c4:	0f 93       	push	r16
    84c6:	1f 93       	push	r17
    84c8:	df 93       	push	r29
    84ca:	cf 93       	push	r28
    84cc:	00 d0       	rcall	.+0      	; 0x84ce <GetMessageID+0xa>
    84ce:	0f 92       	push	r0
    84d0:	cd b7       	in	r28, 0x3d	; 61
    84d2:	de b7       	in	r29, 0x3e	; 62
     char Result,strMsgID[3];
	 StrPosCopy(strMessageFlow,strMsgID,0,2);
    84d4:	8e 01       	movw	r16, r28
    84d6:	0f 5f       	subi	r16, 0xFF	; 255
    84d8:	1f 4f       	sbci	r17, 0xFF	; 255
    84da:	b8 01       	movw	r22, r16
    84dc:	40 e0       	ldi	r20, 0x00	; 0
    84de:	50 e0       	ldi	r21, 0x00	; 0
    84e0:	22 e0       	ldi	r18, 0x02	; 2
    84e2:	30 e0       	ldi	r19, 0x00	; 0
    84e4:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 RemZeroLead(strMsgID);
    84e8:	c8 01       	movw	r24, r16
    84ea:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
	 Result=atoi(strMsgID);
    84ee:	c8 01       	movw	r24, r16
    84f0:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
  return Result;
}
    84f4:	0f 90       	pop	r0
    84f6:	0f 90       	pop	r0
    84f8:	0f 90       	pop	r0
    84fa:	cf 91       	pop	r28
    84fc:	df 91       	pop	r29
    84fe:	1f 91       	pop	r17
    8500:	0f 91       	pop	r16
    8502:	08 95       	ret

00008504 <DisplayPumpStatus>:
		  break;         	 
	 }
  return Result;	 
}

void DisplayPumpStatus(){
    8504:	ef 92       	push	r14
    8506:	ff 92       	push	r15
    8508:	0f 93       	push	r16
    850a:	1f 93       	push	r17
    850c:	df 93       	push	r29
    850e:	cf 93       	push	r28
    8510:	cd b7       	in	r28, 0x3d	; 61
    8512:	de b7       	in	r29, 0x3e	; 62
    8514:	a8 97       	sbiw	r28, 0x28	; 40
    8516:	0f b6       	in	r0, 0x3f	; 63
    8518:	f8 94       	cli
    851a:	de bf       	out	0x3e, r29	; 62
    851c:	0f be       	out	0x3f, r0	; 63
    851e:	cd bf       	out	0x3d, r28	; 61
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
    8520:	80 91 01 01 	lds	r24, 0x0101
    8524:	81 30       	cpi	r24, 0x01	; 1
    8526:	b1 f5       	brne	.+108    	; 0x8594 <DisplayPumpStatus+0x90>
	     IsNewPumpStatus=False;
    8528:	10 92 01 01 	sts	0x0101, r1
		 BackLightTrig();
    852c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <BackLightTrig>
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
    8530:	20 91 3a 02 	lds	r18, 0x023A
    8534:	82 e0       	ldi	r24, 0x02	; 2
    8536:	91 e0       	ldi	r25, 0x01	; 1
    8538:	7e 01       	movw	r14, r28
    853a:	08 94       	sec
    853c:	e1 1c       	adc	r14, r1
    853e:	f1 1c       	adc	r15, r1
    8540:	b7 01       	movw	r22, r14
    8542:	40 e0       	ldi	r20, 0x00	; 0
    8544:	50 e0       	ldi	r21, 0x00	; 0
    8546:	30 e0       	ldi	r19, 0x00	; 0
    8548:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
    854c:	00 d0       	rcall	.+0      	; 0x854e <DisplayPumpStatus+0x4a>
    854e:	00 d0       	rcall	.+0      	; 0x8550 <DisplayPumpStatus+0x4c>
    8550:	00 d0       	rcall	.+0      	; 0x8552 <DisplayPumpStatus+0x4e>
    8552:	ed b7       	in	r30, 0x3d	; 61
    8554:	fe b7       	in	r31, 0x3e	; 62
    8556:	31 96       	adiw	r30, 0x01	; 1
    8558:	8e 01       	movw	r16, r28
    855a:	0b 5e       	subi	r16, 0xEB	; 235
    855c:	1f 4f       	sbci	r17, 0xFF	; 255
    855e:	ad b7       	in	r26, 0x3d	; 61
    8560:	be b7       	in	r27, 0x3e	; 62
    8562:	12 96       	adiw	r26, 0x02	; 2
    8564:	1c 93       	st	X, r17
    8566:	0e 93       	st	-X, r16
    8568:	11 97       	sbiw	r26, 0x01	; 1
    856a:	8d ec       	ldi	r24, 0xCD	; 205
    856c:	93 e2       	ldi	r25, 0x23	; 35
    856e:	93 83       	std	Z+3, r25	; 0x03
    8570:	82 83       	std	Z+2, r24	; 0x02
    8572:	f5 82       	std	Z+5, r15	; 0x05
    8574:	e4 82       	std	Z+4, r14	; 0x04
    8576:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
         lcd_print(4,1,lcdteks);
    857a:	8d b7       	in	r24, 0x3d	; 61
    857c:	9e b7       	in	r25, 0x3e	; 62
    857e:	06 96       	adiw	r24, 0x06	; 6
    8580:	0f b6       	in	r0, 0x3f	; 63
    8582:	f8 94       	cli
    8584:	9e bf       	out	0x3e, r25	; 62
    8586:	0f be       	out	0x3f, r0	; 63
    8588:	8d bf       	out	0x3d, r24	; 61
    858a:	84 e0       	ldi	r24, 0x04	; 4
    858c:	61 e0       	ldi	r22, 0x01	; 1
    858e:	a8 01       	movw	r20, r16
    8590:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
     	 }
}
    8594:	a8 96       	adiw	r28, 0x28	; 40
    8596:	0f b6       	in	r0, 0x3f	; 63
    8598:	f8 94       	cli
    859a:	de bf       	out	0x3e, r29	; 62
    859c:	0f be       	out	0x3f, r0	; 63
    859e:	cd bf       	out	0x3d, r28	; 61
    85a0:	cf 91       	pop	r28
    85a2:	df 91       	pop	r29
    85a4:	1f 91       	pop	r17
    85a6:	0f 91       	pop	r16
    85a8:	ff 90       	pop	r15
    85aa:	ef 90       	pop	r14
    85ac:	08 95       	ret

000085ae <DisplayIdle>:
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    85ae:	8f 92       	push	r8
    85b0:	9f 92       	push	r9
    85b2:	af 92       	push	r10
    85b4:	bf 92       	push	r11
    85b6:	cf 92       	push	r12
    85b8:	df 92       	push	r13
    85ba:	ef 92       	push	r14
    85bc:	ff 92       	push	r15
    85be:	0f 93       	push	r16
    85c0:	1f 93       	push	r17
    85c2:	df 93       	push	r29
    85c4:	cf 93       	push	r28
    85c6:	cd b7       	in	r28, 0x3d	; 61
    85c8:	de b7       	in	r29, 0x3e	; 62
    85ca:	67 97       	sbiw	r28, 0x17	; 23
    85cc:	0f b6       	in	r0, 0x3f	; 63
    85ce:	f8 94       	cli
    85d0:	de bf       	out	0x3e, r29	; 62
    85d2:	0f be       	out	0x3f, r0	; 63
    85d4:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoopDisplayIdle=0;
static char stDispIdle=diScan;
     char i,iDisp;
     char lcdteks[20],sFIP[3];

     iLoopDisplayIdle++;
    85d6:	80 91 60 03 	lds	r24, 0x0360
    85da:	90 91 61 03 	lds	r25, 0x0361
    85de:	01 96       	adiw	r24, 0x01	; 1
    85e0:	90 93 61 03 	sts	0x0361, r25
    85e4:	80 93 60 03 	sts	0x0360, r24
     //Setting DateTime ON

	if ((iLoopDisplayIdle%50)==0){
    85e8:	62 e3       	ldi	r22, 0x32	; 50
    85ea:	70 e0       	ldi	r23, 0x00	; 0
    85ec:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    85f0:	00 97       	sbiw	r24, 0x00	; 0
    85f2:	09 f5       	brne	.+66     	; 0x8636 <DisplayIdle+0x88>
	   if (IFType==IT_STANDALONE)DisplayPumpStatus();
    85f4:	80 91 00 01 	lds	r24, 0x0100
    85f8:	82 30       	cpi	r24, 0x02	; 2
    85fa:	11 f4       	brne	.+4      	; 0x8600 <DisplayIdle+0x52>
    85fc:	0e 94 82 42 	call	0x8504	; 0x8504 <DisplayPumpStatus>
	   if(eeprom_read_byte(&DefShowDateTime)) DisplayDateTime();
    8600:	87 e3       	ldi	r24, 0x37	; 55
    8602:	90 e0       	ldi	r25, 0x00	; 0
    8604:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    8608:	88 23       	and	r24, r24
    860a:	19 f0       	breq	.+6      	; 0x8612 <DisplayIdle+0x64>
    860c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <DisplayDateTime>
    8610:	02 c0       	rjmp	.+4      	; 0x8616 <DisplayIdle+0x68>
       else DisplayTicker();
    8612:	0e 94 34 17 	call	0x2e68	; 0x2e68 <DisplayTicker>
	   //Display Standalone Sequnece
	   
	   if((IFType==IT_STANDALONE)&&(IsNewPoolingSequence==True)){
    8616:	80 91 00 01 	lds	r24, 0x0100
    861a:	82 30       	cpi	r24, 0x02	; 2
    861c:	61 f4       	brne	.+24     	; 0x8636 <DisplayIdle+0x88>
    861e:	80 91 5f 02 	lds	r24, 0x025F
    8622:	81 30       	cpi	r24, 0x01	; 1
    8624:	41 f4       	brne	.+16     	; 0x8636 <DisplayIdle+0x88>
	       IsNewPoolingSequence=False;
    8626:	10 92 5f 02 	sts	0x025F, r1
		   DisplayStandaloneSequence(4,18,iSequencePooling);
    862a:	84 e0       	ldi	r24, 0x04	; 4
    862c:	62 e1       	ldi	r22, 0x12	; 18
    862e:	40 91 5e 02 	lds	r20, 0x025E
    8632:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <DisplayStandaloneSequence>

	 }
     //DisplayPumpStatus Standalone Mode

	 //Display Printing FIP
	 switch (stDispIdle){
    8636:	e0 90 5f 03 	lds	r14, 0x035F
    863a:	ee 20       	and	r14, r14
    863c:	29 f0       	breq	.+10     	; 0x8648 <DisplayIdle+0x9a>
    863e:	8e 2d       	mov	r24, r14
    8640:	81 30       	cpi	r24, 0x01	; 1
    8642:	09 f0       	breq	.+2      	; 0x8646 <DisplayIdle+0x98>
    8644:	58 c0       	rjmp	.+176    	; 0x86f6 <DisplayIdle+0x148>
    8646:	2f c0       	rjmp	.+94     	; 0x86a6 <DisplayIdle+0xf8>
	 case diScan:
	      if (IsBusyIdlePrinting==True){
    8648:	e0 90 90 02 	lds	r14, 0x0290
    864c:	9e 2d       	mov	r25, r14
    864e:	91 30       	cpi	r25, 0x01	; 1
    8650:	09 f0       	breq	.+2      	; 0x8654 <DisplayIdle+0xa6>
    8652:	51 c0       	rjmp	.+162    	; 0x86f6 <DisplayIdle+0x148>
		       sprintf_P(lcdteks,PSTR("Printing FIP%s "),strFIP_ID);
    8654:	00 d0       	rcall	.+0      	; 0x8656 <DisplayIdle+0xa8>
    8656:	00 d0       	rcall	.+0      	; 0x8658 <DisplayIdle+0xaa>
    8658:	00 d0       	rcall	.+0      	; 0x865a <DisplayIdle+0xac>
    865a:	ed b7       	in	r30, 0x3d	; 61
    865c:	fe b7       	in	r31, 0x3e	; 62
    865e:	31 96       	adiw	r30, 0x01	; 1
    8660:	8e 01       	movw	r16, r28
    8662:	0c 5f       	subi	r16, 0xFC	; 252
    8664:	1f 4f       	sbci	r17, 0xFF	; 255
    8666:	ad b7       	in	r26, 0x3d	; 61
    8668:	be b7       	in	r27, 0x3e	; 62
    866a:	12 96       	adiw	r26, 0x02	; 2
    866c:	1c 93       	st	X, r17
    866e:	0e 93       	st	-X, r16
    8670:	11 97       	sbiw	r26, 0x01	; 1
    8672:	87 e1       	ldi	r24, 0x17	; 23
    8674:	9e e1       	ldi	r25, 0x1E	; 30
    8676:	93 83       	std	Z+3, r25	; 0x03
    8678:	82 83       	std	Z+2, r24	; 0x02
    867a:	87 e9       	ldi	r24, 0x97	; 151
    867c:	98 e0       	ldi	r25, 0x08	; 8
    867e:	95 83       	std	Z+5, r25	; 0x05
    8680:	84 83       	std	Z+4, r24	; 0x04
    8682:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    8686:	ed b7       	in	r30, 0x3d	; 61
    8688:	fe b7       	in	r31, 0x3e	; 62
    868a:	36 96       	adiw	r30, 0x06	; 6
    868c:	0f b6       	in	r0, 0x3f	; 63
    868e:	f8 94       	cli
    8690:	fe bf       	out	0x3e, r31	; 62
    8692:	0f be       	out	0x3f, r0	; 63
    8694:	ed bf       	out	0x3d, r30	; 61
    8696:	83 e0       	ldi	r24, 0x03	; 3
    8698:	61 e0       	ldi	r22, 0x01	; 1
    869a:	a8 01       	movw	r20, r16
    869c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   stDispIdle=diWaitNoBusy;
    86a0:	e0 92 5f 03 	sts	0x035F, r14
    86a4:	28 c0       	rjmp	.+80     	; 0x86f6 <DisplayIdle+0x148>
		  }         
	      break;
     case diWaitNoBusy:
	      if (IsBusyIdlePrinting==False){
    86a6:	80 91 90 02 	lds	r24, 0x0290
    86aa:	88 23       	and	r24, r24
    86ac:	21 f5       	brne	.+72     	; 0x86f6 <DisplayIdle+0x148>
		       sprintf_P(lcdteks,PSTR("                    "));
    86ae:	00 d0       	rcall	.+0      	; 0x86b0 <DisplayIdle+0x102>
    86b0:	00 d0       	rcall	.+0      	; 0x86b2 <DisplayIdle+0x104>
    86b2:	8e 01       	movw	r16, r28
    86b4:	0c 5f       	subi	r16, 0xFC	; 252
    86b6:	1f 4f       	sbci	r17, 0xFF	; 255
    86b8:	ad b7       	in	r26, 0x3d	; 61
    86ba:	be b7       	in	r27, 0x3e	; 62
    86bc:	12 96       	adiw	r26, 0x02	; 2
    86be:	1c 93       	st	X, r17
    86c0:	0e 93       	st	-X, r16
    86c2:	11 97       	sbiw	r26, 0x01	; 1
    86c4:	82 e0       	ldi	r24, 0x02	; 2
    86c6:	9e e1       	ldi	r25, 0x1E	; 30
    86c8:	14 96       	adiw	r26, 0x04	; 4
    86ca:	9c 93       	st	X, r25
    86cc:	8e 93       	st	-X, r24
    86ce:	13 97       	sbiw	r26, 0x03	; 3
    86d0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    86d4:	0f 90       	pop	r0
    86d6:	0f 90       	pop	r0
    86d8:	0f 90       	pop	r0
    86da:	0f 90       	pop	r0
    86dc:	83 e0       	ldi	r24, 0x03	; 3
    86de:	61 e0       	ldi	r22, 0x01	; 1
    86e0:	a8 01       	movw	r20, r16
    86e2:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   stDispIdle=diScan;
    86e6:	10 92 5f 03 	sts	0x035F, r1
			   if (nLocalAccount>0)IsViewFillingFIP=True;
    86ea:	80 91 6d 02 	lds	r24, 0x026D
    86ee:	88 23       	and	r24, r24
    86f0:	11 f0       	breq	.+4      	; 0x86f6 <DisplayIdle+0x148>
    86f2:	e0 92 74 02 	sts	0x0274, r14
		  }
	      break;     
	 }
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
    86f6:	80 91 74 02 	lds	r24, 0x0274
    86fa:	81 30       	cpi	r24, 0x01	; 1
    86fc:	09 f0       	breq	.+2      	; 0x8700 <DisplayIdle+0x152>
    86fe:	62 c0       	rjmp	.+196    	; 0x87c4 <DisplayIdle+0x216>
	     IsViewFillingFIP=False;
    8700:	10 92 74 02 	sts	0x0274, r1
		 if (nLocalAccount>0){
    8704:	80 91 6d 02 	lds	r24, 0x026D
    8708:	88 23       	and	r24, r24
    870a:	09 f4       	brne	.+2      	; 0x870e <DisplayIdle+0x160>
    870c:	55 c0       	rjmp	.+170    	; 0x87b8 <DisplayIdle+0x20a>
		     lcd_printf(3,1,PSTR("@FIP:"));
    870e:	83 e0       	ldi	r24, 0x03	; 3
    8710:	61 e0       	ldi	r22, 0x01	; 1
    8712:	4c ef       	ldi	r20, 0xFC	; 252
    8714:	5d e1       	ldi	r21, 0x1D	; 29
    8716:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    871a:	26 e0       	ldi	r18, 0x06	; 6
    871c:	82 2e       	mov	r8, r18
    871e:	99 24       	eor	r9, r9
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    8720:	8e 01       	movw	r16, r28
    8722:	0f 5f       	subi	r16, 0xFF	; 255
    8724:	1f 4f       	sbci	r17, 0xFF	; 255
    8726:	97 ef       	ldi	r25, 0xF7	; 247
    8728:	c9 2e       	mov	r12, r25
    872a:	9d e1       	ldi	r25, 0x1D	; 29
    872c:	d9 2e       	mov	r13, r25
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    872e:	84 e0       	ldi	r24, 0x04	; 4
    8730:	e8 2e       	mov	r14, r24
    8732:	f1 2c       	mov	r15, r1
    8734:	ec 0e       	add	r14, r28
    8736:	fd 1e       	adc	r15, r29
    8738:	b3 ef       	ldi	r27, 0xF3	; 243
    873a:	ab 2e       	mov	r10, r27
    873c:	bd e1       	ldi	r27, 0x1D	; 29
    873e:	bb 2e       	mov	r11, r27
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    8740:	36 c0       	rjmp	.+108    	; 0x87ae <DisplayIdle+0x200>
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    8742:	00 d0       	rcall	.+0      	; 0x8744 <DisplayIdle+0x196>
    8744:	00 d0       	rcall	.+0      	; 0x8746 <DisplayIdle+0x198>
    8746:	00 d0       	rcall	.+0      	; 0x8748 <DisplayIdle+0x19a>
    8748:	ed b7       	in	r30, 0x3d	; 61
    874a:	fe b7       	in	r31, 0x3e	; 62
    874c:	31 96       	adiw	r30, 0x01	; 1
    874e:	ad b7       	in	r26, 0x3d	; 61
    8750:	be b7       	in	r27, 0x3e	; 62
    8752:	12 96       	adiw	r26, 0x02	; 2
    8754:	1c 93       	st	X, r17
    8756:	0e 93       	st	-X, r16
    8758:	11 97       	sbiw	r26, 0x01	; 1
    875a:	d3 82       	std	Z+3, r13	; 0x03
    875c:	c2 82       	std	Z+2, r12	; 0x02
    875e:	a9 2d       	mov	r26, r9
    8760:	b0 e0       	ldi	r27, 0x00	; 0
    8762:	ac 5c       	subi	r26, 0xCC	; 204
    8764:	bb 4f       	sbci	r27, 0xFB	; 251
    8766:	8c 91       	ld	r24, X
    8768:	84 83       	std	Z+4, r24	; 0x04
    876a:	15 82       	std	Z+5, r1	; 0x05
    876c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    8770:	ed b7       	in	r30, 0x3d	; 61
    8772:	fe b7       	in	r31, 0x3e	; 62
    8774:	31 96       	adiw	r30, 0x01	; 1
    8776:	ad b7       	in	r26, 0x3d	; 61
    8778:	be b7       	in	r27, 0x3e	; 62
    877a:	12 96       	adiw	r26, 0x02	; 2
    877c:	fc 92       	st	X, r15
    877e:	ee 92       	st	-X, r14
    8780:	11 97       	sbiw	r26, 0x01	; 1
    8782:	b3 82       	std	Z+3, r11	; 0x03
    8784:	a2 82       	std	Z+2, r10	; 0x02
    8786:	15 83       	std	Z+5, r17	; 0x05
    8788:	04 83       	std	Z+4, r16	; 0x04
    878a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			      lcd_print(3,6+(iDisp*3),lcdteks);
    878e:	ed b7       	in	r30, 0x3d	; 61
    8790:	fe b7       	in	r31, 0x3e	; 62
    8792:	36 96       	adiw	r30, 0x06	; 6
    8794:	0f b6       	in	r0, 0x3f	; 63
    8796:	f8 94       	cli
    8798:	fe bf       	out	0x3e, r31	; 62
    879a:	0f be       	out	0x3f, r0	; 63
    879c:	ed bf       	out	0x3d, r30	; 61
    879e:	83 e0       	ldi	r24, 0x03	; 3
    87a0:	68 2d       	mov	r22, r8
    87a2:	a7 01       	movw	r20, r14
    87a4:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    87a8:	93 94       	inc	r9
    87aa:	f3 e0       	ldi	r31, 0x03	; 3
    87ac:	8f 0e       	add	r8, r31
    87ae:	80 91 6d 02 	lds	r24, 0x026D
    87b2:	98 16       	cp	r9, r24
    87b4:	30 f2       	brcs	.-116    	; 0x8742 <DisplayIdle+0x194>
    87b6:	06 c0       	rjmp	.+12     	; 0x87c4 <DisplayIdle+0x216>
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
			      lcd_print(3,6+(iDisp*3),lcdteks);
		     }
		 }else{
		 lcd_printf(3,1,PSTR("                    "));
    87b8:	83 e0       	ldi	r24, 0x03	; 3
    87ba:	61 e0       	ldi	r22, 0x01	; 1
    87bc:	4e ed       	ldi	r20, 0xDE	; 222
    87be:	5d e1       	ldi	r21, 0x1D	; 29
    87c0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 }    
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
    87c4:	80 91 87 02 	lds	r24, 0x0287
    87c8:	81 30       	cpi	r24, 0x01	; 1
    87ca:	c1 f4       	brne	.+48     	; 0x87fc <DisplayIdle+0x24e>
	     IsCompleteFilling=False;
    87cc:	10 92 87 02 	sts	0x0287, r1
	     if (nLocalAccount>0){
    87d0:	20 91 6d 02 	lds	r18, 0x026D
    87d4:	22 23       	and	r18, r18
    87d6:	91 f0       	breq	.+36     	; 0x87fc <DisplayIdle+0x24e>
    87d8:	e4 e3       	ldi	r30, 0x34	; 52
    87da:	f4 e0       	ldi	r31, 0x04	; 4
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    87dc:	82 2f       	mov	r24, r18
    87de:	90 e0       	ldi	r25, 0x00	; 0
    87e0:	8e 0f       	add	r24, r30
    87e2:	9f 1f       	adc	r25, r31
    87e4:	02 c0       	rjmp	.+4      	; 0x87ea <DisplayIdle+0x23c>
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
    87e6:	31 81       	ldd	r19, Z+1	; 0x01
    87e8:	31 93       	st	Z+, r19
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
    87ea:	e8 17       	cp	r30, r24
    87ec:	f9 07       	cpc	r31, r25
    87ee:	d9 f7       	brne	.-10     	; 0x87e6 <DisplayIdle+0x238>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
			 }
			 nLocalAccount--;
    87f0:	21 50       	subi	r18, 0x01	; 1
    87f2:	20 93 6d 02 	sts	0x026D, r18
             IsViewFillingFIP=True; 
    87f6:	81 e0       	ldi	r24, 0x01	; 1
    87f8:	80 93 74 02 	sts	0x0274, r24
		 }
	 }
}
    87fc:	67 96       	adiw	r28, 0x17	; 23
    87fe:	0f b6       	in	r0, 0x3f	; 63
    8800:	f8 94       	cli
    8802:	de bf       	out	0x3e, r29	; 62
    8804:	0f be       	out	0x3f, r0	; 63
    8806:	cd bf       	out	0x3d, r28	; 61
    8808:	cf 91       	pop	r28
    880a:	df 91       	pop	r29
    880c:	1f 91       	pop	r17
    880e:	0f 91       	pop	r16
    8810:	ff 90       	pop	r15
    8812:	ef 90       	pop	r14
    8814:	df 90       	pop	r13
    8816:	cf 90       	pop	r12
    8818:	bf 90       	pop	r11
    881a:	af 90       	pop	r10
    881c:	9f 90       	pop	r9
    881e:	8f 90       	pop	r8
    8820:	08 95       	ret

00008822 <StrPosPaste>:
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    8822:	1f 93       	push	r17
unsigned int i;
     for(i=0;i<Length;i++){
    8824:	e8 2f       	mov	r30, r24
    8826:	f9 2f       	mov	r31, r25
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    8828:	db 01       	movw	r26, r22
    882a:	a4 0f       	add	r26, r20
    882c:	b5 1f       	adc	r27, r21
unsigned int i;
     for(i=0;i<Length;i++){
    882e:	80 e0       	ldi	r24, 0x00	; 0
    8830:	90 e0       	ldi	r25, 0x00	; 0
    8832:	03 c0       	rjmp	.+6      	; 0x883a <StrPosPaste+0x18>
	    Dest[IdxSource+i]=Source[i];
    8834:	11 91       	ld	r17, Z+
    8836:	1d 93       	st	X+, r17
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8838:	01 96       	adiw	r24, 0x01	; 1
    883a:	82 17       	cp	r24, r18
    883c:	93 07       	cpc	r25, r19
    883e:	d0 f3       	brcs	.-12     	; 0x8834 <StrPosPaste+0x12>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
    8840:	64 0f       	add	r22, r20
    8842:	75 1f       	adc	r23, r21
    8844:	62 0f       	add	r22, r18
    8846:	73 1f       	adc	r23, r19
    8848:	fb 01       	movw	r30, r22
    884a:	10 82       	st	Z, r1
}
    884c:	1f 91       	pop	r17
    884e:	08 95       	ret

00008850 <GenerateGeniusCode>:
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
}

void GenerateGeniusCode(char *srcDate, char cSeed, char *strDestCode){
    8850:	9f 92       	push	r9
    8852:	af 92       	push	r10
    8854:	bf 92       	push	r11
    8856:	cf 92       	push	r12
    8858:	df 92       	push	r13
    885a:	ef 92       	push	r14
    885c:	ff 92       	push	r15
    885e:	0f 93       	push	r16
    8860:	1f 93       	push	r17
    8862:	df 93       	push	r29
    8864:	cf 93       	push	r28
    8866:	cd b7       	in	r28, 0x3d	; 61
    8868:	de b7       	in	r29, 0x3e	; 62
    886a:	28 97       	sbiw	r28, 0x08	; 8
    886c:	0f b6       	in	r0, 0x3f	; 63
    886e:	f8 94       	cli
    8870:	de bf       	out	0x3e, r29	; 62
    8872:	0f be       	out	0x3f, r0	; 63
    8874:	cd bf       	out	0x3d, r28	; 61
    8876:	7c 01       	movw	r14, r24
    8878:	96 2e       	mov	r9, r22
    887a:	6a 01       	movw	r12, r20
	    sprintf_P(strSend,PSTR("Date[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif
    

	 StrPosCopy(srcDate,AddYear,strlen(srcDate)-2,2);
    887c:	dc 01       	movw	r26, r24
    887e:	0d 90       	ld	r0, X+
    8880:	00 20       	and	r0, r0
    8882:	e9 f7       	brne	.-6      	; 0x887e <GenerateGeniusCode+0x2e>
    8884:	ad 01       	movw	r20, r26
    8886:	48 1b       	sub	r20, r24
    8888:	59 0b       	sbc	r21, r25
    888a:	43 50       	subi	r20, 0x03	; 3
    888c:	50 40       	sbci	r21, 0x00	; 0
    888e:	5e 01       	movw	r10, r28
    8890:	08 94       	sec
    8892:	a1 1c       	adc	r10, r1
    8894:	b1 1c       	adc	r11, r1
    8896:	b5 01       	movw	r22, r10
    8898:	22 e0       	ldi	r18, 0x02	; 2
    889a:	30 e0       	ldi	r19, 0x00	; 0
    889c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
    #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("Year:[%s]"),AddYear);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(SYear,PSTR("20%s"),AddYear);
    88a0:	00 d0       	rcall	.+0      	; 0x88a2 <GenerateGeniusCode+0x52>
    88a2:	00 d0       	rcall	.+0      	; 0x88a4 <GenerateGeniusCode+0x54>
    88a4:	00 d0       	rcall	.+0      	; 0x88a6 <GenerateGeniusCode+0x56>
    88a6:	ed b7       	in	r30, 0x3d	; 61
    88a8:	fe b7       	in	r31, 0x3e	; 62
    88aa:	31 96       	adiw	r30, 0x01	; 1
    88ac:	8e 01       	movw	r16, r28
    88ae:	0c 5f       	subi	r16, 0xFC	; 252
    88b0:	1f 4f       	sbci	r17, 0xFF	; 255
    88b2:	ad b7       	in	r26, 0x3d	; 61
    88b4:	be b7       	in	r27, 0x3e	; 62
    88b6:	12 96       	adiw	r26, 0x02	; 2
    88b8:	1c 93       	st	X, r17
    88ba:	0e 93       	st	-X, r16
    88bc:	11 97       	sbiw	r26, 0x01	; 1
    88be:	83 ed       	ldi	r24, 0xD3	; 211
    88c0:	99 e1       	ldi	r25, 0x19	; 25
    88c2:	93 83       	std	Z+3, r25	; 0x03
    88c4:	82 83       	std	Z+2, r24	; 0x02
    88c6:	b5 82       	std	Z+5, r11	; 0x05
    88c8:	a4 82       	std	Z+4, r10	; 0x04
    88ca:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 StrPosPaste(SYear,srcDate,strlen(srcDate)-2,strlen(SYear));
    88ce:	d7 01       	movw	r26, r14
    88d0:	0d 90       	ld	r0, X+
    88d2:	00 20       	and	r0, r0
    88d4:	e9 f7       	brne	.-6      	; 0x88d0 <GenerateGeniusCode+0x80>
    88d6:	ad 01       	movw	r20, r26
    88d8:	4e 19       	sub	r20, r14
    88da:	5f 09       	sbc	r21, r15
    88dc:	f8 01       	movw	r30, r16
    88de:	01 90       	ld	r0, Z+
    88e0:	00 20       	and	r0, r0
    88e2:	e9 f7       	brne	.-6      	; 0x88de <GenerateGeniusCode+0x8e>
    88e4:	9f 01       	movw	r18, r30
    88e6:	21 50       	subi	r18, 0x01	; 1
    88e8:	30 40       	sbci	r19, 0x00	; 0
    88ea:	20 1b       	sub	r18, r16
    88ec:	31 0b       	sbc	r19, r17
    88ee:	8d b7       	in	r24, 0x3d	; 61
    88f0:	9e b7       	in	r25, 0x3e	; 62
    88f2:	06 96       	adiw	r24, 0x06	; 6
    88f4:	0f b6       	in	r0, 0x3f	; 63
    88f6:	f8 94       	cli
    88f8:	9e bf       	out	0x3e, r25	; 62
    88fa:	0f be       	out	0x3f, r0	; 63
    88fc:	8d bf       	out	0x3d, r24	; 61
    88fe:	43 50       	subi	r20, 0x03	; 3
    8900:	50 40       	sbci	r21, 0x00	; 0
    8902:	c8 01       	movw	r24, r16
    8904:	b7 01       	movw	r22, r14
    8906:	0e 94 11 44 	call	0x8822	; 0x8822 <StrPosPaste>
	 #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("NewDate[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
    890a:	00 d0       	rcall	.+0      	; 0x890c <GenerateGeniusCode+0xbc>
    890c:	00 d0       	rcall	.+0      	; 0x890e <GenerateGeniusCode+0xbe>
    890e:	00 d0       	rcall	.+0      	; 0x8910 <GenerateGeniusCode+0xc0>
    8910:	ed b7       	in	r30, 0x3d	; 61
    8912:	fe b7       	in	r31, 0x3e	; 62
    8914:	31 96       	adiw	r30, 0x01	; 1
    8916:	ad b7       	in	r26, 0x3d	; 61
    8918:	be b7       	in	r27, 0x3e	; 62
    891a:	12 96       	adiw	r26, 0x02	; 2
    891c:	dc 92       	st	X, r13
    891e:	ce 92       	st	-X, r12
    8920:	11 97       	sbiw	r26, 0x01	; 1
    8922:	80 ed       	ldi	r24, 0xD0	; 208
    8924:	99 e1       	ldi	r25, 0x19	; 25
    8926:	93 83       	std	Z+3, r25	; 0x03
    8928:	82 83       	std	Z+2, r24	; 0x02
    892a:	94 82       	std	Z+4, r9	; 0x04
    892c:	15 82       	std	Z+5, r1	; 0x05
    892e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    8932:	ed b7       	in	r30, 0x3d	; 61
    8934:	fe b7       	in	r31, 0x3e	; 62
    8936:	36 96       	adiw	r30, 0x06	; 6
    8938:	0f b6       	in	r0, 0x3f	; 63
    893a:	f8 94       	cli
    893c:	fe bf       	out	0x3e, r31	; 62
    893e:	0f be       	out	0x3f, r0	; 63
    8940:	ed bf       	out	0x3d, r30	; 61
    8942:	aa 24       	eor	r10, r10
    8944:	a3 94       	inc	r10
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    8946:	f0 ed       	ldi	r31, 0xD0	; 208
    8948:	9f 0e       	add	r9, r31
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    894a:	0f c0       	rjmp	.+30     	; 0x896a <GenerateGeniusCode+0x11a>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    894c:	f7 01       	movw	r30, r14
    894e:	e0 0f       	add	r30, r16
    8950:	f1 1f       	adc	r31, r17
    8952:	40 81       	ld	r20, Z
    8954:	40 53       	subi	r20, 0x30	; 48
    8956:	80 e0       	ldi	r24, 0x00	; 0
    8958:	69 2d       	mov	r22, r9
    895a:	0e 94 9c 19 	call	0x3338	; 0x3338 <GeniusCalc>
    895e:	f6 01       	movw	r30, r12
    8960:	e0 0f       	add	r30, r16
    8962:	f1 1f       	adc	r31, r17
    8964:	80 5d       	subi	r24, 0xD0	; 208
    8966:	80 83       	st	Z, r24
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    8968:	a3 94       	inc	r10
    896a:	0a 2d       	mov	r16, r10
    896c:	10 e0       	ldi	r17, 0x00	; 0
    896e:	f7 01       	movw	r30, r14
    8970:	01 90       	ld	r0, Z+
    8972:	00 20       	and	r0, r0
    8974:	e9 f7       	brne	.-6      	; 0x8970 <GenerateGeniusCode+0x120>
    8976:	31 97       	sbiw	r30, 0x01	; 1
    8978:	ee 19       	sub	r30, r14
    897a:	ff 09       	sbc	r31, r15
    897c:	0e 17       	cp	r16, r30
    897e:	1f 07       	cpc	r17, r31
    8980:	28 f3       	brcs	.-54     	; 0x894c <GenerateGeniusCode+0xfc>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
	 }strDestCode[strlen(srcDate)]=0;
    8982:	ec 0d       	add	r30, r12
    8984:	fd 1d       	adc	r31, r13
    8986:	10 82       	st	Z, r1
	 #ifdef DEBUG_GENIUS_CODE
       sprintf_P(strSend,PSTR("1st:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif

	 WrapCode(strDestCode);
    8988:	c6 01       	movw	r24, r12
    898a:	0e 94 bc 19 	call	0x3378	; 0x3378 <WrapCode>
	 #ifdef DEBUG_GENIUS_CODE
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}
    898e:	28 96       	adiw	r28, 0x08	; 8
    8990:	0f b6       	in	r0, 0x3f	; 63
    8992:	f8 94       	cli
    8994:	de bf       	out	0x3e, r29	; 62
    8996:	0f be       	out	0x3f, r0	; 63
    8998:	cd bf       	out	0x3d, r28	; 61
    899a:	cf 91       	pop	r28
    899c:	df 91       	pop	r29
    899e:	1f 91       	pop	r17
    89a0:	0f 91       	pop	r16
    89a2:	ff 90       	pop	r15
    89a4:	ef 90       	pop	r14
    89a6:	df 90       	pop	r13
    89a8:	cf 90       	pop	r12
    89aa:	bf 90       	pop	r11
    89ac:	af 90       	pop	r10
    89ae:	9f 90       	pop	r9
    89b0:	08 95       	ret

000089b2 <ValidateGeniusCode>:
          }
	 }sTemp[iAdd]=0;
	 sprintf_P(strSource,PSTR("%s"),sTemp);
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
    89b2:	ef 92       	push	r14
    89b4:	ff 92       	push	r15
    89b6:	0f 93       	push	r16
    89b8:	1f 93       	push	r17
    89ba:	df 93       	push	r29
    89bc:	cf 93       	push	r28
    89be:	cd b7       	in	r28, 0x3d	; 61
    89c0:	de b7       	in	r29, 0x3e	; 62
    89c2:	2a 97       	sbiw	r28, 0x0a	; 10
    89c4:	0f b6       	in	r0, 0x3f	; 63
    89c6:	f8 94       	cli
    89c8:	de bf       	out	0x3e, r29	; 62
    89ca:	0f be       	out	0x3f, r0	; 63
    89cc:	cd bf       	out	0x3d, r28	; 61
    89ce:	7b 01       	movw	r14, r22

         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("[%s]"),sGenCode); 
         uart_print(1,1,strSend);
		 #endif
	 if (strlen(sGenCode)==8){//Length musti  8
    89d0:	db 01       	movw	r26, r22
    89d2:	0d 90       	ld	r0, X+
    89d4:	00 20       	and	r0, r0
    89d6:	e9 f7       	brne	.-6      	; 0x89d2 <ValidateGeniusCode+0x20>
    89d8:	19 97       	sbiw	r26, 0x09	; 9
    89da:	a6 17       	cp	r26, r22
    89dc:	b7 07       	cpc	r27, r23
    89de:	81 f4       	brne	.+32     	; 0x8a00 <ValidateGeniusCode+0x4e>
	     //sDate: 05012001		 
		 GenerateGeniusCode(sDate,sGenCode[0],sAutoGen);
    89e0:	fb 01       	movw	r30, r22
    89e2:	60 81       	ld	r22, Z
    89e4:	8e 01       	movw	r16, r28
    89e6:	0f 5f       	subi	r16, 0xFF	; 255
    89e8:	1f 4f       	sbci	r17, 0xFF	; 255
    89ea:	a8 01       	movw	r20, r16
    89ec:	0e 94 28 44 	call	0x8850	; 0x8850 <GenerateGeniusCode>
         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("%s|%s"),sAutoGen,sGenCode); 
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
    89f0:	c8 01       	movw	r24, r16
    89f2:	b7 01       	movw	r22, r14
    89f4:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    89f8:	00 97       	sbiw	r24, 0x00	; 0
    89fa:	21 f4       	brne	.+8      	; 0x8a04 <ValidateGeniusCode+0x52>
	        Result=GC_VALID;	 
    89fc:	81 e0       	ldi	r24, 0x01	; 1
    89fe:	03 c0       	rjmp	.+6      	; 0x8a06 <ValidateGeniusCode+0x54>
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
     char Result=GC_NONE;
	 char sAutoGen[10],strSend[20];
     Result=GC_NONE;
    8a00:	80 e0       	ldi	r24, 0x00	; 0
    8a02:	01 c0       	rjmp	.+2      	; 0x8a06 <ValidateGeniusCode+0x54>
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
	        Result=GC_VALID;	 
         else Result=GC_INVALID;
    8a04:	82 e0       	ldi	r24, 0x02	; 2
	 }


   return Result;
}
    8a06:	2a 96       	adiw	r28, 0x0a	; 10
    8a08:	0f b6       	in	r0, 0x3f	; 63
    8a0a:	f8 94       	cli
    8a0c:	de bf       	out	0x3e, r29	; 62
    8a0e:	0f be       	out	0x3f, r0	; 63
    8a10:	cd bf       	out	0x3d, r28	; 61
    8a12:	cf 91       	pop	r28
    8a14:	df 91       	pop	r29
    8a16:	1f 91       	pop	r17
    8a18:	0f 91       	pop	r16
    8a1a:	ff 90       	pop	r15
    8a1c:	ef 90       	pop	r14
    8a1e:	08 95       	ret

00008a20 <CharPosCopy>:
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    8a20:	68 0f       	add	r22, r24
    8a22:	79 1f       	adc	r23, r25
	 return Result;
}
    8a24:	fb 01       	movw	r30, r22
    8a26:	80 81       	ld	r24, Z
    8a28:	08 95       	ret

00008a2a <procMessage00>:
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
    8a2a:	80 91 fb 09 	lds	r24, 0x09FB
    8a2e:	81 30       	cpi	r24, 0x01	; 1
    8a30:	59 f4       	brne	.+22     	; 0x8a48 <procMessage00+0x1e>
    8a32:	80 91 69 02 	lds	r24, 0x0269
    8a36:	90 91 6a 02 	lds	r25, 0x026A
    8a3a:	8f 32       	cpi	r24, 0x2F	; 47
    8a3c:	91 05       	cpc	r25, r1
    8a3e:	31 f4       	brne	.+12     	; 0x8a4c <procMessage00+0x22>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
    8a40:	80 91 20 0a 	lds	r24, 0x0A20
    8a44:	80 53       	subi	r24, 0x30	; 48
    8a46:	08 95       	ret
				MSG00_NEW_PRICE,MSG00_SALE_INFO,MSG00_INVALID_PRODUCT,
				MSG00_SALES_PORT
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
    8a48:	80 e0       	ldi	r24, 0x00	; 0
    8a4a:	08 95       	ret
    8a4c:	80 e0       	ldi	r24, 0x00	; 0
		 //sprintf(strSend,"R=%d",Result);
		 //uart_print(0,1,strSend);
		 //*/
		 }
     return Result;
}
    8a4e:	08 95       	ret

00008a50 <SaveToEEPROM>:



char SaveToEEPROM(char *Src,char *Dest,unsigned int Length){
    8a50:	ef 92       	push	r14
    8a52:	ff 92       	push	r15
    8a54:	0f 93       	push	r16
    8a56:	1f 93       	push	r17
    8a58:	df 93       	push	r29
    8a5a:	cf 93       	push	r28
    8a5c:	cd b7       	in	r28, 0x3d	; 61
    8a5e:	de b7       	in	r29, 0x3e	; 62
    8a60:	ac 97       	sbiw	r28, 0x2c	; 44
    8a62:	0f b6       	in	r0, 0x3f	; 63
    8a64:	f8 94       	cli
    8a66:	de bf       	out	0x3e, r29	; 62
    8a68:	0f be       	out	0x3f, r0	; 63
    8a6a:	cd bf       	out	0x3d, r28	; 61
    8a6c:	9a a7       	std	Y+42, r25	; 0x2a
    8a6e:	89 a7       	std	Y+41, r24	; 0x29
    8a70:	7c a7       	std	Y+44, r23	; 0x2c
    8a72:	6b a7       	std	Y+43, r22	; 0x2b
    8a74:	7a 01       	movw	r14, r20
     char strCompare[40];
	 //Read Previous Data
     eeprom_read_block((void*)&Dest,(const void*)&strCompare, Length);
    8a76:	8e 01       	movw	r16, r28
    8a78:	05 5d       	subi	r16, 0xD5	; 213
    8a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    8a7c:	c8 01       	movw	r24, r16
    8a7e:	be 01       	movw	r22, r28
    8a80:	6f 5f       	subi	r22, 0xFF	; 255
    8a82:	7f 4f       	sbci	r23, 0xFF	; 255
    8a84:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
     //if 
     eeprom_write_block((const void*)&Src,(void*)&Dest, Length);
    8a88:	ce 01       	movw	r24, r28
    8a8a:	89 96       	adiw	r24, 0x29	; 41
    8a8c:	b8 01       	movw	r22, r16
    8a8e:	a7 01       	movw	r20, r14
    8a90:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
}
    8a94:	ac 96       	adiw	r28, 0x2c	; 44
    8a96:	0f b6       	in	r0, 0x3f	; 63
    8a98:	f8 94       	cli
    8a9a:	de bf       	out	0x3e, r29	; 62
    8a9c:	0f be       	out	0x3f, r0	; 63
    8a9e:	cd bf       	out	0x3d, r28	; 61
    8aa0:	cf 91       	pop	r28
    8aa2:	df 91       	pop	r29
    8aa4:	1f 91       	pop	r17
    8aa6:	0f 91       	pop	r16
    8aa8:	ff 90       	pop	r15
    8aaa:	ef 90       	pop	r14
    8aac:	08 95       	ret

00008aae <procMessage09>:

char procMessage09(){
    8aae:	1f 93       	push	r17
    8ab0:	cf 93       	push	r28
    8ab2:	df 93       	push	r29
     char Result;
     Result=(CharPosCopy(rcv_trans,39)-'0');
    8ab4:	10 91 22 0a 	lds	r17, 0x0A22
    8ab8:	10 53       	subi	r17, 0x30	; 48
       StrPosCopy(rcv_trans,strFreeMessageLine1,39,20);
    8aba:	cb ef       	ldi	r28, 0xFB	; 251
    8abc:	d9 e0       	ldi	r29, 0x09	; 9
    8abe:	ce 01       	movw	r24, r28
    8ac0:	60 e7       	ldi	r22, 0x70	; 112
    8ac2:	79 e0       	ldi	r23, 0x09	; 9
    8ac4:	47 e2       	ldi	r20, 0x27	; 39
    8ac6:	50 e0       	ldi	r21, 0x00	; 0
    8ac8:	24 e1       	ldi	r18, 0x14	; 20
    8aca:	30 e0       	ldi	r19, 0x00	; 0
    8acc:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strFreeMessageLine2,59,20);
    8ad0:	ce 01       	movw	r24, r28
    8ad2:	61 e8       	ldi	r22, 0x81	; 129
    8ad4:	78 e0       	ldi	r23, 0x08	; 8
    8ad6:	4b e3       	ldi	r20, 0x3B	; 59
    8ad8:	50 e0       	ldi	r21, 0x00	; 0
    8ada:	24 e1       	ldi	r18, 0x14	; 20
    8adc:	30 e0       	ldi	r19, 0x00	; 0
    8ade:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
    8ae2:	ce 01       	movw	r24, r28
    8ae4:	6a ee       	ldi	r22, 0xEA	; 234
    8ae6:	78 e0       	ldi	r23, 0x08	; 8
    8ae8:	4f e4       	ldi	r20, 0x4F	; 79
    8aea:	50 e0       	ldi	r21, 0x00	; 0
    8aec:	24 e1       	ldi	r18, 0x14	; 20
    8aee:	30 e0       	ldi	r19, 0x00	; 0
    8af0:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
    8af4:	ce 01       	movw	r24, r28
    8af6:	64 eb       	ldi	r22, 0xB4	; 180
    8af8:	7c e0       	ldi	r23, 0x0C	; 12
    8afa:	43 e6       	ldi	r20, 0x63	; 99
    8afc:	50 e0       	ldi	r21, 0x00	; 0
    8afe:	24 e1       	ldi	r18, 0x14	; 20
    8b00:	30 e0       	ldi	r19, 0x00	; 0
    8b02:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 return Result;
}
    8b06:	81 2f       	mov	r24, r17
    8b08:	df 91       	pop	r29
    8b0a:	cf 91       	pop	r28
    8b0c:	1f 91       	pop	r17
    8b0e:	08 95       	ret

00008b10 <procMessage21>:

char procMessage21(){
    8b10:	cf 92       	push	r12
    8b12:	df 92       	push	r13
    8b14:	ef 92       	push	r14
    8b16:	ff 92       	push	r15
    8b18:	0f 93       	push	r16
    8b1a:	1f 93       	push	r17
    8b1c:	df 93       	push	r29
    8b1e:	cf 93       	push	r28
    8b20:	cd b7       	in	r28, 0x3d	; 61
    8b22:	de b7       	in	r29, 0x3e	; 62
    8b24:	2b 97       	sbiw	r28, 0x0b	; 11
    8b26:	0f b6       	in	r0, 0x3f	; 63
    8b28:	f8 94       	cli
    8b2a:	de bf       	out	0x3e, r29	; 62
    8b2c:	0f be       	out	0x3f, r0	; 63
    8b2e:	cd bf       	out	0x3d, r28	; 61
    8b30:	39 e0       	ldi	r19, 0x09	; 9
    8b32:	e3 2e       	mov	r14, r19
    8b34:	31 e0       	ldi	r19, 0x01	; 1
    8b36:	f3 2e       	mov	r15, r19
    8b38:	05 e2       	ldi	r16, 0x25	; 37
    8b3a:	10 e0       	ldi	r17, 0x00	; 0
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
    8b3c:	6e 01       	movw	r12, r28
    8b3e:	08 94       	sec
    8b40:	c1 1c       	adc	r12, r1
    8b42:	d1 1c       	adc	r13, r1
    8b44:	8b ef       	ldi	r24, 0xFB	; 251
    8b46:	99 e0       	ldi	r25, 0x09	; 9
    8b48:	b6 01       	movw	r22, r12
    8b4a:	a8 01       	movw	r20, r16
    8b4c:	2a e0       	ldi	r18, 0x0A	; 10
    8b4e:	30 e0       	ldi	r19, 0x00	; 0
    8b50:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
    8b54:	c6 01       	movw	r24, r12
    8b56:	b7 01       	movw	r22, r14
    8b58:	4b e0       	ldi	r20, 0x0B	; 11
    8b5a:	50 e0       	ldi	r21, 0x00	; 0
    8b5c:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    8b60:	06 5f       	subi	r16, 0xF6	; 246
    8b62:	1f 4f       	sbci	r17, 0xFF	; 255
    8b64:	8b e0       	ldi	r24, 0x0B	; 11
    8b66:	90 e0       	ldi	r25, 0x00	; 0
    8b68:	e8 0e       	add	r14, r24
    8b6a:	f9 1e       	adc	r15, r25
}

char procMessage21(){
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
    8b6c:	0d 34       	cpi	r16, 0x4D	; 77
    8b6e:	11 05       	cpc	r17, r1
    8b70:	49 f7       	brne	.-46     	; 0x8b44 <procMessage21+0x34>
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}
    8b72:	80 e0       	ldi	r24, 0x00	; 0
    8b74:	2b 96       	adiw	r28, 0x0b	; 11
    8b76:	0f b6       	in	r0, 0x3f	; 63
    8b78:	f8 94       	cli
    8b7a:	de bf       	out	0x3e, r29	; 62
    8b7c:	0f be       	out	0x3f, r0	; 63
    8b7e:	cd bf       	out	0x3d, r28	; 61
    8b80:	cf 91       	pop	r28
    8b82:	df 91       	pop	r29
    8b84:	1f 91       	pop	r17
    8b86:	0f 91       	pop	r16
    8b88:	ff 90       	pop	r15
    8b8a:	ef 90       	pop	r14
    8b8c:	df 90       	pop	r13
    8b8e:	cf 90       	pop	r12
    8b90:	08 95       	ret

00008b92 <procMessage23>:

char procMessage23(){
    8b92:	cf 93       	push	r28
    8b94:	df 93       	push	r29
     char Result=0;
	 StrPosCopy(rcv_trans,strCardID,37,20);
    8b96:	cb ef       	ldi	r28, 0xFB	; 251
    8b98:	d9 e0       	ldi	r29, 0x09	; 9
    8b9a:	ce 01       	movw	r24, r28
    8b9c:	67 e6       	ldi	r22, 0x67	; 103
    8b9e:	7c e0       	ldi	r23, 0x0C	; 12
    8ba0:	45 e2       	ldi	r20, 0x25	; 37
    8ba2:	50 e0       	ldi	r21, 0x00	; 0
    8ba4:	24 e1       	ldi	r18, 0x14	; 20
    8ba6:	30 e0       	ldi	r19, 0x00	; 0
    8ba8:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strCardHolder,57,30);
    8bac:	ce 01       	movw	r24, r28
    8bae:	62 e0       	ldi	r22, 0x02	; 2
    8bb0:	74 e0       	ldi	r23, 0x04	; 4
    8bb2:	49 e3       	ldi	r20, 0x39	; 57
    8bb4:	50 e0       	ldi	r21, 0x00	; 0
    8bb6:	2e e1       	ldi	r18, 0x1E	; 30
    8bb8:	30 e0       	ldi	r19, 0x00	; 0
    8bba:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strStatus,87,1);
    8bbe:	ce 01       	movw	r24, r28
    8bc0:	68 e6       	ldi	r22, 0x68	; 104
    8bc2:	74 e0       	ldi	r23, 0x04	; 4
    8bc4:	47 e5       	ldi	r20, 0x57	; 87
    8bc6:	50 e0       	ldi	r21, 0x00	; 0
    8bc8:	21 e0       	ldi	r18, 0x01	; 1
    8bca:	30 e0       	ldi	r19, 0x00	; 0
    8bcc:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strLoyCurrentPoints,88,8);
    8bd0:	ce 01       	movw	r24, r28
    8bd2:	63 e1       	ldi	r22, 0x13	; 19
    8bd4:	79 e0       	ldi	r23, 0x09	; 9
    8bd6:	48 e5       	ldi	r20, 0x58	; 88
    8bd8:	50 e0       	ldi	r21, 0x00	; 0
    8bda:	28 e0       	ldi	r18, 0x08	; 8
    8bdc:	30 e0       	ldi	r19, 0x00	; 0
    8bde:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeA,96,10);
    8be2:	ce 01       	movw	r24, r28
    8be4:	6c e5       	ldi	r22, 0x5C	; 92
    8be6:	74 e0       	ldi	r23, 0x04	; 4
    8be8:	40 e6       	ldi	r20, 0x60	; 96
    8bea:	50 e0       	ldi	r21, 0x00	; 0
    8bec:	2a e0       	ldi	r18, 0x0A	; 10
    8bee:	30 e0       	ldi	r19, 0x00	; 0
    8bf0:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,106,10);
    8bf4:	ce 01       	movw	r24, r28
    8bf6:	6b ec       	ldi	r22, 0xCB	; 203
    8bf8:	7c e0       	ldi	r23, 0x0C	; 12
    8bfa:	4a e6       	ldi	r20, 0x6A	; 106
    8bfc:	50 e0       	ldi	r21, 0x00	; 0
    8bfe:	2a e0       	ldi	r18, 0x0A	; 10
    8c00:	30 e0       	ldi	r19, 0x00	; 0
    8c02:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strDateTime,116,19);
    8c06:	ce 01       	movw	r24, r28
    8c08:	6d e9       	ldi	r22, 0x9D	; 157
    8c0a:	7c e0       	ldi	r23, 0x0C	; 12
    8c0c:	44 e7       	ldi	r20, 0x74	; 116
    8c0e:	50 e0       	ldi	r21, 0x00	; 0
    8c10:	23 e1       	ldi	r18, 0x13	; 19
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strAmount,135,7);
    8c18:	ce 01       	movw	r24, r28
    8c1a:	61 e9       	ldi	r22, 0x91	; 145
    8c1c:	7c e0       	ldi	r23, 0x0C	; 12
    8c1e:	47 e8       	ldi	r20, 0x87	; 135
    8c20:	50 e0       	ldi	r21, 0x00	; 0
    8c22:	27 e0       	ldi	r18, 0x07	; 7
    8c24:	30 e0       	ldi	r19, 0x00	; 0
    8c26:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strGainPoints,142,4);
    8c2a:	ce 01       	movw	r24, r28
    8c2c:	69 e9       	ldi	r22, 0x99	; 153
    8c2e:	73 e0       	ldi	r23, 0x03	; 3
    8c30:	4e e8       	ldi	r20, 0x8E	; 142
    8c32:	50 e0       	ldi	r21, 0x00	; 0
    8c34:	24 e0       	ldi	r18, 0x04	; 4
    8c36:	30 e0       	ldi	r19, 0x00	; 0
    8c38:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     return Result;
}
    8c3c:	80 e0       	ldi	r24, 0x00	; 0
    8c3e:	df 91       	pop	r29
    8c40:	cf 91       	pop	r28
    8c42:	08 95       	ret

00008c44 <FMenuLoyalty>:
	      break;
	 }
  return Result;
}

char FMenuLoyalty(){
    8c44:	cf 92       	push	r12
    8c46:	df 92       	push	r13
    8c48:	ef 92       	push	r14
    8c4a:	ff 92       	push	r15
    8c4c:	0f 93       	push	r16
    8c4e:	1f 93       	push	r17
    8c50:	df 93       	push	r29
    8c52:	cf 93       	push	r28
    8c54:	cd b7       	in	r28, 0x3d	; 61
    8c56:	de b7       	in	r29, 0x3e	; 62
    8c58:	64 97       	sbiw	r28, 0x14	; 20
    8c5a:	0f b6       	in	r0, 0x3f	; 63
    8c5c:	f8 94       	cli
    8c5e:	de bf       	out	0x3e, r29	; 62
    8c60:	0f be       	out	0x3f, r0	; 63
    8c62:	cd bf       	out	0x3d, r28	; 61
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
	 switch(stLoyalty){
    8c64:	00 91 43 03 	lds	r16, 0x0343
    8c68:	07 30       	cpi	r16, 0x07	; 7
    8c6a:	09 f4       	brne	.+2      	; 0x8c6e <FMenuLoyalty+0x2a>
    8c6c:	02 c1       	rjmp	.+516    	; 0x8e72 <FMenuLoyalty+0x22e>
    8c6e:	08 30       	cpi	r16, 0x08	; 8
    8c70:	98 f4       	brcc	.+38     	; 0x8c98 <FMenuLoyalty+0x54>
    8c72:	03 30       	cpi	r16, 0x03	; 3
    8c74:	09 f4       	brne	.+2      	; 0x8c78 <FMenuLoyalty+0x34>
    8c76:	59 c0       	rjmp	.+178    	; 0x8d2a <FMenuLoyalty+0xe6>
    8c78:	04 30       	cpi	r16, 0x04	; 4
    8c7a:	38 f4       	brcc	.+14     	; 0x8c8a <FMenuLoyalty+0x46>
    8c7c:	01 30       	cpi	r16, 0x01	; 1
    8c7e:	09 f4       	brne	.+2      	; 0x8c82 <FMenuLoyalty+0x3e>
    8c80:	42 c0       	rjmp	.+132    	; 0x8d06 <FMenuLoyalty+0xc2>
    8c82:	02 30       	cpi	r16, 0x02	; 2
    8c84:	08 f0       	brcs	.+2      	; 0x8c88 <FMenuLoyalty+0x44>
    8c86:	5f c0       	rjmp	.+190    	; 0x8d46 <FMenuLoyalty+0x102>
    8c88:	20 c0       	rjmp	.+64     	; 0x8cca <FMenuLoyalty+0x86>
    8c8a:	05 30       	cpi	r16, 0x05	; 5
    8c8c:	09 f4       	brne	.+2      	; 0x8c90 <FMenuLoyalty+0x4c>
    8c8e:	a0 c0       	rjmp	.+320    	; 0x8dd0 <FMenuLoyalty+0x18c>
    8c90:	06 30       	cpi	r16, 0x06	; 6
    8c92:	08 f0       	brcs	.+2      	; 0x8c96 <FMenuLoyalty+0x52>
    8c94:	b8 c0       	rjmp	.+368    	; 0x8e06 <FMenuLoyalty+0x1c2>
    8c96:	8a c0       	rjmp	.+276    	; 0x8dac <FMenuLoyalty+0x168>
    8c98:	0b 30       	cpi	r16, 0x0B	; 11
    8c9a:	09 f4       	brne	.+2      	; 0x8c9e <FMenuLoyalty+0x5a>
    8c9c:	33 c1       	rjmp	.+614    	; 0x8f04 <FMenuLoyalty+0x2c0>
    8c9e:	0c 30       	cpi	r16, 0x0C	; 12
    8ca0:	38 f4       	brcc	.+14     	; 0x8cb0 <FMenuLoyalty+0x6c>
    8ca2:	09 30       	cpi	r16, 0x09	; 9
    8ca4:	09 f4       	brne	.+2      	; 0x8ca8 <FMenuLoyalty+0x64>
    8ca6:	ee c0       	rjmp	.+476    	; 0x8e84 <FMenuLoyalty+0x240>
    8ca8:	0a 30       	cpi	r16, 0x0A	; 10
    8caa:	08 f0       	brcs	.+2      	; 0x8cae <FMenuLoyalty+0x6a>
    8cac:	0e c1       	rjmp	.+540    	; 0x8eca <FMenuLoyalty+0x286>
    8cae:	e4 c0       	rjmp	.+456    	; 0x8e78 <FMenuLoyalty+0x234>
    8cb0:	0d 30       	cpi	r16, 0x0D	; 13
    8cb2:	09 f4       	brne	.+2      	; 0x8cb6 <FMenuLoyalty+0x72>
    8cb4:	e6 c1       	rjmp	.+972    	; 0x9082 <FMenuLoyalty+0x43e>
    8cb6:	0d 30       	cpi	r16, 0x0D	; 13
    8cb8:	08 f4       	brcc	.+2      	; 0x8cbc <FMenuLoyalty+0x78>
    8cba:	ed c1       	rjmp	.+986    	; 0x9096 <FMenuLoyalty+0x452>
    8cbc:	0e 30       	cpi	r16, 0x0E	; 14
    8cbe:	09 f4       	brne	.+2      	; 0x8cc2 <FMenuLoyalty+0x7e>
    8cc0:	fd c1       	rjmp	.+1018   	; 0x90bc <FMenuLoyalty+0x478>
    8cc2:	0f 30       	cpi	r16, 0x0F	; 15
    8cc4:	09 f0       	breq	.+2      	; 0x8cc8 <FMenuLoyalty+0x84>
    8cc6:	08 c2       	rjmp	.+1040   	; 0x90d8 <FMenuLoyalty+0x494>
    8cc8:	01 c2       	rjmp	.+1026   	; 0x90cc <FMenuLoyalty+0x488>
	 case mlInit:
	      lcd_clear();
    8cca:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("  Menu Loyalty   "));
    8cce:	81 e0       	ldi	r24, 0x01	; 1
    8cd0:	61 e0       	ldi	r22, 0x01	; 1
    8cd2:	45 e1       	ldi	r20, 0x15	; 21
    8cd4:	5d e1       	ldi	r21, 0x1D	; 29
    8cd6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          lcd_printf(1,1,PSTR("1.Enquiry        "));
    8cda:	81 e0       	ldi	r24, 0x01	; 1
    8cdc:	61 e0       	ldi	r22, 0x01	; 1
    8cde:	43 e0       	ldi	r20, 0x03	; 3
    8ce0:	5d e1       	ldi	r21, 0x1D	; 29
    8ce2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Loyalty Update "));
    8ce6:	82 e0       	ldi	r24, 0x02	; 2
    8ce8:	61 e0       	ldi	r22, 0x01	; 1
    8cea:	41 ef       	ldi	r20, 0xF1	; 241
    8cec:	5c e1       	ldi	r21, 0x1C	; 28
    8cee:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back          "));
    8cf2:	84 e0       	ldi	r24, 0x04	; 4
    8cf4:	61 e0       	ldi	r22, 0x01	; 1
    8cf6:	4f ed       	ldi	r20, 0xDF	; 223
    8cf8:	5c e1       	ldi	r21, 0x1C	; 28
    8cfa:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  IsLoyaltyUpdate=False;
    8cfe:	10 92 41 03 	sts	0x0341, r1
		  stLoyalty=mlLoyaltySelect;
    8d02:	81 e0       	ldi	r24, 0x01	; 1
    8d04:	e0 c1       	rjmp	.+960    	; 0x90c6 <FMenuLoyalty+0x482>
	      break;
	 case mlLoyaltySelect:
	 	  KeyPressed=_key_scan(1);
    8d06:	81 e0       	ldi	r24, 0x01	; 1
    8d08:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  if (KeyPressed==_KEY_1){
    8d0c:	8e 3e       	cpi	r24, 0xEE	; 238
    8d0e:	21 f4       	brne	.+8      	; 0x8d18 <FMenuLoyalty+0xd4>
		      IsLoyaltyUpdate=False;
    8d10:	10 92 41 03 	sts	0x0341, r1
		      stLoyalty=mlShowEnquiry;
    8d14:	84 e0       	ldi	r24, 0x04	; 4
    8d16:	d7 c1       	rjmp	.+942    	; 0x90c6 <FMenuLoyalty+0x482>
			  }
		  else
		  if (KeyPressed==_KEY_2){
    8d18:	8e 3d       	cpi	r24, 0xDE	; 222
    8d1a:	19 f4       	brne	.+6      	; 0x8d22 <FMenuLoyalty+0xde>
		      IsLoyaltyUpdate=True;
    8d1c:	00 93 41 03 	sts	0x0341, r16
    8d20:	69 c0       	rjmp	.+210    	; 0x8df4 <FMenuLoyalty+0x1b0>
			  stLoyalty=mlSelectFIP;
			  }
		  if (KeyPressed==_KEY_CANCEL)stLoyalty=mlExitLoyalty;
    8d22:	87 3e       	cpi	r24, 0xE7	; 231
    8d24:	09 f4       	brne	.+2      	; 0x8d28 <FMenuLoyalty+0xe4>
    8d26:	ce c1       	rjmp	.+924    	; 0x90c4 <FMenuLoyalty+0x480>
    8d28:	d7 c1       	rjmp	.+942    	; 0x90d8 <FMenuLoyalty+0x494>
	      break;
     case mlSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
    8d2a:	82 e4       	ldi	r24, 0x42	; 66
    8d2c:	93 e0       	ldi	r25, 0x03	; 3
    8d2e:	67 e9       	ldi	r22, 0x97	; 151
    8d30:	78 e0       	ldi	r23, 0x08	; 8
    8d32:	0e 94 a3 2b 	call	0x5746	; 0x5746 <menu_FIP>
		  if (FIPResult==FIP_DONE)stLoyalty=mlUpdateLoyalty;
    8d36:	88 23       	and	r24, r24
    8d38:	11 f4       	brne	.+4      	; 0x8d3e <FMenuLoyalty+0xfa>
    8d3a:	82 e0       	ldi	r24, 0x02	; 2
    8d3c:	c4 c1       	rjmp	.+904    	; 0x90c6 <FMenuLoyalty+0x482>
		  else
		  if (FIPResult==FIP_CANCEL)stLoyalty=mlInit;
    8d3e:	82 30       	cpi	r24, 0x02	; 2
    8d40:	09 f0       	breq	.+2      	; 0x8d44 <FMenuLoyalty+0x100>
    8d42:	ca c1       	rjmp	.+916    	; 0x90d8 <FMenuLoyalty+0x494>
    8d44:	59 c0       	rjmp	.+178    	; 0x8df8 <FMenuLoyalty+0x1b4>
	      break;
     case mlUpdateLoyalty: 
	      lcd_clear();
    8d46:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  sprintf_P(lcdteks,PSTR("FIP:%s"),strFIP_ID);
    8d4a:	00 d0       	rcall	.+0      	; 0x8d4c <FMenuLoyalty+0x108>
    8d4c:	00 d0       	rcall	.+0      	; 0x8d4e <FMenuLoyalty+0x10a>
    8d4e:	00 d0       	rcall	.+0      	; 0x8d50 <FMenuLoyalty+0x10c>
    8d50:	ed b7       	in	r30, 0x3d	; 61
    8d52:	fe b7       	in	r31, 0x3e	; 62
    8d54:	31 96       	adiw	r30, 0x01	; 1
    8d56:	8e 01       	movw	r16, r28
    8d58:	0f 5f       	subi	r16, 0xFF	; 255
    8d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d5c:	ad b7       	in	r26, 0x3d	; 61
    8d5e:	be b7       	in	r27, 0x3e	; 62
    8d60:	12 96       	adiw	r26, 0x02	; 2
    8d62:	1c 93       	st	X, r17
    8d64:	0e 93       	st	-X, r16
    8d66:	11 97       	sbiw	r26, 0x01	; 1
    8d68:	88 ed       	ldi	r24, 0xD8	; 216
    8d6a:	9c e1       	ldi	r25, 0x1C	; 28
    8d6c:	93 83       	std	Z+3, r25	; 0x03
    8d6e:	82 83       	std	Z+2, r24	; 0x02
    8d70:	87 e9       	ldi	r24, 0x97	; 151
    8d72:	98 e0       	ldi	r25, 0x08	; 8
    8d74:	95 83       	std	Z+5, r25	; 0x05
    8d76:	84 83       	std	Z+4, r24	; 0x04
    8d78:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
    8d7c:	8d b7       	in	r24, 0x3d	; 61
    8d7e:	9e b7       	in	r25, 0x3e	; 62
    8d80:	06 96       	adiw	r24, 0x06	; 6
    8d82:	0f b6       	in	r0, 0x3f	; 63
    8d84:	f8 94       	cli
    8d86:	9e bf       	out	0x3e, r25	; 62
    8d88:	0f be       	out	0x3f, r0	; 63
    8d8a:	8d bf       	out	0x3d, r24	; 61
    8d8c:	81 e0       	ldi	r24, 0x01	; 1
    8d8e:	61 e0       	ldi	r22, 0x01	; 1
    8d90:	49 ec       	ldi	r20, 0xC9	; 201
    8d92:	5c e1       	ldi	r21, 0x1C	; 28
    8d94:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_print(2,1,lcdteks);
    8d98:	82 e0       	ldi	r24, 0x02	; 2
    8d9a:	61 e0       	ldi	r22, 0x01	; 1
    8d9c:	a8 01       	movw	r20, r16
    8d9e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
    8da2:	84 e0       	ldi	r24, 0x04	; 4
    8da4:	61 e0       	ldi	r22, 0x01	; 1
    8da6:	46 eb       	ldi	r20, 0xB6	; 182
    8da8:	5c e1       	ldi	r21, 0x1C	; 28
    8daa:	0c c0       	rjmp	.+24     	; 0x8dc4 <FMenuLoyalty+0x180>
		  IsRFIDDetected=False;
	      stLoyalty=mlInputRFID;
	      break;
	 case mlShowEnquiry:
	      lcd_clear();
    8dac:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
    8db0:	81 e0       	ldi	r24, 0x01	; 1
    8db2:	61 e0       	ldi	r22, 0x01	; 1
    8db4:	47 ea       	ldi	r20, 0xA7	; 167
    8db6:	5c e1       	ldi	r21, 0x1C	; 28
    8db8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
    8dbc:	84 e0       	ldi	r24, 0x04	; 4
    8dbe:	61 e0       	ldi	r22, 0x01	; 1
    8dc0:	44 e9       	ldi	r20, 0x94	; 148
    8dc2:	5c e1       	ldi	r21, 0x1C	; 28
    8dc4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  IsRFIDDetected=False;
    8dc8:	10 92 76 02 	sts	0x0276, r1
		  stLoyalty=mlInputRFID;
    8dcc:	85 e0       	ldi	r24, 0x05	; 5
    8dce:	7b c1       	rjmp	.+758    	; 0x90c6 <FMenuLoyalty+0x482>
	      break;
     case mlInputRFID:
	      if (IsRFIDDetected==True){
    8dd0:	80 91 76 02 	lds	r24, 0x0276
    8dd4:	81 30       	cpi	r24, 0x01	; 1
    8dd6:	29 f4       	brne	.+10     	; 0x8de2 <FMenuLoyalty+0x19e>
		      IsRFIDDetected=False;
    8dd8:	10 92 76 02 	sts	0x0276, r1
		      stLoyalty=mlShowProsesRFID;
    8ddc:	86 e0       	ldi	r24, 0x06	; 6
    8dde:	80 93 43 03 	sts	0x0343, r24
		  }
	 	  KeyPressed=_key_scan(1);
    8de2:	81 e0       	ldi	r24, 0x01	; 1
    8de4:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  if (KeyPressed==_KEY_CANCEL){
    8de8:	87 3e       	cpi	r24, 0xE7	; 231
    8dea:	49 f4       	brne	.+18     	; 0x8dfe <FMenuLoyalty+0x1ba>
		      if (IsLoyaltyUpdate==True)
    8dec:	80 91 41 03 	lds	r24, 0x0341
    8df0:	81 30       	cpi	r24, 0x01	; 1
    8df2:	11 f4       	brne	.+4      	; 0x8df8 <FMenuLoyalty+0x1b4>
			       stLoyalty=mlSelectFIP;
    8df4:	83 e0       	ldi	r24, 0x03	; 3
    8df6:	67 c1       	rjmp	.+718    	; 0x90c6 <FMenuLoyalty+0x482>
			  else stLoyalty=mlInit;
    8df8:	10 92 43 03 	sts	0x0343, r1
    8dfc:	6d c1       	rjmp	.+730    	; 0x90d8 <FMenuLoyalty+0x494>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stLoyalty=mlExitLoyalty;
    8dfe:	87 3b       	cpi	r24, 0xB7	; 183
    8e00:	09 f0       	breq	.+2      	; 0x8e04 <FMenuLoyalty+0x1c0>
    8e02:	6a c1       	rjmp	.+724    	; 0x90d8 <FMenuLoyalty+0x494>
    8e04:	5f c1       	rjmp	.+702    	; 0x90c4 <FMenuLoyalty+0x480>
	      break;
     case mlShowProsesRFID:
	      lcd_clear();
    8e06:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  sprintf_P(lcdteks,PSTR("ID:%s"),strRFID);
    8e0a:	00 d0       	rcall	.+0      	; 0x8e0c <FMenuLoyalty+0x1c8>
    8e0c:	00 d0       	rcall	.+0      	; 0x8e0e <FMenuLoyalty+0x1ca>
    8e0e:	00 d0       	rcall	.+0      	; 0x8e10 <FMenuLoyalty+0x1cc>
    8e10:	ed b7       	in	r30, 0x3d	; 61
    8e12:	fe b7       	in	r31, 0x3e	; 62
    8e14:	31 96       	adiw	r30, 0x01	; 1
    8e16:	8e 01       	movw	r16, r28
    8e18:	0f 5f       	subi	r16, 0xFF	; 255
    8e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    8e1c:	ad b7       	in	r26, 0x3d	; 61
    8e1e:	be b7       	in	r27, 0x3e	; 62
    8e20:	12 96       	adiw	r26, 0x02	; 2
    8e22:	1c 93       	st	X, r17
    8e24:	0e 93       	st	-X, r16
    8e26:	11 97       	sbiw	r26, 0x01	; 1
    8e28:	8e e8       	ldi	r24, 0x8E	; 142
    8e2a:	9c e1       	ldi	r25, 0x1C	; 28
    8e2c:	93 83       	std	Z+3, r25	; 0x03
    8e2e:	82 83       	std	Z+2, r24	; 0x02
    8e30:	8f e2       	ldi	r24, 0x2F	; 47
    8e32:	9d e0       	ldi	r25, 0x0D	; 13
    8e34:	95 83       	std	Z+5, r25	; 0x05
    8e36:	84 83       	std	Z+4, r24	; 0x04
    8e38:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print (1,1,lcdteks);	      
    8e3c:	8d b7       	in	r24, 0x3d	; 61
    8e3e:	9e b7       	in	r25, 0x3e	; 62
    8e40:	06 96       	adiw	r24, 0x06	; 6
    8e42:	0f b6       	in	r0, 0x3f	; 63
    8e44:	f8 94       	cli
    8e46:	9e bf       	out	0x3e, r25	; 62
    8e48:	0f be       	out	0x3f, r0	; 63
    8e4a:	8d bf       	out	0x3d, r24	; 61
    8e4c:	81 e0       	ldi	r24, 0x01	; 1
    8e4e:	61 e0       	ldi	r22, 0x01	; 1
    8e50:	a8 01       	movw	r20, r16
    8e52:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(2,1,PSTR("Proses"));	      
    8e56:	82 e0       	ldi	r24, 0x02	; 2
    8e58:	61 e0       	ldi	r22, 0x01	; 1
    8e5a:	47 e8       	ldi	r20, 0x87	; 135
    8e5c:	5c e1       	ldi	r21, 0x1C	; 28
    8e5e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  if (IsLoyaltyUpdate==True)stLoyalty=mlSendMessage24;
    8e62:	80 91 41 03 	lds	r24, 0x0341
    8e66:	81 30       	cpi	r24, 0x01	; 1
    8e68:	11 f4       	brne	.+4      	; 0x8e6e <FMenuLoyalty+0x22a>
    8e6a:	88 e0       	ldi	r24, 0x08	; 8
    8e6c:	2c c1       	rjmp	.+600    	; 0x90c6 <FMenuLoyalty+0x482>
		  else stLoyalty=mlSendMessage22;
    8e6e:	87 e0       	ldi	r24, 0x07	; 7
    8e70:	2a c1       	rjmp	.+596    	; 0x90c6 <FMenuLoyalty+0x482>
	      break;
     case mlSendMessage22:
	      sendMessage22();
    8e72:	0e 94 39 2a 	call	0x5472	; 0x5472 <sendMessage22>
    8e76:	02 c0       	rjmp	.+4      	; 0x8e7c <FMenuLoyalty+0x238>
		  TimSend=0;		  
          stLoyalty=mlWaitReply;
	      break;
     case mlSendMessage24:
	      sendMessage24();
    8e78:	0e 94 35 2a 	call	0x546a	; 0x546a <sendMessage24>
		  TimSend=0;		  
    8e7c:	10 92 56 0d 	sts	0x0D56, r1
          stLoyalty=mlWaitReply;
    8e80:	89 e0       	ldi	r24, 0x09	; 9
    8e82:	21 c1       	rjmp	.+578    	; 0x90c6 <FMenuLoyalty+0x482>
	      break;
     case mlWaitReply:
	      if (TimSend>(TIM_SEND*3))
    8e84:	80 91 56 0d 	lds	r24, 0x0D56
    8e88:	8f 31       	cpi	r24, 0x1F	; 31
    8e8a:	18 f0       	brcs	.+6      	; 0x8e92 <FMenuLoyalty+0x24e>
		      stLoyalty=mlNoConnection;
    8e8c:	8c e0       	ldi	r24, 0x0C	; 12
    8e8e:	80 93 43 03 	sts	0x0343, r24
	      if (IsMessage23==True){
    8e92:	80 91 80 02 	lds	r24, 0x0280
    8e96:	81 30       	cpi	r24, 0x01	; 1
    8e98:	39 f4       	brne	.+14     	; 0x8ea8 <FMenuLoyalty+0x264>
		      IsMessage23=False;
    8e9a:	10 92 80 02 	sts	0x0280, r1
			  procMessage23();
    8e9e:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <procMessage23>
			  stLoyalty=mlDispEnquiry;
    8ea2:	8b e0       	ldi	r24, 0x0B	; 11
    8ea4:	80 93 43 03 	sts	0x0343, r24
		  }
	      if (IsMessage09==True){
    8ea8:	80 91 81 02 	lds	r24, 0x0281
    8eac:	81 30       	cpi	r24, 0x01	; 1
    8eae:	39 f4       	brne	.+14     	; 0x8ebe <FMenuLoyalty+0x27a>
		      IsMessage09=False;
    8eb0:	10 92 81 02 	sts	0x0281, r1
	          procMessage09();
    8eb4:	0e 94 57 45 	call	0x8aae	; 0x8aae <procMessage09>
              stLoyalty=mlDisplayFreeMessage;
    8eb8:	8a e0       	ldi	r24, 0x0A	; 10
    8eba:	80 93 43 03 	sts	0x0343, r24
		  }
	      if (IsMessage99==True){
    8ebe:	80 91 7d 02 	lds	r24, 0x027D
    8ec2:	81 30       	cpi	r24, 0x01	; 1
    8ec4:	09 f0       	breq	.+2      	; 0x8ec8 <FMenuLoyalty+0x284>
    8ec6:	08 c1       	rjmp	.+528    	; 0x90d8 <FMenuLoyalty+0x494>
    8ec8:	f7 c0       	rjmp	.+494    	; 0x90b8 <FMenuLoyalty+0x474>
              stLoyalty=mlDelayExitLoyalty;
		  }
	      break;
     case mlDisplayFreeMessage:
		  lcd_clear();
    8eca:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    8ece:	81 e0       	ldi	r24, 0x01	; 1
    8ed0:	61 e0       	ldi	r22, 0x01	; 1
    8ed2:	40 e7       	ldi	r20, 0x70	; 112
    8ed4:	59 e0       	ldi	r21, 0x09	; 9
    8ed6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    8eda:	82 e0       	ldi	r24, 0x02	; 2
    8edc:	61 e0       	ldi	r22, 0x01	; 1
    8ede:	41 e8       	ldi	r20, 0x81	; 129
    8ee0:	58 e0       	ldi	r21, 0x08	; 8
    8ee2:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    8ee6:	83 e0       	ldi	r24, 0x03	; 3
    8ee8:	61 e0       	ldi	r22, 0x01	; 1
    8eea:	4a ee       	ldi	r20, 0xEA	; 234
    8eec:	58 e0       	ldi	r21, 0x08	; 8
    8eee:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    8ef2:	84 e0       	ldi	r24, 0x04	; 4
    8ef4:	61 e0       	ldi	r22, 0x01	; 1
    8ef6:	44 eb       	ldi	r20, 0xB4	; 180
    8ef8:	5c e0       	ldi	r21, 0x0C	; 12
    8efa:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  TimDisplay=0;
    8efe:	10 92 70 02 	sts	0x0270, r1
    8f02:	da c0       	rjmp	.+436    	; 0x90b8 <FMenuLoyalty+0x474>
		  stLoyalty=mlDelayExitLoyalty;
	      break;
     case mlDispEnquiry:	      
	      lcd_clear();
    8f04:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  RemSpaceLag(strCardID);RemSpaceLag(strCardHolder);
    8f08:	67 e6       	ldi	r22, 0x67	; 103
    8f0a:	e6 2e       	mov	r14, r22
    8f0c:	6c e0       	ldi	r22, 0x0C	; 12
    8f0e:	f6 2e       	mov	r15, r22
    8f10:	c7 01       	movw	r24, r14
    8f12:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
    8f16:	52 e0       	ldi	r21, 0x02	; 2
    8f18:	c5 2e       	mov	r12, r21
    8f1a:	54 e0       	ldi	r21, 0x04	; 4
    8f1c:	d5 2e       	mov	r13, r21
    8f1e:	c6 01       	movw	r24, r12
    8f20:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("%s:%s"),strCardID,strCardHolder);
    8f24:	ad b7       	in	r26, 0x3d	; 61
    8f26:	be b7       	in	r27, 0x3e	; 62
    8f28:	18 97       	sbiw	r26, 0x08	; 8
    8f2a:	0f b6       	in	r0, 0x3f	; 63
    8f2c:	f8 94       	cli
    8f2e:	be bf       	out	0x3e, r27	; 62
    8f30:	0f be       	out	0x3f, r0	; 63
    8f32:	ad bf       	out	0x3d, r26	; 61
    8f34:	ed b7       	in	r30, 0x3d	; 61
    8f36:	fe b7       	in	r31, 0x3e	; 62
    8f38:	31 96       	adiw	r30, 0x01	; 1
    8f3a:	8e 01       	movw	r16, r28
    8f3c:	0f 5f       	subi	r16, 0xFF	; 255
    8f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8f40:	12 96       	adiw	r26, 0x02	; 2
    8f42:	1c 93       	st	X, r17
    8f44:	0e 93       	st	-X, r16
    8f46:	11 97       	sbiw	r26, 0x01	; 1
    8f48:	81 e8       	ldi	r24, 0x81	; 129
    8f4a:	9c e1       	ldi	r25, 0x1C	; 28
    8f4c:	93 83       	std	Z+3, r25	; 0x03
    8f4e:	82 83       	std	Z+2, r24	; 0x02
    8f50:	f5 82       	std	Z+5, r15	; 0x05
    8f52:	e4 82       	std	Z+4, r14	; 0x04
    8f54:	d7 82       	std	Z+7, r13	; 0x07
    8f56:	c6 82       	std	Z+6, r12	; 0x06
    8f58:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(1,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
    8f5c:	8d b7       	in	r24, 0x3d	; 61
    8f5e:	9e b7       	in	r25, 0x3e	; 62
    8f60:	08 96       	adiw	r24, 0x08	; 8
    8f62:	0f b6       	in	r0, 0x3f	; 63
    8f64:	f8 94       	cli
    8f66:	9e bf       	out	0x3e, r25	; 62
    8f68:	0f be       	out	0x3f, r0	; 63
    8f6a:	8d bf       	out	0x3d, r24	; 61
    8f6c:	81 e0       	ldi	r24, 0x01	; 1
    8f6e:	61 e0       	ldi	r22, 0x01	; 1
    8f70:	a8 01       	movw	r20, r16
    8f72:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    8f76:	43 e1       	ldi	r20, 0x13	; 19
    8f78:	e4 2e       	mov	r14, r20
    8f7a:	49 e0       	ldi	r20, 0x09	; 9
    8f7c:	f4 2e       	mov	r15, r20
    8f7e:	c7 01       	movw	r24, r14
    8f80:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Points:%s"),strLoyCurrentPoints);
    8f84:	00 d0       	rcall	.+0      	; 0x8f86 <FMenuLoyalty+0x342>
    8f86:	00 d0       	rcall	.+0      	; 0x8f88 <FMenuLoyalty+0x344>
    8f88:	00 d0       	rcall	.+0      	; 0x8f8a <FMenuLoyalty+0x346>
    8f8a:	ed b7       	in	r30, 0x3d	; 61
    8f8c:	fe b7       	in	r31, 0x3e	; 62
    8f8e:	31 96       	adiw	r30, 0x01	; 1
    8f90:	ad b7       	in	r26, 0x3d	; 61
    8f92:	be b7       	in	r27, 0x3e	; 62
    8f94:	12 96       	adiw	r26, 0x02	; 2
    8f96:	1c 93       	st	X, r17
    8f98:	0e 93       	st	-X, r16
    8f9a:	11 97       	sbiw	r26, 0x01	; 1
    8f9c:	87 e7       	ldi	r24, 0x77	; 119
    8f9e:	9c e1       	ldi	r25, 0x1C	; 28
    8fa0:	93 83       	std	Z+3, r25	; 0x03
    8fa2:	82 83       	std	Z+2, r24	; 0x02
    8fa4:	f5 82       	std	Z+5, r15	; 0x05
    8fa6:	e4 82       	std	Z+4, r14	; 0x04
    8fa8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(2,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
    8fac:	8d b7       	in	r24, 0x3d	; 61
    8fae:	9e b7       	in	r25, 0x3e	; 62
    8fb0:	06 96       	adiw	r24, 0x06	; 6
    8fb2:	0f b6       	in	r0, 0x3f	; 63
    8fb4:	f8 94       	cli
    8fb6:	9e bf       	out	0x3e, r25	; 62
    8fb8:	0f be       	out	0x3f, r0	; 63
    8fba:	8d bf       	out	0x3d, r24	; 61
    8fbc:	82 e0       	ldi	r24, 0x02	; 2
    8fbe:	61 e0       	ldi	r22, 0x01	; 1
    8fc0:	a8 01       	movw	r20, r16
    8fc2:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    8fc6:	c7 01       	movw	r24, r14
    8fc8:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("CM Amt:%s"),strLoyCurrMonConsumeA);
    8fcc:	00 d0       	rcall	.+0      	; 0x8fce <FMenuLoyalty+0x38a>
    8fce:	00 d0       	rcall	.+0      	; 0x8fd0 <FMenuLoyalty+0x38c>
    8fd0:	00 d0       	rcall	.+0      	; 0x8fd2 <FMenuLoyalty+0x38e>
    8fd2:	ed b7       	in	r30, 0x3d	; 61
    8fd4:	fe b7       	in	r31, 0x3e	; 62
    8fd6:	31 96       	adiw	r30, 0x01	; 1
    8fd8:	ad b7       	in	r26, 0x3d	; 61
    8fda:	be b7       	in	r27, 0x3e	; 62
    8fdc:	12 96       	adiw	r26, 0x02	; 2
    8fde:	1c 93       	st	X, r17
    8fe0:	0e 93       	st	-X, r16
    8fe2:	11 97       	sbiw	r26, 0x01	; 1
    8fe4:	8d e6       	ldi	r24, 0x6D	; 109
    8fe6:	9c e1       	ldi	r25, 0x1C	; 28
    8fe8:	93 83       	std	Z+3, r25	; 0x03
    8fea:	82 83       	std	Z+2, r24	; 0x02
    8fec:	8c e5       	ldi	r24, 0x5C	; 92
    8fee:	94 e0       	ldi	r25, 0x04	; 4
    8ff0:	95 83       	std	Z+5, r25	; 0x05
    8ff2:	84 83       	std	Z+4, r24	; 0x04
    8ff4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(3,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
    8ff8:	8d b7       	in	r24, 0x3d	; 61
    8ffa:	9e b7       	in	r25, 0x3e	; 62
    8ffc:	06 96       	adiw	r24, 0x06	; 6
    8ffe:	0f b6       	in	r0, 0x3f	; 63
    9000:	f8 94       	cli
    9002:	9e bf       	out	0x3e, r25	; 62
    9004:	0f be       	out	0x3f, r0	; 63
    9006:	8d bf       	out	0x3d, r24	; 61
    9008:	83 e0       	ldi	r24, 0x03	; 3
    900a:	61 e0       	ldi	r22, 0x01	; 1
    900c:	a8 01       	movw	r20, r16
    900e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    9012:	c7 01       	movw	r24, r14
    9014:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Cm Vol:%s"),strLoyCurrMonConsumeV);
    9018:	00 d0       	rcall	.+0      	; 0x901a <FMenuLoyalty+0x3d6>
    901a:	00 d0       	rcall	.+0      	; 0x901c <FMenuLoyalty+0x3d8>
    901c:	00 d0       	rcall	.+0      	; 0x901e <FMenuLoyalty+0x3da>
    901e:	ed b7       	in	r30, 0x3d	; 61
    9020:	fe b7       	in	r31, 0x3e	; 62
    9022:	31 96       	adiw	r30, 0x01	; 1
    9024:	ad b7       	in	r26, 0x3d	; 61
    9026:	be b7       	in	r27, 0x3e	; 62
    9028:	12 96       	adiw	r26, 0x02	; 2
    902a:	1c 93       	st	X, r17
    902c:	0e 93       	st	-X, r16
    902e:	11 97       	sbiw	r26, 0x01	; 1
    9030:	83 e6       	ldi	r24, 0x63	; 99
    9032:	9c e1       	ldi	r25, 0x1C	; 28
    9034:	93 83       	std	Z+3, r25	; 0x03
    9036:	82 83       	std	Z+2, r24	; 0x02
    9038:	8b ec       	ldi	r24, 0xCB	; 203
    903a:	9c e0       	ldi	r25, 0x0C	; 12
    903c:	95 83       	std	Z+5, r25	; 0x05
    903e:	84 83       	std	Z+4, r24	; 0x04
    9040:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(4,1,lcdteks);
    9044:	8d b7       	in	r24, 0x3d	; 61
    9046:	9e b7       	in	r25, 0x3e	; 62
    9048:	06 96       	adiw	r24, 0x06	; 6
    904a:	0f b6       	in	r0, 0x3f	; 63
    904c:	f8 94       	cli
    904e:	9e bf       	out	0x3e, r25	; 62
    9050:	0f be       	out	0x3f, r0	; 63
    9052:	8d bf       	out	0x3d, r24	; 61
    9054:	84 e0       	ldi	r24, 0x04	; 4
    9056:	61 e0       	ldi	r22, 0x01	; 1
    9058:	a8 01       	movw	r20, r16
    905a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  TimDisplay=0;
    905e:	10 92 70 02 	sts	0x0270, r1

		  if (eeprom_read_byte(&DefNotifScreen)==1) {
    9062:	88 e3       	ldi	r24, 0x38	; 56
    9064:	90 e0       	ldi	r25, 0x00	; 0
    9066:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    906a:	81 30       	cpi	r24, 0x01	; 1
    906c:	29 f5       	brne	.+74     	; 0x90b8 <FMenuLoyalty+0x474>
		      stLoyalty=mlPressAnyKey;
    906e:	8d e0       	ldi	r24, 0x0D	; 13
    9070:	80 93 43 03 	sts	0x0343, r24
			  lcd_printf(2,1,PSTR("Press Any Key"));
    9074:	82 e0       	ldi	r24, 0x02	; 2
    9076:	61 e0       	ldi	r22, 0x01	; 1
    9078:	45 e5       	ldi	r20, 0x55	; 85
    907a:	5c e1       	ldi	r21, 0x1C	; 28
    907c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    9080:	2b c0       	rjmp	.+86     	; 0x90d8 <FMenuLoyalty+0x494>
          } else stLoyalty=mlDelayExitLoyalty;
		  break;
     case mlPressAnyKey:
	      KeyPressed=_key_scan(1);
    9082:	81 e0       	ldi	r24, 0x01	; 1
    9084:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    9088:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
	      switch(KeyChar){		  
    908c:	83 32       	cpi	r24, 0x23	; 35
    908e:	d1 f0       	breq	.+52     	; 0x90c4 <FMenuLoyalty+0x480>
    9090:	8a 32       	cpi	r24, 0x2A	; 42
    9092:	11 f5       	brne	.+68     	; 0x90d8 <FMenuLoyalty+0x494>
    9094:	17 c0       	rjmp	.+46     	; 0x90c4 <FMenuLoyalty+0x480>
               stLoyalty=mlExitLoyalty;
		       break;		  
		  }
	      break;
     case mlNoConnection:
	      lcd_clear();
    9096:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
    909a:	82 e0       	ldi	r24, 0x02	; 2
    909c:	61 e0       	ldi	r22, 0x01	; 1
    909e:	47 e4       	ldi	r20, 0x47	; 71
    90a0:	5c e1       	ldi	r21, 0x1C	; 28
    90a2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
    90a6:	83 e0       	ldi	r24, 0x03	; 3
    90a8:	61 e0       	ldi	r22, 0x01	; 1
    90aa:	49 e3       	ldi	r20, 0x39	; 57
    90ac:	5c e1       	ldi	r21, 0x1C	; 28
    90ae:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  TimDisplay=5;
    90b2:	85 e0       	ldi	r24, 0x05	; 5
    90b4:	80 93 70 02 	sts	0x0270, r24
		  stLoyalty=mlDelayExitLoyalty;
    90b8:	8e e0       	ldi	r24, 0x0E	; 14
    90ba:	05 c0       	rjmp	.+10     	; 0x90c6 <FMenuLoyalty+0x482>
	      break;
     case mlDelayExitLoyalty:
          if(TimDisplay>=10)stLoyalty=mlExitLoyalty;
    90bc:	80 91 70 02 	lds	r24, 0x0270
    90c0:	8a 30       	cpi	r24, 0x0A	; 10
    90c2:	50 f0       	brcs	.+20     	; 0x90d8 <FMenuLoyalty+0x494>
    90c4:	8f e0       	ldi	r24, 0x0F	; 15
    90c6:	80 93 43 03 	sts	0x0343, r24
    90ca:	06 c0       	rjmp	.+12     	; 0x90d8 <FMenuLoyalty+0x494>
	      break;
	 case mlExitLoyalty:
	      lcd_clear();
    90cc:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	      stLoyalty=mlInit;
    90d0:	10 92 43 03 	sts	0x0343, r1
		  Result=MENU_DONE;
    90d4:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    90d6:	01 c0       	rjmp	.+2      	; 0x90da <FMenuLoyalty+0x496>
       char lcdteks[20];
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
    90d8:	80 e0       	ldi	r24, 0x00	; 0
	      stLoyalty=mlInit;
		  Result=MENU_DONE;
	      break;
	 }
	 return Result;
}
    90da:	64 96       	adiw	r28, 0x14	; 20
    90dc:	0f b6       	in	r0, 0x3f	; 63
    90de:	f8 94       	cli
    90e0:	de bf       	out	0x3e, r29	; 62
    90e2:	0f be       	out	0x3f, r0	; 63
    90e4:	cd bf       	out	0x3d, r28	; 61
    90e6:	cf 91       	pop	r28
    90e8:	df 91       	pop	r29
    90ea:	1f 91       	pop	r17
    90ec:	0f 91       	pop	r16
    90ee:	ff 90       	pop	r15
    90f0:	ef 90       	pop	r14
    90f2:	df 90       	pop	r13
    90f4:	cf 90       	pop	r12
    90f6:	08 95       	ret

000090f8 <procMessage57>:
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}

char procMessage57(){
    90f8:	ff 92       	push	r15
    90fa:	0f 93       	push	r16
    90fc:	1f 93       	push	r17
    90fe:	cf 93       	push	r28
    9100:	df 93       	push	r29
     char i,Result,serialSend[20];
	 Result=MSG57_NONE;
	 //Message57
	 
	     //Card Status
		 Result=(CharPosCopy(rcv_trans,57)-'0')+1;
    9102:	f0 90 34 0a 	lds	r15, 0x0A34
    9106:	81 ed       	ldi	r24, 0xD1	; 209
    9108:	f8 0e       	add	r15, r24
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
    910a:	07 e6       	ldi	r16, 0x67	; 103
    910c:	1c e0       	ldi	r17, 0x0C	; 12
    910e:	cb ef       	ldi	r28, 0xFB	; 251
    9110:	d9 e0       	ldi	r29, 0x09	; 9
    9112:	c8 01       	movw	r24, r16
    9114:	be 01       	movw	r22, r28
    9116:	45 e2       	ldi	r20, 0x25	; 37
    9118:	50 e0       	ldi	r21, 0x00	; 0
    911a:	24 e1       	ldi	r18, 0x14	; 20
    911c:	30 e0       	ldi	r19, 0x00	; 0
    911e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLead(strCardID);
    9122:	c8 01       	movw	r24, r16
    9124:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <RemSpaceLead>
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
    9128:	02 e0       	ldi	r16, 0x02	; 2
    912a:	14 e0       	ldi	r17, 0x04	; 4
    912c:	ce 01       	movw	r24, r28
    912e:	b8 01       	movw	r22, r16
    9130:	4c e3       	ldi	r20, 0x3C	; 60
    9132:	50 e0       	ldi	r21, 0x00	; 0
    9134:	28 e2       	ldi	r18, 0x28	; 40
    9136:	30 e0       	ldi	r19, 0x00	; 0
    9138:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLag(strCardHolder);
    913c:	c8 01       	movw	r24, r16
    913e:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		 //BalanceTypePrint
		 StrPosCopy(rcv_trans,strBalanceTypePrint,154-2,25);
    9142:	09 e3       	ldi	r16, 0x39	; 57
    9144:	14 e0       	ldi	r17, 0x04	; 4
    9146:	ce 01       	movw	r24, r28
    9148:	b8 01       	movw	r22, r16
    914a:	48 e9       	ldi	r20, 0x98	; 152
    914c:	50 e0       	ldi	r21, 0x00	; 0
    914e:	29 e1       	ldi	r18, 0x19	; 25
    9150:	30 e0       	ldi	r19, 0x00	; 0
    9152:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLag(strBalanceTypePrint);
    9156:	c8 01       	movw	r24, r16
    9158:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
         //BalanceTypeCode
		 StrPosCopy(rcv_trans,strBalanceCode,177,1);
    915c:	ce 01       	movw	r24, r28
    915e:	63 ec       	ldi	r22, 0xC3	; 195
    9160:	73 e0       	ldi	r23, 0x03	; 3
    9162:	41 eb       	ldi	r20, 0xB1	; 177
    9164:	50 e0       	ldi	r21, 0x00	; 0
    9166:	21 e0       	ldi	r18, 0x01	; 1
    9168:	30 e0       	ldi	r19, 0x00	; 0
    916a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
    916e:	06 ed       	ldi	r16, 0xD6	; 214
    9170:	1c e0       	ldi	r17, 0x0C	; 12
    9172:	ce 01       	movw	r24, r28
    9174:	b8 01       	movw	r22, r16
    9176:	42 eb       	ldi	r20, 0xB2	; 178
    9178:	50 e0       	ldi	r21, 0x00	; 0
    917a:	2d e0       	ldi	r18, 0x0D	; 13
    917c:	30 e0       	ldi	r19, 0x00	; 0
    917e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLead(strBalance);
    9182:	c8 01       	movw	r24, r16
    9184:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <RemSpaceLead>
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
    9188:	08 ed       	ldi	r16, 0xD8	; 216
    918a:	19 e0       	ldi	r17, 0x09	; 9
    918c:	ce 01       	movw	r24, r28
    918e:	b8 01       	movw	r22, r16
    9190:	4f eb       	ldi	r20, 0xBF	; 191
    9192:	50 e0       	ldi	r21, 0x00	; 0
    9194:	2a e0       	ldi	r18, 0x0A	; 10
    9196:	30 e0       	ldi	r19, 0x00	; 0
    9198:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLag(strLicPlate);
    919c:	c8 01       	movw	r24, r16
    919e:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		 //CompName
		 StrPosCopy(rcv_trans,strCompName,203-2,20);
    91a2:	07 e5       	ldi	r16, 0x57	; 87
    91a4:	18 e0       	ldi	r17, 0x08	; 8
    91a6:	ce 01       	movw	r24, r28
    91a8:	b8 01       	movw	r22, r16
    91aa:	49 ec       	ldi	r20, 0xC9	; 201
    91ac:	50 e0       	ldi	r21, 0x00	; 0
    91ae:	24 e1       	ldi	r18, 0x14	; 20
    91b0:	30 e0       	ldi	r19, 0x00	; 0
    91b2:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLag(strCompName);
    91b6:	c8 01       	movw	r24, r16
    91b8:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		 uart_print(0,1,strCompName);
		 
uart_print(0,1,strCardID);
*/	
     return Result;
}
    91bc:	8f 2d       	mov	r24, r15
    91be:	df 91       	pop	r29
    91c0:	cf 91       	pop	r28
    91c2:	1f 91       	pop	r17
    91c4:	0f 91       	pop	r16
    91c6:	ff 90       	pop	r15
    91c8:	08 95       	ret

000091ca <procMessage81>:

char procMessage81(){// Result: HFCS0000
    91ca:	1f 93       	push	r17
     char Result=0,PrintCopy=0;//
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    91cc:	80 91 20 0a 	lds	r24, 0x0A20
    91d0:	89 35       	cpi	r24, 0x59	; 89
    91d2:	11 f0       	breq	.+4      	; 0x91d8 <procMessage81+0xe>
*/	
     return Result;
}

char procMessage81(){// Result: HFCS0000
     char Result=0,PrintCopy=0;//
    91d4:	10 e0       	ldi	r17, 0x00	; 0
    91d6:	01 c0       	rjmp	.+2      	; 0x91da <procMessage81+0x10>
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    91d8:	10 e8       	ldi	r17, 0x80	; 128
     //PrintFooter
	 if ((CharPosCopy(rcv_trans,38))=='Y') Result=(Result|(1<<6));
    91da:	80 91 21 0a 	lds	r24, 0x0A21
    91de:	89 35       	cpi	r24, 0x59	; 89
    91e0:	09 f4       	brne	.+2      	; 0x91e4 <procMessage81+0x1a>
    91e2:	10 64       	ori	r17, 0x40	; 64
	 //PaperCut
     if ((CharPosCopy(rcv_trans,39))=='Y') Result=(Result|(1<<5));
    91e4:	80 91 22 0a 	lds	r24, 0x0A22
    91e8:	89 35       	cpi	r24, 0x59	; 89
    91ea:	09 f4       	brne	.+2      	; 0x91ee <procMessage81+0x24>
    91ec:	10 62       	ori	r17, 0x20	; 32
	 //Scrool
	 Result=(Result|(1<<4));
    91ee:	10 61       	ori	r17, 0x10	; 16

	 //Copies
	 PrintCopy=(CharPosCopy(rcv_trans,40)-'0');
    91f0:	80 91 23 0a 	lds	r24, 0x0A23
    91f4:	80 53       	subi	r24, 0x30	; 48
     if (PrintCopy<=16) Result=Result|PrintCopy;
    91f6:	81 31       	cpi	r24, 0x11	; 17
    91f8:	08 f4       	brcc	.+2      	; 0x91fc <procMessage81+0x32>
    91fa:	18 2b       	or	r17, r24
	 //Spooling
     StrPosCopy(rcv_trans,PrintBuffer,44,LengthMessage81);
    91fc:	20 91 6b 02 	lds	r18, 0x026B
    9200:	30 91 6c 02 	lds	r19, 0x026C
    9204:	8b ef       	ldi	r24, 0xFB	; 251
    9206:	99 e0       	ldi	r25, 0x09	; 9
    9208:	6a ec       	ldi	r22, 0xCA	; 202
    920a:	74 e0       	ldi	r23, 0x04	; 4
    920c:	4c e2       	ldi	r20, 0x2C	; 44
    920e:	50 e0       	ldi	r21, 0x00	; 0
    9210:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 //sprintf(lcdteks,"cmdPrint:%d ",Result);
     //uart_print(0,1,lcdteks);

	 //while(1){};
	 return Result;
}
    9214:	81 2f       	mov	r24, r17
    9216:	1f 91       	pop	r17
    9218:	08 95       	ret

0000921a <RemDecimal>:
	 }
}



void RemDecimal(char *strDecimal){//4500.00-->4500
    921a:	ef 92       	push	r14
    921c:	ff 92       	push	r15
    921e:	cf 93       	push	r28
    9220:	df 93       	push	r29
    9222:	ec 01       	movw	r28, r24
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    9224:	8e e3       	ldi	r24, 0x3E	; 62
    9226:	90 e0       	ldi	r25, 0x00	; 0
    9228:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>

     for(i=0;i<strlen(strDecimal);i++){
    922c:	90 e0       	ldi	r25, 0x00	; 0
    922e:	08 c0       	rjmp	.+16     	; 0x9240 <RemDecimal+0x26>
	     if (strDecimal[i]==DecPointMark)
    9230:	fe 01       	movw	r30, r28
    9232:	e2 0f       	add	r30, r18
    9234:	f3 1f       	adc	r31, r19
    9236:	20 81       	ld	r18, Z
    9238:	28 17       	cp	r18, r24
    923a:	09 f4       	brne	.+2      	; 0x923e <RemDecimal+0x24>
		     strDecimal[i]=0;
    923c:	10 82       	st	Z, r1

void RemDecimal(char *strDecimal){//4500.00-->4500
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 

     for(i=0;i<strlen(strDecimal);i++){
    923e:	9f 5f       	subi	r25, 0xFF	; 255
    9240:	29 2f       	mov	r18, r25
    9242:	30 e0       	ldi	r19, 0x00	; 0
    9244:	7e 01       	movw	r14, r28
    9246:	ac 2f       	mov	r26, r28
    9248:	bf 2d       	mov	r27, r15
    924a:	fd 01       	movw	r30, r26
    924c:	01 90       	ld	r0, Z+
    924e:	00 20       	and	r0, r0
    9250:	e9 f7       	brne	.-6      	; 0x924c <RemDecimal+0x32>
    9252:	31 97       	sbiw	r30, 0x01	; 1
    9254:	ea 1b       	sub	r30, r26
    9256:	fb 0b       	sbc	r31, r27
    9258:	2e 17       	cp	r18, r30
    925a:	3f 07       	cpc	r19, r31
    925c:	48 f3       	brcs	.-46     	; 0x9230 <RemDecimal+0x16>
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}
    925e:	df 91       	pop	r29
    9260:	cf 91       	pop	r28
    9262:	ff 90       	pop	r15
    9264:	ef 90       	pop	r14
    9266:	08 95       	ret

00009268 <SpaceOnly>:
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    9268:	fc 01       	movw	r30, r24
    926a:	01 90       	ld	r0, Z+
    926c:	00 20       	and	r0, r0
    926e:	e9 f7       	brne	.-6      	; 0x926a <SpaceOnly+0x2>
    9270:	31 97       	sbiw	r30, 0x01	; 1
    9272:	e8 1b       	sub	r30, r24
    9274:	f9 0b       	sbc	r31, r25
    9276:	dc 01       	movw	r26, r24
    9278:	80 e0       	ldi	r24, 0x00	; 0
    927a:	90 e0       	ldi	r25, 0x00	; 0
}

char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
    927c:	20 e0       	ldi	r18, 0x00	; 0
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    927e:	05 c0       	rjmp	.+10     	; 0x928a <SpaceOnly+0x22>
	    if(string[i]!=' ') nChar++;
    9280:	3d 91       	ld	r19, X+
    9282:	30 32       	cpi	r19, 0x20	; 32
    9284:	09 f0       	breq	.+2      	; 0x9288 <SpaceOnly+0x20>
    9286:	2f 5f       	subi	r18, 0xFF	; 255
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    9288:	01 96       	adiw	r24, 0x01	; 1
    928a:	8e 17       	cp	r24, r30
    928c:	9f 07       	cpc	r25, r31
    928e:	c0 f3       	brcs	.-16     	; 0x9280 <SpaceOnly+0x18>
	    if(string[i]!=' ') nChar++;
	 }
	 if (nChar>0) Result=False;
    9290:	81 e0       	ldi	r24, 0x01	; 1
    9292:	21 11       	cpse	r18, r1
    9294:	80 e0       	ldi	r24, 0x00	; 0
	 else Result=True;

	 return Result;
}
    9296:	08 95       	ret

00009298 <PaperCut>:


void PaperCut(){
    9298:	1f 93       	push	r17
     char CutType;
     CutType= eeprom_read_byte(&DefPrintAutoCut);
    929a:	83 e3       	ldi	r24, 0x33	; 51
    929c:	90 e0       	ldi	r25, 0x00	; 0
    929e:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    92a2:	18 2f       	mov	r17, r24
     uart(_COM_PRINTER, 1, 0x1B);
    92a4:	80 e0       	ldi	r24, 0x00	; 0
    92a6:	61 e0       	ldi	r22, 0x01	; 1
    92a8:	4b e1       	ldi	r20, 0x1B	; 27
    92aa:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
    92ae:	11 30       	cpi	r17, 0x01	; 1
    92b0:	21 f4       	brne	.+8      	; 0x92ba <PaperCut+0x22>
    92b2:	80 e0       	ldi	r24, 0x00	; 0
    92b4:	61 e0       	ldi	r22, 0x01	; 1
    92b6:	4d e6       	ldi	r20, 0x6D	; 109
    92b8:	05 c0       	rjmp	.+10     	; 0x92c4 <PaperCut+0x2c>
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}
    92ba:	12 30       	cpi	r17, 0x02	; 2
    92bc:	29 f4       	brne	.+10     	; 0x92c8 <PaperCut+0x30>
    92be:	80 e0       	ldi	r24, 0x00	; 0
    92c0:	61 e0       	ldi	r22, 0x01	; 1
    92c2:	49 e6       	ldi	r20, 0x69	; 105
    92c4:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>

}
    92c8:	1f 91       	pop	r17
    92ca:	08 95       	ret

000092cc <FillChar>:

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    92cc:	28 2f       	mov	r18, r24
    92ce:	39 2f       	mov	r19, r25
    92d0:	f9 01       	movw	r30, r18
    92d2:	80 e0       	ldi	r24, 0x00	; 0
    92d4:	90 e0       	ldi	r25, 0x00	; 0
    92d6:	02 c0       	rjmp	.+4      	; 0x92dc <FillChar+0x10>
	     strMemory[i]=data;
    92d8:	41 93       	st	Z+, r20

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    92da:	01 96       	adiw	r24, 0x01	; 1
    92dc:	86 17       	cp	r24, r22
    92de:	97 07       	cpc	r25, r23
    92e0:	d8 f3       	brcs	.-10     	; 0x92d8 <FillChar+0xc>
	     strMemory[i]=data;
	 }
}
    92e2:	08 95       	ret

000092e4 <procMessage11>:
}




void procMessage11(){
    92e4:	af 92       	push	r10
    92e6:	bf 92       	push	r11
    92e8:	cf 92       	push	r12
    92ea:	df 92       	push	r13
    92ec:	ef 92       	push	r14
    92ee:	ff 92       	push	r15
    92f0:	0f 93       	push	r16
    92f2:	1f 93       	push	r17
    92f4:	df 93       	push	r29
    92f6:	cf 93       	push	r28
    92f8:	cd b7       	in	r28, 0x3d	; 61
    92fa:	de b7       	in	r29, 0x3e	; 62
    92fc:	c0 59       	subi	r28, 0x90	; 144
    92fe:	d0 40       	sbci	r29, 0x00	; 0
    9300:	0f b6       	in	r0, 0x3f	; 63
    9302:	f8 94       	cli
    9304:	de bf       	out	0x3e, r29	; 62
    9306:	0f be       	out	0x3f, r0	; 63
    9308:	cd bf       	out	0x3d, r28	; 61
     unsigned int i;	 
     char buffHeader[50],strReadEEPROM[50];
	 char strProductName[13],strProductPrice[9],strTime[12],strDate[10];

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
    930a:	4a e0       	ldi	r20, 0x0A	; 10
    930c:	e4 2e       	mov	r14, r20
    930e:	f1 2c       	mov	r15, r1
    9310:	ec 0e       	add	r14, r28
    9312:	fd 1e       	adc	r15, r29
    9314:	8b ef       	ldi	r24, 0xFB	; 251
    9316:	99 e0       	ldi	r25, 0x09	; 9
    9318:	b7 01       	movw	r22, r14
    931a:	4b e2       	ldi	r20, 0x2B	; 43
    931c:	50 e0       	ldi	r21, 0x00	; 0
    931e:	2a e0       	ldi	r18, 0x0A	; 10
    9320:	30 e0       	ldi	r19, 0x00	; 0
    9322:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 FormatDate(DATE_SHORT_YEAR,strDate);
    9326:	81 e0       	ldi	r24, 0x01	; 1
    9328:	b7 01       	movw	r22, r14
    932a:	0e 94 95 3d 	call	0x7b2a	; 0x7b2a <FormatDate>
	 StrPosCopy(rcv_trans,strTime,54,8);
    932e:	8e 01       	movw	r16, r28
    9330:	0c 5e       	subi	r16, 0xEC	; 236
    9332:	1f 4f       	sbci	r17, 0xFF	; 255
    9334:	8b ef       	ldi	r24, 0xFB	; 251
    9336:	99 e0       	ldi	r25, 0x09	; 9
    9338:	b8 01       	movw	r22, r16
    933a:	46 e3       	ldi	r20, 0x36	; 54
    933c:	50 e0       	ldi	r21, 0x00	; 0
    933e:	28 e0       	ldi	r18, 0x08	; 8
    9340:	30 e0       	ldi	r19, 0x00	; 0
    9342:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    9346:	81 e0       	ldi	r24, 0x01	; 1
    9348:	b7 01       	movw	r22, r14
    934a:	a8 01       	movw	r20, r16
    934c:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <_datetime>
    9350:	07 e2       	ldi	r16, 0x27	; 39
    9352:	12 e0       	ldi	r17, 0x02	; 2
    9354:	3e e3       	ldi	r19, 0x3E	; 62
    9356:	e3 2e       	mov	r14, r19
    9358:	f1 2c       	mov	r15, r1
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
    935a:	2d e2       	ldi	r18, 0x2D	; 45
    935c:	c2 2e       	mov	r12, r18
    935e:	d1 2c       	mov	r13, r1
    9360:	cc 0e       	add	r12, r28
    9362:	dd 1e       	adc	r13, r29
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    9364:	9f e5       	ldi	r25, 0x5F	; 95
    9366:	a9 2e       	mov	r10, r25
    9368:	b1 2c       	mov	r11, r1
    936a:	ac 0e       	add	r10, r28
    936c:	bd 1e       	adc	r11, r29
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
    936e:	c6 01       	movw	r24, r12
    9370:	60 e0       	ldi	r22, 0x00	; 0
    9372:	70 e0       	ldi	r23, 0x00	; 0
    9374:	42 e3       	ldi	r20, 0x32	; 50
    9376:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
    937a:	8b ef       	ldi	r24, 0xFB	; 251
    937c:	99 e0       	ldi	r25, 0x09	; 9
    937e:	b6 01       	movw	r22, r12
    9380:	a7 01       	movw	r20, r14
    9382:	28 e2       	ldi	r18, 0x28	; 40
    9384:	30 e0       	ldi	r19, 0x00	; 0
    9386:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    938a:	c5 01       	movw	r24, r10
    938c:	b8 01       	movw	r22, r16
    938e:	49 e2       	ldi	r20, 0x29	; 41
    9390:	50 e0       	ldi	r21, 0x00	; 0
    9392:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	     if (strcmp(strReadEEPROM,buffHeader)!=0)
    9396:	c5 01       	movw	r24, r10
    9398:	b6 01       	movw	r22, r12
    939a:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    939e:	00 97       	sbiw	r24, 0x00	; 0
    93a0:	31 f0       	breq	.+12     	; 0x93ae <procMessage11+0xca>
		     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[i], 41);
    93a2:	c6 01       	movw	r24, r12
    93a4:	b8 01       	movw	r22, r16
    93a6:	49 e2       	ldi	r20, 0x29	; 41
    93a8:	50 e0       	ldi	r21, 0x00	; 0
    93aa:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    93ae:	88 e2       	ldi	r24, 0x28	; 40
    93b0:	90 e0       	ldi	r25, 0x00	; 0
    93b2:	e8 0e       	add	r14, r24
    93b4:	f9 1e       	adc	r15, r25
    93b6:	07 5d       	subi	r16, 0xD7	; 215
    93b8:	1f 4f       	sbci	r17, 0xFF	; 255
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    93ba:	9e ec       	ldi	r25, 0xCE	; 206
    93bc:	e9 16       	cp	r14, r25
    93be:	91 e0       	ldi	r25, 0x01	; 1
    93c0:	f9 06       	cpc	r15, r25
    93c2:	a9 f6       	brne	.-86     	; 0x936e <procMessage11+0x8a>
    93c4:	0b eb       	ldi	r16, 0xBB	; 187
    93c6:	10 e0       	ldi	r17, 0x00	; 0
    93c8:	86 ee       	ldi	r24, 0xE6	; 230
    93ca:	e8 2e       	mov	r14, r24
    93cc:	81 e0       	ldi	r24, 0x01	; 1
    93ce:	f8 2e       	mov	r15, r24
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
    93d0:	b0 e2       	ldi	r27, 0x20	; 32
    93d2:	cb 2e       	mov	r12, r27
    93d4:	d1 2c       	mov	r13, r1
    93d6:	cc 0e       	add	r12, r28
    93d8:	dd 1e       	adc	r13, r29
		RemSpaceLag(strProductName);
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    93da:	af e5       	ldi	r26, 0x5F	; 95
    93dc:	aa 2e       	mov	r10, r26
    93de:	b1 2c       	mov	r11, r1
    93e0:	ac 0e       	add	r10, r28
    93e2:	bd 1e       	adc	r11, r29
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
    93e4:	8b ef       	ldi	r24, 0xFB	; 251
    93e6:	99 e0       	ldi	r25, 0x09	; 9
    93e8:	b6 01       	movw	r22, r12
    93ea:	a7 01       	movw	r20, r14
    93ec:	2c e0       	ldi	r18, 0x0C	; 12
    93ee:	30 e0       	ldi	r19, 0x00	; 0
    93f0:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		RemSpaceLag(strProductName);
    93f4:	c6 01       	movw	r24, r12
    93f6:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    93fa:	c5 01       	movw	r24, r10
    93fc:	b8 01       	movw	r22, r16
    93fe:	4c e0       	ldi	r20, 0x0C	; 12
    9400:	50 e0       	ldi	r21, 0x00	; 0
    9402:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductName)!=0)
    9406:	c5 01       	movw	r24, r10
    9408:	b6 01       	movw	r22, r12
    940a:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    940e:	00 97       	sbiw	r24, 0x00	; 0
    9410:	31 f0       	breq	.+12     	; 0x941e <procMessage11+0x13a>
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
    9412:	c6 01       	movw	r24, r12
    9414:	b8 01       	movw	r22, r16
    9416:	4c e0       	ldi	r20, 0x0C	; 12
    9418:	50 e0       	ldi	r21, 0x00	; 0
    941a:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    941e:	8c e0       	ldi	r24, 0x0C	; 12
    9420:	90 e0       	ldi	r25, 0x00	; 0
    9422:	e8 0e       	add	r14, r24
    9424:	f9 1e       	adc	r15, r25
    9426:	03 5f       	subi	r16, 0xF3	; 243
    9428:	1f 4f       	sbci	r17, 0xFF	; 255
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    942a:	9e e2       	ldi	r25, 0x2E	; 46
    942c:	e9 16       	cp	r14, r25
    942e:	92 e0       	ldi	r25, 0x02	; 2
    9430:	f9 06       	cpc	r15, r25
    9432:	c1 f6       	brne	.-80     	; 0x93e4 <procMessage11+0x100>
    9434:	f5 e8       	ldi	r31, 0x85	; 133
    9436:	ef 2e       	mov	r14, r31
    9438:	f0 e0       	ldi	r31, 0x00	; 0
    943a:	ff 2e       	mov	r15, r31
    943c:	ee e2       	ldi	r30, 0x2E	; 46
    943e:	ce 2e       	mov	r12, r30
    9440:	e2 e0       	ldi	r30, 0x02	; 2
    9442:	de 2e       	mov	r13, r30
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
    9444:	8e 01       	movw	r16, r28
    9446:	0f 5f       	subi	r16, 0xFF	; 255
    9448:	1f 4f       	sbci	r17, 0xFF	; 255
		RemSpaceLag(strProductPrice);
		RemZeroLead(strProductPrice);
		RemDecimal(strProductPrice);

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    944a:	7f e5       	ldi	r23, 0x5F	; 95
    944c:	a7 2e       	mov	r10, r23
    944e:	b1 2c       	mov	r11, r1
    9450:	ac 0e       	add	r10, r28
    9452:	bd 1e       	adc	r11, r29
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
    9454:	8b ef       	ldi	r24, 0xFB	; 251
    9456:	99 e0       	ldi	r25, 0x09	; 9
    9458:	b8 01       	movw	r22, r16
    945a:	a6 01       	movw	r20, r12
    945c:	28 e0       	ldi	r18, 0x08	; 8
    945e:	30 e0       	ldi	r19, 0x00	; 0
    9460:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		RemSpaceLag(strProductPrice);
    9464:	c8 01       	movw	r24, r16
    9466:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		RemZeroLead(strProductPrice);
    946a:	c8 01       	movw	r24, r16
    946c:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		RemDecimal(strProductPrice);
    9470:	c8 01       	movw	r24, r16
    9472:	0e 94 0d 49 	call	0x921a	; 0x921a <RemDecimal>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    9476:	c5 01       	movw	r24, r10
    9478:	b7 01       	movw	r22, r14
    947a:	48 e0       	ldi	r20, 0x08	; 8
    947c:	50 e0       	ldi	r21, 0x00	; 0
    947e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
    9482:	c5 01       	movw	r24, r10
    9484:	b8 01       	movw	r22, r16
    9486:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    948a:	00 97       	sbiw	r24, 0x00	; 0
    948c:	31 f0       	breq	.+12     	; 0x949a <procMessage11+0x1b6>
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
    948e:	c8 01       	movw	r24, r16
    9490:	b7 01       	movw	r22, r14
    9492:	48 e0       	ldi	r20, 0x08	; 8
    9494:	50 e0       	ldi	r21, 0x00	; 0
    9496:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    949a:	88 e0       	ldi	r24, 0x08	; 8
    949c:	90 e0       	ldi	r25, 0x00	; 0
    949e:	c8 0e       	add	r12, r24
    94a0:	d9 1e       	adc	r13, r25
    94a2:	89 e0       	ldi	r24, 0x09	; 9
    94a4:	90 e0       	ldi	r25, 0x00	; 0
    94a6:	e8 0e       	add	r14, r24
    94a8:	f9 1e       	adc	r15, r25
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
    94aa:	9e e5       	ldi	r25, 0x5E	; 94
    94ac:	c9 16       	cp	r12, r25
    94ae:	92 e0       	ldi	r25, 0x02	; 2
    94b0:	d9 06       	cpc	r13, r25
    94b2:	81 f6       	brne	.-96     	; 0x9454 <procMessage11+0x170>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
	 }
}
    94b4:	c0 57       	subi	r28, 0x70	; 112
    94b6:	df 4f       	sbci	r29, 0xFF	; 255
    94b8:	0f b6       	in	r0, 0x3f	; 63
    94ba:	f8 94       	cli
    94bc:	de bf       	out	0x3e, r29	; 62
    94be:	0f be       	out	0x3f, r0	; 63
    94c0:	cd bf       	out	0x3d, r28	; 61
    94c2:	cf 91       	pop	r28
    94c4:	df 91       	pop	r29
    94c6:	1f 91       	pop	r17
    94c8:	0f 91       	pop	r16
    94ca:	ff 90       	pop	r15
    94cc:	ef 90       	pop	r14
    94ce:	df 90       	pop	r13
    94d0:	cf 90       	pop	r12
    94d2:	bf 90       	pop	r11
    94d4:	af 90       	pop	r10
    94d6:	08 95       	ret

000094d8 <InitializeConnection>:
void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
    94d8:	cf 92       	push	r12
    94da:	df 92       	push	r13
    94dc:	ef 92       	push	r14
    94de:	ff 92       	push	r15
    94e0:	0f 93       	push	r16
    94e2:	1f 93       	push	r17
    94e4:	df 93       	push	r29
    94e6:	cf 93       	push	r28
    94e8:	cd b7       	in	r28, 0x3d	; 61
    94ea:	de b7       	in	r29, 0x3e	; 62
    94ec:	65 97       	sbiw	r28, 0x15	; 21
    94ee:	0f b6       	in	r0, 0x3f	; 63
    94f0:	f8 94       	cli
    94f2:	de bf       	out	0x3e, r29	; 62
    94f4:	0f be       	out	0x3f, r0	; 63
    94f6:	cd bf       	out	0x3d, r28	; 61
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
	char lcdteks[20];
	IFType=eeprom_read_byte(&DefInitIFT);
    94f8:	86 e3       	ldi	r24, 0x36	; 54
    94fa:	91 e0       	ldi	r25, 0x01	; 1
    94fc:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    9500:	08 2f       	mov	r16, r24
    9502:	80 93 00 01 	sts	0x0100, r24
	DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    9506:	87 e3       	ldi	r24, 0x37	; 55
    9508:	91 e0       	ldi	r25, 0x01	; 1
    950a:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    950e:	80 93 3c 02 	sts	0x023C, r24

	//SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);

    //Send Msg10
	if  (IFType==IT_SLAVE){
    9512:	01 30       	cpi	r16, 0x01	; 1
    9514:	09 f0       	breq	.+2      	; 0x9518 <InitializeConnection+0x40>
    9516:	65 c0       	rjmp	.+202    	; 0x95e2 <InitializeConnection+0x10a>
	     SendSlaveCommand(SC_SLAVE,ST_NONE);
    9518:	81 e0       	ldi	r24, 0x01	; 1
    951a:	60 e0       	ldi	r22, 0x00	; 0
    951c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
		 char_count=0;
    9520:	10 92 68 02 	sts	0x0268, r1
    9524:	10 92 67 02 	sts	0x0267, r1
		 if (IsPowerOn==True){
    9528:	80 91 98 03 	lds	r24, 0x0398
    952c:	81 30       	cpi	r24, 0x01	; 1
    952e:	69 f4       	brne	.+26     	; 0x954a <InitializeConnection+0x72>
		     IsPowerOn=False;
    9530:	10 92 98 03 	sts	0x0398, r1
    9534:	8f ef       	ldi	r24, 0xFF	; 255
    9536:	9f ef       	ldi	r25, 0xFF	; 255
    9538:	ab e2       	ldi	r26, 0x2B	; 43
    953a:	b1 e0       	ldi	r27, 0x01	; 1
    953c:	81 50       	subi	r24, 0x01	; 1
    953e:	90 40       	sbci	r25, 0x00	; 0
    9540:	a0 40       	sbci	r26, 0x00	; 0
    9542:	b0 40       	sbci	r27, 0x00	; 0
    9544:	d9 f7       	brne	.-10     	; 0x953c <InitializeConnection+0x64>
    9546:	00 c0       	rjmp	.+0      	; 0x9548 <InitializeConnection+0x70>
    9548:	00 00       	nop
		     _delay_ms(8000);
			 }
         sendMessage10();
    954a:	0e 94 3d 2a 	call	0x547a	; 0x547a <sendMessage10>
         sendMessage10();
    954e:	0e 94 3d 2a 	call	0x547a	; 0x547a <sendMessage10>
         sendMessage10();
    9552:	0e 94 3d 2a 	call	0x547a	; 0x547a <sendMessage10>
         

         lcd_printf(4,1,PSTR("Connect         "));
    9556:	84 e0       	ldi	r24, 0x04	; 4
    9558:	61 e0       	ldi	r22, 0x01	; 1
    955a:	4d ea       	ldi	r20, 0xAD	; 173
    955c:	5e e1       	ldi	r21, 0x1E	; 30
    955e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 lcd_printf(4,1,PSTR("Connect"));
    9562:	84 e0       	ldi	r24, 0x04	; 4
    9564:	61 e0       	ldi	r22, 0x01	; 1
    9566:	45 ea       	ldi	r20, 0xA5	; 165
    9568:	5e e1       	ldi	r21, 0x1E	; 30
    956a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
    956e:	10 92 7e 02 	sts	0x027E, r1
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
    9572:	dd 24       	eor	r13, r13
    9574:	20 e0       	ldi	r18, 0x00	; 0
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
	unsigned int tConnect=0;
    9576:	00 e0       	ldi	r16, 0x00	; 0
    9578:	10 e0       	ldi	r17, 0x00	; 0
		  //SlaveIdentification		  
		 while (IsMessage11==False){
		        lcd_put(4,(8+iCon),'.');
                tConnect++;
				__key_lgtcnt=0;
			    if ((tConnect%200)==0)iCon++;
    957a:	78 ec       	ldi	r23, 0xC8	; 200
    957c:	e7 2e       	mov	r14, r23
    957e:	f1 2c       	mov	r15, r1
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
    9580:	2c c0       	rjmp	.+88     	; 0x95da <InitializeConnection+0x102>
		        lcd_put(4,(8+iCon),'.');
    9582:	62 2f       	mov	r22, r18
    9584:	68 5f       	subi	r22, 0xF8	; 248
    9586:	84 e0       	ldi	r24, 0x04	; 4
    9588:	4e e2       	ldi	r20, 0x2E	; 46
    958a:	2d 8b       	std	Y+21, r18	; 0x15
    958c:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
                tConnect++;
    9590:	0f 5f       	subi	r16, 0xFF	; 255
    9592:	1f 4f       	sbci	r17, 0xFF	; 255
				__key_lgtcnt=0;
    9594:	10 92 8d 03 	sts	0x038D, r1
			    if ((tConnect%200)==0)iCon++;
    9598:	c8 01       	movw	r24, r16
    959a:	b7 01       	movw	r22, r14
    959c:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    95a0:	2d 89       	ldd	r18, Y+21	; 0x15
    95a2:	00 97       	sbiw	r24, 0x00	; 0
    95a4:	09 f4       	brne	.+2      	; 0x95a8 <InitializeConnection+0xd0>
    95a6:	2f 5f       	subi	r18, 0xFF	; 255
			    if (iCon>8){
    95a8:	29 30       	cpi	r18, 0x09	; 9
    95aa:	70 f0       	brcs	.+28     	; 0x95c8 <InitializeConnection+0xf0>
			        lcd_printf(4,1,PSTR("Connect         "));
    95ac:	84 e0       	ldi	r24, 0x04	; 4
    95ae:	61 e0       	ldi	r22, 0x01	; 1
    95b0:	44 e9       	ldi	r20, 0x94	; 148
    95b2:	5e e1       	ldi	r21, 0x1E	; 30
    95b4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					
				    sendMessage10();
    95b8:	0e 94 3d 2a 	call	0x547a	; 0x547a <sendMessage10>
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
    95bc:	81 e0       	ldi	r24, 0x01	; 1
    95be:	60 e0       	ldi	r22, 0x00	; 0
    95c0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
			        iCon=0;
				    iTry++;}
    95c4:	d3 94       	inc	r13
			    if (iCon>8){
			        lcd_printf(4,1,PSTR("Connect         "));
					
				    sendMessage10();
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
			        iCon=0;
    95c6:	20 e0       	ldi	r18, 0x00	; 0
				    iTry++;}
			    if (iTry>3){
    95c8:	9d 2d       	mov	r25, r13
    95ca:	94 30       	cpi	r25, 0x04	; 4
    95cc:	30 f0       	brcs	.+12     	; 0x95da <InitializeConnection+0x102>
			        //IsErrorTCPIP=True;
				    IsAdvanzStartupInfo=False;		
    95ce:	10 92 88 02 	sts	0x0288, r1
					IFType=IT_STANDALONE;
    95d2:	82 e0       	ldi	r24, 0x02	; 2
    95d4:	80 93 00 01 	sts	0x0100, r24
				    break;
    95d8:	04 c0       	rjmp	.+8      	; 0x95e2 <InitializeConnection+0x10a>
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
    95da:	80 91 7e 02 	lds	r24, 0x027E
    95de:	88 23       	and	r24, r24
    95e0:	81 f2       	breq	.-96     	; 0x9582 <InitializeConnection+0xaa>

			    }
            }//EndWhile
		}

	if (IFType==IT_STANDALONE){
    95e2:	80 91 00 01 	lds	r24, 0x0100
    95e6:	82 30       	cpi	r24, 0x02	; 2
    95e8:	09 f0       	breq	.+2      	; 0x95ec <InitializeConnection+0x114>
    95ea:	77 c0       	rjmp	.+238    	; 0x96da <InitializeConnection+0x202>
        IsStandAloneDetected=False;		
    95ec:	10 92 7a 02 	sts	0x027A, r1
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
    95f0:	60 91 3c 02 	lds	r22, 0x023C
    95f4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
		tConnect=0,iCon=0,iTry=0;
	    lcd_clear();
    95f8:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	    lcd_printf(1,1,PSTR("Scan Pump"));
    95fc:	81 e0       	ldi	r24, 0x01	; 1
    95fe:	61 e0       	ldi	r22, 0x01	; 1
    9600:	4a e8       	ldi	r20, 0x8A	; 138
    9602:	5e e1       	ldi	r21, 0x1E	; 30
    9604:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
    9608:	87 e3       	ldi	r24, 0x37	; 55
    960a:	91 e0       	ldi	r25, 0x01	; 1
    960c:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    9610:	90 e0       	ldi	r25, 0x00	; 0
    9612:	88 0f       	add	r24, r24
    9614:	99 1f       	adc	r25, r25
    9616:	87 53       	subi	r24, 0x37	; 55
    9618:	9d 4f       	sbci	r25, 0xFD	; 253
    961a:	fc 01       	movw	r30, r24
    961c:	25 91       	lpm	r18, Z+
    961e:	34 91       	lpm	r19, Z+
    9620:	8e 01       	movw	r16, r28
    9622:	0f 5f       	subi	r16, 0xFF	; 255
    9624:	1f 4f       	sbci	r17, 0xFF	; 255
    9626:	c8 01       	movw	r24, r16
    9628:	b9 01       	movw	r22, r18
    962a:	0e 94 0c a6 	call	0x14c18	; 0x14c18 <strcpy_P>
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
    962e:	00 d0       	rcall	.+0      	; 0x9630 <InitializeConnection+0x158>
    9630:	00 d0       	rcall	.+0      	; 0x9632 <InitializeConnection+0x15a>
    9632:	00 d0       	rcall	.+0      	; 0x9634 <InitializeConnection+0x15c>
    9634:	ed b7       	in	r30, 0x3d	; 61
    9636:	fe b7       	in	r31, 0x3e	; 62
    9638:	31 96       	adiw	r30, 0x01	; 1
    963a:	ad b7       	in	r26, 0x3d	; 61
    963c:	be b7       	in	r27, 0x3e	; 62
    963e:	12 96       	adiw	r26, 0x02	; 2
    9640:	1c 93       	st	X, r17
    9642:	0e 93       	st	-X, r16
    9644:	11 97       	sbiw	r26, 0x01	; 1
    9646:	87 e8       	ldi	r24, 0x87	; 135
    9648:	9e e1       	ldi	r25, 0x1E	; 30
    964a:	93 83       	std	Z+3, r25	; 0x03
    964c:	82 83       	std	Z+2, r24	; 0x02
    964e:	15 83       	std	Z+5, r17	; 0x05
    9650:	04 83       	std	Z+4, r16	; 0x04
    9652:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	    lcd_print(2,1,lcdteks);
    9656:	8d b7       	in	r24, 0x3d	; 61
    9658:	9e b7       	in	r25, 0x3e	; 62
    965a:	06 96       	adiw	r24, 0x06	; 6
    965c:	0f b6       	in	r0, 0x3f	; 63
    965e:	f8 94       	cli
    9660:	9e bf       	out	0x3e, r25	; 62
    9662:	0f be       	out	0x3f, r0	; 63
    9664:	8d bf       	out	0x3d, r24	; 61
    9666:	82 e0       	ldi	r24, 0x02	; 2
    9668:	61 e0       	ldi	r22, 0x01	; 1
    966a:	a8 01       	movw	r20, r16
    966c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		}

	if (IFType==IT_STANDALONE){
        IsStandAloneDetected=False;		
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
		tConnect=0,iCon=0,iTry=0;
    9670:	cc 24       	eor	r12, r12
    9672:	dd 24       	eor	r13, r13
    9674:	00 e0       	ldi	r16, 0x00	; 0
    9676:	10 e0       	ldi	r17, 0x00	; 0
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
		       lcd_put(4,(1+iCon),'.');
		       tConnect++;
		       if ((tConnect%100)==0)iCon++;
    9678:	54 e6       	ldi	r21, 0x64	; 100
    967a:	e5 2e       	mov	r14, r21
    967c:	f1 2c       	mov	r15, r1
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
    967e:	29 c0       	rjmp	.+82     	; 0x96d2 <InitializeConnection+0x1fa>
		       lcd_put(4,(1+iCon),'.');
    9680:	2d 2d       	mov	r18, r13
    9682:	2f 5f       	subi	r18, 0xFF	; 255
    9684:	84 e0       	ldi	r24, 0x04	; 4
    9686:	62 2f       	mov	r22, r18
    9688:	4e e2       	ldi	r20, 0x2E	; 46
    968a:	2d 8b       	std	Y+21, r18	; 0x15
    968c:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
		       tConnect++;
    9690:	0f 5f       	subi	r16, 0xFF	; 255
    9692:	1f 4f       	sbci	r17, 0xFF	; 255
		       if ((tConnect%100)==0)iCon++;
    9694:	c8 01       	movw	r24, r16
    9696:	b7 01       	movw	r22, r14
    9698:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    969c:	2d 89       	ldd	r18, Y+21	; 0x15
    969e:	00 97       	sbiw	r24, 0x00	; 0
    96a0:	09 f0       	breq	.+2      	; 0x96a4 <InitializeConnection+0x1cc>
    96a2:	2d 2d       	mov	r18, r13
		       if (iCon>16){
    96a4:	21 31       	cpi	r18, 0x11	; 17
    96a6:	88 f0       	brcs	.+34     	; 0x96ca <InitializeConnection+0x1f2>
			       __key_lgtcnt=0;
    96a8:	10 92 8d 03 	sts	0x038D, r1
			       lcd_printf(4,1,PSTR("                   "));
    96ac:	84 e0       	ldi	r24, 0x04	; 4
    96ae:	61 e0       	ldi	r22, 0x01	; 1
    96b0:	43 e7       	ldi	r20, 0x73	; 115
    96b2:	5e e1       	ldi	r21, 0x1E	; 30
    96b4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
    96b8:	82 e0       	ldi	r24, 0x02	; 2
    96ba:	60 91 3c 02 	lds	r22, 0x023C
    96be:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
                   //InitStandalone();

			       DisplayPumpStatus();
    96c2:	0e 94 82 42 	call	0x8504	; 0x8504 <DisplayPumpStatus>
			       iCon=0;
			       iTry++;}
    96c6:	c3 94       	inc	r12
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
                   //InitStandalone();

			       DisplayPumpStatus();
			       iCon=0;
    96c8:	20 e0       	ldi	r18, 0x00	; 0
			       iTry++;}
		           if (iTry>3) break; 
    96ca:	9c 2d       	mov	r25, r12
    96cc:	94 30       	cpi	r25, 0x04	; 4
    96ce:	28 f4       	brcc	.+10     	; 0x96da <InitializeConnection+0x202>
    96d0:	d2 2e       	mov	r13, r18
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
    96d2:	80 91 7a 02 	lds	r24, 0x027A
    96d6:	88 23       	and	r24, r24
    96d8:	99 f2       	breq	.-90     	; 0x9680 <InitializeConnection+0x1a8>
			       iCon=0;
			       iTry++;}
		           if (iTry>3) break; 
	    }
	}//EndIf
	if(IsMessage11==True){
    96da:	00 91 7e 02 	lds	r16, 0x027E
    96de:	01 30       	cpi	r16, 0x01	; 1
    96e0:	d1 f4       	brne	.+52     	; 0x9716 <InitializeConnection+0x23e>
	   lcd_printf(4,1,PSTR("Connected           "));
    96e2:	84 e0       	ldi	r24, 0x04	; 4
    96e4:	61 e0       	ldi	r22, 0x01	; 1
    96e6:	4e e5       	ldi	r20, 0x5E	; 94
    96e8:	5e e1       	ldi	r21, 0x1E	; 30
    96ea:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_SLAVE);
    96ee:	86 e3       	ldi	r24, 0x36	; 54
    96f0:	91 e0       	ldi	r25, 0x01	; 1
    96f2:	61 e0       	ldi	r22, 0x01	; 1
    96f4:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	   IFType=IT_SLAVE;
    96f8:	00 93 00 01 	sts	0x0100, r16
    96fc:	8f ef       	ldi	r24, 0xFF	; 255
    96fe:	9f ef       	ldi	r25, 0xFF	; 255
    9700:	a6 e8       	ldi	r26, 0x86	; 134
    9702:	81 50       	subi	r24, 0x01	; 1
    9704:	90 40       	sbci	r25, 0x00	; 0
    9706:	a0 40       	sbci	r26, 0x00	; 0
    9708:	e1 f7       	brne	.-8      	; 0x9702 <InitializeConnection+0x22a>
    970a:	00 c0       	rjmp	.+0      	; 0x970c <InitializeConnection+0x234>
    970c:	00 00       	nop
	   _delay_ms(3000);
	   //IsErrorTCPIP=False;
	   procMessage11();
    970e:	0e 94 72 49 	call	0x92e4	; 0x92e4 <procMessage11>
	   IsAdvanzStartupInfo=True;
    9712:	00 93 88 02 	sts	0x0288, r16
	}
	if(IsStandAloneDetected==True){
    9716:	80 91 7a 02 	lds	r24, 0x027A
    971a:	81 30       	cpi	r24, 0x01	; 1
    971c:	71 f4       	brne	.+28     	; 0x973a <InitializeConnection+0x262>
	   lcd_printf(4,1,PSTR("PumpFound"));
    971e:	84 e0       	ldi	r24, 0x04	; 4
    9720:	61 e0       	ldi	r22, 0x01	; 1
    9722:	44 e5       	ldi	r20, 0x54	; 84
    9724:	5e e1       	ldi	r21, 0x1E	; 30
    9726:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_STANDALONE);
    972a:	86 e3       	ldi	r24, 0x36	; 54
    972c:	91 e0       	ldi	r25, 0x01	; 1
    972e:	62 e0       	ldi	r22, 0x02	; 2
    9730:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	   IFType=IT_STANDALONE;
    9734:	82 e0       	ldi	r24, 0x02	; 2
    9736:	80 93 00 01 	sts	0x0100, r24
	}
	//PrintStatus
	if (eeprom_read_byte(&DefPrintInitialize)==True)GeneratePrintInit();
    973a:	85 e3       	ldi	r24, 0x35	; 53
    973c:	91 e0       	ldi	r25, 0x01	; 1
    973e:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    9742:	81 30       	cpi	r24, 0x01	; 1
    9744:	11 f4       	brne	.+4      	; 0x974a <InitializeConnection+0x272>
    9746:	0e 94 48 16 	call	0x2c90	; 0x2c90 <GeneratePrintInit>
	if ((IsStandAloneDetected==False)&&(IsMessage11==False)){		
    974a:	80 91 7a 02 	lds	r24, 0x027A
    974e:	88 23       	and	r24, r24
    9750:	89 f5       	brne	.+98     	; 0x97b4 <InitializeConnection+0x2dc>
    9752:	80 91 7e 02 	lds	r24, 0x027E
    9756:	88 23       	and	r24, r24
    9758:	69 f5       	brne	.+90     	; 0x97b4 <InitializeConnection+0x2dc>
		 lcd_printf(2,1,PSTR("TCP/IP Error"));
    975a:	82 e0       	ldi	r24, 0x02	; 2
    975c:	61 e0       	ldi	r22, 0x01	; 1
    975e:	47 e4       	ldi	r20, 0x47	; 71
    9760:	5e e1       	ldi	r21, 0x1E	; 30
    9762:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 lcd_printf(3,1,PSTR("No Pump Found"));
    9766:	83 e0       	ldi	r24, 0x03	; 3
    9768:	61 e0       	ldi	r22, 0x01	; 1
    976a:	49 e3       	ldi	r20, 0x39	; 57
    976c:	5e e1       	ldi	r21, 0x1E	; 30
    976e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    9772:	8f ef       	ldi	r24, 0xFF	; 255
    9774:	9f ef       	ldi	r25, 0xFF	; 255
    9776:	a9 e5       	ldi	r26, 0x59	; 89
    9778:	81 50       	subi	r24, 0x01	; 1
    977a:	90 40       	sbci	r25, 0x00	; 0
    977c:	a0 40       	sbci	r26, 0x00	; 0
    977e:	e1 f7       	brne	.-8      	; 0x9778 <InitializeConnection+0x2a0>
    9780:	00 c0       	rjmp	.+0      	; 0x9782 <InitializeConnection+0x2aa>
    9782:	00 00       	nop
		 _delay_ms(2000);
		 ForceType=systemForceType();
    9784:	0e 94 cb 14 	call	0x2996	; 0x2996 <systemForceType>
		 if (ForceType=='1'){
    9788:	81 33       	cpi	r24, 0x31	; 49
    978a:	29 f4       	brne	.+10     	; 0x9796 <InitializeConnection+0x2be>
		     IFType=IT_SLAVE;
    978c:	81 e0       	ldi	r24, 0x01	; 1
    978e:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_SLAVE,ST_NONE);
    9792:	60 e0       	ldi	r22, 0x00	; 0
    9794:	07 c0       	rjmp	.+14     	; 0x97a4 <InitializeConnection+0x2cc>
         }
		 else
		 if (ForceType=='2'){
    9796:	82 33       	cpi	r24, 0x32	; 50
    9798:	39 f4       	brne	.+14     	; 0x97a8 <InitializeConnection+0x2d0>
		     IFType=IT_STANDALONE;
    979a:	82 e0       	ldi	r24, 0x02	; 2
    979c:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_STANDALONE,DispenserBrand);
    97a0:	60 91 3c 02 	lds	r22, 0x023C
    97a4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>

			 //SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,eeprom_read_byte(&DefPoolingPumpMax));

			 //InitStandalone();
         }
		 eeprom_write_byte(&DefInitIFT,IFType);
    97a8:	86 e3       	ldi	r24, 0x36	; 54
    97aa:	91 e0       	ldi	r25, 0x01	; 1
    97ac:	60 91 00 01 	lds	r22, 0x0100
    97b0:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	}
	InitMemory();
    97b4:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <InitMemory>
	//SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	
}
    97b8:	65 96       	adiw	r28, 0x15	; 21
    97ba:	0f b6       	in	r0, 0x3f	; 63
    97bc:	f8 94       	cli
    97be:	de bf       	out	0x3e, r29	; 62
    97c0:	0f be       	out	0x3f, r0	; 63
    97c2:	cd bf       	out	0x3d, r28	; 61
    97c4:	cf 91       	pop	r28
    97c6:	df 91       	pop	r29
    97c8:	1f 91       	pop	r17
    97ca:	0f 91       	pop	r16
    97cc:	ff 90       	pop	r15
    97ce:	ef 90       	pop	r14
    97d0:	df 90       	pop	r13
    97d2:	cf 90       	pop	r12
    97d4:	08 95       	ret

000097d6 <FMenuSettingFooter>:
	 }
   //_menu_header();   
   return Result;
}

char FMenuSettingFooter(){
    97d6:	ef 92       	push	r14
    97d8:	0f 93       	push	r16
    97da:	1f 93       	push	r17
    97dc:	df 93       	push	r29
    97de:	cf 93       	push	r28
    97e0:	cd b7       	in	r28, 0x3d	; 61
    97e2:	de b7       	in	r29, 0x3e	; 62
    97e4:	c6 54       	subi	r28, 0x46	; 70
    97e6:	d0 40       	sbci	r29, 0x00	; 0
    97e8:	0f b6       	in	r0, 0x3f	; 63
    97ea:	f8 94       	cli
    97ec:	de bf       	out	0x3e, r29	; 62
    97ee:	0f be       	out	0x3f, r0	; 63
    97f0:	cd bf       	out	0x3d, r28	; 61
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    97f2:	80 91 22 03 	lds	r24, 0x0322
    97f6:	84 30       	cpi	r24, 0x04	; 4
    97f8:	09 f4       	brne	.+2      	; 0x97fc <FMenuSettingFooter+0x26>
    97fa:	27 c1       	rjmp	.+590    	; 0x9a4a <FMenuSettingFooter+0x274>
    97fc:	85 30       	cpi	r24, 0x05	; 5
    97fe:	40 f4       	brcc	.+16     	; 0x9810 <FMenuSettingFooter+0x3a>
    9800:	81 30       	cpi	r24, 0x01	; 1
    9802:	79 f1       	breq	.+94     	; 0x9862 <FMenuSettingFooter+0x8c>
    9804:	81 30       	cpi	r24, 0x01	; 1
    9806:	88 f0       	brcs	.+34     	; 0x982a <FMenuSettingFooter+0x54>
    9808:	82 30       	cpi	r24, 0x02	; 2
    980a:	09 f0       	breq	.+2      	; 0x980e <FMenuSettingFooter+0x38>
    980c:	68 c1       	rjmp	.+720    	; 0x9ade <FMenuSettingFooter+0x308>
    980e:	72 c0       	rjmp	.+228    	; 0x98f4 <FMenuSettingFooter+0x11e>
    9810:	86 30       	cpi	r24, 0x06	; 6
    9812:	09 f4       	brne	.+2      	; 0x9816 <FMenuSettingFooter+0x40>
    9814:	c8 c0       	rjmp	.+400    	; 0x99a6 <FMenuSettingFooter+0x1d0>
    9816:	86 30       	cpi	r24, 0x06	; 6
    9818:	08 f4       	brcc	.+2      	; 0x981c <FMenuSettingFooter+0x46>
    981a:	b2 c0       	rjmp	.+356    	; 0x9980 <FMenuSettingFooter+0x1aa>
    981c:	87 30       	cpi	r24, 0x07	; 7
    981e:	09 f4       	brne	.+2      	; 0x9822 <FMenuSettingFooter+0x4c>
    9820:	22 c1       	rjmp	.+580    	; 0x9a66 <FMenuSettingFooter+0x290>
    9822:	88 30       	cpi	r24, 0x08	; 8
    9824:	09 f0       	breq	.+2      	; 0x9828 <FMenuSettingFooter+0x52>
    9826:	5b c1       	rjmp	.+694    	; 0x9ade <FMenuSettingFooter+0x308>
    9828:	56 c1       	rjmp	.+684    	; 0x9ad6 <FMenuSettingFooter+0x300>
	 case shInitHeader:
	      lcd_clear();
    982a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Footer1  3)Footer3"));
    982e:	81 e0       	ldi	r24, 0x01	; 1
    9830:	61 e0       	ldi	r22, 0x01	; 1
    9832:	41 e6       	ldi	r20, 0x61	; 97
    9834:	55 e1       	ldi	r21, 0x15	; 21
    9836:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Footer2  4)Footer4"));
    983a:	82 e0       	ldi	r24, 0x02	; 2
    983c:	61 e0       	ldi	r22, 0x01	; 1
    983e:	4c e4       	ldi	r20, 0x4C	; 76
    9840:	55 e1       	ldi	r21, 0x15	; 21
    9842:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("                    "));
    9846:	83 e0       	ldi	r24, 0x03	; 3
    9848:	61 e0       	ldi	r22, 0x01	; 1
    984a:	47 e3       	ldi	r20, 0x37	; 55
    984c:	55 e1       	ldi	r21, 0x15	; 21
    984e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    9852:	84 e0       	ldi	r24, 0x04	; 4
    9854:	61 e0       	ldi	r22, 0x01	; 1
    9856:	42 e2       	ldi	r20, 0x22	; 34
    9858:	55 e1       	ldi	r21, 0x15	; 21
    985a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    985e:	81 e0       	ldi	r24, 0x01	; 1
    9860:	fc c0       	rjmp	.+504    	; 0x9a5a <FMenuSettingFooter+0x284>
	      break;
      case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    9862:	81 e0       	ldi	r24, 0x01	; 1
    9864:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    9868:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    986c:	98 2f       	mov	r25, r24
    986e:	91 53       	subi	r25, 0x31	; 49
    9870:	96 30       	cpi	r25, 0x06	; 6
    9872:	d8 f5       	brcc	.+118    	; 0x98ea <FMenuSettingFooter+0x114>
		       HeaderIdx=KeyChar-'1';//
    9874:	90 93 21 03 	sts	0x0321, r25
			   lcd_clear();
    9878:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
    987c:	00 d0       	rcall	.+0      	; 0x987e <FMenuSettingFooter+0xa8>
    987e:	00 d0       	rcall	.+0      	; 0x9880 <FMenuSettingFooter+0xaa>
    9880:	00 d0       	rcall	.+0      	; 0x9882 <FMenuSettingFooter+0xac>
    9882:	ed b7       	in	r30, 0x3d	; 61
    9884:	fe b7       	in	r31, 0x3e	; 62
    9886:	31 96       	adiw	r30, 0x01	; 1
    9888:	8e 01       	movw	r16, r28
    988a:	0f 5f       	subi	r16, 0xFF	; 255
    988c:	1f 4f       	sbci	r17, 0xFF	; 255
    988e:	ad b7       	in	r26, 0x3d	; 61
    9890:	be b7       	in	r27, 0x3e	; 62
    9892:	12 96       	adiw	r26, 0x02	; 2
    9894:	1c 93       	st	X, r17
    9896:	0e 93       	st	-X, r16
    9898:	11 97       	sbiw	r26, 0x01	; 1
    989a:	83 e1       	ldi	r24, 0x13	; 19
    989c:	95 e1       	ldi	r25, 0x15	; 21
    989e:	93 83       	std	Z+3, r25	; 0x03
    98a0:	82 83       	std	Z+2, r24	; 0x02
    98a2:	80 91 21 03 	lds	r24, 0x0321
    98a6:	90 e0       	ldi	r25, 0x00	; 0
    98a8:	01 96       	adiw	r24, 0x01	; 1
    98aa:	95 83       	std	Z+5, r25	; 0x05
    98ac:	84 83       	std	Z+4, r24	; 0x04
    98ae:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    98b2:	8d b7       	in	r24, 0x3d	; 61
    98b4:	9e b7       	in	r25, 0x3e	; 62
    98b6:	06 96       	adiw	r24, 0x06	; 6
    98b8:	0f b6       	in	r0, 0x3f	; 63
    98ba:	f8 94       	cli
    98bc:	9e bf       	out	0x3e, r25	; 62
    98be:	0f be       	out	0x3f, r0	; 63
    98c0:	8d bf       	out	0x3d, r24	; 61
    98c2:	81 e0       	ldi	r24, 0x01	; 1
    98c4:	61 e0       	ldi	r22, 0x01	; 1
    98c6:	a8 01       	movw	r20, r16
    98c8:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    98cc:	84 e0       	ldi	r24, 0x04	; 4
    98ce:	61 e0       	ldi	r22, 0x01	; 1
    98d0:	44 e0       	ldi	r20, 0x04	; 4
    98d2:	55 e1       	ldi	r21, 0x15	; 21
    98d4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    98d8:	8a ec       	ldi	r24, 0xCA	; 202
    98da:	94 e0       	ldi	r25, 0x04	; 4
    98dc:	61 e9       	ldi	r22, 0x91	; 145
    98de:	71 e0       	ldi	r23, 0x01	; 1
    98e0:	40 e0       	ldi	r20, 0x00	; 0
    98e2:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
			   stSettingHeader=shEditHeader1;
    98e6:	82 e0       	ldi	r24, 0x02	; 2
    98e8:	b8 c0       	rjmp	.+368    	; 0x9a5a <FMenuSettingFooter+0x284>
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    98ea:	8a 32       	cpi	r24, 0x2A	; 42
    98ec:	09 f0       	breq	.+2      	; 0x98f0 <FMenuSettingFooter+0x11a>
    98ee:	f7 c0       	rjmp	.+494    	; 0x9ade <FMenuSettingFooter+0x308>
    98f0:	88 e0       	ldi	r24, 0x08	; 8
    98f2:	b3 c0       	rjmp	.+358    	; 0x9a5a <FMenuSettingFooter+0x284>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    98f4:	83 e0       	ldi	r24, 0x03	; 3
    98f6:	62 e0       	ldi	r22, 0x02	; 2
    98f8:	41 e0       	ldi	r20, 0x01	; 1
    98fa:	2a ec       	ldi	r18, 0xCA	; 202
    98fc:	34 e0       	ldi	r19, 0x04	; 4
    98fe:	00 e0       	ldi	r16, 0x00	; 0
    9900:	10 e0       	ldi	r17, 0x00	; 0
    9902:	e8 e2       	ldi	r30, 0x28	; 40
    9904:	ee 2e       	mov	r14, r30
    9906:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  if (uiResult==USER_OK){
    990a:	83 30       	cpi	r24, 0x03	; 3
    990c:	a9 f5       	brne	.+106    	; 0x9978 <FMenuSettingFooter+0x1a2>
			  lcd_clear();
    990e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    9912:	8a ec       	ldi	r24, 0xCA	; 202
    9914:	94 e0       	ldi	r25, 0x04	; 4
    9916:	68 e2       	ldi	r22, 0x28	; 40
    9918:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    991c:	8a ec       	ldi	r24, 0xCA	; 202
    991e:	94 e0       	ldi	r25, 0x04	; 4
    9920:	60 e7       	ldi	r22, 0x70	; 112
    9922:	79 e0       	ldi	r23, 0x09	; 9
    9924:	40 e0       	ldi	r20, 0x00	; 0
    9926:	50 e0       	ldi	r21, 0x00	; 0
    9928:	24 e1       	ldi	r18, 0x14	; 20
    992a:	30 e0       	ldi	r19, 0x00	; 0
    992c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    9930:	8a ec       	ldi	r24, 0xCA	; 202
    9932:	94 e0       	ldi	r25, 0x04	; 4
    9934:	61 e8       	ldi	r22, 0x81	; 129
    9936:	78 e0       	ldi	r23, 0x08	; 8
    9938:	44 e1       	ldi	r20, 0x14	; 20
    993a:	50 e0       	ldi	r21, 0x00	; 0
    993c:	24 e1       	ldi	r18, 0x14	; 20
    993e:	30 e0       	ldi	r19, 0x00	; 0
    9940:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

			  lcd_print(1,1,strFreeMessageLine1);			  
    9944:	81 e0       	ldi	r24, 0x01	; 1
    9946:	61 e0       	ldi	r22, 0x01	; 1
    9948:	40 e7       	ldi	r20, 0x70	; 112
    994a:	59 e0       	ldi	r21, 0x09	; 9
    994c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    9950:	82 e0       	ldi	r24, 0x02	; 2
    9952:	61 e0       	ldi	r22, 0x01	; 1
    9954:	41 e8       	ldi	r20, 0x81	; 129
    9956:	58 e0       	ldi	r21, 0x08	; 8
    9958:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    995c:	83 e0       	ldi	r24, 0x03	; 3
    995e:	61 e0       	ldi	r22, 0x01	; 1
    9960:	46 ef       	ldi	r20, 0xF6	; 246
    9962:	54 e1       	ldi	r21, 0x14	; 20
    9964:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    9968:	84 e0       	ldi	r24, 0x04	; 4
    996a:	61 e0       	ldi	r22, 0x01	; 1
    996c:	48 ee       	ldi	r20, 0xE8	; 232
    996e:	54 e1       	ldi	r21, 0x14	; 20
    9970:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    9974:	85 e0       	ldi	r24, 0x05	; 5
    9976:	71 c0       	rjmp	.+226    	; 0x9a5a <FMenuSettingFooter+0x284>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    9978:	81 30       	cpi	r24, 0x01	; 1
    997a:	09 f0       	breq	.+2      	; 0x997e <FMenuSettingFooter+0x1a8>
    997c:	b0 c0       	rjmp	.+352    	; 0x9ade <FMenuSettingFooter+0x308>
    997e:	a8 c0       	rjmp	.+336    	; 0x9ad0 <FMenuSettingFooter+0x2fa>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    9980:	81 e0       	ldi	r24, 0x01	; 1
    9982:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    9986:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
          if(KeyChar=='#'){
    998a:	83 32       	cpi	r24, 0x23	; 35
    998c:	39 f4       	brne	.+14     	; 0x999c <FMenuSettingFooter+0x1c6>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    998e:	8a ec       	ldi	r24, 0xCA	; 202
    9990:	94 e0       	ldi	r25, 0x04	; 4
    9992:	68 e2       	ldi	r22, 0x28	; 40
    9994:	70 e0       	ldi	r23, 0x00	; 0
    9996:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <StrAlignCenter>
    999a:	03 c0       	rjmp	.+6      	; 0x99a2 <FMenuSettingFooter+0x1cc>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    999c:	8a 32       	cpi	r24, 0x2A	; 42
    999e:	09 f0       	breq	.+2      	; 0x99a2 <FMenuSettingFooter+0x1cc>
    99a0:	9e c0       	rjmp	.+316    	; 0x9ade <FMenuSettingFooter+0x308>
    99a2:	86 e0       	ldi	r24, 0x06	; 6
    99a4:	5a c0       	rjmp	.+180    	; 0x9a5a <FMenuSettingFooter+0x284>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    99a6:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    99aa:	8a ec       	ldi	r24, 0xCA	; 202
    99ac:	94 e0       	ldi	r25, 0x04	; 4
    99ae:	60 e7       	ldi	r22, 0x70	; 112
    99b0:	79 e0       	ldi	r23, 0x09	; 9
    99b2:	40 e0       	ldi	r20, 0x00	; 0
    99b4:	50 e0       	ldi	r21, 0x00	; 0
    99b6:	24 e1       	ldi	r18, 0x14	; 20
    99b8:	30 e0       	ldi	r19, 0x00	; 0
    99ba:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    99be:	8a ec       	ldi	r24, 0xCA	; 202
    99c0:	94 e0       	ldi	r25, 0x04	; 4
    99c2:	61 e8       	ldi	r22, 0x81	; 129
    99c4:	78 e0       	ldi	r23, 0x08	; 8
    99c6:	44 e1       	ldi	r20, 0x14	; 20
    99c8:	50 e0       	ldi	r21, 0x00	; 0
    99ca:	24 e1       	ldi	r18, 0x14	; 20
    99cc:	30 e0       	ldi	r19, 0x00	; 0
    99ce:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
          lcd_print(1,1,strFreeMessageLine1);
    99d2:	81 e0       	ldi	r24, 0x01	; 1
    99d4:	61 e0       	ldi	r22, 0x01	; 1
    99d6:	40 e7       	ldi	r20, 0x70	; 112
    99d8:	59 e0       	ldi	r21, 0x09	; 9
    99da:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    99de:	82 e0       	ldi	r24, 0x02	; 2
    99e0:	61 e0       	ldi	r22, 0x01	; 1
    99e2:	41 e8       	ldi	r20, 0x81	; 129
    99e4:	58 e0       	ldi	r21, 0x08	; 8
    99e6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Footer%d ?"),HeaderIdx+1);
    99ea:	00 d0       	rcall	.+0      	; 0x99ec <FMenuSettingFooter+0x216>
    99ec:	00 d0       	rcall	.+0      	; 0x99ee <FMenuSettingFooter+0x218>
    99ee:	00 d0       	rcall	.+0      	; 0x99f0 <FMenuSettingFooter+0x21a>
    99f0:	ed b7       	in	r30, 0x3d	; 61
    99f2:	fe b7       	in	r31, 0x3e	; 62
    99f4:	31 96       	adiw	r30, 0x01	; 1
    99f6:	8e 01       	movw	r16, r28
    99f8:	0f 5f       	subi	r16, 0xFF	; 255
    99fa:	1f 4f       	sbci	r17, 0xFF	; 255
    99fc:	ad b7       	in	r26, 0x3d	; 61
    99fe:	be b7       	in	r27, 0x3e	; 62
    9a00:	12 96       	adiw	r26, 0x02	; 2
    9a02:	1c 93       	st	X, r17
    9a04:	0e 93       	st	-X, r16
    9a06:	11 97       	sbiw	r26, 0x01	; 1
    9a08:	88 ed       	ldi	r24, 0xD8	; 216
    9a0a:	94 e1       	ldi	r25, 0x14	; 20
    9a0c:	93 83       	std	Z+3, r25	; 0x03
    9a0e:	82 83       	std	Z+2, r24	; 0x02
    9a10:	80 91 21 03 	lds	r24, 0x0321
    9a14:	90 e0       	ldi	r25, 0x00	; 0
    9a16:	01 96       	adiw	r24, 0x01	; 1
    9a18:	95 83       	std	Z+5, r25	; 0x05
    9a1a:	84 83       	std	Z+4, r24	; 0x04
    9a1c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    9a20:	8d b7       	in	r24, 0x3d	; 61
    9a22:	9e b7       	in	r25, 0x3e	; 62
    9a24:	06 96       	adiw	r24, 0x06	; 6
    9a26:	0f b6       	in	r0, 0x3f	; 63
    9a28:	f8 94       	cli
    9a2a:	9e bf       	out	0x3e, r25	; 62
    9a2c:	0f be       	out	0x3f, r0	; 63
    9a2e:	8d bf       	out	0x3d, r24	; 61
    9a30:	83 e0       	ldi	r24, 0x03	; 3
    9a32:	61 e0       	ldi	r22, 0x01	; 1
    9a34:	a8 01       	movw	r20, r16
    9a36:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    9a3a:	84 e0       	ldi	r24, 0x04	; 4
    9a3c:	61 e0       	ldi	r22, 0x01	; 1
    9a3e:	4b ec       	ldi	r20, 0xCB	; 203
    9a40:	54 e1       	ldi	r21, 0x14	; 20
    9a42:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    9a46:	84 e0       	ldi	r24, 0x04	; 4
    9a48:	08 c0       	rjmp	.+16     	; 0x9a5a <FMenuSettingFooter+0x284>
	      break;       
     case shSaveHeaderQuestions:
          KeyChar=_key_btn(_key_scan(1));
    9a4a:	81 e0       	ldi	r24, 0x01	; 1
    9a4c:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    9a50:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    9a54:	83 32       	cpi	r24, 0x23	; 35
    9a56:	21 f4       	brne	.+8      	; 0x9a60 <FMenuSettingFooter+0x28a>
    9a58:	87 e0       	ldi	r24, 0x07	; 7
    9a5a:	80 93 22 03 	sts	0x0322, r24
    9a5e:	3f c0       	rjmp	.+126    	; 0x9ade <FMenuSettingFooter+0x308>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    9a60:	8a 32       	cpi	r24, 0x2A	; 42
    9a62:	e9 f5       	brne	.+122    	; 0x9ade <FMenuSettingFooter+0x308>
    9a64:	35 c0       	rjmp	.+106    	; 0x9ad0 <FMenuSettingFooter+0x2fa>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    9a66:	ad b7       	in	r26, 0x3d	; 61
    9a68:	be b7       	in	r27, 0x3e	; 62
    9a6a:	18 97       	sbiw	r26, 0x08	; 8
    9a6c:	0f b6       	in	r0, 0x3f	; 63
    9a6e:	f8 94       	cli
    9a70:	be bf       	out	0x3e, r27	; 62
    9a72:	0f be       	out	0x3f, r0	; 63
    9a74:	ad bf       	out	0x3d, r26	; 61
    9a76:	ed b7       	in	r30, 0x3d	; 61
    9a78:	fe b7       	in	r31, 0x3e	; 62
    9a7a:	31 96       	adiw	r30, 0x01	; 1
    9a7c:	8e 01       	movw	r16, r28
    9a7e:	0b 5e       	subi	r16, 0xEB	; 235
    9a80:	1f 4f       	sbci	r17, 0xFF	; 255
    9a82:	12 96       	adiw	r26, 0x02	; 2
    9a84:	1c 93       	st	X, r17
    9a86:	0e 93       	st	-X, r16
    9a88:	11 97       	sbiw	r26, 0x01	; 1
    9a8a:	86 ec       	ldi	r24, 0xC6	; 198
    9a8c:	94 e1       	ldi	r25, 0x14	; 20
    9a8e:	93 83       	std	Z+3, r25	; 0x03
    9a90:	82 83       	std	Z+2, r24	; 0x02
    9a92:	80 e7       	ldi	r24, 0x70	; 112
    9a94:	99 e0       	ldi	r25, 0x09	; 9
    9a96:	95 83       	std	Z+5, r25	; 0x05
    9a98:	84 83       	std	Z+4, r24	; 0x04
    9a9a:	81 e8       	ldi	r24, 0x81	; 129
    9a9c:	98 e0       	ldi	r25, 0x08	; 8
    9a9e:	97 83       	std	Z+7, r25	; 0x07
    9aa0:	86 83       	std	Z+6, r24	; 0x06
    9aa2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx+6],40);
    9aa6:	8d b7       	in	r24, 0x3d	; 61
    9aa8:	9e b7       	in	r25, 0x3e	; 62
    9aaa:	08 96       	adiw	r24, 0x08	; 8
    9aac:	0f b6       	in	r0, 0x3f	; 63
    9aae:	f8 94       	cli
    9ab0:	9e bf       	out	0x3e, r25	; 62
    9ab2:	0f be       	out	0x3f, r0	; 63
    9ab4:	8d bf       	out	0x3d, r24	; 61
    9ab6:	60 91 21 03 	lds	r22, 0x0321
    9aba:	89 e2       	ldi	r24, 0x29	; 41
    9abc:	68 9f       	mul	r22, r24
    9abe:	b0 01       	movw	r22, r0
    9ac0:	11 24       	eor	r1, r1
    9ac2:	63 5e       	subi	r22, 0xE3	; 227
    9ac4:	7c 4f       	sbci	r23, 0xFC	; 252
    9ac6:	c8 01       	movw	r24, r16
    9ac8:	48 e2       	ldi	r20, 0x28	; 40
    9aca:	50 e0       	ldi	r21, 0x00	; 0
    9acc:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx+6],40);

          stSettingHeader=shInitHeader;
    9ad0:	10 92 22 03 	sts	0x0322, r1
    9ad4:	04 c0       	rjmp	.+8      	; 0x9ade <FMenuSettingFooter+0x308>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    9ad6:	10 92 22 03 	sts	0x0322, r1
	      Result=MENU_DONE;
    9ada:	81 e0       	ldi	r24, 0x01	; 1
	      break;	 
    9adc:	01 c0       	rjmp	.+2      	; 0x9ae0 <FMenuSettingFooter+0x30a>
     char Result,uiResult;
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
    9ade:	80 e0       	ldi	r24, 0x00	; 0
          stSettingHeader=shInitHeader;
	      Result=MENU_DONE;
	      break;	 
	 }
   return Result;
}
    9ae0:	ca 5b       	subi	r28, 0xBA	; 186
    9ae2:	df 4f       	sbci	r29, 0xFF	; 255
    9ae4:	0f b6       	in	r0, 0x3f	; 63
    9ae6:	f8 94       	cli
    9ae8:	de bf       	out	0x3e, r29	; 62
    9aea:	0f be       	out	0x3f, r0	; 63
    9aec:	cd bf       	out	0x3d, r28	; 61
    9aee:	cf 91       	pop	r28
    9af0:	df 91       	pop	r29
    9af2:	1f 91       	pop	r17
    9af4:	0f 91       	pop	r16
    9af6:	ef 90       	pop	r14
    9af8:	08 95       	ret

00009afa <FMenuSettingHeader>:
	      break;
	 }
   return Result;
}

char FMenuSettingHeader(){
    9afa:	ef 92       	push	r14
    9afc:	0f 93       	push	r16
    9afe:	1f 93       	push	r17
    9b00:	df 93       	push	r29
    9b02:	cf 93       	push	r28
    9b04:	cd b7       	in	r28, 0x3d	; 61
    9b06:	de b7       	in	r29, 0x3e	; 62
    9b08:	c6 54       	subi	r28, 0x46	; 70
    9b0a:	d0 40       	sbci	r29, 0x00	; 0
    9b0c:	0f b6       	in	r0, 0x3f	; 63
    9b0e:	f8 94       	cli
    9b10:	de bf       	out	0x3e, r29	; 62
    9b12:	0f be       	out	0x3f, r0	; 63
    9b14:	cd bf       	out	0x3d, r28	; 61
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    9b16:	80 91 24 03 	lds	r24, 0x0324
    9b1a:	84 30       	cpi	r24, 0x04	; 4
    9b1c:	09 f4       	brne	.+2      	; 0x9b20 <FMenuSettingHeader+0x26>
    9b1e:	27 c1       	rjmp	.+590    	; 0x9d6e <FMenuSettingHeader+0x274>
    9b20:	85 30       	cpi	r24, 0x05	; 5
    9b22:	40 f4       	brcc	.+16     	; 0x9b34 <FMenuSettingHeader+0x3a>
    9b24:	81 30       	cpi	r24, 0x01	; 1
    9b26:	79 f1       	breq	.+94     	; 0x9b86 <FMenuSettingHeader+0x8c>
    9b28:	81 30       	cpi	r24, 0x01	; 1
    9b2a:	88 f0       	brcs	.+34     	; 0x9b4e <FMenuSettingHeader+0x54>
    9b2c:	82 30       	cpi	r24, 0x02	; 2
    9b2e:	09 f0       	breq	.+2      	; 0x9b32 <FMenuSettingHeader+0x38>
    9b30:	68 c1       	rjmp	.+720    	; 0x9e02 <FMenuSettingHeader+0x308>
    9b32:	72 c0       	rjmp	.+228    	; 0x9c18 <FMenuSettingHeader+0x11e>
    9b34:	86 30       	cpi	r24, 0x06	; 6
    9b36:	09 f4       	brne	.+2      	; 0x9b3a <FMenuSettingHeader+0x40>
    9b38:	c8 c0       	rjmp	.+400    	; 0x9cca <FMenuSettingHeader+0x1d0>
    9b3a:	86 30       	cpi	r24, 0x06	; 6
    9b3c:	08 f4       	brcc	.+2      	; 0x9b40 <FMenuSettingHeader+0x46>
    9b3e:	b2 c0       	rjmp	.+356    	; 0x9ca4 <FMenuSettingHeader+0x1aa>
    9b40:	87 30       	cpi	r24, 0x07	; 7
    9b42:	09 f4       	brne	.+2      	; 0x9b46 <FMenuSettingHeader+0x4c>
    9b44:	22 c1       	rjmp	.+580    	; 0x9d8a <FMenuSettingHeader+0x290>
    9b46:	88 30       	cpi	r24, 0x08	; 8
    9b48:	09 f0       	breq	.+2      	; 0x9b4c <FMenuSettingHeader+0x52>
    9b4a:	5b c1       	rjmp	.+694    	; 0x9e02 <FMenuSettingHeader+0x308>
    9b4c:	56 c1       	rjmp	.+684    	; 0x9dfa <FMenuSettingHeader+0x300>
	 case shInitHeader:
	      lcd_clear();
    9b4e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Header1  4)Header4"));
    9b52:	81 e0       	ldi	r24, 0x01	; 1
    9b54:	61 e0       	ldi	r22, 0x01	; 1
    9b56:	41 e1       	ldi	r20, 0x11	; 17
    9b58:	56 e1       	ldi	r21, 0x16	; 22
    9b5a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Header2  5)Header5"));
    9b5e:	82 e0       	ldi	r24, 0x02	; 2
    9b60:	61 e0       	ldi	r22, 0x01	; 1
    9b62:	4c ef       	ldi	r20, 0xFC	; 252
    9b64:	55 e1       	ldi	r21, 0x15	; 21
    9b66:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("3)Header3  6)Header6"));
    9b6a:	83 e0       	ldi	r24, 0x03	; 3
    9b6c:	61 e0       	ldi	r22, 0x01	; 1
    9b6e:	47 ee       	ldi	r20, 0xE7	; 231
    9b70:	55 e1       	ldi	r21, 0x15	; 21
    9b72:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    9b76:	84 e0       	ldi	r24, 0x04	; 4
    9b78:	61 e0       	ldi	r22, 0x01	; 1
    9b7a:	42 ed       	ldi	r20, 0xD2	; 210
    9b7c:	55 e1       	ldi	r21, 0x15	; 21
    9b7e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    9b82:	81 e0       	ldi	r24, 0x01	; 1
    9b84:	fc c0       	rjmp	.+504    	; 0x9d7e <FMenuSettingHeader+0x284>
	      break;
     case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    9b86:	81 e0       	ldi	r24, 0x01	; 1
    9b88:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    9b8c:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    9b90:	98 2f       	mov	r25, r24
    9b92:	91 53       	subi	r25, 0x31	; 49
    9b94:	96 30       	cpi	r25, 0x06	; 6
    9b96:	d8 f5       	brcc	.+118    	; 0x9c0e <FMenuSettingHeader+0x114>
		       HeaderIdx=KeyChar-'1';//
    9b98:	90 93 23 03 	sts	0x0323, r25
			   lcd_clear();
    9b9c:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
    9ba0:	00 d0       	rcall	.+0      	; 0x9ba2 <FMenuSettingHeader+0xa8>
    9ba2:	00 d0       	rcall	.+0      	; 0x9ba4 <FMenuSettingHeader+0xaa>
    9ba4:	00 d0       	rcall	.+0      	; 0x9ba6 <FMenuSettingHeader+0xac>
    9ba6:	ed b7       	in	r30, 0x3d	; 61
    9ba8:	fe b7       	in	r31, 0x3e	; 62
    9baa:	31 96       	adiw	r30, 0x01	; 1
    9bac:	8e 01       	movw	r16, r28
    9bae:	0f 5f       	subi	r16, 0xFF	; 255
    9bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    9bb2:	ad b7       	in	r26, 0x3d	; 61
    9bb4:	be b7       	in	r27, 0x3e	; 62
    9bb6:	12 96       	adiw	r26, 0x02	; 2
    9bb8:	1c 93       	st	X, r17
    9bba:	0e 93       	st	-X, r16
    9bbc:	11 97       	sbiw	r26, 0x01	; 1
    9bbe:	83 ec       	ldi	r24, 0xC3	; 195
    9bc0:	95 e1       	ldi	r25, 0x15	; 21
    9bc2:	93 83       	std	Z+3, r25	; 0x03
    9bc4:	82 83       	std	Z+2, r24	; 0x02
    9bc6:	80 91 23 03 	lds	r24, 0x0323
    9bca:	90 e0       	ldi	r25, 0x00	; 0
    9bcc:	01 96       	adiw	r24, 0x01	; 1
    9bce:	95 83       	std	Z+5, r25	; 0x05
    9bd0:	84 83       	std	Z+4, r24	; 0x04
    9bd2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    9bd6:	8d b7       	in	r24, 0x3d	; 61
    9bd8:	9e b7       	in	r25, 0x3e	; 62
    9bda:	06 96       	adiw	r24, 0x06	; 6
    9bdc:	0f b6       	in	r0, 0x3f	; 63
    9bde:	f8 94       	cli
    9be0:	9e bf       	out	0x3e, r25	; 62
    9be2:	0f be       	out	0x3f, r0	; 63
    9be4:	8d bf       	out	0x3d, r24	; 61
    9be6:	81 e0       	ldi	r24, 0x01	; 1
    9be8:	61 e0       	ldi	r22, 0x01	; 1
    9bea:	a8 01       	movw	r20, r16
    9bec:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    9bf0:	84 e0       	ldi	r24, 0x04	; 4
    9bf2:	61 e0       	ldi	r22, 0x01	; 1
    9bf4:	44 eb       	ldi	r20, 0xB4	; 180
    9bf6:	55 e1       	ldi	r21, 0x15	; 21
    9bf8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    9bfc:	8a ec       	ldi	r24, 0xCA	; 202
    9bfe:	94 e0       	ldi	r25, 0x04	; 4
    9c00:	61 e9       	ldi	r22, 0x91	; 145
    9c02:	71 e0       	ldi	r23, 0x01	; 1
    9c04:	40 e0       	ldi	r20, 0x00	; 0
    9c06:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
			   stSettingHeader=shEditHeader1;
    9c0a:	82 e0       	ldi	r24, 0x02	; 2
    9c0c:	b8 c0       	rjmp	.+368    	; 0x9d7e <FMenuSettingHeader+0x284>
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    9c0e:	8a 32       	cpi	r24, 0x2A	; 42
    9c10:	09 f0       	breq	.+2      	; 0x9c14 <FMenuSettingHeader+0x11a>
    9c12:	f7 c0       	rjmp	.+494    	; 0x9e02 <FMenuSettingHeader+0x308>
    9c14:	88 e0       	ldi	r24, 0x08	; 8
    9c16:	b3 c0       	rjmp	.+358    	; 0x9d7e <FMenuSettingHeader+0x284>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    9c18:	83 e0       	ldi	r24, 0x03	; 3
    9c1a:	62 e0       	ldi	r22, 0x02	; 2
    9c1c:	41 e0       	ldi	r20, 0x01	; 1
    9c1e:	2a ec       	ldi	r18, 0xCA	; 202
    9c20:	34 e0       	ldi	r19, 0x04	; 4
    9c22:	00 e0       	ldi	r16, 0x00	; 0
    9c24:	10 e0       	ldi	r17, 0x00	; 0
    9c26:	f8 e2       	ldi	r31, 0x28	; 40
    9c28:	ef 2e       	mov	r14, r31
    9c2a:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  if (uiResult==USER_OK){
    9c2e:	83 30       	cpi	r24, 0x03	; 3
    9c30:	a9 f5       	brne	.+106    	; 0x9c9c <FMenuSettingHeader+0x1a2>
			  lcd_clear();
    9c32:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    9c36:	8a ec       	ldi	r24, 0xCA	; 202
    9c38:	94 e0       	ldi	r25, 0x04	; 4
    9c3a:	68 e2       	ldi	r22, 0x28	; 40
    9c3c:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    9c40:	8a ec       	ldi	r24, 0xCA	; 202
    9c42:	94 e0       	ldi	r25, 0x04	; 4
    9c44:	60 e7       	ldi	r22, 0x70	; 112
    9c46:	79 e0       	ldi	r23, 0x09	; 9
    9c48:	40 e0       	ldi	r20, 0x00	; 0
    9c4a:	50 e0       	ldi	r21, 0x00	; 0
    9c4c:	24 e1       	ldi	r18, 0x14	; 20
    9c4e:	30 e0       	ldi	r19, 0x00	; 0
    9c50:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    9c54:	8a ec       	ldi	r24, 0xCA	; 202
    9c56:	94 e0       	ldi	r25, 0x04	; 4
    9c58:	61 e8       	ldi	r22, 0x81	; 129
    9c5a:	78 e0       	ldi	r23, 0x08	; 8
    9c5c:	44 e1       	ldi	r20, 0x14	; 20
    9c5e:	50 e0       	ldi	r21, 0x00	; 0
    9c60:	24 e1       	ldi	r18, 0x14	; 20
    9c62:	30 e0       	ldi	r19, 0x00	; 0
    9c64:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

			  lcd_print(1,1,strFreeMessageLine1);			  
    9c68:	81 e0       	ldi	r24, 0x01	; 1
    9c6a:	61 e0       	ldi	r22, 0x01	; 1
    9c6c:	40 e7       	ldi	r20, 0x70	; 112
    9c6e:	59 e0       	ldi	r21, 0x09	; 9
    9c70:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    9c74:	82 e0       	ldi	r24, 0x02	; 2
    9c76:	61 e0       	ldi	r22, 0x01	; 1
    9c78:	41 e8       	ldi	r20, 0x81	; 129
    9c7a:	58 e0       	ldi	r21, 0x08	; 8
    9c7c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    9c80:	83 e0       	ldi	r24, 0x03	; 3
    9c82:	61 e0       	ldi	r22, 0x01	; 1
    9c84:	46 ea       	ldi	r20, 0xA6	; 166
    9c86:	55 e1       	ldi	r21, 0x15	; 21
    9c88:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    9c8c:	84 e0       	ldi	r24, 0x04	; 4
    9c8e:	61 e0       	ldi	r22, 0x01	; 1
    9c90:	48 e9       	ldi	r20, 0x98	; 152
    9c92:	55 e1       	ldi	r21, 0x15	; 21
    9c94:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    9c98:	85 e0       	ldi	r24, 0x05	; 5
    9c9a:	71 c0       	rjmp	.+226    	; 0x9d7e <FMenuSettingHeader+0x284>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    9c9c:	81 30       	cpi	r24, 0x01	; 1
    9c9e:	09 f0       	breq	.+2      	; 0x9ca2 <FMenuSettingHeader+0x1a8>
    9ca0:	b0 c0       	rjmp	.+352    	; 0x9e02 <FMenuSettingHeader+0x308>
    9ca2:	a8 c0       	rjmp	.+336    	; 0x9df4 <FMenuSettingHeader+0x2fa>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    9ca4:	81 e0       	ldi	r24, 0x01	; 1
    9ca6:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    9caa:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
          if(KeyChar=='#'){
    9cae:	83 32       	cpi	r24, 0x23	; 35
    9cb0:	39 f4       	brne	.+14     	; 0x9cc0 <FMenuSettingHeader+0x1c6>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    9cb2:	8a ec       	ldi	r24, 0xCA	; 202
    9cb4:	94 e0       	ldi	r25, 0x04	; 4
    9cb6:	68 e2       	ldi	r22, 0x28	; 40
    9cb8:	70 e0       	ldi	r23, 0x00	; 0
    9cba:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <StrAlignCenter>
    9cbe:	03 c0       	rjmp	.+6      	; 0x9cc6 <FMenuSettingHeader+0x1cc>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    9cc0:	8a 32       	cpi	r24, 0x2A	; 42
    9cc2:	09 f0       	breq	.+2      	; 0x9cc6 <FMenuSettingHeader+0x1cc>
    9cc4:	9e c0       	rjmp	.+316    	; 0x9e02 <FMenuSettingHeader+0x308>
    9cc6:	86 e0       	ldi	r24, 0x06	; 6
    9cc8:	5a c0       	rjmp	.+180    	; 0x9d7e <FMenuSettingHeader+0x284>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    9cca:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    9cce:	8a ec       	ldi	r24, 0xCA	; 202
    9cd0:	94 e0       	ldi	r25, 0x04	; 4
    9cd2:	60 e7       	ldi	r22, 0x70	; 112
    9cd4:	79 e0       	ldi	r23, 0x09	; 9
    9cd6:	40 e0       	ldi	r20, 0x00	; 0
    9cd8:	50 e0       	ldi	r21, 0x00	; 0
    9cda:	24 e1       	ldi	r18, 0x14	; 20
    9cdc:	30 e0       	ldi	r19, 0x00	; 0
    9cde:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    9ce2:	8a ec       	ldi	r24, 0xCA	; 202
    9ce4:	94 e0       	ldi	r25, 0x04	; 4
    9ce6:	61 e8       	ldi	r22, 0x81	; 129
    9ce8:	78 e0       	ldi	r23, 0x08	; 8
    9cea:	44 e1       	ldi	r20, 0x14	; 20
    9cec:	50 e0       	ldi	r21, 0x00	; 0
    9cee:	24 e1       	ldi	r18, 0x14	; 20
    9cf0:	30 e0       	ldi	r19, 0x00	; 0
    9cf2:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
          lcd_print(1,1,strFreeMessageLine1);
    9cf6:	81 e0       	ldi	r24, 0x01	; 1
    9cf8:	61 e0       	ldi	r22, 0x01	; 1
    9cfa:	40 e7       	ldi	r20, 0x70	; 112
    9cfc:	59 e0       	ldi	r21, 0x09	; 9
    9cfe:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    9d02:	82 e0       	ldi	r24, 0x02	; 2
    9d04:	61 e0       	ldi	r22, 0x01	; 1
    9d06:	41 e8       	ldi	r20, 0x81	; 129
    9d08:	58 e0       	ldi	r21, 0x08	; 8
    9d0a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Header%d ?"),HeaderIdx+1);
    9d0e:	00 d0       	rcall	.+0      	; 0x9d10 <FMenuSettingHeader+0x216>
    9d10:	00 d0       	rcall	.+0      	; 0x9d12 <FMenuSettingHeader+0x218>
    9d12:	00 d0       	rcall	.+0      	; 0x9d14 <FMenuSettingHeader+0x21a>
    9d14:	ed b7       	in	r30, 0x3d	; 61
    9d16:	fe b7       	in	r31, 0x3e	; 62
    9d18:	31 96       	adiw	r30, 0x01	; 1
    9d1a:	8e 01       	movw	r16, r28
    9d1c:	0f 5f       	subi	r16, 0xFF	; 255
    9d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    9d20:	ad b7       	in	r26, 0x3d	; 61
    9d22:	be b7       	in	r27, 0x3e	; 62
    9d24:	12 96       	adiw	r26, 0x02	; 2
    9d26:	1c 93       	st	X, r17
    9d28:	0e 93       	st	-X, r16
    9d2a:	11 97       	sbiw	r26, 0x01	; 1
    9d2c:	88 e8       	ldi	r24, 0x88	; 136
    9d2e:	95 e1       	ldi	r25, 0x15	; 21
    9d30:	93 83       	std	Z+3, r25	; 0x03
    9d32:	82 83       	std	Z+2, r24	; 0x02
    9d34:	80 91 23 03 	lds	r24, 0x0323
    9d38:	90 e0       	ldi	r25, 0x00	; 0
    9d3a:	01 96       	adiw	r24, 0x01	; 1
    9d3c:	95 83       	std	Z+5, r25	; 0x05
    9d3e:	84 83       	std	Z+4, r24	; 0x04
    9d40:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    9d44:	8d b7       	in	r24, 0x3d	; 61
    9d46:	9e b7       	in	r25, 0x3e	; 62
    9d48:	06 96       	adiw	r24, 0x06	; 6
    9d4a:	0f b6       	in	r0, 0x3f	; 63
    9d4c:	f8 94       	cli
    9d4e:	9e bf       	out	0x3e, r25	; 62
    9d50:	0f be       	out	0x3f, r0	; 63
    9d52:	8d bf       	out	0x3d, r24	; 61
    9d54:	83 e0       	ldi	r24, 0x03	; 3
    9d56:	61 e0       	ldi	r22, 0x01	; 1
    9d58:	a8 01       	movw	r20, r16
    9d5a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    9d5e:	84 e0       	ldi	r24, 0x04	; 4
    9d60:	61 e0       	ldi	r22, 0x01	; 1
    9d62:	4b e7       	ldi	r20, 0x7B	; 123
    9d64:	55 e1       	ldi	r21, 0x15	; 21
    9d66:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    9d6a:	84 e0       	ldi	r24, 0x04	; 4
    9d6c:	08 c0       	rjmp	.+16     	; 0x9d7e <FMenuSettingHeader+0x284>
	      break;    
     case shSaveHeaderQuestions:
	      KeyChar=_key_btn(_key_scan(1));
    9d6e:	81 e0       	ldi	r24, 0x01	; 1
    9d70:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    9d74:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    9d78:	83 32       	cpi	r24, 0x23	; 35
    9d7a:	21 f4       	brne	.+8      	; 0x9d84 <FMenuSettingHeader+0x28a>
    9d7c:	87 e0       	ldi	r24, 0x07	; 7
    9d7e:	80 93 24 03 	sts	0x0324, r24
    9d82:	3f c0       	rjmp	.+126    	; 0x9e02 <FMenuSettingHeader+0x308>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    9d84:	8a 32       	cpi	r24, 0x2A	; 42
    9d86:	e9 f5       	brne	.+122    	; 0x9e02 <FMenuSettingHeader+0x308>
    9d88:	35 c0       	rjmp	.+106    	; 0x9df4 <FMenuSettingHeader+0x2fa>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    9d8a:	ad b7       	in	r26, 0x3d	; 61
    9d8c:	be b7       	in	r27, 0x3e	; 62
    9d8e:	18 97       	sbiw	r26, 0x08	; 8
    9d90:	0f b6       	in	r0, 0x3f	; 63
    9d92:	f8 94       	cli
    9d94:	be bf       	out	0x3e, r27	; 62
    9d96:	0f be       	out	0x3f, r0	; 63
    9d98:	ad bf       	out	0x3d, r26	; 61
    9d9a:	ed b7       	in	r30, 0x3d	; 61
    9d9c:	fe b7       	in	r31, 0x3e	; 62
    9d9e:	31 96       	adiw	r30, 0x01	; 1
    9da0:	8e 01       	movw	r16, r28
    9da2:	0b 5e       	subi	r16, 0xEB	; 235
    9da4:	1f 4f       	sbci	r17, 0xFF	; 255
    9da6:	12 96       	adiw	r26, 0x02	; 2
    9da8:	1c 93       	st	X, r17
    9daa:	0e 93       	st	-X, r16
    9dac:	11 97       	sbiw	r26, 0x01	; 1
    9dae:	86 e7       	ldi	r24, 0x76	; 118
    9db0:	95 e1       	ldi	r25, 0x15	; 21
    9db2:	93 83       	std	Z+3, r25	; 0x03
    9db4:	82 83       	std	Z+2, r24	; 0x02
    9db6:	80 e7       	ldi	r24, 0x70	; 112
    9db8:	99 e0       	ldi	r25, 0x09	; 9
    9dba:	95 83       	std	Z+5, r25	; 0x05
    9dbc:	84 83       	std	Z+4, r24	; 0x04
    9dbe:	81 e8       	ldi	r24, 0x81	; 129
    9dc0:	98 e0       	ldi	r25, 0x08	; 8
    9dc2:	97 83       	std	Z+7, r25	; 0x07
    9dc4:	86 83       	std	Z+6, r24	; 0x06
    9dc6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx],40);
    9dca:	8d b7       	in	r24, 0x3d	; 61
    9dcc:	9e b7       	in	r25, 0x3e	; 62
    9dce:	08 96       	adiw	r24, 0x08	; 8
    9dd0:	0f b6       	in	r0, 0x3f	; 63
    9dd2:	f8 94       	cli
    9dd4:	9e bf       	out	0x3e, r25	; 62
    9dd6:	0f be       	out	0x3f, r0	; 63
    9dd8:	8d bf       	out	0x3d, r24	; 61
    9dda:	60 91 23 03 	lds	r22, 0x0323
    9dde:	89 e2       	ldi	r24, 0x29	; 41
    9de0:	68 9f       	mul	r22, r24
    9de2:	b0 01       	movw	r22, r0
    9de4:	11 24       	eor	r1, r1
    9de6:	69 5d       	subi	r22, 0xD9	; 217
    9de8:	7d 4f       	sbci	r23, 0xFD	; 253
    9dea:	c8 01       	movw	r24, r16
    9dec:	48 e2       	ldi	r20, 0x28	; 40
    9dee:	50 e0       	ldi	r21, 0x00	; 0
    9df0:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx],40);
          stSettingHeader=shInitHeader;
    9df4:	10 92 24 03 	sts	0x0324, r1
    9df8:	04 c0       	rjmp	.+8      	; 0x9e02 <FMenuSettingHeader+0x308>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    9dfa:	10 92 24 03 	sts	0x0324, r1
	      Result=MENU_DONE;
    9dfe:	81 e0       	ldi	r24, 0x01	; 1
	      break;	 
    9e00:	01 c0       	rjmp	.+2      	; 0x9e04 <FMenuSettingHeader+0x30a>
static char stSettingHeader=shInitHeader,HeaderIdx=0;
     char Result,uiResult,KeyChar;
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
    9e02:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   //_menu_header();   
   return Result;
}
    9e04:	ca 5b       	subi	r28, 0xBA	; 186
    9e06:	df 4f       	sbci	r29, 0xFF	; 255
    9e08:	0f b6       	in	r0, 0x3f	; 63
    9e0a:	f8 94       	cli
    9e0c:	de bf       	out	0x3e, r29	; 62
    9e0e:	0f be       	out	0x3f, r0	; 63
    9e10:	cd bf       	out	0x3d, r28	; 61
    9e12:	cf 91       	pop	r28
    9e14:	df 91       	pop	r29
    9e16:	1f 91       	pop	r17
    9e18:	0f 91       	pop	r16
    9e1a:	ef 90       	pop	r14
    9e1c:	08 95       	ret

00009e1e <FMenuAdminSettings>:

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
	 switch(stAdminSettings){
    9e1e:	80 91 25 03 	lds	r24, 0x0325
    9e22:	83 30       	cpi	r24, 0x03	; 3
    9e24:	09 f4       	brne	.+2      	; 0x9e28 <FMenuAdminSettings+0xa>
    9e26:	6d c0       	rjmp	.+218    	; 0x9f02 <FMenuAdminSettings+0xe4>
    9e28:	84 30       	cpi	r24, 0x04	; 4
    9e2a:	30 f4       	brcc	.+12     	; 0x9e38 <FMenuAdminSettings+0x1a>
    9e2c:	81 30       	cpi	r24, 0x01	; 1
    9e2e:	e9 f1       	breq	.+122    	; 0x9eaa <FMenuAdminSettings+0x8c>
    9e30:	82 30       	cpi	r24, 0x02	; 2
    9e32:	08 f0       	brcs	.+2      	; 0x9e36 <FMenuAdminSettings+0x18>
    9e34:	63 c0       	rjmp	.+198    	; 0x9efc <FMenuAdminSettings+0xde>
    9e36:	0d c0       	rjmp	.+26     	; 0x9e52 <FMenuAdminSettings+0x34>
    9e38:	85 30       	cpi	r24, 0x05	; 5
    9e3a:	09 f4       	brne	.+2      	; 0x9e3e <FMenuAdminSettings+0x20>
    9e3c:	65 c0       	rjmp	.+202    	; 0x9f08 <FMenuAdminSettings+0xea>
    9e3e:	85 30       	cpi	r24, 0x05	; 5
    9e40:	08 f4       	brcc	.+2      	; 0x9e44 <FMenuAdminSettings+0x26>
    9e42:	6b c0       	rjmp	.+214    	; 0x9f1a <FMenuAdminSettings+0xfc>
    9e44:	86 30       	cpi	r24, 0x06	; 6
    9e46:	09 f4       	brne	.+2      	; 0x9e4a <FMenuAdminSettings+0x2c>
    9e48:	64 c0       	rjmp	.+200    	; 0x9f12 <FMenuAdminSettings+0xf4>
    9e4a:	87 30       	cpi	r24, 0x07	; 7
    9e4c:	09 f0       	breq	.+2      	; 0x9e50 <FMenuAdminSettings+0x32>
    9e4e:	6c c0       	rjmp	.+216    	; 0x9f28 <FMenuAdminSettings+0x10a>
    9e50:	67 c0       	rjmp	.+206    	; 0x9f20 <FMenuAdminSettings+0x102>
	 case asInitMenu:
          lcd_clear();
    9e52:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  if (IFType==IT_SLAVE){
    9e56:	80 91 00 01 	lds	r24, 0x0100
    9e5a:	81 30       	cpi	r24, 0x01	; 1
    9e5c:	51 f4       	brne	.+20     	; 0x9e72 <FMenuAdminSettings+0x54>
		      lcd_printf(1,1, PSTR("1)Header    4)Client"));
    9e5e:	61 e0       	ldi	r22, 0x01	; 1
    9e60:	41 e8       	ldi	r20, 0x81	; 129
    9e62:	56 e1       	ldi	r21, 0x16	; 22
    9e64:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer    5)Server"));
    9e68:	82 e0       	ldi	r24, 0x02	; 2
    9e6a:	61 e0       	ldi	r22, 0x01	; 1
    9e6c:	4c e6       	ldi	r20, 0x6C	; 108
    9e6e:	56 e1       	ldi	r21, 0x16	; 22
    9e70:	0c c0       	rjmp	.+24     	; 0x9e8a <FMenuAdminSettings+0x6c>
		  }else
		  if (IFType==IT_STANDALONE){
    9e72:	82 30       	cpi	r24, 0x02	; 2
    9e74:	61 f4       	brne	.+24     	; 0x9e8e <FMenuAdminSettings+0x70>
		      lcd_printf(1,1, PSTR("1)Header            "));
    9e76:	81 e0       	ldi	r24, 0x01	; 1
    9e78:	61 e0       	ldi	r22, 0x01	; 1
    9e7a:	47 e5       	ldi	r20, 0x57	; 87
    9e7c:	56 e1       	ldi	r21, 0x16	; 22
    9e7e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer            "));
    9e82:	82 e0       	ldi	r24, 0x02	; 2
    9e84:	61 e0       	ldi	r22, 0x01	; 1
    9e86:	42 e4       	ldi	r20, 0x42	; 66
    9e88:	56 e1       	ldi	r21, 0x16	; 22
    9e8a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  }
		  lcd_printf(3,1, PSTR("3)Password          "));
    9e8e:	83 e0       	ldi	r24, 0x03	; 3
    9e90:	61 e0       	ldi	r22, 0x01	; 1
    9e92:	4d e2       	ldi	r20, 0x2D	; 45
    9e94:	56 e1       	ldi	r21, 0x16	; 22
    9e96:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1, PSTR("*)Exit"));
    9e9a:	84 e0       	ldi	r24, 0x04	; 4
    9e9c:	61 e0       	ldi	r22, 0x01	; 1
    9e9e:	46 e2       	ldi	r20, 0x26	; 38
    9ea0:	56 e1       	ldi	r21, 0x16	; 22
    9ea2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stAdminSettings=asAdminSettingsOption;
    9ea6:	81 e0       	ldi	r24, 0x01	; 1
    9ea8:	26 c0       	rjmp	.+76     	; 0x9ef6 <FMenuAdminSettings+0xd8>
		  break;
     case asAdminSettingsOption:
	      KeyChar=_key_btn(_key_scan(1));
    9eaa:	81 e0       	ldi	r24, 0x01	; 1
    9eac:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    9eb0:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  switch(KeyChar){
    9eb4:	82 33       	cpi	r24, 0x32	; 50
    9eb6:	61 f0       	breq	.+24     	; 0x9ed0 <FMenuAdminSettings+0xb2>
    9eb8:	83 33       	cpi	r24, 0x33	; 51
    9eba:	28 f4       	brcc	.+10     	; 0x9ec6 <FMenuAdminSettings+0xa8>
    9ebc:	8a 32       	cpi	r24, 0x2A	; 42
    9ebe:	61 f0       	breq	.+24     	; 0x9ed8 <FMenuAdminSettings+0xba>
    9ec0:	81 33       	cpi	r24, 0x31	; 49
    9ec2:	69 f4       	brne	.+26     	; 0x9ede <FMenuAdminSettings+0xc0>
    9ec4:	03 c0       	rjmp	.+6      	; 0x9ecc <FMenuAdminSettings+0xae>
    9ec6:	83 33       	cpi	r24, 0x33	; 51
    9ec8:	51 f4       	brne	.+20     	; 0x9ede <FMenuAdminSettings+0xc0>
    9eca:	04 c0       	rjmp	.+8      	; 0x9ed4 <FMenuAdminSettings+0xb6>
		  case '1':stAdminSettings=asAdminSettingHeader;
    9ecc:	92 e0       	ldi	r25, 0x02	; 2
    9ece:	05 c0       	rjmp	.+10     	; 0x9eda <FMenuAdminSettings+0xbc>
		       break;
		  case '2':stAdminSettings=asAdminSettingFooter;
    9ed0:	93 e0       	ldi	r25, 0x03	; 3
    9ed2:	03 c0       	rjmp	.+6      	; 0x9eda <FMenuAdminSettings+0xbc>
		       break;
		  case '3':stAdminSettings=asAdminSettingPassword;
    9ed4:	94 e0       	ldi	r25, 0x04	; 4
    9ed6:	01 c0       	rjmp	.+2      	; 0x9eda <FMenuAdminSettings+0xbc>
		       break;
		  case '*':stAdminSettings=asExitAdminSetting;
    9ed8:	97 e0       	ldi	r25, 0x07	; 7
    9eda:	90 93 25 03 	sts	0x0325, r25
		       break;			   
		  }
		  if (IFType==IT_SLAVE){
    9ede:	90 91 00 01 	lds	r25, 0x0100
    9ee2:	91 30       	cpi	r25, 0x01	; 1
    9ee4:	09 f5       	brne	.+66     	; 0x9f28 <FMenuAdminSettings+0x10a>
			  switch(KeyChar){
    9ee6:	84 33       	cpi	r24, 0x34	; 52
    9ee8:	19 f0       	breq	.+6      	; 0x9ef0 <FMenuAdminSettings+0xd2>
    9eea:	85 33       	cpi	r24, 0x35	; 53
    9eec:	e9 f4       	brne	.+58     	; 0x9f28 <FMenuAdminSettings+0x10a>
    9eee:	02 c0       	rjmp	.+4      	; 0x9ef4 <FMenuAdminSettings+0xd6>
			  case '4':stAdminSettings=asAdminSettingClientIP;
    9ef0:	85 e0       	ldi	r24, 0x05	; 5
    9ef2:	01 c0       	rjmp	.+2      	; 0x9ef6 <FMenuAdminSettings+0xd8>
				   break;
			  case '5':stAdminSettings=asAdminSettingServerIP;
    9ef4:	86 e0       	ldi	r24, 0x06	; 6
    9ef6:	80 93 25 03 	sts	0x0325, r24
    9efa:	16 c0       	rjmp	.+44     	; 0x9f28 <FMenuAdminSettings+0x10a>
				   break;
			  }
		  }
	      break;
	 case asAdminSettingHeader:
	      SubMenu=FMenuSettingHeader();
    9efc:	0e 94 7d 4d 	call	0x9afa	; 0x9afa <FMenuSettingHeader>
    9f00:	05 c0       	rjmp	.+10     	; 0x9f0c <FMenuAdminSettings+0xee>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;
	      break;
	 case asAdminSettingFooter:
	      SubMenu=FMenuSettingFooter();
    9f02:	0e 94 eb 4b 	call	0x97d6	; 0x97d6 <FMenuSettingFooter>
    9f06:	02 c0       	rjmp	.+4      	; 0x9f0c <FMenuAdminSettings+0xee>
	 case asAdminSettingPassword:
	      SubMenu=FMenuSettingPassword();
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
     case asAdminSettingClientIP:
	      SubMenu=FMenuSettingClientIP();
    9f08:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <FMenuSettingClientIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    9f0c:	81 30       	cpi	r24, 0x01	; 1
    9f0e:	61 f4       	brne	.+24     	; 0x9f28 <FMenuAdminSettings+0x10a>
    9f10:	04 c0       	rjmp	.+8      	; 0x9f1a <FMenuAdminSettings+0xfc>
	      break;
	 case asAdminSettingServerIP:
	      SubMenu=FMenuSettingServerIP();
    9f12:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <FMenuSettingServerIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    9f16:	81 30       	cpi	r24, 0x01	; 1
    9f18:	49 f4       	brne	.+18     	; 0x9f2c <FMenuAdminSettings+0x10e>
    9f1a:	10 92 25 03 	sts	0x0325, r1
    9f1e:	04 c0       	rjmp	.+8      	; 0x9f28 <FMenuAdminSettings+0x10a>
	      break;
     case asExitAdminSetting:
	      stAdminSettings=asInitMenu;
    9f20:	10 92 25 03 	sts	0x0325, r1
	      Result=MENU_DONE;
    9f24:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    9f26:	08 95       	ret
}

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
    9f28:	80 e0       	ldi	r24, 0x00	; 0
    9f2a:	08 95       	ret
    9f2c:	80 e0       	ldi	r24, 0x00	; 0
	      stAdminSettings=asInitMenu;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    9f2e:	08 95       	ret

00009f30 <FMenuPassword>:
   return Result;	 
}



char FMenuPassword(){
    9f30:	bf 92       	push	r11
    9f32:	cf 92       	push	r12
    9f34:	df 92       	push	r13
    9f36:	ef 92       	push	r14
    9f38:	ff 92       	push	r15
    9f3a:	0f 93       	push	r16
    9f3c:	1f 93       	push	r17
    9f3e:	df 93       	push	r29
    9f40:	cf 93       	push	r28
    9f42:	cd b7       	in	r28, 0x3d	; 61
    9f44:	de b7       	in	r29, 0x3e	; 62
    9f46:	6e 97       	sbiw	r28, 0x1e	; 30
    9f48:	0f b6       	in	r0, 0x3f	; 63
    9f4a:	f8 94       	cli
    9f4c:	de bf       	out	0x3e, r29	; 62
    9f4e:	0f be       	out	0x3f, r0	; 63
    9f50:	cd bf       	out	0x3d, r28	; 61
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
     switch(stMenuPasword){
    9f52:	b0 90 36 03 	lds	r11, 0x0336
    9f56:	8b 2d       	mov	r24, r11
    9f58:	81 30       	cpi	r24, 0x01	; 1
    9f5a:	31 f1       	breq	.+76     	; 0x9fa8 <FMenuPassword+0x78>
    9f5c:	81 30       	cpi	r24, 0x01	; 1
    9f5e:	38 f0       	brcs	.+14     	; 0x9f6e <FMenuPassword+0x3e>
    9f60:	82 30       	cpi	r24, 0x02	; 2
    9f62:	09 f4       	brne	.+2      	; 0x9f66 <FMenuPassword+0x36>
    9f64:	43 c0       	rjmp	.+134    	; 0x9fec <FMenuPassword+0xbc>
    9f66:	83 30       	cpi	r24, 0x03	; 3
    9f68:	09 f0       	breq	.+2      	; 0x9f6c <FMenuPassword+0x3c>
    9f6a:	93 c0       	rjmp	.+294    	; 0xa092 <FMenuPassword+0x162>
    9f6c:	8d c0       	rjmp	.+282    	; 0xa088 <FMenuPassword+0x158>
	 case mpInitPassword:
	      lcd_clear();
    9f6e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("PASSWORD:"));
    9f72:	81 e0       	ldi	r24, 0x01	; 1
    9f74:	61 e0       	ldi	r22, 0x01	; 1
    9f76:	44 e2       	ldi	r20, 0x24	; 36
    9f78:	5a e1       	ldi	r21, 0x1A	; 26
    9f7a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    9f7e:	82 e0       	ldi	r24, 0x02	; 2
    9f80:	61 e0       	ldi	r22, 0x01	; 1
    9f82:	42 e2       	ldi	r20, 0x22	; 34
    9f84:	5a e1       	ldi	r21, 0x1A	; 26
    9f86:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    9f8a:	84 e0       	ldi	r24, 0x04	; 4
    9f8c:	61 e0       	ldi	r22, 0x01	; 1
    9f8e:	4d e0       	ldi	r20, 0x0D	; 13
    9f90:	5a e1       	ldi	r21, 0x1A	; 26
    9f92:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  FillChar(strPassword,0,sizeof(strPassword));
    9f96:	8c e2       	ldi	r24, 0x2C	; 44
    9f98:	93 e0       	ldi	r25, 0x03	; 3
    9f9a:	60 e0       	ldi	r22, 0x00	; 0
    9f9c:	70 e0       	ldi	r23, 0x00	; 0
    9f9e:	4a e0       	ldi	r20, 0x0A	; 10
    9fa0:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  stMenuPasword=mpInputPasword;
    9fa4:	81 e0       	ldi	r24, 0x01	; 1
    9fa6:	6d c0       	rjmp	.+218    	; 0xa082 <FMenuPassword+0x152>
	      break;
     case mpInputPasword:
	 	      uiResult=UserInput(UI_NUM_PASSWORD,2,1,strPassword,0,8);
    9fa8:	84 e0       	ldi	r24, 0x04	; 4
    9faa:	62 e0       	ldi	r22, 0x02	; 2
    9fac:	41 e0       	ldi	r20, 0x01	; 1
    9fae:	2c e2       	ldi	r18, 0x2C	; 44
    9fb0:	33 e0       	ldi	r19, 0x03	; 3
    9fb2:	00 e0       	ldi	r16, 0x00	; 0
    9fb4:	10 e0       	ldi	r17, 0x00	; 0
    9fb6:	98 e0       	ldi	r25, 0x08	; 8
    9fb8:	e9 2e       	mov	r14, r25
    9fba:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  if (uiResult==USER_OK){
    9fbe:	83 30       	cpi	r24, 0x03	; 3
    9fc0:	11 f4       	brne	.+4      	; 0x9fc6 <FMenuPassword+0x96>
		      stMenuPasword=mpProcessPassword;
    9fc2:	82 e0       	ldi	r24, 0x02	; 2
    9fc4:	5e c0       	rjmp	.+188    	; 0xa082 <FMenuPassword+0x152>
			  }
		  else
		  if (uiResult==USER_CANCEL){
    9fc6:	81 30       	cpi	r24, 0x01	; 1
    9fc8:	09 f4       	brne	.+2      	; 0x9fcc <FMenuPassword+0x9c>
    9fca:	4c c0       	rjmp	.+152    	; 0xa064 <FMenuPassword+0x134>
		      PassStatus=MP_CANCEL;
		      stMenuPasword=mpExit;
			  }
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    9fcc:	84 30       	cpi	r24, 0x04	; 4
    9fce:	21 f4       	brne	.+8      	; 0x9fd8 <FMenuPassword+0xa8>
    9fd0:	61 e0       	ldi	r22, 0x01	; 1
    9fd2:	48 ef       	ldi	r20, 0xF8	; 248
    9fd4:	59 e1       	ldi	r21, 0x19	; 25
    9fd6:	07 c0       	rjmp	.+14     	; 0x9fe6 <FMenuPassword+0xb6>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    9fd8:	85 30       	cpi	r24, 0x05	; 5
    9fda:	09 f0       	breq	.+2      	; 0x9fde <FMenuPassword+0xae>
    9fdc:	5a c0       	rjmp	.+180    	; 0xa092 <FMenuPassword+0x162>
    9fde:	84 e0       	ldi	r24, 0x04	; 4
    9fe0:	61 e0       	ldi	r22, 0x01	; 1
    9fe2:	43 ee       	ldi	r20, 0xE3	; 227
    9fe4:	59 e1       	ldi	r21, 0x19	; 25
    9fe6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    9fea:	53 c0       	rjmp	.+166    	; 0xa092 <FMenuPassword+0x162>
          break;	 
	 case mpProcessPassword:
		      
	      sprintf_P(strMasterPass,PSTR(MASTER_PASSWORD)); 
    9fec:	00 d0       	rcall	.+0      	; 0x9fee <FMenuPassword+0xbe>
    9fee:	00 d0       	rcall	.+0      	; 0x9ff0 <FMenuPassword+0xc0>
    9ff0:	8e 01       	movw	r16, r28
    9ff2:	0f 5f       	subi	r16, 0xFF	; 255
    9ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    9ff6:	ed b7       	in	r30, 0x3d	; 61
    9ff8:	fe b7       	in	r31, 0x3e	; 62
    9ffa:	12 83       	std	Z+2, r17	; 0x02
    9ffc:	01 83       	std	Z+1, r16	; 0x01
    9ffe:	8b ed       	ldi	r24, 0xDB	; 219
    a000:	99 e1       	ldi	r25, 0x19	; 25
    a002:	94 83       	std	Z+4, r25	; 0x04
    a004:	83 83       	std	Z+3, r24	; 0x03
    a006:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      eeprom_read_block((void*) &strAdminPass, (const void*) &DefSpvPassword, 10);
    a00a:	0f 90       	pop	r0
    a00c:	0f 90       	pop	r0
    a00e:	0f 90       	pop	r0
    a010:	0f 90       	pop	r0
    a012:	b5 e1       	ldi	r27, 0x15	; 21
    a014:	eb 2e       	mov	r14, r27
    a016:	f1 2c       	mov	r15, r1
    a018:	ec 0e       	add	r14, r28
    a01a:	fd 1e       	adc	r15, r29
    a01c:	c7 01       	movw	r24, r14
    a01e:	61 e0       	ldi	r22, 0x01	; 1
    a020:	70 e0       	ldi	r23, 0x00	; 0
    a022:	4a e0       	ldi	r20, 0x0A	; 10
    a024:	50 e0       	ldi	r21, 0x00	; 0
    a026:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	      eeprom_read_block((void*) &strSystemPass, (const void*) &DefSysPassword, 10);
    a02a:	ab e0       	ldi	r26, 0x0B	; 11
    a02c:	ca 2e       	mov	r12, r26
    a02e:	d1 2c       	mov	r13, r1
    a030:	cc 0e       	add	r12, r28
    a032:	dd 1e       	adc	r13, r29
    a034:	c6 01       	movw	r24, r12
    a036:	6b e0       	ldi	r22, 0x0B	; 11
    a038:	70 e0       	ldi	r23, 0x00	; 0
    a03a:	4a e0       	ldi	r20, 0x0A	; 10
    a03c:	50 e0       	ldi	r21, 0x00	; 0
    a03e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  
		  if (strcmp(strMasterPass,strPassword)==0)
    a042:	c8 01       	movw	r24, r16
    a044:	6c e2       	ldi	r22, 0x2C	; 44
    a046:	73 e0       	ldi	r23, 0x03	; 3
    a048:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    a04c:	00 97       	sbiw	r24, 0x00	; 0
    a04e:	11 f4       	brne	.+4      	; 0xa054 <FMenuPassword+0x124>
		       PassStatus=MP_VALID_MASTER;
    a050:	83 e0       	ldi	r24, 0x03	; 3
    a052:	08 c0       	rjmp	.+16     	; 0xa064 <FMenuPassword+0x134>
		  else
	      if (strcmp(strAdminPass,strPassword)==0){
    a054:	c7 01       	movw	r24, r14
    a056:	6c e2       	ldi	r22, 0x2C	; 44
    a058:	73 e0       	ldi	r23, 0x03	; 3
    a05a:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    a05e:	00 97       	sbiw	r24, 0x00	; 0
    a060:	21 f4       	brne	.+8      	; 0xa06a <FMenuPassword+0x13a>
		       PassStatus=MP_VALID_ADMIN;
    a062:	84 e0       	ldi	r24, 0x04	; 4
    a064:	80 93 2b 03 	sts	0x032B, r24
    a068:	0b c0       	rjmp	.+22     	; 0xa080 <FMenuPassword+0x150>
               //lcd_printf(3,1,PSTR("Admin"));
               //_delay_ms(5000);
			   }
		  else if (strcmp(strSystemPass,strPassword)==0){
    a06a:	c6 01       	movw	r24, r12
    a06c:	6c e2       	ldi	r22, 0x2C	; 44
    a06e:	73 e0       	ldi	r23, 0x03	; 3
    a070:	0e 94 13 a6 	call	0x14c26	; 0x14c26 <strcmp>
    a074:	00 97       	sbiw	r24, 0x00	; 0
    a076:	11 f4       	brne	.+4      	; 0xa07c <FMenuPassword+0x14c>
		       PassStatus=MP_VALID_SYSTEM;
    a078:	85 e0       	ldi	r24, 0x05	; 5
    a07a:	f4 cf       	rjmp	.-24     	; 0xa064 <FMenuPassword+0x134>
			   //lcd_printf(3,1,PSTR("System"));
               //_delay_ms(5000);
			   }
		  else PassStatus=MP_INVALID;
    a07c:	b0 92 2b 03 	sts	0x032B, r11
		  stMenuPasword=mpExit;
    a080:	83 e0       	ldi	r24, 0x03	; 3
    a082:	80 93 36 03 	sts	0x0336, r24
    a086:	05 c0       	rjmp	.+10     	; 0xa092 <FMenuPassword+0x162>
	      break;
	 case mpExit:
	      //lcd_print(3,1,strPassword);
		  //_delay_ms(5000);
	      stMenuPasword=mpInitPassword;
    a088:	10 92 36 03 	sts	0x0336, r1
	      Result=PassStatus;
    a08c:	80 91 2b 03 	lds	r24, 0x032B
	      break;
    a090:	01 c0       	rjmp	.+2      	; 0xa094 <FMenuPassword+0x164>
char FMenuPassword(){
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
    a092:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuPasword=mpInitPassword;
	      Result=PassStatus;
	      break;
	 }
   return Result;
}
    a094:	6e 96       	adiw	r28, 0x1e	; 30
    a096:	0f b6       	in	r0, 0x3f	; 63
    a098:	f8 94       	cli
    a09a:	de bf       	out	0x3e, r29	; 62
    a09c:	0f be       	out	0x3f, r0	; 63
    a09e:	cd bf       	out	0x3d, r28	; 61
    a0a0:	cf 91       	pop	r28
    a0a2:	df 91       	pop	r29
    a0a4:	1f 91       	pop	r17
    a0a6:	0f 91       	pop	r16
    a0a8:	ff 90       	pop	r15
    a0aa:	ef 90       	pop	r14
    a0ac:	df 90       	pop	r13
    a0ae:	cf 90       	pop	r12
    a0b0:	bf 90       	pop	r11
    a0b2:	08 95       	ret

0000a0b4 <FMenuChangeMOP>:
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
    a0b4:	9f 92       	push	r9
    a0b6:	af 92       	push	r10
    a0b8:	bf 92       	push	r11
    a0ba:	cf 92       	push	r12
    a0bc:	df 92       	push	r13
    a0be:	ef 92       	push	r14
    a0c0:	ff 92       	push	r15
    a0c2:	0f 93       	push	r16
    a0c4:	1f 93       	push	r17
    a0c6:	df 93       	push	r29
    a0c8:	cf 93       	push	r28
    a0ca:	cd b7       	in	r28, 0x3d	; 61
    a0cc:	de b7       	in	r29, 0x3e	; 62
    a0ce:	a3 97       	sbiw	r28, 0x23	; 35
    a0d0:	0f b6       	in	r0, 0x3f	; 63
    a0d2:	f8 94       	cli
    a0d4:	de bf       	out	0x3e, r29	; 62
    a0d6:	0f be       	out	0x3f, r0	; 63
    a0d8:	cd bf       	out	0x3d, r28	; 61
       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
	 switch(stChangeMOP){
    a0da:	e0 91 3f 03 	lds	r30, 0x033F
    a0de:	f0 e0       	ldi	r31, 0x00	; 0
    a0e0:	ee 31       	cpi	r30, 0x1E	; 30
    a0e2:	f1 05       	cpc	r31, r1
    a0e4:	08 f0       	brcs	.+2      	; 0xa0e8 <FMenuChangeMOP+0x34>
    a0e6:	cc c3       	rjmp	.+1944   	; 0xa880 <FMenuChangeMOP+0x7cc>
    a0e8:	e7 5a       	subi	r30, 0xA7	; 167
    a0ea:	ff 4f       	sbci	r31, 0xFF	; 255
    a0ec:	ee 0f       	add	r30, r30
    a0ee:	ff 1f       	adc	r31, r31
    a0f0:	05 90       	lpm	r0, Z+
    a0f2:	f4 91       	lpm	r31, Z+
    a0f4:	e0 2d       	mov	r30, r0
    a0f6:	09 94       	ijmp
	 case cmInit:
	      MOPType=PAY_NONE;
    a0f8:	85 e0       	ldi	r24, 0x05	; 5
    a0fa:	80 93 96 02 	sts	0x0296, r24
    a0fe:	32 c1       	rjmp	.+612    	; 0xa364 <FMenuChangeMOP+0x2b0>
		  stChangeMOP=cmDisplayMOPOption;
	      break;
	 case cmDisplayMOPOption: //12345678901234567890
	      lcd_clear();
    a100:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	      lcd_printf(1,1,PSTR("   Select Payment   "));
    a104:	81 e0       	ldi	r24, 0x01	; 1
    a106:	61 e0       	ldi	r22, 0x01	; 1
    a108:	49 ec       	ldi	r20, 0xC9	; 201
    a10a:	5b e1       	ldi	r21, 0x1B	; 27
    a10c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(2,1,PSTR("1.Account 3.Voucher "));
    a110:	82 e0       	ldi	r24, 0x02	; 2
    a112:	61 e0       	ldi	r22, 0x01	; 1
    a114:	44 eb       	ldi	r20, 0xB4	; 180
    a116:	5b e1       	ldi	r21, 0x1B	; 27
    a118:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(3,1,PSTR("2.Bank    4.PumpTest"));
    a11c:	83 e0       	ldi	r24, 0x03	; 3
    a11e:	61 e0       	ldi	r22, 0x01	; 1
    a120:	4f e9       	ldi	r20, 0x9F	; 159
    a122:	5b e1       	ldi	r21, 0x1B	; 27
    a124:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    a128:	84 e0       	ldi	r24, 0x04	; 4
    a12a:	61 e0       	ldi	r22, 0x01	; 1
    a12c:	4a e8       	ldi	r20, 0x8A	; 138
    a12e:	5b e1       	ldi	r21, 0x1B	; 27
    a130:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stChangeMOP=cmInputMOP;		 
    a134:	82 e0       	ldi	r24, 0x02	; 2
    a136:	9d c3       	rjmp	.+1850   	; 0xa872 <FMenuChangeMOP+0x7be>
		  break;
	 case cmInputMOP:
	      KeyPressed=_key_scan(1);
    a138:	81 e0       	ldi	r24, 0x01	; 1
    a13a:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    a13e:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    a140:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    a144:	98 2f       	mov	r25, r24
    a146:	91 53       	subi	r25, 0x31	; 49
    a148:	94 30       	cpi	r25, 0x04	; 4
    a14a:	c0 f4       	brcc	.+48     	; 0xa17c <FMenuChangeMOP+0xc8>
              switch(KeyChar){
    a14c:	83 33       	cpi	r24, 0x33	; 51
    a14e:	59 f0       	breq	.+22     	; 0xa166 <FMenuChangeMOP+0xb2>
    a150:	84 33       	cpi	r24, 0x34	; 52
    a152:	71 f0       	breq	.+28     	; 0xa170 <FMenuChangeMOP+0xbc>
    a154:	82 33       	cpi	r24, 0x32	; 50
    a156:	11 f0       	breq	.+4      	; 0xa15c <FMenuChangeMOP+0xa8>
		        case '1':MOPType=PAY_ACCOUNT; stChangeMOP=cmSelectFIP;         break;
    a158:	81 e0       	ldi	r24, 0x01	; 1
    a15a:	0b c0       	rjmp	.+22     	; 0xa172 <FMenuChangeMOP+0xbe>
		        case '2':MOPType=PAY_BANK;    stChangeMOP=cmSelectBankName;    break;
    a15c:	82 e0       	ldi	r24, 0x02	; 2
    a15e:	80 93 96 02 	sts	0x0296, r24
    a162:	8b e0       	ldi	r24, 0x0B	; 11
    a164:	09 c0       	rjmp	.+18     	; 0xa178 <FMenuChangeMOP+0xc4>
		        case '3':MOPType=PAY_VOUCHER; stChangeMOP=cmDispInputVoucher;  break;
    a166:	83 e0       	ldi	r24, 0x03	; 3
    a168:	80 93 96 02 	sts	0x0296, r24
    a16c:	8f e0       	ldi	r24, 0x0F	; 15
    a16e:	04 c0       	rjmp	.+8      	; 0xa178 <FMenuChangeMOP+0xc4>
		        case '4':MOPType=PAY_PUMPTEST;stChangeMOP=cmSelectFIP;         break;
    a170:	84 e0       	ldi	r24, 0x04	; 4
    a172:	80 93 96 02 	sts	0x0296, r24
    a176:	89 e0       	ldi	r24, 0x09	; 9
    a178:	80 93 3f 03 	sts	0x033F, r24
		     }
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmExitChangeMOP;
    a17c:	07 3e       	cpi	r16, 0xE7	; 231
    a17e:	09 f0       	breq	.+2      	; 0xa182 <FMenuChangeMOP+0xce>
    a180:	7f c3       	rjmp	.+1790   	; 0xa880 <FMenuChangeMOP+0x7cc>
    a182:	74 c3       	rjmp	.+1768   	; 0xa86c <FMenuChangeMOP+0x7b8>
	      break;
	 case cmDispInputVoucher://Enter Voucher number
          lcd_clear();
    a184:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("Kode Voucher"));
    a188:	81 e0       	ldi	r24, 0x01	; 1
    a18a:	61 e0       	ldi	r22, 0x01	; 1
    a18c:	4d e7       	ldi	r20, 0x7D	; 125
    a18e:	5b e1       	ldi	r21, 0x1B	; 27
    a190:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    a194:	82 e0       	ldi	r24, 0x02	; 2
    a196:	61 e0       	ldi	r22, 0x01	; 1
    a198:	4b e7       	ldi	r20, 0x7B	; 123
    a19a:	5b e1       	ldi	r21, 0x1B	; 27
    a19c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a1a0:	84 e0       	ldi	r24, 0x04	; 4
    a1a2:	61 e0       	ldi	r22, 0x01	; 1
    a1a4:	46 e6       	ldi	r20, 0x66	; 102
    a1a6:	5b e1       	ldi	r21, 0x1B	; 27
    a1a8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  FillChar(strVoucherNum,sizeof(strVoucherNum),0);
    a1ac:	8a e1       	ldi	r24, 0x1A	; 26
    a1ae:	9d e0       	ldi	r25, 0x0D	; 13
    a1b0:	65 e1       	ldi	r22, 0x15	; 21
    a1b2:	70 e0       	ldi	r23, 0x00	; 0
    a1b4:	40 e0       	ldi	r20, 0x00	; 0
    a1b6:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
          stChangeMOP=cmInputVoucher;		  
    a1ba:	87 e0       	ldi	r24, 0x07	; 7
    a1bc:	5a c3       	rjmp	.+1716   	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
     case cmInputVoucher:
          uiResult=UserInput(UI_NUMBER_R,2,1,strVoucherNum,0,13);
    a1be:	81 e0       	ldi	r24, 0x01	; 1
    a1c0:	62 e0       	ldi	r22, 0x02	; 2
    a1c2:	41 e0       	ldi	r20, 0x01	; 1
    a1c4:	2a e1       	ldi	r18, 0x1A	; 26
    a1c6:	3d e0       	ldi	r19, 0x0D	; 13
    a1c8:	00 e0       	ldi	r16, 0x00	; 0
    a1ca:	10 e0       	ldi	r17, 0x00	; 0
    a1cc:	9d e0       	ldi	r25, 0x0D	; 13
    a1ce:	e9 2e       	mov	r14, r25
    a1d0:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
	      if (uiResult==USER_OK){
    a1d4:	83 30       	cpi	r24, 0x03	; 3
    a1d6:	11 f4       	brne	.+4      	; 0xa1dc <FMenuChangeMOP+0x128>
		     stChangeMOP=cmSelectFIP;
    a1d8:	89 e0       	ldi	r24, 0x09	; 9
    a1da:	4b c3       	rjmp	.+1686   	; 0xa872 <FMenuChangeMOP+0x7be>
			 }
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmDisplayMOPOption;
    a1dc:	81 30       	cpi	r24, 0x01	; 1
    a1de:	09 f4       	brne	.+2      	; 0xa1e2 <FMenuChangeMOP+0x12e>
    a1e0:	48 c3       	rjmp	.+1680   	; 0xa872 <FMenuChangeMOP+0x7be>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    a1e2:	84 30       	cpi	r24, 0x04	; 4
    a1e4:	21 f4       	brne	.+8      	; 0xa1ee <FMenuChangeMOP+0x13a>
    a1e6:	61 e0       	ldi	r22, 0x01	; 1
    a1e8:	41 e5       	ldi	r20, 0x51	; 81
    a1ea:	5b e1       	ldi	r21, 0x1B	; 27
    a1ec:	23 c1       	rjmp	.+582    	; 0xa434 <FMenuChangeMOP+0x380>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a1ee:	85 30       	cpi	r24, 0x05	; 5
    a1f0:	09 f0       	breq	.+2      	; 0xa1f4 <FMenuChangeMOP+0x140>
    a1f2:	46 c3       	rjmp	.+1676   	; 0xa880 <FMenuChangeMOP+0x7cc>
    a1f4:	84 e0       	ldi	r24, 0x04	; 4
    a1f6:	61 e0       	ldi	r22, 0x01	; 1
    a1f8:	4c e3       	ldi	r20, 0x3C	; 60
    a1fa:	5b e1       	ldi	r21, 0x1B	; 27
    a1fc:	1b c1       	rjmp	.+566    	; 0xa434 <FMenuChangeMOP+0x380>
	      break;
	 case cmSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
    a1fe:	8e e3       	ldi	r24, 0x3E	; 62
    a200:	93 e0       	ldi	r25, 0x03	; 3
    a202:	67 e9       	ldi	r22, 0x97	; 151
    a204:	78 e0       	ldi	r23, 0x08	; 8
    a206:	0e 94 a3 2b 	call	0x5746	; 0x5746 <menu_FIP>
		  if (FIPResult==FIP_DONE){
    a20a:	88 23       	and	r24, r24
    a20c:	11 f4       	brne	.+4      	; 0xa212 <FMenuChangeMOP+0x15e>
		      //sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
		      stChangeMOP=cmFlowFIP;
    a20e:	8e e0       	ldi	r24, 0x0E	; 14
    a210:	30 c3       	rjmp	.+1632   	; 0xa872 <FMenuChangeMOP+0x7be>
		  }
		  else
		  if (FIPResult==FIP_CANCEL){
    a212:	82 30       	cpi	r24, 0x02	; 2
    a214:	09 f0       	breq	.+2      	; 0xa218 <FMenuChangeMOP+0x164>
    a216:	34 c3       	rjmp	.+1640   	; 0xa880 <FMenuChangeMOP+0x7cc>
		      if (MOPType==PAY_ACCOUNT)stChangeMOP=cmDisplayMOPOption;
    a218:	80 91 96 02 	lds	r24, 0x0296
    a21c:	81 30       	cpi	r24, 0x01	; 1
    a21e:	09 f4       	brne	.+2      	; 0xa222 <FMenuChangeMOP+0x16e>
    a220:	28 c3       	rjmp	.+1616   	; 0xa872 <FMenuChangeMOP+0x7be>
		      if (MOPType==PAY_BANK)stChangeMOP=cmSelectBankName;
    a222:	82 30       	cpi	r24, 0x02	; 2
    a224:	09 f4       	brne	.+2      	; 0xa228 <FMenuChangeMOP+0x174>
    a226:	f7 c0       	rjmp	.+494    	; 0xa416 <FMenuChangeMOP+0x362>
		      if (MOPType==PAY_VOUCHER)stChangeMOP=cmDispInputVoucher;
    a228:	83 30       	cpi	r24, 0x03	; 3
    a22a:	11 f4       	brne	.+4      	; 0xa230 <FMenuChangeMOP+0x17c>
    a22c:	8f e0       	ldi	r24, 0x0F	; 15
    a22e:	21 c3       	rjmp	.+1602   	; 0xa872 <FMenuChangeMOP+0x7be>
		      if (MOPType==PAY_PUMPTEST)stChangeMOP=cmDisplayMOPOption;		  
    a230:	84 30       	cpi	r24, 0x04	; 4
    a232:	09 f4       	brne	.+2      	; 0xa236 <FMenuChangeMOP+0x182>
    a234:	97 c0       	rjmp	.+302    	; 0xa364 <FMenuChangeMOP+0x2b0>
    a236:	24 c3       	rjmp	.+1608   	; 0xa880 <FMenuChangeMOP+0x7cc>
     case cmSelectFIPInput:
		
	      break;
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
    a238:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Bank"));
    a23c:	81 e0       	ldi	r24, 0x01	; 1
    a23e:	61 e0       	ldi	r22, 0x01	; 1
    a240:	40 e3       	ldi	r20, 0x30	; 48
    a242:	5b e1       	ldi	r21, 0x1B	; 27
    a244:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  iLoop=0;
    a248:	10 92 3a 03 	sts	0x033A, r1
    a24c:	10 92 39 03 	sts	0x0339, r1
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
    a250:	8e 01       	movw	r16, r28
    a252:	0b 5f       	subi	r16, 0xFB	; 251
    a254:	1f 4f       	sbci	r17, 0xFF	; 255
    a256:	8b e0       	ldi	r24, 0x0B	; 11
    a258:	c8 2e       	mov	r12, r24
    a25a:	d1 2c       	mov	r13, r1
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
    a25c:	b0 e1       	ldi	r27, 0x10	; 16
    a25e:	eb 2e       	mov	r14, r27
    a260:	f1 2c       	mov	r15, r1
    a262:	ec 0e       	add	r14, r28
    a264:	fd 1e       	adc	r15, r29
    a266:	aa e2       	ldi	r26, 0x2A	; 42
    a268:	aa 2e       	mov	r10, r26
    a26a:	ab e1       	ldi	r26, 0x1B	; 27
    a26c:	ba 2e       	mov	r11, r26
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
    a26e:	fc e0       	ldi	r31, 0x0C	; 12
    a270:	9f 2e       	mov	r9, r31
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
    a272:	57 c0       	rjmp	.+174    	; 0xa322 <FMenuChangeMOP+0x26e>
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
    a274:	8c 9d       	mul	r24, r12
    a276:	b0 01       	movw	r22, r0
    a278:	8d 9d       	mul	r24, r13
    a27a:	70 0d       	add	r23, r0
    a27c:	9c 9d       	mul	r25, r12
    a27e:	70 0d       	add	r23, r0
    a280:	11 24       	eor	r1, r1
    a282:	67 5f       	subi	r22, 0xF7	; 247
    a284:	7e 4f       	sbci	r23, 0xFE	; 254
    a286:	c8 01       	movw	r24, r16
    a288:	4b e0       	ldi	r20, 0x0B	; 11
    a28a:	50 e0       	ldi	r21, 0x00	; 0
    a28c:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
    a290:	e1 e0       	ldi	r30, 0x01	; 1
    a292:	f0 e0       	ldi	r31, 0x00	; 0
    a294:	0b 30       	cpi	r16, 0x0B	; 11
    a296:	11 05       	cpc	r17, r1
    a298:	10 f0       	brcs	.+4      	; 0xa29e <FMenuChangeMOP+0x1ea>
    a29a:	e0 e0       	ldi	r30, 0x00	; 0
    a29c:	f0 e0       	ldi	r31, 0x00	; 0
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
			  if (strlen(strBankName<=10)){
    a29e:	80 81       	ld	r24, Z
    a2a0:	88 23       	and	r24, r24
    a2a2:	b1 f1       	breq	.+108    	; 0xa310 <FMenuChangeMOP+0x25c>
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
    a2a4:	8d b7       	in	r24, 0x3d	; 61
    a2a6:	9e b7       	in	r25, 0x3e	; 62
    a2a8:	08 97       	sbiw	r24, 0x08	; 8
    a2aa:	0f b6       	in	r0, 0x3f	; 63
    a2ac:	f8 94       	cli
    a2ae:	9e bf       	out	0x3e, r25	; 62
    a2b0:	0f be       	out	0x3f, r0	; 63
    a2b2:	8d bf       	out	0x3d, r24	; 61
    a2b4:	ed b7       	in	r30, 0x3d	; 61
    a2b6:	fe b7       	in	r31, 0x3e	; 62
    a2b8:	31 96       	adiw	r30, 0x01	; 1
    a2ba:	ad b7       	in	r26, 0x3d	; 61
    a2bc:	be b7       	in	r27, 0x3e	; 62
    a2be:	12 96       	adiw	r26, 0x02	; 2
    a2c0:	fc 92       	st	X, r15
    a2c2:	ee 92       	st	-X, r14
    a2c4:	11 97       	sbiw	r26, 0x01	; 1
    a2c6:	b3 82       	std	Z+3, r11	; 0x03
    a2c8:	a2 82       	std	Z+2, r10	; 0x02
    a2ca:	80 91 39 03 	lds	r24, 0x0339
    a2ce:	90 91 3a 03 	lds	r25, 0x033A
    a2d2:	01 96       	adiw	r24, 0x01	; 1
    a2d4:	95 83       	std	Z+5, r25	; 0x05
    a2d6:	84 83       	std	Z+4, r24	; 0x04
    a2d8:	17 83       	std	Z+7, r17	; 0x07
    a2da:	06 83       	std	Z+6, r16	; 0x06
    a2dc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
    a2e0:	60 91 39 03 	lds	r22, 0x0339
    a2e4:	70 91 3a 03 	lds	r23, 0x033A
    a2e8:	ed b7       	in	r30, 0x3d	; 61
    a2ea:	fe b7       	in	r31, 0x3e	; 62
    a2ec:	38 96       	adiw	r30, 0x08	; 8
    a2ee:	0f b6       	in	r0, 0x3f	; 63
    a2f0:	f8 94       	cli
    a2f2:	fe bf       	out	0x3e, r31	; 62
    a2f4:	0f be       	out	0x3f, r0	; 63
    a2f6:	ed bf       	out	0x3d, r30	; 61
    a2f8:	86 2f       	mov	r24, r22
    a2fa:	81 70       	andi	r24, 0x01	; 1
    a2fc:	76 95       	lsr	r23
    a2fe:	67 95       	ror	r22
    a300:	69 9d       	mul	r22, r9
    a302:	60 2d       	mov	r22, r0
    a304:	11 24       	eor	r1, r1
    a306:	6f 5f       	subi	r22, 0xFF	; 255
    a308:	8e 5f       	subi	r24, 0xFE	; 254
    a30a:	a7 01       	movw	r20, r14
    a30c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
    a310:	80 91 39 03 	lds	r24, 0x0339
    a314:	90 91 3a 03 	lds	r25, 0x033A
    a318:	01 96       	adiw	r24, 0x01	; 1
    a31a:	90 93 3a 03 	sts	0x033A, r25
    a31e:	80 93 39 03 	sts	0x0339, r24
    a322:	80 91 39 03 	lds	r24, 0x0339
    a326:	90 91 3a 03 	lds	r25, 0x033A
    a32a:	84 30       	cpi	r24, 0x04	; 4
    a32c:	91 05       	cpc	r25, r1
    a32e:	08 f4       	brcc	.+2      	; 0xa332 <FMenuChangeMOP+0x27e>
    a330:	a1 cf       	rjmp	.-190    	; 0xa274 <FMenuChangeMOP+0x1c0>
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
				 }
		  }
	      lcd_printf(4,1,PSTR("[*]Back"));
    a332:	84 e0       	ldi	r24, 0x04	; 4
    a334:	61 e0       	ldi	r22, 0x01	; 1
    a336:	42 e2       	ldi	r20, 0x22	; 34
    a338:	5b e1       	ldi	r21, 0x1B	; 27
    a33a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stChangeMOP=cmSelectBankNameInput;
    a33e:	8c e0       	ldi	r24, 0x0C	; 12
    a340:	98 c2       	rjmp	.+1328   	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
     case cmSelectBankNameInput:
		  KeyPressed=_key_scan(1);
    a342:	81 e0       	ldi	r24, 0x01	; 1
    a344:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    a348:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    a34a:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
          if ((KeyChar>='1')&&(KeyChar<='4')){
    a34e:	81 53       	subi	r24, 0x31	; 49
    a350:	84 30       	cpi	r24, 0x04	; 4
    a352:	28 f4       	brcc	.+10     	; 0xa35e <FMenuChangeMOP+0x2aa>
		      BankIdx=KeyChar-'1';
    a354:	80 93 3d 03 	sts	0x033D, r24
			  stChangeMOP=cmSelectFIP;
    a358:	89 e0       	ldi	r24, 0x09	; 9
    a35a:	80 93 3f 03 	sts	0x033F, r24
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmDisplayMOPOption;
    a35e:	07 3e       	cpi	r16, 0xE7	; 231
    a360:	09 f0       	breq	.+2      	; 0xa364 <FMenuChangeMOP+0x2b0>
    a362:	8e c2       	rjmp	.+1308   	; 0xa880 <FMenuChangeMOP+0x7cc>
    a364:	81 e0       	ldi	r24, 0x01	; 1
    a366:	85 c2       	rjmp	.+1290   	; 0xa872 <FMenuChangeMOP+0x7be>

	      break;
     case cmDispBankSurcharge:
	      lcd_clear();
    a368:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
    a36c:	65 e0       	ldi	r22, 0x05	; 5
    a36e:	e6 2e       	mov	r14, r22
    a370:	f1 2c       	mov	r15, r1
    a372:	ec 0e       	add	r14, r28
    a374:	fd 1e       	adc	r15, r29
    a376:	60 91 3d 03 	lds	r22, 0x033D
    a37a:	8b e0       	ldi	r24, 0x0B	; 11
    a37c:	68 9f       	mul	r22, r24
    a37e:	b0 01       	movw	r22, r0
    a380:	11 24       	eor	r1, r1
    a382:	67 5f       	subi	r22, 0xF7	; 247
    a384:	7e 4f       	sbci	r23, 0xFE	; 254
    a386:	c7 01       	movw	r24, r14
    a388:	4b e0       	ldi	r20, 0x0B	; 11
    a38a:	50 e0       	ldi	r21, 0x00	; 0
    a38c:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("%s"),strBankName);
    a390:	00 d0       	rcall	.+0      	; 0xa392 <FMenuChangeMOP+0x2de>
    a392:	00 d0       	rcall	.+0      	; 0xa394 <FMenuChangeMOP+0x2e0>
    a394:	00 d0       	rcall	.+0      	; 0xa396 <FMenuChangeMOP+0x2e2>
    a396:	ed b7       	in	r30, 0x3d	; 61
    a398:	fe b7       	in	r31, 0x3e	; 62
    a39a:	31 96       	adiw	r30, 0x01	; 1
    a39c:	8e 01       	movw	r16, r28
    a39e:	00 5f       	subi	r16, 0xF0	; 240
    a3a0:	1f 4f       	sbci	r17, 0xFF	; 255
    a3a2:	ad b7       	in	r26, 0x3d	; 61
    a3a4:	be b7       	in	r27, 0x3e	; 62
    a3a6:	12 96       	adiw	r26, 0x02	; 2
    a3a8:	1c 93       	st	X, r17
    a3aa:	0e 93       	st	-X, r16
    a3ac:	11 97       	sbiw	r26, 0x01	; 1
    a3ae:	8f e1       	ldi	r24, 0x1F	; 31
    a3b0:	9b e1       	ldi	r25, 0x1B	; 27
    a3b2:	93 83       	std	Z+3, r25	; 0x03
    a3b4:	82 83       	std	Z+2, r24	; 0x02
    a3b6:	f5 82       	std	Z+5, r15	; 0x05
    a3b8:	e4 82       	std	Z+4, r14	; 0x04
    a3ba:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a3be:	ed b7       	in	r30, 0x3d	; 61
    a3c0:	fe b7       	in	r31, 0x3e	; 62
    a3c2:	36 96       	adiw	r30, 0x06	; 6
    a3c4:	0f b6       	in	r0, 0x3f	; 63
    a3c6:	f8 94       	cli
    a3c8:	fe bf       	out	0x3e, r31	; 62
    a3ca:	0f be       	out	0x3f, r0	; 63
    a3cc:	ed bf       	out	0x3d, r30	; 61
    a3ce:	81 e0       	ldi	r24, 0x01	; 1
    a3d0:	61 e0       	ldi	r22, 0x01	; 1
    a3d2:	a8 01       	movw	r20, r16
    a3d4:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(2,1,PSTR("Surcharge:   _%"));
    a3d8:	82 e0       	ldi	r24, 0x02	; 2
    a3da:	61 e0       	ldi	r22, 0x01	; 1
    a3dc:	4f e0       	ldi	r20, 0x0F	; 15
    a3de:	5b e1       	ldi	r21, 0x1B	; 27
    a3e0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a3e4:	84 e0       	ldi	r24, 0x04	; 4
    a3e6:	61 e0       	ldi	r22, 0x01	; 1
    a3e8:	4a ef       	ldi	r20, 0xFA	; 250
    a3ea:	5a e1       	ldi	r21, 0x1A	; 26
    a3ec:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stChangeMOP=cmInputBankSurcharge;
    a3f0:	8d e0       	ldi	r24, 0x0D	; 13
    a3f2:	3f c2       	rjmp	.+1150   	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
	 case cmInputBankSurcharge:
	      //uiResult=UserInput(UI_NUMBER_L,2,14,ValueChar,100,3);
		  uiResult=UserInput(UI_NUMBER_L,2,14,strSurcharge,100,3);
    a3f4:	82 e0       	ldi	r24, 0x02	; 2
    a3f6:	62 e0       	ldi	r22, 0x02	; 2
    a3f8:	4e e0       	ldi	r20, 0x0E	; 14
    a3fa:	9e 01       	movw	r18, r28
    a3fc:	2f 5f       	subi	r18, 0xFF	; 255
    a3fe:	3f 4f       	sbci	r19, 0xFF	; 255
    a400:	04 e6       	ldi	r16, 0x64	; 100
    a402:	10 e0       	ldi	r17, 0x00	; 0
    a404:	53 e0       	ldi	r21, 0x03	; 3
    a406:	e5 2e       	mov	r14, r21
    a408:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
	      if (uiResult==USER_OK)stChangeMOP=cmGenerateData;
    a40c:	83 30       	cpi	r24, 0x03	; 3
    a40e:	09 f4       	brne	.+2      	; 0xa412 <FMenuChangeMOP+0x35e>
    a410:	a8 c0       	rjmp	.+336    	; 0xa562 <FMenuChangeMOP+0x4ae>
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmSelectBankName;
    a412:	81 30       	cpi	r24, 0x01	; 1
    a414:	11 f4       	brne	.+4      	; 0xa41a <FMenuChangeMOP+0x366>
    a416:	8b e0       	ldi	r24, 0x0B	; 11
    a418:	2c c2       	rjmp	.+1112   	; 0xa872 <FMenuChangeMOP+0x7be>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    a41a:	84 30       	cpi	r24, 0x04	; 4
    a41c:	21 f4       	brne	.+8      	; 0xa426 <FMenuChangeMOP+0x372>
    a41e:	61 e0       	ldi	r22, 0x01	; 1
    a420:	45 ee       	ldi	r20, 0xE5	; 229
    a422:	5a e1       	ldi	r21, 0x1A	; 26
    a424:	07 c0       	rjmp	.+14     	; 0xa434 <FMenuChangeMOP+0x380>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a426:	85 30       	cpi	r24, 0x05	; 5
    a428:	09 f0       	breq	.+2      	; 0xa42c <FMenuChangeMOP+0x378>
    a42a:	2a c2       	rjmp	.+1108   	; 0xa880 <FMenuChangeMOP+0x7cc>
    a42c:	84 e0       	ldi	r24, 0x04	; 4
    a42e:	61 e0       	ldi	r22, 0x01	; 1
    a430:	40 ed       	ldi	r20, 0xD0	; 208
    a432:	5a e1       	ldi	r21, 0x1A	; 26
    a434:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    a438:	23 c2       	rjmp	.+1094   	; 0xa880 <FMenuChangeMOP+0x7cc>
	      break;
     case cmFlowFIP:
          switch(MOPType){
    a43a:	80 91 96 02 	lds	r24, 0x0296
    a43e:	82 30       	cpi	r24, 0x02	; 2
    a440:	61 f0       	breq	.+24     	; 0xa45a <FMenuChangeMOP+0x3a6>
    a442:	83 30       	cpi	r24, 0x03	; 3
    a444:	20 f4       	brcc	.+8      	; 0xa44e <FMenuChangeMOP+0x39a>
    a446:	81 30       	cpi	r24, 0x01	; 1
    a448:	09 f0       	breq	.+2      	; 0xa44c <FMenuChangeMOP+0x398>
    a44a:	1a c2       	rjmp	.+1076   	; 0xa880 <FMenuChangeMOP+0x7cc>
    a44c:	0a c0       	rjmp	.+20     	; 0xa462 <FMenuChangeMOP+0x3ae>
    a44e:	83 30       	cpi	r24, 0x03	; 3
    a450:	31 f0       	breq	.+12     	; 0xa45e <FMenuChangeMOP+0x3aa>
    a452:	84 30       	cpi	r24, 0x04	; 4
    a454:	09 f0       	breq	.+2      	; 0xa458 <FMenuChangeMOP+0x3a4>
    a456:	14 c2       	rjmp	.+1064   	; 0xa880 <FMenuChangeMOP+0x7cc>
    a458:	04 c0       	rjmp	.+8      	; 0xa462 <FMenuChangeMOP+0x3ae>
		  case PAY_ACCOUNT: stChangeMOP=cmDispCardTap;       break;
		  case PAY_BANK:    stChangeMOP=cmDispBankSurcharge; break;
    a45a:	81 e1       	ldi	r24, 0x11	; 17
    a45c:	0a c2       	rjmp	.+1044   	; 0xa872 <FMenuChangeMOP+0x7be>
		  case PAY_VOUCHER: stChangeMOP=cmProsesVoucher;      break;
    a45e:	85 e1       	ldi	r24, 0x15	; 21
    a460:	08 c2       	rjmp	.+1040   	; 0xa872 <FMenuChangeMOP+0x7be>
		  case PAY_PUMPTEST:stChangeMOP=cmDispCardTap;       break;
    a462:	82 e1       	ldi	r24, 0x12	; 18
    a464:	06 c2       	rjmp	.+1036   	; 0xa872 <FMenuChangeMOP+0x7be>
		  }
	      break;
     case cmDispCardTap:
	      lcd_clear();
    a466:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	      lcd_printf(1,1,PSTR("Tap Kartu RFID"));
    a46a:	81 e0       	ldi	r24, 0x01	; 1
    a46c:	61 e0       	ldi	r22, 0x01	; 1
    a46e:	41 ec       	ldi	r20, 0xC1	; 193
    a470:	5a e1       	ldi	r21, 0x1A	; 26
    a472:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  sprintf_P(lcdteks,PSTR("FIP%s"),strFIP_ID);
    a476:	00 d0       	rcall	.+0      	; 0xa478 <FMenuChangeMOP+0x3c4>
    a478:	00 d0       	rcall	.+0      	; 0xa47a <FMenuChangeMOP+0x3c6>
    a47a:	00 d0       	rcall	.+0      	; 0xa47c <FMenuChangeMOP+0x3c8>
    a47c:	ed b7       	in	r30, 0x3d	; 61
    a47e:	fe b7       	in	r31, 0x3e	; 62
    a480:	31 96       	adiw	r30, 0x01	; 1
    a482:	8e 01       	movw	r16, r28
    a484:	00 5f       	subi	r16, 0xF0	; 240
    a486:	1f 4f       	sbci	r17, 0xFF	; 255
    a488:	ad b7       	in	r26, 0x3d	; 61
    a48a:	be b7       	in	r27, 0x3e	; 62
    a48c:	12 96       	adiw	r26, 0x02	; 2
    a48e:	1c 93       	st	X, r17
    a490:	0e 93       	st	-X, r16
    a492:	11 97       	sbiw	r26, 0x01	; 1
    a494:	8b eb       	ldi	r24, 0xBB	; 187
    a496:	9a e1       	ldi	r25, 0x1A	; 26
    a498:	93 83       	std	Z+3, r25	; 0x03
    a49a:	82 83       	std	Z+2, r24	; 0x02
    a49c:	87 e9       	ldi	r24, 0x97	; 151
    a49e:	98 e0       	ldi	r25, 0x08	; 8
    a4a0:	95 83       	std	Z+5, r25	; 0x05
    a4a2:	84 83       	std	Z+4, r24	; 0x04
    a4a4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a4a8:	ed b7       	in	r30, 0x3d	; 61
    a4aa:	fe b7       	in	r31, 0x3e	; 62
    a4ac:	36 96       	adiw	r30, 0x06	; 6
    a4ae:	0f b6       	in	r0, 0x3f	; 63
    a4b0:	f8 94       	cli
    a4b2:	fe bf       	out	0x3e, r31	; 62
    a4b4:	0f be       	out	0x3f, r0	; 63
    a4b6:	ed bf       	out	0x3d, r30	; 61
    a4b8:	82 e0       	ldi	r24, 0x02	; 2
    a4ba:	61 e0       	ldi	r22, 0x01	; 1
    a4bc:	a8 01       	movw	r20, r16
    a4be:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
    a4c2:	84 e0       	ldi	r24, 0x04	; 4
    a4c4:	61 e0       	ldi	r22, 0x01	; 1
    a4c6:	48 ea       	ldi	r20, 0xA8	; 168
    a4c8:	5a e1       	ldi	r21, 0x1A	; 26
    a4ca:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  IsRFIDDetected=False;
    a4ce:	10 92 76 02 	sts	0x0276, r1
          stChangeMOP=cmRFIDCardInput;
    a4d2:	83 e1       	ldi	r24, 0x13	; 19
    a4d4:	ce c1       	rjmp	.+924    	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
	 case cmRFIDCardInput:
		  KeyPressed=_key_scan(1);
    a4d6:	81 e0       	ldi	r24, 0x01	; 1
    a4d8:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    a4dc:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    a4de:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if (KeyPressed==_KEY_ENTER){
    a4e2:	07 3b       	cpi	r16, 0xB7	; 183
    a4e4:	11 f4       	brne	.+4      	; 0xa4ea <FMenuChangeMOP+0x436>
		      stChangeMOP=cmExitChangeMOP;
    a4e6:	8c e1       	ldi	r24, 0x1C	; 28
    a4e8:	03 c0       	rjmp	.+6      	; 0xa4f0 <FMenuChangeMOP+0x43c>
		  }
		  else
		  if (KeyPressed==_KEY_CANCEL){
    a4ea:	07 3e       	cpi	r16, 0xE7	; 231
    a4ec:	19 f4       	brne	.+6      	; 0xa4f4 <FMenuChangeMOP+0x440>
   		      stChangeMOP=cmSelectFIP;
    a4ee:	89 e0       	ldi	r24, 0x09	; 9
    a4f0:	80 93 3f 03 	sts	0x033F, r24
			 }
          if (IsRFIDDetected==True){
    a4f4:	80 91 76 02 	lds	r24, 0x0276
    a4f8:	81 30       	cpi	r24, 0x01	; 1
    a4fa:	09 f0       	breq	.+2      	; 0xa4fe <FMenuChangeMOP+0x44a>
    a4fc:	c1 c1       	rjmp	.+898    	; 0xa880 <FMenuChangeMOP+0x7cc>
		      IsRFIDDetected=False;
    a4fe:	10 92 76 02 	sts	0x0276, r1
			   stChangeMOP=cmProsesRFID;
    a502:	84 e1       	ldi	r24, 0x14	; 20
    a504:	b6 c1       	rjmp	.+876    	; 0xa872 <FMenuChangeMOP+0x7be>
			 }
	      break;
     case cmProsesRFID:
	      ViewCardID();
    a506:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <ViewCardID>
          sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
    a50a:	00 d0       	rcall	.+0      	; 0xa50c <FMenuChangeMOP+0x458>
    a50c:	00 d0       	rcall	.+0      	; 0xa50e <FMenuChangeMOP+0x45a>
    a50e:	00 d0       	rcall	.+0      	; 0xa510 <FMenuChangeMOP+0x45c>
    a510:	ed b7       	in	r30, 0x3d	; 61
    a512:	fe b7       	in	r31, 0x3e	; 62
    a514:	31 96       	adiw	r30, 0x01	; 1
    a516:	8e 01       	movw	r16, r28
    a518:	00 5f       	subi	r16, 0xF0	; 240
    a51a:	1f 4f       	sbci	r17, 0xFF	; 255
    a51c:	ad b7       	in	r26, 0x3d	; 61
    a51e:	be b7       	in	r27, 0x3e	; 62
    a520:	12 96       	adiw	r26, 0x02	; 2
    a522:	1c 93       	st	X, r17
    a524:	0e 93       	st	-X, r16
    a526:	11 97       	sbiw	r26, 0x01	; 1
    a528:	82 ea       	ldi	r24, 0xA2	; 162
    a52a:	9a e1       	ldi	r25, 0x1A	; 26
    a52c:	93 83       	std	Z+3, r25	; 0x03
    a52e:	82 83       	std	Z+2, r24	; 0x02
    a530:	87 e6       	ldi	r24, 0x67	; 103
    a532:	9c e0       	ldi	r25, 0x0C	; 12
    a534:	95 83       	std	Z+5, r25	; 0x05
    a536:	84 83       	std	Z+4, r24	; 0x04
    a538:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    a53c:	ed b7       	in	r30, 0x3d	; 61
    a53e:	fe b7       	in	r31, 0x3e	; 62
    a540:	36 96       	adiw	r30, 0x06	; 6
    a542:	0f b6       	in	r0, 0x3f	; 63
    a544:	f8 94       	cli
    a546:	fe bf       	out	0x3e, r31	; 62
    a548:	0f be       	out	0x3f, r0	; 63
    a54a:	ed bf       	out	0x3d, r30	; 61
    a54c:	82 e0       	ldi	r24, 0x02	; 2
    a54e:	61 e0       	ldi	r22, 0x01	; 1
    a550:	a8 01       	movw	r20, r16
    a552:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
          lcd_printf(3,1,PSTR("Proses"));
    a556:	83 e0       	ldi	r24, 0x03	; 3
    a558:	61 e0       	ldi	r22, 0x01	; 1
    a55a:	4b e9       	ldi	r20, 0x9B	; 155
    a55c:	5a e1       	ldi	r21, 0x1A	; 26
    a55e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stChangeMOP=cmGenerateData;
    a562:	86 e1       	ldi	r24, 0x16	; 22
    a564:	86 c1       	rjmp	.+780    	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
     case cmProsesVoucher:
          lcd_clear();
    a566:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
          lcd_printf(1,1,PSTR("-MOP Voucher-")); 
    a56a:	81 e0       	ldi	r24, 0x01	; 1
    a56c:	61 e0       	ldi	r22, 0x01	; 1
    a56e:	4d e8       	ldi	r20, 0x8D	; 141
    a570:	5a e1       	ldi	r21, 0x1A	; 26
    a572:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          lcd_printf(3,1,PSTR("Proses"));
    a576:	83 e0       	ldi	r24, 0x03	; 3
    a578:	61 e0       	ldi	r22, 0x01	; 1
    a57a:	46 e8       	ldi	r20, 0x86	; 134
    a57c:	5a e1       	ldi	r21, 0x1A	; 26
    a57e:	ef cf       	rjmp	.-34     	; 0xa55e <FMenuChangeMOP+0x4aa>
		  stChangeMOP=cmGenerateData;
	      break;

     case cmGenerateData:
	      FillChar(strRef1,sizeof(strRef1),0);
    a580:	0c e6       	ldi	r16, 0x6C	; 108
    a582:	1d e0       	ldi	r17, 0x0D	; 13
    a584:	c8 01       	movw	r24, r16
    a586:	65 e1       	ldi	r22, 0x15	; 21
    a588:	70 e0       	ldi	r23, 0x00	; 0
    a58a:	40 e0       	ldi	r20, 0x00	; 0
    a58c:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      FillChar(strRef2,sizeof(strRef2),0);
    a590:	4c e7       	ldi	r20, 0x7C	; 124
    a592:	e4 2e       	mov	r14, r20
    a594:	4c e0       	ldi	r20, 0x0C	; 12
    a596:	f4 2e       	mov	r15, r20
    a598:	c7 01       	movw	r24, r14
    a59a:	65 e1       	ldi	r22, 0x15	; 21
    a59c:	70 e0       	ldi	r23, 0x00	; 0
    a59e:	40 e0       	ldi	r20, 0x00	; 0
    a5a0:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      FillChar(strRef3,sizeof(strRef3),0);
    a5a4:	8b e5       	ldi	r24, 0x5B	; 91
    a5a6:	99 e0       	ldi	r25, 0x09	; 9
    a5a8:	65 e1       	ldi	r22, 0x15	; 21
    a5aa:	70 e0       	ldi	r23, 0x00	; 0
    a5ac:	40 e0       	ldi	r20, 0x00	; 0
    a5ae:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      FillChar(strRef4,sizeof(strRef4),0);
    a5b2:	33 e8       	ldi	r19, 0x83	; 131
    a5b4:	c3 2e       	mov	r12, r19
    a5b6:	34 e0       	ldi	r19, 0x04	; 4
    a5b8:	d3 2e       	mov	r13, r19
    a5ba:	c6 01       	movw	r24, r12
    a5bc:	65 e1       	ldi	r22, 0x15	; 21
    a5be:	70 e0       	ldi	r23, 0x00	; 0
    a5c0:	40 e0       	ldi	r20, 0x00	; 0
    a5c2:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
          switch(MOPType){
    a5c6:	80 91 96 02 	lds	r24, 0x0296
    a5ca:	82 30       	cpi	r24, 0x02	; 2
    a5cc:	e1 f0       	breq	.+56     	; 0xa606 <FMenuChangeMOP+0x552>
    a5ce:	83 30       	cpi	r24, 0x03	; 3
    a5d0:	20 f4       	brcc	.+8      	; 0xa5da <FMenuChangeMOP+0x526>
    a5d2:	81 30       	cpi	r24, 0x01	; 1
    a5d4:	09 f0       	breq	.+2      	; 0xa5d8 <FMenuChangeMOP+0x524>
    a5d6:	9f c0       	rjmp	.+318    	; 0xa716 <FMenuChangeMOP+0x662>
    a5d8:	07 c0       	rjmp	.+14     	; 0xa5e8 <FMenuChangeMOP+0x534>
    a5da:	83 30       	cpi	r24, 0x03	; 3
    a5dc:	09 f4       	brne	.+2      	; 0xa5e0 <FMenuChangeMOP+0x52c>
    a5de:	5c c0       	rjmp	.+184    	; 0xa698 <FMenuChangeMOP+0x5e4>
    a5e0:	84 30       	cpi	r24, 0x04	; 4
    a5e2:	09 f0       	breq	.+2      	; 0xa5e6 <FMenuChangeMOP+0x532>
    a5e4:	98 c0       	rjmp	.+304    	; 0xa716 <FMenuChangeMOP+0x662>
    a5e6:	6b c0       	rjmp	.+214    	; 0xa6be <FMenuChangeMOP+0x60a>
		  case PAY_ACCOUNT:
		       sprintf_P(strRef1,PSTR("%s"),strCardID); 
    a5e8:	00 d0       	rcall	.+0      	; 0xa5ea <FMenuChangeMOP+0x536>
    a5ea:	00 d0       	rcall	.+0      	; 0xa5ec <FMenuChangeMOP+0x538>
    a5ec:	00 d0       	rcall	.+0      	; 0xa5ee <FMenuChangeMOP+0x53a>
    a5ee:	ed b7       	in	r30, 0x3d	; 61
    a5f0:	fe b7       	in	r31, 0x3e	; 62
    a5f2:	31 96       	adiw	r30, 0x01	; 1
    a5f4:	ad b7       	in	r26, 0x3d	; 61
    a5f6:	be b7       	in	r27, 0x3e	; 62
    a5f8:	12 96       	adiw	r26, 0x02	; 2
    a5fa:	1c 93       	st	X, r17
    a5fc:	0e 93       	st	-X, r16
    a5fe:	11 97       	sbiw	r26, 0x01	; 1
    a600:	83 e8       	ldi	r24, 0x83	; 131
    a602:	9a e1       	ldi	r25, 0x1A	; 26
    a604:	78 c0       	rjmp	.+240    	; 0xa6f6 <FMenuChangeMOP+0x642>
		       break;
		  case PAY_BANK:
		  	   eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
    a606:	25 e0       	ldi	r18, 0x05	; 5
    a608:	e2 2e       	mov	r14, r18
    a60a:	f1 2c       	mov	r15, r1
    a60c:	ec 0e       	add	r14, r28
    a60e:	fd 1e       	adc	r15, r29
    a610:	60 91 3d 03 	lds	r22, 0x033D
    a614:	8b e0       	ldi	r24, 0x0B	; 11
    a616:	68 9f       	mul	r22, r24
    a618:	b0 01       	movw	r22, r0
    a61a:	11 24       	eor	r1, r1
    a61c:	67 5f       	subi	r22, 0xF7	; 247
    a61e:	7e 4f       	sbci	r23, 0xFE	; 254
    a620:	c7 01       	movw	r24, r14
    a622:	4b e0       	ldi	r20, 0x0B	; 11
    a624:	50 e0       	ldi	r21, 0x00	; 0
    a626:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		       sprintf_P(lcdteks,PSTR("%s"),strBankName);
    a62a:	00 d0       	rcall	.+0      	; 0xa62c <FMenuChangeMOP+0x578>
    a62c:	00 d0       	rcall	.+0      	; 0xa62e <FMenuChangeMOP+0x57a>
    a62e:	00 d0       	rcall	.+0      	; 0xa630 <FMenuChangeMOP+0x57c>
    a630:	ed b7       	in	r30, 0x3d	; 61
    a632:	fe b7       	in	r31, 0x3e	; 62
    a634:	31 96       	adiw	r30, 0x01	; 1
    a636:	ce 01       	movw	r24, r28
    a638:	40 96       	adiw	r24, 0x10	; 16
    a63a:	ad b7       	in	r26, 0x3d	; 61
    a63c:	be b7       	in	r27, 0x3e	; 62
    a63e:	12 96       	adiw	r26, 0x02	; 2
    a640:	9c 93       	st	X, r25
    a642:	8e 93       	st	-X, r24
    a644:	11 97       	sbiw	r26, 0x01	; 1
    a646:	80 e8       	ldi	r24, 0x80	; 128
    a648:	9a e1       	ldi	r25, 0x1A	; 26
    a64a:	93 83       	std	Z+3, r25	; 0x03
    a64c:	82 83       	std	Z+2, r24	; 0x02
    a64e:	f5 82       	std	Z+5, r15	; 0x05
    a650:	e4 82       	std	Z+4, r14	; 0x04
    a652:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		       sprintf_P(strRef1,PSTR("%s"),strBankName); 
    a656:	ed b7       	in	r30, 0x3d	; 61
    a658:	fe b7       	in	r31, 0x3e	; 62
    a65a:	31 96       	adiw	r30, 0x01	; 1
    a65c:	ad b7       	in	r26, 0x3d	; 61
    a65e:	be b7       	in	r27, 0x3e	; 62
    a660:	12 96       	adiw	r26, 0x02	; 2
    a662:	1c 93       	st	X, r17
    a664:	0e 93       	st	-X, r16
    a666:	11 97       	sbiw	r26, 0x01	; 1
    a668:	8d e7       	ldi	r24, 0x7D	; 125
    a66a:	9a e1       	ldi	r25, 0x1A	; 26
    a66c:	93 83       	std	Z+3, r25	; 0x03
    a66e:	82 83       	std	Z+2, r24	; 0x02
    a670:	f5 82       	std	Z+5, r15	; 0x05
    a672:	e4 82       	std	Z+4, r14	; 0x04
    a674:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		       sprintf_P(strRef4,PSTR("%s"),strSurcharge); 
    a678:	ed b7       	in	r30, 0x3d	; 61
    a67a:	fe b7       	in	r31, 0x3e	; 62
    a67c:	31 96       	adiw	r30, 0x01	; 1
    a67e:	ad b7       	in	r26, 0x3d	; 61
    a680:	be b7       	in	r27, 0x3e	; 62
    a682:	12 96       	adiw	r26, 0x02	; 2
    a684:	dc 92       	st	X, r13
    a686:	ce 92       	st	-X, r12
    a688:	11 97       	sbiw	r26, 0x01	; 1
    a68a:	8a e7       	ldi	r24, 0x7A	; 122
    a68c:	9a e1       	ldi	r25, 0x1A	; 26
    a68e:	93 83       	std	Z+3, r25	; 0x03
    a690:	82 83       	std	Z+2, r24	; 0x02
    a692:	ce 01       	movw	r24, r28
    a694:	01 96       	adiw	r24, 0x01	; 1
    a696:	33 c0       	rjmp	.+102    	; 0xa6fe <FMenuChangeMOP+0x64a>
		       break;
		  case PAY_VOUCHER://Load data Ref1=Voucher on cmVoucherInput
		  	   sprintf_P(strRef1,PSTR("%s"),strVoucherNum); 
    a698:	00 d0       	rcall	.+0      	; 0xa69a <FMenuChangeMOP+0x5e6>
    a69a:	00 d0       	rcall	.+0      	; 0xa69c <FMenuChangeMOP+0x5e8>
    a69c:	00 d0       	rcall	.+0      	; 0xa69e <FMenuChangeMOP+0x5ea>
    a69e:	ed b7       	in	r30, 0x3d	; 61
    a6a0:	fe b7       	in	r31, 0x3e	; 62
    a6a2:	31 96       	adiw	r30, 0x01	; 1
    a6a4:	ad b7       	in	r26, 0x3d	; 61
    a6a6:	be b7       	in	r27, 0x3e	; 62
    a6a8:	12 96       	adiw	r26, 0x02	; 2
    a6aa:	1c 93       	st	X, r17
    a6ac:	0e 93       	st	-X, r16
    a6ae:	11 97       	sbiw	r26, 0x01	; 1
    a6b0:	87 e7       	ldi	r24, 0x77	; 119
    a6b2:	9a e1       	ldi	r25, 0x1A	; 26
    a6b4:	93 83       	std	Z+3, r25	; 0x03
    a6b6:	82 83       	std	Z+2, r24	; 0x02
    a6b8:	8a e1       	ldi	r24, 0x1A	; 26
    a6ba:	9d e0       	ldi	r25, 0x0D	; 13
    a6bc:	20 c0       	rjmp	.+64     	; 0xa6fe <FMenuChangeMOP+0x64a>
		       break;
		  case PAY_PUMPTEST:
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
    a6be:	00 d0       	rcall	.+0      	; 0xa6c0 <FMenuChangeMOP+0x60c>
    a6c0:	00 d0       	rcall	.+0      	; 0xa6c2 <FMenuChangeMOP+0x60e>
    a6c2:	ad b7       	in	r26, 0x3d	; 61
    a6c4:	be b7       	in	r27, 0x3e	; 62
    a6c6:	12 96       	adiw	r26, 0x02	; 2
    a6c8:	1c 93       	st	X, r17
    a6ca:	0e 93       	st	-X, r16
    a6cc:	11 97       	sbiw	r26, 0x01	; 1
    a6ce:	8d e6       	ldi	r24, 0x6D	; 109
    a6d0:	9a e1       	ldi	r25, 0x1A	; 26
    a6d2:	14 96       	adiw	r26, 0x04	; 4
    a6d4:	9c 93       	st	X, r25
    a6d6:	8e 93       	st	-X, r24
    a6d8:	13 97       	sbiw	r26, 0x03	; 3
    a6da:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
    a6de:	00 d0       	rcall	.+0      	; 0xa6e0 <FMenuChangeMOP+0x62c>
    a6e0:	ed b7       	in	r30, 0x3d	; 61
    a6e2:	fe b7       	in	r31, 0x3e	; 62
    a6e4:	31 96       	adiw	r30, 0x01	; 1
    a6e6:	ad b7       	in	r26, 0x3d	; 61
    a6e8:	be b7       	in	r27, 0x3e	; 62
    a6ea:	12 96       	adiw	r26, 0x02	; 2
    a6ec:	fc 92       	st	X, r15
    a6ee:	ee 92       	st	-X, r14
    a6f0:	11 97       	sbiw	r26, 0x01	; 1
    a6f2:	8a e6       	ldi	r24, 0x6A	; 106
    a6f4:	9a e1       	ldi	r25, 0x1A	; 26
    a6f6:	93 83       	std	Z+3, r25	; 0x03
    a6f8:	82 83       	std	Z+2, r24	; 0x02
    a6fa:	87 e6       	ldi	r24, 0x67	; 103
    a6fc:	9c e0       	ldi	r25, 0x0C	; 12
    a6fe:	95 83       	std	Z+5, r25	; 0x05
    a700:	84 83       	std	Z+4, r24	; 0x04
    a702:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		       break;
    a706:	ed b7       	in	r30, 0x3d	; 61
    a708:	fe b7       	in	r31, 0x3e	; 62
    a70a:	36 96       	adiw	r30, 0x06	; 6
    a70c:	0f b6       	in	r0, 0x3f	; 63
    a70e:	f8 94       	cli
    a710:	fe bf       	out	0x3e, r31	; 62
    a712:	0f be       	out	0x3f, r0	; 63
    a714:	ed bf       	out	0x3d, r30	; 61
		  }
		  leadingZero(MOPType,strPaymentType);
    a716:	80 91 96 02 	lds	r24, 0x0296
    a71a:	6e e2       	ldi	r22, 0x2E	; 46
    a71c:	78 e0       	ldi	r23, 0x08	; 8
    a71e:	0e 94 86 2b 	call	0x570c	; 0x570c <leadingZero>
		  AddSpaceLead(strRef1,20);
    a722:	8c e6       	ldi	r24, 0x6C	; 108
    a724:	9d e0       	ldi	r25, 0x0D	; 13
    a726:	64 e1       	ldi	r22, 0x14	; 20
    a728:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <AddSpaceLead>
		  AddSpaceLead(strRef2,20);
    a72c:	8c e7       	ldi	r24, 0x7C	; 124
    a72e:	9c e0       	ldi	r25, 0x0C	; 12
    a730:	64 e1       	ldi	r22, 0x14	; 20
    a732:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <AddSpaceLead>
		  AddSpaceLead(strRef3,20);
    a736:	8b e5       	ldi	r24, 0x5B	; 91
    a738:	99 e0       	ldi	r25, 0x09	; 9
    a73a:	64 e1       	ldi	r22, 0x14	; 20
    a73c:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <AddSpaceLead>
		  AddSpaceLead(strRef4,20);
    a740:	83 e8       	ldi	r24, 0x83	; 131
    a742:	94 e0       	ldi	r25, 0x04	; 4
    a744:	64 e1       	ldi	r22, 0x14	; 20
    a746:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <AddSpaceLead>
		  iWait=0;
    a74a:	10 92 3b 03 	sts	0x033B, r1
		  IsMessage09=False;
    a74e:	10 92 81 02 	sts	0x0281, r1
		  stChangeMOP=cmSendMessage32;	      
    a752:	87 e1       	ldi	r24, 0x17	; 23
    a754:	8e c0       	rjmp	.+284    	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
     case cmSendMessage32://SendMessage32
	      sendMessage32();
    a756:	0e 94 2d 2a 	call	0x545a	; 0x545a <sendMessage32>
		  iLoop=0;
    a75a:	10 92 3a 03 	sts	0x033A, r1
    a75e:	10 92 39 03 	sts	0x0339, r1
		  iPos=0;
    a762:	10 92 3c 03 	sts	0x033C, r1
		  lcd_printf(3,1,PSTR("Please Wait"));
    a766:	83 e0       	ldi	r24, 0x03	; 3
    a768:	61 e0       	ldi	r22, 0x01	; 1
    a76a:	4e e5       	ldi	r20, 0x5E	; 94
    a76c:	5a e1       	ldi	r21, 0x1A	; 26
    a76e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stChangeMOP=cmWaitReplyMessage;	      
    a772:	88 e1       	ldi	r24, 0x18	; 24
    a774:	7e c0       	rjmp	.+252    	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
     case cmWaitReplyMessage:
          iLoop++;
    a776:	80 91 39 03 	lds	r24, 0x0339
    a77a:	90 91 3a 03 	lds	r25, 0x033A
    a77e:	01 96       	adiw	r24, 0x01	; 1
    a780:	90 93 3a 03 	sts	0x033A, r25
    a784:	80 93 39 03 	sts	0x0339, r24
		  if ((iLoop%MSG_WAIT_TIMOUT)==0){
    a788:	68 e9       	ldi	r22, 0x98	; 152
    a78a:	7a e3       	ldi	r23, 0x3A	; 58
    a78c:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    a790:	00 97       	sbiw	r24, 0x00	; 0
    a792:	19 f5       	brne	.+70     	; 0xa7da <FMenuChangeMOP+0x726>
			 if (iPos<5){
    a794:	60 91 3c 03 	lds	r22, 0x033C
    a798:	65 30       	cpi	r22, 0x05	; 5
    a79a:	68 f4       	brcc	.+26     	; 0xa7b6 <FMenuChangeMOP+0x702>
				 lcd_xy(3,(13+iPos));_lcd('.');
    a79c:	63 5f       	subi	r22, 0xF3	; 243
    a79e:	83 e0       	ldi	r24, 0x03	; 3
    a7a0:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
    a7a4:	8e e2       	ldi	r24, 0x2E	; 46
    a7a6:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
				 iPos++;
    a7aa:	80 91 3c 03 	lds	r24, 0x033C
    a7ae:	8f 5f       	subi	r24, 0xFF	; 255
    a7b0:	80 93 3c 03 	sts	0x033C, r24
    a7b4:	12 c0       	rjmp	.+36     	; 0xa7da <FMenuChangeMOP+0x726>
				}
			 else{
				 iPos=0;
    a7b6:	10 92 3c 03 	sts	0x033C, r1
				 lcd_printf(3,(13+iPos),PSTR("       "));
    a7ba:	83 e0       	ldi	r24, 0x03	; 3
    a7bc:	6d e0       	ldi	r22, 0x0D	; 13
    a7be:	46 e5       	ldi	r20, 0x56	; 86
    a7c0:	5a e1       	ldi	r21, 0x1A	; 26
    a7c2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				 //Resend Message32
				 if (iWait<5)stChangeMOP=cmSendMessage32;
    a7c6:	80 91 3b 03 	lds	r24, 0x033B
    a7ca:	85 30       	cpi	r24, 0x05	; 5
    a7cc:	18 f4       	brcc	.+6      	; 0xa7d4 <FMenuChangeMOP+0x720>
    a7ce:	97 e1       	ldi	r25, 0x17	; 23
    a7d0:	90 93 3f 03 	sts	0x033F, r25
				iWait++;
    a7d4:	8f 5f       	subi	r24, 0xFF	; 255
    a7d6:	80 93 3b 03 	sts	0x033B, r24
				}
		  }
		  if (iWait>5)stChangeMOP=cmNoReply;
    a7da:	80 91 3b 03 	lds	r24, 0x033B
    a7de:	86 30       	cpi	r24, 0x06	; 6
    a7e0:	18 f0       	brcs	.+6      	; 0xa7e8 <FMenuChangeMOP+0x734>
    a7e2:	8a e1       	ldi	r24, 0x1A	; 26
    a7e4:	80 93 3f 03 	sts	0x033F, r24
		  if (IsMessage09==True)stChangeMOP=cmDisplayFreeMessage;
    a7e8:	80 91 81 02 	lds	r24, 0x0281
    a7ec:	81 30       	cpi	r24, 0x01	; 1
    a7ee:	19 f4       	brne	.+6      	; 0xa7f6 <FMenuChangeMOP+0x742>
    a7f0:	89 e1       	ldi	r24, 0x19	; 25
    a7f2:	80 93 3f 03 	sts	0x033F, r24
		  if (IsMessage99==True)stChangeMOP=cmFinishChangeMOP;
    a7f6:	80 91 7d 02 	lds	r24, 0x027D
    a7fa:	81 30       	cpi	r24, 0x01	; 1
    a7fc:	09 f0       	breq	.+2      	; 0xa800 <FMenuChangeMOP+0x74c>
    a7fe:	40 c0       	rjmp	.+128    	; 0xa880 <FMenuChangeMOP+0x7cc>
    a800:	37 c0       	rjmp	.+110    	; 0xa870 <FMenuChangeMOP+0x7bc>
		  break;
     case cmDisplayFreeMessage:
	      IsMessage09=False;
    a802:	10 92 81 02 	sts	0x0281, r1
	      msgResult=procMessage09();
    a806:	0e 94 57 45 	call	0x8aae	; 0x8aae <procMessage09>
		  lcd_clear();
    a80a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    a80e:	81 e0       	ldi	r24, 0x01	; 1
    a810:	61 e0       	ldi	r22, 0x01	; 1
    a812:	40 e7       	ldi	r20, 0x70	; 112
    a814:	59 e0       	ldi	r21, 0x09	; 9
    a816:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    a81a:	82 e0       	ldi	r24, 0x02	; 2
    a81c:	61 e0       	ldi	r22, 0x01	; 1
    a81e:	41 e8       	ldi	r20, 0x81	; 129
    a820:	58 e0       	ldi	r21, 0x08	; 8
    a822:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    a826:	83 e0       	ldi	r24, 0x03	; 3
    a828:	61 e0       	ldi	r22, 0x01	; 1
    a82a:	4a ee       	ldi	r20, 0xEA	; 234
    a82c:	58 e0       	ldi	r21, 0x08	; 8
    a82e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    a832:	84 e0       	ldi	r24, 0x04	; 4
    a834:	61 e0       	ldi	r22, 0x01	; 1
    a836:	44 eb       	ldi	r20, 0xB4	; 180
    a838:	5c e0       	ldi	r21, 0x0C	; 12
    a83a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    a83e:	0e c0       	rjmp	.+28     	; 0xa85c <FMenuChangeMOP+0x7a8>
		  TimDisplay=0;
          stChangeMOP=cmDelayMOP;
	      break;
     case cmNoReply:
	      lcd_clear();
    a840:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(2,1,PSTR("No Reply    "));
    a844:	82 e0       	ldi	r24, 0x02	; 2
    a846:	61 e0       	ldi	r22, 0x01	; 1
    a848:	49 e4       	ldi	r20, 0x49	; 73
    a84a:	5a e1       	ldi	r21, 0x1A	; 26
    a84c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(3,1,PSTR("TCP/IP Error"));
    a850:	83 e0       	ldi	r24, 0x03	; 3
    a852:	61 e0       	ldi	r22, 0x01	; 1
    a854:	4c e3       	ldi	r20, 0x3C	; 60
    a856:	5a e1       	ldi	r21, 0x1A	; 26
    a858:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  TimDisplay=0;
    a85c:	10 92 70 02 	sts	0x0270, r1
          stChangeMOP=cmDelayMOP;
    a860:	8b e1       	ldi	r24, 0x1B	; 27
    a862:	07 c0       	rjmp	.+14     	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
     case cmDelayMOP:
	      if (TimDisplay>9)stChangeMOP=cmExitChangeMOP;
    a864:	80 91 70 02 	lds	r24, 0x0270
    a868:	8a 30       	cpi	r24, 0x0A	; 10
    a86a:	50 f0       	brcs	.+20     	; 0xa880 <FMenuChangeMOP+0x7cc>
    a86c:	8c e1       	ldi	r24, 0x1C	; 28
    a86e:	01 c0       	rjmp	.+2      	; 0xa872 <FMenuChangeMOP+0x7be>
	      break;
     case cmExitChangeMOP:
	      stChangeMOP=cmFinishChangeMOP;
    a870:	8d e1       	ldi	r24, 0x1D	; 29
    a872:	80 93 3f 03 	sts	0x033F, r24
    a876:	04 c0       	rjmp	.+8      	; 0xa880 <FMenuChangeMOP+0x7cc>
	      break;
     case cmFinishChangeMOP:
	      stChangeMOP=cmInit;
    a878:	10 92 3f 03 	sts	0x033F, r1
		  Result=MENU_DONE;
    a87c:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    a87e:	01 c0       	rjmp	.+2      	; 0xa882 <FMenuChangeMOP+0x7ce>

       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
    a880:	80 e0       	ldi	r24, 0x00	; 0
	      stChangeMOP=cmInit;
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    a882:	a3 96       	adiw	r28, 0x23	; 35
    a884:	0f b6       	in	r0, 0x3f	; 63
    a886:	f8 94       	cli
    a888:	de bf       	out	0x3e, r29	; 62
    a88a:	0f be       	out	0x3f, r0	; 63
    a88c:	cd bf       	out	0x3d, r28	; 61
    a88e:	cf 91       	pop	r28
    a890:	df 91       	pop	r29
    a892:	1f 91       	pop	r17
    a894:	0f 91       	pop	r16
    a896:	ff 90       	pop	r15
    a898:	ef 90       	pop	r14
    a89a:	df 90       	pop	r13
    a89c:	cf 90       	pop	r12
    a89e:	bf 90       	pop	r11
    a8a0:	af 90       	pop	r10
    a8a2:	9f 90       	pop	r9
    a8a4:	08 95       	ret

0000a8a6 <FMenuEDCTransaction>:
	      break;
	 }
	 return Result;
}

char FMenuEDCTransaction(){
    a8a6:	1f 93       	push	r17
    a8a8:	cf 93       	push	r28
    a8aa:	df 93       	push	r29
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
	 switch(stEtransaction){
    a8ac:	80 91 40 03 	lds	r24, 0x0340
    a8b0:	85 30       	cpi	r24, 0x05	; 5
    a8b2:	09 f4       	brne	.+2      	; 0xa8b6 <FMenuEDCTransaction+0x10>
    a8b4:	91 c0       	rjmp	.+290    	; 0xa9d8 <FMenuEDCTransaction+0x132>
    a8b6:	86 30       	cpi	r24, 0x06	; 6
    a8b8:	90 f4       	brcc	.+36     	; 0xa8de <FMenuEDCTransaction+0x38>
    a8ba:	82 30       	cpi	r24, 0x02	; 2
    a8bc:	09 f4       	brne	.+2      	; 0xa8c0 <FMenuEDCTransaction+0x1a>
    a8be:	52 c0       	rjmp	.+164    	; 0xa964 <FMenuEDCTransaction+0xbe>
    a8c0:	83 30       	cpi	r24, 0x03	; 3
    a8c2:	30 f4       	brcc	.+12     	; 0xa8d0 <FMenuEDCTransaction+0x2a>
    a8c4:	88 23       	and	r24, r24
    a8c6:	f1 f0       	breq	.+60     	; 0xa904 <FMenuEDCTransaction+0x5e>
    a8c8:	81 30       	cpi	r24, 0x01	; 1
    a8ca:	09 f0       	breq	.+2      	; 0xa8ce <FMenuEDCTransaction+0x28>
    a8cc:	cd c0       	rjmp	.+410    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
    a8ce:	36 c0       	rjmp	.+108    	; 0xa93c <FMenuEDCTransaction+0x96>
    a8d0:	83 30       	cpi	r24, 0x03	; 3
    a8d2:	09 f4       	brne	.+2      	; 0xa8d6 <FMenuEDCTransaction+0x30>
    a8d4:	57 c0       	rjmp	.+174    	; 0xa984 <FMenuEDCTransaction+0xde>
    a8d6:	84 30       	cpi	r24, 0x04	; 4
    a8d8:	09 f0       	breq	.+2      	; 0xa8dc <FMenuEDCTransaction+0x36>
    a8da:	c6 c0       	rjmp	.+396    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
    a8dc:	77 c0       	rjmp	.+238    	; 0xa9cc <FMenuEDCTransaction+0x126>
    a8de:	88 30       	cpi	r24, 0x08	; 8
    a8e0:	09 f4       	brne	.+2      	; 0xa8e4 <FMenuEDCTransaction+0x3e>
    a8e2:	b0 c0       	rjmp	.+352    	; 0xaa44 <FMenuEDCTransaction+0x19e>
    a8e4:	89 30       	cpi	r24, 0x09	; 9
    a8e6:	38 f4       	brcc	.+14     	; 0xa8f6 <FMenuEDCTransaction+0x50>
    a8e8:	86 30       	cpi	r24, 0x06	; 6
    a8ea:	09 f4       	brne	.+2      	; 0xa8ee <FMenuEDCTransaction+0x48>
    a8ec:	86 c0       	rjmp	.+268    	; 0xa9fa <FMenuEDCTransaction+0x154>
    a8ee:	87 30       	cpi	r24, 0x07	; 7
    a8f0:	09 f0       	breq	.+2      	; 0xa8f4 <FMenuEDCTransaction+0x4e>
    a8f2:	ba c0       	rjmp	.+372    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
    a8f4:	84 c0       	rjmp	.+264    	; 0xa9fe <FMenuEDCTransaction+0x158>
    a8f6:	89 30       	cpi	r24, 0x09	; 9
    a8f8:	09 f4       	brne	.+2      	; 0xa8fc <FMenuEDCTransaction+0x56>
    a8fa:	aa c0       	rjmp	.+340    	; 0xaa50 <FMenuEDCTransaction+0x1aa>
    a8fc:	8a 30       	cpi	r24, 0x0A	; 10
    a8fe:	09 f0       	breq	.+2      	; 0xa902 <FMenuEDCTransaction+0x5c>
    a900:	b3 c0       	rjmp	.+358    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
    a902:	ae c0       	rjmp	.+348    	; 0xaa60 <FMenuEDCTransaction+0x1ba>
	 case etInit:
	      lcd_clear();
    a904:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Card Type"));
    a908:	81 e0       	ldi	r24, 0x01	; 1
    a90a:	61 e0       	ldi	r22, 0x01	; 1
    a90c:	48 e2       	ldi	r20, 0x28	; 40
    a90e:	5c e1       	ldi	r21, 0x1C	; 28
    a910:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          lcd_printf(1,1,PSTR("1.Debit/Flash Card  "));
    a914:	81 e0       	ldi	r24, 0x01	; 1
    a916:	61 e0       	ldi	r22, 0x01	; 1
    a918:	43 e1       	ldi	r20, 0x13	; 19
    a91a:	5c e1       	ldi	r21, 0x1C	; 28
    a91c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Credit Card       "));
    a920:	82 e0       	ldi	r24, 0x02	; 2
    a922:	61 e0       	ldi	r22, 0x01	; 1
    a924:	4e ef       	ldi	r20, 0xFE	; 254
    a926:	5b e1       	ldi	r21, 0x1B	; 27
    a928:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    a92c:	84 e0       	ldi	r24, 0x04	; 4
    a92e:	61 e0       	ldi	r22, 0x01	; 1
    a930:	49 ee       	ldi	r20, 0xE9	; 233
    a932:	5b e1       	ldi	r21, 0x1B	; 27
    a934:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stEtransaction=etInputEDC;
    a938:	81 e0       	ldi	r24, 0x01	; 1
    a93a:	8f c0       	rjmp	.+286    	; 0xaa5a <FMenuEDCTransaction+0x1b4>
	      break;
     case etInputEDC:
	 	  KeyPressed=_key_scan(1);
    a93c:	81 e0       	ldi	r24, 0x01	; 1
    a93e:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    a942:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
    a944:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    a948:	98 2f       	mov	r25, r24
    a94a:	91 53       	subi	r25, 0x31	; 49
    a94c:	92 30       	cpi	r25, 0x02	; 2
    a94e:	30 f4       	brcc	.+12     	; 0xa95c <FMenuEDCTransaction+0xb6>
		       EDCType=KeyChar-'0';
    a950:	80 53       	subi	r24, 0x30	; 48
    a952:	80 93 e9 08 	sts	0x08E9, r24
		       stEtransaction=etSelectFIP;
    a956:	82 e0       	ldi	r24, 0x02	; 2
    a958:	80 93 40 03 	sts	0x0340, r24
		     }
		  if (KeyPressed==_KEY_CANCEL)stEtransaction=etExitEDCTransaction;
    a95c:	17 3e       	cpi	r17, 0xE7	; 231
    a95e:	09 f0       	breq	.+2      	; 0xa962 <FMenuEDCTransaction+0xbc>
    a960:	83 c0       	rjmp	.+262    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
    a962:	7a c0       	rjmp	.+244    	; 0xaa58 <FMenuEDCTransaction+0x1b2>
	      break;
	 case etSelectFIP:
	      FIPResult=menu_FIP(FIP_Used,strFIP_ID);
    a964:	80 e0       	ldi	r24, 0x00	; 0
    a966:	90 e0       	ldi	r25, 0x00	; 0
    a968:	67 e9       	ldi	r22, 0x97	; 151
    a96a:	78 e0       	ldi	r23, 0x08	; 8
    a96c:	0e 94 a3 2b 	call	0x5746	; 0x5746 <menu_FIP>
		  if (FIPResult==FIP_DONE)stEtransaction=etInitMessage90;
    a970:	88 23       	and	r24, r24
    a972:	11 f4       	brne	.+4      	; 0xa978 <FMenuEDCTransaction+0xd2>
    a974:	83 e0       	ldi	r24, 0x03	; 3
    a976:	71 c0       	rjmp	.+226    	; 0xaa5a <FMenuEDCTransaction+0x1b4>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
    a978:	82 30       	cpi	r24, 0x02	; 2
    a97a:	09 f0       	breq	.+2      	; 0xa97e <FMenuEDCTransaction+0xd8>
    a97c:	75 c0       	rjmp	.+234    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
    a97e:	10 92 40 03 	sts	0x0340, r1
    a982:	72 c0       	rjmp	.+228    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
	      break;
     case etInitMessage90:
	      FillChar(strRef1,sizeof(strRef1),0);
    a984:	cc e6       	ldi	r28, 0x6C	; 108
    a986:	dd e0       	ldi	r29, 0x0D	; 13
    a988:	ce 01       	movw	r24, r28
    a98a:	65 e1       	ldi	r22, 0x15	; 21
    a98c:	70 e0       	ldi	r23, 0x00	; 0
    a98e:	40 e0       	ldi	r20, 0x00	; 0
    a990:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      if (EDCType==1){
    a994:	80 91 e9 08 	lds	r24, 0x08E9
    a998:	81 30       	cpi	r24, 0x01	; 1
    a99a:	91 f0       	breq	.+36     	; 0xa9c0 <FMenuEDCTransaction+0x11a>
		      AddSpaceLag(strRef1,20);
          }
		  else
	      if (EDCType==2){
    a99c:	82 30       	cpi	r24, 0x02	; 2
    a99e:	a1 f4       	brne	.+40     	; 0xa9c8 <FMenuEDCTransaction+0x122>
		      sprintf_P(strRef1,PSTR("CREDITCARD"));
    a9a0:	00 d0       	rcall	.+0      	; 0xa9a2 <FMenuEDCTransaction+0xfc>
    a9a2:	00 d0       	rcall	.+0      	; 0xa9a4 <FMenuEDCTransaction+0xfe>
    a9a4:	ed b7       	in	r30, 0x3d	; 61
    a9a6:	fe b7       	in	r31, 0x3e	; 62
    a9a8:	d2 83       	std	Z+2, r29	; 0x02
    a9aa:	c1 83       	std	Z+1, r28	; 0x01
    a9ac:	8e ed       	ldi	r24, 0xDE	; 222
    a9ae:	9b e1       	ldi	r25, 0x1B	; 27
    a9b0:	94 83       	std	Z+4, r25	; 0x04
    a9b2:	83 83       	std	Z+3, r24	; 0x03
    a9b4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  AddSpaceLag(strRef1,20);
    a9b8:	0f 90       	pop	r0
    a9ba:	0f 90       	pop	r0
    a9bc:	0f 90       	pop	r0
    a9be:	0f 90       	pop	r0
    a9c0:	ce 01       	movw	r24, r28
    a9c2:	64 e1       	ldi	r22, 0x14	; 20
    a9c4:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
		  }	 
	      stEtransaction=etSendingMessage90;
    a9c8:	84 e0       	ldi	r24, 0x04	; 4
    a9ca:	47 c0       	rjmp	.+142    	; 0xaa5a <FMenuEDCTransaction+0x1b4>
	      break;
     case etSendingMessage90:
          sendMessage90();
    a9cc:	0e 94 21 2a 	call	0x5442	; 0x5442 <sendMessage90>
		  TimSend=0;
    a9d0:	10 92 56 0d 	sts	0x0D56, r1
          stEtransaction=etWaitReply;
    a9d4:	85 e0       	ldi	r24, 0x05	; 5
    a9d6:	41 c0       	rjmp	.+130    	; 0xaa5a <FMenuEDCTransaction+0x1b4>
	      break;
     case etWaitReply:
	      if (TimSend>TIM_SEND*2)stEtransaction=etNoConnection;
    a9d8:	80 91 56 0d 	lds	r24, 0x0D56
    a9dc:	85 31       	cpi	r24, 0x15	; 21
    a9de:	18 f0       	brcs	.+6      	; 0xa9e6 <FMenuEDCTransaction+0x140>
    a9e0:	88 e0       	ldi	r24, 0x08	; 8
    a9e2:	80 93 40 03 	sts	0x0340, r24
		  if ((IsMessage91==True)||(IsMessage09==True))
    a9e6:	80 91 85 02 	lds	r24, 0x0285
    a9ea:	81 30       	cpi	r24, 0x01	; 1
    a9ec:	21 f0       	breq	.+8      	; 0xa9f6 <FMenuEDCTransaction+0x150>
    a9ee:	80 91 81 02 	lds	r24, 0x0281
    a9f2:	81 30       	cpi	r24, 0x01	; 1
    a9f4:	c9 f5       	brne	.+114    	; 0xaa68 <FMenuEDCTransaction+0x1c2>
		       stEtransaction=etSuccesEDC;
    a9f6:	86 e0       	ldi	r24, 0x06	; 6
    a9f8:	30 c0       	rjmp	.+96     	; 0xaa5a <FMenuEDCTransaction+0x1b4>
	      break;
     case etSuccesEDC:
	      stEtransaction=etDisplayFreeMessage;
    a9fa:	87 e0       	ldi	r24, 0x07	; 7
    a9fc:	2e c0       	rjmp	.+92     	; 0xaa5a <FMenuEDCTransaction+0x1b4>
	      break;
     case etDisplayFreeMessage:
	      if (IsMessage09==True){
    a9fe:	80 91 81 02 	lds	r24, 0x0281
    aa02:	81 30       	cpi	r24, 0x01	; 1
    aa04:	19 f5       	brne	.+70     	; 0xaa4c <FMenuEDCTransaction+0x1a6>
		      IsMessage09=False;
    aa06:	10 92 81 02 	sts	0x0281, r1
	          procMessage09();
    aa0a:	0e 94 57 45 	call	0x8aae	; 0x8aae <procMessage09>
		      lcd_clear();
    aa0e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		      lcd_print(1,1,strFreeMessageLine1);
    aa12:	81 e0       	ldi	r24, 0x01	; 1
    aa14:	61 e0       	ldi	r22, 0x01	; 1
    aa16:	40 e7       	ldi	r20, 0x70	; 112
    aa18:	59 e0       	ldi	r21, 0x09	; 9
    aa1a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		      lcd_print(2,1,strFreeMessageLine2);
    aa1e:	82 e0       	ldi	r24, 0x02	; 2
    aa20:	61 e0       	ldi	r22, 0x01	; 1
    aa22:	41 e8       	ldi	r20, 0x81	; 129
    aa24:	58 e0       	ldi	r21, 0x08	; 8
    aa26:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		      lcd_print(3,1,strFreeMessageLine3);
    aa2a:	83 e0       	ldi	r24, 0x03	; 3
    aa2c:	61 e0       	ldi	r22, 0x01	; 1
    aa2e:	4a ee       	ldi	r20, 0xEA	; 234
    aa30:	58 e0       	ldi	r21, 0x08	; 8
    aa32:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  lcd_print(4,1,strFreeMessageLine4);
    aa36:	84 e0       	ldi	r24, 0x04	; 4
    aa38:	61 e0       	ldi	r22, 0x01	; 1
    aa3a:	44 eb       	ldi	r20, 0xB4	; 180
    aa3c:	5c e0       	ldi	r21, 0x0C	; 12
    aa3e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
    aa42:	02 c0       	rjmp	.+4      	; 0xaa48 <FMenuEDCTransaction+0x1a2>
			  TimDisplay=0;
			  }
		  stEtransaction=etDelayExit;
	      break;
     case etNoConnection:
	      lcd_clear();
    aa44:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  TimDisplay=0;
    aa48:	10 92 70 02 	sts	0x0270, r1
		  stEtransaction=etDelayExit;
    aa4c:	89 e0       	ldi	r24, 0x09	; 9
    aa4e:	05 c0       	rjmp	.+10     	; 0xaa5a <FMenuEDCTransaction+0x1b4>
	      break;
     case etDelayExit:
	      if (TimDisplay>8)stEtransaction=etExitEDCTransaction;
    aa50:	80 91 70 02 	lds	r24, 0x0270
    aa54:	89 30       	cpi	r24, 0x09	; 9
    aa56:	40 f0       	brcs	.+16     	; 0xaa68 <FMenuEDCTransaction+0x1c2>
    aa58:	8a e0       	ldi	r24, 0x0A	; 10
    aa5a:	80 93 40 03 	sts	0x0340, r24
    aa5e:	04 c0       	rjmp	.+8      	; 0xaa68 <FMenuEDCTransaction+0x1c2>
	      break;
     case etExitEDCTransaction:
	      stEtransaction=etInit;
    aa60:	10 92 40 03 	sts	0x0340, r1
	      Result=MENU_DONE;
    aa64:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    aa66:	01 c0       	rjmp	.+2      	; 0xaa6a <FMenuEDCTransaction+0x1c4>
static char stEtransaction=etInit;
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
    aa68:	80 e0       	ldi	r24, 0x00	; 0
	      stEtransaction=etInit;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    aa6a:	df 91       	pop	r29
    aa6c:	cf 91       	pop	r28
    aa6e:	1f 91       	pop	r17
    aa70:	08 95       	ret

0000aa72 <FormatCurrency>:
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}


void FormatCurrency(char *strCurrency){// 5000000.00 5,000,000.00
    aa72:	8f 92       	push	r8
    aa74:	9f 92       	push	r9
    aa76:	af 92       	push	r10
    aa78:	bf 92       	push	r11
    aa7a:	cf 92       	push	r12
    aa7c:	df 92       	push	r13
    aa7e:	ef 92       	push	r14
    aa80:	ff 92       	push	r15
    aa82:	0f 93       	push	r16
    aa84:	1f 93       	push	r17
    aa86:	df 93       	push	r29
    aa88:	cf 93       	push	r28
    aa8a:	cd b7       	in	r28, 0x3d	; 61
    aa8c:	de b7       	in	r29, 0x3e	; 62
    aa8e:	64 97       	sbiw	r28, 0x14	; 20
    aa90:	0f b6       	in	r0, 0x3f	; 63
    aa92:	f8 94       	cli
    aa94:	de bf       	out	0x3e, r29	; 62
    aa96:	0f be       	out	0x3f, r0	; 63
    aa98:	cd bf       	out	0x3d, r28	; 61
    aa9a:	8c 01       	movw	r16, r24
     char i,dotPos=0,iPos=0,Length=0,nComa=0;//cPos=0,;
	 char fmtCurrency[20];
	 char CurrencyMark,DecimalMark;

	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
    aa9c:	8f e3       	ldi	r24, 0x3F	; 63
    aa9e:	90 e0       	ldi	r25, 0x00	; 0
    aaa0:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    aaa4:	98 2e       	mov	r9, r24
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);
    aaa6:	8e e3       	ldi	r24, 0x3E	; 62
    aaa8:	90 e0       	ldi	r25, 0x00	; 0
    aaaa:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    aaae:	a8 2e       	mov	r10, r24

	 Length=strlen(strCurrency);//123,456
    aab0:	d8 01       	movw	r26, r16
    aab2:	0d 90       	ld	r0, X+
    aab4:	00 20       	and	r0, r0
    aab6:	e9 f7       	brne	.-6      	; 0xaab2 <FormatCurrency+0x40>
    aab8:	7d 01       	movw	r14, r26
    aaba:	08 94       	sec
    aabc:	e1 08       	sbc	r14, r1
    aabe:	f1 08       	sbc	r15, r1
    aac0:	e0 1a       	sub	r14, r16
    aac2:	f1 0a       	sbc	r15, r17
    aac4:	8e 2c       	mov	r8, r14
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
    aac6:	ce 01       	movw	r24, r28
    aac8:	01 96       	adiw	r24, 0x01	; 1
    aaca:	64 e1       	ldi	r22, 0x14	; 20
    aacc:	70 e0       	ldi	r23, 0x00	; 0
    aace:	40 e0       	ldi	r20, 0x00	; 0
    aad0:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
    aad4:	68 01       	movw	r12, r16
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    aad6:	f8 01       	movw	r30, r16
	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);

	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
    aad8:	90 e0       	ldi	r25, 0x00	; 0
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    aada:	80 e0       	ldi	r24, 0x00	; 0
    aadc:	08 c0       	rjmp	.+16     	; 0xaaee <FormatCurrency+0x7c>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
    aade:	21 91       	ld	r18, Z+
    aae0:	2a 15       	cp	r18, r10
    aae2:	09 f4       	brne	.+2      	; 0xaae6 <FormatCurrency+0x74>
    aae4:	e8 2e       	mov	r14, r24
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
    aae6:	29 15       	cp	r18, r9
    aae8:	09 f4       	brne	.+2      	; 0xaaec <FormatCurrency+0x7a>
    aaea:	9f 5f       	subi	r25, 0xFF	; 255
	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    aaec:	8f 5f       	subi	r24, 0xFF	; 255
    aaee:	88 15       	cp	r24, r8
    aaf0:	b0 f3       	brcs	.-20     	; 0xaade <FormatCurrency+0x6c>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
    aaf2:	99 23       	and	r25, r25
    aaf4:	09 f0       	breq	.+2      	; 0xaaf8 <FormatCurrency+0x86>
    aaf6:	5b c0       	rjmp	.+182    	; 0xabae <FormatCurrency+0x13c>
    aaf8:	be 2d       	mov	r27, r14
    aafa:	b4 30       	cpi	r27, 0x04	; 4
    aafc:	08 f4       	brcc	.+2      	; 0xab00 <FormatCurrency+0x8e>
    aafe:	57 c0       	rjmp	.+174    	; 0xabae <FormatCurrency+0x13c>
    ab00:	2e 2d       	mov	r18, r14
    ab02:	30 e0       	ldi	r19, 0x00	; 0
    ab04:	40 e0       	ldi	r20, 0x00	; 0
    ab06:	ff 24       	eor	r15, r15
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    ab08:	53 e0       	ldi	r21, 0x03	; 3
    ab0a:	a5 2e       	mov	r10, r21
    ab0c:	b1 2c       	mov	r11, r1
		        fmtCurrency[iPos]=CurrencyMark;
    ab0e:	fe 01       	movw	r30, r28
    ab10:	31 96       	adiw	r30, 0x01	; 1
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    ab12:	c9 01       	movw	r24, r18
    ab14:	b5 01       	movw	r22, r10
    ab16:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    ab1a:	00 97       	sbiw	r24, 0x00	; 0
    ab1c:	49 f4       	brne	.+18     	; 0xab30 <FormatCurrency+0xbe>
    ab1e:	fe 14       	cp	r15, r14
    ab20:	38 f4       	brcc	.+14     	; 0xab30 <FormatCurrency+0xbe>
    ab22:	ff 20       	and	r15, r15
    ab24:	29 f0       	breq	.+10     	; 0xab30 <FormatCurrency+0xbe>
		        fmtCurrency[iPos]=CurrencyMark;
    ab26:	df 01       	movw	r26, r30
    ab28:	a4 0f       	add	r26, r20
    ab2a:	b1 1d       	adc	r27, r1
    ab2c:	9c 92       	st	X, r9
		        iPos++;
    ab2e:	4f 5f       	subi	r20, 0xFF	; 255
		        }
		        fmtCurrency[iPos]=strCurrency[i];
    ab30:	d6 01       	movw	r26, r12
    ab32:	8d 91       	ld	r24, X+
    ab34:	6d 01       	movw	r12, r26
    ab36:	df 01       	movw	r26, r30
    ab38:	a4 0f       	add	r26, r20
    ab3a:	b1 1d       	adc	r27, r1
    ab3c:	8c 93       	st	X, r24
			    iPos++;
    ab3e:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    ab40:	df 01       	movw	r26, r30
    ab42:	a4 0f       	add	r26, r20
    ab44:	b1 1d       	adc	r27, r1
    ab46:	1c 92       	st	X, r1
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
    ab48:	f3 94       	inc	r15
    ab4a:	21 50       	subi	r18, 0x01	; 1
    ab4c:	30 40       	sbci	r19, 0x00	; 0
    ab4e:	fe 14       	cp	r15, r14
    ab50:	00 f3       	brcs	.-64     	; 0xab12 <FormatCurrency+0xa0>
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
    ab52:	ce 01       	movw	r24, r28
    ab54:	01 96       	adiw	r24, 0x01	; 1
    ab56:	0e c0       	rjmp	.+28     	; 0xab74 <FormatCurrency+0x102>
    ab58:	fc 01       	movw	r30, r24
    ab5a:	e4 0f       	add	r30, r20
    ab5c:	f1 1d       	adc	r31, r1
    ab5e:	d8 01       	movw	r26, r16
    ab60:	ae 0d       	add	r26, r14
    ab62:	b1 1d       	adc	r27, r1
    ab64:	2c 91       	ld	r18, X
    ab66:	20 83       	st	Z, r18
			    iPos++;
    ab68:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    ab6a:	fc 01       	movw	r30, r24
    ab6c:	e4 0f       	add	r30, r20
    ab6e:	f1 1d       	adc	r31, r1
    ab70:	10 82       	st	Z, r1
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
    ab72:	e3 94       	inc	r14
    ab74:	e8 14       	cp	r14, r8
    ab76:	80 f3       	brcs	.-32     	; 0xab58 <FormatCurrency+0xe6>
    ab78:	20 e0       	ldi	r18, 0x00	; 0
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    ab7a:	de 01       	movw	r26, r28
    ab7c:	11 96       	adiw	r26, 0x01	; 1
    ab7e:	0b c0       	rjmp	.+22     	; 0xab96 <FormatCurrency+0x124>
	          strCurrency[i]=fmtCurrency[i];
    ab80:	a8 01       	movw	r20, r16
    ab82:	48 0f       	add	r20, r24
    ab84:	59 1f       	adc	r21, r25
    ab86:	8a 0f       	add	r24, r26
    ab88:	9b 1f       	adc	r25, r27
    ab8a:	fc 01       	movw	r30, r24
    ab8c:	80 81       	ld	r24, Z
    ab8e:	fa 01       	movw	r30, r20
    ab90:	80 83       	st	Z, r24
			  strCurrency[i+1]=0;
    ab92:	11 82       	std	Z+1, r1	; 0x01
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    ab94:	2f 5f       	subi	r18, 0xFF	; 255
    ab96:	82 2f       	mov	r24, r18
    ab98:	90 e0       	ldi	r25, 0x00	; 0
    ab9a:	fd 01       	movw	r30, r26
    ab9c:	01 90       	ld	r0, Z+
    ab9e:	00 20       	and	r0, r0
    aba0:	e9 f7       	brne	.-6      	; 0xab9c <FormatCurrency+0x12a>
    aba2:	31 97       	sbiw	r30, 0x01	; 1
    aba4:	ea 1b       	sub	r30, r26
    aba6:	fb 0b       	sbc	r31, r27
    aba8:	8e 17       	cp	r24, r30
    abaa:	9f 07       	cpc	r25, r31
    abac:	48 f3       	brcs	.-46     	; 0xab80 <FormatCurrency+0x10e>
	          strCurrency[i]=fmtCurrency[i];
			  strCurrency[i+1]=0;
	      }
     }      
}
    abae:	64 96       	adiw	r28, 0x14	; 20
    abb0:	0f b6       	in	r0, 0x3f	; 63
    abb2:	f8 94       	cli
    abb4:	de bf       	out	0x3e, r29	; 62
    abb6:	0f be       	out	0x3f, r0	; 63
    abb8:	cd bf       	out	0x3d, r28	; 61
    abba:	cf 91       	pop	r28
    abbc:	df 91       	pop	r29
    abbe:	1f 91       	pop	r17
    abc0:	0f 91       	pop	r16
    abc2:	ff 90       	pop	r15
    abc4:	ef 90       	pop	r14
    abc6:	df 90       	pop	r13
    abc8:	cf 90       	pop	r12
    abca:	bf 90       	pop	r11
    abcc:	af 90       	pop	r10
    abce:	9f 90       	pop	r9
    abd0:	8f 90       	pop	r8
    abd2:	08 95       	ret

0000abd4 <SendConfigParamater>:
          stConfigProtocol=cpWaitSend;
	      break;
	 }
}

void SendConfigParamater(){
    abd4:	9f 92       	push	r9
    abd6:	af 92       	push	r10
    abd8:	bf 92       	push	r11
    abda:	cf 92       	push	r12
    abdc:	df 92       	push	r13
    abde:	ef 92       	push	r14
    abe0:	ff 92       	push	r15
    abe2:	0f 93       	push	r16
    abe4:	1f 93       	push	r17
    abe6:	df 93       	push	r29
    abe8:	cf 93       	push	r28
    abea:	cd b7       	in	r28, 0x3d	; 61
    abec:	de b7       	in	r29, 0x3e	; 62
    abee:	c6 56       	subi	r28, 0x66	; 102
    abf0:	d0 40       	sbci	r29, 0x00	; 0
    abf2:	0f b6       	in	r0, 0x3f	; 63
    abf4:	f8 94       	cli
    abf6:	de bf       	out	0x3e, r29	; 62
    abf8:	0f be       	out	0x3f, r0	; 63
    abfa:	cd bf       	out	0x3d, r28	; 61
char i,j,strSend[60];
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
    abfc:	81 e0       	ldi	r24, 0x01	; 1
    abfe:	60 e0       	ldi	r22, 0x00	; 0
    ac00:	4a ea       	ldi	r20, 0xAA	; 170
    ac02:	53 e2       	ldi	r21, 0x23	; 35
    ac04:	0e 94 3a a4 	call	0x14874	; 0x14874 <uart_printf>
    ac08:	07 e2       	ldi	r16, 0x27	; 39
    ac0a:	12 e0       	ldi	r17, 0x02	; 2
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
    ac0c:	6e 01       	movw	r12, r28
    ac0e:	08 94       	sec
    ac10:	c1 1c       	adc	r12, r1
    ac12:	d1 1c       	adc	r13, r1
		  FillChar(strSend,0,sizeof(strSend));
    ac14:	4a e2       	ldi	r20, 0x2A	; 42
    ac16:	e4 2e       	mov	r14, r20
    ac18:	f1 2c       	mov	r15, r1
    ac1a:	ec 0e       	add	r14, r28
    ac1c:	fd 1e       	adc	r15, r29
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
    ac1e:	37 ea       	ldi	r19, 0xA7	; 167
    ac20:	a3 2e       	mov	r10, r19
    ac22:	33 e2       	ldi	r19, 0x23	; 35
    ac24:	b3 2e       	mov	r11, r19

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
    ac26:	c6 01       	movw	r24, r12
    ac28:	b8 01       	movw	r22, r16
    ac2a:	49 e2       	ldi	r20, 0x29	; 41
    ac2c:	50 e0       	ldi	r21, 0x00	; 0
    ac2e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  FillChar(strSend,0,sizeof(strSend));
    ac32:	c7 01       	movw	r24, r14
    ac34:	60 e0       	ldi	r22, 0x00	; 0
    ac36:	70 e0       	ldi	r23, 0x00	; 0
    ac38:	4c e3       	ldi	r20, 0x3C	; 60
    ac3a:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
    ac3e:	00 d0       	rcall	.+0      	; 0xac40 <SendConfigParamater+0x6c>
    ac40:	00 d0       	rcall	.+0      	; 0xac42 <SendConfigParamater+0x6e>
    ac42:	00 d0       	rcall	.+0      	; 0xac44 <SendConfigParamater+0x70>
    ac44:	ed b7       	in	r30, 0x3d	; 61
    ac46:	fe b7       	in	r31, 0x3e	; 62
    ac48:	31 96       	adiw	r30, 0x01	; 1
    ac4a:	ad b7       	in	r26, 0x3d	; 61
    ac4c:	be b7       	in	r27, 0x3e	; 62
    ac4e:	12 96       	adiw	r26, 0x02	; 2
    ac50:	fc 92       	st	X, r15
    ac52:	ee 92       	st	-X, r14
    ac54:	11 97       	sbiw	r26, 0x01	; 1
    ac56:	b3 82       	std	Z+3, r11	; 0x03
    ac58:	a2 82       	std	Z+2, r10	; 0x02
    ac5a:	d5 82       	std	Z+5, r13	; 0x05
    ac5c:	c4 82       	std	Z+4, r12	; 0x04
    ac5e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  AddSpaceLag(strSend,40);
    ac62:	ed b7       	in	r30, 0x3d	; 61
    ac64:	fe b7       	in	r31, 0x3e	; 62
    ac66:	36 96       	adiw	r30, 0x06	; 6
    ac68:	0f b6       	in	r0, 0x3f	; 63
    ac6a:	f8 94       	cli
    ac6c:	fe bf       	out	0x3e, r31	; 62
    ac6e:	0f be       	out	0x3f, r0	; 63
    ac70:	ed bf       	out	0x3d, r30	; 61
    ac72:	c7 01       	movw	r24, r14
    ac74:	68 e2       	ldi	r22, 0x28	; 40
    ac76:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
		  uart_print(1,0,strSend);
    ac7a:	81 e0       	ldi	r24, 0x01	; 1
    ac7c:	60 e0       	ldi	r22, 0x00	; 0
    ac7e:	a7 01       	movw	r20, r14
    ac80:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
    ac84:	07 5d       	subi	r16, 0xD7	; 215
    ac86:	1f 4f       	sbci	r17, 0xFF	; 255
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
    ac88:	f3 e0       	ldi	r31, 0x03	; 3
    ac8a:	01 3c       	cpi	r16, 0xC1	; 193
    ac8c:	1f 07       	cpc	r17, r31
    ac8e:	59 f6       	brne	.-106    	; 0xac26 <SendConfigParamater+0x52>
    ac90:	0b eb       	ldi	r16, 0xBB	; 187
    ac92:	10 e0       	ldi	r17, 0x00	; 0
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
    ac94:	6e 01       	movw	r12, r28
    ac96:	08 94       	sec
    ac98:	c1 1c       	adc	r12, r1
    ac9a:	d1 1c       	adc	r13, r1
		 FillChar(strSend,0,sizeof(strSend));
    ac9c:	2a e2       	ldi	r18, 0x2A	; 42
    ac9e:	e2 2e       	mov	r14, r18
    aca0:	f1 2c       	mov	r15, r1
    aca2:	ec 0e       	add	r14, r28
    aca4:	fd 1e       	adc	r15, r29
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    aca6:	94 ea       	ldi	r25, 0xA4	; 164
    aca8:	a9 2e       	mov	r10, r25
    acaa:	93 e2       	ldi	r25, 0x23	; 35
    acac:	b9 2e       	mov	r11, r25
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
    acae:	c6 01       	movw	r24, r12
    acb0:	b8 01       	movw	r22, r16
    acb2:	4d e0       	ldi	r20, 0x0D	; 13
    acb4:	50 e0       	ldi	r21, 0x00	; 0
    acb6:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
    acba:	c7 01       	movw	r24, r14
    acbc:	60 e0       	ldi	r22, 0x00	; 0
    acbe:	70 e0       	ldi	r23, 0x00	; 0
    acc0:	4c e3       	ldi	r20, 0x3C	; 60
    acc2:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    acc6:	00 d0       	rcall	.+0      	; 0xacc8 <SendConfigParamater+0xf4>
    acc8:	00 d0       	rcall	.+0      	; 0xacca <SendConfigParamater+0xf6>
    acca:	00 d0       	rcall	.+0      	; 0xaccc <SendConfigParamater+0xf8>
    accc:	ed b7       	in	r30, 0x3d	; 61
    acce:	fe b7       	in	r31, 0x3e	; 62
    acd0:	31 96       	adiw	r30, 0x01	; 1
    acd2:	ad b7       	in	r26, 0x3d	; 61
    acd4:	be b7       	in	r27, 0x3e	; 62
    acd6:	12 96       	adiw	r26, 0x02	; 2
    acd8:	fc 92       	st	X, r15
    acda:	ee 92       	st	-X, r14
    acdc:	11 97       	sbiw	r26, 0x01	; 1
    acde:	b3 82       	std	Z+3, r11	; 0x03
    ace0:	a2 82       	std	Z+2, r10	; 0x02
    ace2:	d5 82       	std	Z+5, r13	; 0x05
    ace4:	c4 82       	std	Z+4, r12	; 0x04
    ace6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 AddSpaceLag(strSend,12);
    acea:	ed b7       	in	r30, 0x3d	; 61
    acec:	fe b7       	in	r31, 0x3e	; 62
    acee:	36 96       	adiw	r30, 0x06	; 6
    acf0:	0f b6       	in	r0, 0x3f	; 63
    acf2:	f8 94       	cli
    acf4:	fe bf       	out	0x3e, r31	; 62
    acf6:	0f be       	out	0x3f, r0	; 63
    acf8:	ed bf       	out	0x3d, r30	; 61
    acfa:	c7 01       	movw	r24, r14
    acfc:	6c e0       	ldi	r22, 0x0C	; 12
    acfe:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
		 uart_print(1,0,strSend);
    ad02:	81 e0       	ldi	r24, 0x01	; 1
    ad04:	60 e0       	ldi	r22, 0x00	; 0
    ad06:	a7 01       	movw	r20, r14
    ad08:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
    ad0c:	03 5f       	subi	r16, 0xF3	; 243
    ad0e:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
    ad10:	f1 e0       	ldi	r31, 0x01	; 1
    ad12:	09 30       	cpi	r16, 0x09	; 9
    ad14:	1f 07       	cpc	r17, r31
    ad16:	59 f6       	brne	.-106    	; 0xacae <SendConfigParamater+0xda>
    ad18:	05 e8       	ldi	r16, 0x85	; 133
    ad1a:	10 e0       	ldi	r17, 0x00	; 0
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
    ad1c:	6e 01       	movw	r12, r28
    ad1e:	08 94       	sec
    ad20:	c1 1c       	adc	r12, r1
    ad22:	d1 1c       	adc	r13, r1
		 FillChar(strSend,0,sizeof(strSend));
    ad24:	8a e2       	ldi	r24, 0x2A	; 42
    ad26:	e8 2e       	mov	r14, r24
    ad28:	f1 2c       	mov	r15, r1
    ad2a:	ec 0e       	add	r14, r28
    ad2c:	fd 1e       	adc	r15, r29
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    ad2e:	b1 ea       	ldi	r27, 0xA1	; 161
    ad30:	ab 2e       	mov	r10, r27
    ad32:	b3 e2       	ldi	r27, 0x23	; 35
    ad34:	bb 2e       	mov	r11, r27
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
    ad36:	c6 01       	movw	r24, r12
    ad38:	b8 01       	movw	r22, r16
    ad3a:	49 e0       	ldi	r20, 0x09	; 9
    ad3c:	50 e0       	ldi	r21, 0x00	; 0
    ad3e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
    ad42:	c7 01       	movw	r24, r14
    ad44:	60 e0       	ldi	r22, 0x00	; 0
    ad46:	70 e0       	ldi	r23, 0x00	; 0
    ad48:	4c e3       	ldi	r20, 0x3C	; 60
    ad4a:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    ad4e:	00 d0       	rcall	.+0      	; 0xad50 <SendConfigParamater+0x17c>
    ad50:	00 d0       	rcall	.+0      	; 0xad52 <SendConfigParamater+0x17e>
    ad52:	00 d0       	rcall	.+0      	; 0xad54 <SendConfigParamater+0x180>
    ad54:	ed b7       	in	r30, 0x3d	; 61
    ad56:	fe b7       	in	r31, 0x3e	; 62
    ad58:	31 96       	adiw	r30, 0x01	; 1
    ad5a:	ad b7       	in	r26, 0x3d	; 61
    ad5c:	be b7       	in	r27, 0x3e	; 62
    ad5e:	12 96       	adiw	r26, 0x02	; 2
    ad60:	fc 92       	st	X, r15
    ad62:	ee 92       	st	-X, r14
    ad64:	11 97       	sbiw	r26, 0x01	; 1
    ad66:	b3 82       	std	Z+3, r11	; 0x03
    ad68:	a2 82       	std	Z+2, r10	; 0x02
    ad6a:	d5 82       	std	Z+5, r13	; 0x05
    ad6c:	c4 82       	std	Z+4, r12	; 0x04
    ad6e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 AddSpaceLag(strSend,5);
    ad72:	ed b7       	in	r30, 0x3d	; 61
    ad74:	fe b7       	in	r31, 0x3e	; 62
    ad76:	36 96       	adiw	r30, 0x06	; 6
    ad78:	0f b6       	in	r0, 0x3f	; 63
    ad7a:	f8 94       	cli
    ad7c:	fe bf       	out	0x3e, r31	; 62
    ad7e:	0f be       	out	0x3f, r0	; 63
    ad80:	ed bf       	out	0x3d, r30	; 61
    ad82:	c7 01       	movw	r24, r14
    ad84:	65 e0       	ldi	r22, 0x05	; 5
    ad86:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
		 uart_print(1,0,strSend);
    ad8a:	81 e0       	ldi	r24, 0x01	; 1
    ad8c:	60 e0       	ldi	r22, 0x00	; 0
    ad8e:	a7 01       	movw	r20, r14
    ad90:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
    ad94:	07 5f       	subi	r16, 0xF7	; 247
    ad96:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
    ad98:	f0 e0       	ldi	r31, 0x00	; 0
    ad9a:	0b 3b       	cpi	r16, 0xBB	; 187
    ad9c:	1f 07       	cpc	r17, r31
    ad9e:	59 f6       	brne	.-106    	; 0xad36 <SendConfigParamater+0x162>
    ada0:	00 e0       	ldi	r16, 0x00	; 0
    ada2:	10 e0       	ldi	r17, 0x00	; 0
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
    ada4:	aa e2       	ldi	r26, 0x2A	; 42
    ada6:	ea 2e       	mov	r14, r26
    ada8:	f1 2c       	mov	r15, r1
    adaa:	ec 0e       	add	r14, r28
    adac:	fd 1e       	adc	r15, r29
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    adae:	fc e9       	ldi	r31, 0x9C	; 156
    adb0:	cf 2e       	mov	r12, r31
    adb2:	f3 e2       	ldi	r31, 0x23	; 35
    adb4:	df 2e       	mov	r13, r31
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
    adb6:	c8 01       	movw	r24, r16
    adb8:	8b 5b       	subi	r24, 0xBB	; 187
    adba:	9f 4f       	sbci	r25, 0xFF	; 255
    adbc:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    adc0:	28 2f       	mov	r18, r24
		  if (xEEPROM>=100)xEEPROM=0;
    adc2:	84 36       	cpi	r24, 0x64	; 100
    adc4:	08 f0       	brcs	.+2      	; 0xadc8 <SendConfigParamater+0x1f4>
    adc6:	20 e0       	ldi	r18, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
    adc8:	c7 01       	movw	r24, r14
    adca:	60 e0       	ldi	r22, 0x00	; 0
    adcc:	70 e0       	ldi	r23, 0x00	; 0
    adce:	4c e3       	ldi	r20, 0x3C	; 60
    add0:	a7 96       	adiw	r28, 0x27	; 39
    add2:	2f af       	std	Y+63, r18	; 0x3f
    add4:	a7 97       	sbiw	r28, 0x27	; 39
    add6:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    adda:	00 d0       	rcall	.+0      	; 0xaddc <SendConfigParamater+0x208>
    addc:	00 d0       	rcall	.+0      	; 0xadde <SendConfigParamater+0x20a>
    adde:	00 d0       	rcall	.+0      	; 0xade0 <SendConfigParamater+0x20c>
    ade0:	ed b7       	in	r30, 0x3d	; 61
    ade2:	fe b7       	in	r31, 0x3e	; 62
    ade4:	31 96       	adiw	r30, 0x01	; 1
    ade6:	ad b7       	in	r26, 0x3d	; 61
    ade8:	be b7       	in	r27, 0x3e	; 62
    adea:	12 96       	adiw	r26, 0x02	; 2
    adec:	fc 92       	st	X, r15
    adee:	ee 92       	st	-X, r14
    adf0:	11 97       	sbiw	r26, 0x01	; 1
    adf2:	d3 82       	std	Z+3, r13	; 0x03
    adf4:	c2 82       	std	Z+2, r12	; 0x02
    adf6:	a7 96       	adiw	r28, 0x27	; 39
    adf8:	2f ad       	ldd	r18, Y+63	; 0x3f
    adfa:	a7 97       	sbiw	r28, 0x27	; 39
    adfc:	24 83       	std	Z+4, r18	; 0x04
    adfe:	15 82       	std	Z+5, r1	; 0x05
    ae00:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  AddSpaceLag(strSend,2);
    ae04:	ed b7       	in	r30, 0x3d	; 61
    ae06:	fe b7       	in	r31, 0x3e	; 62
    ae08:	36 96       	adiw	r30, 0x06	; 6
    ae0a:	0f b6       	in	r0, 0x3f	; 63
    ae0c:	f8 94       	cli
    ae0e:	fe bf       	out	0x3e, r31	; 62
    ae10:	0f be       	out	0x3f, r0	; 63
    ae12:	ed bf       	out	0x3d, r30	; 61
    ae14:	c7 01       	movw	r24, r14
    ae16:	62 e0       	ldi	r22, 0x02	; 2
    ae18:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
		 uart_print(1,0,strSend);
    ae1c:	81 e0       	ldi	r24, 0x01	; 1
    ae1e:	60 e0       	ldi	r22, 0x00	; 0
    ae20:	a7 01       	movw	r20, r14
    ae22:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
    ae26:	0f 5f       	subi	r16, 0xFF	; 255
    ae28:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
    ae2a:	08 30       	cpi	r16, 0x08	; 8
    ae2c:	11 05       	cpc	r17, r1
    ae2e:	19 f6       	brne	.-122    	; 0xadb6 <SendConfigParamater+0x1e2>
    ae30:	05 e5       	ldi	r16, 0x55	; 85
    ae32:	10 e0       	ldi	r17, 0x00	; 0
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
			   if (xEEPROM>=10)xEEPROM=0;
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
    ae34:	ea e2       	ldi	r30, 0x2A	; 42
    ae36:	ee 2e       	mov	r14, r30
    ae38:	f1 2c       	mov	r15, r1
    ae3a:	ec 0e       	add	r14, r28
    ae3c:	fd 1e       	adc	r15, r29
    ae3e:	79 e9       	ldi	r23, 0x99	; 153
    ae40:	a7 2e       	mov	r10, r23
    ae42:	73 e2       	ldi	r23, 0x23	; 35
    ae44:	b7 2e       	mov	r11, r23
    ae46:	31 c0       	rjmp	.+98     	; 0xaeaa <SendConfigParamater+0x2d6>
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
    ae48:	c6 01       	movw	r24, r12
    ae4a:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
			   if (xEEPROM>=10)xEEPROM=0;
    ae4e:	8a 30       	cpi	r24, 0x0A	; 10
    ae50:	08 f0       	brcs	.+2      	; 0xae54 <SendConfigParamater+0x280>
    ae52:	80 e0       	ldi	r24, 0x00	; 0
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
    ae54:	00 d0       	rcall	.+0      	; 0xae56 <SendConfigParamater+0x282>
    ae56:	00 d0       	rcall	.+0      	; 0xae58 <SendConfigParamater+0x284>
    ae58:	00 d0       	rcall	.+0      	; 0xae5a <SendConfigParamater+0x286>
    ae5a:	ed b7       	in	r30, 0x3d	; 61
    ae5c:	fe b7       	in	r31, 0x3e	; 62
    ae5e:	31 96       	adiw	r30, 0x01	; 1
    ae60:	ad b7       	in	r26, 0x3d	; 61
    ae62:	be b7       	in	r27, 0x3e	; 62
    ae64:	12 96       	adiw	r26, 0x02	; 2
    ae66:	fc 92       	st	X, r15
    ae68:	ee 92       	st	-X, r14
    ae6a:	11 97       	sbiw	r26, 0x01	; 1
    ae6c:	b3 82       	std	Z+3, r11	; 0x03
    ae6e:	a2 82       	std	Z+2, r10	; 0x02
    ae70:	84 83       	std	Z+4, r24	; 0x04
    ae72:	15 82       	std	Z+5, r1	; 0x05
    ae74:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   uart_print(1,0,strSend);
    ae78:	ed b7       	in	r30, 0x3d	; 61
    ae7a:	fe b7       	in	r31, 0x3e	; 62
    ae7c:	36 96       	adiw	r30, 0x06	; 6
    ae7e:	0f b6       	in	r0, 0x3f	; 63
    ae80:	f8 94       	cli
    ae82:	fe bf       	out	0x3e, r31	; 62
    ae84:	0f be       	out	0x3f, r0	; 63
    ae86:	ed bf       	out	0x3d, r30	; 61
    ae88:	81 e0       	ldi	r24, 0x01	; 1
    ae8a:	60 e0       	ldi	r22, 0x00	; 0
    ae8c:	a7 01       	movw	r20, r14
    ae8e:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
    ae92:	9a 94       	dec	r9
    ae94:	08 94       	sec
    ae96:	c1 1c       	adc	r12, r1
    ae98:	d1 1c       	adc	r13, r1
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
    ae9a:	99 20       	and	r9, r9
    ae9c:	a9 f6       	brne	.-86     	; 0xae48 <SendConfigParamater+0x274>
    ae9e:	0a 5f       	subi	r16, 0xFA	; 250
    aea0:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
    aea2:	f0 e0       	ldi	r31, 0x00	; 0
    aea4:	05 38       	cpi	r16, 0x85	; 133
    aea6:	1f 07       	cpc	r17, r31
    aea8:	21 f0       	breq	.+8      	; 0xaeb2 <SendConfigParamater+0x2de>
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
    aeaa:	68 01       	movw	r12, r16
    aeac:	66 e0       	ldi	r22, 0x06	; 6
    aeae:	96 2e       	mov	r9, r22
    aeb0:	cb cf       	rjmp	.-106    	; 0xae48 <SendConfigParamater+0x274>
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
			   uart_print(1,0,strSend);
		  }
	 }
	 //PrintNoMoney
	 xEEPROM=eeprom_read_byte(&DefPrintMoney);
    aeb2:	81 ec       	ldi	r24, 0xC1	; 193
    aeb4:	93 e0       	ldi	r25, 0x03	; 3
    aeb6:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
	 if (xEEPROM==True){
    aeba:	81 30       	cpi	r24, 0x01	; 1
    aebc:	79 f4       	brne	.+30     	; 0xaedc <SendConfigParamater+0x308>
		 sprintf_P(strSend,PSTR("1"));
    aebe:	00 d0       	rcall	.+0      	; 0xaec0 <SendConfigParamater+0x2ec>
    aec0:	00 d0       	rcall	.+0      	; 0xaec2 <SendConfigParamater+0x2ee>
    aec2:	ad b7       	in	r26, 0x3d	; 61
    aec4:	be b7       	in	r27, 0x3e	; 62
    aec6:	12 96       	adiw	r26, 0x02	; 2
    aec8:	fc 92       	st	X, r15
    aeca:	ee 92       	st	-X, r14
    aecc:	11 97       	sbiw	r26, 0x01	; 1
    aece:	87 e9       	ldi	r24, 0x97	; 151
    aed0:	93 e2       	ldi	r25, 0x23	; 35
    aed2:	14 96       	adiw	r26, 0x04	; 4
    aed4:	9c 93       	st	X, r25
    aed6:	8e 93       	st	-X, r24
    aed8:	13 97       	sbiw	r26, 0x03	; 3
    aeda:	0a c0       	rjmp	.+20     	; 0xaef0 <SendConfigParamater+0x31c>
	 }else{
	     sprintf_P(strSend,PSTR("0"));
    aedc:	00 d0       	rcall	.+0      	; 0xaede <SendConfigParamater+0x30a>
    aede:	00 d0       	rcall	.+0      	; 0xaee0 <SendConfigParamater+0x30c>
    aee0:	ed b7       	in	r30, 0x3d	; 61
    aee2:	fe b7       	in	r31, 0x3e	; 62
    aee4:	f2 82       	std	Z+2, r15	; 0x02
    aee6:	e1 82       	std	Z+1, r14	; 0x01
    aee8:	85 e9       	ldi	r24, 0x95	; 149
    aeea:	93 e2       	ldi	r25, 0x23	; 35
    aeec:	94 83       	std	Z+4, r25	; 0x04
    aeee:	83 83       	std	Z+3, r24	; 0x03
    aef0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    aef4:	0f 90       	pop	r0
    aef6:	0f 90       	pop	r0
    aef8:	0f 90       	pop	r0
    aefa:	0f 90       	pop	r0
	 }uart_print(1,0,strSend);
    aefc:	8e 01       	movw	r16, r28
    aefe:	06 5d       	subi	r16, 0xD6	; 214
    af00:	1f 4f       	sbci	r17, 0xFF	; 255
    af02:	81 e0       	ldi	r24, 0x01	; 1
    af04:	60 e0       	ldi	r22, 0x00	; 0
    af06:	a8 01       	movw	r20, r16
    af08:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
    af0c:	80 e0       	ldi	r24, 0x00	; 0
    af0e:	90 e0       	ldi	r25, 0x00	; 0
    af10:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    af14:	00 d0       	rcall	.+0      	; 0xaf16 <SendConfigParamater+0x342>
    af16:	00 d0       	rcall	.+0      	; 0xaf18 <SendConfigParamater+0x344>
    af18:	00 d0       	rcall	.+0      	; 0xaf1a <SendConfigParamater+0x346>
    af1a:	ed b7       	in	r30, 0x3d	; 61
    af1c:	fe b7       	in	r31, 0x3e	; 62
    af1e:	31 96       	adiw	r30, 0x01	; 1
    af20:	ad b7       	in	r26, 0x3d	; 61
    af22:	be b7       	in	r27, 0x3e	; 62
    af24:	12 96       	adiw	r26, 0x02	; 2
    af26:	1c 93       	st	X, r17
    af28:	0e 93       	st	-X, r16
    af2a:	11 97       	sbiw	r26, 0x01	; 1
    af2c:	20 e9       	ldi	r18, 0x90	; 144
    af2e:	33 e2       	ldi	r19, 0x23	; 35
    af30:	33 83       	std	Z+3, r19	; 0x03
    af32:	22 83       	std	Z+2, r18	; 0x02
    af34:	84 83       	std	Z+4, r24	; 0x04
    af36:	15 82       	std	Z+5, r1	; 0x05
    af38:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
     uart_print(1,0,strSend);
    af3c:	ed b7       	in	r30, 0x3d	; 61
    af3e:	fe b7       	in	r31, 0x3e	; 62
    af40:	36 96       	adiw	r30, 0x06	; 6
    af42:	0f b6       	in	r0, 0x3f	; 63
    af44:	f8 94       	cli
    af46:	fe bf       	out	0x3e, r31	; 62
    af48:	0f be       	out	0x3f, r0	; 63
    af4a:	ed bf       	out	0x3d, r30	; 61
    af4c:	81 e0       	ldi	r24, 0x01	; 1
    af4e:	60 e0       	ldi	r22, 0x00	; 0
    af50:	a8 01       	movw	r20, r16
    af52:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
    af56:	ee 24       	eor	r14, r14
    af58:	ff 24       	eor	r15, r15
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
    af5a:	c0 2e       	mov	r12, r16
    af5c:	a1 2e       	mov	r10, r17
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    af5e:	0b e8       	ldi	r16, 0x8B	; 139
    af60:	13 e2       	ldi	r17, 0x23	; 35
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
    af62:	c7 01       	movw	r24, r14
    af64:	83 5b       	subi	r24, 0xB3	; 179
    af66:	9f 4f       	sbci	r25, 0xFF	; 255
    af68:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    af6c:	28 2f       	mov	r18, r24
		  if (xEEPROM>=100)xEEPROM=0;
    af6e:	84 36       	cpi	r24, 0x64	; 100
    af70:	08 f0       	brcs	.+2      	; 0xaf74 <SendConfigParamater+0x3a0>
    af72:	20 e0       	ldi	r18, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
    af74:	8c 2d       	mov	r24, r12
    af76:	9a 2d       	mov	r25, r10
    af78:	60 e0       	ldi	r22, 0x00	; 0
    af7a:	70 e0       	ldi	r23, 0x00	; 0
    af7c:	4c e3       	ldi	r20, 0x3C	; 60
    af7e:	a7 96       	adiw	r28, 0x27	; 39
    af80:	2f af       	std	Y+63, r18	; 0x3f
    af82:	a7 97       	sbiw	r28, 0x27	; 39
    af84:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    af88:	00 d0       	rcall	.+0      	; 0xaf8a <SendConfigParamater+0x3b6>
    af8a:	00 d0       	rcall	.+0      	; 0xaf8c <SendConfigParamater+0x3b8>
    af8c:	00 d0       	rcall	.+0      	; 0xaf8e <SendConfigParamater+0x3ba>
    af8e:	ed b7       	in	r30, 0x3d	; 61
    af90:	fe b7       	in	r31, 0x3e	; 62
    af92:	31 96       	adiw	r30, 0x01	; 1
    af94:	ad b7       	in	r26, 0x3d	; 61
    af96:	be b7       	in	r27, 0x3e	; 62
    af98:	11 96       	adiw	r26, 0x01	; 1
    af9a:	cc 92       	st	X, r12
    af9c:	11 97       	sbiw	r26, 0x01	; 1
    af9e:	12 96       	adiw	r26, 0x02	; 2
    afa0:	ac 92       	st	X, r10
    afa2:	13 83       	std	Z+3, r17	; 0x03
    afa4:	02 83       	std	Z+2, r16	; 0x02
    afa6:	a7 96       	adiw	r28, 0x27	; 39
    afa8:	2f ad       	ldd	r18, Y+63	; 0x3f
    afaa:	a7 97       	sbiw	r28, 0x27	; 39
    afac:	24 83       	std	Z+4, r18	; 0x04
    afae:	15 82       	std	Z+5, r1	; 0x05
    afb0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  AddSpaceLag(strSend,2);
    afb4:	ed b7       	in	r30, 0x3d	; 61
    afb6:	fe b7       	in	r31, 0x3e	; 62
    afb8:	36 96       	adiw	r30, 0x06	; 6
    afba:	0f b6       	in	r0, 0x3f	; 63
    afbc:	f8 94       	cli
    afbe:	fe bf       	out	0x3e, r31	; 62
    afc0:	0f be       	out	0x3f, r0	; 63
    afc2:	ed bf       	out	0x3d, r30	; 61
    afc4:	8c 2d       	mov	r24, r12
    afc6:	9a 2d       	mov	r25, r10
    afc8:	62 e0       	ldi	r22, 0x02	; 2
    afca:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
		 uart_print(1,0,strSend);
    afce:	81 e0       	ldi	r24, 0x01	; 1
    afd0:	60 e0       	ldi	r22, 0x00	; 0
    afd2:	4c 2d       	mov	r20, r12
    afd4:	5a 2d       	mov	r21, r10
    afd6:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
    afda:	08 94       	sec
    afdc:	e1 1c       	adc	r14, r1
    afde:	f1 1c       	adc	r15, r1
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
    afe0:	f8 e0       	ldi	r31, 0x08	; 8
    afe2:	ef 16       	cp	r14, r31
    afe4:	f1 04       	cpc	r15, r1
    afe6:	09 f0       	breq	.+2      	; 0xafea <SendConfigParamater+0x416>
    afe8:	bc cf       	rjmp	.-136    	; 0xaf62 <SendConfigParamater+0x38e>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 uart_printf(1,1,PSTR(">"));
    afea:	81 e0       	ldi	r24, 0x01	; 1
    afec:	61 e0       	ldi	r22, 0x01	; 1
    afee:	49 e8       	ldi	r20, 0x89	; 137
    aff0:	53 e2       	ldi	r21, 0x23	; 35
    aff2:	0e 94 3a a4 	call	0x14874	; 0x14874 <uart_printf>
	 //End
}
    aff6:	ca 59       	subi	r28, 0x9A	; 154
    aff8:	df 4f       	sbci	r29, 0xFF	; 255
    affa:	0f b6       	in	r0, 0x3f	; 63
    affc:	f8 94       	cli
    affe:	de bf       	out	0x3e, r29	; 62
    b000:	0f be       	out	0x3f, r0	; 63
    b002:	cd bf       	out	0x3d, r28	; 61
    b004:	cf 91       	pop	r28
    b006:	df 91       	pop	r29
    b008:	1f 91       	pop	r17
    b00a:	0f 91       	pop	r16
    b00c:	ff 90       	pop	r15
    b00e:	ef 90       	pop	r14
    b010:	df 90       	pop	r13
    b012:	cf 90       	pop	r12
    b014:	bf 90       	pop	r11
    b016:	af 90       	pop	r10
    b018:	9f 90       	pop	r9
    b01a:	08 95       	ret

0000b01c <GenerateTransactionNum>:
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    b01c:	af 92       	push	r10
    b01e:	bf 92       	push	r11
    b020:	cf 92       	push	r12
    b022:	df 92       	push	r13
    b024:	ef 92       	push	r14
    b026:	ff 92       	push	r15
    b028:	0f 93       	push	r16
    b02a:	1f 93       	push	r17
    b02c:	df 93       	push	r29
    b02e:	cf 93       	push	r28
    b030:	cd b7       	in	r28, 0x3d	; 61
    b032:	de b7       	in	r29, 0x3e	; 62
    b034:	27 97       	sbiw	r28, 0x07	; 7
    b036:	0f b6       	in	r0, 0x3f	; 63
    b038:	f8 94       	cli
    b03a:	de bf       	out	0x3e, r29	; 62
    b03c:	0f be       	out	0x3f, r0	; 63
    b03e:	cd bf       	out	0x3d, r28	; 61
    b040:	7c 01       	movw	r14, r24
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
    b042:	8e 01       	movw	r16, r28
    b044:	0f 5f       	subi	r16, 0xFF	; 255
    b046:	1f 4f       	sbci	r17, 0xFF	; 255
    b048:	c8 01       	movw	r24, r16
    b04a:	67 e0       	ldi	r22, 0x07	; 7
    b04c:	70 e0       	ldi	r23, 0x00	; 0
    b04e:	40 e0       	ldi	r20, 0x00	; 0
    b050:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
    b054:	c8 01       	movw	r24, r16
    b056:	68 e3       	ldi	r22, 0x38	; 56
    b058:	71 e0       	ldi	r23, 0x01	; 1
    b05a:	47 e0       	ldi	r20, 0x07	; 7
    b05c:	50 e0       	ldi	r21, 0x00	; 0
    b05e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);
    b062:	f8 01       	movw	r30, r16
    b064:	01 90       	ld	r0, Z+
    b066:	00 20       	and	r0, r0
    b068:	e9 f7       	brne	.-6      	; 0xb064 <GenerateTransactionNum+0x48>
    b06a:	af 01       	movw	r20, r30
    b06c:	41 50       	subi	r20, 0x01	; 1
    b06e:	50 40       	sbci	r21, 0x00	; 0
    b070:	40 1b       	sub	r20, r16
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    b072:	c4 2e       	mov	r12, r20
    b074:	dd 24       	eor	r13, r13
    b076:	98 01       	movw	r18, r16
    b078:	2c 0d       	add	r18, r12
    b07a:	3d 1d       	adc	r19, r13
    b07c:	ce 0c       	add	r12, r14
    b07e:	df 1c       	adc	r13, r15
    b080:	76 01       	movw	r14, r12
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
    b082:	61 e0       	ldi	r22, 0x01	; 1
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
		 cNum='0'+((xNum+xAdd)%10);
    b084:	5a e0       	ldi	r21, 0x0A	; 10
    b086:	a5 2e       	mov	r10, r21
    b088:	b1 2c       	mov	r11, r1
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    b08a:	10 c0       	rjmp	.+32     	; 0xb0ac <GenerateTransactionNum+0x90>
    b08c:	21 50       	subi	r18, 0x01	; 1
    b08e:	30 40       	sbci	r19, 0x00	; 0
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    b090:	f9 01       	movw	r30, r18
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
    b092:	80 81       	ld	r24, Z
    b094:	80 53       	subi	r24, 0x30	; 48
		 cNum='0'+((xNum+xAdd)%10);
    b096:	90 e0       	ldi	r25, 0x00	; 0
    b098:	86 0f       	add	r24, r22
    b09a:	91 1d       	adc	r25, r1
    b09c:	b5 01       	movw	r22, r10
    b09e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    b0a2:	80 5d       	subi	r24, 0xD0	; 208
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
    b0a4:	80 83       	st	Z, r24
		 sTransNumber[Length-i-1]=cNum;
    b0a6:	f7 01       	movw	r30, r14
    b0a8:	82 93       	st	-Z, r24
    b0aa:	7f 01       	movw	r14, r30
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    b0ac:	20 17       	cp	r18, r16
    b0ae:	31 07       	cpc	r19, r17
    b0b0:	69 f7       	brne	.-38     	; 0xb08c <GenerateTransactionNum+0x70>
		 cNum='0'+((xNum+xAdd)%10);
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
		 sTransNumber[Length-i-1]=cNum;
	 }
	 sTransNumber[Length]=0;
    b0b2:	f6 01       	movw	r30, r12
    b0b4:	10 82       	st	Z, r1
	 PTransNum[Length]=0;
    b0b6:	ce 01       	movw	r24, r28
    b0b8:	01 96       	adiw	r24, 0x01	; 1
    b0ba:	fc 01       	movw	r30, r24
    b0bc:	e4 0f       	add	r30, r20
    b0be:	f1 1d       	adc	r31, r1
    b0c0:	10 82       	st	Z, r1

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
    b0c2:	68 e3       	ldi	r22, 0x38	; 56
    b0c4:	71 e0       	ldi	r23, 0x01	; 1
    b0c6:	47 e0       	ldi	r20, 0x07	; 7
    b0c8:	50 e0       	ldi	r21, 0x00	; 0
    b0ca:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
}
    b0ce:	27 96       	adiw	r28, 0x07	; 7
    b0d0:	0f b6       	in	r0, 0x3f	; 63
    b0d2:	f8 94       	cli
    b0d4:	de bf       	out	0x3e, r29	; 62
    b0d6:	0f be       	out	0x3f, r0	; 63
    b0d8:	cd bf       	out	0x3d, r28	; 61
    b0da:	cf 91       	pop	r28
    b0dc:	df 91       	pop	r29
    b0de:	1f 91       	pop	r17
    b0e0:	0f 91       	pop	r16
    b0e2:	ff 90       	pop	r15
    b0e4:	ef 90       	pop	r14
    b0e6:	df 90       	pop	r13
    b0e8:	cf 90       	pop	r12
    b0ea:	bf 90       	pop	r11
    b0ec:	af 90       	pop	r10
    b0ee:	08 95       	ret

0000b0f0 <ProcMessage91>:
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
	 }
}

void ProcMessage91(){
    b0f0:	cf 93       	push	r28
    b0f2:	df 93       	push	r29
     StrPosCopy(rcv_trans,strTranNo,37,6);
    b0f4:	cb ef       	ldi	r28, 0xFB	; 251
    b0f6:	d9 e0       	ldi	r29, 0x09	; 9
    b0f8:	ce 01       	movw	r24, r28
    b0fa:	65 e6       	ldi	r22, 0x65	; 101
    b0fc:	7d e0       	ldi	r23, 0x0D	; 13
    b0fe:	45 e2       	ldi	r20, 0x25	; 37
    b100:	50 e0       	ldi	r21, 0x00	; 0
    b102:	26 e0       	ldi	r18, 0x06	; 6
    b104:	30 e0       	ldi	r19, 0x00	; 0
    b106:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strFIP_ID,43,2);
    b10a:	ce 01       	movw	r24, r28
    b10c:	67 e9       	ldi	r22, 0x97	; 151
    b10e:	78 e0       	ldi	r23, 0x08	; 8
    b110:	4b e2       	ldi	r20, 0x2B	; 43
    b112:	50 e0       	ldi	r21, 0x00	; 0
    b114:	22 e0       	ldi	r18, 0x02	; 2
    b116:	30 e0       	ldi	r19, 0x00	; 0
    b118:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strDescription,45,15);
    b11c:	ce 01       	movw	r24, r28
    b11e:	60 e0       	ldi	r22, 0x00	; 0
    b120:	79 e0       	ldi	r23, 0x09	; 9
    b122:	4d e2       	ldi	r20, 0x2D	; 45
    b124:	50 e0       	ldi	r21, 0x00	; 0
    b126:	2f e0       	ldi	r18, 0x0F	; 15
    b128:	30 e0       	ldi	r19, 0x00	; 0
    b12a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strPrice,60,6);
    b12e:	ce 01       	movw	r24, r28
    b130:	6c e7       	ldi	r22, 0x7C	; 124
    b132:	76 e0       	ldi	r23, 0x06	; 6
    b134:	4c e3       	ldi	r20, 0x3C	; 60
    b136:	50 e0       	ldi	r21, 0x00	; 0
    b138:	26 e0       	ldi	r18, 0x06	; 6
    b13a:	30 e0       	ldi	r19, 0x00	; 0
    b13c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strVolume,66,8);
    b140:	ce 01       	movw	r24, r28
    b142:	63 e5       	ldi	r22, 0x53	; 83
    b144:	74 e0       	ldi	r23, 0x04	; 4
    b146:	42 e4       	ldi	r20, 0x42	; 66
    b148:	50 e0       	ldi	r21, 0x00	; 0
    b14a:	28 e0       	ldi	r18, 0x08	; 8
    b14c:	30 e0       	ldi	r19, 0x00	; 0
    b14e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strAmount,74,8); 
    b152:	ce 01       	movw	r24, r28
    b154:	61 e9       	ldi	r22, 0x91	; 145
    b156:	7c e0       	ldi	r23, 0x0C	; 12
    b158:	4a e4       	ldi	r20, 0x4A	; 74
    b15a:	50 e0       	ldi	r21, 0x00	; 0
    b15c:	28 e0       	ldi	r18, 0x08	; 8
    b15e:	30 e0       	ldi	r19, 0x00	; 0
    b160:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 StrPosCopy(rcv_trans,strStatus,82,1);
    b164:	ce 01       	movw	r24, r28
    b166:	68 e6       	ldi	r22, 0x68	; 104
    b168:	74 e0       	ldi	r23, 0x04	; 4
    b16a:	42 e5       	ldi	r20, 0x52	; 82
    b16c:	50 e0       	ldi	r21, 0x00	; 0
    b16e:	21 e0       	ldi	r18, 0x01	; 1
    b170:	30 e0       	ldi	r19, 0x00	; 0
    b172:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
    b176:	ce 01       	movw	r24, r28
    b178:	6a ed       	ldi	r22, 0xDA	; 218
    b17a:	73 e0       	ldi	r23, 0x03	; 3
    b17c:	43 e5       	ldi	r20, 0x53	; 83
    b17e:	50 e0       	ldi	r21, 0x00	; 0
    b180:	29 e0       	ldi	r18, 0x09	; 9
    b182:	30 e0       	ldi	r19, 0x00	; 0
    b184:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
}
    b188:	df 91       	pop	r29
    b18a:	cf 91       	pop	r28
    b18c:	08 95       	ret

0000b18e <IdentifyMessage>:
        //sprintf_P(strSerial,PSTR("RFID:%s"),strRFID);
        //uart_print(0,1,strSerial);
	 }
}

void IdentifyMessage(char STX,unsigned int Length){
    b18e:	1f 93       	push	r17
   if (STX==0x01){
    b190:	81 30       	cpi	r24, 0x01	; 1
    b192:	09 f0       	breq	.+2      	; 0xb196 <IdentifyMessage+0x8>
    b194:	5f c0       	rjmp	.+190    	; 0xb254 <IdentifyMessage+0xc6>
	    if ((Length==MSG00_LENGTH)||(MsgCode==0)) IsMessage00=True;//47
    b196:	6f 32       	cpi	r22, 0x2F	; 47
    b198:	71 05       	cpc	r23, r1
    b19a:	21 f0       	breq	.+8      	; 0xb1a4 <IdentifyMessage+0x16>
    b19c:	80 91 24 01 	lds	r24, 0x0124
    b1a0:	88 23       	and	r24, r24
    b1a2:	21 f4       	brne	.+8      	; 0xb1ac <IdentifyMessage+0x1e>
    b1a4:	81 e0       	ldi	r24, 0x01	; 1
    b1a6:	80 93 7c 02 	sts	0x027C, r24
    b1aa:	4a c0       	rjmp	.+148    	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG09_LENGTH)||(MsgCode==9)) IsMessage09=True;//615
    b1ac:	6c 36       	cpi	r22, 0x6C	; 108
    b1ae:	71 05       	cpc	r23, r1
    b1b0:	11 f0       	breq	.+4      	; 0xb1b6 <IdentifyMessage+0x28>
    b1b2:	89 30       	cpi	r24, 0x09	; 9
    b1b4:	21 f4       	brne	.+8      	; 0xb1be <IdentifyMessage+0x30>
    b1b6:	81 e0       	ldi	r24, 0x01	; 1
    b1b8:	80 93 81 02 	sts	0x0281, r24
    b1bc:	41 c0       	rjmp	.+130    	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG11_LENGTH)||(MsgCode==11)) IsMessage11=True;//615
    b1be:	92 e0       	ldi	r25, 0x02	; 2
    b1c0:	67 36       	cpi	r22, 0x67	; 103
    b1c2:	79 07       	cpc	r23, r25
    b1c4:	11 f0       	breq	.+4      	; 0xb1ca <IdentifyMessage+0x3c>
    b1c6:	8b 30       	cpi	r24, 0x0B	; 11
    b1c8:	21 f4       	brne	.+8      	; 0xb1d2 <IdentifyMessage+0x44>
    b1ca:	81 e0       	ldi	r24, 0x01	; 1
    b1cc:	80 93 7e 02 	sts	0x027E, r24
    b1d0:	37 c0       	rjmp	.+110    	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG23_LENGTH)||(MsgCode==23)) IsMessage23=True;//145
    b1d2:	61 39       	cpi	r22, 0x91	; 145
    b1d4:	71 05       	cpc	r23, r1
    b1d6:	11 f0       	breq	.+4      	; 0xb1dc <IdentifyMessage+0x4e>
    b1d8:	87 31       	cpi	r24, 0x17	; 23
    b1da:	21 f4       	brne	.+8      	; 0xb1e4 <IdentifyMessage+0x56>
    b1dc:	81 e0       	ldi	r24, 0x01	; 1
    b1de:	80 93 80 02 	sts	0x0280, r24
    b1e2:	2e c0       	rjmp	.+92     	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG57_LENGTH)||(MsgCode==57)) IsMessage57=True;//230
    b1e4:	66 3e       	cpi	r22, 0xE6	; 230
    b1e6:	71 05       	cpc	r23, r1
    b1e8:	11 f0       	breq	.+4      	; 0xb1ee <IdentifyMessage+0x60>
    b1ea:	89 33       	cpi	r24, 0x39	; 57
    b1ec:	21 f4       	brne	.+8      	; 0xb1f6 <IdentifyMessage+0x68>
    b1ee:	81 e0       	ldi	r24, 0x01	; 1
    b1f0:	80 93 83 02 	sts	0x0283, r24
    b1f4:	25 c0       	rjmp	.+74     	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG99_LENGTH)||(MsgCode==99)) IsMessage99=True;//378
    b1f6:	91 e0       	ldi	r25, 0x01	; 1
    b1f8:	68 39       	cpi	r22, 0x98	; 152
    b1fa:	79 07       	cpc	r23, r25
    b1fc:	11 f0       	breq	.+4      	; 0xb202 <IdentifyMessage+0x74>
    b1fe:	83 36       	cpi	r24, 0x63	; 99
    b200:	21 f4       	brne	.+8      	; 0xb20a <IdentifyMessage+0x7c>
    b202:	81 e0       	ldi	r24, 0x01	; 1
    b204:	80 93 7d 02 	sts	0x027D, r24
    b208:	1b c0       	rjmp	.+54     	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG81_LENGTH)||(MsgCode==81)) IsMessage81=True;//426
    b20a:	91 e0       	ldi	r25, 0x01	; 1
    b20c:	66 3b       	cpi	r22, 0xB6	; 182
    b20e:	79 07       	cpc	r23, r25
    b210:	11 f0       	breq	.+4      	; 0xb216 <IdentifyMessage+0x88>
    b212:	81 35       	cpi	r24, 0x51	; 81
    b214:	21 f4       	brne	.+8      	; 0xb21e <IdentifyMessage+0x90>
    b216:	81 e0       	ldi	r24, 0x01	; 1
    b218:	80 93 84 02 	sts	0x0284, r24
    b21c:	11 c0       	rjmp	.+34     	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG91_LENGTH)||(MsgCode==91)) IsMessage91=True;//426
    b21e:	6c 35       	cpi	r22, 0x5C	; 92
    b220:	71 05       	cpc	r23, r1
    b222:	11 f0       	breq	.+4      	; 0xb228 <IdentifyMessage+0x9a>
    b224:	8b 35       	cpi	r24, 0x5B	; 91
    b226:	21 f4       	brne	.+8      	; 0xb230 <IdentifyMessage+0xa2>
    b228:	81 e0       	ldi	r24, 0x01	; 1
    b22a:	80 93 85 02 	sts	0x0285, r24
    b22e:	08 c0       	rjmp	.+16     	; 0xb240 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG21_LENGTH)||(MsgCode==21)) IsMessage21=True;//426
    b230:	66 35       	cpi	r22, 0x56	; 86
    b232:	71 05       	cpc	r23, r1
    b234:	11 f0       	breq	.+4      	; 0xb23a <IdentifyMessage+0xac>
    b236:	85 31       	cpi	r24, 0x15	; 21
    b238:	19 f4       	brne	.+6      	; 0xb240 <IdentifyMessage+0xb2>
    b23a:	81 e0       	ldi	r24, 0x01	; 1
    b23c:	80 93 7f 02 	sts	0x027F, r24
        //EDC AdvanZ Respond
		if (IsMessage91==True){
    b240:	10 91 85 02 	lds	r17, 0x0285
    b244:	11 30       	cpi	r17, 0x01	; 1
    b246:	31 f4       	brne	.+12     	; 0xb254 <IdentifyMessage+0xc6>
		    IsMessage91=False;
    b248:	10 92 85 02 	sts	0x0285, r1
		    ProcMessage91();
    b24c:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <ProcMessage91>
			IsSendMessageEDC=True;
    b250:	10 93 75 02 	sts	0x0275, r17
		  }

//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}
    b254:	1f 91       	pop	r17
    b256:	08 95       	ret

0000b258 <procMessage99>:
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}

char procMessage99(){//<STX>[IFT IDSeq N Srce IPDest IPMsg CodeTran NoShiftDateTimeIsland IDFIP IDProduct IDDescriptionPriceVolumeAmountMOP TypeMOP NameCard IDCard HolderBalance Type Balance MeterVolume MeterAmount Current TimePrint Count Checksum ETX
    b258:	1f 93       	push	r17
    b25a:	cf 93       	push	r28
    b25c:	df 93       	push	r29
     char Result;
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
    b25e:	10 91 fb 09 	lds	r17, 0x09FB
    b262:	11 30       	cpi	r17, 0x01	; 1
    b264:	09 f0       	breq	.+2      	; 0xb268 <procMessage99+0x10>
    b266:	6e c1       	rjmp	.+732    	; 0xb544 <procMessage99+0x2ec>
    b268:	80 91 69 02 	lds	r24, 0x0269
    b26c:	90 91 6a 02 	lds	r25, 0x026A
    b270:	21 e0       	ldi	r18, 0x01	; 1
    b272:	8a 37       	cpi	r24, 0x7A	; 122
    b274:	92 07       	cpc	r25, r18
    b276:	08 f4       	brcc	.+2      	; 0xb27a <procMessage99+0x22>
    b278:	65 c1       	rjmp	.+714    	; 0xb544 <procMessage99+0x2ec>
       StrPosCopy(rcv_trans,strTranNo,37,6);//Transaction Number
    b27a:	8b ef       	ldi	r24, 0xFB	; 251
    b27c:	99 e0       	ldi	r25, 0x09	; 9
    b27e:	65 e6       	ldi	r22, 0x65	; 101
    b280:	7d e0       	ldi	r23, 0x0D	; 13
    b282:	45 e2       	ldi	r20, 0x25	; 37
    b284:	50 e0       	ldi	r21, 0x00	; 0
    b286:	26 e0       	ldi	r18, 0x06	; 6
    b288:	30 e0       	ldi	r19, 0x00	; 0
    b28a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strShift,43,1);
    b28e:	8b ef       	ldi	r24, 0xFB	; 251
    b290:	99 e0       	ldi	r25, 0x09	; 9
    b292:	66 e4       	ldi	r22, 0x46	; 70
    b294:	7d e0       	ldi	r23, 0x0D	; 13
    b296:	4b e2       	ldi	r20, 0x2B	; 43
    b298:	50 e0       	ldi	r21, 0x00	; 0
    b29a:	21 e0       	ldi	r18, 0x01	; 1
    b29c:	30 e0       	ldi	r19, 0x00	; 0
    b29e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       Shift=(CharPosCopy(rcv_trans,43)-'0');
    b2a2:	80 91 26 0a 	lds	r24, 0x0A26
    b2a6:	80 53       	subi	r24, 0x30	; 48
    b2a8:	80 93 97 02 	sts	0x0297, r24
       StrPosCopy(rcv_trans,strDate,44,10);
    b2ac:	8b ef       	ldi	r24, 0xFB	; 251
    b2ae:	99 e0       	ldi	r25, 0x09	; 9
    b2b0:	6c e4       	ldi	r22, 0x4C	; 76
    b2b2:	78 e0       	ldi	r23, 0x08	; 8
    b2b4:	4c e2       	ldi	r20, 0x2C	; 44
    b2b6:	50 e0       	ldi	r21, 0x00	; 0
    b2b8:	2a e0       	ldi	r18, 0x0A	; 10
    b2ba:	30 e0       	ldi	r19, 0x00	; 0
    b2bc:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strTime,54,8);
    b2c0:	8b ef       	ldi	r24, 0xFB	; 251
    b2c2:	99 e0       	ldi	r25, 0x09	; 9
    b2c4:	6b e2       	ldi	r22, 0x2B	; 43
    b2c6:	74 e0       	ldi	r23, 0x04	; 4
    b2c8:	46 e3       	ldi	r20, 0x36	; 54
    b2ca:	50 e0       	ldi	r21, 0x00	; 0
    b2cc:	28 e0       	ldi	r18, 0x08	; 8
    b2ce:	30 e0       	ldi	r19, 0x00	; 0
    b2d0:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strIslandID,62,2);
    b2d4:	8b ef       	ldi	r24, 0xFB	; 251
    b2d6:	99 e0       	ldi	r25, 0x09	; 9
    b2d8:	65 ed       	ldi	r22, 0xD5	; 213
    b2da:	79 e0       	ldi	r23, 0x09	; 9
    b2dc:	4e e3       	ldi	r20, 0x3E	; 62
    b2de:	50 e0       	ldi	r21, 0x00	; 0
    b2e0:	22 e0       	ldi	r18, 0x02	; 2
    b2e2:	30 e0       	ldi	r19, 0x00	; 0
    b2e4:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strFIP_ID,64,2);
    b2e8:	8b ef       	ldi	r24, 0xFB	; 251
    b2ea:	99 e0       	ldi	r25, 0x09	; 9
    b2ec:	67 e9       	ldi	r22, 0x97	; 151
    b2ee:	78 e0       	ldi	r23, 0x08	; 8
    b2f0:	40 e4       	ldi	r20, 0x40	; 64
    b2f2:	50 e0       	ldi	r21, 0x00	; 0
    b2f4:	22 e0       	ldi	r18, 0x02	; 2
    b2f6:	30 e0       	ldi	r19, 0x00	; 0
    b2f8:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strProductID,66,2);
    b2fc:	8b ef       	ldi	r24, 0xFB	; 251
    b2fe:	99 e0       	ldi	r25, 0x09	; 9
    b300:	6f e4       	ldi	r22, 0x4F	; 79
    b302:	79 e0       	ldi	r23, 0x09	; 9
    b304:	42 e4       	ldi	r20, 0x42	; 66
    b306:	50 e0       	ldi	r21, 0x00	; 0
    b308:	22 e0       	ldi	r18, 0x02	; 2
    b30a:	30 e0       	ldi	r19, 0x00	; 0
    b30c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strDescription,68,15);
    b310:	8b ef       	ldi	r24, 0xFB	; 251
    b312:	99 e0       	ldi	r25, 0x09	; 9
    b314:	60 e0       	ldi	r22, 0x00	; 0
    b316:	79 e0       	ldi	r23, 0x09	; 9
    b318:	44 e4       	ldi	r20, 0x44	; 68
    b31a:	50 e0       	ldi	r21, 0x00	; 0
    b31c:	2f e0       	ldi	r18, 0x0F	; 15
    b31e:	30 e0       	ldi	r19, 0x00	; 0
    b320:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       
	   //FillChar(strPrice,sizeof(strPrice),0);
       StrPosCopy(rcv_trans,strPrice,83,8);
    b324:	8b ef       	ldi	r24, 0xFB	; 251
    b326:	99 e0       	ldi	r25, 0x09	; 9
    b328:	6c e7       	ldi	r22, 0x7C	; 124
    b32a:	76 e0       	ldi	r23, 0x06	; 6
    b32c:	43 e5       	ldi	r20, 0x53	; 83
    b32e:	50 e0       	ldi	r21, 0x00	; 0
    b330:	28 e0       	ldi	r18, 0x08	; 8
    b332:	30 e0       	ldi	r19, 0x00	; 0
    b334:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

	   //FillChar(strVolume,sizeof(strVolume),0);
       StrPosCopy(rcv_trans,strVolume,91,8);
    b338:	8b ef       	ldi	r24, 0xFB	; 251
    b33a:	99 e0       	ldi	r25, 0x09	; 9
    b33c:	63 e5       	ldi	r22, 0x53	; 83
    b33e:	74 e0       	ldi	r23, 0x04	; 4
    b340:	4b e5       	ldi	r20, 0x5B	; 91
    b342:	50 e0       	ldi	r21, 0x00	; 0
    b344:	28 e0       	ldi	r18, 0x08	; 8
    b346:	30 e0       	ldi	r19, 0x00	; 0
    b348:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

	   //FillChar(strAmount,sizeof(strAmount),0);
       StrPosCopy(rcv_trans,strAmount,99,10);
    b34c:	8b ef       	ldi	r24, 0xFB	; 251
    b34e:	99 e0       	ldi	r25, 0x09	; 9
    b350:	61 e9       	ldi	r22, 0x91	; 145
    b352:	7c e0       	ldi	r23, 0x0C	; 12
    b354:	43 e6       	ldi	r20, 0x63	; 99
    b356:	50 e0       	ldi	r21, 0x00	; 0
    b358:	2a e0       	ldi	r18, 0x0A	; 10
    b35a:	30 e0       	ldi	r19, 0x00	; 0
    b35c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

       //StrPosCopy(rcv_trans,strMOPType,109,1);
       MOPType=(CharPosCopy(rcv_trans,109)-'0');
    b360:	80 91 68 0a 	lds	r24, 0x0A68
    b364:	80 53       	subi	r24, 0x30	; 48
    b366:	80 93 96 02 	sts	0x0296, r24
       StrPosCopy(rcv_trans,strMOPName,110,20);
    b36a:	8b ef       	ldi	r24, 0xFB	; 251
    b36c:	99 e0       	ldi	r25, 0x09	; 9
    b36e:	6b e5       	ldi	r22, 0x5B	; 91
    b370:	76 e0       	ldi	r23, 0x06	; 6
    b372:	4e e6       	ldi	r20, 0x6E	; 110
    b374:	50 e0       	ldi	r21, 0x00	; 0
    b376:	24 e1       	ldi	r18, 0x14	; 20
    b378:	30 e0       	ldi	r19, 0x00	; 0
    b37a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strCardID,130,20);
    b37e:	8b ef       	ldi	r24, 0xFB	; 251
    b380:	99 e0       	ldi	r25, 0x09	; 9
    b382:	67 e6       	ldi	r22, 0x67	; 103
    b384:	7c e0       	ldi	r23, 0x0C	; 12
    b386:	42 e8       	ldi	r20, 0x82	; 130
    b388:	50 e0       	ldi	r21, 0x00	; 0
    b38a:	24 e1       	ldi	r18, 0x14	; 20
    b38c:	30 e0       	ldi	r19, 0x00	; 0
    b38e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strCardHolder,150,40);
    b392:	8b ef       	ldi	r24, 0xFB	; 251
    b394:	99 e0       	ldi	r25, 0x09	; 9
    b396:	62 e0       	ldi	r22, 0x02	; 2
    b398:	74 e0       	ldi	r23, 0x04	; 4
    b39a:	46 e9       	ldi	r20, 0x96	; 150
    b39c:	50 e0       	ldi	r21, 0x00	; 0
    b39e:	28 e2       	ldi	r18, 0x28	; 40
    b3a0:	30 e0       	ldi	r19, 0x00	; 0
    b3a2:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strBalanceTypePrint,190,25);
    b3a6:	8b ef       	ldi	r24, 0xFB	; 251
    b3a8:	99 e0       	ldi	r25, 0x09	; 9
    b3aa:	69 e3       	ldi	r22, 0x39	; 57
    b3ac:	74 e0       	ldi	r23, 0x04	; 4
    b3ae:	4e eb       	ldi	r20, 0xBE	; 190
    b3b0:	50 e0       	ldi	r21, 0x00	; 0
    b3b2:	29 e1       	ldi	r18, 0x19	; 25
    b3b4:	30 e0       	ldi	r19, 0x00	; 0
    b3b6:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strBalance,215,13);
    b3ba:	8b ef       	ldi	r24, 0xFB	; 251
    b3bc:	99 e0       	ldi	r25, 0x09	; 9
    b3be:	66 ed       	ldi	r22, 0xD6	; 214
    b3c0:	7c e0       	ldi	r23, 0x0C	; 12
    b3c2:	47 ed       	ldi	r20, 0xD7	; 215
    b3c4:	50 e0       	ldi	r21, 0x00	; 0
    b3c6:	2d e0       	ldi	r18, 0x0D	; 13
    b3c8:	30 e0       	ldi	r19, 0x00	; 0
    b3ca:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strMeterVolume,228,13);
    b3ce:	8b ef       	ldi	r24, 0xFB	; 251
    b3d0:	99 e0       	ldi	r25, 0x09	; 9
    b3d2:	6a e6       	ldi	r22, 0x6A	; 106
    b3d4:	74 e0       	ldi	r23, 0x04	; 4
    b3d6:	44 ee       	ldi	r20, 0xE4	; 228
    b3d8:	50 e0       	ldi	r21, 0x00	; 0
    b3da:	2d e0       	ldi	r18, 0x0D	; 13
    b3dc:	30 e0       	ldi	r19, 0x00	; 0
    b3de:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strMeterAmount,241,13);
    b3e2:	8b ef       	ldi	r24, 0xFB	; 251
    b3e4:	99 e0       	ldi	r25, 0x09	; 9
    b3e6:	67 ec       	ldi	r22, 0xC7	; 199
    b3e8:	79 e0       	ldi	r23, 0x09	; 9
    b3ea:	41 ef       	ldi	r20, 0xF1	; 241
    b3ec:	50 e0       	ldi	r21, 0x00	; 0
    b3ee:	2d e0       	ldi	r18, 0x0D	; 13
    b3f0:	30 e0       	ldi	r19, 0x00	; 0
    b3f2:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strCurrentTime,254,19);
    b3f6:	8b ef       	ldi	r24, 0xFB	; 251
    b3f8:	99 e0       	ldi	r25, 0x09	; 9
    b3fa:	6a e9       	ldi	r22, 0x9A	; 154
    b3fc:	78 e0       	ldi	r23, 0x08	; 8
    b3fe:	4e ef       	ldi	r20, 0xFE	; 254
    b400:	50 e0       	ldi	r21, 0x00	; 0
    b402:	23 e1       	ldi	r18, 0x13	; 19
    b404:	30 e0       	ldi	r19, 0x00	; 0
    b406:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strPrintCount,273,2);
    b40a:	8b ef       	ldi	r24, 0xFB	; 251
    b40c:	99 e0       	ldi	r25, 0x09	; 9
    b40e:	62 e6       	ldi	r22, 0x62	; 98
    b410:	7d e0       	ldi	r23, 0x0D	; 13
    b412:	41 e1       	ldi	r20, 0x11	; 17
    b414:	51 e0       	ldi	r21, 0x01	; 1
    b416:	22 e0       	ldi	r18, 0x02	; 2
    b418:	30 e0       	ldi	r19, 0x00	; 0
    b41a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       //Loyalty
	   StrPosCopy(rcv_trans,strPrevPoints,275,8);
    b41e:	8b ef       	ldi	r24, 0xFB	; 251
    b420:	99 e0       	ldi	r25, 0x09	; 9
    b422:	62 ef       	ldi	r22, 0xF2	; 242
    b424:	79 e0       	ldi	r23, 0x09	; 9
    b426:	43 e1       	ldi	r20, 0x13	; 19
    b428:	51 e0       	ldi	r21, 0x01	; 1
    b42a:	28 e0       	ldi	r18, 0x08	; 8
    b42c:	30 e0       	ldi	r19, 0x00	; 0
    b42e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strGainPoints,283,8);
    b432:	8b ef       	ldi	r24, 0xFB	; 251
    b434:	99 e0       	ldi	r25, 0x09	; 9
    b436:	69 e9       	ldi	r22, 0x99	; 153
    b438:	73 e0       	ldi	r23, 0x03	; 3
    b43a:	4b e1       	ldi	r20, 0x1B	; 27
    b43c:	51 e0       	ldi	r21, 0x01	; 1
    b43e:	28 e0       	ldi	r18, 0x08	; 8
    b440:	30 e0       	ldi	r19, 0x00	; 0
    b442:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCardID,291,20);
    b446:	8b ef       	ldi	r24, 0xFB	; 251
    b448:	99 e0       	ldi	r25, 0x09	; 9
    b44a:	65 ec       	ldi	r22, 0xC5	; 197
    b44c:	73 e0       	ldi	r23, 0x03	; 3
    b44e:	43 e2       	ldi	r20, 0x23	; 35
    b450:	51 e0       	ldi	r21, 0x01	; 1
    b452:	24 e1       	ldi	r18, 0x14	; 20
    b454:	30 e0       	ldi	r19, 0x00	; 0
    b456:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCardHolder,311,30);
    b45a:	8b ef       	ldi	r24, 0xFB	; 251
    b45c:	99 e0       	ldi	r25, 0x09	; 9
    b45e:	62 ea       	ldi	r22, 0xA2	; 162
    b460:	73 e0       	ldi	r23, 0x03	; 3
    b462:	47 e3       	ldi	r20, 0x37	; 55
    b464:	51 e0       	ldi	r21, 0x01	; 1
    b466:	2e e1       	ldi	r18, 0x1E	; 30
    b468:	30 e0       	ldi	r19, 0x00	; 0
    b46a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCurrentPoints,341,8);
    b46e:	8b ef       	ldi	r24, 0xFB	; 251
    b470:	99 e0       	ldi	r25, 0x09	; 9
    b472:	63 e1       	ldi	r22, 0x13	; 19
    b474:	79 e0       	ldi	r23, 0x09	; 9
    b476:	45 e5       	ldi	r20, 0x55	; 85
    b478:	51 e0       	ldi	r21, 0x01	; 1
    b47a:	28 e0       	ldi	r18, 0x08	; 8
    b47c:	30 e0       	ldi	r19, 0x00	; 0
    b47e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCurrMonConsumeA,349,10);
    b482:	8b ef       	ldi	r24, 0xFB	; 251
    b484:	99 e0       	ldi	r25, 0x09	; 9
    b486:	6c e5       	ldi	r22, 0x5C	; 92
    b488:	74 e0       	ldi	r23, 0x04	; 4
    b48a:	4d e5       	ldi	r20, 0x5D	; 93
    b48c:	51 e0       	ldi	r21, 0x01	; 1
    b48e:	2a e0       	ldi	r18, 0x0A	; 10
    b490:	30 e0       	ldi	r19, 0x00	; 0
    b492:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,359,10);
    b496:	8b ef       	ldi	r24, 0xFB	; 251
    b498:	99 e0       	ldi	r25, 0x09	; 9
    b49a:	6b ec       	ldi	r22, 0xCB	; 203
    b49c:	7c e0       	ldi	r23, 0x0C	; 12
    b49e:	47 e6       	ldi	r20, 0x67	; 103
    b4a0:	51 e0       	ldi	r21, 0x01	; 1
    b4a2:	2a e0       	ldi	r18, 0x0A	; 10
    b4a4:	30 e0       	ldi	r19, 0x00	; 0
    b4a6:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strSurchargeDesc,369,20);
    b4aa:	8b ef       	ldi	r24, 0xFB	; 251
    b4ac:	99 e0       	ldi	r25, 0x09	; 9
    b4ae:	69 eb       	ldi	r22, 0xB9	; 185
    b4b0:	78 e0       	ldi	r23, 0x08	; 8
    b4b2:	41 e7       	ldi	r20, 0x71	; 113
    b4b4:	51 e0       	ldi	r21, 0x01	; 1
    b4b6:	24 e1       	ldi	r18, 0x14	; 20
    b4b8:	30 e0       	ldi	r19, 0x00	; 0
    b4ba:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strSurchargeAmount,389,10);
    b4be:	8b ef       	ldi	r24, 0xFB	; 251
    b4c0:	99 e0       	ldi	r25, 0x09	; 9
    b4c2:	60 e3       	ldi	r22, 0x30	; 48
    b4c4:	79 e0       	ldi	r23, 0x09	; 9
    b4c6:	45 e8       	ldi	r20, 0x85	; 133
    b4c8:	51 e0       	ldi	r21, 0x01	; 1
    b4ca:	2a e0       	ldi	r18, 0x0A	; 10
    b4cc:	30 e0       	ldi	r19, 0x00	; 0
    b4ce:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyRedeemPoints,399,8);
    b4d2:	8b ef       	ldi	r24, 0xFB	; 251
    b4d4:	99 e0       	ldi	r25, 0x09	; 9
    b4d6:	68 e7       	ldi	r22, 0x78	; 120
    b4d8:	74 e0       	ldi	r23, 0x04	; 4
    b4da:	4f e8       	ldi	r20, 0x8F	; 143
    b4dc:	51 e0       	ldi	r21, 0x01	; 1
    b4de:	28 e0       	ldi	r18, 0x08	; 8
    b4e0:	30 e0       	ldi	r19, 0x00	; 0
    b4e2:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyExpiry,407,10);
    b4e6:	8b ef       	ldi	r24, 0xFB	; 251
    b4e8:	99 e0       	ldi	r25, 0x09	; 9
    b4ea:	67 e5       	ldi	r22, 0x57	; 87
    b4ec:	7d e0       	ldi	r23, 0x0D	; 13
    b4ee:	47 e9       	ldi	r20, 0x97	; 151
    b4f0:	51 e0       	ldi	r21, 0x01	; 1
    b4f2:	2a e0       	ldi	r18, 0x0A	; 10
    b4f4:	30 e0       	ldi	r19, 0x00	; 0
    b4f6:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strCorporateID,417,20);
    b4fa:	8b ef       	ldi	r24, 0xFB	; 251
    b4fc:	99 e0       	ldi	r25, 0x09	; 9
    b4fe:	68 ee       	ldi	r22, 0xE8	; 232
    b500:	7c e0       	ldi	r23, 0x0C	; 12
    b502:	41 ea       	ldi	r20, 0xA1	; 161
    b504:	51 e0       	ldi	r21, 0x01	; 1
    b506:	24 e1       	ldi	r18, 0x14	; 20
    b508:	30 e0       	ldi	r19, 0x00	; 0
    b50a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
       StrPosCopy(rcv_trans,strCorporateName,437,30);
    b50e:	8b ef       	ldi	r24, 0xFB	; 251
    b510:	99 e0       	ldi	r25, 0x09	; 9
    b512:	6b ea       	ldi	r22, 0xAB	; 171
    b514:	74 e0       	ldi	r23, 0x04	; 4
    b516:	45 eb       	ldi	r20, 0xB5	; 181
    b518:	51 e0       	ldi	r21, 0x01	; 1
    b51a:	2e e1       	ldi	r18, 0x1E	; 30
    b51c:	30 e0       	ldi	r19, 0x00	; 0
    b51e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	   //


	   //FIP Detection LocalAccount Null Filling
	   if ((nLocalAccount>0)&&(LocalAccountFIP[0]==atoi(strFIP_ID))){
    b522:	80 91 6d 02 	lds	r24, 0x026D
    b526:	88 23       	and	r24, r24
    b528:	69 f0       	breq	.+26     	; 0xb544 <procMessage99+0x2ec>
    b52a:	80 91 34 04 	lds	r24, 0x0434
    b52e:	c8 2f       	mov	r28, r24
    b530:	d0 e0       	ldi	r29, 0x00	; 0
    b532:	87 e9       	ldi	r24, 0x97	; 151
    b534:	98 e0       	ldi	r25, 0x08	; 8
    b536:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
    b53a:	c8 17       	cp	r28, r24
    b53c:	d9 07       	cpc	r29, r25
    b53e:	11 f4       	brne	.+4      	; 0xb544 <procMessage99+0x2ec>
	        IsCompleteFilling=True;
    b540:	10 93 87 02 	sts	0x0287, r17
	   }

	  }
     return Result;     
}
    b544:	80 e0       	ldi	r24, 0x00	; 0
    b546:	df 91       	pop	r29
    b548:	cf 91       	pop	r28
    b54a:	1f 91       	pop	r17
    b54c:	08 95       	ret

0000b54e <Tab>:

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    b54e:	fc 01       	movw	r30, r24
    b550:	20 e0       	ldi	r18, 0x00	; 0
	     sTab[i]=' ';
    b552:	30 e2       	ldi	r19, 0x20	; 32
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    b554:	02 c0       	rjmp	.+4      	; 0xb55a <Tab+0xc>
	     sTab[i]=' ';
    b556:	31 93       	st	Z+, r19
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    b558:	2f 5f       	subi	r18, 0xFF	; 255
    b55a:	26 17       	cp	r18, r22
    b55c:	e0 f3       	brcs	.-8      	; 0xb556 <Tab+0x8>
	     sTab[i]=' ';
	 }sTab[nTab]=0;
    b55e:	86 0f       	add	r24, r22
    b560:	91 1d       	adc	r25, r1
    b562:	fc 01       	movw	r30, r24
    b564:	10 82       	st	Z, r1
}
    b566:	08 95       	ret

0000b568 <PrintDoubleHeight>:

//void SetPrinterCharacterWidth

void PrintDoubleHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    b568:	80 e3       	ldi	r24, 0x30	; 48
    b56a:	90 e0       	ldi	r25, 0x00	; 0
    b56c:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    b570:	82 30       	cpi	r24, 0x02	; 2
    b572:	79 f4       	brne	.+30     	; 0xb592 <PrintDoubleHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);
    b574:	80 e0       	ldi	r24, 0x00	; 0
    b576:	61 e0       	ldi	r22, 0x01	; 1
    b578:	4d e1       	ldi	r20, 0x1D	; 29
    b57a:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b57e:	80 e0       	ldi	r24, 0x00	; 0
    b580:	61 e0       	ldi	r22, 0x01	; 1
    b582:	41 e2       	ldi	r20, 0x21	; 33
    b584:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b588:	80 e0       	ldi	r24, 0x00	; 0
    b58a:	61 e0       	ldi	r22, 0x01	; 1
    b58c:	41 e0       	ldi	r20, 0x01	; 1
    b58e:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b592:	08 95       	ret

0000b594 <PrintNormalHeight>:
		 }
}

void PrintNormalHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    b594:	80 e3       	ldi	r24, 0x30	; 48
    b596:	90 e0       	ldi	r25, 0x00	; 0
    b598:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    b59c:	82 30       	cpi	r24, 0x02	; 2
    b59e:	79 f4       	brne	.+30     	; 0xb5be <PrintNormalHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
    b5a0:	80 e0       	ldi	r24, 0x00	; 0
    b5a2:	61 e0       	ldi	r22, 0x01	; 1
    b5a4:	4d e1       	ldi	r20, 0x1D	; 29
    b5a6:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b5aa:	80 e0       	ldi	r24, 0x00	; 0
    b5ac:	61 e0       	ldi	r22, 0x01	; 1
    b5ae:	41 e2       	ldi	r20, 0x21	; 33
    b5b0:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b5b4:	80 e0       	ldi	r24, 0x00	; 0
    b5b6:	61 e0       	ldi	r22, 0x01	; 1
    b5b8:	40 e0       	ldi	r20, 0x00	; 0
    b5ba:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b5be:	08 95       	ret

0000b5c0 <InitPrinter>:
		 }
}

void InitPrinter(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    b5c0:	80 e3       	ldi	r24, 0x30	; 48
    b5c2:	90 e0       	ldi	r25, 0x00	; 0
    b5c4:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    //Custom Printer TG02
	//Density Lowest: 1D 7C 00
	if (PrinterType==PT_CUSTOM_TG02){
    b5c8:	81 30       	cpi	r24, 0x01	; 1
    b5ca:	71 f5       	brne	.+92     	; 0xb628 <InitPrinter+0x68>
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x00);
    b5cc:	80 e0       	ldi	r24, 0x00	; 0
    b5ce:	61 e0       	ldi	r22, 0x01	; 1
    b5d0:	4d e1       	ldi	r20, 0x1D	; 29
    b5d2:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b5d6:	80 e0       	ldi	r24, 0x00	; 0
    b5d8:	61 e0       	ldi	r22, 0x01	; 1
    b5da:	4c e7       	ldi	r20, 0x7C	; 124
    b5dc:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b5e0:	80 e0       	ldi	r24, 0x00	; 0
    b5e2:	61 e0       	ldi	r22, 0x01	; 1
    b5e4:	40 e0       	ldi	r20, 0x00	; 0
    b5e6:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		//Double Strike ON : 1B 47 01
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x01);
    b5ea:	80 e0       	ldi	r24, 0x00	; 0
    b5ec:	61 e0       	ldi	r22, 0x01	; 1
    b5ee:	4b e1       	ldi	r20, 0x1B	; 27
    b5f0:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b5f4:	80 e0       	ldi	r24, 0x00	; 0
    b5f6:	61 e0       	ldi	r22, 0x01	; 1
    b5f8:	47 e4       	ldi	r20, 0x47	; 71
    b5fa:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b5fe:	80 e0       	ldi	r24, 0x00	; 0
    b600:	61 e0       	ldi	r22, 0x01	; 1
    b602:	41 e0       	ldi	r20, 0x01	; 1
    b604:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);   
    b608:	80 e0       	ldi	r24, 0x00	; 0
    b60a:	61 e0       	ldi	r22, 0x01	; 1
    b60c:	4d e1       	ldi	r20, 0x1D	; 29
    b60e:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b612:	80 e0       	ldi	r24, 0x00	; 0
    b614:	61 e0       	ldi	r22, 0x01	; 1
    b616:	41 e2       	ldi	r20, 0x21	; 33
    b618:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b61c:	80 e0       	ldi	r24, 0x00	; 0
    b61e:	61 e0       	ldi	r22, 0x01	; 1
    b620:	41 e0       	ldi	r20, 0x01	; 1
    b622:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b626:	08 95       	ret
		}
    else
	if (PrinterType==PT_CUSTOM_CUBE){
    b628:	82 30       	cpi	r24, 0x02	; 2
    b62a:	69 f5       	brne	.+90     	; 0xb686 <InitPrinter+0xc6>
        //Print Density 0%
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x04);
    b62c:	80 e0       	ldi	r24, 0x00	; 0
    b62e:	61 e0       	ldi	r22, 0x01	; 1
    b630:	4d e1       	ldi	r20, 0x1D	; 29
    b632:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b636:	80 e0       	ldi	r24, 0x00	; 0
    b638:	61 e0       	ldi	r22, 0x01	; 1
    b63a:	4c e7       	ldi	r20, 0x7C	; 124
    b63c:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b640:	80 e0       	ldi	r24, 0x00	; 0
    b642:	61 e0       	ldi	r22, 0x01	; 1
    b644:	44 e0       	ldi	r20, 0x04	; 4
    b646:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		//Double Strike OFF : 1B 47 00
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x00);
    b64a:	80 e0       	ldi	r24, 0x00	; 0
    b64c:	61 e0       	ldi	r22, 0x01	; 1
    b64e:	4b e1       	ldi	r20, 0x1B	; 27
    b650:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b654:	80 e0       	ldi	r24, 0x00	; 0
    b656:	61 e0       	ldi	r22, 0x01	; 1
    b658:	47 e4       	ldi	r20, 0x47	; 71
    b65a:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b65e:	80 e0       	ldi	r24, 0x00	; 0
    b660:	61 e0       	ldi	r22, 0x01	; 1
    b662:	40 e0       	ldi	r20, 0x00	; 0
    b664:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
    b668:	80 e0       	ldi	r24, 0x00	; 0
    b66a:	61 e0       	ldi	r22, 0x01	; 1
    b66c:	4d e1       	ldi	r20, 0x1D	; 29
    b66e:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b672:	80 e0       	ldi	r24, 0x00	; 0
    b674:	61 e0       	ldi	r22, 0x01	; 1
    b676:	41 e2       	ldi	r20, 0x21	; 33
    b678:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b67c:	80 e0       	ldi	r24, 0x00	; 0
    b67e:	61 e0       	ldi	r22, 0x01	; 1
    b680:	40 e0       	ldi	r20, 0x00	; 0
    b682:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    b686:	08 95       	ret

0000b688 <CarriegeReturn>:
	      break;	 
	 }
}

void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
    b688:	80 e0       	ldi	r24, 0x00	; 0
    b68a:	61 e0       	ldi	r22, 0x01	; 1
    b68c:	4d e0       	ldi	r20, 0x0D	; 13
    b68e:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
     uart(_COM_PRINTER, 1, 0x0A);
    b692:	80 e0       	ldi	r24, 0x00	; 0
    b694:	61 e0       	ldi	r22, 0x01	; 1
    b696:	4a e0       	ldi	r20, 0x0A	; 10
    b698:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
}
    b69c:	08 95       	ret

0000b69e <PstrCopy>:

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    b69e:	40 e0       	ldi	r20, 0x00	; 0
    b6a0:	09 c0       	rjmp	.+18     	; 0xb6b4 <PstrCopy+0x16>
	    Dest[i]=pgm_read_byte(&Source[i]);
    b6a2:	fb 01       	movw	r30, r22
    b6a4:	e2 0f       	add	r30, r18
    b6a6:	f3 1f       	adc	r31, r19
    b6a8:	e4 91       	lpm	r30, Z+
    b6aa:	28 0f       	add	r18, r24
    b6ac:	39 1f       	adc	r19, r25
    b6ae:	d9 01       	movw	r26, r18
    b6b0:	ec 93       	st	X, r30
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    b6b2:	4f 5f       	subi	r20, 0xFF	; 255
    b6b4:	24 2f       	mov	r18, r20
    b6b6:	30 e0       	ldi	r19, 0x00	; 0
    b6b8:	fb 01       	movw	r30, r22
    b6ba:	01 90       	ld	r0, Z+
    b6bc:	00 20       	and	r0, r0
    b6be:	e9 f7       	brne	.-6      	; 0xb6ba <PstrCopy+0x1c>
    b6c0:	31 97       	sbiw	r30, 0x01	; 1
    b6c2:	e6 1b       	sub	r30, r22
    b6c4:	f7 0b       	sbc	r31, r23
    b6c6:	2e 17       	cp	r18, r30
    b6c8:	3f 07       	cpc	r19, r31
    b6ca:	58 f3       	brcs	.-42     	; 0xb6a2 <PstrCopy+0x4>
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}
    b6cc:	08 95       	ret

0000b6ce <SendPrint>:

void SendPrint(char xSend,char xSendLead){
    b6ce:	1f 93       	push	r17
    b6d0:	18 2f       	mov	r17, r24
static char zSend;     
	 if (xSend==0x19){
    b6d2:	89 31       	cpi	r24, 0x19	; 25
    b6d4:	59 f4       	brne	.+22     	; 0xb6ec <SendPrint+0x1e>
	     if (zSend==xSendLead)uart(_COM_PRINTER,1,xSendLead);
    b6d6:	40 91 d4 02 	lds	r20, 0x02D4
    b6da:	46 17       	cp	r20, r22
    b6dc:	19 f4       	brne	.+6      	; 0xb6e4 <SendPrint+0x16>
    b6de:	80 e0       	ldi	r24, 0x00	; 0
    b6e0:	61 e0       	ldi	r22, 0x01	; 1
    b6e2:	07 c0       	rjmp	.+14     	; 0xb6f2 <SendPrint+0x24>
		 else uart(_COM_PRINTER,1,' ');	 
    b6e4:	80 e0       	ldi	r24, 0x00	; 0
    b6e6:	61 e0       	ldi	r22, 0x01	; 1
    b6e8:	40 e2       	ldi	r20, 0x20	; 32
    b6ea:	03 c0       	rjmp	.+6      	; 0xb6f2 <SendPrint+0x24>
	 } 
	 else uart(_COM_PRINTER,1,xSend);
    b6ec:	80 e0       	ldi	r24, 0x00	; 0
    b6ee:	61 e0       	ldi	r22, 0x01	; 1
    b6f0:	41 2f       	mov	r20, r17
    b6f2:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
	 zSend=xSend;
    b6f6:	10 93 d4 02 	sts	0x02D4, r17
}
    b6fa:	1f 91       	pop	r17
    b6fc:	08 95       	ret

0000b6fe <FreePrinting>:

void FreePrinting(){
    b6fe:	ef 92       	push	r14
    b700:	ff 92       	push	r15
    b702:	0f 93       	push	r16
    b704:	1f 93       	push	r17
    b706:	df 93       	push	r29
    b708:	cf 93       	push	r28
    b70a:	cd b7       	in	r28, 0x3d	; 61
    b70c:	de b7       	in	r29, 0x3e	; 62
    b70e:	64 97       	sbiw	r28, 0x14	; 20
    b710:	0f b6       	in	r0, 0x3f	; 63
    b712:	f8 94       	cli
    b714:	de bf       	out	0x3e, r29	; 62
    b716:	0f be       	out	0x3f, r0	; 63
    b718:	cd bf       	out	0x3d, r28	; 61
static char iPrinted=0,iHeader=0,iFooter=0,PrintCopy=0,iMargin=0,iScroll=0,nScroll=0;
static unsigned int iSend=0,LSend=0,iLoop=0;
       char strOperatorName[20];

     //Normalize FreePrintIdleState
     if ((IsFreePrinting==True)&&(stFreePrinting!=fpInit)){
    b71a:	80 91 86 02 	lds	r24, 0x0286
    b71e:	81 30       	cpi	r24, 0x01	; 1
    b720:	31 f4       	brne	.+12     	; 0xb72e <FreePrinting+0x30>
    b722:	90 91 25 01 	lds	r25, 0x0125
    b726:	91 30       	cpi	r25, 0x01	; 1
    b728:	11 f0       	breq	.+4      	; 0xb72e <FreePrinting+0x30>
	     stFreePrinting=fpInit;
    b72a:	80 93 25 01 	sts	0x0125, r24
	 }
	 switch (stFreePrinting){
    b72e:	80 91 25 01 	lds	r24, 0x0125
    b732:	90 e0       	ldi	r25, 0x00	; 0
    b734:	01 97       	sbiw	r24, 0x01	; 1
    b736:	8b 31       	cpi	r24, 0x1B	; 27
    b738:	91 05       	cpc	r25, r1
    b73a:	08 f0       	brcs	.+2      	; 0xb73e <FreePrinting+0x40>
    b73c:	97 c3       	rjmp	.+1838   	; 0xbe6c <FreePrinting+0x76e>
    b73e:	89 58       	subi	r24, 0x89	; 137
    b740:	9f 4f       	sbci	r25, 0xFF	; 255
    b742:	fc 01       	movw	r30, r24
    b744:	ee 0f       	add	r30, r30
    b746:	ff 1f       	adc	r31, r31
    b748:	05 90       	lpm	r0, Z+
    b74a:	f4 91       	lpm	r31, Z+
    b74c:	e0 2d       	mov	r30, r0
    b74e:	09 94       	ijmp
     case fpInit:
	      //uart_printf(0,1,PSTR("fpInit"));
	      if (IsFreePrinting==True){
    b750:	80 91 86 02 	lds	r24, 0x0286
    b754:	81 30       	cpi	r24, 0x01	; 1
    b756:	09 f0       	breq	.+2      	; 0xb75a <FreePrinting+0x5c>
    b758:	89 c3       	rjmp	.+1810   	; 0xbe6c <FreePrinting+0x76e>
		      IsFreePrinting=False;
    b75a:	10 92 86 02 	sts	0x0286, r1
			  IsBusyFreePrinting=True;
    b75e:	80 93 92 02 	sts	0x0292, r24
			  IsBusyPrint=False;
    b762:	10 92 91 02 	sts	0x0291, r1
			  iPrinted=0,iFooter=0;
    b766:	10 92 d3 02 	sts	0x02D3, r1
    b76a:	10 92 d1 02 	sts	0x02D1, r1

			  PrintCopy=(cmdPrint&0x0F);
    b76e:	80 91 93 02 	lds	r24, 0x0293
    b772:	8f 70       	andi	r24, 0x0F	; 15
    b774:	80 93 d0 02 	sts	0x02D0, r24

			  //cmdPrint=cmdPrint|0b00100000;
			  //PrintCopy=2;

			  stFreePrinting=fpInitHeader;
    b778:	82 e0       	ldi	r24, 0x02	; 2
    b77a:	80 93 25 01 	sts	0x0125, r24
			  InitPrinter();
    b77e:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <InitPrinter>
    b782:	74 c3       	rjmp	.+1768   	; 0xbe6c <FreePrinting+0x76e>
			  }
	      break;
     case fpInitHeader:
	      //uart_printf(0,1,PSTR("fpInitHeader"));
		  iHeader=0;
    b784:	10 92 d2 02 	sts	0x02D2, r1
	      if (((cmdPrint&0b10000000)>>7)==1){
    b788:	80 91 93 02 	lds	r24, 0x0293
    b78c:	88 1f       	adc	r24, r24
    b78e:	88 27       	eor	r24, r24
    b790:	88 1f       	adc	r24, r24
    b792:	90 e0       	ldi	r25, 0x00	; 0
    b794:	81 30       	cpi	r24, 0x01	; 1
    b796:	91 05       	cpc	r25, r1
    b798:	11 f1       	breq	.+68     	; 0xb7de <FreePrinting+0xe0>
		      stFreePrinting=fpLoadHeader;
			  }
		  else
	      if (((cmdPrint&0b10000000)>>7)==0) stFreePrinting=fpInitMessage;	      
    b79a:	00 97       	sbiw	r24, 0x00	; 0
    b79c:	09 f0       	breq	.+2      	; 0xb7a0 <FreePrinting+0xa2>
    b79e:	66 c3       	rjmp	.+1740   	; 0xbe6c <FreePrinting+0x76e>
    b7a0:	85 e0       	ldi	r24, 0x05	; 5
    b7a2:	80 93 25 01 	sts	0x0125, r24
    b7a6:	62 c3       	rjmp	.+1732   	; 0xbe6c <FreePrinting+0x76e>
	      break;
     case fpLoadHeader:
	      //uart_printf(0,1,PSTR("fpLoadHeader"));
          //Header 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], 40);
    b7a8:	60 91 d2 02 	lds	r22, 0x02D2
    b7ac:	89 e2       	ldi	r24, 0x29	; 41
    b7ae:	68 9f       	mul	r22, r24
    b7b0:	b0 01       	movw	r22, r0
    b7b2:	11 24       	eor	r1, r1
    b7b4:	69 5d       	subi	r22, 0xD9	; 217
    b7b6:	7d 4f       	sbci	r23, 0xFD	; 253
    b7b8:	8a e9       	ldi	r24, 0x9A	; 154
    b7ba:	99 e0       	ldi	r25, 0x09	; 9
    b7bc:	48 e2       	ldi	r20, 0x28	; 40
    b7be:	50 e0       	ldi	r21, 0x00	; 0
    b7c0:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  iHeader++;
    b7c4:	00 91 d2 02 	lds	r16, 0x02D2
    b7c8:	0f 5f       	subi	r16, 0xFF	; 255
    b7ca:	00 93 d2 02 	sts	0x02D2, r16
		  if (iHeader<6){
    b7ce:	06 30       	cpi	r16, 0x06	; 6
    b7d0:	38 f7       	brcc	.-50     	; 0xb7a0 <FreePrinting+0xa2>
		      if (SpaceOnly(strPrint)==True){
    b7d2:	8a e9       	ldi	r24, 0x9A	; 154
    b7d4:	99 e0       	ldi	r25, 0x09	; 9
    b7d6:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
    b7da:	81 30       	cpi	r24, 0x01	; 1
    b7dc:	11 f4       	brne	.+4      	; 0xb7e2 <FreePrinting+0xe4>
			      stFreePrinting=fpLoadHeader;
    b7de:	83 e0       	ldi	r24, 0x03	; 3
    b7e0:	e0 cf       	rjmp	.-64     	; 0xb7a2 <FreePrinting+0xa4>
				  }	      
			  else{
			      stFreePrinting=fpPrintHeader;
    b7e2:	84 e0       	ldi	r24, 0x04	; 4
    b7e4:	80 93 25 01 	sts	0x0125, r24
			      iSend=0;
    b7e8:	10 92 cc 02 	sts	0x02CC, r1
    b7ec:	10 92 cb 02 	sts	0x02CB, r1
				  iLoop=0;
    b7f0:	10 92 c8 02 	sts	0x02C8, r1
    b7f4:	10 92 c7 02 	sts	0x02C7, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
    b7f8:	01 30       	cpi	r16, 0x01	; 1
    b7fa:	19 f4       	brne	.+6      	; 0xb802 <FreePrinting+0x104>
    b7fc:	0e 94 b4 5a 	call	0xb568	; 0xb568 <PrintDoubleHeight>
    b800:	35 c3       	rjmp	.+1642   	; 0xbe6c <FreePrinting+0x76e>
				  else 
				  if (iHeader==2) PrintNormalHeight();
    b802:	02 30       	cpi	r16, 0x02	; 2
    b804:	09 f0       	breq	.+2      	; 0xb808 <FreePrinting+0x10a>
    b806:	32 c3       	rjmp	.+1636   	; 0xbe6c <FreePrinting+0x76e>
    b808:	0e 94 ca 5a 	call	0xb594	; 0xb594 <PrintNormalHeight>
    b80c:	2f c3       	rjmp	.+1630   	; 0xbe6c <FreePrinting+0x76e>
		  {stFreePrinting=fpInitMessage;
		  }
	      break;
     case fpPrintHeader:
	      //uart_printf(0,1,PSTR("fpPrintHeader"));
		  if (iSend<40){
    b80e:	80 91 cb 02 	lds	r24, 0x02CB
    b812:	90 91 cc 02 	lds	r25, 0x02CC
    b816:	88 32       	cpi	r24, 0x28	; 40
    b818:	91 05       	cpc	r25, r1
    b81a:	68 f4       	brcc	.+26     	; 0xb836 <FreePrinting+0x138>
		      iLoop++;
    b81c:	80 91 c7 02 	lds	r24, 0x02C7
    b820:	90 91 c8 02 	lds	r25, 0x02C8
    b824:	01 96       	adiw	r24, 0x01	; 1
    b826:	90 93 c8 02 	sts	0x02C8, r25
    b82a:	80 93 c7 02 	sts	0x02C7, r24
			  if ((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
		         //iSend++;
				 TimPrintBusy=0;
    b82e:	10 92 94 02 	sts	0x0294, r1
				 stFreePrinting=fpCheckPrintStatusHeader;
    b832:	82 e1       	ldi	r24, 0x12	; 18
    b834:	b6 cf       	rjmp	.-148    	; 0xb7a2 <FreePrinting+0xa4>
				 }
			  }
          else{ 
		     stFreePrinting=fpLoadHeader;
    b836:	83 e0       	ldi	r24, 0x03	; 3
    b838:	5d c2       	rjmp	.+1210   	; 0xbcf4 <FreePrinting+0x5f6>
			 CarriegeReturn();
		  }
	      break;

     case fpCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
    b83a:	80 91 91 02 	lds	r24, 0x0291
    b83e:	88 23       	and	r24, r24
    b840:	09 f0       	breq	.+2      	; 0xb844 <FreePrinting+0x146>
    b842:	77 c2       	rjmp	.+1262   	; 0xbd32 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    b844:	e0 91 cb 02 	lds	r30, 0x02CB
    b848:	f0 91 cc 02 	lds	r31, 0x02CC
    b84c:	e6 56       	subi	r30, 0x66	; 102
    b84e:	f6 4f       	sbci	r31, 0xF6	; 246
    b850:	61 e0       	ldi	r22, 0x01	; 1
    b852:	40 81       	ld	r20, Z
    b854:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
    b858:	80 91 cb 02 	lds	r24, 0x02CB
    b85c:	90 91 cc 02 	lds	r25, 0x02CC
    b860:	01 96       	adiw	r24, 0x01	; 1
    b862:	90 93 cc 02 	sts	0x02CC, r25
    b866:	80 93 cb 02 	sts	0x02CB, r24
		      stFreePrinting=fpPrintHeader;
    b86a:	84 e0       	ldi	r24, 0x04	; 4
    b86c:	60 c2       	rjmp	.+1216   	; 0xbd2e <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     case fpInitMessage:
	      //uart_printf(0,1,PSTR("fpInitMessage"));
	      iSend=0;iLoop=0;
    b86e:	10 92 cc 02 	sts	0x02CC, r1
    b872:	10 92 cb 02 	sts	0x02CB, r1
    b876:	10 92 c8 02 	sts	0x02C8, r1
    b87a:	10 92 c7 02 	sts	0x02C7, r1
          stFreePrinting=fpPrintMessage; 
    b87e:	08 e0       	ldi	r16, 0x08	; 8
    b880:	00 93 25 01 	sts	0x0125, r16
		  CarriegeReturn();
    b884:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		  if (iPrinted>0) stFreePrinting=fpInitDuplicate;
    b888:	80 91 d3 02 	lds	r24, 0x02D3
    b88c:	88 23       	and	r24, r24
    b88e:	11 f0       	breq	.+4      	; 0xb894 <FreePrinting+0x196>
    b890:	86 e0       	ldi	r24, 0x06	; 6
    b892:	87 cf       	rjmp	.-242    	; 0xb7a2 <FreePrinting+0xa4>
		  else stFreePrinting=fpPrintMessage; 
    b894:	00 93 25 01 	sts	0x0125, r16
    b898:	e9 c2       	rjmp	.+1490   	; 0xbe6c <FreePrinting+0x76e>
	      break;
     case fpInitDuplicate:
	      //uart_printf(0,1,PSTR("fpInitDuplicate"));
          if (iPrinted>0)sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
    b89a:	20 91 d3 02 	lds	r18, 0x02D3
    b89e:	8a e9       	ldi	r24, 0x9A	; 154
    b8a0:	99 e0       	ldi	r25, 0x09	; 9
    b8a2:	22 23       	and	r18, r18
    b8a4:	79 f0       	breq	.+30     	; 0xb8c4 <FreePrinting+0x1c6>
    b8a6:	00 d0       	rcall	.+0      	; 0xb8a8 <FreePrinting+0x1aa>
    b8a8:	00 d0       	rcall	.+0      	; 0xb8aa <FreePrinting+0x1ac>
    b8aa:	ad b7       	in	r26, 0x3d	; 61
    b8ac:	be b7       	in	r27, 0x3e	; 62
    b8ae:	12 96       	adiw	r26, 0x02	; 2
    b8b0:	9c 93       	st	X, r25
    b8b2:	8e 93       	st	-X, r24
    b8b4:	11 97       	sbiw	r26, 0x01	; 1
    b8b6:	81 e4       	ldi	r24, 0x41	; 65
    b8b8:	97 e0       	ldi	r25, 0x07	; 7
    b8ba:	14 96       	adiw	r26, 0x04	; 4
    b8bc:	9c 93       	st	X, r25
    b8be:	8e 93       	st	-X, r24
    b8c0:	13 97       	sbiw	r26, 0x03	; 3
    b8c2:	0a c0       	rjmp	.+20     	; 0xb8d8 <FreePrinting+0x1da>
          else           sprintf_P(strPrint,PSTR("                                   "));
    b8c4:	00 d0       	rcall	.+0      	; 0xb8c6 <FreePrinting+0x1c8>
    b8c6:	00 d0       	rcall	.+0      	; 0xb8c8 <FreePrinting+0x1ca>
    b8c8:	ed b7       	in	r30, 0x3d	; 61
    b8ca:	fe b7       	in	r31, 0x3e	; 62
    b8cc:	92 83       	std	Z+2, r25	; 0x02
    b8ce:	81 83       	std	Z+1, r24	; 0x01
    b8d0:	8d e1       	ldi	r24, 0x1D	; 29
    b8d2:	97 e0       	ldi	r25, 0x07	; 7
    b8d4:	94 83       	std	Z+4, r25	; 0x04
    b8d6:	83 83       	std	Z+3, r24	; 0x03
    b8d8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    b8dc:	0f 90       	pop	r0
    b8de:	0f 90       	pop	r0
    b8e0:	0f 90       	pop	r0
    b8e2:	0f 90       	pop	r0
		  iSend=0;
    b8e4:	10 92 cc 02 	sts	0x02CC, r1
    b8e8:	10 92 cb 02 	sts	0x02CB, r1
		  iLoop=0;
    b8ec:	10 92 c8 02 	sts	0x02C8, r1
    b8f0:	10 92 c7 02 	sts	0x02C7, r1
		  LSend=strlen(strPrint);
    b8f4:	ea e9       	ldi	r30, 0x9A	; 154
    b8f6:	f9 e0       	ldi	r31, 0x09	; 9
    b8f8:	01 90       	ld	r0, Z+
    b8fa:	00 20       	and	r0, r0
    b8fc:	e9 f7       	brne	.-6      	; 0xb8f8 <FreePrinting+0x1fa>
    b8fe:	31 97       	sbiw	r30, 0x01	; 1
    b900:	ea 59       	subi	r30, 0x9A	; 154
    b902:	f9 40       	sbci	r31, 0x09	; 9
    b904:	f0 93 ca 02 	sts	0x02CA, r31
    b908:	e0 93 c9 02 	sts	0x02C9, r30
          stFreePrinting=fpPrintDuplicate; 
    b90c:	87 e0       	ldi	r24, 0x07	; 7
    b90e:	49 cf       	rjmp	.-366    	; 0xb7a2 <FreePrinting+0xa4>
	      break;
     case fpPrintDuplicate:
	      //uart_printf(0,1,PSTR("fpPrintDuplicate"));
		  if (iSend<LSend){
    b910:	20 91 cb 02 	lds	r18, 0x02CB
    b914:	30 91 cc 02 	lds	r19, 0x02CC
    b918:	80 91 c9 02 	lds	r24, 0x02C9
    b91c:	90 91 ca 02 	lds	r25, 0x02CA
    b920:	28 17       	cp	r18, r24
    b922:	39 07       	cpc	r19, r25
    b924:	68 f4       	brcc	.+26     	; 0xb940 <FreePrinting+0x242>
		      iLoop++;
    b926:	80 91 c7 02 	lds	r24, 0x02C7
    b92a:	90 91 c8 02 	lds	r25, 0x02C8
    b92e:	01 96       	adiw	r24, 0x01	; 1
    b930:	90 93 c8 02 	sts	0x02C8, r25
    b934:	80 93 c7 02 	sts	0x02C7, r24
			  if((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
				 //iSend++;
				 TimPrintBusy=0;
    b938:	10 92 94 02 	sts	0x0294, r1
                 stFreePrinting=fpCheckPrintStatusDuplicate;
    b93c:	85 e1       	ldi	r24, 0x15	; 21
    b93e:	31 cf       	rjmp	.-414    	; 0xb7a2 <FreePrinting+0xa4>
				 }
			  }
          else {
		     iSend=0;
    b940:	10 92 cc 02 	sts	0x02CC, r1
    b944:	10 92 cb 02 	sts	0x02CB, r1
		     stFreePrinting=fpPrintMessage;
    b948:	88 e0       	ldi	r24, 0x08	; 8
    b94a:	d4 c1       	rjmp	.+936    	; 0xbcf4 <FreePrinting+0x5f6>
			 CarriegeReturn();	      
			 }
	      break;
     case fpCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
    b94c:	80 91 91 02 	lds	r24, 0x0291
    b950:	88 23       	and	r24, r24
    b952:	09 f0       	breq	.+2      	; 0xb956 <FreePrinting+0x258>
    b954:	ee c1       	rjmp	.+988    	; 0xbd32 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    b956:	e0 91 cb 02 	lds	r30, 0x02CB
    b95a:	f0 91 cc 02 	lds	r31, 0x02CC
    b95e:	e6 56       	subi	r30, 0x66	; 102
    b960:	f6 4f       	sbci	r31, 0xF6	; 246
    b962:	61 e0       	ldi	r22, 0x01	; 1
    b964:	40 81       	ld	r20, Z
    b966:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
    b96a:	80 91 cb 02 	lds	r24, 0x02CB
    b96e:	90 91 cc 02 	lds	r25, 0x02CC
    b972:	01 96       	adiw	r24, 0x01	; 1
    b974:	90 93 cc 02 	sts	0x02CC, r25
    b978:	80 93 cb 02 	sts	0x02CB, r24
		      stFreePrinting=fpPrintDuplicate;
    b97c:	87 e0       	ldi	r24, 0x07	; 7
    b97e:	d7 c1       	rjmp	.+942    	; 0xbd2e <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

     case fpPrintMessage:
		  if (iSend<LengthMessage81){
    b980:	20 91 cb 02 	lds	r18, 0x02CB
    b984:	30 91 cc 02 	lds	r19, 0x02CC
    b988:	80 91 6b 02 	lds	r24, 0x026B
    b98c:	90 91 6c 02 	lds	r25, 0x026C
    b990:	28 17       	cp	r18, r24
    b992:	39 07       	cpc	r19, r25
    b994:	68 f4       	brcc	.+26     	; 0xb9b0 <FreePrinting+0x2b2>
		      iLoop++;
    b996:	80 91 c7 02 	lds	r24, 0x02C7
    b99a:	90 91 c8 02 	lds	r25, 0x02C8
    b99e:	01 96       	adiw	r24, 0x01	; 1
    b9a0:	90 93 c8 02 	sts	0x02C8, r25
    b9a4:	80 93 c7 02 	sts	0x02C7, r24
			  if((iLoop%PRINT_DELAY)==0){
			     TimPrintBusy=0;
    b9a8:	10 92 94 02 	sts	0x0294, r1
				 stFreePrinting=fpCheckPrintStatusMessage;
    b9ac:	83 e1       	ldi	r24, 0x13	; 19
    b9ae:	f9 ce       	rjmp	.-526    	; 0xb7a2 <FreePrinting+0xa4>
				 }
			  }
          else stFreePrinting=fpLoadEndLine;//fpInitFooter;
    b9b0:	86 e1       	ldi	r24, 0x16	; 22
    b9b2:	f7 ce       	rjmp	.-530    	; 0xb7a2 <FreePrinting+0xa4>
	      break;
     
     case fpCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
    b9b4:	80 91 91 02 	lds	r24, 0x0291
    b9b8:	88 23       	and	r24, r24
    b9ba:	09 f0       	breq	.+2      	; 0xb9be <FreePrinting+0x2c0>
    b9bc:	ba c1       	rjmp	.+884    	; 0xbd32 <FreePrinting+0x634>
              if ((PrintBuffer[iSend]!=0x0D)||(PrintBuffer[iSend]!=0x0A))
			      SendPrint(PrintBuffer[iSend],PrintBuffer[iSend+1]);
    b9be:	e0 91 cb 02 	lds	r30, 0x02CB
    b9c2:	f0 91 cc 02 	lds	r31, 0x02CC
    b9c6:	e6 53       	subi	r30, 0x36	; 54
    b9c8:	fb 4f       	sbci	r31, 0xFB	; 251
    b9ca:	80 81       	ld	r24, Z
    b9cc:	61 81       	ldd	r22, Z+1	; 0x01
    b9ce:	0e 94 67 5b 	call	0xb6ce	; 0xb6ce <SendPrint>
			     // uart(_COM_PRINTER,1,PrintBuffer[iSend]);
              if ((PrintBuffer[iSend]==0x0D)||(PrintBuffer[iSend+1]==0x0A))
    b9d2:	e0 91 cb 02 	lds	r30, 0x02CB
    b9d6:	f0 91 cc 02 	lds	r31, 0x02CC
    b9da:	e6 53       	subi	r30, 0x36	; 54
    b9dc:	fb 4f       	sbci	r31, 0xFB	; 251
    b9de:	80 81       	ld	r24, Z
    b9e0:	8d 30       	cpi	r24, 0x0D	; 13
    b9e2:	19 f0       	breq	.+6      	; 0xb9ea <FreePrinting+0x2ec>
    b9e4:	81 81       	ldd	r24, Z+1	; 0x01
    b9e6:	8a 30       	cpi	r24, 0x0A	; 10
    b9e8:	11 f4       	brne	.+4      	; 0xb9ee <FreePrinting+0x2f0>
			     CarriegeReturn();
    b9ea:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
             iSend++;
    b9ee:	80 91 cb 02 	lds	r24, 0x02CB
    b9f2:	90 91 cc 02 	lds	r25, 0x02CC
    b9f6:	01 96       	adiw	r24, 0x01	; 1
    b9f8:	90 93 cc 02 	sts	0x02CC, r25
    b9fc:	80 93 cb 02 	sts	0x02CB, r24
		     stFreePrinting=fpPrintMessage;
    ba00:	88 e0       	ldi	r24, 0x08	; 8
    ba02:	95 c1       	rjmp	.+810    	; 0xbd2e <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     //SpaceAdded
	 case fpInitSpace:
	      iLoop=0;
    ba04:	10 92 c8 02 	sts	0x02C8, r1
    ba08:	10 92 c7 02 	sts	0x02C7, r1
		  iMargin=0;
    ba0c:	10 92 cf 02 	sts	0x02CF, r1
		  stFreePrinting=fpPrintMargin;
    ba10:	8a e0       	ldi	r24, 0x0A	; 10
    ba12:	c7 ce       	rjmp	.-626    	; 0xb7a2 <FreePrinting+0xa4>
	      break;
	 case fpPrintMargin:
		  if (iMargin<PRINT_MARGIN){
    ba14:	80 91 cf 02 	lds	r24, 0x02CF
    ba18:	85 30       	cpi	r24, 0x05	; 5
    ba1a:	90 f4       	brcc	.+36     	; 0xba40 <FreePrinting+0x342>
		      iMargin++;
    ba1c:	8f 5f       	subi	r24, 0xFF	; 255
    ba1e:	80 93 cf 02 	sts	0x02CF, r24
		      iLoop++;
    ba22:	80 91 c7 02 	lds	r24, 0x02C7
    ba26:	90 91 c8 02 	lds	r25, 0x02C8
    ba2a:	01 96       	adiw	r24, 0x01	; 1
    ba2c:	90 93 c8 02 	sts	0x02C8, r25
    ba30:	80 93 c7 02 	sts	0x02C7, r24
	          if ((iLoop%PRINT_DELAY)==0)uart(_COM_PRINTER,1,' ');
    ba34:	80 e0       	ldi	r24, 0x00	; 0
    ba36:	61 e0       	ldi	r22, 0x01	; 1
    ba38:	40 e2       	ldi	r20, 0x20	; 32
    ba3a:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
    ba3e:	16 c2       	rjmp	.+1068   	; 0xbe6c <FreePrinting+0x76e>
			 }
          else stFreePrinting=fpPrintMessage;
    ba40:	88 e0       	ldi	r24, 0x08	; 8
    ba42:	af ce       	rjmp	.-674    	; 0xb7a2 <FreePrinting+0xa4>
	      break;
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    ba44:	8e 01       	movw	r16, r28
    ba46:	0f 5f       	subi	r16, 0xFF	; 255
    ba48:	1f 4f       	sbci	r17, 0xFF	; 255
    ba4a:	c8 01       	movw	r24, r16
    ba4c:	65 e1       	ldi	r22, 0x15	; 21
    ba4e:	70 e0       	ldi	r23, 0x00	; 0
    ba50:	42 e1       	ldi	r20, 0x12	; 18
    ba52:	50 e0       	ldi	r21, 0x00	; 0
    ba54:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
          StrPosCopy(strOperatorName,strOperatorName,0,15);
    ba58:	c8 01       	movw	r24, r16
    ba5a:	b8 01       	movw	r22, r16
    ba5c:	40 e0       	ldi	r20, 0x00	; 0
    ba5e:	50 e0       	ldi	r21, 0x00	; 0
    ba60:	2f e0       	ldi	r18, 0x0F	; 15
    ba62:	30 e0       	ldi	r19, 0x00	; 0
    ba64:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
          if (strlen(strOperatorName)>0){
    ba68:	89 81       	ldd	r24, Y+1	; 0x01
    ba6a:	88 23       	and	r24, r24
    ba6c:	09 f4       	brne	.+2      	; 0xba70 <FreePrinting+0x372>
    ba6e:	ce c0       	rjmp	.+412    	; 0xbc0c <FreePrinting+0x50e>
		  	  if (SpaceOnly(strOperatorName)!=True){
    ba70:	c8 01       	movw	r24, r16
    ba72:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
    ba76:	81 30       	cpi	r24, 0x01	; 1
    ba78:	09 f4       	brne	.+2      	; 0xba7c <FreePrinting+0x37e>
    ba7a:	c8 c0       	rjmp	.+400    	; 0xbc0c <FreePrinting+0x50e>
			      sprintf_P(strPrint,PSTR("---------------------------------"));
    ba7c:	00 d0       	rcall	.+0      	; 0xba7e <FreePrinting+0x380>
    ba7e:	00 d0       	rcall	.+0      	; 0xba80 <FreePrinting+0x382>
    ba80:	0a e9       	ldi	r16, 0x9A	; 154
    ba82:	19 e0       	ldi	r17, 0x09	; 9
    ba84:	ad b7       	in	r26, 0x3d	; 61
    ba86:	be b7       	in	r27, 0x3e	; 62
    ba88:	12 96       	adiw	r26, 0x02	; 2
    ba8a:	1c 93       	st	X, r17
    ba8c:	0e 93       	st	-X, r16
    ba8e:	11 97       	sbiw	r26, 0x01	; 1
    ba90:	8b ef       	ldi	r24, 0xFB	; 251
    ba92:	96 e0       	ldi	r25, 0x06	; 6
    ba94:	14 96       	adiw	r26, 0x04	; 4
    ba96:	9c 93       	st	X, r25
    ba98:	8e 93       	st	-X, r24
    ba9a:	13 97       	sbiw	r26, 0x03	; 3
    ba9c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			      //AddSpaceLead(strPrint,(strlen(strPrint)+PRINT_MARGIN));
			      iSend=0;
    baa0:	10 92 cc 02 	sts	0x02CC, r1
    baa4:	10 92 cb 02 	sts	0x02CB, r1
				  iLoop=0;
    baa8:	10 92 c8 02 	sts	0x02C8, r1
    baac:	10 92 c7 02 	sts	0x02C7, r1
				  LSend=strlen(strPrint);
    bab0:	f8 01       	movw	r30, r16
    bab2:	01 90       	ld	r0, Z+
    bab4:	00 20       	and	r0, r0
    bab6:	e9 f7       	brne	.-6      	; 0xbab2 <FreePrinting+0x3b4>
    bab8:	31 97       	sbiw	r30, 0x01	; 1
    baba:	e0 1b       	sub	r30, r16
    babc:	f1 0b       	sbc	r31, r17
    babe:	f0 93 ca 02 	sts	0x02CA, r31
    bac2:	e0 93 c9 02 	sts	0x02C9, r30
				  stFreePrinting=fpPrintEndLine;	
    bac6:	87 e1       	ldi	r24, 0x17	; 23
    bac8:	80 93 25 01 	sts	0x0125, r24
    bacc:	0f 90       	pop	r0
    bace:	0f 90       	pop	r0
    bad0:	0f 90       	pop	r0
    bad2:	0f 90       	pop	r0
    bad4:	cb c1       	rjmp	.+918    	; 0xbe6c <FreePrinting+0x76e>
			   }else stFreePrinting=fpInitFooter;
		  }else stFreePrinting=fpInitFooter;
	      break;

	 case fpPrintEndLine:
		  if (iSend<LSend){
    bad6:	20 91 cb 02 	lds	r18, 0x02CB
    bada:	30 91 cc 02 	lds	r19, 0x02CC
    bade:	80 91 c9 02 	lds	r24, 0x02C9
    bae2:	90 91 ca 02 	lds	r25, 0x02CA
    bae6:	28 17       	cp	r18, r24
    bae8:	39 07       	cpc	r19, r25
    baea:	68 f4       	brcc	.+26     	; 0xbb06 <FreePrinting+0x408>
		      iLoop++;
    baec:	80 91 c7 02 	lds	r24, 0x02C7
    baf0:	90 91 c8 02 	lds	r25, 0x02C8
    baf4:	01 96       	adiw	r24, 0x01	; 1
    baf6:	90 93 c8 02 	sts	0x02C8, r25
    bafa:	80 93 c7 02 	sts	0x02C7, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
    bafe:	10 92 94 02 	sts	0x0294, r1
				  stFreePrinting=fpCheckPrintEndLine;
    bb02:	88 e1       	ldi	r24, 0x18	; 24
    bb04:	4e ce       	rjmp	.-868    	; 0xb7a2 <FreePrinting+0xa4>
				}
			  }
          else {
			  CarriegeReturn();
    bb06:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			  stFreePrinting=fpLoadOperatorName;
    bb0a:	89 e1       	ldi	r24, 0x19	; 25
    bb0c:	4a ce       	rjmp	.-876    	; 0xb7a2 <FreePrinting+0xa4>
			  }
	      break;
	 case fpCheckPrintEndLine:
	      if (IsBusyPrint==False){
    bb0e:	80 91 91 02 	lds	r24, 0x0291
    bb12:	88 23       	and	r24, r24
    bb14:	09 f0       	breq	.+2      	; 0xbb18 <FreePrinting+0x41a>
    bb16:	0d c1       	rjmp	.+538    	; 0xbd32 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    bb18:	e0 91 cb 02 	lds	r30, 0x02CB
    bb1c:	f0 91 cc 02 	lds	r31, 0x02CC
    bb20:	e6 56       	subi	r30, 0x66	; 102
    bb22:	f6 4f       	sbci	r31, 0xF6	; 246
    bb24:	61 e0       	ldi	r22, 0x01	; 1
    bb26:	40 81       	ld	r20, Z
    bb28:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
    bb2c:	80 91 cb 02 	lds	r24, 0x02CB
    bb30:	90 91 cc 02 	lds	r25, 0x02CC
    bb34:	01 96       	adiw	r24, 0x01	; 1
    bb36:	90 93 cc 02 	sts	0x02CC, r25
    bb3a:	80 93 cb 02 	sts	0x02CB, r24
		      stFreePrinting=fpPrintEndLine;
    bb3e:	87 e1       	ldi	r24, 0x17	; 23
    bb40:	f6 c0       	rjmp	.+492    	; 0xbd2e <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    bb42:	8e 01       	movw	r16, r28
    bb44:	0f 5f       	subi	r16, 0xFF	; 255
    bb46:	1f 4f       	sbci	r17, 0xFF	; 255
    bb48:	c8 01       	movw	r24, r16
    bb4a:	65 e1       	ldi	r22, 0x15	; 21
    bb4c:	70 e0       	ldi	r23, 0x00	; 0
    bb4e:	42 e1       	ldi	r20, 0x12	; 18
    bb50:	50 e0       	ldi	r21, 0x00	; 0
    bb52:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
    bb56:	c8 01       	movw	r24, r16
    bb58:	b8 01       	movw	r22, r16
    bb5a:	40 e0       	ldi	r20, 0x00	; 0
    bb5c:	50 e0       	ldi	r21, 0x00	; 0
    bb5e:	2f e0       	ldi	r18, 0x0F	; 15
    bb60:	30 e0       	ldi	r19, 0x00	; 0
    bb62:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		  sprintf_P(strPrint,PSTR("Operator: %s"),strOperatorName);
    bb66:	00 d0       	rcall	.+0      	; 0xbb68 <FreePrinting+0x46a>
    bb68:	00 d0       	rcall	.+0      	; 0xbb6a <FreePrinting+0x46c>
    bb6a:	00 d0       	rcall	.+0      	; 0xbb6c <FreePrinting+0x46e>
    bb6c:	ed b7       	in	r30, 0x3d	; 61
    bb6e:	fe b7       	in	r31, 0x3e	; 62
    bb70:	31 96       	adiw	r30, 0x01	; 1
    bb72:	6a e9       	ldi	r22, 0x9A	; 154
    bb74:	e6 2e       	mov	r14, r22
    bb76:	69 e0       	ldi	r22, 0x09	; 9
    bb78:	f6 2e       	mov	r15, r22
    bb7a:	ad b7       	in	r26, 0x3d	; 61
    bb7c:	be b7       	in	r27, 0x3e	; 62
    bb7e:	12 96       	adiw	r26, 0x02	; 2
    bb80:	fc 92       	st	X, r15
    bb82:	ee 92       	st	-X, r14
    bb84:	11 97       	sbiw	r26, 0x01	; 1
    bb86:	8e ee       	ldi	r24, 0xEE	; 238
    bb88:	96 e0       	ldi	r25, 0x06	; 6
    bb8a:	93 83       	std	Z+3, r25	; 0x03
    bb8c:	82 83       	std	Z+2, r24	; 0x02
    bb8e:	15 83       	std	Z+5, r17	; 0x05
    bb90:	04 83       	std	Z+4, r16	; 0x04
    bb92:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	      iSend=0;
    bb96:	10 92 cc 02 	sts	0x02CC, r1
    bb9a:	10 92 cb 02 	sts	0x02CB, r1
		  iLoop=0;
    bb9e:	10 92 c8 02 	sts	0x02C8, r1
    bba2:	10 92 c7 02 	sts	0x02C7, r1
		  LSend=strlen(strPrint);
    bba6:	f7 01       	movw	r30, r14
    bba8:	01 90       	ld	r0, Z+
    bbaa:	00 20       	and	r0, r0
    bbac:	e9 f7       	brne	.-6      	; 0xbba8 <FreePrinting+0x4aa>
    bbae:	31 97       	sbiw	r30, 0x01	; 1
    bbb0:	ee 19       	sub	r30, r14
    bbb2:	ff 09       	sbc	r31, r15
    bbb4:	f0 93 ca 02 	sts	0x02CA, r31
    bbb8:	e0 93 c9 02 	sts	0x02C9, r30
		  stFreePrinting=fpPrintOperatorName;	
    bbbc:	8a e1       	ldi	r24, 0x1A	; 26
    bbbe:	80 93 25 01 	sts	0x0125, r24
	      break;
    bbc2:	ed b7       	in	r30, 0x3d	; 61
    bbc4:	fe b7       	in	r31, 0x3e	; 62
    bbc6:	36 96       	adiw	r30, 0x06	; 6
    bbc8:	0f b6       	in	r0, 0x3f	; 63
    bbca:	f8 94       	cli
    bbcc:	fe bf       	out	0x3e, r31	; 62
    bbce:	0f be       	out	0x3f, r0	; 63
    bbd0:	ed bf       	out	0x3d, r30	; 61
    bbd2:	4c c1       	rjmp	.+664    	; 0xbe6c <FreePrinting+0x76e>
	 case fpPrintOperatorName:
		  if (iSend<LSend){
    bbd4:	20 91 cb 02 	lds	r18, 0x02CB
    bbd8:	30 91 cc 02 	lds	r19, 0x02CC
    bbdc:	80 91 c9 02 	lds	r24, 0x02C9
    bbe0:	90 91 ca 02 	lds	r25, 0x02CA
    bbe4:	28 17       	cp	r18, r24
    bbe6:	39 07       	cpc	r19, r25
    bbe8:	68 f4       	brcc	.+26     	; 0xbc04 <FreePrinting+0x506>
		      iLoop++;
    bbea:	80 91 c7 02 	lds	r24, 0x02C7
    bbee:	90 91 c8 02 	lds	r25, 0x02C8
    bbf2:	01 96       	adiw	r24, 0x01	; 1
    bbf4:	90 93 c8 02 	sts	0x02C8, r25
    bbf8:	80 93 c7 02 	sts	0x02C7, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
    bbfc:	10 92 94 02 	sts	0x0294, r1
				  stFreePrinting=fpCheckPrintOperatorName;
    bc00:	8b e1       	ldi	r24, 0x1B	; 27
    bc02:	cf cd       	rjmp	.-1122   	; 0xb7a2 <FreePrinting+0xa4>
				}
			  }
          else {
			  CarriegeReturn();
    bc04:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			  CarriegeReturn();
    bc08:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			  stFreePrinting=fpInitFooter;
    bc0c:	8b e0       	ldi	r24, 0x0B	; 11
    bc0e:	c9 cd       	rjmp	.-1134   	; 0xb7a2 <FreePrinting+0xa4>
			  }
	      break;
	 case fpCheckPrintOperatorName:
	      if (IsBusyPrint==False){
    bc10:	80 91 91 02 	lds	r24, 0x0291
    bc14:	88 23       	and	r24, r24
    bc16:	09 f0       	breq	.+2      	; 0xbc1a <FreePrinting+0x51c>
    bc18:	8c c0       	rjmp	.+280    	; 0xbd32 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    bc1a:	e0 91 cb 02 	lds	r30, 0x02CB
    bc1e:	f0 91 cc 02 	lds	r31, 0x02CC
    bc22:	e6 56       	subi	r30, 0x66	; 102
    bc24:	f6 4f       	sbci	r31, 0xF6	; 246
    bc26:	61 e0       	ldi	r22, 0x01	; 1
    bc28:	40 81       	ld	r20, Z
    bc2a:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
    bc2e:	80 91 cb 02 	lds	r24, 0x02CB
    bc32:	90 91 cc 02 	lds	r25, 0x02CC
    bc36:	01 96       	adiw	r24, 0x01	; 1
    bc38:	90 93 cc 02 	sts	0x02CC, r25
    bc3c:	80 93 cb 02 	sts	0x02CB, r24
		      stFreePrinting=fpPrintOperatorName;
    bc40:	8a e1       	ldi	r24, 0x1A	; 26
    bc42:	75 c0       	rjmp	.+234    	; 0xbd2e <FreePrinting+0x630>
			  }
	      break;

     case fpInitFooter:
	      //uart_printf(0,1,PSTR("fpInitFooter"));
          if (((cmdPrint&0b01000000)>>6)==1){
    bc44:	80 91 93 02 	lds	r24, 0x0293
    bc48:	86 ff       	sbrs	r24, 6
    bc4a:	06 c0       	rjmp	.+12     	; 0xbc58 <FreePrinting+0x55a>
		      stFreePrinting=fpLoadFooter;
    bc4c:	8c e0       	ldi	r24, 0x0C	; 12
    bc4e:	80 93 25 01 	sts	0x0125, r24
			  iFooter=0;
    bc52:	10 92 d1 02 	sts	0x02D1, r1
    bc56:	0a c1       	rjmp	.+532    	; 0xbe6c <FreePrinting+0x76e>
			  }
		  else
	      if (((cmdPrint&0b01000000)>>6)==0) stFreePrinting=fpPaperCut;//fpInitScroll;	                
    bc58:	80 e1       	ldi	r24, 0x10	; 16
    bc5a:	a3 cd       	rjmp	.-1210   	; 0xb7a2 <FreePrinting+0xa4>
	      break;
     case fpLoadFooter:
	 	  //uart_printf(0,1,PSTR("fpLoadFooter"));
          //Footer 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
    bc5c:	80 91 d1 02 	lds	r24, 0x02D1
    bc60:	90 e0       	ldi	r25, 0x00	; 0
    bc62:	06 96       	adiw	r24, 0x06	; 6
    bc64:	29 e2       	ldi	r18, 0x29	; 41
    bc66:	30 e0       	ldi	r19, 0x00	; 0
    bc68:	82 9f       	mul	r24, r18
    bc6a:	b0 01       	movw	r22, r0
    bc6c:	83 9f       	mul	r24, r19
    bc6e:	70 0d       	add	r23, r0
    bc70:	92 9f       	mul	r25, r18
    bc72:	70 0d       	add	r23, r0
    bc74:	11 24       	eor	r1, r1
    bc76:	69 5d       	subi	r22, 0xD9	; 217
    bc78:	7d 4f       	sbci	r23, 0xFD	; 253
    bc7a:	8a e9       	ldi	r24, 0x9A	; 154
    bc7c:	99 e0       	ldi	r25, 0x09	; 9
    bc7e:	48 e2       	ldi	r20, 0x28	; 40
    bc80:	50 e0       	ldi	r21, 0x00	; 0
    bc82:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  iFooter++;
    bc86:	80 91 d1 02 	lds	r24, 0x02D1
    bc8a:	8f 5f       	subi	r24, 0xFF	; 255
    bc8c:	80 93 d1 02 	sts	0x02D1, r24
		  if (iFooter<4){
    bc90:	84 30       	cpi	r24, 0x04	; 4
    bc92:	90 f4       	brcc	.+36     	; 0xbcb8 <FreePrinting+0x5ba>
		      if (SpaceOnly(strPrint)==True){
    bc94:	8a e9       	ldi	r24, 0x9A	; 154
    bc96:	99 e0       	ldi	r25, 0x09	; 9
    bc98:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
    bc9c:	81 30       	cpi	r24, 0x01	; 1
    bc9e:	11 f4       	brne	.+4      	; 0xbca4 <FreePrinting+0x5a6>
			      stFreePrinting=fpLoadFooter;
    bca0:	8c e0       	ldi	r24, 0x0C	; 12
    bca2:	7f cd       	rjmp	.-1282   	; 0xb7a2 <FreePrinting+0xa4>
				  }
			  else{
			      iSend=0;
    bca4:	10 92 cc 02 	sts	0x02CC, r1
    bca8:	10 92 cb 02 	sts	0x02CB, r1
				  iLoop=0;
    bcac:	10 92 c8 02 	sts	0x02C8, r1
    bcb0:	10 92 c7 02 	sts	0x02C7, r1
				  stFreePrinting=fpPrintFooter;
    bcb4:	8d e0       	ldi	r24, 0x0D	; 13
    bcb6:	75 cd       	rjmp	.-1302   	; 0xb7a2 <FreePrinting+0xa4>
			      }
		  }else{
		    CarriegeReturn();
    bcb8:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			iPrinted++;
    bcbc:	80 91 d3 02 	lds	r24, 0x02D3
    bcc0:	8f 5f       	subi	r24, 0xFF	; 255
    bcc2:	80 93 d3 02 	sts	0x02D3, r24

			//if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_CUBE){
			    stFreePrinting=fpInitScroll;
    bcc6:	8e e0       	ldi	r24, 0x0E	; 14
    bcc8:	6c cd       	rjmp	.-1320   	; 0xb7a2 <FreePrinting+0xa4>
			//}else stFreePrinting=fpPaperCut;

			}
	      break;
     case fpPrintFooter:
		  if (iSend<40){
    bcca:	80 91 cb 02 	lds	r24, 0x02CB
    bcce:	90 91 cc 02 	lds	r25, 0x02CC
    bcd2:	88 32       	cpi	r24, 0x28	; 40
    bcd4:	91 05       	cpc	r25, r1
    bcd6:	68 f4       	brcc	.+26     	; 0xbcf2 <FreePrinting+0x5f4>
		      iLoop++;
    bcd8:	80 91 c7 02 	lds	r24, 0x02C7
    bcdc:	90 91 c8 02 	lds	r25, 0x02C8
    bce0:	01 96       	adiw	r24, 0x01	; 1
    bce2:	90 93 c8 02 	sts	0x02C8, r25
    bce6:	80 93 c7 02 	sts	0x02C7, r24
			  if((iLoop%PRINT_DELAY)==0){
		        //uart(_COM_PRINTER,1,strPrint[iSend]);
		        //iSend++;
				TimPrintBusy=0;
    bcea:	10 92 94 02 	sts	0x0294, r1
				stFreePrinting=fpCheckPrintStatusFooter;
    bcee:	84 e1       	ldi	r24, 0x14	; 20
    bcf0:	58 cd       	rjmp	.-1360   	; 0xb7a2 <FreePrinting+0xa4>
				}
			  }
          else {
		      stFreePrinting=fpLoadFooter;
    bcf2:	8c e0       	ldi	r24, 0x0C	; 12
    bcf4:	80 93 25 01 	sts	0x0125, r24
			  CarriegeReturn();
    bcf8:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
    bcfc:	b7 c0       	rjmp	.+366    	; 0xbe6c <FreePrinting+0x76e>
			  }
	      break;
     
	 case fpCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
    bcfe:	80 91 91 02 	lds	r24, 0x0291
    bd02:	88 23       	and	r24, r24
    bd04:	b1 f4       	brne	.+44     	; 0xbd32 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    bd06:	e0 91 cb 02 	lds	r30, 0x02CB
    bd0a:	f0 91 cc 02 	lds	r31, 0x02CC
    bd0e:	e6 56       	subi	r30, 0x66	; 102
    bd10:	f6 4f       	sbci	r31, 0xF6	; 246
    bd12:	61 e0       	ldi	r22, 0x01	; 1
    bd14:	40 81       	ld	r20, Z
    bd16:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
    bd1a:	80 91 cb 02 	lds	r24, 0x02CB
    bd1e:	90 91 cc 02 	lds	r25, 0x02CC
    bd22:	01 96       	adiw	r24, 0x01	; 1
    bd24:	90 93 cc 02 	sts	0x02CC, r25
    bd28:	80 93 cb 02 	sts	0x02CB, r24
		      stFreePrinting=fpPrintFooter;
    bd2c:	8d e0       	ldi	r24, 0x0D	; 13
    bd2e:	80 93 25 01 	sts	0x0125, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
    bd32:	80 91 94 02 	lds	r24, 0x0294
    bd36:	8b 30       	cpi	r24, 0x0B	; 11
    bd38:	08 f4       	brcc	.+2      	; 0xbd3c <FreePrinting+0x63e>
    bd3a:	98 c0       	rjmp	.+304    	; 0xbe6c <FreePrinting+0x76e>
		      IsPrintERROR=True;
    bd3c:	81 e0       	ldi	r24, 0x01	; 1
    bd3e:	80 93 8f 02 	sts	0x028F, r24
		      stFreePrinting=fpFinishFreePrinting;
    bd42:	81 e1       	ldi	r24, 0x11	; 17
    bd44:	2e cd       	rjmp	.-1444   	; 0xb7a2 <FreePrinting+0xa4>
			  }
	      break;

     case fpInitScroll:
	      iScroll=0;
    bd46:	10 92 ce 02 	sts	0x02CE, r1
		  iSend=0;
    bd4a:	10 92 cc 02 	sts	0x02CC, r1
    bd4e:	10 92 cb 02 	sts	0x02CB, r1
		  if (iPrinted<PrintCopy)
    bd52:	90 91 d3 02 	lds	r25, 0x02D3
    bd56:	80 91 d0 02 	lds	r24, 0x02D0
    bd5a:	98 17       	cp	r25, r24
    bd5c:	18 f4       	brcc	.+6      	; 0xbd64 <FreePrinting+0x666>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
    bd5e:	82 e3       	ldi	r24, 0x32	; 50
    bd60:	90 e0       	ldi	r25, 0x00	; 0
    bd62:	02 c0       	rjmp	.+4      	; 0xbd68 <FreePrinting+0x66a>
		  else if (iPrinted>=PrintCopy)
		  	  nScroll=eeprom_read_byte(&DefPrintScrollEnd);
    bd64:	81 e3       	ldi	r24, 0x31	; 49
    bd66:	90 e0       	ldi	r25, 0x00	; 0
    bd68:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    bd6c:	80 93 cd 02 	sts	0x02CD, r24

          stFreePrinting=fpScrollPaper;
    bd70:	8f e0       	ldi	r24, 0x0F	; 15
    bd72:	17 cd       	rjmp	.-1490   	; 0xb7a2 <FreePrinting+0xa4>
	      break;
     case fpScrollPaper:
	      if (iScroll>nScroll)stFreePrinting=fpPaperCut;
    bd74:	90 91 ce 02 	lds	r25, 0x02CE
    bd78:	80 91 cd 02 	lds	r24, 0x02CD
    bd7c:	89 17       	cp	r24, r25
    bd7e:	18 f4       	brcc	.+6      	; 0xbd86 <FreePrinting+0x688>
    bd80:	80 e1       	ldi	r24, 0x10	; 16
    bd82:	80 93 25 01 	sts	0x0125, r24
		  iSend++;
    bd86:	80 91 cb 02 	lds	r24, 0x02CB
    bd8a:	90 91 cc 02 	lds	r25, 0x02CC
    bd8e:	01 96       	adiw	r24, 0x01	; 1
    bd90:	90 93 cc 02 	sts	0x02CC, r25
    bd94:	80 93 cb 02 	sts	0x02CB, r24
		  if (iSend%PRINT_DELAY==0){
		      CarriegeReturn();
    bd98:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			  iScroll++;
    bd9c:	80 91 ce 02 	lds	r24, 0x02CE
    bda0:	8f 5f       	subi	r24, 0xFF	; 255
    bda2:	80 93 ce 02 	sts	0x02CE, r24
    bda6:	62 c0       	rjmp	.+196    	; 0xbe6c <FreePrinting+0x76e>
			  }
	      break;
     case fpPaperCut:
		  //uart_printf(0,1,PSTR("fpPaperCut"));
		  //iPrinted++;
          if (iPrinted<PrintCopy){
    bda8:	90 91 d3 02 	lds	r25, 0x02D3
    bdac:	80 91 d0 02 	lds	r24, 0x02D0
    bdb0:	98 17       	cp	r25, r24
    bdb2:	20 f4       	brcc	.+8      	; 0xbdbc <FreePrinting+0x6be>
		      CarriegeReturn();
    bdb4:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
              stFreePrinting=fpInitHeader;
    bdb8:	82 e0       	ldi	r24, 0x02	; 2
    bdba:	07 c0       	rjmp	.+14     	; 0xbdca <FreePrinting+0x6cc>
			  }
          else{
		      if (IFType==IT_SLAVE)sendMessage04();
    bdbc:	80 91 00 01 	lds	r24, 0x0100
    bdc0:	81 30       	cpi	r24, 0x01	; 1
    bdc2:	11 f4       	brne	.+4      	; 0xbdc8 <FreePrinting+0x6ca>
    bdc4:	0e 94 44 2a 	call	0x5488	; 0x5488 <sendMessage04>
		      stFreePrinting=fpFinishFreePrinting;
    bdc8:	81 e1       	ldi	r24, 0x11	; 17
    bdca:	80 93 25 01 	sts	0x0125, r24
			  }
          
		  if (((cmdPrint&0b00100000)>>5)==1){
    bdce:	80 91 93 02 	lds	r24, 0x0293
    bdd2:	85 ff       	sbrs	r24, 5
    bdd4:	4b c0       	rjmp	.+150    	; 0xbe6c <FreePrinting+0x76e>
		      if (iPrinted==0){
    bdd6:	80 91 d3 02 	lds	r24, 0x02D3
    bdda:	88 23       	and	r24, r24
    bddc:	59 f4       	brne	.+22     	; 0xbdf4 <FreePrinting+0x6f6>
			      CarriegeReturn();_delay_ms(50);
    bdde:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
    bde2:	8f ef       	ldi	r24, 0xFF	; 255
    bde4:	9f e3       	ldi	r25, 0x3F	; 63
    bde6:	a2 e0       	ldi	r26, 0x02	; 2
    bde8:	81 50       	subi	r24, 0x01	; 1
    bdea:	90 40       	sbci	r25, 0x00	; 0
    bdec:	a0 40       	sbci	r26, 0x00	; 0
    bdee:	e1 f7       	brne	.-8      	; 0xbde8 <FreePrinting+0x6ea>
    bdf0:	00 c0       	rjmp	.+0      	; 0xbdf2 <FreePrinting+0x6f4>
    bdf2:	00 00       	nop
				 }
              //HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
		      if ((iPrinted==PrintCopy)){
    bdf4:	90 91 d3 02 	lds	r25, 0x02D3
    bdf8:	80 91 d0 02 	lds	r24, 0x02D0
    bdfc:	98 17       	cp	r25, r24
    bdfe:	61 f5       	brne	.+88     	; 0xbe58 <FreePrinting+0x75a>
			      // if (((cmdPrint&0b00010000)>>4)==1){
				  CarriegeReturn();_delay_ms(50);
    be00:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
    be04:	8f ef       	ldi	r24, 0xFF	; 255
    be06:	9f e3       	ldi	r25, 0x3F	; 63
    be08:	a2 e0       	ldi	r26, 0x02	; 2
    be0a:	81 50       	subi	r24, 0x01	; 1
    be0c:	90 40       	sbci	r25, 0x00	; 0
    be0e:	a0 40       	sbci	r26, 0x00	; 0
    be10:	e1 f7       	brne	.-8      	; 0xbe0a <FreePrinting+0x70c>
    be12:	00 c0       	rjmp	.+0      	; 0xbe14 <FreePrinting+0x716>
    be14:	00 00       	nop
				  CarriegeReturn();_delay_ms(50);
    be16:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
    be1a:	8f ef       	ldi	r24, 0xFF	; 255
    be1c:	9f e3       	ldi	r25, 0x3F	; 63
    be1e:	a2 e0       	ldi	r26, 0x02	; 2
    be20:	81 50       	subi	r24, 0x01	; 1
    be22:	90 40       	sbci	r25, 0x00	; 0
    be24:	a0 40       	sbci	r26, 0x00	; 0
    be26:	e1 f7       	brne	.-8      	; 0xbe20 <FreePrinting+0x722>
    be28:	00 c0       	rjmp	.+0      	; 0xbe2a <FreePrinting+0x72c>
    be2a:	00 00       	nop
				  CarriegeReturn();_delay_ms(50);
    be2c:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
    be30:	8f ef       	ldi	r24, 0xFF	; 255
    be32:	9f e3       	ldi	r25, 0x3F	; 63
    be34:	a2 e0       	ldi	r26, 0x02	; 2
    be36:	81 50       	subi	r24, 0x01	; 1
    be38:	90 40       	sbci	r25, 0x00	; 0
    be3a:	a0 40       	sbci	r26, 0x00	; 0
    be3c:	e1 f7       	brne	.-8      	; 0xbe36 <FreePrinting+0x738>
    be3e:	00 c0       	rjmp	.+0      	; 0xbe40 <FreePrinting+0x742>
    be40:	00 00       	nop
				  CarriegeReturn();_delay_ms(50);
    be42:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
    be46:	8f ef       	ldi	r24, 0xFF	; 255
    be48:	9f e3       	ldi	r25, 0x3F	; 63
    be4a:	a2 e0       	ldi	r26, 0x02	; 2
    be4c:	81 50       	subi	r24, 0x01	; 1
    be4e:	90 40       	sbci	r25, 0x00	; 0
    be50:	a0 40       	sbci	r26, 0x00	; 0
    be52:	e1 f7       	brne	.-8      	; 0xbe4c <FreePrinting+0x74e>
    be54:	00 c0       	rjmp	.+0      	; 0xbe56 <FreePrinting+0x758>
    be56:	00 00       	nop
				   //}
				 }
		      PaperCut();
    be58:	0e 94 4c 49 	call	0x9298	; 0x9298 <PaperCut>
    be5c:	07 c0       	rjmp	.+14     	; 0xbe6c <FreePrinting+0x76e>
		   }
	      break;
     case fpFinishFreePrinting:
	 	  //uart_printf(0,1,PSTR("fpFinished"));
		  IsBusyFreePrinting=False;
    be5e:	10 92 92 02 	sts	0x0292, r1
	      stFreePrinting=fpInit;
    be62:	81 e0       	ldi	r24, 0x01	; 1
    be64:	80 93 25 01 	sts	0x0125, r24
		  iPrinted=0;
    be68:	10 92 d3 02 	sts	0x02D3, r1
	      break;
	 }//EndCase
}
    be6c:	64 96       	adiw	r28, 0x14	; 20
    be6e:	0f b6       	in	r0, 0x3f	; 63
    be70:	f8 94       	cli
    be72:	de bf       	out	0x3e, r29	; 62
    be74:	0f be       	out	0x3f, r0	; 63
    be76:	cd bf       	out	0x3d, r28	; 61
    be78:	cf 91       	pop	r28
    be7a:	df 91       	pop	r29
    be7c:	1f 91       	pop	r17
    be7e:	0f 91       	pop	r16
    be80:	ff 90       	pop	r15
    be82:	ef 90       	pop	r14
    be84:	08 95       	ret

0000be86 <RawToStr>:
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    be86:	28 2f       	mov	r18, r24
    be88:	39 2f       	mov	r19, r25
    be8a:	d9 01       	movw	r26, r18
    be8c:	fb 01       	movw	r30, r22
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    be8e:	80 e0       	ldi	r24, 0x00	; 0
	      cA=Chr(Source[i]>>4);
    be90:	9d 91       	ld	r25, X+
    be92:	29 2f       	mov	r18, r25
    be94:	22 95       	swap	r18
    be96:	2f 70       	andi	r18, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    be98:	2a 30       	cpi	r18, 0x0A	; 10
    be9a:	10 f4       	brcc	.+4      	; 0xbea0 <RawToStr+0x1a>
	    Result='0'+X;
    be9c:	20 5d       	subi	r18, 0xD0	; 208
    be9e:	01 c0       	rjmp	.+2      	; 0xbea2 <RawToStr+0x1c>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    bea0:	20 e3       	ldi	r18, 0x30	; 48
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
    bea2:	9f 70       	andi	r25, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    bea4:	9a 30       	cpi	r25, 0x0A	; 10
    bea6:	10 f4       	brcc	.+4      	; 0xbeac <RawToStr+0x26>
	    Result='0'+X;
    bea8:	90 5d       	subi	r25, 0xD0	; 208
    beaa:	01 c0       	rjmp	.+2      	; 0xbeae <RawToStr+0x28>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    beac:	90 e3       	ldi	r25, 0x30	; 48
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
    beae:	20 83       	st	Z, r18
          Dest[(2*i)+1]=cB;
    beb0:	91 83       	std	Z+1, r25	; 0x01
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    beb2:	8f 5f       	subi	r24, 0xFF	; 255
    beb4:	32 96       	adiw	r30, 0x02	; 2
    beb6:	86 30       	cpi	r24, 0x06	; 6
    beb8:	59 f7       	brne	.-42     	; 0xbe90 <RawToStr+0xa>
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
          Dest[(2*i)+1]=cB;
	 }Dest[12]=0;
    beba:	fb 01       	movw	r30, r22
    bebc:	14 86       	std	Z+12, r1	; 0x0c
}
    bebe:	08 95       	ret

0000bec0 <GetTotalizerData>:
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
}



void GetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "0000000"
    bec0:	0f 93       	push	r16
    bec2:	1f 93       	push	r17
    bec4:	df 93       	push	r29
    bec6:	cf 93       	push	r28
    bec8:	00 d0       	rcall	.+0      	; 0xbeca <GetTotalizerData+0xa>
    beca:	00 d0       	rcall	.+0      	; 0xbecc <GetTotalizerData+0xc>
    becc:	00 d0       	rcall	.+0      	; 0xbece <GetTotalizerData+0xe>
    bece:	cd b7       	in	r28, 0x3d	; 61
    bed0:	de b7       	in	r29, 0x3e	; 62
     char rawValue[6],iPumpAddr,iGrade;

	 iPumpAddr=(xPumpAddr&0x0F);
    bed2:	4f 70       	andi	r20, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    bed4:	21 50       	subi	r18, 0x01	; 1
    bed6:	26 30       	cpi	r18, 0x06	; 6
    bed8:	08 f4       	brcc	.+2      	; 0xbedc <GetTotalizerData+0x1c>
    beda:	92 2f       	mov	r25, r18
	     iGrade=xGradeAddr-1;
     
//TotalVolume[2][16][6][6];
//GetTotalizerData(TVOLUME,TOTALIZER_LAST,PumpNum,xGrade,strLastVolume);
	 if (TType==TVOLUME)eeprom_read_block((void*) &rawValue, (const void*) &(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    bedc:	88 23       	and	r24, r24
    bede:	c9 f4       	brne	.+50     	; 0xbf12 <GetTotalizerData+0x52>
    bee0:	84 e2       	ldi	r24, 0x24	; 36
    bee2:	48 9f       	mul	r20, r24
    bee4:	a0 01       	movw	r20, r0
    bee6:	11 24       	eor	r1, r1
    bee8:	70 e0       	ldi	r23, 0x00	; 0
    beea:	e0 e2       	ldi	r30, 0x20	; 32
    beec:	f1 e0       	ldi	r31, 0x01	; 1
    beee:	6e 9f       	mul	r22, r30
    bef0:	90 01       	movw	r18, r0
    bef2:	6f 9f       	mul	r22, r31
    bef4:	30 0d       	add	r19, r0
    bef6:	7e 9f       	mul	r23, r30
    bef8:	30 0d       	add	r19, r0
    befa:	11 24       	eor	r1, r1
    befc:	42 0f       	add	r20, r18
    befe:	53 1f       	adc	r21, r19
    bf00:	86 e0       	ldi	r24, 0x06	; 6
    bf02:	98 9f       	mul	r25, r24
    bf04:	c0 01       	movw	r24, r0
    bf06:	11 24       	eor	r1, r1
    bf08:	48 0f       	add	r20, r24
    bf0a:	59 1f       	adc	r21, r25
    bf0c:	4d 53       	subi	r20, 0x3D	; 61
    bf0e:	5c 4f       	sbci	r21, 0xFC	; 252
    bf10:	1a c0       	rjmp	.+52     	; 0xbf46 <GetTotalizerData+0x86>
	 else 
	 if (TType==TMONEY)eeprom_read_block((void*) &rawValue, (const void*) &(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    bf12:	81 30       	cpi	r24, 0x01	; 1
    bf14:	f9 f4       	brne	.+62     	; 0xbf54 <GetTotalizerData+0x94>
    bf16:	84 e2       	ldi	r24, 0x24	; 36
    bf18:	48 9f       	mul	r20, r24
    bf1a:	a0 01       	movw	r20, r0
    bf1c:	11 24       	eor	r1, r1
    bf1e:	70 e0       	ldi	r23, 0x00	; 0
    bf20:	e0 e2       	ldi	r30, 0x20	; 32
    bf22:	f1 e0       	ldi	r31, 0x01	; 1
    bf24:	6e 9f       	mul	r22, r30
    bf26:	90 01       	movw	r18, r0
    bf28:	6f 9f       	mul	r22, r31
    bf2a:	30 0d       	add	r19, r0
    bf2c:	7e 9f       	mul	r23, r30
    bf2e:	30 0d       	add	r19, r0
    bf30:	11 24       	eor	r1, r1
    bf32:	42 0f       	add	r20, r18
    bf34:	53 1f       	adc	r21, r19
    bf36:	86 e0       	ldi	r24, 0x06	; 6
    bf38:	98 9f       	mul	r25, r24
    bf3a:	c0 01       	movw	r24, r0
    bf3c:	11 24       	eor	r1, r1
    bf3e:	48 0f       	add	r20, r24
    bf40:	59 1f       	adc	r21, r25
    bf42:	4d 5f       	subi	r20, 0xFD	; 253
    bf44:	59 4f       	sbci	r21, 0xF9	; 249
    bf46:	ce 01       	movw	r24, r28
    bf48:	01 96       	adiw	r24, 0x01	; 1
    bf4a:	ba 01       	movw	r22, r20
    bf4c:	46 e0       	ldi	r20, 0x06	; 6
    bf4e:	50 e0       	ldi	r21, 0x00	; 0
    bf50:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	 //Convert RawData to String 
	 RawToStr(rawValue,strValue);
    bf54:	ce 01       	movw	r24, r28
    bf56:	01 96       	adiw	r24, 0x01	; 1
    bf58:	b8 01       	movw	r22, r16
    bf5a:	0e 94 43 5f 	call	0xbe86	; 0xbe86 <RawToStr>
}
    bf5e:	26 96       	adiw	r28, 0x06	; 6
    bf60:	0f b6       	in	r0, 0x3f	; 63
    bf62:	f8 94       	cli
    bf64:	de bf       	out	0x3e, r29	; 62
    bf66:	0f be       	out	0x3f, r0	; 63
    bf68:	cd bf       	out	0x3d, r28	; 61
    bf6a:	cf 91       	pop	r28
    bf6c:	df 91       	pop	r29
    bf6e:	1f 91       	pop	r17
    bf70:	0f 91       	pop	r16
    bf72:	08 95       	ret

0000bf74 <CalcMinus>:

char CalcMinus(char A, char B){
     signed char xC;//,xA,xB;
	 char Result;
	 if (A>=B) xC=((A-'0')-(B-'0'));
    bf74:	86 17       	cp	r24, r22
    bf76:	08 f4       	brcc	.+2      	; 0xbf7a <CalcMinus+0x6>
	 else xC=10+((A-'0')-(B-'0'));//
    bf78:	86 5f       	subi	r24, 0xF6	; 246
    bf7a:	86 1b       	sub	r24, r22
	 Result='0'+xC;
  return Result;
}
    bf7c:	80 5d       	subi	r24, 0xD0	; 208
    bf7e:	08 95       	ret

0000bf80 <CalcPlus>:

char CalcPlus(char A, char B){
     signed char xA,xB,xC;
	 char Result;
	 xC=((A-'0')+(B-'0'));
    bf80:	80 56       	subi	r24, 0x60	; 96
    bf82:	86 0f       	add	r24, r22
     Result='0'+(xC%10);  
    bf84:	6a e0       	ldi	r22, 0x0A	; 10
    bf86:	0e 94 98 a5 	call	0x14b30	; 0x14b30 <__divmodqi4>
   return Result;
}
    bf8a:	89 2f       	mov	r24, r25
    bf8c:	80 5d       	subi	r24, 0xD0	; 208
    bf8e:	08 95       	ret

0000bf90 <IsZerroAll>:

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
    bf90:	dc 01       	movw	r26, r24
    bf92:	0d 90       	ld	r0, X+
    bf94:	00 20       	and	r0, r0
    bf96:	e9 f7       	brne	.-6      	; 0xbf92 <IsZerroAll+0x2>
    bf98:	11 97       	sbiw	r26, 0x01	; 1
    bf9a:	a8 1b       	sub	r26, r24
	 xC=((A-'0')+(B-'0'));
     Result='0'+(xC%10);  
   return Result;
}

char IsZerroAll(char *strZerro){
    bf9c:	ea 2f       	mov	r30, r26
    bf9e:	f0 e0       	ldi	r31, 0x00	; 0
    bfa0:	31 96       	adiw	r30, 0x01	; 1
    bfa2:	e8 0f       	add	r30, r24
    bfa4:	f9 1f       	adc	r31, r25
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
    bfa6:	90 e0       	ldi	r25, 0x00	; 0
	 Result=False;
	 for(i=0;i<Length;i++){
    bfa8:	80 e0       	ldi	r24, 0x00	; 0
    bfaa:	05 c0       	rjmp	.+10     	; 0xbfb6 <IsZerroAll+0x26>
	     if (strZerro[Length-i]=='0')nZerro++;
    bfac:	22 91       	ld	r18, -Z
    bfae:	20 33       	cpi	r18, 0x30	; 48
    bfb0:	09 f4       	brne	.+2      	; 0xbfb4 <IsZerroAll+0x24>
    bfb2:	9f 5f       	subi	r25, 0xFF	; 255
char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
    bfb4:	8f 5f       	subi	r24, 0xFF	; 255
    bfb6:	8a 17       	cp	r24, r26
    bfb8:	c8 f3       	brcs	.-14     	; 0xbfac <IsZerroAll+0x1c>

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
    bfba:	81 e0       	ldi	r24, 0x01	; 1
    bfbc:	9a 13       	cpse	r25, r26
    bfbe:	80 e0       	ldi	r24, 0x00	; 0
	 for(i=0;i<Length;i++){
	     if (strZerro[Length-i]=='0')nZerro++;
	 }if (nZerro==Length) Result=True;
  return Result;
}
    bfc0:	08 95       	ret

0000bfc2 <Chr>:

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    bfc2:	8a 30       	cpi	r24, 0x0A	; 10
    bfc4:	10 f4       	brcc	.+4      	; 0xbfca <Chr+0x8>
	    Result='0'+X;
    bfc6:	80 5d       	subi	r24, 0xD0	; 208
    bfc8:	08 95       	ret
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    bfca:	80 e3       	ldi	r24, 0x30	; 48
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
	 }
	return Result;
}
    bfcc:	08 95       	ret

0000bfce <Ord>:
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    bfce:	80 53       	subi	r24, 0x30	; 48
    bfd0:	8a 30       	cpi	r24, 0x0A	; 10
    bfd2:	08 f0       	brcs	.+2      	; 0xbfd6 <Ord+0x8>
	    Result='0'+X;
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
    bfd4:	80 e0       	ldi	r24, 0x00	; 0
	 if ((c>='0')&&(c<='9')){
	    Result=c-'0';
	 }
	return Result;
}
    bfd6:	08 95       	ret

0000bfd8 <StrToRaw>:
			  }
		  }
	 }
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
    bfd8:	cf 92       	push	r12
    bfda:	df 92       	push	r13
    bfdc:	ef 92       	push	r14
    bfde:	ff 92       	push	r15
    bfe0:	0f 93       	push	r16
    bfe2:	1f 93       	push	r17
    bfe4:	df 93       	push	r29
    bfe6:	cf 93       	push	r28
    bfe8:	0f 92       	push	r0
    bfea:	cd b7       	in	r28, 0x3d	; 61
    bfec:	de b7       	in	r29, 0x3e	; 62
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    bfee:	48 2f       	mov	r20, r24
    bff0:	59 2f       	mov	r21, r25
    bff2:	6a 01       	movw	r12, r20
    bff4:	06 2f       	mov	r16, r22
    bff6:	17 2f       	mov	r17, r23
    bff8:	90 e0       	ldi	r25, 0x00	; 0
	      xA=Ord(Source[(2*i)]);
    bffa:	f6 01       	movw	r30, r12
    bffc:	80 81       	ld	r24, Z
    bffe:	99 83       	std	Y+1, r25	; 0x01
    c000:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    c004:	f8 2e       	mov	r15, r24
		  xB=(0x0F&Ord(Source[(2*i)+1]));
    c006:	f6 01       	movw	r30, r12
    c008:	81 81       	ldd	r24, Z+1	; 0x01
    c00a:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
	      xRaw=((xA<<4) | xB);
    c00e:	f2 94       	swap	r15
    c010:	e0 ef       	ldi	r30, 0xF0	; 240
    c012:	fe 22       	and	r15, r30
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
    c014:	8f 70       	andi	r24, 0x0F	; 15
	      xRaw=((xA<<4) | xB);
    c016:	f8 2a       	or	r15, r24
	      Dest[i]=xRaw;
    c018:	f8 01       	movw	r30, r16
    c01a:	f1 92       	st	Z+, r15
    c01c:	8f 01       	movw	r16, r30
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    c01e:	99 81       	ldd	r25, Y+1	; 0x01
    c020:	9f 5f       	subi	r25, 0xFF	; 255
    c022:	72 e0       	ldi	r23, 0x02	; 2
    c024:	e7 2e       	mov	r14, r23
    c026:	f1 2c       	mov	r15, r1
    c028:	ce 0c       	add	r12, r14
    c02a:	df 1c       	adc	r13, r15
    c02c:	96 30       	cpi	r25, 0x06	; 6
    c02e:	29 f7       	brne	.-54     	; 0xbffa <StrToRaw+0x22>
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
	 }	      
}
    c030:	0f 90       	pop	r0
    c032:	cf 91       	pop	r28
    c034:	df 91       	pop	r29
    c036:	1f 91       	pop	r17
    c038:	0f 91       	pop	r16
    c03a:	ff 90       	pop	r15
    c03c:	ef 90       	pop	r14
    c03e:	df 90       	pop	r13
    c040:	cf 90       	pop	r12
    c042:	08 95       	ret

0000c044 <SetTotalizerData>:
			  }
		  }
	 }
}

void SetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "00000000"
    c044:	9f 92       	push	r9
    c046:	af 92       	push	r10
    c048:	bf 92       	push	r11
    c04a:	cf 92       	push	r12
    c04c:	df 92       	push	r13
    c04e:	ef 92       	push	r14
    c050:	ff 92       	push	r15
    c052:	0f 93       	push	r16
    c054:	1f 93       	push	r17
    c056:	df 93       	push	r29
    c058:	cf 93       	push	r28
    c05a:	cd b7       	in	r28, 0x3d	; 61
    c05c:	de b7       	in	r29, 0x3e	; 62
    c05e:	66 97       	sbiw	r28, 0x16	; 22
    c060:	0f b6       	in	r0, 0x3f	; 63
    c062:	f8 94       	cli
    c064:	de bf       	out	0x3e, r29	; 62
    c066:	0f be       	out	0x3f, r0	; 63
    c068:	cd bf       	out	0x3d, r28	; 61
    c06a:	f8 2e       	mov	r15, r24
    c06c:	e6 2e       	mov	r14, r22
    c06e:	c4 2e       	mov	r12, r20
    c070:	92 2e       	mov	r9, r18
    c072:	c8 01       	movw	r24, r16
     char rawValue[6],iPumpAddr,iGrade;
	 char strPValue[15];
	 char Idx;
	 char strSend[30];
	 //Convert String to RawData
	 if (strlen(strValue)<=12){
    c074:	f8 01       	movw	r30, r16
    c076:	01 90       	ld	r0, Z+
    c078:	00 20       	and	r0, r0
    c07a:	e9 f7       	brne	.-6      	; 0xc076 <SetTotalizerData+0x32>
    c07c:	31 97       	sbiw	r30, 0x01	; 1
    c07e:	e0 1b       	sub	r30, r16
    c080:	f1 0b       	sbc	r31, r17
    c082:	a7 e0       	ldi	r26, 0x07	; 7
    c084:	aa 2e       	mov	r10, r26
    c086:	b1 2c       	mov	r11, r1
    c088:	ac 0e       	add	r10, r28
    c08a:	bd 1e       	adc	r11, r29
    c08c:	ed 30       	cpi	r30, 0x0D	; 13
    c08e:	f1 05       	cpc	r31, r1
    c090:	58 f5       	brcc	.+86     	; 0xc0e8 <SetTotalizerData+0xa4>
	     sprintf_P(strPValue,PSTR("%s"),strValue);
    c092:	00 d0       	rcall	.+0      	; 0xc094 <SetTotalizerData+0x50>
    c094:	00 d0       	rcall	.+0      	; 0xc096 <SetTotalizerData+0x52>
    c096:	00 d0       	rcall	.+0      	; 0xc098 <SetTotalizerData+0x54>
    c098:	ed b7       	in	r30, 0x3d	; 61
    c09a:	fe b7       	in	r31, 0x3e	; 62
    c09c:	31 96       	adiw	r30, 0x01	; 1
    c09e:	ad b7       	in	r26, 0x3d	; 61
    c0a0:	be b7       	in	r27, 0x3e	; 62
    c0a2:	12 96       	adiw	r26, 0x02	; 2
    c0a4:	bc 92       	st	X, r11
    c0a6:	ae 92       	st	-X, r10
    c0a8:	11 97       	sbiw	r26, 0x01	; 1
    c0aa:	22 ee       	ldi	r18, 0xE2	; 226
    c0ac:	36 e0       	ldi	r19, 0x06	; 6
    c0ae:	33 83       	std	Z+3, r19	; 0x03
    c0b0:	22 83       	std	Z+2, r18	; 0x02
    c0b2:	04 83       	std	Z+4, r16	; 0x04
    c0b4:	95 83       	std	Z+5, r25	; 0x05
    c0b6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 if (strlen(strPValue)<12)AddZeroLead(strPValue,12);
    c0ba:	f5 01       	movw	r30, r10
    c0bc:	01 90       	ld	r0, Z+
    c0be:	00 20       	and	r0, r0
    c0c0:	e9 f7       	brne	.-6      	; 0xc0bc <SetTotalizerData+0x78>
    c0c2:	31 97       	sbiw	r30, 0x01	; 1
    c0c4:	ea 19       	sub	r30, r10
    c0c6:	fb 09       	sbc	r31, r11
    c0c8:	8d b7       	in	r24, 0x3d	; 61
    c0ca:	9e b7       	in	r25, 0x3e	; 62
    c0cc:	06 96       	adiw	r24, 0x06	; 6
    c0ce:	0f b6       	in	r0, 0x3f	; 63
    c0d0:	f8 94       	cli
    c0d2:	9e bf       	out	0x3e, r25	; 62
    c0d4:	0f be       	out	0x3f, r0	; 63
    c0d6:	8d bf       	out	0x3d, r24	; 61
    c0d8:	ec 30       	cpi	r30, 0x0C	; 12
    c0da:	f1 05       	cpc	r31, r1
    c0dc:	68 f4       	brcc	.+26     	; 0xc0f8 <SetTotalizerData+0xb4>
    c0de:	c5 01       	movw	r24, r10
    c0e0:	6c e0       	ldi	r22, 0x0C	; 12
    c0e2:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
    c0e6:	08 c0       	rjmp	.+16     	; 0xc0f8 <SetTotalizerData+0xb4>
	 }
	 else {//Lebih dari 8: 0123456789
	     Idx=strlen(strValue)-12;
    c0e8:	4e 2f       	mov	r20, r30
    c0ea:	4c 50       	subi	r20, 0x0C	; 12
	     StrPosCopy(strValue,strPValue,Idx,12);
    c0ec:	b5 01       	movw	r22, r10
    c0ee:	50 e0       	ldi	r21, 0x00	; 0
    c0f0:	2c e0       	ldi	r18, 0x0C	; 12
    c0f2:	30 e0       	ldi	r19, 0x00	; 0
    c0f4:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 }

	 iPumpAddr=(xPumpAddr&0x0F);
    c0f8:	2c 2d       	mov	r18, r12
    c0fa:	2f 70       	andi	r18, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    c0fc:	89 2d       	mov	r24, r9
    c0fe:	81 50       	subi	r24, 0x01	; 1
    c100:	86 30       	cpi	r24, 0x06	; 6
    c102:	08 f4       	brcc	.+2      	; 0xc106 <SetTotalizerData+0xc2>
    c104:	d8 2e       	mov	r13, r24
	     iGrade=xGradeAddr-1;
	 StrToRaw(strPValue,rawValue);
    c106:	ce 01       	movw	r24, r28
    c108:	07 96       	adiw	r24, 0x07	; 7
    c10a:	8e 01       	movw	r16, r28
    c10c:	0f 5f       	subi	r16, 0xFF	; 255
    c10e:	1f 4f       	sbci	r17, 0xFF	; 255
    c110:	b8 01       	movw	r22, r16
    c112:	2e 8b       	std	Y+22, r18	; 0x16
    c114:	0e 94 ec 5f 	call	0xbfd8	; 0xbfd8 <StrToRaw>

	 if (TType==TVOLUME)eeprom_write_block((const void*)&rawValue,(void*)&(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    c118:	2e 89       	ldd	r18, Y+22	; 0x16
    c11a:	ff 20       	and	r15, r15
    c11c:	d1 f4       	brne	.+52     	; 0xc152 <SetTotalizerData+0x10e>
    c11e:	64 e2       	ldi	r22, 0x24	; 36
    c120:	26 9f       	mul	r18, r22
    c122:	b0 01       	movw	r22, r0
    c124:	11 24       	eor	r1, r1
    c126:	ff 24       	eor	r15, r15
    c128:	20 e2       	ldi	r18, 0x20	; 32
    c12a:	31 e0       	ldi	r19, 0x01	; 1
    c12c:	e2 9e       	mul	r14, r18
    c12e:	c0 01       	movw	r24, r0
    c130:	e3 9e       	mul	r14, r19
    c132:	90 0d       	add	r25, r0
    c134:	f2 9e       	mul	r15, r18
    c136:	90 0d       	add	r25, r0
    c138:	11 24       	eor	r1, r1
    c13a:	68 0f       	add	r22, r24
    c13c:	79 1f       	adc	r23, r25
    c13e:	86 e0       	ldi	r24, 0x06	; 6
    c140:	ad 2d       	mov	r26, r13
    c142:	a8 9f       	mul	r26, r24
    c144:	c0 01       	movw	r24, r0
    c146:	11 24       	eor	r1, r1
    c148:	68 0f       	add	r22, r24
    c14a:	79 1f       	adc	r23, r25
    c14c:	6d 53       	subi	r22, 0x3D	; 61
    c14e:	7c 4f       	sbci	r23, 0xFC	; 252
    c150:	1c c0       	rjmp	.+56     	; 0xc18a <SetTotalizerData+0x146>
	 else 
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    c152:	bf 2d       	mov	r27, r15
    c154:	b1 30       	cpi	r27, 0x01	; 1
    c156:	f1 f4       	brne	.+60     	; 0xc194 <SetTotalizerData+0x150>
    c158:	64 e2       	ldi	r22, 0x24	; 36
    c15a:	26 9f       	mul	r18, r22
    c15c:	b0 01       	movw	r22, r0
    c15e:	11 24       	eor	r1, r1
    c160:	ff 24       	eor	r15, r15
    c162:	20 e2       	ldi	r18, 0x20	; 32
    c164:	31 e0       	ldi	r19, 0x01	; 1
    c166:	e2 9e       	mul	r14, r18
    c168:	c0 01       	movw	r24, r0
    c16a:	e3 9e       	mul	r14, r19
    c16c:	90 0d       	add	r25, r0
    c16e:	f2 9e       	mul	r15, r18
    c170:	90 0d       	add	r25, r0
    c172:	11 24       	eor	r1, r1
    c174:	68 0f       	add	r22, r24
    c176:	79 1f       	adc	r23, r25
    c178:	86 e0       	ldi	r24, 0x06	; 6
    c17a:	2d 2d       	mov	r18, r13
    c17c:	28 9f       	mul	r18, r24
    c17e:	c0 01       	movw	r24, r0
    c180:	11 24       	eor	r1, r1
    c182:	68 0f       	add	r22, r24
    c184:	79 1f       	adc	r23, r25
    c186:	6d 5f       	subi	r22, 0xFD	; 253
    c188:	79 4f       	sbci	r23, 0xF9	; 249
    c18a:	c8 01       	movw	r24, r16
    c18c:	46 e0       	ldi	r20, 0x06	; 6
    c18e:	50 e0       	ldi	r21, 0x00	; 0
    c190:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
}
    c194:	66 96       	adiw	r28, 0x16	; 22
    c196:	0f b6       	in	r0, 0x3f	; 63
    c198:	f8 94       	cli
    c19a:	de bf       	out	0x3e, r29	; 62
    c19c:	0f be       	out	0x3f, r0	; 63
    c19e:	cd bf       	out	0x3d, r28	; 61
    c1a0:	cf 91       	pop	r28
    c1a2:	df 91       	pop	r29
    c1a4:	1f 91       	pop	r17
    c1a6:	0f 91       	pop	r16
    c1a8:	ff 90       	pop	r15
    c1aa:	ef 90       	pop	r14
    c1ac:	df 90       	pop	r13
    c1ae:	cf 90       	pop	r12
    c1b0:	bf 90       	pop	r11
    c1b2:	af 90       	pop	r10
    c1b4:	9f 90       	pop	r9
    c1b6:	08 95       	ret

0000c1b8 <SaveConfigParameter>:
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
    c1b8:	7f 92       	push	r7
    c1ba:	8f 92       	push	r8
    c1bc:	9f 92       	push	r9
    c1be:	af 92       	push	r10
    c1c0:	bf 92       	push	r11
    c1c2:	cf 92       	push	r12
    c1c4:	df 92       	push	r13
    c1c6:	ef 92       	push	r14
    c1c8:	ff 92       	push	r15
    c1ca:	0f 93       	push	r16
    c1cc:	1f 93       	push	r17
    c1ce:	df 93       	push	r29
    c1d0:	cf 93       	push	r28
    c1d2:	cd b7       	in	r28, 0x3d	; 61
    c1d4:	de b7       	in	r29, 0x3e	; 62
    c1d6:	c7 54       	subi	r28, 0x47	; 71
    c1d8:	d0 40       	sbci	r29, 0x00	; 0
    c1da:	0f b6       	in	r0, 0x3f	; 63
    c1dc:	f8 94       	cli
    c1de:	de bf       	out	0x3e, r29	; 62
    c1e0:	0f be       	out	0x3f, r0	; 63
    c1e2:	cd bf       	out	0x3d, r28	; 61
char i,j;
char strEEPROM[50],xEEPROM;
unsigned int StrPos;
char strSend[20];
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
    c1e4:	00 d0       	rcall	.+0      	; 0xc1e6 <SaveConfigParameter+0x2e>
    c1e6:	00 d0       	rcall	.+0      	; 0xc1e8 <SaveConfigParameter+0x30>
    c1e8:	00 d0       	rcall	.+0      	; 0xc1ea <SaveConfigParameter+0x32>
    c1ea:	ed b7       	in	r30, 0x3d	; 61
    c1ec:	fe b7       	in	r31, 0x3e	; 62
    c1ee:	31 96       	adiw	r30, 0x01	; 1
    c1f0:	8e 01       	movw	r16, r28
    c1f2:	0f 5f       	subi	r16, 0xFF	; 255
    c1f4:	1f 4f       	sbci	r17, 0xFF	; 255
    c1f6:	ad b7       	in	r26, 0x3d	; 61
    c1f8:	be b7       	in	r27, 0x3e	; 62
    c1fa:	12 96       	adiw	r26, 0x02	; 2
    c1fc:	1c 93       	st	X, r17
    c1fe:	0e 93       	st	-X, r16
    c200:	11 97       	sbiw	r26, 0x01	; 1
    c202:	83 ec       	ldi	r24, 0xC3	; 195
    c204:	93 e2       	ldi	r25, 0x23	; 35
    c206:	93 83       	std	Z+3, r25	; 0x03
    c208:	82 83       	std	Z+2, r24	; 0x02
    c20a:	80 91 69 02 	lds	r24, 0x0269
    c20e:	90 91 6a 02 	lds	r25, 0x026A
    c212:	95 83       	std	Z+5, r25	; 0x05
    c214:	84 83       	std	Z+4, r24	; 0x04
    c216:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(1,1,strSend);
    c21a:	ed b7       	in	r30, 0x3d	; 61
    c21c:	fe b7       	in	r31, 0x3e	; 62
    c21e:	36 96       	adiw	r30, 0x06	; 6
    c220:	0f b6       	in	r0, 0x3f	; 63
    c222:	f8 94       	cli
    c224:	fe bf       	out	0x3e, r31	; 62
    c226:	0f be       	out	0x3f, r0	; 63
    c228:	ed bf       	out	0x3d, r30	; 61
    c22a:	81 e0       	ldi	r24, 0x01	; 1
    c22c:	61 e0       	ldi	r22, 0x01	; 1
    c22e:	a8 01       	movw	r20, r16
    c230:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
    c234:	81 e0       	ldi	r24, 0x01	; 1
    c236:	61 e0       	ldi	r22, 0x01	; 1
    c238:	4a eb       	ldi	r20, 0xBA	; 186
    c23a:	53 e2       	ldi	r21, 0x23	; 35
    c23c:	0e 94 3a a4 	call	0x14874	; 0x14874 <uart_printf>
    c240:	b7 e2       	ldi	r27, 0x27	; 39
    c242:	eb 2e       	mov	r14, r27
    c244:	b2 e0       	ldi	r27, 0x02	; 2
    c246:	fb 2e       	mov	r15, r27
    c248:	00 e0       	ldi	r16, 0x00	; 0
    c24a:	10 e0       	ldi	r17, 0x00	; 0
     //HeaderFooter
	 for(i=0;i<10;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c24c:	a5 e1       	ldi	r26, 0x15	; 21
    c24e:	ca 2e       	mov	r12, r26
    c250:	d1 2c       	mov	r13, r1
    c252:	cc 0e       	add	r12, r28
    c254:	dd 1e       	adc	r13, r29
    c256:	c6 01       	movw	r24, r12
    c258:	60 e0       	ldi	r22, 0x00	; 0
    c25a:	70 e0       	ldi	r23, 0x00	; 0
    c25c:	42 e3       	ldi	r20, 0x32	; 50
    c25e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(40*i)),40);
    c262:	8b ef       	ldi	r24, 0xFB	; 251
    c264:	99 e0       	ldi	r25, 0x09	; 9
    c266:	b6 01       	movw	r22, r12
    c268:	a8 01       	movw	r20, r16
    c26a:	28 e2       	ldi	r18, 0x28	; 40
    c26c:	30 e0       	ldi	r19, 0x00	; 0
    c26e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 strEEPROM[40]=0;
    c272:	1d ae       	std	Y+61, r1	; 0x3d
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
    c274:	c6 01       	movw	r24, r12
    c276:	b7 01       	movw	r22, r14
    c278:	49 e2       	ldi	r20, 0x29	; 41
    c27a:	50 e0       	ldi	r21, 0x00	; 0
    c27c:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    c280:	08 5d       	subi	r16, 0xD8	; 216
    c282:	1f 4f       	sbci	r17, 0xFF	; 255
    c284:	89 e2       	ldi	r24, 0x29	; 41
    c286:	90 e0       	ldi	r25, 0x00	; 0
    c288:	e8 0e       	add	r14, r24
    c28a:	f9 1e       	adc	r15, r25
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
    c28c:	91 e0       	ldi	r25, 0x01	; 1
    c28e:	00 39       	cpi	r16, 0x90	; 144
    c290:	19 07       	cpc	r17, r25
    c292:	09 f7       	brne	.-62     	; 0xc256 <SaveConfigParameter+0x9e>
    c294:	fb eb       	ldi	r31, 0xBB	; 187
    c296:	cf 2e       	mov	r12, r31
    c298:	f0 e0       	ldi	r31, 0x00	; 0
    c29a:	df 2e       	mov	r13, r31
    c29c:	e0 e9       	ldi	r30, 0x90	; 144
    c29e:	ee 2e       	mov	r14, r30
    c2a0:	e1 e0       	ldi	r30, 0x01	; 1
    c2a2:	fe 2e       	mov	r15, r30
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c2a4:	8e 01       	movw	r16, r28
    c2a6:	0b 5e       	subi	r16, 0xEB	; 235
    c2a8:	1f 4f       	sbci	r17, 0xFF	; 255
    c2aa:	c8 01       	movw	r24, r16
    c2ac:	60 e0       	ldi	r22, 0x00	; 0
    c2ae:	70 e0       	ldi	r23, 0x00	; 0
    c2b0:	42 e3       	ldi	r20, 0x32	; 50
    c2b2:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(12*i)),12);
    c2b6:	8b ef       	ldi	r24, 0xFB	; 251
    c2b8:	99 e0       	ldi	r25, 0x09	; 9
    c2ba:	b8 01       	movw	r22, r16
    c2bc:	a7 01       	movw	r20, r14
    c2be:	2c e0       	ldi	r18, 0x0C	; 12
    c2c0:	30 e0       	ldi	r19, 0x00	; 0
    c2c2:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLag(strEEPROM);
    c2c6:	c8 01       	movw	r24, r16
    c2c8:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		 strEEPROM[strlen(strEEPROM)]=0;
    c2cc:	f8 01       	movw	r30, r16
    c2ce:	01 90       	ld	r0, Z+
    c2d0:	00 20       	and	r0, r0
    c2d2:	e9 f7       	brne	.-6      	; 0xc2ce <SaveConfigParameter+0x116>
    c2d4:	31 97       	sbiw	r30, 0x01	; 1
    c2d6:	10 82       	st	Z, r1
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductName[i],sizeof(DefProductName[i]));
    c2d8:	c8 01       	movw	r24, r16
    c2da:	b6 01       	movw	r22, r12
    c2dc:	4d e0       	ldi	r20, 0x0D	; 13
    c2de:	50 e0       	ldi	r21, 0x00	; 0
    c2e0:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    c2e4:	ac e0       	ldi	r26, 0x0C	; 12
    c2e6:	b0 e0       	ldi	r27, 0x00	; 0
    c2e8:	ea 0e       	add	r14, r26
    c2ea:	fb 1e       	adc	r15, r27
    c2ec:	ed e0       	ldi	r30, 0x0D	; 13
    c2ee:	f0 e0       	ldi	r31, 0x00	; 0
    c2f0:	ce 0e       	add	r12, r30
    c2f2:	df 1e       	adc	r13, r31
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
    c2f4:	f8 ed       	ldi	r31, 0xD8	; 216
    c2f6:	ef 16       	cp	r14, r31
    c2f8:	f1 e0       	ldi	r31, 0x01	; 1
    c2fa:	ff 06       	cpc	r15, r31
    c2fc:	b1 f6       	brne	.-84     	; 0xc2aa <SaveConfigParameter+0xf2>
    c2fe:	75 e8       	ldi	r23, 0x85	; 133
    c300:	c7 2e       	mov	r12, r23
    c302:	70 e0       	ldi	r23, 0x00	; 0
    c304:	d7 2e       	mov	r13, r23
    c306:	08 ed       	ldi	r16, 0xD8	; 216
    c308:	11 e0       	ldi	r17, 0x01	; 1

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c30a:	65 e1       	ldi	r22, 0x15	; 21
    c30c:	e6 2e       	mov	r14, r22
    c30e:	f1 2c       	mov	r15, r1
    c310:	ec 0e       	add	r14, r28
    c312:	fd 1e       	adc	r15, r29
    c314:	c7 01       	movw	r24, r14
    c316:	60 e0       	ldi	r22, 0x00	; 0
    c318:	70 e0       	ldi	r23, 0x00	; 0
    c31a:	42 e3       	ldi	r20, 0x32	; 50
    c31c:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(5*i)),5);
    c320:	8b ef       	ldi	r24, 0xFB	; 251
    c322:	99 e0       	ldi	r25, 0x09	; 9
    c324:	b7 01       	movw	r22, r14
    c326:	a8 01       	movw	r20, r16
    c328:	25 e0       	ldi	r18, 0x05	; 5
    c32a:	30 e0       	ldi	r19, 0x00	; 0
    c32c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemSpaceLag(strEEPROM);
    c330:	c7 01       	movw	r24, r14
    c332:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
    c336:	c7 01       	movw	r24, r14
    c338:	b6 01       	movw	r22, r12
    c33a:	49 e0       	ldi	r20, 0x09	; 9
    c33c:	50 e0       	ldi	r21, 0x00	; 0
    c33e:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
    c342:	0b 5f       	subi	r16, 0xFB	; 251
    c344:	1f 4f       	sbci	r17, 0xFF	; 255
    c346:	89 e0       	ldi	r24, 0x09	; 9
    c348:	90 e0       	ldi	r25, 0x00	; 0
    c34a:	c8 0e       	add	r12, r24
    c34c:	d9 1e       	adc	r13, r25
		// uart_print(1,1,strEEPROM);

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
    c34e:	91 e0       	ldi	r25, 0x01	; 1
    c350:	06 3f       	cpi	r16, 0xF6	; 246
    c352:	19 07       	cpc	r17, r25
    c354:	f9 f6       	brne	.-66     	; 0xc314 <SaveConfigParameter+0x15c>
    c356:	56 ef       	ldi	r21, 0xF6	; 246
    c358:	c5 2e       	mov	r12, r21
    c35a:	51 e0       	ldi	r21, 0x01	; 1
    c35c:	d5 2e       	mov	r13, r21
    c35e:	00 e0       	ldi	r16, 0x00	; 0
    c360:	10 e0       	ldi	r17, 0x00	; 0

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c362:	45 e1       	ldi	r20, 0x15	; 21
    c364:	e4 2e       	mov	r14, r20
    c366:	f1 2c       	mov	r15, r1
    c368:	ec 0e       	add	r14, r28
    c36a:	fd 1e       	adc	r15, r29
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c36c:	5e 01       	movw	r10, r28
    c36e:	08 94       	sec
    c370:	a1 1c       	adc	r10, r1
    c372:	b1 1c       	adc	r11, r1
    c374:	37 eb       	ldi	r19, 0xB7	; 183
    c376:	83 2e       	mov	r8, r19
    c378:	33 e2       	ldi	r19, 0x23	; 35
    c37a:	93 2e       	mov	r9, r19

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c37c:	c7 01       	movw	r24, r14
    c37e:	60 e0       	ldi	r22, 0x00	; 0
    c380:	70 e0       	ldi	r23, 0x00	; 0
    c382:	42 e3       	ldi	r20, 0x32	; 50
    c384:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
    c388:	8b ef       	ldi	r24, 0xFB	; 251
    c38a:	99 e0       	ldi	r25, 0x09	; 9
    c38c:	b7 01       	movw	r22, r14
    c38e:	a6 01       	movw	r20, r12
    c390:	22 e0       	ldi	r18, 0x02	; 2
    c392:	30 e0       	ldi	r19, 0x00	; 0
    c394:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemZeroLead(strEEPROM);
    c398:	c7 01       	movw	r24, r14
    c39a:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
    c39e:	c7 01       	movw	r24, r14
    c3a0:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
    c3a4:	78 2e       	mov	r7, r24
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
    c3a6:	c8 01       	movw	r24, r16
    c3a8:	8b 5b       	subi	r24, 0xBB	; 187
    c3aa:	9f 4f       	sbci	r25, 0xFF	; 255
    c3ac:	67 2d       	mov	r22, r7
    c3ae:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c3b2:	00 d0       	rcall	.+0      	; 0xc3b4 <SaveConfigParameter+0x1fc>
    c3b4:	00 d0       	rcall	.+0      	; 0xc3b6 <SaveConfigParameter+0x1fe>
    c3b6:	00 d0       	rcall	.+0      	; 0xc3b8 <SaveConfigParameter+0x200>
    c3b8:	ed b7       	in	r30, 0x3d	; 61
    c3ba:	fe b7       	in	r31, 0x3e	; 62
    c3bc:	31 96       	adiw	r30, 0x01	; 1
    c3be:	ad b7       	in	r26, 0x3d	; 61
    c3c0:	be b7       	in	r27, 0x3e	; 62
    c3c2:	12 96       	adiw	r26, 0x02	; 2
    c3c4:	bc 92       	st	X, r11
    c3c6:	ae 92       	st	-X, r10
    c3c8:	11 97       	sbiw	r26, 0x01	; 1
    c3ca:	93 82       	std	Z+3, r9	; 0x03
    c3cc:	82 82       	std	Z+2, r8	; 0x02
    c3ce:	74 82       	std	Z+4, r7	; 0x04
    c3d0:	15 82       	std	Z+5, r1	; 0x05
    c3d2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    c3d6:	0f 5f       	subi	r16, 0xFF	; 255
    c3d8:	1f 4f       	sbci	r17, 0xFF	; 255
    c3da:	e2 e0       	ldi	r30, 0x02	; 2
    c3dc:	f0 e0       	ldi	r31, 0x00	; 0
    c3de:	ce 0e       	add	r12, r30
    c3e0:	df 1e       	adc	r13, r31
		// uart_print(1,1,strEEPROM);

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
    c3e2:	8d b7       	in	r24, 0x3d	; 61
    c3e4:	9e b7       	in	r25, 0x3e	; 62
    c3e6:	06 96       	adiw	r24, 0x06	; 6
    c3e8:	0f b6       	in	r0, 0x3f	; 63
    c3ea:	f8 94       	cli
    c3ec:	9e bf       	out	0x3e, r25	; 62
    c3ee:	0f be       	out	0x3f, r0	; 63
    c3f0:	8d bf       	out	0x3d, r24	; 61
    c3f2:	08 30       	cpi	r16, 0x08	; 8
    c3f4:	11 05       	cpc	r17, r1
    c3f6:	11 f6       	brne	.-124    	; 0xc37c <SaveConfigParameter+0x1c4>
    c3f8:	06 e0       	ldi	r16, 0x06	; 6
    c3fa:	12 e0       	ldi	r17, 0x02	; 2
    c3fc:	1b c0       	rjmp	.+54     	; 0xc434 <SaveConfigParameter+0x27c>
	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
              xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos+(i*6+j)));
    c3fe:	d6 01       	movw	r26, r12
    c400:	8d 91       	ld	r24, X+
    c402:	6d 01       	movw	r12, r26
    c404:	28 96       	adiw	r28, 0x08	; 8
    c406:	2f af       	std	Y+63, r18	; 0x3f
    c408:	28 97       	sbiw	r28, 0x08	; 8
    c40a:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    c40e:	68 2f       	mov	r22, r24
		      eeprom_write_byte(&DefNozzleMap[i][j],xEEPROM);
    c410:	c7 01       	movw	r24, r14
    c412:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
    c416:	28 96       	adiw	r28, 0x08	; 8
    c418:	2f ad       	ldd	r18, Y+63	; 0x3f
    c41a:	28 97       	sbiw	r28, 0x08	; 8
    c41c:	2f 5f       	subi	r18, 0xFF	; 255
    c41e:	08 94       	sec
    c420:	e1 1c       	adc	r14, r1
    c422:	f1 1c       	adc	r15, r1
    c424:	26 30       	cpi	r18, 0x06	; 6
    c426:	59 f7       	brne	.-42     	; 0xc3fe <SaveConfigParameter+0x246>
    c428:	0a 5f       	subi	r16, 0xFA	; 250
    c42a:	1f 4f       	sbci	r17, 0xFF	; 255
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
    c42c:	b2 e0       	ldi	r27, 0x02	; 2
    c42e:	06 33       	cpi	r16, 0x36	; 54
    c430:	1b 07       	cpc	r17, r27
    c432:	71 f0       	breq	.+28     	; 0xc450 <SaveConfigParameter+0x298>
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
    c434:	2b ef       	ldi	r18, 0xFB	; 251
    c436:	c2 2e       	mov	r12, r18
    c438:	29 e0       	ldi	r18, 0x09	; 9
    c43a:	d2 2e       	mov	r13, r18
    c43c:	c0 0e       	add	r12, r16
    c43e:	d1 1e       	adc	r13, r17
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
    c440:	9f e4       	ldi	r25, 0x4F	; 79
    c442:	e9 2e       	mov	r14, r25
    c444:	9e ef       	ldi	r25, 0xFE	; 254
    c446:	f9 2e       	mov	r15, r25
    c448:	e0 0e       	add	r14, r16
    c44a:	f1 1e       	adc	r15, r17
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
    c44c:	20 e0       	ldi	r18, 0x00	; 0
    c44e:	d7 cf       	rjmp	.-82     	; 0xc3fe <SaveConfigParameter+0x246>
       //       uart(1,1,Chr(xEEPROM));
		 }	 
	 }
	 //PrintNoMoney
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8);
	 xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos));
    c450:	80 91 31 0c 	lds	r24, 0x0C31
    c454:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
	 if (xEEPROM==0)xEEPROM=False;
    c458:	61 e0       	ldi	r22, 0x01	; 1
    c45a:	88 23       	and	r24, r24
    c45c:	09 f4       	brne	.+2      	; 0xc460 <SaveConfigParameter+0x2a8>
    c45e:	60 e0       	ldi	r22, 0x00	; 0
	 else xEEPROM=True;
	 eeprom_write_byte(&DefPrintMoney,xEEPROM);
    c460:	81 ec       	ldi	r24, 0xC1	; 193
    c462:	93 e0       	ldi	r25, 0x03	; 3
    c464:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
//	 uart(1,1,Chr(xEEPROM));

	 //TermID
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1;
     FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c468:	8e 01       	movw	r16, r28
    c46a:	0b 5e       	subi	r16, 0xEB	; 235
    c46c:	1f 4f       	sbci	r17, 0xFF	; 255
    c46e:	c8 01       	movw	r24, r16
    c470:	60 e0       	ldi	r22, 0x00	; 0
    c472:	70 e0       	ldi	r23, 0x00	; 0
    c474:	42 e3       	ldi	r20, 0x32	; 50
    c476:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 StrPosCopy(rcv_trans,strEEPROM,StrPos,2);
    c47a:	8b ef       	ldi	r24, 0xFB	; 251
    c47c:	99 e0       	ldi	r25, 0x09	; 9
    c47e:	b8 01       	movw	r22, r16
    c480:	47 e3       	ldi	r20, 0x37	; 55
    c482:	52 e0       	ldi	r21, 0x02	; 2
    c484:	22 e0       	ldi	r18, 0x02	; 2
    c486:	30 e0       	ldi	r19, 0x00	; 0
    c488:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 RemZeroLead(strEEPROM);
    c48c:	c8 01       	movw	r24, r16
    c48e:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
	 xEEPROM=atoi(strEEPROM);
    c492:	c8 01       	movw	r24, r16
    c494:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
    c498:	e8 2e       	mov	r14, r24
	 eeprom_write_byte(&DefIFT_ID,xEEPROM);
    c49a:	80 e0       	ldi	r24, 0x00	; 0
    c49c:	90 e0       	ldi	r25, 0x00	; 0
    c49e:	6e 2d       	mov	r22, r14
    c4a0:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c4a4:	00 d0       	rcall	.+0      	; 0xc4a6 <SaveConfigParameter+0x2ee>
    c4a6:	00 d0       	rcall	.+0      	; 0xc4a8 <SaveConfigParameter+0x2f0>
    c4a8:	00 d0       	rcall	.+0      	; 0xc4aa <SaveConfigParameter+0x2f2>
    c4aa:	ed b7       	in	r30, 0x3d	; 61
    c4ac:	fe b7       	in	r31, 0x3e	; 62
    c4ae:	31 96       	adiw	r30, 0x01	; 1
    c4b0:	5e 01       	movw	r10, r28
    c4b2:	08 94       	sec
    c4b4:	a1 1c       	adc	r10, r1
    c4b6:	b1 1c       	adc	r11, r1
    c4b8:	ad b7       	in	r26, 0x3d	; 61
    c4ba:	be b7       	in	r27, 0x3e	; 62
    c4bc:	12 96       	adiw	r26, 0x02	; 2
    c4be:	bc 92       	st	X, r11
    c4c0:	ae 92       	st	-X, r10
    c4c2:	11 97       	sbiw	r26, 0x01	; 1
    c4c4:	24 eb       	ldi	r18, 0xB4	; 180
    c4c6:	33 e2       	ldi	r19, 0x23	; 35
    c4c8:	33 83       	std	Z+3, r19	; 0x03
    c4ca:	22 83       	std	Z+2, r18	; 0x02
    c4cc:	e4 82       	std	Z+4, r14	; 0x04
    c4ce:	15 82       	std	Z+5, r1	; 0x05
    c4d0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    c4d4:	ed b7       	in	r30, 0x3d	; 61
    c4d6:	fe b7       	in	r31, 0x3e	; 62
    c4d8:	36 96       	adiw	r30, 0x06	; 6
    c4da:	0f b6       	in	r0, 0x3f	; 63
    c4dc:	f8 94       	cli
    c4de:	fe bf       	out	0x3e, r31	; 62
    c4e0:	0f be       	out	0x3f, r0	; 63
    c4e2:	ed bf       	out	0x3d, r30	; 61
    c4e4:	89 e3       	ldi	r24, 0x39	; 57
    c4e6:	88 2e       	mov	r8, r24
    c4e8:	82 e0       	ldi	r24, 0x02	; 2
    c4ea:	98 2e       	mov	r9, r24
    c4ec:	ee 24       	eor	r14, r14
    c4ee:	ff 24       	eor	r15, r15
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c4f0:	c0 2e       	mov	r12, r16
    c4f2:	01 2f       	mov	r16, r17
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c4f4:	1a 2d       	mov	r17, r10
    c4f6:	db 2c       	mov	r13, r11
    c4f8:	b1 eb       	ldi	r27, 0xB1	; 177
    c4fa:	ab 2e       	mov	r10, r27
    c4fc:	b3 e2       	ldi	r27, 0x23	; 35
    c4fe:	bb 2e       	mov	r11, r27
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c500:	8c 2d       	mov	r24, r12
    c502:	90 2f       	mov	r25, r16
    c504:	60 e0       	ldi	r22, 0x00	; 0
    c506:	70 e0       	ldi	r23, 0x00	; 0
    c508:	42 e3       	ldi	r20, 0x32	; 50
    c50a:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
    c50e:	8b ef       	ldi	r24, 0xFB	; 251
    c510:	99 e0       	ldi	r25, 0x09	; 9
    c512:	6c 2d       	mov	r22, r12
    c514:	70 2f       	mov	r23, r16
    c516:	a4 01       	movw	r20, r8
    c518:	22 e0       	ldi	r18, 0x02	; 2
    c51a:	30 e0       	ldi	r19, 0x00	; 0
    c51c:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 RemZeroLead(strEEPROM);
    c520:	8c 2d       	mov	r24, r12
    c522:	90 2f       	mov	r25, r16
    c524:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
    c528:	8c 2d       	mov	r24, r12
    c52a:	90 2f       	mov	r25, r16
    c52c:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
    c530:	78 2e       	mov	r7, r24
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
    c532:	c7 01       	movw	r24, r14
    c534:	83 5b       	subi	r24, 0xB3	; 179
    c536:	9f 4f       	sbci	r25, 0xFF	; 255
    c538:	67 2d       	mov	r22, r7
    c53a:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c53e:	00 d0       	rcall	.+0      	; 0xc540 <SaveConfigParameter+0x388>
    c540:	00 d0       	rcall	.+0      	; 0xc542 <SaveConfigParameter+0x38a>
    c542:	00 d0       	rcall	.+0      	; 0xc544 <SaveConfigParameter+0x38c>
    c544:	ed b7       	in	r30, 0x3d	; 61
    c546:	fe b7       	in	r31, 0x3e	; 62
    c548:	31 96       	adiw	r30, 0x01	; 1
    c54a:	ad b7       	in	r26, 0x3d	; 61
    c54c:	be b7       	in	r27, 0x3e	; 62
    c54e:	11 96       	adiw	r26, 0x01	; 1
    c550:	1c 93       	st	X, r17
    c552:	11 97       	sbiw	r26, 0x01	; 1
    c554:	12 96       	adiw	r26, 0x02	; 2
    c556:	dc 92       	st	X, r13
    c558:	b3 82       	std	Z+3, r11	; 0x03
    c55a:	a2 82       	std	Z+2, r10	; 0x02
    c55c:	74 82       	std	Z+4, r7	; 0x04
    c55e:	15 82       	std	Z+5, r1	; 0x05
    c560:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    c564:	08 94       	sec
    c566:	e1 1c       	adc	r14, r1
    c568:	f1 1c       	adc	r15, r1
    c56a:	e2 e0       	ldi	r30, 0x02	; 2
    c56c:	f0 e0       	ldi	r31, 0x00	; 0
    c56e:	8e 0e       	add	r8, r30
    c570:	9f 1e       	adc	r9, r31
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
    c572:	8d b7       	in	r24, 0x3d	; 61
    c574:	9e b7       	in	r25, 0x3e	; 62
    c576:	06 96       	adiw	r24, 0x06	; 6
    c578:	0f b6       	in	r0, 0x3f	; 63
    c57a:	f8 94       	cli
    c57c:	9e bf       	out	0x3e, r25	; 62
    c57e:	0f be       	out	0x3f, r0	; 63
    c580:	8d bf       	out	0x3d, r24	; 61
    c582:	98 e0       	ldi	r25, 0x08	; 8
    c584:	e9 16       	cp	r14, r25
    c586:	f1 04       	cpc	r15, r1
    c588:	09 f0       	breq	.+2      	; 0xc58c <SaveConfigParameter+0x3d4>
    c58a:	ba cf       	rjmp	.-140    	; 0xc500 <SaveConfigParameter+0x348>
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//		 uart_print(1,1,strSend); 
	 }    
	 uart_printf(1,1,PSTR("<OK>")); 
    c58c:	81 e0       	ldi	r24, 0x01	; 1
    c58e:	61 e0       	ldi	r22, 0x01	; 1
    c590:	4c ea       	ldi	r20, 0xAC	; 172
    c592:	53 e2       	ldi	r21, 0x23	; 35
    c594:	0e 94 3a a4 	call	0x14874	; 0x14874 <uart_printf>
}
    c598:	c9 5b       	subi	r28, 0xB9	; 185
    c59a:	df 4f       	sbci	r29, 0xFF	; 255
    c59c:	0f b6       	in	r0, 0x3f	; 63
    c59e:	f8 94       	cli
    c5a0:	de bf       	out	0x3e, r29	; 62
    c5a2:	0f be       	out	0x3f, r0	; 63
    c5a4:	cd bf       	out	0x3d, r28	; 61
    c5a6:	cf 91       	pop	r28
    c5a8:	df 91       	pop	r29
    c5aa:	1f 91       	pop	r17
    c5ac:	0f 91       	pop	r16
    c5ae:	ff 90       	pop	r15
    c5b0:	ef 90       	pop	r14
    c5b2:	df 90       	pop	r13
    c5b4:	cf 90       	pop	r12
    c5b6:	bf 90       	pop	r11
    c5b8:	af 90       	pop	r10
    c5ba:	9f 90       	pop	r9
    c5bc:	8f 90       	pop	r8
    c5be:	7f 90       	pop	r7
    c5c0:	08 95       	ret

0000c5c2 <systemConfigProtocol>:



void systemConfigProtocol(){
     static char stConfigProtocol=cpWaitSend;
	 switch(stConfigProtocol){
    c5c2:	80 91 7e 03 	lds	r24, 0x037E
    c5c6:	81 30       	cpi	r24, 0x01	; 1
    c5c8:	c1 f0       	breq	.+48     	; 0xc5fa <systemConfigProtocol+0x38>
    c5ca:	81 30       	cpi	r24, 0x01	; 1
    c5cc:	18 f0       	brcs	.+6      	; 0xc5d4 <systemConfigProtocol+0x12>
    c5ce:	82 30       	cpi	r24, 0x02	; 2
    c5d0:	e9 f4       	brne	.+58     	; 0xc60c <systemConfigProtocol+0x4a>
    c5d2:	18 c0       	rjmp	.+48     	; 0xc604 <systemConfigProtocol+0x42>
	 case cpWaitSend:
	      switch(ConfigCommand){
    c5d4:	80 91 8e 02 	lds	r24, 0x028E
    c5d8:	81 30       	cpi	r24, 0x01	; 1
    c5da:	31 f0       	breq	.+12     	; 0xc5e8 <systemConfigProtocol+0x26>
    c5dc:	82 30       	cpi	r24, 0x02	; 2
    c5de:	51 f4       	brne	.+20     	; 0xc5f4 <systemConfigProtocol+0x32>
		  case CC_SEND_CONFIG:
		       ConfigCommand=CC_NONE;
    c5e0:	10 92 8e 02 	sts	0x028E, r1
			   stConfigProtocol=cpSendingParameter;
    c5e4:	81 e0       	ldi	r24, 0x01	; 1
    c5e6:	03 c0       	rjmp	.+6      	; 0xc5ee <systemConfigProtocol+0x2c>
		       break;
		  case CC_SAVE_CONFIG:
		       ConfigCommand=CC_NONE;
    c5e8:	10 92 8e 02 	sts	0x028E, r1
			   stConfigProtocol=cpSavingParameter;
    c5ec:	82 e0       	ldi	r24, 0x02	; 2
    c5ee:	80 93 7e 03 	sts	0x037E, r24
		       break;
    c5f2:	08 95       	ret
          default:
		       ConfigCommand=CC_NONE;
    c5f4:	10 92 8e 02 	sts	0x028E, r1
		       break;
    c5f8:	08 95       	ret
		  }
	      break;
     case cpSendingParameter:
	      SendConfigParamater();
    c5fa:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <SendConfigParamater>
          stConfigProtocol=cpWaitSend;
    c5fe:	10 92 7e 03 	sts	0x037E, r1
	      break;
    c602:	08 95       	ret
     case cpSavingParameter:
          SaveConfigParameter();
    c604:	0e 94 dc 60 	call	0xc1b8	; 0xc1b8 <SaveConfigParameter>
          stConfigProtocol=cpWaitSend;
    c608:	10 92 7e 03 	sts	0x037E, r1
    c60c:	08 95       	ret

0000c60e <IsMoreThan>:
	    Result=c-'0';
	 }
	return Result;
}

char IsMoreThan(char *strA, char *strB){
    c60e:	cf 92       	push	r12
    c610:	df 92       	push	r13
    c612:	ef 92       	push	r14
    c614:	ff 92       	push	r15
    c616:	0f 93       	push	r16
    c618:	1f 93       	push	r17
    c61a:	cf 93       	push	r28
    c61c:	df 93       	push	r29
    c61e:	f8 2e       	mov	r15, r24
     char i,LengthA,LengthB,Result=False;
	 char strSend[20];	 
     //Check Length
	 LengthA=strlen(strA);
    c620:	e8 2f       	mov	r30, r24
    c622:	f9 2f       	mov	r31, r25
    c624:	df 01       	movw	r26, r30
    c626:	0d 90       	ld	r0, X+
    c628:	00 20       	and	r0, r0
    c62a:	e9 f7       	brne	.-6      	; 0xc626 <IsMoreThan+0x18>
    c62c:	11 97       	sbiw	r26, 0x01	; 1
    c62e:	ea 2e       	mov	r14, r26
    c630:	e8 1a       	sub	r14, r24
	 LengthB=strlen(strB);
    c632:	db 01       	movw	r26, r22
    c634:	0d 90       	ld	r0, X+
    c636:	00 20       	and	r0, r0
    c638:	e9 f7       	brne	.-6      	; 0xc634 <IsMoreThan+0x26>
    c63a:	11 97       	sbiw	r26, 0x01	; 1
    c63c:	a6 1b       	sub	r26, r22
	 Result=False;
	 if (LengthA>LengthB)Result=True;
    c63e:	ae 15       	cp	r26, r14
    c640:	e0 f0       	brcs	.+56     	; 0xc67a <IsMoreThan+0x6c>
	 else 
	 if (LengthA==LengthB){          //456755 
    c642:	ea 16       	cp	r14, r26
    c644:	e1 f4       	brne	.+56     	; 0xc67e <IsMoreThan+0x70>
    c646:	06 2f       	mov	r16, r22
    c648:	17 2f       	mov	r17, r23
    c64a:	cf 2c       	mov	r12, r15
    c64c:	e6 01       	movw	r28, r12
    c64e:	6e 01       	movw	r12, r28
    c650:	d9 2e       	mov	r13, r25
    c652:	e6 01       	movw	r28, r12
    c654:	0d c0       	rjmp	.+26     	; 0xc670 <IsMoreThan+0x62>
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
    c656:	89 91       	ld	r24, Y+
    c658:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    c65c:	d8 2e       	mov	r13, r24
    c65e:	f8 01       	movw	r30, r16
    c660:	81 91       	ld	r24, Z+
    c662:	8f 01       	movw	r16, r30
    c664:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    c668:	8d 15       	cp	r24, r13
    c66a:	38 f0       	brcs	.+14     	; 0xc67a <IsMoreThan+0x6c>
			     Result=True;
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
    c66c:	d8 16       	cp	r13, r24
    c66e:	38 f0       	brcs	.+14     	; 0xc67e <IsMoreThan+0x70>
	 LengthB=strlen(strB);
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
    c670:	6e 01       	movw	r12, r28
    c672:	cf 18       	sub	r12, r15
    c674:	ce 14       	cp	r12, r14
    c676:	78 f3       	brcs	.-34     	; 0xc656 <IsMoreThan+0x48>
    c678:	02 c0       	rjmp	.+4      	; 0xc67e <IsMoreThan+0x70>
		     if (Ord(strA[i])>Ord(strB[i])){
			     Result=True;
    c67a:	81 e0       	ldi	r24, 0x01	; 1
    c67c:	01 c0       	rjmp	.+2      	; 0xc680 <IsMoreThan+0x72>
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
			     Result=False;
    c67e:	80 e0       	ldi	r24, 0x00	; 0
				 break;
			 }			 		 
		 }
	 }
  return Result;
}
    c680:	df 91       	pop	r29
    c682:	cf 91       	pop	r28
    c684:	1f 91       	pop	r17
    c686:	0f 91       	pop	r16
    c688:	ff 90       	pop	r15
    c68a:	ef 90       	pop	r14
    c68c:	df 90       	pop	r13
    c68e:	cf 90       	pop	r12
    c690:	08 95       	ret

0000c692 <FTestCalculation>:
		  else
		  if (KeyChar=='*')stTestCalc=tcInitData;
	      break;	 
	 }
*/
}
    c692:	08 95       	ret

0000c694 <GetMinusPos>:

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    c694:	fc 01       	movw	r30, r24
    c696:	01 90       	ld	r0, Z+
    c698:	00 20       	and	r0, r0
    c69a:	e9 f7       	brne	.-6      	; 0xc696 <GetMinusPos+0x2>
    c69c:	31 97       	sbiw	r30, 0x01	; 1
    c69e:	e8 1b       	sub	r30, r24
    c6a0:	f9 0b       	sbc	r31, r25
    c6a2:	40 e0       	ldi	r20, 0x00	; 0
    c6a4:	09 c0       	rjmp	.+18     	; 0xc6b8 <GetMinusPos+0x24>
	     if (strNumber[i]=='-'){
    c6a6:	28 0f       	add	r18, r24
    c6a8:	39 1f       	adc	r19, r25
    c6aa:	d9 01       	movw	r26, r18
    c6ac:	2c 91       	ld	r18, X
    c6ae:	4f 5f       	subi	r20, 0xFF	; 255
    c6b0:	2d 32       	cpi	r18, 0x2D	; 45
    c6b2:	11 f4       	brne	.+4      	; 0xc6b8 <GetMinusPos+0x24>
		     Result=i+1;
    c6b4:	84 2f       	mov	r24, r20
			 break;
    c6b6:	08 95       	ret
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    c6b8:	24 2f       	mov	r18, r20
    c6ba:	30 e0       	ldi	r19, 0x00	; 0
    c6bc:	2e 17       	cp	r18, r30
    c6be:	3f 07       	cpc	r19, r31
    c6c0:	90 f3       	brcs	.-28     	; 0xc6a6 <GetMinusPos+0x12>
*/
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
    c6c2:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
  return Result;     
}
    c6c4:	08 95       	ret

0000c6c6 <IsMinus>:

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
	 if (GetMinusPos(strNumber)>0){
    c6c6:	0e 94 4a 63 	call	0xc694	; 0xc694 <GetMinusPos>
  return Result;     
}

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
    c6ca:	91 e0       	ldi	r25, 0x01	; 1
    c6cc:	88 23       	and	r24, r24
    c6ce:	09 f4       	brne	.+2      	; 0xc6d2 <IsMinus+0xc>
    c6d0:	90 e0       	ldi	r25, 0x00	; 0
	 if (GetMinusPos(strNumber)>0){
	     Result=True;
	 }     
  return Result;
}
    c6d2:	89 2f       	mov	r24, r25
    c6d4:	08 95       	ret

0000c6d6 <RemoveMinus>:

void RemoveMinus(char *strNumber){
    c6d6:	0f 93       	push	r16
    c6d8:	1f 93       	push	r17
    c6da:	8c 01       	movw	r16, r24
     char MinPos,Length;

     if (IsMinus(strNumber)==True){
    c6dc:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <IsMinus>
    c6e0:	81 30       	cpi	r24, 0x01	; 1
    c6e2:	99 f4       	brne	.+38     	; 0xc70a <RemoveMinus+0x34>
	     MinPos=GetMinusPos(strNumber);
    c6e4:	c8 01       	movw	r24, r16
    c6e6:	0e 94 4a 63 	call	0xc694	; 0xc694 <GetMinusPos>
    c6ea:	48 2f       	mov	r20, r24
		 Length=strlen(strNumber);
    c6ec:	d8 01       	movw	r26, r16
    c6ee:	0d 90       	ld	r0, X+
    c6f0:	00 20       	and	r0, r0
    c6f2:	e9 f7       	brne	.-6      	; 0xc6ee <RemoveMinus+0x18>
    c6f4:	11 97       	sbiw	r26, 0x01	; 1
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
    c6f6:	a0 1b       	sub	r26, r16
    c6f8:	2a 2f       	mov	r18, r26
    c6fa:	30 e0       	ldi	r19, 0x00	; 0
    c6fc:	28 1b       	sub	r18, r24
    c6fe:	31 09       	sbc	r19, r1
    c700:	c8 01       	movw	r24, r16
    c702:	b8 01       	movw	r22, r16
    c704:	50 e0       	ldi	r21, 0x00	; 0
    c706:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 }
}
    c70a:	1f 91       	pop	r17
    c70c:	0f 91       	pop	r16
    c70e:	08 95       	ret

0000c710 <CalcSegmen>:
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    c710:	6f 92       	push	r6
    c712:	7f 92       	push	r7
    c714:	8f 92       	push	r8
    c716:	9f 92       	push	r9
    c718:	af 92       	push	r10
    c71a:	bf 92       	push	r11
    c71c:	cf 92       	push	r12
    c71e:	df 92       	push	r13
    c720:	ef 92       	push	r14
    c722:	ff 92       	push	r15
    c724:	0f 93       	push	r16
    c726:	1f 93       	push	r17
    c728:	df 93       	push	r29
    c72a:	cf 93       	push	r28
    c72c:	cd b7       	in	r28, 0x3d	; 61
    c72e:	de b7       	in	r29, 0x3e	; 62
    c730:	64 97       	sbiw	r28, 0x14	; 20
    c732:	0f b6       	in	r0, 0x3f	; 63
    c734:	f8 94       	cli
    c736:	de bf       	out	0x3e, r29	; 62
    c738:	0f be       	out	0x3f, r0	; 63
    c73a:	cd bf       	out	0x3d, r28	; 61
    c73c:	9c 01       	movw	r18, r24
       --------
         61725
	 */
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
    c73e:	80 e0       	ldi	r24, 0x00	; 0
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    c740:	bb 24       	eor	r11, r11
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    c742:	66 2e       	mov	r6, r22
    c744:	77 24       	eor	r7, r7
    c746:	60 ed       	ldi	r22, 0xD0	; 208
    c748:	7f ef       	ldi	r23, 0xFF	; 255
    c74a:	66 0e       	add	r6, r22
    c74c:	77 1e       	adc	r7, r23
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    c74e:	6a e0       	ldi	r22, 0x0A	; 10
    c750:	a6 2e       	mov	r10, r22
	     tmpResult[i]='0'+xRes;	 
    c752:	8e 01       	movw	r16, r28
    c754:	0f 5f       	subi	r16, 0xFF	; 255
    c756:	1f 4f       	sbci	r17, 0xFF	; 255
		 tmpResult[i+1]=0;
    c758:	92 e0       	ldi	r25, 0x02	; 2
    c75a:	89 2e       	mov	r8, r25
    c75c:	91 2c       	mov	r9, r1
    c75e:	8c 0e       	add	r8, r28
    c760:	9d 1e       	adc	r9, r29
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    c762:	1c c0       	rjmp	.+56     	; 0xc79c <CalcSegmen+0x8c>
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    c764:	08 94       	sec
    c766:	e1 08       	sbc	r14, r1
    c768:	f1 08       	sbc	r15, r1
    c76a:	ee 1a       	sub	r14, r30
    c76c:	ff 0a       	sbc	r15, r31
    c76e:	e2 0e       	add	r14, r18
    c770:	f3 1e       	adc	r15, r19
    c772:	d7 01       	movw	r26, r14
    c774:	9c 91       	ld	r25, X
    c776:	90 53       	subi	r25, 0x30	; 48
    c778:	96 9d       	mul	r25, r6
    c77a:	90 2d       	mov	r25, r0
    c77c:	11 24       	eor	r1, r1
    c77e:	98 0f       	add	r25, r24
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    c780:	89 2f       	mov	r24, r25
    c782:	6a 2d       	mov	r22, r10
    c784:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
	     tmpResult[i]='0'+xRes;	 
    c788:	78 01       	movw	r14, r16
    c78a:	ee 0e       	add	r14, r30
    c78c:	ff 1e       	adc	r15, r31
    c78e:	90 5d       	subi	r25, 0xD0	; 208
    c790:	d7 01       	movw	r26, r14
    c792:	9c 93       	st	X, r25
		 tmpResult[i+1]=0;
    c794:	e8 0d       	add	r30, r8
    c796:	f9 1d       	adc	r31, r9
    c798:	10 82       	st	Z, r1
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    c79a:	b3 94       	inc	r11
    c79c:	eb 2d       	mov	r30, r11
    c79e:	f0 e0       	ldi	r31, 0x00	; 0
    c7a0:	d9 01       	movw	r26, r18
    c7a2:	0d 90       	ld	r0, X+
    c7a4:	00 20       	and	r0, r0
    c7a6:	e9 f7       	brne	.-6      	; 0xc7a2 <CalcSegmen+0x92>
    c7a8:	7d 01       	movw	r14, r26
    c7aa:	08 94       	sec
    c7ac:	e1 08       	sbc	r14, r1
    c7ae:	f1 08       	sbc	r15, r1
    c7b0:	e2 1a       	sub	r14, r18
    c7b2:	f3 0a       	sbc	r15, r19
    c7b4:	ee 15       	cp	r30, r14
    c7b6:	ff 05       	cpc	r31, r15
    c7b8:	a8 f2       	brcs	.-86     	; 0xc764 <CalcSegmen+0x54>
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
		 tmpResult[i+1]=0;
	 }
	 if (xResNext>0){
    c7ba:	88 23       	and	r24, r24
    c7bc:	91 f0       	breq	.+36     	; 0xc7e2 <CalcSegmen+0xd2>
	     lenR=strlen(tmpResult);
    c7be:	fe 01       	movw	r30, r28
    c7c0:	31 96       	adiw	r30, 0x01	; 1
    c7c2:	df 01       	movw	r26, r30
    c7c4:	0d 90       	ld	r0, X+
    c7c6:	00 20       	and	r0, r0
    c7c8:	e9 f7       	brne	.-6      	; 0xc7c4 <CalcSegmen+0xb4>
    c7ca:	11 97       	sbiw	r26, 0x01	; 1
	     tmpResult[lenR]='0'+xResNext;
    c7cc:	ae 1b       	sub	r26, r30
    c7ce:	b0 e0       	ldi	r27, 0x00	; 0
    c7d0:	ea 0f       	add	r30, r26
    c7d2:	fb 1f       	adc	r31, r27
    c7d4:	80 5d       	subi	r24, 0xD0	; 208
    c7d6:	80 83       	st	Z, r24
		 tmpResult[lenR+1]=0;	 
    c7d8:	ac 0f       	add	r26, r28
    c7da:	bd 1f       	adc	r27, r29
    c7dc:	12 96       	adiw	r26, 0x02	; 2
    c7de:	1c 92       	st	X, r1
    c7e0:	12 97       	sbiw	r26, 0x02	; 2
	 }
	 lenR=strlen(tmpResult);
    c7e2:	8e 01       	movw	r16, r28
    c7e4:	0f 5f       	subi	r16, 0xFF	; 255
    c7e6:	1f 4f       	sbci	r17, 0xFF	; 255
    c7e8:	f8 01       	movw	r30, r16
    c7ea:	01 90       	ld	r0, Z+
    c7ec:	00 20       	and	r0, r0
    c7ee:	e9 f7       	brne	.-6      	; 0xc7ea <CalcSegmen+0xda>
    c7f0:	31 97       	sbiw	r30, 0x01	; 1
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    c7f2:	e0 1b       	sub	r30, r16
    c7f4:	8e 2f       	mov	r24, r30
    c7f6:	90 e0       	ldi	r25, 0x00	; 0
    c7f8:	f8 01       	movw	r30, r16
    c7fa:	e8 0f       	add	r30, r24
    c7fc:	f9 1f       	adc	r31, r25
    c7fe:	9a 01       	movw	r18, r20
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    c800:	05 c0       	rjmp	.+10     	; 0xc80c <CalcSegmen+0xfc>
    c802:	31 97       	sbiw	r30, 0x01	; 1
	     strResult[i]=tmpResult[lenR-1-i];
    c804:	60 81       	ld	r22, Z
    c806:	d9 01       	movw	r26, r18
    c808:	6d 93       	st	X+, r22
    c80a:	9d 01       	movw	r18, r26
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    c80c:	e0 17       	cp	r30, r16
    c80e:	f1 07       	cpc	r31, r17
    c810:	c1 f7       	brne	.-16     	; 0xc802 <CalcSegmen+0xf2>
	     strResult[i]=tmpResult[lenR-1-i];
	 }
	 strResult[lenR]=0;
    c812:	48 0f       	add	r20, r24
    c814:	59 1f       	adc	r21, r25
    c816:	fa 01       	movw	r30, r20
    c818:	10 82       	st	Z, r1
}
    c81a:	64 96       	adiw	r28, 0x14	; 20
    c81c:	0f b6       	in	r0, 0x3f	; 63
    c81e:	f8 94       	cli
    c820:	de bf       	out	0x3e, r29	; 62
    c822:	0f be       	out	0x3f, r0	; 63
    c824:	cd bf       	out	0x3d, r28	; 61
    c826:	cf 91       	pop	r28
    c828:	df 91       	pop	r29
    c82a:	1f 91       	pop	r17
    c82c:	0f 91       	pop	r16
    c82e:	ff 90       	pop	r15
    c830:	ef 90       	pop	r14
    c832:	df 90       	pop	r13
    c834:	cf 90       	pop	r12
    c836:	bf 90       	pop	r11
    c838:	af 90       	pop	r10
    c83a:	9f 90       	pop	r9
    c83c:	8f 90       	pop	r8
    c83e:	7f 90       	pop	r7
    c840:	6f 90       	pop	r6
    c842:	08 95       	ret

0000c844 <CalcMultiply>:


void CalcMultiply(char *strA,char *strB,char *strC){
    c844:	4f 92       	push	r4
    c846:	5f 92       	push	r5
    c848:	6f 92       	push	r6
    c84a:	7f 92       	push	r7
    c84c:	8f 92       	push	r8
    c84e:	9f 92       	push	r9
    c850:	af 92       	push	r10
    c852:	bf 92       	push	r11
    c854:	cf 92       	push	r12
    c856:	df 92       	push	r13
    c858:	ef 92       	push	r14
    c85a:	ff 92       	push	r15
    c85c:	0f 93       	push	r16
    c85e:	1f 93       	push	r17
    c860:	df 93       	push	r29
    c862:	cf 93       	push	r28
    c864:	cd b7       	in	r28, 0x3d	; 61
    c866:	de b7       	in	r29, 0x3e	; 62
    c868:	a8 97       	sbiw	r28, 0x28	; 40
    c86a:	0f b6       	in	r0, 0x3f	; 63
    c86c:	f8 94       	cli
    c86e:	de bf       	out	0x3e, r29	; 62
    c870:	0f be       	out	0x3f, r0	; 63
    c872:	cd bf       	out	0x3d, r28	; 61
    c874:	3c 01       	movw	r6, r24
    c876:	6b 01       	movw	r12, r22
    c878:	2a 01       	movw	r4, r20
	 
	 */
	 char i,lenB;
	 char prevSeg[20],currSeg[20];

     RemZeroLead(strA);
    c87a:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
     RemZeroLead(strB);
    c87e:	c6 01       	movw	r24, r12
    c880:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
	 lenB=strlen(strB);
    c884:	d6 01       	movw	r26, r12
    c886:	0d 90       	ld	r0, X+
    c888:	00 20       	and	r0, r0
    c88a:	e9 f7       	brne	.-6      	; 0xc886 <CalcMultiply+0x42>
    c88c:	11 97       	sbiw	r26, 0x01	; 1
    c88e:	8a 2e       	mov	r8, r26
    c890:	8c 18       	sub	r8, r12
	 sprintf_P(prevSeg,PSTR("0"));
    c892:	00 d0       	rcall	.+0      	; 0xc894 <CalcMultiply+0x50>
    c894:	00 d0       	rcall	.+0      	; 0xc896 <CalcMultiply+0x52>
    c896:	7e 01       	movw	r14, r28
    c898:	08 94       	sec
    c89a:	e1 1c       	adc	r14, r1
    c89c:	f1 1c       	adc	r15, r1
    c89e:	ad b7       	in	r26, 0x3d	; 61
    c8a0:	be b7       	in	r27, 0x3e	; 62
    c8a2:	12 96       	adiw	r26, 0x02	; 2
    c8a4:	fc 92       	st	X, r15
    c8a6:	ee 92       	st	-X, r14
    c8a8:	11 97       	sbiw	r26, 0x01	; 1
    c8aa:	81 ed       	ldi	r24, 0xD1	; 209
    c8ac:	96 e0       	ldi	r25, 0x06	; 6
    c8ae:	14 96       	adiw	r26, 0x04	; 4
    c8b0:	9c 93       	st	X, r25
    c8b2:	8e 93       	st	-X, r24
    c8b4:	13 97       	sbiw	r26, 0x03	; 3
    c8b6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 sprintf_P(currSeg,PSTR("0"));
    c8ba:	8e 01       	movw	r16, r28
    c8bc:	0b 5e       	subi	r16, 0xEB	; 235
    c8be:	1f 4f       	sbci	r17, 0xFF	; 255
    c8c0:	ed b7       	in	r30, 0x3d	; 61
    c8c2:	fe b7       	in	r31, 0x3e	; 62
    c8c4:	12 83       	std	Z+2, r17	; 0x02
    c8c6:	01 83       	std	Z+1, r16	; 0x01
    c8c8:	8f ec       	ldi	r24, 0xCF	; 207
    c8ca:	96 e0       	ldi	r25, 0x06	; 6
    c8cc:	94 83       	std	Z+4, r25	; 0x04
    c8ce:	83 83       	std	Z+3, r24	; 0x03
    c8d0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

	 for(i=0;i<strlen(strB);i++){
    c8d4:	0f 90       	pop	r0
    c8d6:	0f 90       	pop	r0
    c8d8:	0f 90       	pop	r0
    c8da:	0f 90       	pop	r0
    c8dc:	bb 24       	eor	r11, r11
    c8de:	ae 2c       	mov	r10, r14
    c8e0:	9f 2c       	mov	r9, r15
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    c8e2:	e8 2c       	mov	r14, r8
    c8e4:	ff 24       	eor	r15, r15
    c8e6:	08 94       	sec
    c8e8:	e1 08       	sbc	r14, r1
    c8ea:	f1 08       	sbc	r15, r1
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    c8ec:	1f c0       	rjmp	.+62     	; 0xc92c <CalcMultiply+0xe8>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    c8ee:	f7 01       	movw	r30, r14
    c8f0:	e8 1b       	sub	r30, r24
    c8f2:	f9 0b       	sbc	r31, r25
    c8f4:	ec 0d       	add	r30, r12
    c8f6:	fd 1d       	adc	r31, r13
    c8f8:	c3 01       	movw	r24, r6
    c8fa:	60 81       	ld	r22, Z
    c8fc:	a8 01       	movw	r20, r16
    c8fe:	0e 94 88 63 	call	0xc710	; 0xc710 <CalcSegmen>
         AddZeroLag(currSeg,strlen(currSeg)+i);
    c902:	f8 01       	movw	r30, r16
    c904:	01 90       	ld	r0, Z+
    c906:	00 20       	and	r0, r0
    c908:	e9 f7       	brne	.-6      	; 0xc904 <CalcMultiply+0xc0>
    c90a:	31 97       	sbiw	r30, 0x01	; 1
    c90c:	e0 1b       	sub	r30, r16
    c90e:	f1 0b       	sbc	r31, r17
    c910:	6b 2d       	mov	r22, r11
    c912:	6e 0f       	add	r22, r30
    c914:	c8 01       	movw	r24, r16
    c916:	0e 94 48 2a 	call	0x5490	; 0x5490 <AddZeroLag>
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
    c91a:	81 e0       	ldi	r24, 0x01	; 1
    c91c:	6a 2d       	mov	r22, r10
    c91e:	79 2d       	mov	r23, r9
    c920:	a8 01       	movw	r20, r16
    c922:	2a 2d       	mov	r18, r10
    c924:	39 2d       	mov	r19, r9
    c926:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    c92a:	b3 94       	inc	r11
    c92c:	f6 01       	movw	r30, r12
    c92e:	01 90       	ld	r0, Z+
    c930:	00 20       	and	r0, r0
    c932:	e9 f7       	brne	.-6      	; 0xc92e <CalcMultiply+0xea>
    c934:	31 97       	sbiw	r30, 0x01	; 1
    c936:	ec 19       	sub	r30, r12
    c938:	fd 09       	sbc	r31, r13
    c93a:	8b 2d       	mov	r24, r11
    c93c:	90 e0       	ldi	r25, 0x00	; 0
    c93e:	8e 17       	cp	r24, r30
    c940:	9f 07       	cpc	r25, r31
    c942:	a8 f2       	brcs	.-86     	; 0xc8ee <CalcMultiply+0xaa>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
         AddZeroLag(currSeg,strlen(currSeg)+i);
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
    c944:	00 d0       	rcall	.+0      	; 0xc946 <CalcMultiply+0x102>
    c946:	00 d0       	rcall	.+0      	; 0xc948 <CalcMultiply+0x104>
    c948:	00 d0       	rcall	.+0      	; 0xc94a <CalcMultiply+0x106>
    c94a:	ed b7       	in	r30, 0x3d	; 61
    c94c:	fe b7       	in	r31, 0x3e	; 62
    c94e:	31 96       	adiw	r30, 0x01	; 1
    c950:	ad b7       	in	r26, 0x3d	; 61
    c952:	be b7       	in	r27, 0x3e	; 62
    c954:	12 96       	adiw	r26, 0x02	; 2
    c956:	5c 92       	st	X, r5
    c958:	4e 92       	st	-X, r4
    c95a:	11 97       	sbiw	r26, 0x01	; 1
    c95c:	8c ec       	ldi	r24, 0xCC	; 204
    c95e:	96 e0       	ldi	r25, 0x06	; 6
    c960:	93 83       	std	Z+3, r25	; 0x03
    c962:	82 83       	std	Z+2, r24	; 0x02
    c964:	a4 82       	std	Z+4, r10	; 0x04
    c966:	95 82       	std	Z+5, r9	; 0x05
    c968:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    c96c:	ed b7       	in	r30, 0x3d	; 61
    c96e:	fe b7       	in	r31, 0x3e	; 62
    c970:	36 96       	adiw	r30, 0x06	; 6
    c972:	0f b6       	in	r0, 0x3f	; 63
    c974:	f8 94       	cli
    c976:	fe bf       	out	0x3e, r31	; 62
    c978:	0f be       	out	0x3f, r0	; 63
    c97a:	ed bf       	out	0x3d, r30	; 61
}
    c97c:	a8 96       	adiw	r28, 0x28	; 40
    c97e:	0f b6       	in	r0, 0x3f	; 63
    c980:	f8 94       	cli
    c982:	de bf       	out	0x3e, r29	; 62
    c984:	0f be       	out	0x3f, r0	; 63
    c986:	cd bf       	out	0x3d, r28	; 61
    c988:	cf 91       	pop	r28
    c98a:	df 91       	pop	r29
    c98c:	1f 91       	pop	r17
    c98e:	0f 91       	pop	r16
    c990:	ff 90       	pop	r15
    c992:	ef 90       	pop	r14
    c994:	df 90       	pop	r13
    c996:	cf 90       	pop	r12
    c998:	bf 90       	pop	r11
    c99a:	af 90       	pop	r10
    c99c:	9f 90       	pop	r9
    c99e:	8f 90       	pop	r8
    c9a0:	7f 90       	pop	r7
    c9a2:	6f 90       	pop	r6
    c9a4:	5f 90       	pop	r5
    c9a6:	4f 90       	pop	r4
    c9a8:	08 95       	ret

0000c9aa <StrCalc>:
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    c9aa:	2f 92       	push	r2
    c9ac:	3f 92       	push	r3
    c9ae:	4f 92       	push	r4
    c9b0:	5f 92       	push	r5
    c9b2:	6f 92       	push	r6
    c9b4:	7f 92       	push	r7
    c9b6:	8f 92       	push	r8
    c9b8:	9f 92       	push	r9
    c9ba:	af 92       	push	r10
    c9bc:	bf 92       	push	r11
    c9be:	cf 92       	push	r12
    c9c0:	df 92       	push	r13
    c9c2:	ef 92       	push	r14
    c9c4:	ff 92       	push	r15
    c9c6:	0f 93       	push	r16
    c9c8:	1f 93       	push	r17
    c9ca:	df 93       	push	r29
    c9cc:	cf 93       	push	r28
    c9ce:	cd b7       	in	r28, 0x3d	; 61
    c9d0:	de b7       	in	r29, 0x3e	; 62
    c9d2:	cd 55       	subi	r28, 0x5D	; 93
    c9d4:	d0 40       	sbci	r29, 0x00	; 0
    c9d6:	0f b6       	in	r0, 0x3f	; 63
    c9d8:	f8 94       	cli
    c9da:	de bf       	out	0x3e, r29	; 62
    c9dc:	0f be       	out	0x3f, r0	; 63
    c9de:	cd bf       	out	0x3d, r28	; 61
    c9e0:	67 96       	adiw	r28, 0x17	; 23
    c9e2:	8f af       	std	Y+63, r24	; 0x3f
    c9e4:	67 97       	sbiw	r28, 0x17	; 23
    c9e6:	6b 96       	adiw	r28, 0x1b	; 27
    c9e8:	7f af       	std	Y+63, r23	; 0x3f
    c9ea:	6e af       	std	Y+62, r22	; 0x3e
    c9ec:	6b 97       	sbiw	r28, 0x1b	; 27
    c9ee:	6d 96       	adiw	r28, 0x1d	; 29
    c9f0:	5f af       	std	Y+63, r21	; 0x3f
    c9f2:	4e af       	std	Y+62, r20	; 0x3e
    c9f4:	6d 97       	sbiw	r28, 0x1d	; 29
    c9f6:	89 01       	movw	r16, r18
	 //long long valA,valB,valC;
	 
	 IsMinA=False;
	 IsMinB=False;
	 IsNegative=False;
	 FillChar(tmpA,sizeof(tmpA),0);
    c9f8:	7e 01       	movw	r14, r28
    c9fa:	08 94       	sec
    c9fc:	e1 1c       	adc	r14, r1
    c9fe:	f1 1c       	adc	r15, r1
    ca00:	c7 01       	movw	r24, r14
    ca02:	64 e1       	ldi	r22, 0x14	; 20
    ca04:	70 e0       	ldi	r23, 0x00	; 0
    ca06:	40 e0       	ldi	r20, 0x00	; 0
    ca08:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 FillChar(tmpB,sizeof(tmpB),0);
    ca0c:	35 e1       	ldi	r19, 0x15	; 21
    ca0e:	c3 2e       	mov	r12, r19
    ca10:	d1 2c       	mov	r13, r1
    ca12:	cc 0e       	add	r12, r28
    ca14:	dd 1e       	adc	r13, r29
    ca16:	c6 01       	movw	r24, r12
    ca18:	64 e1       	ldi	r22, 0x14	; 20
    ca1a:	70 e0       	ldi	r23, 0x00	; 0
    ca1c:	40 e0       	ldi	r20, 0x00	; 0
    ca1e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 FillChar(Result,sizeof(Result),0);
    ca22:	ce 01       	movw	r24, r28
    ca24:	cd 96       	adiw	r24, 0x3d	; 61
    ca26:	64 e1       	ldi	r22, 0x14	; 20
    ca28:	70 e0       	ldi	r23, 0x00	; 0
    ca2a:	40 e0       	ldi	r20, 0x00	; 0
    ca2c:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
                                            // -5    -5     5    5
	                                        // -6 -   6 -  -6 -  6 -
                                            // -5+6   
	 sprintf_P(tmpA,PSTR("%s"),strA);       // 
    ca30:	00 d0       	rcall	.+0      	; 0xca32 <StrCalc+0x88>
    ca32:	00 d0       	rcall	.+0      	; 0xca34 <StrCalc+0x8a>
    ca34:	00 d0       	rcall	.+0      	; 0xca36 <StrCalc+0x8c>
    ca36:	ed b7       	in	r30, 0x3d	; 61
    ca38:	fe b7       	in	r31, 0x3e	; 62
    ca3a:	31 96       	adiw	r30, 0x01	; 1
    ca3c:	ad b7       	in	r26, 0x3d	; 61
    ca3e:	be b7       	in	r27, 0x3e	; 62
    ca40:	12 96       	adiw	r26, 0x02	; 2
    ca42:	fc 92       	st	X, r15
    ca44:	ee 92       	st	-X, r14
    ca46:	11 97       	sbiw	r26, 0x01	; 1
    ca48:	8f ed       	ldi	r24, 0xDF	; 223
    ca4a:	96 e0       	ldi	r25, 0x06	; 6
    ca4c:	93 83       	std	Z+3, r25	; 0x03
    ca4e:	82 83       	std	Z+2, r24	; 0x02
    ca50:	6b 96       	adiw	r28, 0x1b	; 27
    ca52:	2e ad       	ldd	r18, Y+62	; 0x3e
    ca54:	3f ad       	ldd	r19, Y+63	; 0x3f
    ca56:	6b 97       	sbiw	r28, 0x1b	; 27
    ca58:	35 83       	std	Z+5, r19	; 0x05
    ca5a:	24 83       	std	Z+4, r18	; 0x04
    ca5c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 sprintf_P(tmpB,PSTR("%s"),strB);  
    ca60:	ed b7       	in	r30, 0x3d	; 61
    ca62:	fe b7       	in	r31, 0x3e	; 62
    ca64:	31 96       	adiw	r30, 0x01	; 1
    ca66:	ad b7       	in	r26, 0x3d	; 61
    ca68:	be b7       	in	r27, 0x3e	; 62
    ca6a:	12 96       	adiw	r26, 0x02	; 2
    ca6c:	dc 92       	st	X, r13
    ca6e:	ce 92       	st	-X, r12
    ca70:	11 97       	sbiw	r26, 0x01	; 1
    ca72:	8c ed       	ldi	r24, 0xDC	; 220
    ca74:	96 e0       	ldi	r25, 0x06	; 6
    ca76:	93 83       	std	Z+3, r25	; 0x03
    ca78:	82 83       	std	Z+2, r24	; 0x02
    ca7a:	6d 96       	adiw	r28, 0x1d	; 29
    ca7c:	2e ad       	ldd	r18, Y+62	; 0x3e
    ca7e:	3f ad       	ldd	r19, Y+63	; 0x3f
    ca80:	6d 97       	sbiw	r28, 0x1d	; 29
    ca82:	35 83       	std	Z+5, r19	; 0x05
    ca84:	24 83       	std	Z+4, r18	; 0x04
    ca86:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

     if (IsMinus(tmpA)==True){
    ca8a:	4d b7       	in	r20, 0x3d	; 61
    ca8c:	5e b7       	in	r21, 0x3e	; 62
    ca8e:	4a 5f       	subi	r20, 0xFA	; 250
    ca90:	5f 4f       	sbci	r21, 0xFF	; 255
    ca92:	0f b6       	in	r0, 0x3f	; 63
    ca94:	f8 94       	cli
    ca96:	5e bf       	out	0x3e, r21	; 62
    ca98:	0f be       	out	0x3f, r0	; 63
    ca9a:	4d bf       	out	0x3d, r20	; 61
    ca9c:	c7 01       	movw	r24, r14
    ca9e:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <IsMinus>
    caa2:	81 30       	cpi	r24, 0x01	; 1
    caa4:	31 f4       	brne	.+12     	; 0xcab2 <StrCalc+0x108>
	     RemoveMinus(tmpA);
    caa6:	c7 01       	movw	r24, r14
    caa8:	0e 94 6b 63 	call	0xc6d6	; 0xc6d6 <RemoveMinus>
		 IsMinA=True;
    caac:	99 24       	eor	r9, r9
    caae:	93 94       	inc	r9
    cab0:	01 c0       	rjmp	.+2      	; 0xcab4 <StrCalc+0x10a>
	 char tmpA[20],tmpB[20],tmpC[20],Result[20],iPos=0;            //   ----------- 
	 char strSend[40],TCalc;	  							       //  C: 00000019
     char IsMinA,IsMinB,IsNegative,IsSwap;
	 //long long valA,valB,valC;
	 
	 IsMinA=False;
    cab2:	99 24       	eor	r9, r9

     if (IsMinus(tmpA)==True){
	     RemoveMinus(tmpA);
		 IsMinA=True;
	 }
     if (IsMinus(tmpB)==True){
    cab4:	25 e1       	ldi	r18, 0x15	; 21
    cab6:	e2 2e       	mov	r14, r18
    cab8:	f1 2c       	mov	r15, r1
    caba:	ec 0e       	add	r14, r28
    cabc:	fd 1e       	adc	r15, r29
    cabe:	c7 01       	movw	r24, r14
    cac0:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <IsMinus>
    cac4:	81 30       	cpi	r24, 0x01	; 1
    cac6:	29 f4       	brne	.+10     	; 0xcad2 <StrCalc+0x128>
	     RemoveMinus(tmpB);
    cac8:	c7 01       	movw	r24, r14
    caca:	0e 94 6b 63 	call	0xc6d6	; 0xc6d6 <RemoveMinus>
		 IsMinB=True;
    cace:	21 e0       	ldi	r18, 0x01	; 1
    cad0:	01 c0       	rjmp	.+2      	; 0xcad4 <StrCalc+0x12a>
	 char strSend[40],TCalc;	  							       //  C: 00000019
     char IsMinA,IsMinB,IsNegative,IsSwap;
	 //long long valA,valB,valC;
	 
	 IsMinA=False;
	 IsMinB=False;
    cad2:	20 e0       	ldi	r18, 0x00	; 0
     if (IsMinus(tmpB)==True){
	     RemoveMinus(tmpB);
		 IsMinB=True;
	 }    	

     lenA=strlen(tmpA);
    cad4:	de 01       	movw	r26, r28
    cad6:	11 96       	adiw	r26, 0x01	; 1
    cad8:	fd 01       	movw	r30, r26
    cada:	01 90       	ld	r0, Z+
    cadc:	00 20       	and	r0, r0
    cade:	e9 f7       	brne	.-6      	; 0xcada <StrCalc+0x130>
    cae0:	31 97       	sbiw	r30, 0x01	; 1
    cae2:	ea 1b       	sub	r30, r26
    cae4:	fb 0b       	sbc	r31, r27
     lenB=strlen(tmpB);
    cae6:	ce 01       	movw	r24, r28
    cae8:	45 96       	adiw	r24, 0x15	; 21
    caea:	dc 01       	movw	r26, r24
    caec:	0d 90       	ld	r0, X+
    caee:	00 20       	and	r0, r0
    caf0:	e9 f7       	brne	.-6      	; 0xcaec <StrCalc+0x142>
    caf2:	11 97       	sbiw	r26, 0x01	; 1
     /*
	 sprintf_P(strSend,PSTR("A:%s"),strA);	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);	 uart_print(0,1,strSend);
     */

     AddZeroLead(tmpA,FixLen+1);
    caf4:	a8 1b       	sub	r26, r24
    caf6:	ae 17       	cp	r26, r30
    caf8:	08 f4       	brcc	.+2      	; 0xcafc <StrCalc+0x152>
    cafa:	ae 2f       	mov	r26, r30
    cafc:	aa 2e       	mov	r10, r26
    cafe:	a3 94       	inc	r10
    cb00:	7e 01       	movw	r14, r28
    cb02:	08 94       	sec
    cb04:	e1 1c       	adc	r14, r1
    cb06:	f1 1c       	adc	r15, r1
    cb08:	c7 01       	movw	r24, r14
    cb0a:	6a 2d       	mov	r22, r10
    cb0c:	6e 96       	adiw	r28, 0x1e	; 30
    cb0e:	2f af       	std	Y+63, r18	; 0x3f
    cb10:	6e 97       	sbiw	r28, 0x1e	; 30
    cb12:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
     AddZeroLead(tmpB,FixLen+1);
    cb16:	95 e1       	ldi	r25, 0x15	; 21
    cb18:	c9 2e       	mov	r12, r25
    cb1a:	d1 2c       	mov	r13, r1
    cb1c:	cc 0e       	add	r12, r28
    cb1e:	dd 1e       	adc	r13, r29
    cb20:	c6 01       	movw	r24, r12
    cb22:	6a 2d       	mov	r22, r10
    cb24:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);
	 uart_print(0,1,strSend);
	 */

     lenA=strlen(tmpA);
    cb28:	f7 01       	movw	r30, r14
    cb2a:	01 90       	ld	r0, Z+
    cb2c:	00 20       	and	r0, r0
    cb2e:	e9 f7       	brne	.-6      	; 0xcb2a <StrCalc+0x180>
    cb30:	31 97       	sbiw	r30, 0x01	; 1
    cb32:	5e 2f       	mov	r21, r30
    cb34:	5e 19       	sub	r21, r14
    cb36:	66 96       	adiw	r28, 0x16	; 22
    cb38:	5f af       	std	Y+63, r21	; 0x3f
    cb3a:	66 97       	sbiw	r28, 0x16	; 22
     lenB=strlen(tmpB);
    cb3c:	f6 01       	movw	r30, r12
    cb3e:	01 90       	ld	r0, Z+
    cb40:	00 20       	and	r0, r0
    cb42:	e9 f7       	brne	.-6      	; 0xcb3e <StrCalc+0x194>
    cb44:	31 97       	sbiw	r30, 0x01	; 1
    cb46:	8e 2f       	mov	r24, r30
    cb48:	8c 19       	sub	r24, r12
    cb4a:	62 96       	adiw	r28, 0x12	; 18
    cb4c:	8f af       	std	Y+63, r24	; 0x3f
    cb4e:	62 97       	sbiw	r28, 0x12	; 18
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
    cb50:	c6 01       	movw	r24, r12
    cb52:	b7 01       	movw	r22, r14
    cb54:	0e 94 07 63 	call	0xc60e	; 0xc60e <IsMoreThan>
    cb58:	6e 96       	adiw	r28, 0x1e	; 30
    cb5a:	2f ad       	ldd	r18, Y+63	; 0x3f
    cb5c:	6e 97       	sbiw	r28, 0x1e	; 30
    cb5e:	81 30       	cpi	r24, 0x01	; 1
    cb60:	09 f0       	breq	.+2      	; 0xcb64 <StrCalc+0x1ba>
    cb62:	4b c0       	rjmp	.+150    	; 0xcbfa <StrCalc+0x250>
	     IsSwap=True;
         sprintf_P(tmpC,PSTR("%s"),tmpA);
    cb64:	00 d0       	rcall	.+0      	; 0xcb66 <StrCalc+0x1bc>
    cb66:	00 d0       	rcall	.+0      	; 0xcb68 <StrCalc+0x1be>
    cb68:	00 d0       	rcall	.+0      	; 0xcb6a <StrCalc+0x1c0>
    cb6a:	ed b7       	in	r30, 0x3d	; 61
    cb6c:	fe b7       	in	r31, 0x3e	; 62
    cb6e:	31 96       	adiw	r30, 0x01	; 1
    cb70:	89 e2       	ldi	r24, 0x29	; 41
    cb72:	a8 2e       	mov	r10, r24
    cb74:	b1 2c       	mov	r11, r1
    cb76:	ac 0e       	add	r10, r28
    cb78:	bd 1e       	adc	r11, r29
    cb7a:	ad b7       	in	r26, 0x3d	; 61
    cb7c:	be b7       	in	r27, 0x3e	; 62
    cb7e:	12 96       	adiw	r26, 0x02	; 2
    cb80:	bc 92       	st	X, r11
    cb82:	ae 92       	st	-X, r10
    cb84:	11 97       	sbiw	r26, 0x01	; 1
    cb86:	89 ed       	ldi	r24, 0xD9	; 217
    cb88:	96 e0       	ldi	r25, 0x06	; 6
    cb8a:	93 83       	std	Z+3, r25	; 0x03
    cb8c:	82 83       	std	Z+2, r24	; 0x02
    cb8e:	f5 82       	std	Z+5, r15	; 0x05
    cb90:	e4 82       	std	Z+4, r14	; 0x04
    cb92:	6e 96       	adiw	r28, 0x1e	; 30
    cb94:	2f af       	std	Y+63, r18	; 0x3f
    cb96:	6e 97       	sbiw	r28, 0x1e	; 30
    cb98:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
    cb9c:	ed b7       	in	r30, 0x3d	; 61
    cb9e:	fe b7       	in	r31, 0x3e	; 62
    cba0:	31 96       	adiw	r30, 0x01	; 1
    cba2:	ad b7       	in	r26, 0x3d	; 61
    cba4:	be b7       	in	r27, 0x3e	; 62
    cba6:	12 96       	adiw	r26, 0x02	; 2
    cba8:	fc 92       	st	X, r15
    cbaa:	ee 92       	st	-X, r14
    cbac:	11 97       	sbiw	r26, 0x01	; 1
    cbae:	86 ed       	ldi	r24, 0xD6	; 214
    cbb0:	96 e0       	ldi	r25, 0x06	; 6
    cbb2:	93 83       	std	Z+3, r25	; 0x03
    cbb4:	82 83       	std	Z+2, r24	; 0x02
    cbb6:	d5 82       	std	Z+5, r13	; 0x05
    cbb8:	c4 82       	std	Z+4, r12	; 0x04
    cbba:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
    cbbe:	ed b7       	in	r30, 0x3d	; 61
    cbc0:	fe b7       	in	r31, 0x3e	; 62
    cbc2:	31 96       	adiw	r30, 0x01	; 1
    cbc4:	ad b7       	in	r26, 0x3d	; 61
    cbc6:	be b7       	in	r27, 0x3e	; 62
    cbc8:	12 96       	adiw	r26, 0x02	; 2
    cbca:	dc 92       	st	X, r13
    cbcc:	ce 92       	st	-X, r12
    cbce:	11 97       	sbiw	r26, 0x01	; 1
    cbd0:	83 ed       	ldi	r24, 0xD3	; 211
    cbd2:	96 e0       	ldi	r25, 0x06	; 6
    cbd4:	93 83       	std	Z+3, r25	; 0x03
    cbd6:	82 83       	std	Z+2, r24	; 0x02
    cbd8:	b5 82       	std	Z+5, r11	; 0x05
    cbda:	a4 82       	std	Z+4, r10	; 0x04
    cbdc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    cbe0:	ed b7       	in	r30, 0x3d	; 61
    cbe2:	fe b7       	in	r31, 0x3e	; 62
    cbe4:	36 96       	adiw	r30, 0x06	; 6
    cbe6:	0f b6       	in	r0, 0x3f	; 63
    cbe8:	f8 94       	cli
    cbea:	fe bf       	out	0x3e, r31	; 62
    cbec:	0f be       	out	0x3f, r0	; 63
    cbee:	ed bf       	out	0x3d, r30	; 61
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
	     IsSwap=True;
    cbf0:	81 e0       	ldi	r24, 0x01	; 1
    cbf2:	6e 96       	adiw	r28, 0x1e	; 30
    cbf4:	2f ad       	ldd	r18, Y+63	; 0x3f
    cbf6:	6e 97       	sbiw	r28, 0x1e	; 30
    cbf8:	01 c0       	rjmp	.+2      	; 0xcbfc <StrCalc+0x252>
     lenA=strlen(tmpA);
     lenB=strlen(tmpB);
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;
    cbfa:	80 e0       	ldi	r24, 0x00	; 0
         sprintf_P(tmpC,PSTR("%s"),tmpA);
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
	 }
    
	if (TOperation==TMINUS){
    cbfc:	67 96       	adiw	r28, 0x17	; 23
    cbfe:	ff ad       	ldd	r31, Y+63	; 0x3f
    cc00:	67 97       	sbiw	r28, 0x17	; 23
    cc02:	ff 23       	and	r31, r31
    cc04:	b9 f4       	brne	.+46     	; 0xcc34 <StrCalc+0x28a>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    cc06:	81 30       	cpi	r24, 0x01	; 1
    cc08:	59 f4       	brne	.+22     	; 0xcc20 <StrCalc+0x276>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    cc0a:	39 2d       	mov	r19, r9
    cc0c:	31 30       	cpi	r19, 0x01	; 1
    cc0e:	21 f4       	brne	.+8      	; 0xcc18 <StrCalc+0x26e>
    cc10:	21 30       	cpi	r18, 0x01	; 1
    cc12:	09 f0       	breq	.+2      	; 0xcc16 <StrCalc+0x26c>
    cc14:	ea c1       	rjmp	.+980    	; 0xcfea <StrCalc+0x640>
    cc16:	29 c0       	rjmp	.+82     	; 0xcc6a <StrCalc+0x2c0>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    cc18:	21 30       	cpi	r18, 0x01	; 1
    cc1a:	09 f0       	breq	.+2      	; 0xcc1e <StrCalc+0x274>
    cc1c:	e2 c1       	rjmp	.+964    	; 0xcfe2 <StrCalc+0x638>
    cc1e:	e3 c1       	rjmp	.+966    	; 0xcfe6 <StrCalc+0x63c>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    cc20:	49 2d       	mov	r20, r9
    cc22:	41 30       	cpi	r20, 0x01	; 1
    cc24:	21 f4       	brne	.+8      	; 0xcc2e <StrCalc+0x284>
    cc26:	21 30       	cpi	r18, 0x01	; 1
    cc28:	09 f0       	breq	.+2      	; 0xcc2c <StrCalc+0x282>
    cc2a:	df c1       	rjmp	.+958    	; 0xcfea <StrCalc+0x640>
    cc2c:	da c1       	rjmp	.+948    	; 0xcfe2 <StrCalc+0x638>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    cc2e:	21 30       	cpi	r18, 0x01	; 1
    cc30:	e1 f4       	brne	.+56     	; 0xcc6a <StrCalc+0x2c0>
    cc32:	d9 c1       	rjmp	.+946    	; 0xcfe6 <StrCalc+0x63c>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
		}
	 }else
	if (TOperation==TPLUS){
    cc34:	67 96       	adiw	r28, 0x17	; 23
    cc36:	5f ad       	ldd	r21, Y+63	; 0x3f
    cc38:	67 97       	sbiw	r28, 0x17	; 23
    cc3a:	51 30       	cpi	r21, 0x01	; 1
    cc3c:	b1 f4       	brne	.+44     	; 0xcc6a <StrCalc+0x2c0>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    cc3e:	81 30       	cpi	r24, 0x01	; 1
    cc40:	51 f4       	brne	.+20     	; 0xcc56 <StrCalc+0x2ac>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    cc42:	89 2d       	mov	r24, r9
    cc44:	81 30       	cpi	r24, 0x01	; 1
    cc46:	19 f4       	brne	.+6      	; 0xcc4e <StrCalc+0x2a4>
    cc48:	21 30       	cpi	r18, 0x01	; 1
    cc4a:	79 f4       	brne	.+30     	; 0xcc6a <StrCalc+0x2c0>
    cc4c:	ce c1       	rjmp	.+924    	; 0xcfea <StrCalc+0x640>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    cc4e:	21 30       	cpi	r18, 0x01	; 1
    cc50:	09 f0       	breq	.+2      	; 0xcc54 <StrCalc+0x2aa>
    cc52:	c9 c1       	rjmp	.+914    	; 0xcfe6 <StrCalc+0x63c>
    cc54:	c6 c1       	rjmp	.+908    	; 0xcfe2 <StrCalc+0x638>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    cc56:	99 2d       	mov	r25, r9
    cc58:	91 30       	cpi	r25, 0x01	; 1
    cc5a:	21 f4       	brne	.+8      	; 0xcc64 <StrCalc+0x2ba>
    cc5c:	21 30       	cpi	r18, 0x01	; 1
    cc5e:	09 f0       	breq	.+2      	; 0xcc62 <StrCalc+0x2b8>
    cc60:	c0 c1       	rjmp	.+896    	; 0xcfe2 <StrCalc+0x638>
    cc62:	c3 c1       	rjmp	.+902    	; 0xcfea <StrCalc+0x640>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    cc64:	21 30       	cpi	r18, 0x01	; 1
    cc66:	09 f0       	breq	.+2      	; 0xcc6a <StrCalc+0x2c0>
    cc68:	be c1       	rjmp	.+892    	; 0xcfe6 <StrCalc+0x63c>

     lenA=strlen(tmpA);
     lenB=strlen(tmpB);
     IsNegative=False;
	 
	 IsNegative=False;
    cc6a:	20 e0       	ldi	r18, 0x00	; 0

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    cc6c:	66 96       	adiw	r28, 0x16	; 22
    cc6e:	af ad       	ldd	r26, Y+63	; 0x3f
    cc70:	66 97       	sbiw	r28, 0x16	; 22
    cc72:	4a 2e       	mov	r4, r26
    cc74:	55 24       	eor	r5, r5
    cc76:	f2 01       	movw	r30, r4
    cc78:	31 97       	sbiw	r30, 0x01	; 1
    cc7a:	65 96       	adiw	r28, 0x15	; 21
    cc7c:	ff af       	std	Y+63, r31	; 0x3f
    cc7e:	ee af       	std	Y+62, r30	; 0x3e
    cc80:	65 97       	sbiw	r28, 0x15	; 21
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    cc82:	bd e3       	ldi	r27, 0x3D	; 61
    cc84:	eb 2e       	mov	r14, r27
    cc86:	f1 2c       	mov	r15, r1
    cc88:	ec 0e       	add	r14, r28
    cc8a:	fd 1e       	adc	r15, r29
    cc8c:	ee 0e       	add	r14, r30
    cc8e:	ff 1e       	adc	r15, r31
    cc90:	4e 01       	movw	r8, r28
    cc92:	08 94       	sec
    cc94:	81 1c       	adc	r8, r1
    cc96:	91 1c       	adc	r9, r1
    cc98:	54 01       	movw	r10, r8
    cc9a:	a4 0c       	add	r10, r4
    cc9c:	b5 1c       	adc	r11, r5
    cc9e:	62 96       	adiw	r28, 0x12	; 18
    cca0:	ff ad       	ldd	r31, Y+63	; 0x3f
    cca2:	62 97       	sbiw	r28, 0x12	; 18
    cca4:	8f 2f       	mov	r24, r31
    cca6:	90 e0       	ldi	r25, 0x00	; 0
    cca8:	a5 e1       	ldi	r26, 0x15	; 21
    ccaa:	ca 2e       	mov	r12, r26
    ccac:	d1 2c       	mov	r13, r1
    ccae:	cc 0e       	add	r12, r28
    ccb0:	dd 1e       	adc	r13, r29
    ccb2:	c8 0e       	add	r12, r24
    ccb4:	d9 1e       	adc	r13, r25
    ccb6:	66 24       	eor	r6, r6
    ccb8:	63 94       	inc	r6
    ccba:	68 96       	adiw	r28, 0x18	; 24
    ccbc:	2f af       	std	Y+63, r18	; 0x3f
    ccbe:	68 97       	sbiw	r28, 0x18	; 24
    ccc0:	5f c0       	rjmp	.+190    	; 0xcd80 <StrCalc+0x3d6>
    ccc2:	08 94       	sec
    ccc4:	a1 08       	sbc	r10, r1
    ccc6:	b1 08       	sbc	r11, r1
    ccc8:	63 96       	adiw	r28, 0x13	; 19
    ccca:	bf ae       	std	Y+63, r11	; 0x3f
    cccc:	ae ae       	std	Y+62, r10	; 0x3e
    ccce:	63 97       	sbiw	r28, 0x13	; 19
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
    ccd0:	d5 01       	movw	r26, r10
    ccd2:	8c 91       	ld	r24, X
    ccd4:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    ccd8:	28 2e       	mov	r2, r24
    ccda:	08 94       	sec
    ccdc:	c1 08       	sbc	r12, r1
    ccde:	d1 08       	sbc	r13, r1
    cce0:	f6 01       	movw	r30, r12
    cce2:	80 81       	ld	r24, Z
    cce4:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    cce8:	78 2e       	mov	r7, r24
    ccea:	28 16       	cp	r2, r24
    ccec:	70 f1       	brcs	.+92     	; 0xcd4a <StrCalc+0x3a0>
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    ccee:	82 2d       	mov	r24, r2
    ccf0:	87 19       	sub	r24, r7
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    ccf2:	8a 30       	cpi	r24, 0x0A	; 10
    ccf4:	10 f4       	brcc	.+4      	; 0xccfa <StrCalc+0x350>
	    Result='0'+X;
    ccf6:	80 5d       	subi	r24, 0xD0	; 208
    ccf8:	01 c0       	rjmp	.+2      	; 0xccfc <StrCalc+0x352>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    ccfa:	80 e3       	ldi	r24, 0x30	; 48

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    ccfc:	d7 01       	movw	r26, r14
    ccfe:	8c 93       	st	X, r24
    cd00:	3b c0       	rjmp	.+118    	; 0xcd78 <StrCalc+0x3ce>
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    cd02:	65 96       	adiw	r28, 0x15	; 21
    cd04:	2e ac       	ldd	r2, Y+62	; 0x3e
    cd06:	3f ac       	ldd	r3, Y+63	; 0x3f
    cd08:	65 97       	sbiw	r28, 0x15	; 21
    cd0a:	29 1a       	sub	r2, r25
    cd0c:	31 08       	sbc	r3, r1
    cd0e:	e1 e0       	ldi	r30, 0x01	; 1
    cd10:	f0 e0       	ldi	r31, 0x00	; 0
    cd12:	ec 0f       	add	r30, r28
    cd14:	fd 1f       	adc	r31, r29
    cd16:	e2 0d       	add	r30, r2
    cd18:	f3 1d       	adc	r31, r3
    cd1a:	80 81       	ld	r24, Z
    cd1c:	80 33       	cpi	r24, 0x30	; 48
    cd1e:	21 f4       	brne	.+8      	; 0xcd28 <StrCalc+0x37e>
    cd20:	b9 e3       	ldi	r27, 0x39	; 57
    cd22:	b0 83       	st	Z, r27
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    cd24:	9f 5f       	subi	r25, 0xFF	; 255
    cd26:	12 c0       	rjmp	.+36     	; 0xcd4c <StrCalc+0x3a2>
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    cd28:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    cd2c:	98 2f       	mov	r25, r24
    cd2e:	91 50       	subi	r25, 0x01	; 1
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    cd30:	9a 30       	cpi	r25, 0x0A	; 10
    cd32:	10 f4       	brcc	.+4      	; 0xcd38 <StrCalc+0x38e>
	    Result='0'+X;
    cd34:	81 5d       	subi	r24, 0xD1	; 209
    cd36:	01 c0       	rjmp	.+2      	; 0xcd3a <StrCalc+0x390>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    cd38:	80 e3       	ldi	r24, 0x30	; 48
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    cd3a:	e1 e0       	ldi	r30, 0x01	; 1
    cd3c:	f0 e0       	ldi	r31, 0x00	; 0
    cd3e:	ec 0f       	add	r30, r28
    cd40:	fd 1f       	adc	r31, r29
    cd42:	e2 0d       	add	r30, r2
    cd44:	f3 1d       	adc	r31, r3
    cd46:	80 83       	st	Z, r24
						 break;
    cd48:	06 c0       	rjmp	.+12     	; 0xcd56 <StrCalc+0x3ac>
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    cd4a:	96 2d       	mov	r25, r6
    cd4c:	66 96       	adiw	r28, 0x16	; 22
    cd4e:	ef ad       	ldd	r30, Y+63	; 0x3f
    cd50:	66 97       	sbiw	r28, 0x16	; 22
    cd52:	9e 17       	cp	r25, r30
    cd54:	b0 f2       	brcs	.-84     	; 0xcd02 <StrCalc+0x358>
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    cd56:	63 96       	adiw	r28, 0x13	; 19
    cd58:	ae ad       	ldd	r26, Y+62	; 0x3e
    cd5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    cd5c:	63 97       	sbiw	r28, 0x13	; 19
    cd5e:	8c 91       	ld	r24, X
    cd60:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    cd64:	9a e0       	ldi	r25, 0x0A	; 10
    cd66:	97 19       	sub	r25, r7
    cd68:	98 0f       	add	r25, r24
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    cd6a:	9a 30       	cpi	r25, 0x0A	; 10
    cd6c:	10 f4       	brcc	.+4      	; 0xcd72 <StrCalc+0x3c8>
	    Result='0'+X;
    cd6e:	90 5d       	subi	r25, 0xD0	; 208
    cd70:	01 c0       	rjmp	.+2      	; 0xcd74 <StrCalc+0x3ca>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    cd72:	90 e3       	ldi	r25, 0x30	; 48
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    cd74:	f7 01       	movw	r30, r14
    cd76:	90 83       	st	Z, r25
    cd78:	63 94       	inc	r6
    cd7a:	08 94       	sec
    cd7c:	e1 08       	sbc	r14, r1
    cd7e:	f1 08       	sbc	r15, r1
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
    cd80:	a8 14       	cp	r10, r8
    cd82:	b9 04       	cpc	r11, r9
    cd84:	09 f0       	breq	.+2      	; 0xcd88 <StrCalc+0x3de>
    cd86:	9d cf       	rjmp	.-198    	; 0xccc2 <StrCalc+0x318>
    cd88:	68 96       	adiw	r28, 0x18	; 24
    cd8a:	2f ad       	ldd	r18, Y+63	; 0x3f
    cd8c:	68 97       	sbiw	r28, 0x18	; 24
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }
		 }Result[lenA]=0;		    
    cd8e:	fd e3       	ldi	r31, 0x3D	; 61
    cd90:	ef 2e       	mov	r14, r31
    cd92:	f1 2c       	mov	r15, r1
    cd94:	ec 0e       	add	r14, r28
    cd96:	fd 1e       	adc	r15, r29
    cd98:	f7 01       	movw	r30, r14
    cd9a:	e4 0d       	add	r30, r4
    cd9c:	f5 1d       	adc	r31, r5
    cd9e:	10 82       	st	Z, r1
       RemZeroLead(Result);
    cda0:	c7 01       	movw	r24, r14
    cda2:	6e 96       	adiw	r28, 0x1e	; 30
    cda4:	2f af       	std	Y+63, r18	; 0x3f
    cda6:	6e 97       	sbiw	r28, 0x1e	; 30
    cda8:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
    cdac:	f7 01       	movw	r30, r14
    cdae:	01 90       	ld	r0, Z+
    cdb0:	00 20       	and	r0, r0
    cdb2:	e9 f7       	brne	.-6      	; 0xcdae <StrCalc+0x404>
    cdb4:	31 97       	sbiw	r30, 0x01	; 1
    cdb6:	ee 19       	sub	r30, r14
    cdb8:	d7 01       	movw	r26, r14
		 iPos=0;
    cdba:	30 e0       	ldi	r19, 0x00	; 0
		 for(i=0;i<FixLen;i++){
    cdbc:	40 e0       	ldi	r20, 0x00	; 0
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    cdbe:	5d e2       	ldi	r21, 0x2D	; 45
    cdc0:	7e 2f       	mov	r23, r30
    cdc2:	6e 96       	adiw	r28, 0x1e	; 30
    cdc4:	2f ad       	ldd	r18, Y+63	; 0x3f
    cdc6:	6e 97       	sbiw	r28, 0x1e	; 30
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    cdc8:	12 c0       	rjmp	.+36     	; 0xcdee <StrCalc+0x444>
		     if ((i==0)&&(IsNegative==True)){
    cdca:	44 23       	and	r20, r20
    cdcc:	41 f4       	brne	.+16     	; 0xcdde <StrCalc+0x434>
    cdce:	21 30       	cpi	r18, 0x01	; 1
    cdd0:	31 f4       	brne	.+12     	; 0xcdde <StrCalc+0x434>
			     strC[iPos]='-';
    cdd2:	c8 01       	movw	r24, r16
    cdd4:	83 0f       	add	r24, r19
    cdd6:	91 1d       	adc	r25, r1
    cdd8:	fc 01       	movw	r30, r24
    cdda:	50 83       	st	Z, r21
				 iPos++;
    cddc:	3f 5f       	subi	r19, 0xFF	; 255
			 }
		     strC[iPos]=Result[i];
    cdde:	6d 91       	ld	r22, X+
    cde0:	c8 01       	movw	r24, r16
    cde2:	83 0f       	add	r24, r19
    cde4:	91 1d       	adc	r25, r1
    cde6:	fc 01       	movw	r30, r24
    cde8:	60 83       	st	Z, r22
			 iPos++;
    cdea:	3f 5f       	subi	r19, 0xFF	; 255
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    cdec:	4f 5f       	subi	r20, 0xFF	; 255
    cdee:	47 17       	cp	r20, r23
    cdf0:	60 f3       	brcs	.-40     	; 0xcdca <StrCalc+0x420>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[i];
			 iPos++;
		 }strC[iPos]=0;
    cdf2:	f8 01       	movw	r30, r16
    cdf4:	e3 0f       	add	r30, r19
    cdf6:	f1 1d       	adc	r31, r1
    cdf8:	10 82       	st	Z, r1
    cdfa:	e2 c0       	rjmp	.+452    	; 0xcfc0 <StrCalc+0x616>
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
    cdfc:	ed e3       	ldi	r30, 0x3D	; 61
    cdfe:	ce 2e       	mov	r12, r30
    ce00:	d1 2c       	mov	r13, r1
    ce02:	cc 0e       	add	r12, r28
    ce04:	dd 1e       	adc	r13, r29
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    ce06:	66 96       	adiw	r28, 0x16	; 22
    ce08:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce0a:	66 97       	sbiw	r28, 0x16	; 22
    ce0c:	6f 2e       	mov	r6, r31
    ce0e:	77 24       	eor	r7, r7
    ce10:	1e 01       	movw	r2, r28
    ce12:	08 94       	sec
    ce14:	21 1c       	adc	r2, r1
    ce16:	31 1c       	adc	r3, r1
    ce18:	51 01       	movw	r10, r2
    ce1a:	a6 0c       	add	r10, r6
    ce1c:	b7 1c       	adc	r11, r7
    ce1e:	62 96       	adiw	r28, 0x12	; 18
    ce20:	3f ad       	ldd	r19, Y+63	; 0x3f
    ce22:	62 97       	sbiw	r28, 0x12	; 18
    ce24:	83 2f       	mov	r24, r19
    ce26:	90 e0       	ldi	r25, 0x00	; 0
    ce28:	75 e1       	ldi	r23, 0x15	; 21
    ce2a:	e7 2e       	mov	r14, r23
    ce2c:	f1 2c       	mov	r15, r1
    ce2e:	ec 0e       	add	r14, r28
    ce30:	fd 1e       	adc	r15, r29
    ce32:	e8 0e       	add	r14, r24
    ce34:	f9 1e       	adc	r15, r25
    ce36:	99 24       	eor	r9, r9
    ce38:	93 94       	inc	r9
    ce3a:	90 e0       	ldi	r25, 0x00	; 0
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
    ce3c:	a3 01       	movw	r20, r6
    ce3e:	41 50       	subi	r20, 0x01	; 1
    ce40:	50 40       	sbci	r21, 0x00	; 0
    ce42:	69 96       	adiw	r28, 0x19	; 25
    ce44:	5f af       	std	Y+63, r21	; 0x3f
    ce46:	4e af       	std	Y+62, r20	; 0x3e
    ce48:	69 97       	sbiw	r28, 0x19	; 25
    ce4a:	82 2e       	mov	r8, r18
    ce4c:	28 01       	movw	r4, r16
    ce4e:	7a c0       	rjmp	.+244    	; 0xcf44 <StrCalc+0x59a>
    ce50:	08 94       	sec
    ce52:	a1 08       	sbc	r10, r1
    ce54:	b1 08       	sbc	r11, r1
    ce56:	d5 01       	movw	r26, r10
    ce58:	8c 91       	ld	r24, X
    ce5a:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    ce5e:	08 2f       	mov	r16, r24
    ce60:	08 94       	sec
    ce62:	e1 08       	sbc	r14, r1
    ce64:	f1 08       	sbc	r15, r1
    ce66:	f7 01       	movw	r30, r14
    ce68:	80 81       	ld	r24, Z
    ce6a:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    ce6e:	80 0f       	add	r24, r16
			 if (newC<10){
    ce70:	8a 30       	cpi	r24, 0x0A	; 10
    ce72:	20 f4       	brcc	.+8      	; 0xce7c <StrCalc+0x4d2>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    ce74:	80 5d       	subi	r24, 0xD0	; 208
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
			 if (newC<10){
			     Result[i]=Chr(newC);
    ce76:	d6 01       	movw	r26, r12
    ce78:	8c 93       	st	X, r24
    ce7a:	52 c0       	rjmp	.+164    	; 0xcf20 <StrCalc+0x576>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    ce7c:	6a e0       	ldi	r22, 0x0A	; 10
    ce7e:	0e 94 8c a5 	call	0x14b18	; 0x14b18 <__udivmodqi4>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    ce82:	90 5d       	subi	r25, 0xD0	; 208
			 if (newC<10){
			     Result[i]=Chr(newC);
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    ce84:	f6 01       	movw	r30, r12
    ce86:	90 83       	st	Z, r25
				 zMin=newC/10;
    ce88:	98 2f       	mov	r25, r24
			     for(j=i+1;j<lenA;j++){
    ce8a:	09 2d       	mov	r16, r9
    ce8c:	64 96       	adiw	r28, 0x14	; 20
    ce8e:	9f ae       	std	Y+63, r9	; 0x3f
    ce90:	64 97       	sbiw	r28, 0x14	; 20
    ce92:	18 2d       	mov	r17, r8
    ce94:	45 01       	movw	r8, r10
    ce96:	57 01       	movw	r10, r14
    ce98:	45 c0       	rjmp	.+138    	; 0xcf24 <StrCalc+0x57a>
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    ce9a:	69 96       	adiw	r28, 0x19	; 25
    ce9c:	ee ac       	ldd	r14, Y+62	; 0x3e
    ce9e:	ff ac       	ldd	r15, Y+63	; 0x3f
    cea0:	69 97       	sbiw	r28, 0x19	; 25
    cea2:	e0 1a       	sub	r14, r16
    cea4:	f1 08       	sbc	r15, r1
    cea6:	21 e0       	ldi	r18, 0x01	; 1
    cea8:	30 e0       	ldi	r19, 0x00	; 0
    ceaa:	2c 0f       	add	r18, r28
    ceac:	3d 1f       	adc	r19, r29
    ceae:	2e 0d       	add	r18, r14
    ceb0:	3f 1d       	adc	r19, r15
    ceb2:	63 96       	adiw	r28, 0x13	; 19
    ceb4:	3f af       	std	Y+63, r19	; 0x3f
    ceb6:	2e af       	std	Y+62, r18	; 0x3e
    ceb8:	63 97       	sbiw	r28, 0x13	; 19
    ceba:	d9 01       	movw	r26, r18
    cebc:	8c 91       	ld	r24, X
    cebe:	6e 96       	adiw	r28, 0x1e	; 30
    cec0:	9f af       	std	Y+63, r25	; 0x3f
    cec2:	6e 97       	sbiw	r28, 0x1e	; 30
    cec4:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    cec8:	6e 96       	adiw	r28, 0x1e	; 30
    ceca:	9f ad       	ldd	r25, Y+63	; 0x3f
    cecc:	6e 97       	sbiw	r28, 0x1e	; 30
    cece:	29 2f       	mov	r18, r25
    ced0:	30 e0       	ldi	r19, 0x00	; 0
    ced2:	28 0f       	add	r18, r24
    ced4:	31 1d       	adc	r19, r1
    ced6:	2a 30       	cpi	r18, 0x0A	; 10
    ced8:	31 05       	cpc	r19, r1
    ceda:	74 f0       	brlt	.+28     	; 0xcef8 <StrCalc+0x54e>
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    cedc:	c9 01       	movw	r24, r18
    cede:	6a e0       	ldi	r22, 0x0A	; 10
    cee0:	70 e0       	ldi	r23, 0x00	; 0
    cee2:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    cee6:	80 5d       	subi	r24, 0xD0	; 208
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    cee8:	63 96       	adiw	r28, 0x13	; 19
    ceea:	ee ad       	ldd	r30, Y+62	; 0x3e
    ceec:	ff ad       	ldd	r31, Y+63	; 0x3f
    ceee:	63 97       	sbiw	r28, 0x13	; 19
    cef0:	80 83       	st	Z, r24
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    cef2:	0f 5f       	subi	r16, 0xFF	; 255
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
    cef4:	91 e0       	ldi	r25, 0x01	; 1
    cef6:	16 c0       	rjmp	.+44     	; 0xcf24 <StrCalc+0x57a>
    cef8:	a7 01       	movw	r20, r14
    cefa:	75 01       	movw	r14, r10
    cefc:	54 01       	movw	r10, r8
    cefe:	64 96       	adiw	r28, 0x14	; 20
    cf00:	9f ac       	ldd	r9, Y+63	; 0x3f
    cf02:	64 97       	sbiw	r28, 0x14	; 20
    cf04:	81 2e       	mov	r8, r17
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    cf06:	98 0f       	add	r25, r24
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    cf08:	9a 30       	cpi	r25, 0x0A	; 10
    cf0a:	10 f4       	brcc	.+4      	; 0xcf10 <StrCalc+0x566>
	    Result='0'+X;
    cf0c:	90 5d       	subi	r25, 0xD0	; 208
    cf0e:	01 c0       	rjmp	.+2      	; 0xcf12 <StrCalc+0x568>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    cf10:	90 e3       	ldi	r25, 0x30	; 48
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    cf12:	e1 e0       	ldi	r30, 0x01	; 1
    cf14:	f0 e0       	ldi	r31, 0x00	; 0
    cf16:	ec 0f       	add	r30, r28
    cf18:	fd 1f       	adc	r31, r29
    cf1a:	e4 0f       	add	r30, r20
    cf1c:	f5 1f       	adc	r31, r21
    cf1e:	90 83       	st	Z, r25
						 zMin=0;	
    cf20:	90 e0       	ldi	r25, 0x00	; 0
						 break;			     					 
    cf22:	0c c0       	rjmp	.+24     	; 0xcf3c <StrCalc+0x592>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    cf24:	66 96       	adiw	r28, 0x16	; 22
    cf26:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf28:	66 97       	sbiw	r28, 0x16	; 22
    cf2a:	0f 17       	cp	r16, r31
    cf2c:	08 f4       	brcc	.+2      	; 0xcf30 <StrCalc+0x586>
    cf2e:	b5 cf       	rjmp	.-150    	; 0xce9a <StrCalc+0x4f0>
    cf30:	75 01       	movw	r14, r10
    cf32:	54 01       	movw	r10, r8
    cf34:	64 96       	adiw	r28, 0x14	; 20
    cf36:	9f ac       	ldd	r9, Y+63	; 0x3f
    cf38:	64 97       	sbiw	r28, 0x14	; 20
    cf3a:	81 2e       	mov	r8, r17
    cf3c:	93 94       	inc	r9
    cf3e:	08 94       	sec
    cf40:	c1 1c       	adc	r12, r1
    cf42:	d1 1c       	adc	r13, r1
		 }strC[iPos]=0;
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
    cf44:	a2 14       	cp	r10, r2
    cf46:	b3 04       	cpc	r11, r3
    cf48:	09 f0       	breq	.+2      	; 0xcf4c <StrCalc+0x5a2>
    cf4a:	82 cf       	rjmp	.-252    	; 0xce50 <StrCalc+0x4a6>
    cf4c:	28 2d       	mov	r18, r8
    cf4e:	82 01       	movw	r16, r4
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    cf50:	9a 30       	cpi	r25, 0x0A	; 10
    cf52:	10 f4       	brcc	.+4      	; 0xcf58 <StrCalc+0x5ae>
	    Result='0'+X;
    cf54:	90 5d       	subi	r25, 0xD0	; 208
    cf56:	01 c0       	rjmp	.+2      	; 0xcf5a <StrCalc+0x5b0>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    cf58:	90 e3       	ldi	r25, 0x30	; 48
				 }//EndFor j                
			   }//End else
			 }//EndFor

		  //Result[lenA]==Chr(zMin); ???
		  Result[lenA]=Chr(zMin);
    cf5a:	de 01       	movw	r26, r28
    cf5c:	dd 96       	adiw	r26, 0x3d	; 61
    cf5e:	fd 01       	movw	r30, r26
    cf60:	e6 0d       	add	r30, r6
    cf62:	f7 1d       	adc	r31, r7
    cf64:	90 83       	st	Z, r25
		  Result[lenA+1]=0;
    cf66:	fe 01       	movw	r30, r28
    cf68:	e6 0d       	add	r30, r6
    cf6a:	f7 1d       	adc	r31, r7
    cf6c:	16 ae       	std	Z+62, r1	; 0x3e
		 FixLen=strlen(Result);
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
    cf6e:	fd 01       	movw	r30, r26
    cf70:	01 90       	ld	r0, Z+
    cf72:	00 20       	and	r0, r0
    cf74:	e9 f7       	brne	.-6      	; 0xcf70 <StrCalc+0x5c6>
    cf76:	31 97       	sbiw	r30, 0x01	; 1
    cf78:	3e 2f       	mov	r19, r30
    cf7a:	3a 1b       	sub	r19, r26
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    cf7c:	e3 2f       	mov	r30, r19
    cf7e:	f0 e0       	ldi	r31, 0x00	; 0
    cf80:	ea 0f       	add	r30, r26
    cf82:	fb 1f       	adc	r31, r27
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
    cf84:	80 e0       	ldi	r24, 0x00	; 0
		 for(i=0;i<FixLen;i++){
    cf86:	90 e0       	ldi	r25, 0x00	; 0
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    cf88:	4d e2       	ldi	r20, 0x2D	; 45
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    cf8a:	11 c0       	rjmp	.+34     	; 0xcfae <StrCalc+0x604>
		     if ((i==0)&&(IsNegative==True)){
    cf8c:	99 23       	and	r25, r25
    cf8e:	39 f4       	brne	.+14     	; 0xcf9e <StrCalc+0x5f4>
    cf90:	21 30       	cpi	r18, 0x01	; 1
    cf92:	29 f4       	brne	.+10     	; 0xcf9e <StrCalc+0x5f4>
			     strC[iPos]='-';
    cf94:	d8 01       	movw	r26, r16
    cf96:	a8 0f       	add	r26, r24
    cf98:	b1 1d       	adc	r27, r1
    cf9a:	4c 93       	st	X, r20
				 iPos++;
    cf9c:	8f 5f       	subi	r24, 0xFF	; 255
    cf9e:	31 97       	sbiw	r30, 0x01	; 1
			 }
		     strC[iPos]=Result[FixLen-i-1];
    cfa0:	d8 01       	movw	r26, r16
    cfa2:	a8 0f       	add	r26, r24
    cfa4:	b1 1d       	adc	r27, r1
    cfa6:	50 81       	ld	r21, Z
    cfa8:	5c 93       	st	X, r21
			 iPos++;
    cfaa:	8f 5f       	subi	r24, 0xFF	; 255
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    cfac:	9f 5f       	subi	r25, 0xFF	; 255
    cfae:	93 17       	cp	r25, r19
    cfb0:	68 f3       	brcs	.-38     	; 0xcf8c <StrCalc+0x5e2>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[FixLen-i-1];
			 iPos++;
		 }strC[iPos]=0;
    cfb2:	f8 01       	movw	r30, r16
    cfb4:	e8 0f       	add	r30, r24
    cfb6:	f1 1d       	adc	r31, r1
    cfb8:	10 82       	st	Z, r1

       RemZeroLead(strC);
    cfba:	c8 01       	movw	r24, r16
    cfbc:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
  //    sprintf_P(strSend,PSTR("C':%s"),strC);
//	 uart_print(0,1,strSend);

	 }//EndIf 

	 if (TOperation==TMULTIPLY){
    cfc0:	67 96       	adiw	r28, 0x17	; 23
    cfc2:	2f ad       	ldd	r18, Y+63	; 0x3f
    cfc4:	67 97       	sbiw	r28, 0x17	; 23
    cfc6:	22 30       	cpi	r18, 0x02	; 2
    cfc8:	91 f4       	brne	.+36     	; 0xcfee <StrCalc+0x644>
		 valA=atol(strA);
		 valB=atol(strB);
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
    cfca:	6b 96       	adiw	r28, 0x1b	; 27
    cfcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    cfce:	9f ad       	ldd	r25, Y+63	; 0x3f
    cfd0:	6b 97       	sbiw	r28, 0x1b	; 27
    cfd2:	6d 96       	adiw	r28, 0x1d	; 29
    cfd4:	6e ad       	ldd	r22, Y+62	; 0x3e
    cfd6:	7f ad       	ldd	r23, Y+63	; 0x3f
    cfd8:	6d 97       	sbiw	r28, 0x1d	; 29
    cfda:	a8 01       	movw	r20, r16
    cfdc:	0e 94 22 64 	call	0xc844	; 0xc844 <CalcMultiply>
    cfe0:	06 c0       	rjmp	.+12     	; 0xcfee <StrCalc+0x644>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    cfe2:	21 e0       	ldi	r18, 0x01	; 1
    cfe4:	43 ce       	rjmp	.-890    	; 0xcc6c <StrCalc+0x2c2>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    cfe6:	20 e0       	ldi	r18, 0x00	; 0
    cfe8:	09 cf       	rjmp	.-494    	; 0xcdfc <StrCalc+0x452>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    cfea:	21 e0       	ldi	r18, 0x01	; 1
    cfec:	07 cf       	rjmp	.-498    	; 0xcdfc <StrCalc+0x452>
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}
    cfee:	c3 5a       	subi	r28, 0xA3	; 163
    cff0:	df 4f       	sbci	r29, 0xFF	; 255
    cff2:	0f b6       	in	r0, 0x3f	; 63
    cff4:	f8 94       	cli
    cff6:	de bf       	out	0x3e, r29	; 62
    cff8:	0f be       	out	0x3f, r0	; 63
    cffa:	cd bf       	out	0x3d, r28	; 61
    cffc:	cf 91       	pop	r28
    cffe:	df 91       	pop	r29
    d000:	1f 91       	pop	r17
    d002:	0f 91       	pop	r16
    d004:	ff 90       	pop	r15
    d006:	ef 90       	pop	r14
    d008:	df 90       	pop	r13
    d00a:	cf 90       	pop	r12
    d00c:	bf 90       	pop	r11
    d00e:	af 90       	pop	r10
    d010:	9f 90       	pop	r9
    d012:	8f 90       	pop	r8
    d014:	7f 90       	pop	r7
    d016:	6f 90       	pop	r6
    d018:	5f 90       	pop	r5
    d01a:	4f 90       	pop	r4
    d01c:	3f 90       	pop	r3
    d01e:	2f 90       	pop	r2
    d020:	08 95       	ret

0000d022 <NormalizeOverflow>:
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}

void NormalizeOverflow(char *strOverflowed){
    d022:	ef 92       	push	r14
    d024:	ff 92       	push	r15
    d026:	0f 93       	push	r16
    d028:	1f 93       	push	r17
    d02a:	df 93       	push	r29
    d02c:	cf 93       	push	r28
    d02e:	cd b7       	in	r28, 0x3d	; 61
    d030:	de b7       	in	r29, 0x3e	; 62
    d032:	64 97       	sbiw	r28, 0x14	; 20
    d034:	0f b6       	in	r0, 0x3f	; 63
    d036:	f8 94       	cli
    d038:	de bf       	out	0x3e, r29	; 62
    d03a:	0f be       	out	0x3f, r0	; 63
    d03c:	cd bf       	out	0x3d, r28	; 61
    d03e:	9c 01       	movw	r18, r24
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
    d040:	fc 01       	movw	r30, r24
    d042:	01 90       	ld	r0, Z+
    d044:	00 20       	and	r0, r0
    d046:	e9 f7       	brne	.-6      	; 0xd042 <NormalizeOverflow+0x20>
    d048:	31 97       	sbiw	r30, 0x01	; 1
    d04a:	e8 1b       	sub	r30, r24
    d04c:	f0 e0       	ldi	r31, 0x00	; 0
    d04e:	7e 01       	movw	r14, r28
    d050:	08 94       	sec
    d052:	e1 1c       	adc	r14, r1
    d054:	f1 1c       	adc	r15, r1
    d056:	8f 01       	movw	r16, r30
     for(i=0;i<Length;i++){//123456
    d058:	09 c0       	rjmp	.+18     	; 0xd06c <NormalizeOverflow+0x4a>
	     strMaxValue[i]='0'+((Length-i)/Length);
    d05a:	cf 01       	movw	r24, r30
    d05c:	b8 01       	movw	r22, r16
    d05e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <__divmodhi4>
    d062:	60 5d       	subi	r22, 0xD0	; 208
    d064:	d7 01       	movw	r26, r14
    d066:	6d 93       	st	X+, r22
    d068:	7d 01       	movw	r14, r26
    d06a:	31 97       	sbiw	r30, 0x01	; 1

void NormalizeOverflow(char *strOverflowed){
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
     for(i=0;i<Length;i++){//123456
    d06c:	30 97       	sbiw	r30, 0x00	; 0
    d06e:	a9 f7       	brne	.-22     	; 0xd05a <NormalizeOverflow+0x38>
	     strMaxValue[i]='0'+((Length-i)/Length);
	 }strMaxValue[Length]=0;
    d070:	be 01       	movw	r22, r28
    d072:	6f 5f       	subi	r22, 0xFF	; 255
    d074:	7f 4f       	sbci	r23, 0xFF	; 255
    d076:	fb 01       	movw	r30, r22
    d078:	e0 0f       	add	r30, r16
    d07a:	f1 1f       	adc	r31, r17
    d07c:	10 82       	st	Z, r1
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
    d07e:	81 e0       	ldi	r24, 0x01	; 1
    d080:	a9 01       	movw	r20, r18
    d082:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>
}
    d086:	64 96       	adiw	r28, 0x14	; 20
    d088:	0f b6       	in	r0, 0x3f	; 63
    d08a:	f8 94       	cli
    d08c:	de bf       	out	0x3e, r29	; 62
    d08e:	0f be       	out	0x3f, r0	; 63
    d090:	cd bf       	out	0x3d, r28	; 61
    d092:	cf 91       	pop	r28
    d094:	df 91       	pop	r29
    d096:	1f 91       	pop	r17
    d098:	0f 91       	pop	r16
    d09a:	ff 90       	pop	r15
    d09c:	ef 90       	pop	r14
    d09e:	08 95       	ret

0000d0a0 <GetTabSpace>:
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
}

void GetTabSpace(signed char TabLength, char *strTab){
    d0a0:	fb 01       	movw	r30, r22
     char i,nTab;
	 if (TabLength>0){
    d0a2:	18 16       	cp	r1, r24
    d0a4:	5c f4       	brge	.+22     	; 0xd0bc <GetTabSpace+0x1c>
		 nTab=TabLength;//%40;
    d0a6:	db 01       	movw	r26, r22
		 for(i=0;i<nTab;i++){
    d0a8:	90 e0       	ldi	r25, 0x00	; 0
		     strTab[i]=' ';
    d0aa:	20 e2       	ldi	r18, 0x20	; 32
    d0ac:	2d 93       	st	X+, r18

void GetTabSpace(signed char TabLength, char *strTab){
     char i,nTab;
	 if (TabLength>0){
		 nTab=TabLength;//%40;
		 for(i=0;i<nTab;i++){
    d0ae:	9f 5f       	subi	r25, 0xFF	; 255
    d0b0:	98 17       	cp	r25, r24
    d0b2:	e0 f3       	brcs	.-8      	; 0xd0ac <GetTabSpace+0xc>
		     strTab[i]=' ';
		 }strTab[nTab]=0;
    d0b4:	e8 0f       	add	r30, r24
    d0b6:	f1 1d       	adc	r31, r1
    d0b8:	10 82       	st	Z, r1
    d0ba:	08 95       	ret
     }else{
	 strTab[0]=' ';
    d0bc:	80 e2       	ldi	r24, 0x20	; 32
    d0be:	80 83       	st	Z, r24
	 strTab[1]=0;
    d0c0:	11 82       	std	Z+1, r1	; 0x01
    d0c2:	08 95       	ret

0000d0c4 <GetProductPrice>:
          stGenerateReport=grScanAction;
	      break;
	 }
}
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
    d0c4:	cf 92       	push	r12
    d0c6:	df 92       	push	r13
    d0c8:	ef 92       	push	r14
    d0ca:	ff 92       	push	r15
    d0cc:	0f 93       	push	r16
    d0ce:	1f 93       	push	r17
    d0d0:	df 93       	push	r29
    d0d2:	cf 93       	push	r28
    d0d4:	cd b7       	in	r28, 0x3d	; 61
    d0d6:	de b7       	in	r29, 0x3e	; 62
    d0d8:	67 97       	sbiw	r28, 0x17	; 23
    d0da:	0f b6       	in	r0, 0x3f	; 63
    d0dc:	f8 94       	cli
    d0de:	de bf       	out	0x3e, r29	; 62
    d0e0:	0f be       	out	0x3f, r0	; 63
    d0e2:	cd bf       	out	0x3d, r28	; 61
    d0e4:	7c 01       	movw	r14, r24
    d0e6:	c6 2e       	mov	r12, r22
    d0e8:	d4 2e       	mov	r13, r20
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
    d0ea:	00 d0       	rcall	.+0      	; 0xd0ec <GetProductPrice+0x28>
    d0ec:	00 d0       	rcall	.+0      	; 0xd0ee <GetProductPrice+0x2a>
    d0ee:	ad b7       	in	r26, 0x3d	; 61
    d0f0:	be b7       	in	r27, 0x3e	; 62
    d0f2:	12 96       	adiw	r26, 0x02	; 2
    d0f4:	9c 93       	st	X, r25
    d0f6:	8e 93       	st	-X, r24
    d0f8:	11 97       	sbiw	r26, 0x01	; 1
    d0fa:	8a e2       	ldi	r24, 0x2A	; 42
    d0fc:	95 e0       	ldi	r25, 0x05	; 5
    d0fe:	14 96       	adiw	r26, 0x04	; 4
    d100:	9c 93       	st	X, r25
    d102:	8e 93       	st	-X, r24
    d104:	13 97       	sbiw	r26, 0x03	; 3
    d106:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    d10a:	0f 90       	pop	r0
    d10c:	0f 90       	pop	r0
    d10e:	0f 90       	pop	r0
    d110:	0f 90       	pop	r0
    d112:	8e 01       	movw	r16, r28
    d114:	09 5f       	subi	r16, 0xF9	; 249
    d116:	1f 4f       	sbci	r17, 0xFF	; 255
    d118:	c8 01       	movw	r24, r16
    d11a:	65 e4       	ldi	r22, 0x45	; 69
    d11c:	70 e0       	ldi	r23, 0x00	; 0
    d11e:	48 e0       	ldi	r20, 0x08	; 8
    d120:	50 e0       	ldi	r21, 0x00	; 0
    d122:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
    d126:	f8 01       	movw	r30, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
    d128:	60 e0       	ldi	r22, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
    d12a:	81 91       	ld	r24, Z+
    d12c:	8c 15       	cp	r24, r12
    d12e:	21 f0       	breq	.+8      	; 0xd138 <GetProductPrice+0x74>
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
	 for(i=0;i<8;i++){
    d130:	6f 5f       	subi	r22, 0xFF	; 255
    d132:	68 30       	cpi	r22, 0x08	; 8
    d134:	d1 f7       	brne	.-12     	; 0xd12a <GetProductPrice+0x66>
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
    d136:	60 e0       	ldi	r22, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
		     iPumpID=i;
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
    d138:	bd 2d       	mov	r27, r13
    d13a:	b6 30       	cpi	r27, 0x06	; 6
    d13c:	08 f0       	brcs	.+2      	; 0xd140 <GetProductPrice+0x7c>
    d13e:	43 c0       	rjmp	.+134    	; 0xd1c6 <GetProductPrice+0x102>
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
    d140:	86 e0       	ldi	r24, 0x06	; 6
    d142:	68 9f       	mul	r22, r24
    d144:	b0 01       	movw	r22, r0
    d146:	11 24       	eor	r1, r1
    d148:	6b 5a       	subi	r22, 0xAB	; 171
    d14a:	7f 4f       	sbci	r23, 0xFF	; 255
    d14c:	ce 01       	movw	r24, r28
    d14e:	01 96       	adiw	r24, 0x01	; 1
    d150:	46 e0       	ldi	r20, 0x06	; 6
    d152:	50 e0       	ldi	r21, 0x00	; 0
    d154:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
         xProductID=PProdID[xNozzle-1];
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    d158:	8e 01       	movw	r16, r28
    d15a:	01 5f       	subi	r16, 0xF1	; 241
    d15c:	1f 4f       	sbci	r17, 0xFF	; 255
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
         xProductID=PProdID[xNozzle-1];
    d15e:	fe 01       	movw	r30, r28
    d160:	ed 0d       	add	r30, r13
    d162:	f1 1d       	adc	r31, r1
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    d164:	80 81       	ld	r24, Z
    d166:	90 e0       	ldi	r25, 0x00	; 0
    d168:	01 97       	sbiw	r24, 0x01	; 1
    d16a:	bc 01       	movw	r22, r24
    d16c:	43 e0       	ldi	r20, 0x03	; 3
    d16e:	66 0f       	add	r22, r22
    d170:	77 1f       	adc	r23, r23
    d172:	4a 95       	dec	r20
    d174:	e1 f7       	brne	.-8      	; 0xd16e <GetProductPrice+0xaa>
    d176:	68 0f       	add	r22, r24
    d178:	79 1f       	adc	r23, r25
    d17a:	6b 57       	subi	r22, 0x7B	; 123
    d17c:	7f 4f       	sbci	r23, 0xFF	; 255
    d17e:	c8 01       	movw	r24, r16
    d180:	49 e0       	ldi	r20, 0x09	; 9
    d182:	50 e0       	ldi	r21, 0x00	; 0
    d184:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		 RemDecimal(strPrice);
    d188:	c8 01       	movw	r24, r16
    d18a:	0e 94 0d 49 	call	0x921a	; 0x921a <RemDecimal>
		 sprintf_P(sPrice,PSTR("%s"),strPrice);
    d18e:	00 d0       	rcall	.+0      	; 0xd190 <GetProductPrice+0xcc>
    d190:	00 d0       	rcall	.+0      	; 0xd192 <GetProductPrice+0xce>
    d192:	00 d0       	rcall	.+0      	; 0xd194 <GetProductPrice+0xd0>
    d194:	ed b7       	in	r30, 0x3d	; 61
    d196:	fe b7       	in	r31, 0x3e	; 62
    d198:	31 96       	adiw	r30, 0x01	; 1
    d19a:	ad b7       	in	r26, 0x3d	; 61
    d19c:	be b7       	in	r27, 0x3e	; 62
    d19e:	12 96       	adiw	r26, 0x02	; 2
    d1a0:	fc 92       	st	X, r15
    d1a2:	ee 92       	st	-X, r14
    d1a4:	11 97       	sbiw	r26, 0x01	; 1
    d1a6:	87 e2       	ldi	r24, 0x27	; 39
    d1a8:	95 e0       	ldi	r25, 0x05	; 5
    d1aa:	93 83       	std	Z+3, r25	; 0x03
    d1ac:	82 83       	std	Z+2, r24	; 0x02
    d1ae:	15 83       	std	Z+5, r17	; 0x05
    d1b0:	04 83       	std	Z+4, r16	; 0x04
    d1b2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    d1b6:	ed b7       	in	r30, 0x3d	; 61
    d1b8:	fe b7       	in	r31, 0x3e	; 62
    d1ba:	36 96       	adiw	r30, 0x06	; 6
    d1bc:	0f b6       	in	r0, 0x3f	; 63
    d1be:	f8 94       	cli
    d1c0:	fe bf       	out	0x3e, r31	; 62
    d1c2:	0f be       	out	0x3f, r0	; 63
    d1c4:	ed bf       	out	0x3d, r30	; 61
	 }    
	 //Clear Decimal

}
    d1c6:	67 96       	adiw	r28, 0x17	; 23
    d1c8:	0f b6       	in	r0, 0x3f	; 63
    d1ca:	f8 94       	cli
    d1cc:	de bf       	out	0x3e, r29	; 62
    d1ce:	0f be       	out	0x3f, r0	; 63
    d1d0:	cd bf       	out	0x3d, r28	; 61
    d1d2:	cf 91       	pop	r28
    d1d4:	df 91       	pop	r29
    d1d6:	1f 91       	pop	r17
    d1d8:	0f 91       	pop	r16
    d1da:	ff 90       	pop	r15
    d1dc:	ef 90       	pop	r14
    d1de:	df 90       	pop	r13
    d1e0:	cf 90       	pop	r12
    d1e2:	08 95       	ret

0000d1e4 <GetProductName>:

void GetProductName(char GradeId,char *strProductName){
    d1e4:	df 92       	push	r13
    d1e6:	ef 92       	push	r14
    d1e8:	ff 92       	push	r15
    d1ea:	0f 93       	push	r16
    d1ec:	1f 93       	push	r17
    d1ee:	df 93       	push	r29
    d1f0:	cf 93       	push	r28
    d1f2:	cd b7       	in	r28, 0x3d	; 61
    d1f4:	de b7       	in	r29, 0x3e	; 62
    d1f6:	2c 97       	sbiw	r28, 0x0c	; 12
    d1f8:	0f b6       	in	r0, 0x3f	; 63
    d1fa:	f8 94       	cli
    d1fc:	de bf       	out	0x3e, r29	; 62
    d1fe:	0f be       	out	0x3f, r0	; 63
    d200:	cd bf       	out	0x3d, r28	; 61
    d202:	d8 2e       	mov	r13, r24
    d204:	7b 01       	movw	r14, r22
char SProductName[12],i,Length;
     FillChar(SProductName,sizeof(SProductName),0); 
    d206:	8e 01       	movw	r16, r28
    d208:	0f 5f       	subi	r16, 0xFF	; 255
    d20a:	1f 4f       	sbci	r17, 0xFF	; 255
    d20c:	c8 01       	movw	r24, r16
    d20e:	6c e0       	ldi	r22, 0x0C	; 12
    d210:	70 e0       	ldi	r23, 0x00	; 0
    d212:	40 e0       	ldi	r20, 0x00	; 0
    d214:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 //eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
	 if (GradeId>0) eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
    d218:	dd 20       	and	r13, r13
    d21a:	a1 f0       	breq	.+40     	; 0xd244 <GetProductName+0x60>
    d21c:	8d 2d       	mov	r24, r13
    d21e:	90 e0       	ldi	r25, 0x00	; 0
    d220:	01 97       	sbiw	r24, 0x01	; 1
    d222:	2d e0       	ldi	r18, 0x0D	; 13
    d224:	30 e0       	ldi	r19, 0x00	; 0
    d226:	82 9f       	mul	r24, r18
    d228:	b0 01       	movw	r22, r0
    d22a:	83 9f       	mul	r24, r19
    d22c:	70 0d       	add	r23, r0
    d22e:	92 9f       	mul	r25, r18
    d230:	70 0d       	add	r23, r0
    d232:	11 24       	eor	r1, r1
    d234:	65 54       	subi	r22, 0x45	; 69
    d236:	7f 4f       	sbci	r23, 0xFF	; 255
    d238:	c8 01       	movw	r24, r16
    d23a:	4a e0       	ldi	r20, 0x0A	; 10
    d23c:	50 e0       	ldi	r21, 0x00	; 0
    d23e:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
    d242:	14 c0       	rjmp	.+40     	; 0xd26c <GetProductName+0x88>
	 else sprintf_P(SProductName,PSTR("N/A"));
    d244:	00 d0       	rcall	.+0      	; 0xd246 <GetProductName+0x62>
    d246:	00 d0       	rcall	.+0      	; 0xd248 <GetProductName+0x64>
    d248:	ad b7       	in	r26, 0x3d	; 61
    d24a:	be b7       	in	r27, 0x3e	; 62
    d24c:	12 96       	adiw	r26, 0x02	; 2
    d24e:	1c 93       	st	X, r17
    d250:	0e 93       	st	-X, r16
    d252:	11 97       	sbiw	r26, 0x01	; 1
    d254:	83 e2       	ldi	r24, 0x23	; 35
    d256:	95 e0       	ldi	r25, 0x05	; 5
    d258:	14 96       	adiw	r26, 0x04	; 4
    d25a:	9c 93       	st	X, r25
    d25c:	8e 93       	st	-X, r24
    d25e:	13 97       	sbiw	r26, 0x03	; 3
    d260:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    d264:	0f 90       	pop	r0
    d266:	0f 90       	pop	r0
    d268:	0f 90       	pop	r0
    d26a:	0f 90       	pop	r0

     Length=strlen(SProductName);
    d26c:	fe 01       	movw	r30, r28
    d26e:	31 96       	adiw	r30, 0x01	; 1
    d270:	df 01       	movw	r26, r30
    d272:	0d 90       	ld	r0, X+
    d274:	00 20       	and	r0, r0
    d276:	e9 f7       	brne	.-6      	; 0xd272 <GetProductName+0x8e>
    d278:	11 97       	sbiw	r26, 0x01	; 1
    d27a:	97 01       	movw	r18, r14
	 }    
	 //Clear Decimal

}

void GetProductName(char GradeId,char *strProductName){
    d27c:	ae 1b       	sub	r26, r30
    d27e:	ab 30       	cpi	r26, 0x0B	; 11
    d280:	08 f0       	brcs	.+2      	; 0xd284 <GetProductName+0xa0>
    d282:	aa e0       	ldi	r26, 0x0A	; 10
    d284:	6a 2f       	mov	r22, r26
    d286:	70 e0       	ldi	r23, 0x00	; 0
    d288:	ce 01       	movw	r24, r28
    d28a:	01 96       	adiw	r24, 0x01	; 1
    d28c:	86 0f       	add	r24, r22
    d28e:	97 1f       	adc	r25, r23
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    d290:	04 c0       	rjmp	.+8      	; 0xd29a <GetProductName+0xb6>
	     strProductName[i]=SProductName[i];
    d292:	41 91       	ld	r20, Z+
    d294:	d9 01       	movw	r26, r18
    d296:	4d 93       	st	X+, r20
    d298:	9d 01       	movw	r18, r26
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    d29a:	e8 17       	cp	r30, r24
    d29c:	f9 07       	cpc	r31, r25
    d29e:	c9 f7       	brne	.-14     	; 0xd292 <GetProductName+0xae>
	     strProductName[i]=SProductName[i];
	 }strProductName[Length]=0;
    d2a0:	db 01       	movw	r26, r22
    d2a2:	ae 0d       	add	r26, r14
    d2a4:	bf 1d       	adc	r27, r15
    d2a6:	1c 92       	st	X, r1

	 AddSpaceLag(strProductName,10);
    d2a8:	c7 01       	movw	r24, r14
    d2aa:	6a e0       	ldi	r22, 0x0A	; 10
    d2ac:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <AddSpaceLag>
}
    d2b0:	2c 96       	adiw	r28, 0x0c	; 12
    d2b2:	0f b6       	in	r0, 0x3f	; 63
    d2b4:	f8 94       	cli
    d2b6:	de bf       	out	0x3e, r29	; 62
    d2b8:	0f be       	out	0x3f, r0	; 63
    d2ba:	cd bf       	out	0x3d, r28	; 61
    d2bc:	cf 91       	pop	r28
    d2be:	df 91       	pop	r29
    d2c0:	1f 91       	pop	r17
    d2c2:	0f 91       	pop	r16
    d2c4:	ff 90       	pop	r15
    d2c6:	ef 90       	pop	r14
    d2c8:	df 90       	pop	r13
    d2ca:	08 95       	ret

0000d2cc <ClearList>:

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
    d2cc:	dc 01       	movw	r26, r24
    d2ce:	0d 90       	ld	r0, X+
    d2d0:	00 20       	and	r0, r0
    d2d2:	e9 f7       	brne	.-6      	; 0xd2ce <ClearList+0x2>
    d2d4:	bd 01       	movw	r22, r26
    d2d6:	61 50       	subi	r22, 0x01	; 1
    d2d8:	70 40       	sbci	r23, 0x00	; 0
    d2da:	68 1b       	sub	r22, r24
    d2dc:	79 0b       	sbc	r23, r25
    d2de:	40 e0       	ldi	r20, 0x00	; 0
    d2e0:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
}
    d2e4:	08 95       	ret

0000d2e6 <AddList>:
void AddList(char GradeId, char *strList){
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
    d2e6:	98 2f       	mov	r25, r24
    d2e8:	91 50       	subi	r25, 0x01	; 1
    d2ea:	96 30       	cpi	r25, 0x06	; 6
    d2ec:	c8 f4       	brcc	.+50     	; 0xd320 <AddList+0x3a>
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
    d2ee:	db 01       	movw	r26, r22
    d2f0:	0d 90       	ld	r0, X+
    d2f2:	00 20       	and	r0, r0
    d2f4:	e9 f7       	brne	.-6      	; 0xd2f0 <AddList+0xa>
    d2f6:	11 97       	sbiw	r26, 0x01	; 1
    d2f8:	a6 1b       	sub	r26, r22
	     if (Length>0){
    d2fa:	59 f0       	breq	.+22     	; 0xd312 <AddList+0x2c>
    d2fc:	fb 01       	movw	r30, r22
    d2fe:	90 e0       	ldi	r25, 0x00	; 0
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    d300:	28 2f       	mov	r18, r24
    d302:	20 5d       	subi	r18, 0xD0	; 208
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    d304:	31 91       	ld	r19, Z+
    d306:	32 17       	cp	r19, r18
    d308:	59 f0       	breq	.+22     	; 0xd320 <AddList+0x3a>
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
    d30a:	9f 5f       	subi	r25, 0xFF	; 255
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
    d30c:	9a 17       	cp	r25, r26
    d30e:	d0 f3       	brcs	.-12     	; 0xd304 <AddList+0x1e>
    d310:	01 c0       	rjmp	.+2      	; 0xd314 <AddList+0x2e>
     FillChar(strList,strlen(strList),0);
}
void AddList(char GradeId, char *strList){
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
    d312:	90 e0       	ldi	r25, 0x00	; 0
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    d314:	fb 01       	movw	r30, r22
    d316:	e9 0f       	add	r30, r25
    d318:	f1 1d       	adc	r31, r1
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    d31a:	80 5d       	subi	r24, 0xD0	; 208
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    d31c:	80 83       	st	Z, r24
		     strList[iPos+1]=0;
    d31e:	11 82       	std	Z+1, r1	; 0x01
    d320:	08 95       	ret

0000d322 <GetBorderValue>:
     }
	 //uart_print(1,1,strList);

}

char GetBorderValue(char BoderType){
    d322:	81 50       	subi	r24, 0x01	; 1
    d324:	8c 30       	cpi	r24, 0x0C	; 12
    d326:	30 f4       	brcc	.+12     	; 0xd334 <GetBorderValue+0x12>
    d328:	e8 2f       	mov	r30, r24
    d32a:	f0 e0       	ldi	r31, 0x00	; 0
    d32c:	ee 57       	subi	r30, 0x7E	; 126
    d32e:	fe 4f       	sbci	r31, 0xFE	; 254
    d330:	80 81       	ld	r24, Z
    d332:	08 95       	ret
    d334:	80 e0       	ldi	r24, 0x00	; 0
        case btNewLine:
		     Result=0x0D;
			 break;	 
	 }
   return Result;
}
    d336:	08 95       	ret

0000d338 <InserBorder.clone.0>:

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    d338:	cf 92       	push	r12
    d33a:	df 92       	push	r13
    d33c:	ef 92       	push	r14
    d33e:	ff 92       	push	r15
    d340:	0f 93       	push	r16
    d342:	1f 93       	push	r17
    d344:	df 93       	push	r29
    d346:	cf 93       	push	r28
    d348:	0f 92       	push	r0
    d34a:	cd b7       	in	r28, 0x3d	; 61
    d34c:	de b7       	in	r29, 0x3e	; 62
    d34e:	f8 2e       	mov	r15, r24
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    d350:	00 91 b4 02 	lds	r16, 0x02B4
    d354:	10 91 b5 02 	lds	r17, 0x02B5
    d358:	68 01       	movw	r12, r16
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d35a:	ee 24       	eor	r14, r14
    d35c:	0d c0       	rjmp	.+26     	; 0xd378 <InserBorder.clone.0+0x40>
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    d35e:	8f 2d       	mov	r24, r15
    d360:	69 83       	std	Y+1, r22	; 0x01
    d362:	0e 94 91 69 	call	0xd322	; 0xd322 <GetBorderValue>
    d366:	f6 01       	movw	r30, r12
    d368:	e6 53       	subi	r30, 0x36	; 54
    d36a:	fb 4f       	sbci	r31, 0xFB	; 251
    d36c:	80 83       	st	Z, r24
		  iPos++;
    d36e:	08 94       	sec
    d370:	c1 1c       	adc	r12, r1
    d372:	d1 1c       	adc	r13, r1
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d374:	e3 94       	inc	r14
    d376:	69 81       	ldd	r22, Y+1	; 0x01
    d378:	e6 16       	cp	r14, r22
    d37a:	88 f3       	brcs	.-30     	; 0xd35e <InserBorder.clone.0+0x26>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    d37c:	06 0f       	add	r16, r22
    d37e:	11 1d       	adc	r17, r1
    d380:	10 93 b5 02 	sts	0x02B5, r17
    d384:	00 93 b4 02 	sts	0x02B4, r16
}
    d388:	0f 90       	pop	r0
    d38a:	cf 91       	pop	r28
    d38c:	df 91       	pop	r29
    d38e:	1f 91       	pop	r17
    d390:	0f 91       	pop	r16
    d392:	ff 90       	pop	r15
    d394:	ef 90       	pop	r14
    d396:	df 90       	pop	r13
    d398:	cf 90       	pop	r12
    d39a:	08 95       	ret

0000d39c <InserBorder>:
			 break;	 
	 }
   return Result;
}

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    d39c:	af 92       	push	r10
    d39e:	bf 92       	push	r11
    d3a0:	cf 92       	push	r12
    d3a2:	df 92       	push	r13
    d3a4:	ef 92       	push	r14
    d3a6:	ff 92       	push	r15
    d3a8:	0f 93       	push	r16
    d3aa:	1f 93       	push	r17
    d3ac:	df 93       	push	r29
    d3ae:	cf 93       	push	r28
    d3b0:	0f 92       	push	r0
    d3b2:	cd b7       	in	r28, 0x3d	; 61
    d3b4:	de b7       	in	r29, 0x3e	; 62
    d3b6:	d8 2e       	mov	r13, r24
    d3b8:	5b 01       	movw	r10, r22
    d3ba:	89 01       	movw	r16, r18
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    d3bc:	f9 01       	movw	r30, r18
    d3be:	e0 80       	ld	r14, Z
    d3c0:	f1 80       	ldd	r15, Z+1	; 0x01
			 break;	 
	 }
   return Result;
}

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    d3c2:	ae 0c       	add	r10, r14
    d3c4:	bf 1c       	adc	r11, r15
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d3c6:	cc 24       	eor	r12, r12
    d3c8:	09 c0       	rjmp	.+18     	; 0xd3dc <InserBorder+0x40>
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    d3ca:	8d 2d       	mov	r24, r13
    d3cc:	49 83       	std	Y+1, r20	; 0x01
    d3ce:	0e 94 91 69 	call	0xd322	; 0xd322 <GetBorderValue>
    d3d2:	f5 01       	movw	r30, r10
    d3d4:	81 93       	st	Z+, r24
    d3d6:	5f 01       	movw	r10, r30
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d3d8:	c3 94       	inc	r12
    d3da:	49 81       	ldd	r20, Y+1	; 0x01
    d3dc:	c4 16       	cp	r12, r20
    d3de:	a8 f3       	brcs	.-22     	; 0xd3ca <InserBorder+0x2e>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    d3e0:	e4 0e       	add	r14, r20
    d3e2:	f1 1c       	adc	r15, r1
    d3e4:	f8 01       	movw	r30, r16
    d3e6:	f1 82       	std	Z+1, r15	; 0x01
    d3e8:	e0 82       	st	Z, r14
}
    d3ea:	0f 90       	pop	r0
    d3ec:	cf 91       	pop	r28
    d3ee:	df 91       	pop	r29
    d3f0:	1f 91       	pop	r17
    d3f2:	0f 91       	pop	r16
    d3f4:	ff 90       	pop	r15
    d3f6:	ef 90       	pop	r14
    d3f8:	df 90       	pop	r13
    d3fa:	cf 90       	pop	r12
    d3fc:	bf 90       	pop	r11
    d3fe:	af 90       	pop	r10
    d400:	08 95       	ret

0000d402 <CreateReport>:

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    d402:	af 92       	push	r10
    d404:	bf 92       	push	r11
    d406:	cf 92       	push	r12
    d408:	df 92       	push	r13
    d40a:	ef 92       	push	r14
    d40c:	ff 92       	push	r15
    d40e:	0f 93       	push	r16
    d410:	1f 93       	push	r17
    d412:	cf 93       	push	r28
    d414:	df 93       	push	r29
    d416:	5c 01       	movw	r10, r24
    d418:	eb 01       	movw	r28, r22
    d41a:	6a 01       	movw	r12, r20
     unsigned int iPos,PosResult,Length;
	 char i,strSend[20];
	 Length=strlen(strData);
    d41c:	dc 01       	movw	r26, r24
    d41e:	0d 90       	ld	r0, X+
    d420:	00 20       	and	r0, r0
    d422:	e9 f7       	brne	.-6      	; 0xd41e <CreateReport+0x1c>
    d424:	8d 01       	movw	r16, r26
    d426:	01 50       	subi	r16, 0x01	; 1
    d428:	10 40       	sbci	r17, 0x00	; 0
    d42a:	08 1b       	sub	r16, r24
    d42c:	19 0b       	sbc	r17, r25
    d42e:	0b 32       	cpi	r16, 0x2B	; 43
    d430:	11 05       	cpc	r17, r1
    d432:	10 f0       	brcs	.+4      	; 0xd438 <CreateReport+0x36>
    d434:	0a e2       	ldi	r16, 0x2A	; 42
    d436:	10 e0       	ldi	r17, 0x00	; 0
	 if (Length>BORDER_LENGTH)Length=BORDER_LENGTH;
     
	 iPos=*Pos;
    d438:	f6 01       	movw	r30, r12
    d43a:	e0 80       	ld	r14, Z
    d43c:	f1 80       	ldd	r15, Z+1	; 0x01
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    d43e:	8a e0       	ldi	r24, 0x0A	; 10
    d440:	0e 94 91 69 	call	0xd322	; 0xd322 <GetBorderValue>
    d444:	fe 01       	movw	r30, r28
    d446:	ee 0d       	add	r30, r14
    d448:	ff 1d       	adc	r31, r15
    d44a:	80 83       	st	Z, r24
     iPos++;
    d44c:	08 94       	sec
    d44e:	e1 1c       	adc	r14, r1
    d450:	f1 1c       	adc	r15, r1
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    d452:	fe 01       	movw	r30, r28
    d454:	ee 0d       	add	r30, r14
    d456:	ff 1d       	adc	r31, r15
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    d458:	90 e0       	ldi	r25, 0x00	; 0
    d45a:	09 c0       	rjmp	.+18     	; 0xd46e <CreateReport+0x6c>
	      strPrnBuffer[iPos]=strData[i];	      	 
    d45c:	2a 0d       	add	r18, r10
    d45e:	3b 1d       	adc	r19, r11
    d460:	d9 01       	movw	r26, r18
    d462:	2c 91       	ld	r18, X
    d464:	21 93       	st	Z+, r18
		  iPos++;
    d466:	08 94       	sec
    d468:	e1 1c       	adc	r14, r1
    d46a:	f1 1c       	adc	r15, r1
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    d46c:	9f 5f       	subi	r25, 0xFF	; 255
    d46e:	29 2f       	mov	r18, r25
    d470:	30 e0       	ldi	r19, 0x00	; 0
    d472:	20 17       	cp	r18, r16
    d474:	31 07       	cpc	r19, r17
    d476:	90 f3       	brcs	.-28     	; 0xd45c <CreateReport+0x5a>
    d478:	6e 2d       	mov	r22, r14
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
    d47a:	0a 32       	cpi	r16, 0x2A	; 42
    d47c:	11 05       	cpc	r17, r1
    d47e:	99 f0       	breq	.+38     	; 0xd4a6 <CreateReport+0xa4>
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    d480:	fe 01       	movw	r30, r28
    d482:	ee 0d       	add	r30, r14
    d484:	ff 1d       	adc	r31, r15
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    d486:	2a e2       	ldi	r18, 0x2A	; 42
    d488:	30 e0       	ldi	r19, 0x00	; 0
    d48a:	20 1b       	sub	r18, r16
    d48c:	31 0b       	sbc	r19, r17
	          strPrnBuffer[iPos]=' ';
    d48e:	90 e2       	ldi	r25, 0x20	; 32
    d490:	04 c0       	rjmp	.+8      	; 0xd49a <CreateReport+0x98>
    d492:	91 93       	st	Z+, r25
		      iPos++;
    d494:	08 94       	sec
    d496:	e1 1c       	adc	r14, r1
    d498:	f1 1c       	adc	r15, r1
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    d49a:	4e 2d       	mov	r20, r14
    d49c:	46 1b       	sub	r20, r22
    d49e:	50 e0       	ldi	r21, 0x00	; 0
    d4a0:	42 17       	cp	r20, r18
    d4a2:	53 07       	cpc	r21, r19
    d4a4:	b0 f3       	brcs	.-20     	; 0xd492 <CreateReport+0x90>
	          strPrnBuffer[iPos]=' ';
		      iPos++;
	     }	    
	 }
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    d4a6:	fe 01       	movw	r30, r28
    d4a8:	ee 0d       	add	r30, r14
    d4aa:	ff 1d       	adc	r31, r15
    d4ac:	80 83       	st	Z, r24
     iPos++;
    d4ae:	08 94       	sec
    d4b0:	e1 1c       	adc	r14, r1
    d4b2:	f1 1c       	adc	r15, r1
     //PosResult=*Pos+Length;
	 strPrnBuffer[iPos]=0x0D; 
    d4b4:	ce 0d       	add	r28, r14
    d4b6:	df 1d       	adc	r29, r15
    d4b8:	8d e0       	ldi	r24, 0x0D	; 13
    d4ba:	88 83       	st	Y, r24
	 iPos++;
    d4bc:	08 94       	sec
    d4be:	e1 1c       	adc	r14, r1
    d4c0:	f1 1c       	adc	r15, r1

   //*Pos=PosResult+1;
   *Pos=iPos;
    d4c2:	f6 01       	movw	r30, r12
    d4c4:	f1 82       	std	Z+1, r15	; 0x01
    d4c6:	e0 82       	st	Z, r14
    //sprintf_P(strSend,PSTR("Pos:%d"),*Pos);
	//uart_print(0,1,strSend);
}
    d4c8:	df 91       	pop	r29
    d4ca:	cf 91       	pop	r28
    d4cc:	1f 91       	pop	r17
    d4ce:	0f 91       	pop	r16
    d4d0:	ff 90       	pop	r15
    d4d2:	ef 90       	pop	r14
    d4d4:	df 90       	pop	r13
    d4d6:	cf 90       	pop	r12
    d4d8:	bf 90       	pop	r11
    d4da:	af 90       	pop	r10
    d4dc:	08 95       	ret

0000d4de <TestUserInput>:
	   //lcd_printf(1,1,PSTR("InputNumber:"));
       //lcd_printf(2,1,PSTR("_         "));
	}
  return Result;
  */
}
    d4de:	08 95       	ret

0000d4e0 <Pos>:
		

//Genius Protocol Version:1.0 AKR
int Pos(char *Substr, char *String){//1245:4645
    d4e0:	0f 93       	push	r16
    d4e2:	1f 93       	push	r17
    d4e4:	cf 93       	push	r28
    d4e6:	df 93       	push	r29
    d4e8:	fc 01       	movw	r30, r24
    char i,j,CountMatch;
	char Length,subLen,PosFound;

	Length=strlen(String);
    d4ea:	eb 01       	movw	r28, r22
    d4ec:	09 90       	ld	r0, Y+
    d4ee:	00 20       	and	r0, r0
    d4f0:	e9 f7       	brne	.-6      	; 0xd4ec <Pos+0xc>
    d4f2:	21 97       	sbiw	r28, 0x01	; 1
    d4f4:	ce 01       	movw	r24, r28
    d4f6:	86 1b       	sub	r24, r22
    d4f8:	18 2f       	mov	r17, r24
	subLen=strlen(Substr);
    d4fa:	ef 01       	movw	r28, r30
    d4fc:	09 90       	ld	r0, Y+
    d4fe:	00 20       	and	r0, r0
    d500:	e9 f7       	brne	.-6      	; 0xd4fc <Pos+0x1c>
    d502:	21 97       	sbiw	r28, 0x01	; 1
    d504:	ce 01       	movw	r24, r28
    d506:	8e 1b       	sub	r24, r30
    d508:	08 2f       	mov	r16, r24
    d50a:	a6 2f       	mov	r26, r22
    d50c:	b7 2f       	mov	r27, r23
	PosFound=Length;
	for(i=0;i<Length;i++){
    d50e:	80 e0       	ldi	r24, 0x00	; 0
    d510:	16 c0       	rjmp	.+44     	; 0xd53e <Pos+0x5e>
	    if (String[i]==Substr[0]){
    d512:	2c 91       	ld	r18, X
    d514:	90 81       	ld	r25, Z
    d516:	29 17       	cp	r18, r25
    d518:	81 f4       	brne	.+32     	; 0xd53a <Pos+0x5a>
    d51a:	af 01       	movw	r20, r30
    d51c:	9d 01       	movw	r18, r26
    d51e:	90 e0       	ldi	r25, 0x00	; 0
    d520:	09 c0       	rjmp	.+18     	; 0xd534 <Pos+0x54>
		    CountMatch=0;
			for(j=0;j<subLen;j++){
			    //notFound
			    if (Substr[j]==String[i+j]){
    d522:	ea 01       	movw	r28, r20
    d524:	79 91       	ld	r23, Y+
    d526:	ae 01       	movw	r20, r28
    d528:	e9 01       	movw	r28, r18
    d52a:	69 91       	ld	r22, Y+
    d52c:	9e 01       	movw	r18, r28
    d52e:	76 17       	cp	r23, r22
    d530:	21 f4       	brne	.+8      	; 0xd53a <Pos+0x5a>
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
		    CountMatch=0;
			for(j=0;j<subLen;j++){
    d532:	9f 5f       	subi	r25, 0xFF	; 255
    d534:	90 17       	cp	r25, r16
    d536:	a8 f3       	brcs	.-22     	; 0xd522 <Pos+0x42>
    d538:	05 c0       	rjmp	.+10     	; 0xd544 <Pos+0x64>
	char Length,subLen,PosFound;

	Length=strlen(String);
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
    d53a:	8f 5f       	subi	r24, 0xFF	; 255
    d53c:	11 96       	adiw	r26, 0x01	; 1
    d53e:	81 17       	cp	r24, r17
    d540:	40 f3       	brcs	.-48     	; 0xd512 <Pos+0x32>
    d542:	81 2f       	mov	r24, r17
			    break;  
			}
		}
	}
  return  PosFound;
}
    d544:	90 e0       	ldi	r25, 0x00	; 0
    d546:	df 91       	pop	r29
    d548:	cf 91       	pop	r28
    d54a:	1f 91       	pop	r17
    d54c:	0f 91       	pop	r16
    d54e:	08 95       	ret

0000d550 <GetParameter>:


void GetParameter(char *GFlow,char FLength,char *GCmd,char *GPumpID, char *GeniCSum){
    d550:	8f 92       	push	r8
    d552:	9f 92       	push	r9
    d554:	af 92       	push	r10
    d556:	bf 92       	push	r11
    d558:	cf 92       	push	r12
    d55a:	df 92       	push	r13
    d55c:	ef 92       	push	r14
    d55e:	ff 92       	push	r15
    d560:	0f 93       	push	r16
    d562:	1f 93       	push	r17
    d564:	df 93       	push	r29
    d566:	cf 93       	push	r28
    d568:	cd b7       	in	r28, 0x3d	; 61
    d56a:	de b7       	in	r29, 0x3e	; 62
    d56c:	a7 97       	sbiw	r28, 0x27	; 39
    d56e:	0f b6       	in	r0, 0x3f	; 63
    d570:	f8 94       	cli
    d572:	de bf       	out	0x3e, r29	; 62
    d574:	0f be       	out	0x3f, r0	; 63
    d576:	cd bf       	out	0x3d, r28	; 61
    d578:	59 01       	movw	r10, r18
    d57a:	48 01       	movw	r8, r16
    d57c:	26 2f       	mov	r18, r22
    d57e:	30 e0       	ldi	r19, 0x00	; 0
    d580:	dc 01       	movw	r26, r24
    d582:	a2 0f       	add	r26, r18
    d584:	b3 1f       	adc	r27, r19
    d586:	fe 01       	movw	r30, r28
    d588:	3a 96       	adiw	r30, 0x0a	; 10
    d58a:	2e 0f       	add	r18, r30
    d58c:	3f 1f       	adc	r19, r31
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    d58e:	02 c0       	rjmp	.+4      	; 0xd594 <GetParameter+0x44>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
    d590:	8e 91       	ld	r24, -X
    d592:	81 93       	st	Z+, r24
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    d594:	e2 17       	cp	r30, r18
    d596:	f3 07       	cpc	r31, r19
    d598:	d9 f7       	brne	.-10     	; 0xd590 <GetParameter+0x40>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
	 }SGeniusFlow[FLength]=0;
    d59a:	c6 2e       	mov	r12, r22
    d59c:	dd 24       	eor	r13, r13
    d59e:	6a e0       	ldi	r22, 0x0A	; 10
    d5a0:	e6 2e       	mov	r14, r22
    d5a2:	f1 2c       	mov	r15, r1
    d5a4:	ec 0e       	add	r14, r28
    d5a6:	fd 1e       	adc	r15, r29
    d5a8:	f7 01       	movw	r30, r14
    d5aa:	ec 0d       	add	r30, r12
    d5ac:	fd 1d       	adc	r31, r13
    d5ae:	10 82       	st	Z, r1

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
    d5b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    d5b2:	fa 01       	movw	r30, r20
    d5b4:	80 83       	st	Z, r24
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
    d5b6:	c7 01       	movw	r24, r14
    d5b8:	8e 01       	movw	r16, r28
    d5ba:	0f 5f       	subi	r16, 0xFF	; 255
    d5bc:	1f 4f       	sbci	r17, 0xFF	; 255
    d5be:	b8 01       	movw	r22, r16
    d5c0:	41 e0       	ldi	r20, 0x01	; 1
    d5c2:	50 e0       	ldi	r21, 0x00	; 0
    d5c4:	22 e0       	ldi	r18, 0x02	; 2
    d5c6:	30 e0       	ldi	r19, 0x00	; 0
    d5c8:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 xPumpID=atoi(sPumpID);
    d5cc:	c8 01       	movw	r24, r16
    d5ce:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
    d5d2:	f5 01       	movw	r30, r10
    d5d4:	80 83       	st	Z, r24
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
    d5d6:	00 d0       	rcall	.+0      	; 0xd5d8 <GetParameter+0x88>
    d5d8:	00 d0       	rcall	.+0      	; 0xd5da <GetParameter+0x8a>
    d5da:	8e 01       	movw	r16, r28
    d5dc:	09 5f       	subi	r16, 0xF9	; 249
    d5de:	1f 4f       	sbci	r17, 0xFF	; 255
    d5e0:	ed b7       	in	r30, 0x3d	; 61
    d5e2:	fe b7       	in	r31, 0x3e	; 62
    d5e4:	12 83       	std	Z+2, r17	; 0x02
    d5e6:	01 83       	std	Z+1, r16	; 0x01
    d5e8:	81 e2       	ldi	r24, 0x21	; 33
    d5ea:	95 e0       	ldi	r25, 0x05	; 5
    d5ec:	94 83       	std	Z+4, r25	; 0x04
    d5ee:	83 83       	std	Z+3, r24	; 0x03
    d5f0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 if (Pos(strSub,SGeniusFlow)<FLength){
    d5f4:	0f 90       	pop	r0
    d5f6:	0f 90       	pop	r0
    d5f8:	0f 90       	pop	r0
    d5fa:	0f 90       	pop	r0
    d5fc:	c8 01       	movw	r24, r16
    d5fe:	b7 01       	movw	r22, r14
    d600:	0e 94 70 6a 	call	0xd4e0	; 0xd4e0 <Pos>
    d604:	8c 15       	cp	r24, r12
    d606:	9d 05       	cpc	r25, r13
    d608:	94 f4       	brge	.+36     	; 0xd62e <GetParameter+0xde>
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    d60a:	8e 01       	movw	r16, r28
    d60c:	0c 5f       	subi	r16, 0xFC	; 252
    d60e:	1f 4f       	sbci	r17, 0xFF	; 255
    d610:	ac 01       	movw	r20, r24
    d612:	4f 5f       	subi	r20, 0xFF	; 255
    d614:	5f 4f       	sbci	r21, 0xFF	; 255
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
	 xPumpID=atoi(sPumpID);
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
	 if (Pos(strSub,SGeniusFlow)<FLength){
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
    d616:	96 01       	movw	r18, r12
    d618:	28 1b       	sub	r18, r24
    d61a:	39 0b       	sbc	r19, r25
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    d61c:	c7 01       	movw	r24, r14
    d61e:	b8 01       	movw	r22, r16
    d620:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 xCsum=atoi(sCSum);
    d624:	c8 01       	movw	r24, r16
    d626:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
    d62a:	f4 01       	movw	r30, r8
    d62c:	80 83       	st	Z, r24
	 sprintf_P(strSend,PSTR("%d"),xPumpID);
	 uart_print(1,1,strSend);
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}
    d62e:	a7 96       	adiw	r28, 0x27	; 39
    d630:	0f b6       	in	r0, 0x3f	; 63
    d632:	f8 94       	cli
    d634:	de bf       	out	0x3e, r29	; 62
    d636:	0f be       	out	0x3f, r0	; 63
    d638:	cd bf       	out	0x3d, r28	; 61
    d63a:	cf 91       	pop	r28
    d63c:	df 91       	pop	r29
    d63e:	1f 91       	pop	r17
    d640:	0f 91       	pop	r16
    d642:	ff 90       	pop	r15
    d644:	ef 90       	pop	r14
    d646:	df 90       	pop	r13
    d648:	cf 90       	pop	r12
    d64a:	bf 90       	pop	r11
    d64c:	af 90       	pop	r10
    d64e:	9f 90       	pop	r9
    d650:	8f 90       	pop	r8
    d652:	08 95       	ret

0000d654 <IsGeniusCommand>:

char IsGeniusCommand(char GCommand){
    d654:	ff 92       	push	r15
    d656:	0f 93       	push	r16
    d658:	1f 93       	push	r17
    d65a:	df 93       	push	r29
    d65c:	cf 93       	push	r28
    d65e:	cd b7       	in	r28, 0x3d	; 61
    d660:	de b7       	in	r29, 0x3e	; 62
    d662:	2a 97       	sbiw	r28, 0x0a	; 10
    d664:	0f b6       	in	r0, 0x3f	; 63
    d666:	f8 94       	cli
    d668:	de bf       	out	0x3e, r29	; 62
    d66a:	0f be       	out	0x3f, r0	; 63
    d66c:	cd bf       	out	0x3d, r28	; 61
    d66e:	f8 2e       	mov	r15, r24
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
    d670:	00 d0       	rcall	.+0      	; 0xd672 <IsGeniusCommand+0x1e>
    d672:	00 d0       	rcall	.+0      	; 0xd674 <IsGeniusCommand+0x20>
    d674:	8e 01       	movw	r16, r28
    d676:	0f 5f       	subi	r16, 0xFF	; 255
    d678:	1f 4f       	sbci	r17, 0xFF	; 255
    d67a:	ad b7       	in	r26, 0x3d	; 61
    d67c:	be b7       	in	r27, 0x3e	; 62
    d67e:	12 96       	adiw	r26, 0x02	; 2
    d680:	1c 93       	st	X, r17
    d682:	0e 93       	st	-X, r16
    d684:	11 97       	sbiw	r26, 0x01	; 1
    d686:	2b e1       	ldi	r18, 0x1B	; 27
    d688:	35 e0       	ldi	r19, 0x05	; 5
    d68a:	14 96       	adiw	r26, 0x04	; 4
    d68c:	3c 93       	st	X, r19
    d68e:	2e 93       	st	-X, r18
    d690:	13 97       	sbiw	r26, 0x03	; 3
    d692:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 for(i=0;i<strlen(CommandList);i++){
    d696:	f8 01       	movw	r30, r16
    d698:	01 90       	ld	r0, Z+
    d69a:	00 20       	and	r0, r0
    d69c:	e9 f7       	brne	.-6      	; 0xd698 <IsGeniusCommand+0x44>
    d69e:	31 97       	sbiw	r30, 0x01	; 1
    d6a0:	e0 1b       	sub	r30, r16
    d6a2:	f1 0b       	sbc	r31, r17
    d6a4:	0f 90       	pop	r0
    d6a6:	0f 90       	pop	r0
    d6a8:	0f 90       	pop	r0
    d6aa:	0f 90       	pop	r0
    d6ac:	80 e0       	ldi	r24, 0x00	; 0
    d6ae:	07 c0       	rjmp	.+14     	; 0xd6be <IsGeniusCommand+0x6a>
	    if (CommandList[i]==GCommand){
    d6b0:	20 0f       	add	r18, r16
    d6b2:	31 1f       	adc	r19, r17
    d6b4:	d9 01       	movw	r26, r18
    d6b6:	9c 91       	ld	r25, X
    d6b8:	9f 15       	cp	r25, r15
    d6ba:	41 f0       	breq	.+16     	; 0xd6cc <IsGeniusCommand+0x78>

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
    d6bc:	8f 5f       	subi	r24, 0xFF	; 255
    d6be:	28 2f       	mov	r18, r24
    d6c0:	30 e0       	ldi	r19, 0x00	; 0
    d6c2:	2e 17       	cp	r18, r30
    d6c4:	3f 07       	cpc	r19, r31
    d6c6:	a0 f3       	brcs	.-24     	; 0xd6b0 <IsGeniusCommand+0x5c>
*/
}

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
    d6c8:	80 e0       	ldi	r24, 0x00	; 0
    d6ca:	01 c0       	rjmp	.+2      	; 0xd6ce <IsGeniusCommand+0x7a>
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
	    if (CommandList[i]==GCommand){
		    Result=True;
    d6cc:	81 e0       	ldi	r24, 0x01	; 1
			break;
			}
	 }
   return Result;	 
}
    d6ce:	2a 96       	adiw	r28, 0x0a	; 10
    d6d0:	0f b6       	in	r0, 0x3f	; 63
    d6d2:	f8 94       	cli
    d6d4:	de bf       	out	0x3e, r29	; 62
    d6d6:	0f be       	out	0x3f, r0	; 63
    d6d8:	cd bf       	out	0x3d, r28	; 61
    d6da:	cf 91       	pop	r28
    d6dc:	df 91       	pop	r29
    d6de:	1f 91       	pop	r17
    d6e0:	0f 91       	pop	r16
    d6e2:	ff 90       	pop	r15
    d6e4:	08 95       	ret

0000d6e6 <SumChecksum>:
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
    d6e6:	9c 01       	movw	r18, r24
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    d6e8:	fc 01       	movw	r30, r24
    d6ea:	01 90       	ld	r0, Z+
    d6ec:	00 20       	and	r0, r0
    d6ee:	e9 f7       	brne	.-6      	; 0xd6ea <SumChecksum+0x4>
    d6f0:	31 97       	sbiw	r30, 0x01	; 1
    d6f2:	e8 1b       	sub	r30, r24
    d6f4:	f9 0b       	sbc	r31, r25
    d6f6:	60 e0       	ldi	r22, 0x00	; 0
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
    d6f8:	80 e0       	ldi	r24, 0x00	; 0
    d6fa:	90 e0       	ldi	r25, 0x00	; 0
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    d6fc:	07 c0       	rjmp	.+14     	; 0xd70c <SumChecksum+0x26>
	     SigmaSum=SigmaSum+strChecked[i];
    d6fe:	42 0f       	add	r20, r18
    d700:	53 1f       	adc	r21, r19
    d702:	da 01       	movw	r26, r20
    d704:	4c 91       	ld	r20, X
    d706:	84 0f       	add	r24, r20
    d708:	91 1d       	adc	r25, r1
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    d70a:	6f 5f       	subi	r22, 0xFF	; 255
    d70c:	46 2f       	mov	r20, r22
    d70e:	50 e0       	ldi	r21, 0x00	; 0
    d710:	4e 17       	cp	r20, r30
    d712:	5f 07       	cpc	r21, r31
    d714:	a0 f3       	brcs	.-24     	; 0xd6fe <SumChecksum+0x18>
	     SigmaSum=SigmaSum+strChecked[i];
	 }
	 Result=(SigmaSum%255);
    d716:	6f ef       	ldi	r22, 0xFF	; 255
    d718:	70 e0       	ldi	r23, 0x00	; 0
    d71a:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
	 if (Result==0)Result=255;
    d71e:	88 23       	and	r24, r24
    d720:	09 f4       	brne	.+2      	; 0xd724 <SumChecksum+0x3e>
    d722:	8f ef       	ldi	r24, 0xFF	; 255
   return Result;
}
    d724:	08 95       	ret

0000d726 <NormalizeDecimal>:

void NormalizeDecimal(char CurrentDecimal, char NewDecimal, char *Result){// 01234567,89
    d726:	68 2f       	mov	r22, r24
		 StrPosCopy(Result,SResult,DeltaDec,Length-DeltaDec);
		 	           
	 
     }
*/
     FormatDecimal(Result,CurrentDecimal);
    d728:	ca 01       	movw	r24, r20
    d72a:	0e 94 c7 2a 	call	0x558e	; 0x558e <FormatDecimal>
}
    d72e:	08 95       	ret

0000d730 <GetTransactionVolume>:

void GetTransactionVolume(char iPumpID,char *Result){
    d730:	1f 93       	push	r17
    d732:	cf 93       	push	r28
    d734:	df 93       	push	r29
    d736:	18 2f       	mov	r17, r24
    d738:	eb 01       	movw	r28, r22
     AddZeroLead(Result,10);
    d73a:	cb 01       	movw	r24, r22
    d73c:	6a e0       	ldi	r22, 0x0A	; 10
    d73e:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
    d742:	00 d0       	rcall	.+0      	; 0xd744 <GetTransactionVolume+0x14>
    d744:	00 d0       	rcall	.+0      	; 0xd746 <GetTransactionVolume+0x16>
    d746:	00 d0       	rcall	.+0      	; 0xd748 <GetTransactionVolume+0x18>
    d748:	ed b7       	in	r30, 0x3d	; 61
    d74a:	fe b7       	in	r31, 0x3e	; 62
    d74c:	31 96       	adiw	r30, 0x01	; 1
    d74e:	ad b7       	in	r26, 0x3d	; 61
    d750:	be b7       	in	r27, 0x3e	; 62
    d752:	12 96       	adiw	r26, 0x02	; 2
    d754:	dc 93       	st	X, r29
    d756:	ce 93       	st	-X, r28
    d758:	11 97       	sbiw	r26, 0x01	; 1
    d75a:	20 e1       	ldi	r18, 0x10	; 16
    d75c:	35 e0       	ldi	r19, 0x05	; 5
    d75e:	33 83       	std	Z+3, r19	; 0x03
    d760:	22 83       	std	Z+2, r18	; 0x02
    d762:	81 2f       	mov	r24, r17
    d764:	90 e0       	ldi	r25, 0x00	; 0
    d766:	8f 70       	andi	r24, 0x0F	; 15
    d768:	90 70       	andi	r25, 0x00	; 0
    d76a:	45 e3       	ldi	r20, 0x35	; 53
    d76c:	50 e0       	ldi	r21, 0x00	; 0
    d76e:	84 9f       	mul	r24, r20
    d770:	90 01       	movw	r18, r0
    d772:	85 9f       	mul	r24, r21
    d774:	30 0d       	add	r19, r0
    d776:	94 9f       	mul	r25, r20
    d778:	30 0d       	add	r19, r0
    d77a:	11 24       	eor	r1, r1
    d77c:	27 55       	subi	r18, 0x57	; 87
    d77e:	39 4f       	sbci	r19, 0xF9	; 249
    d780:	35 83       	std	Z+5, r19	; 0x05
    d782:	24 83       	std	Z+4, r18	; 0x04
    d784:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    d788:	8d b7       	in	r24, 0x3d	; 61
    d78a:	9e b7       	in	r25, 0x3e	; 62
    d78c:	06 96       	adiw	r24, 0x06	; 6
    d78e:	0f b6       	in	r0, 0x3f	; 63
    d790:	f8 94       	cli
    d792:	9e bf       	out	0x3e, r25	; 62
    d794:	0f be       	out	0x3f, r0	; 63
    d796:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
    d798:	df 91       	pop	r29
    d79a:	cf 91       	pop	r28
    d79c:	1f 91       	pop	r17
    d79e:	08 95       	ret

0000d7a0 <GetTransactionMoney>:
void GetTransactionMoney(char iPumpID,char *Result){
    d7a0:	1f 93       	push	r17
    d7a2:	cf 93       	push	r28
    d7a4:	df 93       	push	r29
    d7a6:	18 2f       	mov	r17, r24
    d7a8:	eb 01       	movw	r28, r22
     AddZeroLead(Result,10);
    d7aa:	cb 01       	movw	r24, r22
    d7ac:	6a e0       	ldi	r22, 0x0A	; 10
    d7ae:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
    d7b2:	00 d0       	rcall	.+0      	; 0xd7b4 <GetTransactionMoney+0x14>
    d7b4:	00 d0       	rcall	.+0      	; 0xd7b6 <GetTransactionMoney+0x16>
    d7b6:	00 d0       	rcall	.+0      	; 0xd7b8 <GetTransactionMoney+0x18>
    d7b8:	ed b7       	in	r30, 0x3d	; 61
    d7ba:	fe b7       	in	r31, 0x3e	; 62
    d7bc:	31 96       	adiw	r30, 0x01	; 1
    d7be:	ad b7       	in	r26, 0x3d	; 61
    d7c0:	be b7       	in	r27, 0x3e	; 62
    d7c2:	12 96       	adiw	r26, 0x02	; 2
    d7c4:	dc 93       	st	X, r29
    d7c6:	ce 93       	st	-X, r28
    d7c8:	11 97       	sbiw	r26, 0x01	; 1
    d7ca:	2d e0       	ldi	r18, 0x0D	; 13
    d7cc:	35 e0       	ldi	r19, 0x05	; 5
    d7ce:	33 83       	std	Z+3, r19	; 0x03
    d7d0:	22 83       	std	Z+2, r18	; 0x02
    d7d2:	81 2f       	mov	r24, r17
    d7d4:	90 e0       	ldi	r25, 0x00	; 0
    d7d6:	8f 70       	andi	r24, 0x0F	; 15
    d7d8:	90 70       	andi	r25, 0x00	; 0
    d7da:	45 e3       	ldi	r20, 0x35	; 53
    d7dc:	50 e0       	ldi	r21, 0x00	; 0
    d7de:	84 9f       	mul	r24, r20
    d7e0:	90 01       	movw	r18, r0
    d7e2:	85 9f       	mul	r24, r21
    d7e4:	30 0d       	add	r19, r0
    d7e6:	94 9f       	mul	r25, r20
    d7e8:	30 0d       	add	r19, r0
    d7ea:	11 24       	eor	r1, r1
    d7ec:	2e 54       	subi	r18, 0x4E	; 78
    d7ee:	39 4f       	sbci	r19, 0xF9	; 249
    d7f0:	35 83       	std	Z+5, r19	; 0x05
    d7f2:	24 83       	std	Z+4, r18	; 0x04
    d7f4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    d7f8:	8d b7       	in	r24, 0x3d	; 61
    d7fa:	9e b7       	in	r25, 0x3e	; 62
    d7fc:	06 96       	adiw	r24, 0x06	; 6
    d7fe:	0f b6       	in	r0, 0x3f	; 63
    d800:	f8 94       	cli
    d802:	9e bf       	out	0x3e, r25	; 62
    d804:	0f be       	out	0x3f, r0	; 63
    d806:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}
    d808:	df 91       	pop	r29
    d80a:	cf 91       	pop	r28
    d80c:	1f 91       	pop	r17
    d80e:	08 95       	ret

0000d810 <ComposeDatetime>:
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}


void ComposeDatetime(char *Result){// 2010/10/01 16:27:44
    d810:	2f 92       	push	r2
    d812:	3f 92       	push	r3
    d814:	4f 92       	push	r4
    d816:	5f 92       	push	r5
    d818:	6f 92       	push	r6
    d81a:	7f 92       	push	r7
    d81c:	8f 92       	push	r8
    d81e:	9f 92       	push	r9
    d820:	af 92       	push	r10
    d822:	bf 92       	push	r11
    d824:	cf 92       	push	r12
    d826:	df 92       	push	r13
    d828:	ef 92       	push	r14
    d82a:	ff 92       	push	r15
    d82c:	0f 93       	push	r16
    d82e:	1f 93       	push	r17
    d830:	df 93       	push	r29
    d832:	cf 93       	push	r28
    d834:	cd b7       	in	r28, 0x3d	; 61
    d836:	de b7       	in	r29, 0x3e	; 62
    d838:	62 97       	sbiw	r28, 0x12	; 18
    d83a:	0f b6       	in	r0, 0x3f	; 63
    d83c:	f8 94       	cli
    d83e:	de bf       	out	0x3e, r29	; 62
    d840:	0f be       	out	0x3f, r0	; 63
    d842:	cd bf       	out	0x3d, r28	; 61
    d844:	1c 01       	movw	r2, r24
	 char sYear[3],sMonth[3],sDay[3];
	 char sHour[3],sMinute[3],sSecond[3];
     
     StrPosCopy(strSystemDate,sDay,0,2);
    d846:	08 e9       	ldi	r16, 0x98	; 152
    d848:	14 e0       	ldi	r17, 0x04	; 4
    d84a:	b7 e0       	ldi	r27, 0x07	; 7
    d84c:	4b 2e       	mov	r4, r27
    d84e:	51 2c       	mov	r5, r1
    d850:	4c 0e       	add	r4, r28
    d852:	5d 1e       	adc	r5, r29
    d854:	c8 01       	movw	r24, r16
    d856:	b2 01       	movw	r22, r4
    d858:	40 e0       	ldi	r20, 0x00	; 0
    d85a:	50 e0       	ldi	r21, 0x00	; 0
    d85c:	22 e0       	ldi	r18, 0x02	; 2
    d85e:	30 e0       	ldi	r19, 0x00	; 0
    d860:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(strSystemDate,sMonth,3,2);
    d864:	a4 e0       	ldi	r26, 0x04	; 4
    d866:	6a 2e       	mov	r6, r26
    d868:	71 2c       	mov	r7, r1
    d86a:	6c 0e       	add	r6, r28
    d86c:	7d 1e       	adc	r7, r29
    d86e:	c8 01       	movw	r24, r16
    d870:	b3 01       	movw	r22, r6
    d872:	43 e0       	ldi	r20, 0x03	; 3
    d874:	50 e0       	ldi	r21, 0x00	; 0
    d876:	22 e0       	ldi	r18, 0x02	; 2
    d878:	30 e0       	ldi	r19, 0x00	; 0
    d87a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(strSystemDate,sYear,6,2);
    d87e:	c8 01       	movw	r24, r16
    d880:	7e 01       	movw	r14, r28
    d882:	08 94       	sec
    d884:	e1 1c       	adc	r14, r1
    d886:	f1 1c       	adc	r15, r1
    d888:	b7 01       	movw	r22, r14
    d88a:	46 e0       	ldi	r20, 0x06	; 6
    d88c:	50 e0       	ldi	r21, 0x00	; 0
    d88e:	22 e0       	ldi	r18, 0x02	; 2
    d890:	30 e0       	ldi	r19, 0x00	; 0
    d892:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

     StrPosCopy(strSystemTime,sHour,0,2);
    d896:	02 e5       	ldi	r16, 0x52	; 82
    d898:	19 e0       	ldi	r17, 0x09	; 9
    d89a:	fa e0       	ldi	r31, 0x0A	; 10
    d89c:	cf 2e       	mov	r12, r31
    d89e:	d1 2c       	mov	r13, r1
    d8a0:	cc 0e       	add	r12, r28
    d8a2:	dd 1e       	adc	r13, r29
    d8a4:	c8 01       	movw	r24, r16
    d8a6:	b6 01       	movw	r22, r12
    d8a8:	40 e0       	ldi	r20, 0x00	; 0
    d8aa:	50 e0       	ldi	r21, 0x00	; 0
    d8ac:	22 e0       	ldi	r18, 0x02	; 2
    d8ae:	30 e0       	ldi	r19, 0x00	; 0
    d8b0:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(strSystemTime,sMinute,3,2);
    d8b4:	ed e0       	ldi	r30, 0x0D	; 13
    d8b6:	ae 2e       	mov	r10, r30
    d8b8:	b1 2c       	mov	r11, r1
    d8ba:	ac 0e       	add	r10, r28
    d8bc:	bd 1e       	adc	r11, r29
    d8be:	c8 01       	movw	r24, r16
    d8c0:	b5 01       	movw	r22, r10
    d8c2:	43 e0       	ldi	r20, 0x03	; 3
    d8c4:	50 e0       	ldi	r21, 0x00	; 0
    d8c6:	22 e0       	ldi	r18, 0x02	; 2
    d8c8:	30 e0       	ldi	r19, 0x00	; 0
    d8ca:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
     StrPosCopy(strSystemTime,sSecond,6,2);
    d8ce:	70 e1       	ldi	r23, 0x10	; 16
    d8d0:	87 2e       	mov	r8, r23
    d8d2:	91 2c       	mov	r9, r1
    d8d4:	8c 0e       	add	r8, r28
    d8d6:	9d 1e       	adc	r9, r29
    d8d8:	c8 01       	movw	r24, r16
    d8da:	b4 01       	movw	r22, r8
    d8dc:	46 e0       	ldi	r20, 0x06	; 6
    d8de:	50 e0       	ldi	r21, 0x00	; 0
    d8e0:	22 e0       	ldi	r18, 0x02	; 2
    d8e2:	30 e0       	ldi	r19, 0x00	; 0
    d8e4:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
    d8e8:	8d b7       	in	r24, 0x3d	; 61
    d8ea:	9e b7       	in	r25, 0x3e	; 62
    d8ec:	40 97       	sbiw	r24, 0x10	; 16
    d8ee:	0f b6       	in	r0, 0x3f	; 63
    d8f0:	f8 94       	cli
    d8f2:	9e bf       	out	0x3e, r25	; 62
    d8f4:	0f be       	out	0x3f, r0	; 63
    d8f6:	8d bf       	out	0x3d, r24	; 61
    d8f8:	ed b7       	in	r30, 0x3d	; 61
    d8fa:	fe b7       	in	r31, 0x3e	; 62
    d8fc:	31 96       	adiw	r30, 0x01	; 1
    d8fe:	ad b7       	in	r26, 0x3d	; 61
    d900:	be b7       	in	r27, 0x3e	; 62
    d902:	12 96       	adiw	r26, 0x02	; 2
    d904:	3c 92       	st	X, r3
    d906:	2e 92       	st	-X, r2
    d908:	11 97       	sbiw	r26, 0x01	; 1
    d90a:	89 ef       	ldi	r24, 0xF9	; 249
    d90c:	94 e0       	ldi	r25, 0x04	; 4
    d90e:	93 83       	std	Z+3, r25	; 0x03
    d910:	82 83       	std	Z+2, r24	; 0x02
    d912:	f5 82       	std	Z+5, r15	; 0x05
    d914:	e4 82       	std	Z+4, r14	; 0x04
    d916:	77 82       	std	Z+7, r7	; 0x07
    d918:	66 82       	std	Z+6, r6	; 0x06
    d91a:	51 86       	std	Z+9, r5	; 0x09
    d91c:	40 86       	std	Z+8, r4	; 0x08
    d91e:	d3 86       	std	Z+11, r13	; 0x0b
    d920:	c2 86       	std	Z+10, r12	; 0x0a
    d922:	b5 86       	std	Z+13, r11	; 0x0d
    d924:	a4 86       	std	Z+12, r10	; 0x0c
    d926:	97 86       	std	Z+15, r9	; 0x0f
    d928:	86 86       	std	Z+14, r8	; 0x0e
    d92a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    d92e:	8d b7       	in	r24, 0x3d	; 61
    d930:	9e b7       	in	r25, 0x3e	; 62
    d932:	40 96       	adiw	r24, 0x10	; 16
    d934:	0f b6       	in	r0, 0x3f	; 63
    d936:	f8 94       	cli
    d938:	9e bf       	out	0x3e, r25	; 62
    d93a:	0f be       	out	0x3f, r0	; 63
    d93c:	8d bf       	out	0x3d, r24	; 61
}
    d93e:	62 96       	adiw	r28, 0x12	; 18
    d940:	0f b6       	in	r0, 0x3f	; 63
    d942:	f8 94       	cli
    d944:	de bf       	out	0x3e, r29	; 62
    d946:	0f be       	out	0x3f, r0	; 63
    d948:	cd bf       	out	0x3d, r28	; 61
    d94a:	cf 91       	pop	r28
    d94c:	df 91       	pop	r29
    d94e:	1f 91       	pop	r17
    d950:	0f 91       	pop	r16
    d952:	ff 90       	pop	r15
    d954:	ef 90       	pop	r14
    d956:	df 90       	pop	r13
    d958:	cf 90       	pop	r12
    d95a:	bf 90       	pop	r11
    d95c:	af 90       	pop	r10
    d95e:	9f 90       	pop	r9
    d960:	8f 90       	pop	r8
    d962:	7f 90       	pop	r7
    d964:	6f 90       	pop	r6
    d966:	5f 90       	pop	r5
    d968:	4f 90       	pop	r4
    d96a:	3f 90       	pop	r3
    d96c:	2f 90       	pop	r2
    d96e:	08 95       	ret

0000d970 <GetPumpID>:


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
    d970:	1f 93       	push	r17
    d972:	df 93       	push	r29
    d974:	cf 93       	push	r28
    d976:	cd b7       	in	r28, 0x3d	; 61
    d978:	de b7       	in	r29, 0x3e	; 62
    d97a:	28 97       	sbiw	r28, 0x08	; 8
    d97c:	0f b6       	in	r0, 0x3f	; 63
    d97e:	f8 94       	cli
    d980:	de bf       	out	0x3e, r29	; 62
    d982:	0f be       	out	0x3f, r0	; 63
    d984:	cd bf       	out	0x3d, r28	; 61
    d986:	18 2f       	mov	r17, r24
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    d988:	ce 01       	movw	r24, r28
    d98a:	01 96       	adiw	r24, 0x01	; 1
    d98c:	65 e4       	ldi	r22, 0x45	; 69
    d98e:	70 e0       	ldi	r23, 0x00	; 0
    d990:	48 e0       	ldi	r20, 0x08	; 8
    d992:	50 e0       	ldi	r21, 0x00	; 0
    d994:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	 Result=0;
	 if ((FIPAddr>0) && (FIPAddr<8)){
    d998:	81 2f       	mov	r24, r17
    d99a:	81 50       	subi	r24, 0x01	; 1
    d99c:	87 30       	cpi	r24, 0x07	; 7
    d99e:	28 f4       	brcc	.+10     	; 0xd9aa <GetPumpID+0x3a>
	    Result=PPumpID[FIPAddr-1];
    d9a0:	fe 01       	movw	r30, r28
    d9a2:	e1 0f       	add	r30, r17
    d9a4:	f1 1d       	adc	r31, r1
    d9a6:	80 81       	ld	r24, Z
    d9a8:	01 c0       	rjmp	.+2      	; 0xd9ac <GetPumpID+0x3c>


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 Result=0;
    d9aa:	80 e0       	ldi	r24, 0x00	; 0
	 if ((FIPAddr>0) && (FIPAddr<8)){
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}
    d9ac:	28 96       	adiw	r28, 0x08	; 8
    d9ae:	0f b6       	in	r0, 0x3f	; 63
    d9b0:	f8 94       	cli
    d9b2:	de bf       	out	0x3e, r29	; 62
    d9b4:	0f be       	out	0x3f, r0	; 63
    d9b6:	cd bf       	out	0x3d, r28	; 61
    d9b8:	cf 91       	pop	r28
    d9ba:	df 91       	pop	r29
    d9bc:	1f 91       	pop	r17
    d9be:	08 95       	ret

0000d9c0 <sendMessage98>:
	//if (xFIP_ID>16)xFIP_ID=16;
	sprintf_P(strSend,PSTR("%s%s%s%s98%.2dF968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,xFIP_ID);
	uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/
    sprintf_P(strFIP_ID,PSTR("%.2d"),GetPumpID(FIPAddr));
    d9c0:	0e 94 b8 6c 	call	0xd970	; 0xd970 <GetPumpID>
    d9c4:	00 d0       	rcall	.+0      	; 0xd9c6 <sendMessage98+0x6>
    d9c6:	00 d0       	rcall	.+0      	; 0xd9c8 <sendMessage98+0x8>
    d9c8:	00 d0       	rcall	.+0      	; 0xd9ca <sendMessage98+0xa>
    d9ca:	ed b7       	in	r30, 0x3d	; 61
    d9cc:	fe b7       	in	r31, 0x3e	; 62
    d9ce:	31 96       	adiw	r30, 0x01	; 1
    d9d0:	27 e9       	ldi	r18, 0x97	; 151
    d9d2:	38 e0       	ldi	r19, 0x08	; 8
    d9d4:	ad b7       	in	r26, 0x3d	; 61
    d9d6:	be b7       	in	r27, 0x3e	; 62
    d9d8:	12 96       	adiw	r26, 0x02	; 2
    d9da:	3c 93       	st	X, r19
    d9dc:	2e 93       	st	-X, r18
    d9de:	11 97       	sbiw	r26, 0x01	; 1
    d9e0:	25 ea       	ldi	r18, 0xA5	; 165
    d9e2:	32 e2       	ldi	r19, 0x22	; 34
    d9e4:	33 83       	std	Z+3, r19	; 0x03
    d9e6:	22 83       	std	Z+2, r18	; 0x02
    d9e8:	84 83       	std	Z+4, r24	; 0x04
    d9ea:	15 82       	std	Z+5, r1	; 0x05
    d9ec:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	IFTSendMessage(MSG_98);
    d9f0:	8d b7       	in	r24, 0x3d	; 61
    d9f2:	9e b7       	in	r25, 0x3e	; 62
    d9f4:	06 96       	adiw	r24, 0x06	; 6
    d9f6:	0f b6       	in	r0, 0x3f	; 63
    d9f8:	f8 94       	cli
    d9fa:	9e bf       	out	0x3e, r25	; 62
    d9fc:	0f be       	out	0x3f, r0	; 63
    d9fe:	8d bf       	out	0x3d, r24	; 61
    da00:	88 e9       	ldi	r24, 0x98	; 152
    da02:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <IFTSendMessage>
	IsBusyMsg11=True;
    da06:	81 e0       	ldi	r24, 0x01	; 1
    da08:	80 93 8b 02 	sts	0x028B, r24
}
    da0c:	08 95       	ret

0000da0e <GetFIPAddr>:
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
    da0e:	ff 92       	push	r15
    da10:	0f 93       	push	r16
    da12:	1f 93       	push	r17
    da14:	df 93       	push	r29
    da16:	cf 93       	push	r28
    da18:	cd b7       	in	r28, 0x3d	; 61
    da1a:	de b7       	in	r29, 0x3e	; 62
    da1c:	28 97       	sbiw	r28, 0x08	; 8
    da1e:	0f b6       	in	r0, 0x3f	; 63
    da20:	f8 94       	cli
    da22:	de bf       	out	0x3e, r29	; 62
    da24:	0f be       	out	0x3f, r0	; 63
    da26:	cd bf       	out	0x3d, r28	; 61
    da28:	f8 2e       	mov	r15, r24
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    da2a:	8e 01       	movw	r16, r28
    da2c:	0f 5f       	subi	r16, 0xFF	; 255
    da2e:	1f 4f       	sbci	r17, 0xFF	; 255
    da30:	c8 01       	movw	r24, r16
    da32:	65 e4       	ldi	r22, 0x45	; 69
    da34:	70 e0       	ldi	r23, 0x00	; 0
    da36:	48 e0       	ldi	r20, 0x08	; 8
    da38:	50 e0       	ldi	r21, 0x00	; 0
    da3a:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
    da3e:	f8 01       	movw	r30, r16
     for(i=0;i<8;i++){
    da40:	80 e0       	ldi	r24, 0x00	; 0
	     if (PPumpID[i]==iPumpID){
    da42:	91 91       	ld	r25, Z+
    da44:	8f 5f       	subi	r24, 0xFF	; 255
    da46:	9f 15       	cp	r25, r15
    da48:	19 f0       	breq	.+6      	; 0xda50 <GetFIPAddr+0x42>

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
     for(i=0;i<8;i++){
    da4a:	88 30       	cpi	r24, 0x08	; 8
    da4c:	d1 f7       	brne	.-12     	; 0xda42 <GetFIPAddr+0x34>
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
    da4e:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
   return Result;
}
    da50:	28 96       	adiw	r28, 0x08	; 8
    da52:	0f b6       	in	r0, 0x3f	; 63
    da54:	f8 94       	cli
    da56:	de bf       	out	0x3e, r29	; 62
    da58:	0f be       	out	0x3f, r0	; 63
    da5a:	cd bf       	out	0x3d, r28	; 61
    da5c:	cf 91       	pop	r28
    da5e:	df 91       	pop	r29
    da60:	1f 91       	pop	r17
    da62:	0f 91       	pop	r16
    da64:	ff 90       	pop	r15
    da66:	08 95       	ret

0000da68 <GetTotalizerMoney>:
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
void GetTotalizerMoney(char iPumpID,char iGrade, char *Result){
    da68:	ff 92       	push	r15
    da6a:	0f 93       	push	r16
    da6c:	1f 93       	push	r17
    da6e:	df 93       	push	r29
    da70:	cf 93       	push	r28
    da72:	0f 92       	push	r0
    da74:	cd b7       	in	r28, 0x3d	; 61
    da76:	de b7       	in	r29, 0x3e	; 62
    da78:	f8 2e       	mov	r15, r24
    da7a:	26 2f       	mov	r18, r22
    da7c:	8a 01       	movw	r16, r20
     char FIPAddr;
     AddZeroLead(Result,13); 
    da7e:	ca 01       	movw	r24, r20
    da80:	6d e0       	ldi	r22, 0x0D	; 13
    da82:	29 83       	std	Y+1, r18	; 0x01
    da84:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    da88:	8f 2d       	mov	r24, r15
    da8a:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
	 if (FIPAddr>0){
    da8e:	29 81       	ldd	r18, Y+1	; 0x01
    da90:	88 23       	and	r24, r24
    da92:	31 f0       	breq	.+12     	; 0xdaa0 <GetTotalizerMoney+0x38>
	    FIPAddr=FIPAddr-1;
    da94:	48 2f       	mov	r20, r24
    da96:	41 50       	subi	r20, 0x01	; 1
	    GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    da98:	81 e0       	ldi	r24, 0x01	; 1
    da9a:	61 e0       	ldi	r22, 0x01	; 1
    da9c:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}
    daa0:	0f 90       	pop	r0
    daa2:	cf 91       	pop	r28
    daa4:	df 91       	pop	r29
    daa6:	1f 91       	pop	r17
    daa8:	0f 91       	pop	r16
    daaa:	ff 90       	pop	r15
    daac:	08 95       	ret

0000daae <GetTotalizerVolume>:
     AddZeroLead(Result,10);
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}

void GetTotalizerVolume(char iPumpID,char iGrade,char *Result){
    daae:	ff 92       	push	r15
    dab0:	0f 93       	push	r16
    dab2:	1f 93       	push	r17
    dab4:	df 93       	push	r29
    dab6:	cf 93       	push	r28
    dab8:	0f 92       	push	r0
    daba:	cd b7       	in	r28, 0x3d	; 61
    dabc:	de b7       	in	r29, 0x3e	; 62
    dabe:	f8 2e       	mov	r15, r24
    dac0:	26 2f       	mov	r18, r22
    dac2:	8a 01       	movw	r16, r20
     char FIPAddr;
     AddZeroLead(Result,11);
    dac4:	ca 01       	movw	r24, r20
    dac6:	6b e0       	ldi	r22, 0x0B	; 11
    dac8:	29 83       	std	Y+1, r18	; 0x01
    daca:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    dace:	8f 2d       	mov	r24, r15
    dad0:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
	 if (FIPAddr>0){
    dad4:	29 81       	ldd	r18, Y+1	; 0x01
    dad6:	88 23       	and	r24, r24
    dad8:	31 f0       	breq	.+12     	; 0xdae6 <GetTotalizerVolume+0x38>
	     FIPAddr=FIPAddr-1;	     
    dada:	48 2f       	mov	r20, r24
    dadc:	41 50       	subi	r20, 0x01	; 1
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    dade:	80 e0       	ldi	r24, 0x00	; 0
    dae0:	61 e0       	ldi	r22, 0x01	; 1
    dae2:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
    dae6:	0f 90       	pop	r0
    dae8:	cf 91       	pop	r28
    daea:	df 91       	pop	r29
    daec:	1f 91       	pop	r17
    daee:	0f 91       	pop	r16
    daf0:	ff 90       	pop	r15
    daf2:	08 95       	ret

0000daf4 <systemGenerateReport>:
	 }
}

//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
//			cmdPrint=procMessage81();
void systemGenerateReport(){
    daf4:	2f 92       	push	r2
    daf6:	3f 92       	push	r3
    daf8:	4f 92       	push	r4
    dafa:	5f 92       	push	r5
    dafc:	6f 92       	push	r6
    dafe:	7f 92       	push	r7
    db00:	8f 92       	push	r8
    db02:	9f 92       	push	r9
    db04:	af 92       	push	r10
    db06:	bf 92       	push	r11
    db08:	cf 92       	push	r12
    db0a:	df 92       	push	r13
    db0c:	ef 92       	push	r14
    db0e:	ff 92       	push	r15
    db10:	0f 93       	push	r16
    db12:	1f 93       	push	r17
    db14:	df 93       	push	r29
    db16:	cf 93       	push	r28
    db18:	cd b7       	in	r28, 0x3d	; 61
    db1a:	de b7       	in	r29, 0x3e	; 62
    db1c:	c5 5f       	subi	r28, 0xF5	; 245
    db1e:	d0 40       	sbci	r29, 0x00	; 0
    db20:	0f b6       	in	r0, 0x3f	; 63
    db22:	f8 94       	cli
    db24:	de bf       	out	0x3e, r29	; 62
    db26:	0f be       	out	0x3f, r0	; 63
    db28:	cd bf       	out	0x3d, r28	; 61
	   char strTabSpace[20],strTabSpace2[20];
	   char iTotal;//,PadLength;
	   char sPrice[10],strProductPrice[20];
	   char FIPAddr;

     switch(stGenerateReport){
    db2a:	80 91 c6 02 	lds	r24, 0x02C6
    db2e:	86 30       	cpi	r24, 0x06	; 6
    db30:	09 f4       	brne	.+2      	; 0xdb34 <systemGenerateReport+0x40>
    db32:	f8 c1       	rjmp	.+1008   	; 0xdf24 <systemGenerateReport+0x430>
    db34:	87 30       	cpi	r24, 0x07	; 7
    db36:	98 f4       	brcc	.+38     	; 0xdb5e <systemGenerateReport+0x6a>
    db38:	82 30       	cpi	r24, 0x02	; 2
    db3a:	09 f4       	brne	.+2      	; 0xdb3e <systemGenerateReport+0x4a>
    db3c:	9f c0       	rjmp	.+318    	; 0xdc7c <systemGenerateReport+0x188>
    db3e:	83 30       	cpi	r24, 0x03	; 3
    db40:	38 f4       	brcc	.+14     	; 0xdb50 <systemGenerateReport+0x5c>
    db42:	88 23       	and	r24, r24
    db44:	31 f1       	breq	.+76     	; 0xdb92 <systemGenerateReport+0x9e>
    db46:	81 30       	cpi	r24, 0x01	; 1
    db48:	11 f0       	breq	.+4      	; 0xdb4e <systemGenerateReport+0x5a>
    db4a:	0c 94 c7 76 	jmp	0xed8e	; 0xed8e <systemGenerateReport+0x129a>
    db4e:	2d c0       	rjmp	.+90     	; 0xdbaa <systemGenerateReport+0xb6>
    db50:	84 30       	cpi	r24, 0x04	; 4
    db52:	09 f4       	brne	.+2      	; 0xdb56 <systemGenerateReport+0x62>
    db54:	84 c1       	rjmp	.+776    	; 0xde5e <systemGenerateReport+0x36a>
    db56:	85 30       	cpi	r24, 0x05	; 5
    db58:	08 f0       	brcs	.+2      	; 0xdb5c <systemGenerateReport+0x68>
    db5a:	1b c6       	rjmp	.+3126   	; 0xe792 <systemGenerateReport+0xc9e>
    db5c:	79 c1       	rjmp	.+754    	; 0xde50 <systemGenerateReport+0x35c>
    db5e:	89 30       	cpi	r24, 0x09	; 9
    db60:	09 f4       	brne	.+2      	; 0xdb64 <systemGenerateReport+0x70>
    db62:	17 c6       	rjmp	.+3118   	; 0xe792 <systemGenerateReport+0xc9e>
    db64:	8a 30       	cpi	r24, 0x0A	; 10
    db66:	40 f4       	brcc	.+16     	; 0xdb78 <systemGenerateReport+0x84>
    db68:	87 30       	cpi	r24, 0x07	; 7
    db6a:	09 f4       	brne	.+2      	; 0xdb6e <systemGenerateReport+0x7a>
    db6c:	42 c2       	rjmp	.+1156   	; 0xdff2 <systemGenerateReport+0x4fe>
    db6e:	88 30       	cpi	r24, 0x08	; 8
    db70:	11 f0       	breq	.+4      	; 0xdb76 <systemGenerateReport+0x82>
    db72:	0c 94 c7 76 	jmp	0xed8e	; 0xed8e <systemGenerateReport+0x129a>
    db76:	4a c2       	rjmp	.+1172   	; 0xe00c <systemGenerateReport+0x518>
    db78:	8b 30       	cpi	r24, 0x0B	; 11
    db7a:	11 f4       	brne	.+4      	; 0xdb80 <systemGenerateReport+0x8c>
    db7c:	0c 94 ba 76 	jmp	0xed74	; 0xed74 <systemGenerateReport+0x1280>
    db80:	8b 30       	cpi	r24, 0x0B	; 11
    db82:	08 f4       	brcc	.+2      	; 0xdb86 <systemGenerateReport+0x92>
    db84:	0d c6       	rjmp	.+3098   	; 0xe7a0 <systemGenerateReport+0xcac>
    db86:	8c 30       	cpi	r24, 0x0C	; 12
    db88:	11 f0       	breq	.+4      	; 0xdb8e <systemGenerateReport+0x9a>
    db8a:	0c 94 c7 76 	jmp	0xed8e	; 0xed8e <systemGenerateReport+0x129a>
    db8e:	0c 94 c2 76 	jmp	0xed84	; 0xed84 <systemGenerateReport+0x1290>
	 case grScanAction://Wait for Complete incoming Totalizer data	      
		  if (IsGenerateReport==True){
    db92:	80 91 64 02 	lds	r24, 0x0264
    db96:	81 30       	cpi	r24, 0x01	; 1
    db98:	11 f0       	breq	.+4      	; 0xdb9e <systemGenerateReport+0xaa>
    db9a:	0c 94 c7 76 	jmp	0xed8e	; 0xed8e <systemGenerateReport+0x129a>
		      IsGenerateReport=False;
    db9e:	10 92 64 02 	sts	0x0264, r1
			  IsFinishPrintingTotalizer=False;
    dba2:	10 92 65 02 	sts	0x0265, r1
    dba6:	0c 94 bf 76 	jmp	0xed7e	; 0xed7e <systemGenerateReport+0x128a>
			  stGenerateReport=grInitData;
		  }
	      break;
	 case grInitData:
	      xPump=1;
    dbaa:	80 93 c5 02 	sts	0x02C5, r24
		  xNozzle=1;
    dbae:	80 93 c4 02 	sts	0x02C4, r24
		  RepPos=0;
    dbb2:	10 92 b5 02 	sts	0x02B5, r1
    dbb6:	10 92 b4 02 	sts	0x02B4, r1
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    dbba:	8a ec       	ldi	r24, 0xCA	; 202
    dbbc:	94 e0       	ldi	r25, 0x04	; 4
    dbbe:	61 e9       	ldi	r22, 0x91	; 145
    dbc0:	71 e0       	ldi	r23, 0x01	; 1
    dbc2:	40 e0       	ldi	r20, 0x00	; 0
    dbc4:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strReport,sizeof(strReport),0);
    dbc8:	ce 01       	movw	r24, r28
    dbca:	8b 55       	subi	r24, 0x5B	; 91
    dbcc:	9f 4f       	sbci	r25, 0xFF	; 255
    dbce:	60 e5       	ldi	r22, 0x50	; 80
    dbd0:	70 e0       	ldi	r23, 0x00	; 0
    dbd2:	40 e0       	ldi	r20, 0x00	; 0
    dbd4:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
    dbd8:	ce 01       	movw	r24, r28
    dbda:	c7 96       	adiw	r24, 0x37	; 55
    dbdc:	6f e0       	ldi	r22, 0x0F	; 15
    dbde:	70 e0       	ldi	r23, 0x00	; 0
    dbe0:	40 e0       	ldi	r20, 0x00	; 0
    dbe2:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);
    dbe6:	ce 01       	movw	r24, r28
    dbe8:	8a 5b       	subi	r24, 0xBA	; 186
    dbea:	9f 4f       	sbci	r25, 0xFF	; 255
    dbec:	6f e0       	ldi	r22, 0x0F	; 15
    dbee:	70 e0       	ldi	r23, 0x00	; 0
    dbf0:	40 e0       	ldi	r20, 0x00	; 0
    dbf2:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

		  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
    dbf6:	85 ed       	ldi	r24, 0xD5	; 213
    dbf8:	98 e0       	ldi	r25, 0x08	; 8
    dbfa:	64 e1       	ldi	r22, 0x14	; 20
    dbfc:	70 e0       	ldi	r23, 0x00	; 0
    dbfe:	40 e0       	ldi	r20, 0x00	; 0
    dc00:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strTotalMoney,sizeof(strTotalMoney),0);
    dc04:	86 e8       	ldi	r24, 0x86	; 134
    dc06:	99 e0       	ldi	r25, 0x09	; 9
    dc08:	64 e1       	ldi	r22, 0x14	; 20
    dc0a:	70 e0       	ldi	r23, 0x00	; 0
    dc0c:	40 e0       	ldi	r20, 0x00	; 0
    dc0e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>


		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
    dc12:	8b e0       	ldi	r24, 0x0B	; 11
    dc14:	9d e0       	ldi	r25, 0x0D	; 13
    dc16:	6f e0       	ldi	r22, 0x0F	; 15
    dc18:	70 e0       	ldi	r23, 0x00	; 0
    dc1a:	40 e0       	ldi	r20, 0x00	; 0
    dc1c:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
    dc20:	83 ee       	ldi	r24, 0xE3	; 227
    dc22:	99 e0       	ldi	r25, 0x09	; 9
    dc24:	6f e0       	ldi	r22, 0x0F	; 15
    dc26:	70 e0       	ldi	r23, 0x00	; 0
    dc28:	40 e0       	ldi	r20, 0x00	; 0
    dc2a:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    dc2e:	8f e3       	ldi	r24, 0x3F	; 63
    dc30:	91 e0       	ldi	r25, 0x01	; 1
    dc32:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    dc36:	00 d0       	rcall	.+0      	; 0xdc38 <systemGenerateReport+0x144>
    dc38:	00 d0       	rcall	.+0      	; 0xdc3a <systemGenerateReport+0x146>
    dc3a:	00 d0       	rcall	.+0      	; 0xdc3c <systemGenerateReport+0x148>
    dc3c:	ed b7       	in	r30, 0x3d	; 61
    dc3e:	fe b7       	in	r31, 0x3e	; 62
    dc40:	31 96       	adiw	r30, 0x01	; 1
    dc42:	26 e4       	ldi	r18, 0x46	; 70
    dc44:	3d e0       	ldi	r19, 0x0D	; 13
    dc46:	ad b7       	in	r26, 0x3d	; 61
    dc48:	be b7       	in	r27, 0x3e	; 62
    dc4a:	12 96       	adiw	r26, 0x02	; 2
    dc4c:	3c 93       	st	X, r19
    dc4e:	2e 93       	st	-X, r18
    dc50:	11 97       	sbiw	r26, 0x01	; 1
    dc52:	29 ec       	ldi	r18, 0xC9	; 201
    dc54:	36 e0       	ldi	r19, 0x06	; 6
    dc56:	33 83       	std	Z+3, r19	; 0x03
    dc58:	22 83       	std	Z+2, r18	; 0x02
    dc5a:	84 83       	std	Z+4, r24	; 0x04
    dc5c:	15 82       	std	Z+5, r1	; 0x05
    dc5e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

          stGenerateReport=grCreateReportHeader;
    dc62:	82 e0       	ldi	r24, 0x02	; 2
    dc64:	80 93 c6 02 	sts	0x02C6, r24
	      break;
    dc68:	ed b7       	in	r30, 0x3d	; 61
    dc6a:	fe b7       	in	r31, 0x3e	; 62
    dc6c:	36 96       	adiw	r30, 0x06	; 6
    dc6e:	0f b6       	in	r0, 0x3f	; 63
    dc70:	f8 94       	cli
    dc72:	fe bf       	out	0x3e, r31	; 62
    dc74:	0f be       	out	0x3f, r0	; 63
    dc76:	ed bf       	out	0x3d, r30	; 61
    dc78:	0c 94 c7 76 	jmp	0xed8e	; 0xed8e <systemGenerateReport+0x129a>
	 case grCreateReportHeader://Border: btTopLeft,btTopCenter,btTopRight,btMiddleLeft,btMiddleCenter,btMiddleRight,btBottomLeft,btBottomCenter,btBottomRight,btVertical,btHorizontal
		  eeprom_read_block((void*) &LastShiftDateTime, (const void*) &DefLastShiftDateTime, sizeof(DefLastShiftDateTime));
    dc7c:	05 e5       	ldi	r16, 0x55	; 85
    dc7e:	e0 2e       	mov	r14, r16
    dc80:	f1 2c       	mov	r15, r1
    dc82:	ec 0e       	add	r14, r28
    dc84:	fd 1e       	adc	r15, r29
    dc86:	c7 01       	movw	r24, r14
    dc88:	63 e4       	ldi	r22, 0x43	; 67
    dc8a:	78 e0       	ldi	r23, 0x08	; 8
    dc8c:	44 e1       	ldi	r20, 0x14	; 20
    dc8e:	50 e0       	ldi	r21, 0x00	; 0
    dc90:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
          
		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    dc94:	81 e0       	ldi	r24, 0x01	; 1
    dc96:	61 e0       	ldi	r22, 0x01	; 1
    dc98:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    dc9c:	8b e0       	ldi	r24, 0x0B	; 11
    dc9e:	6a e2       	ldi	r22, 0x2A	; 42
    dca0:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    dca4:	83 e0       	ldi	r24, 0x03	; 3
    dca6:	61 e0       	ldi	r22, 0x01	; 1
    dca8:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    dcac:	8c e0       	ldi	r24, 0x0C	; 12
    dcae:	61 e0       	ldi	r22, 0x01	; 1
    dcb0:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
	      sprintf_P(strReport,PSTR("        Laporan Tutup Shift: %s      "),strShift);CreateReport(strReport,PrintBuffer,&RepPos);
    dcb4:	00 d0       	rcall	.+0      	; 0xdcb6 <systemGenerateReport+0x1c2>
    dcb6:	00 d0       	rcall	.+0      	; 0xdcb8 <systemGenerateReport+0x1c4>
    dcb8:	00 d0       	rcall	.+0      	; 0xdcba <systemGenerateReport+0x1c6>
    dcba:	ed b7       	in	r30, 0x3d	; 61
    dcbc:	fe b7       	in	r31, 0x3e	; 62
    dcbe:	31 96       	adiw	r30, 0x01	; 1
    dcc0:	8e 01       	movw	r16, r28
    dcc2:	0b 55       	subi	r16, 0x5B	; 91
    dcc4:	1f 4f       	sbci	r17, 0xFF	; 255
    dcc6:	ad b7       	in	r26, 0x3d	; 61
    dcc8:	be b7       	in	r27, 0x3e	; 62
    dcca:	12 96       	adiw	r26, 0x02	; 2
    dccc:	1c 93       	st	X, r17
    dcce:	0e 93       	st	-X, r16
    dcd0:	11 97       	sbiw	r26, 0x01	; 1
    dcd2:	83 ea       	ldi	r24, 0xA3	; 163
    dcd4:	96 e0       	ldi	r25, 0x06	; 6
    dcd6:	93 83       	std	Z+3, r25	; 0x03
    dcd8:	82 83       	std	Z+2, r24	; 0x02
    dcda:	86 e4       	ldi	r24, 0x46	; 70
    dcdc:	9d e0       	ldi	r25, 0x0D	; 13
    dcde:	95 83       	std	Z+5, r25	; 0x05
    dce0:	84 83       	std	Z+4, r24	; 0x04
    dce2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    dce6:	ed b7       	in	r30, 0x3d	; 61
    dce8:	fe b7       	in	r31, 0x3e	; 62
    dcea:	36 96       	adiw	r30, 0x06	; 6
    dcec:	0f b6       	in	r0, 0x3f	; 63
    dcee:	f8 94       	cli
    dcf0:	fe bf       	out	0x3e, r31	; 62
    dcf2:	0f be       	out	0x3f, r0	; 63
    dcf4:	ed bf       	out	0x3d, r30	; 61
    dcf6:	c8 01       	movw	r24, r16
    dcf8:	6a ec       	ldi	r22, 0xCA	; 202
    dcfa:	74 e0       	ldi	r23, 0x04	; 4
    dcfc:	44 eb       	ldi	r20, 0xB4	; 180
    dcfe:	52 e0       	ldi	r21, 0x02	; 2
    dd00:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>
		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     
    dd04:	84 e0       	ldi	r24, 0x04	; 4
    dd06:	61 e0       	ldi	r22, 0x01	; 1
    dd08:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    dd0c:	8b e0       	ldi	r24, 0x0B	; 11
    dd0e:	6a e2       	ldi	r22, 0x2A	; 42
    dd10:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    dd14:	86 e0       	ldi	r24, 0x06	; 6
    dd16:	61 e0       	ldi	r22, 0x01	; 1
    dd18:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    dd1c:	8c e0       	ldi	r24, 0x0C	; 12
    dd1e:	61 e0       	ldi	r22, 0x01	; 1
    dd20:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
	      sprintf_P(strReport,PSTR("Terminal ID : %.2d                   "),eeprom_read_byte(&DefIFT_ID));CreateReport(strReport,PrintBuffer,&RepPos);
    dd24:	80 e0       	ldi	r24, 0x00	; 0
    dd26:	90 e0       	ldi	r25, 0x00	; 0
    dd28:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    dd2c:	00 d0       	rcall	.+0      	; 0xdd2e <systemGenerateReport+0x23a>
    dd2e:	00 d0       	rcall	.+0      	; 0xdd30 <systemGenerateReport+0x23c>
    dd30:	00 d0       	rcall	.+0      	; 0xdd32 <systemGenerateReport+0x23e>
    dd32:	ed b7       	in	r30, 0x3d	; 61
    dd34:	fe b7       	in	r31, 0x3e	; 62
    dd36:	31 96       	adiw	r30, 0x01	; 1
    dd38:	ad b7       	in	r26, 0x3d	; 61
    dd3a:	be b7       	in	r27, 0x3e	; 62
    dd3c:	12 96       	adiw	r26, 0x02	; 2
    dd3e:	1c 93       	st	X, r17
    dd40:	0e 93       	st	-X, r16
    dd42:	11 97       	sbiw	r26, 0x01	; 1
    dd44:	2d e7       	ldi	r18, 0x7D	; 125
    dd46:	36 e0       	ldi	r19, 0x06	; 6
    dd48:	33 83       	std	Z+3, r19	; 0x03
    dd4a:	22 83       	std	Z+2, r18	; 0x02
    dd4c:	84 83       	std	Z+4, r24	; 0x04
    dd4e:	15 82       	std	Z+5, r1	; 0x05
    dd50:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    dd54:	ed b7       	in	r30, 0x3d	; 61
    dd56:	fe b7       	in	r31, 0x3e	; 62
    dd58:	36 96       	adiw	r30, 0x06	; 6
    dd5a:	0f b6       	in	r0, 0x3f	; 63
    dd5c:	f8 94       	cli
    dd5e:	fe bf       	out	0x3e, r31	; 62
    dd60:	0f be       	out	0x3f, r0	; 63
    dd62:	ed bf       	out	0x3d, r30	; 61
    dd64:	c8 01       	movw	r24, r16
    dd66:	6a ec       	ldi	r22, 0xCA	; 202
    dd68:	74 e0       	ldi	r23, 0x04	; 4
    dd6a:	44 eb       	ldi	r20, 0xB4	; 180
    dd6c:	52 e0       	ldi	r21, 0x02	; 2
    dd6e:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>
	      sprintf_P(strReport,PSTR("Awal  Shift : %s "),LastShiftDateTime);             CreateReport(strReport,PrintBuffer,&RepPos);
    dd72:	00 d0       	rcall	.+0      	; 0xdd74 <systemGenerateReport+0x280>
    dd74:	00 d0       	rcall	.+0      	; 0xdd76 <systemGenerateReport+0x282>
    dd76:	00 d0       	rcall	.+0      	; 0xdd78 <systemGenerateReport+0x284>
    dd78:	ed b7       	in	r30, 0x3d	; 61
    dd7a:	fe b7       	in	r31, 0x3e	; 62
    dd7c:	31 96       	adiw	r30, 0x01	; 1
    dd7e:	ad b7       	in	r26, 0x3d	; 61
    dd80:	be b7       	in	r27, 0x3e	; 62
    dd82:	12 96       	adiw	r26, 0x02	; 2
    dd84:	1c 93       	st	X, r17
    dd86:	0e 93       	st	-X, r16
    dd88:	11 97       	sbiw	r26, 0x01	; 1
    dd8a:	8b e6       	ldi	r24, 0x6B	; 107
    dd8c:	96 e0       	ldi	r25, 0x06	; 6
    dd8e:	93 83       	std	Z+3, r25	; 0x03
    dd90:	82 83       	std	Z+2, r24	; 0x02
    dd92:	f5 82       	std	Z+5, r15	; 0x05
    dd94:	e4 82       	std	Z+4, r14	; 0x04
    dd96:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    dd9a:	ed b7       	in	r30, 0x3d	; 61
    dd9c:	fe b7       	in	r31, 0x3e	; 62
    dd9e:	36 96       	adiw	r30, 0x06	; 6
    dda0:	0f b6       	in	r0, 0x3f	; 63
    dda2:	f8 94       	cli
    dda4:	fe bf       	out	0x3e, r31	; 62
    dda6:	0f be       	out	0x3f, r0	; 63
    dda8:	ed bf       	out	0x3d, r30	; 61
    ddaa:	c8 01       	movw	r24, r16
    ddac:	6a ec       	ldi	r22, 0xCA	; 202
    ddae:	74 e0       	ldi	r23, 0x04	; 4
    ddb0:	44 eb       	ldi	r20, 0xB4	; 180
    ddb2:	52 e0       	ldi	r21, 0x02	; 2
    ddb4:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>
	      sprintf_P(strReport,PSTR("Akhir Shift : %s "),CurrentShiftDateTime);      CreateReport(strReport,PrintBuffer,&RepPos);
    ddb8:	00 d0       	rcall	.+0      	; 0xddba <systemGenerateReport+0x2c6>
    ddba:	00 d0       	rcall	.+0      	; 0xddbc <systemGenerateReport+0x2c8>
    ddbc:	00 d0       	rcall	.+0      	; 0xddbe <systemGenerateReport+0x2ca>
    ddbe:	ed b7       	in	r30, 0x3d	; 61
    ddc0:	fe b7       	in	r31, 0x3e	; 62
    ddc2:	31 96       	adiw	r30, 0x01	; 1
    ddc4:	ad b7       	in	r26, 0x3d	; 61
    ddc6:	be b7       	in	r27, 0x3e	; 62
    ddc8:	12 96       	adiw	r26, 0x02	; 2
    ddca:	1c 93       	st	X, r17
    ddcc:	0e 93       	st	-X, r16
    ddce:	11 97       	sbiw	r26, 0x01	; 1
    ddd0:	89 e5       	ldi	r24, 0x59	; 89
    ddd2:	96 e0       	ldi	r25, 0x06	; 6
    ddd4:	93 83       	std	Z+3, r25	; 0x03
    ddd6:	82 83       	std	Z+2, r24	; 0x02
    ddd8:	8c e6       	ldi	r24, 0x6C	; 108
    ddda:	98 e0       	ldi	r25, 0x08	; 8
    dddc:	95 83       	std	Z+5, r25	; 0x05
    ddde:	84 83       	std	Z+4, r24	; 0x04
    dde0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    dde4:	ed b7       	in	r30, 0x3d	; 61
    dde6:	fe b7       	in	r31, 0x3e	; 62
    dde8:	36 96       	adiw	r30, 0x06	; 6
    ddea:	0f b6       	in	r0, 0x3f	; 63
    ddec:	f8 94       	cli
    ddee:	fe bf       	out	0x3e, r31	; 62
    ddf0:	0f be       	out	0x3f, r0	; 63
    ddf2:	ed bf       	out	0x3d, r30	; 61
    ddf4:	c8 01       	movw	r24, r16
    ddf6:	6a ec       	ldi	r22, 0xCA	; 202
    ddf8:	74 e0       	ldi	r23, 0x04	; 4
    ddfa:	44 eb       	ldi	r20, 0xB4	; 180
    ddfc:	52 e0       	ldi	r21, 0x02	; 2
    ddfe:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>
	      //sprintf_P(strReport,PSTR("Transaksi   : %s "),DeltaTransaction);      CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    de02:	87 e0       	ldi	r24, 0x07	; 7
    de04:	61 e0       	ldi	r22, 0x01	; 1
    de06:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    de0a:	8b e0       	ldi	r24, 0x0B	; 11
    de0c:	6a e2       	ldi	r22, 0x2A	; 42
    de0e:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    de12:	89 e0       	ldi	r24, 0x09	; 9
    de14:	61 e0       	ldi	r22, 0x01	; 1
    de16:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    de1a:	8c e0       	ldi	r24, 0x0C	; 12
    de1c:	61 e0       	ldi	r22, 0x01	; 1
    de1e:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
		  /*
	      if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
          */
		  ClearList(GradeList);
    de22:	86 eb       	ldi	r24, 0xB6	; 182
    de24:	92 e0       	ldi	r25, 0x02	; 2
    de26:	0e 94 66 69 	call	0xd2cc	; 0xd2cc <ClearList>
		  cmdPrint=0b10000000;//PrintHeader
    de2a:	80 e8       	ldi	r24, 0x80	; 128
    de2c:	80 93 93 02 	sts	0x0293, r24
		  LengthMessage81=RepPos+1;
    de30:	80 91 b4 02 	lds	r24, 0x02B4
    de34:	90 91 b5 02 	lds	r25, 0x02B5
    de38:	01 96       	adiw	r24, 0x01	; 1
    de3a:	90 93 6c 02 	sts	0x026C, r25
    de3e:	80 93 6b 02 	sts	0x026B, r24
		  IsFreePrinting=True;
    de42:	81 e0       	ldi	r24, 0x01	; 1
    de44:	80 93 86 02 	sts	0x0286, r24
          IsBusyFreePrinting=True;
    de48:	80 93 92 02 	sts	0x0292, r24
		  		  
          stGenerateReport=grWaitPrinted1;
    de4c:	83 e0       	ldi	r24, 0x03	; 3
    de4e:	97 c7       	rjmp	.+3886   	; 0xed7e <systemGenerateReport+0x128a>
	      break;
     case grWaitPrinted1:
          if (IsBusyFreePrinting==False)
    de50:	80 91 92 02 	lds	r24, 0x0292
    de54:	88 23       	and	r24, r24
    de56:	09 f0       	breq	.+2      	; 0xde5a <systemGenerateReport+0x366>
    de58:	9a c7       	rjmp	.+3892   	; 0xed8e <systemGenerateReport+0x129a>
		      stGenerateReport=grGenerateLabel;//grGenerateReportData;//grFinishGenerateReport;
    de5a:	84 e0       	ldi	r24, 0x04	; 4
    de5c:	90 c7       	rjmp	.+3872   	; 0xed7e <systemGenerateReport+0x128a>
	      break;
     case grGenerateLabel:
          RepPos=0;
    de5e:	10 92 b5 02 	sts	0x02B5, r1
    de62:	10 92 b4 02 	sts	0x02B4, r1
          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    de66:	81 e0       	ldi	r24, 0x01	; 1
    de68:	61 e0       	ldi	r22, 0x01	; 1
    de6a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    de6e:	8b e0       	ldi	r24, 0x0B	; 11
    de70:	6a e2       	ldi	r22, 0x2A	; 42
    de72:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    de76:	83 e0       	ldi	r24, 0x03	; 3
    de78:	61 e0       	ldi	r22, 0x01	; 1
    de7a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    de7e:	8c e0       	ldi	r24, 0x0C	; 12
    de80:	61 e0       	ldi	r22, 0x01	; 1
    de82:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
	      if (eeprom_read_byte(&DefPrintMoney)==True)
    de86:	81 ec       	ldi	r24, 0xC1	; 193
    de88:	93 e0       	ldi	r25, 0x03	; 3
    de8a:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    de8e:	8e 01       	movw	r16, r28
    de90:	0b 55       	subi	r16, 0x5B	; 91
    de92:	1f 4f       	sbci	r17, 0xFF	; 255
    de94:	81 30       	cpi	r24, 0x01	; 1
    de96:	79 f4       	brne	.+30     	; 0xdeb6 <systemGenerateReport+0x3c2>
		       sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
    de98:	00 d0       	rcall	.+0      	; 0xde9a <systemGenerateReport+0x3a6>
    de9a:	00 d0       	rcall	.+0      	; 0xde9c <systemGenerateReport+0x3a8>
    de9c:	ad b7       	in	r26, 0x3d	; 61
    de9e:	be b7       	in	r27, 0x3e	; 62
    dea0:	12 96       	adiw	r26, 0x02	; 2
    dea2:	1c 93       	st	X, r17
    dea4:	0e 93       	st	-X, r16
    dea6:	11 97       	sbiw	r26, 0x01	; 1
    dea8:	82 e3       	ldi	r24, 0x32	; 50
    deaa:	96 e0       	ldi	r25, 0x06	; 6
    deac:	14 96       	adiw	r26, 0x04	; 4
    deae:	9c 93       	st	X, r25
    deb0:	8e 93       	st	-X, r24
    deb2:	13 97       	sbiw	r26, 0x03	; 3
    deb4:	0a c0       	rjmp	.+20     	; 0xdeca <systemGenerateReport+0x3d6>
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
    deb6:	00 d0       	rcall	.+0      	; 0xdeb8 <systemGenerateReport+0x3c4>
    deb8:	00 d0       	rcall	.+0      	; 0xdeba <systemGenerateReport+0x3c6>
    deba:	ed b7       	in	r30, 0x3d	; 61
    debc:	fe b7       	in	r31, 0x3e	; 62
    debe:	12 83       	std	Z+2, r17	; 0x02
    dec0:	01 83       	std	Z+1, r16	; 0x01
    dec2:	8b e0       	ldi	r24, 0x0B	; 11
    dec4:	96 e0       	ldi	r25, 0x06	; 6
    dec6:	94 83       	std	Z+4, r25	; 0x04
    dec8:	83 83       	std	Z+3, r24	; 0x03
    deca:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    dece:	0f 90       	pop	r0
    ded0:	0f 90       	pop	r0
    ded2:	0f 90       	pop	r0
    ded4:	0f 90       	pop	r0
    ded6:	ce 01       	movw	r24, r28
    ded8:	8b 55       	subi	r24, 0x5B	; 91
    deda:	9f 4f       	sbci	r25, 0xFF	; 255
    dedc:	6a ec       	ldi	r22, 0xCA	; 202
    dede:	74 e0       	ldi	r23, 0x04	; 4
    dee0:	44 eb       	ldi	r20, 0xB4	; 180
    dee2:	52 e0       	ldi	r21, 0x02	; 2
    dee4:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
    dee8:	87 e0       	ldi	r24, 0x07	; 7
    deea:	61 e0       	ldi	r22, 0x01	; 1
    deec:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    def0:	8b e0       	ldi	r24, 0x0B	; 11
    def2:	6a e2       	ldi	r22, 0x2A	; 42
    def4:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    def8:	89 e0       	ldi	r24, 0x09	; 9
    defa:	61 e0       	ldi	r22, 0x01	; 1
    defc:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
          
		  cmdPrint=0b00000000;
    df00:	10 92 93 02 	sts	0x0293, r1
		  LengthMessage81=RepPos+1;
    df04:	80 91 b4 02 	lds	r24, 0x02B4
    df08:	90 91 b5 02 	lds	r25, 0x02B5
    df0c:	01 96       	adiw	r24, 0x01	; 1
    df0e:	90 93 6c 02 	sts	0x026C, r25
    df12:	80 93 6b 02 	sts	0x026B, r24

		  IsFreePrinting=True;
    df16:	81 e0       	ldi	r24, 0x01	; 1
    df18:	80 93 86 02 	sts	0x0286, r24
	      IsBusyFreePrinting=True;
    df1c:	80 93 92 02 	sts	0x0292, r24

		  stGenerateReport=grWaitLabelPrinted;
    df20:	85 e0       	ldi	r24, 0x05	; 5
    df22:	2d c7       	rjmp	.+3674   	; 0xed7e <systemGenerateReport+0x128a>
          if (IsBusyFreePrinting==False)
		      stGenerateReport=grGenerateReportData;//grFinishGenerateReport;
	      break;
     case grGenerateReportData:
	      //Generate: PumpNum, Nozzle, Product
	      if ((xPump>=1)&&(xPump<=8)){
    df24:	80 91 c5 02 	lds	r24, 0x02C5
    df28:	81 50       	subi	r24, 0x01	; 1
    df2a:	88 30       	cpi	r24, 0x08	; 8
    df2c:	08 f0       	brcs	.+2      	; 0xdf30 <systemGenerateReport+0x43c>
    df2e:	2f c7       	rjmp	.+3678   	; 0xed8e <systemGenerateReport+0x129a>
		      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    df30:	ce 01       	movw	r24, r28
    df32:	07 96       	adiw	r24, 0x07	; 7
    df34:	65 e4       	ldi	r22, 0x45	; 69
    df36:	70 e0       	ldi	r23, 0x00	; 0
    df38:	48 e0       	ldi	r20, 0x08	; 8
    df3a:	50 e0       	ldi	r21, 0x00	; 0
    df3c:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
			  PumpNum=PPumpID[xPump-1];
    df40:	80 91 c5 02 	lds	r24, 0x02C5
    df44:	90 e0       	ldi	r25, 0x00	; 0
    df46:	fe 01       	movw	r30, r28
    df48:	e8 0f       	add	r30, r24
    df4a:	f9 1f       	adc	r31, r25
    df4c:	26 81       	ldd	r18, Z+6	; 0x06
    df4e:	20 93 c2 02 	sts	0x02C2, r18
			  if (PumpNum>0){
    df52:	22 23       	and	r18, r18
    df54:	09 f4       	brne	.+2      	; 0xdf58 <systemGenerateReport+0x464>
    df56:	4b c0       	rjmp	.+150    	; 0xdfee <systemGenerateReport+0x4fa>
				  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    df58:	01 97       	sbiw	r24, 0x01	; 1
    df5a:	bc 01       	movw	r22, r24
    df5c:	66 0f       	add	r22, r22
    df5e:	77 1f       	adc	r23, r23
    df60:	68 0f       	add	r22, r24
    df62:	79 1f       	adc	r23, r25
    df64:	66 0f       	add	r22, r22
    df66:	77 1f       	adc	r23, r23
    df68:	6b 5a       	subi	r22, 0xAB	; 171
    df6a:	7f 4f       	sbci	r23, 0xFF	; 255
    df6c:	ce 01       	movw	r24, r28
    df6e:	01 96       	adiw	r24, 0x01	; 1
    df70:	46 e0       	ldi	r20, 0x06	; 6
    df72:	50 e0       	ldi	r21, 0x00	; 0
    df74:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
				  xGrade=PProductID[xNozzle-1];
    df78:	80 91 c4 02 	lds	r24, 0x02C4
    df7c:	fe 01       	movw	r30, r28
    df7e:	e8 0f       	add	r30, r24
    df80:	f1 1d       	adc	r31, r1
    df82:	80 81       	ld	r24, Z
    df84:	80 93 c3 02 	sts	0x02C3, r24

				  if (xGrade>0){
    df88:	88 23       	and	r24, r24
    df8a:	99 f0       	breq	.+38     	; 0xdfb2 <systemGenerateReport+0x4be>
				      GetProductName(xGrade,strProduct);
    df8c:	6c e3       	ldi	r22, 0x3C	; 60
    df8e:	78 e0       	ldi	r23, 0x08	; 8
    df90:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <GetProductName>
                      GradeUsed=xGrade;
    df94:	80 91 c3 02 	lds	r24, 0x02C3
    df98:	80 93 c0 02 	sts	0x02C0, r24
					  xGrade=xNozzle;//
    df9c:	80 91 c4 02 	lds	r24, 0x02C4
    dfa0:	80 93 c3 02 	sts	0x02C3, r24
					  PumpNozzle=xNozzle;
    dfa4:	80 93 c1 02 	sts	0x02C1, r24
					  xNozzle++;
    dfa8:	8f 5f       	subi	r24, 0xFF	; 255
    dfaa:	80 93 c4 02 	sts	0x02C4, r24
					  stGenerateReport=grCreateReportTotalizer;
    dfae:	88 e0       	ldi	r24, 0x08	; 8
    dfb0:	e6 c6       	rjmp	.+3532   	; 0xed7e <systemGenerateReport+0x128a>
				  }
				  else{sprintf_P(strProduct,PSTR("N/A"));			  
    dfb2:	00 d0       	rcall	.+0      	; 0xdfb4 <systemGenerateReport+0x4c0>
    dfb4:	00 d0       	rcall	.+0      	; 0xdfb6 <systemGenerateReport+0x4c2>
    dfb6:	8c e3       	ldi	r24, 0x3C	; 60
    dfb8:	98 e0       	ldi	r25, 0x08	; 8
    dfba:	ad b7       	in	r26, 0x3d	; 61
    dfbc:	be b7       	in	r27, 0x3e	; 62
    dfbe:	12 96       	adiw	r26, 0x02	; 2
    dfc0:	9c 93       	st	X, r25
    dfc2:	8e 93       	st	-X, r24
    dfc4:	11 97       	sbiw	r26, 0x01	; 1
    dfc6:	87 e0       	ldi	r24, 0x07	; 7
    dfc8:	96 e0       	ldi	r25, 0x06	; 6
    dfca:	14 96       	adiw	r26, 0x04	; 4
    dfcc:	9c 93       	st	X, r25
    dfce:	8e 93       	st	-X, r24
    dfd0:	13 97       	sbiw	r26, 0x03	; 3
    dfd2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
					   xNozzle++;
    dfd6:	80 91 c4 02 	lds	r24, 0x02C4
    dfda:	8f 5f       	subi	r24, 0xFF	; 255
    dfdc:	80 93 c4 02 	sts	0x02C4, r24
					   if (xNozzle>6)stGenerateReport=grNextPump;
    dfe0:	0f 90       	pop	r0
    dfe2:	0f 90       	pop	r0
    dfe4:	0f 90       	pop	r0
    dfe6:	0f 90       	pop	r0
    dfe8:	87 30       	cpi	r24, 0x07	; 7
    dfea:	08 f4       	brcc	.+2      	; 0xdfee <systemGenerateReport+0x4fa>
    dfec:	d0 c6       	rjmp	.+3488   	; 0xed8e <systemGenerateReport+0x129a>
					  }
				}else stGenerateReport=grNextPump;
    dfee:	87 e0       	ldi	r24, 0x07	; 7
    dff0:	c6 c6       	rjmp	.+3468   	; 0xed7e <systemGenerateReport+0x128a>
			  }
	      break;
     case grNextPump:
	      xNozzle=1;
    dff2:	81 e0       	ldi	r24, 0x01	; 1
    dff4:	80 93 c4 02 	sts	0x02C4, r24
	      xPump++;
    dff8:	80 91 c5 02 	lds	r24, 0x02C5
    dffc:	8f 5f       	subi	r24, 0xFF	; 255
    dffe:	80 93 c5 02 	sts	0x02C5, r24
	      if (xPump>8)stGenerateReport=grCreateReportFooter;
    e002:	89 30       	cpi	r24, 0x09	; 9
    e004:	08 f4       	brcc	.+2      	; 0xe008 <systemGenerateReport+0x514>
    e006:	ca c3       	rjmp	.+1940   	; 0xe79c <systemGenerateReport+0xca8>
    e008:	8a e0       	ldi	r24, 0x0A	; 10
    e00a:	b9 c6       	rjmp	.+3442   	; 0xed7e <systemGenerateReport+0x128a>
		  else stGenerateReport=grGenerateReportData;
	      break;
     case grCreateReportTotalizer:

          RepPos=0;
    e00c:	10 92 b5 02 	sts	0x02B5, r1
    e010:	10 92 b4 02 	sts	0x02B4, r1
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    e014:	8a ec       	ldi	r24, 0xCA	; 202
    e016:	94 e0       	ldi	r25, 0x04	; 4
    e018:	61 e9       	ldi	r22, 0x91	; 145
    e01a:	71 e0       	ldi	r23, 0x01	; 1
    e01c:	40 e0       	ldi	r20, 0x00	; 0
    e01e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strReport,sizeof(strReport),0);
    e022:	ce 01       	movw	r24, r28
    e024:	8b 55       	subi	r24, 0x5B	; 91
    e026:	9f 4f       	sbci	r25, 0xFF	; 255
    e028:	60 e5       	ldi	r22, 0x50	; 80
    e02a:	70 e0       	ldi	r23, 0x00	; 0
    e02c:	40 e0       	ldi	r20, 0x00	; 0
    e02e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
    e032:	8b e0       	ldi	r24, 0x0B	; 11
    e034:	9d e0       	ldi	r25, 0x0D	; 13
    e036:	6f e0       	ldi	r22, 0x0F	; 15
    e038:	70 e0       	ldi	r23, 0x00	; 0
    e03a:	40 e0       	ldi	r20, 0x00	; 0
    e03c:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
    e040:	83 ee       	ldi	r24, 0xE3	; 227
    e042:	99 e0       	ldi	r25, 0x09	; 9
    e044:	6f e0       	ldi	r22, 0x0F	; 15
    e046:	70 e0       	ldi	r23, 0x00	; 0
    e048:	40 e0       	ldi	r20, 0x00	; 0
    e04a:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

		  FillChar(strLastVolume,sizeof(strLastVolume),0);
    e04e:	8e 01       	movw	r16, r28
    e050:	07 5e       	subi	r16, 0xE7	; 231
    e052:	1f 4f       	sbci	r17, 0xFF	; 255
    e054:	c8 01       	movw	r24, r16
    e056:	6f e0       	ldi	r22, 0x0F	; 15
    e058:	70 e0       	ldi	r23, 0x00	; 0
    e05a:	40 e0       	ldi	r20, 0x00	; 0
    e05c:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strLastMoney,sizeof(strLastMoney),0);
    e060:	a8 e2       	ldi	r26, 0x28	; 40
    e062:	ea 2e       	mov	r14, r26
    e064:	f1 2c       	mov	r15, r1
    e066:	ec 0e       	add	r14, r28
    e068:	fd 1e       	adc	r15, r29
    e06a:	c7 01       	movw	r24, r14
    e06c:	6f e0       	ldi	r22, 0x0F	; 15
    e06e:	70 e0       	ldi	r23, 0x00	; 0
    e070:	40 e0       	ldi	r20, 0x00	; 0
    e072:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
    e076:	f7 e3       	ldi	r31, 0x37	; 55
    e078:	cf 2e       	mov	r12, r31
    e07a:	d1 2c       	mov	r13, r1
    e07c:	cc 0e       	add	r12, r28
    e07e:	dd 1e       	adc	r13, r29
    e080:	c6 01       	movw	r24, r12
    e082:	6f e0       	ldi	r22, 0x0F	; 15
    e084:	70 e0       	ldi	r23, 0x00	; 0
    e086:	40 e0       	ldi	r20, 0x00	; 0
    e088:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);
    e08c:	e6 e4       	ldi	r30, 0x46	; 70
    e08e:	8e 2e       	mov	r8, r30
    e090:	91 2c       	mov	r9, r1
    e092:	8c 0e       	add	r8, r28
    e094:	9d 1e       	adc	r9, r29
    e096:	c4 01       	movw	r24, r8
    e098:	6f e0       	ldi	r22, 0x0F	; 15
    e09a:	70 e0       	ldi	r23, 0x00	; 0
    e09c:	40 e0       	ldi	r20, 0x00	; 0
    e09e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

          FIPAddr=GetFIPAddr(PumpNum); 
    e0a2:	80 91 c2 02 	lds	r24, 0x02C2
    e0a6:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
		  if (FIPAddr>0){
    e0aa:	88 23       	and	r24, r24
    e0ac:	09 f1       	breq	.+66     	; 0xe0f0 <systemGenerateReport+0x5fc>
		      FIPAddr=FIPAddr-1;		  
    e0ae:	a8 2e       	mov	r10, r24
    e0b0:	aa 94       	dec	r10
			  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    e0b2:	80 e0       	ldi	r24, 0x00	; 0
    e0b4:	60 e0       	ldi	r22, 0x00	; 0
    e0b6:	4a 2d       	mov	r20, r10
    e0b8:	20 91 c1 02 	lds	r18, 0x02C1
    e0bc:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    e0c0:	81 e0       	ldi	r24, 0x01	; 1
    e0c2:	60 e0       	ldi	r22, 0x00	; 0
    e0c4:	4a 2d       	mov	r20, r10
    e0c6:	20 91 c1 02 	lds	r18, 0x02C1
    e0ca:	87 01       	movw	r16, r14
    e0cc:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>

			  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    e0d0:	80 e0       	ldi	r24, 0x00	; 0
    e0d2:	61 e0       	ldi	r22, 0x01	; 1
    e0d4:	4a 2d       	mov	r20, r10
    e0d6:	20 91 c1 02 	lds	r18, 0x02C1
    e0da:	86 01       	movw	r16, r12
    e0dc:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    e0e0:	81 e0       	ldi	r24, 0x01	; 1
    e0e2:	61 e0       	ldi	r22, 0x01	; 1
    e0e4:	4a 2d       	mov	r20, r10
    e0e6:	20 91 c1 02 	lds	r18, 0x02C1
    e0ea:	84 01       	movw	r16, r8
    e0ec:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
		  }

		  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    e0f0:	80 e0       	ldi	r24, 0x00	; 0
    e0f2:	be 01       	movw	r22, r28
    e0f4:	69 5c       	subi	r22, 0xC9	; 201
    e0f6:	7f 4f       	sbci	r23, 0xFF	; 255
    e0f8:	ae 01       	movw	r20, r28
    e0fa:	47 5e       	subi	r20, 0xE7	; 231
    e0fc:	5f 4f       	sbci	r21, 0xFF	; 255
    e0fe:	23 ee       	ldi	r18, 0xE3	; 227
    e100:	39 e0       	ldi	r19, 0x09	; 9
    e102:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>

		  if (IsMinus(strDeltaVolume)==True)
    e106:	83 ee       	ldi	r24, 0xE3	; 227
    e108:	99 e0       	ldi	r25, 0x09	; 9
    e10a:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <IsMinus>
    e10e:	81 30       	cpi	r24, 0x01	; 1
    e110:	21 f4       	brne	.+8      	; 0xe11a <systemGenerateReport+0x626>
		      NormalizeOverflow(strDeltaVolume);
    e112:	83 ee       	ldi	r24, 0xE3	; 227
    e114:	99 e0       	ldi	r25, 0x09	; 9
    e116:	0e 94 11 68 	call	0xd022	; 0xd022 <NormalizeOverflow>

		  //Calculate Wayne Estimated Total Money
		  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    e11a:	87 e3       	ldi	r24, 0x37	; 55
    e11c:	91 e0       	ldi	r25, 0x01	; 1
    e11e:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    e122:	82 30       	cpi	r24, 0x02	; 2
    e124:	79 f4       	brne	.+30     	; 0xe144 <systemGenerateReport+0x650>
              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    e126:	8e 01       	movw	r16, r28
    e128:	01 5f       	subi	r16, 0xF1	; 241
    e12a:	1f 4f       	sbci	r17, 0xFF	; 255
    e12c:	c8 01       	movw	r24, r16
    e12e:	60 91 c2 02 	lds	r22, 0x02C2
    e132:	40 91 c1 02 	lds	r20, 0x02C1
    e136:	0e 94 62 68 	call	0xd0c4	; 0xd0c4 <GetProductPrice>
			  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    e13a:	82 e0       	ldi	r24, 0x02	; 2
    e13c:	b8 01       	movw	r22, r16
    e13e:	43 ee       	ldi	r20, 0xE3	; 227
    e140:	59 e0       	ldi	r21, 0x09	; 9
    e142:	07 c0       	rjmp	.+14     	; 0xe152 <systemGenerateReport+0x65e>
			  
		  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    e144:	80 e0       	ldi	r24, 0x00	; 0
    e146:	be 01       	movw	r22, r28
    e148:	6a 5b       	subi	r22, 0xBA	; 186
    e14a:	7f 4f       	sbci	r23, 0xFF	; 255
    e14c:	ae 01       	movw	r20, r28
    e14e:	48 5d       	subi	r20, 0xD8	; 216
    e150:	5f 4f       	sbci	r21, 0xFF	; 255
    e152:	2b e0       	ldi	r18, 0x0B	; 11
    e154:	3d e0       	ldi	r19, 0x0D	; 13
    e156:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>

		  if (IsMinus(strDeltaMoney)==True)
    e15a:	8b e0       	ldi	r24, 0x0B	; 11
    e15c:	9d e0       	ldi	r25, 0x0D	; 13
    e15e:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <IsMinus>
    e162:	81 30       	cpi	r24, 0x01	; 1
    e164:	21 f4       	brne	.+8      	; 0xe16e <systemGenerateReport+0x67a>
		      NormalizeOverflow(strDeltaMoney);
    e166:	8b e0       	ldi	r24, 0x0B	; 11
    e168:	9d e0       	ldi	r25, 0x0D	; 13
    e16a:	0e 94 11 68 	call	0xd022	; 0xd022 <NormalizeOverflow>

		  AddList(GradeUsed,GradeList);
    e16e:	80 91 c0 02 	lds	r24, 0x02C0
    e172:	66 eb       	ldi	r22, 0xB6	; 182
    e174:	72 e0       	ldi	r23, 0x02	; 2
    e176:	0e 94 73 69 	call	0xd2e6	; 0xd2e6 <AddList>
		  
		  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    e17a:	81 e0       	ldi	r24, 0x01	; 1
    e17c:	65 ed       	ldi	r22, 0xD5	; 213
    e17e:	78 e0       	ldi	r23, 0x08	; 8
    e180:	43 ee       	ldi	r20, 0xE3	; 227
    e182:	59 e0       	ldi	r21, 0x09	; 9
    e184:	9b 01       	movw	r18, r22
    e186:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>
		  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    e18a:	81 e0       	ldi	r24, 0x01	; 1
    e18c:	66 e8       	ldi	r22, 0x86	; 134
    e18e:	79 e0       	ldi	r23, 0x09	; 9
    e190:	4b e0       	ldi	r20, 0x0B	; 11
    e192:	5d e0       	ldi	r21, 0x0D	; 13
    e194:	9b 01       	movw	r18, r22
    e196:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>


		  RemZeroLead(strDeltaMoney);
    e19a:	8b e0       	ldi	r24, 0x0B	; 11
    e19c:	9d e0       	ldi	r25, 0x0D	; 13
    e19e:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		  RemZeroLead(strCurrentMoney);
    e1a2:	76 e4       	ldi	r23, 0x46	; 70
    e1a4:	e7 2e       	mov	r14, r23
    e1a6:	f1 2c       	mov	r15, r1
    e1a8:	ec 0e       	add	r14, r28
    e1aa:	fd 1e       	adc	r15, r29
    e1ac:	c7 01       	movw	r24, r14
    e1ae:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		  RemZeroLead(strLastMoney);
    e1b2:	68 e2       	ldi	r22, 0x28	; 40
    e1b4:	c6 2e       	mov	r12, r22
    e1b6:	d1 2c       	mov	r13, r1
    e1b8:	cc 0e       	add	r12, r28
    e1ba:	dd 1e       	adc	r13, r29
    e1bc:	c6 01       	movw	r24, r12
    e1be:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>

          RemZeroLead(strDeltaVolume);
    e1c2:	83 ee       	ldi	r24, 0xE3	; 227
    e1c4:	99 e0       	ldi	r25, 0x09	; 9
    e1c6:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
          RemZeroLead(strCurrentVolume);
    e1ca:	57 e3       	ldi	r21, 0x37	; 55
    e1cc:	a5 2e       	mov	r10, r21
    e1ce:	b1 2c       	mov	r11, r1
    e1d0:	ac 0e       	add	r10, r28
    e1d2:	bd 1e       	adc	r11, r29
    e1d4:	c5 01       	movw	r24, r10
    e1d6:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
          RemZeroLead(strLastVolume);
    e1da:	8e 01       	movw	r16, r28
    e1dc:	07 5e       	subi	r16, 0xE7	; 231
    e1de:	1f 4f       	sbci	r17, 0xFF	; 255
    e1e0:	c8 01       	movw	r24, r16
    e1e2:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>

		  FormatTotalizerMoney(strDeltaMoney);
    e1e6:	8b e0       	ldi	r24, 0x0B	; 11
    e1e8:	9d e0       	ldi	r25, 0x0D	; 13
    e1ea:	0e 94 4e 2b 	call	0x569c	; 0x569c <FormatTotalizerMoney>
		  FormatTotalizerMoney(strCurrentMoney);
    e1ee:	c7 01       	movw	r24, r14
    e1f0:	0e 94 4e 2b 	call	0x569c	; 0x569c <FormatTotalizerMoney>
		  FormatTotalizerMoney(strLastMoney);
    e1f4:	c6 01       	movw	r24, r12
    e1f6:	0e 94 4e 2b 	call	0x569c	; 0x569c <FormatTotalizerMoney>

		  FormatTotalizerVolume(strDeltaVolume);
    e1fa:	83 ee       	ldi	r24, 0xE3	; 227
    e1fc:	99 e0       	ldi	r25, 0x09	; 9
    e1fe:	0e 94 40 2b 	call	0x5680	; 0x5680 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strLastVolume);
    e202:	c8 01       	movw	r24, r16
    e204:	0e 94 40 2b 	call	0x5680	; 0x5680 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strCurrentVolume); 
    e208:	c5 01       	movw	r24, r10
    e20a:	0e 94 40 2b 	call	0x5680	; 0x5680 <FormatTotalizerVolume>

          FormatCurrency(strDeltaMoney);
    e20e:	8b e0       	ldi	r24, 0x0B	; 11
    e210:	9d e0       	ldi	r25, 0x0D	; 13
    e212:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
		  FormatCurrency(strCurrentMoney);
    e216:	c7 01       	movw	r24, r14
    e218:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
		  FormatCurrency(strLastMoney);
    e21c:	c6 01       	movw	r24, r12
    e21e:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>

		  FormatCurrency(strDeltaVolume);		  
    e222:	83 ee       	ldi	r24, 0xE3	; 227
    e224:	99 e0       	ldi	r25, 0x09	; 9
    e226:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
		  FormatCurrency(strLastVolume);
    e22a:	c8 01       	movw	r24, r16
    e22c:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
          FormatCurrency(strCurrentVolume);
    e230:	c5 01       	movw	r24, r10
    e232:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>


          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    e236:	81 e0       	ldi	r24, 0x01	; 1
    e238:	61 e0       	ldi	r22, 0x01	; 1
    e23a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e23e:	8b e0       	ldi	r24, 0x0B	; 11
    e240:	6a e2       	ldi	r22, 0x2A	; 42
    e242:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e246:	83 e0       	ldi	r24, 0x03	; 3
    e248:	61 e0       	ldi	r22, 0x01	; 1
    e24a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e24e:	8c e0       	ldi	r24, 0x0C	; 12
    e250:	61 e0       	ldi	r22, 0x01	; 1
    e252:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
          if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    e256:	87 e3       	ldi	r24, 0x37	; 55
    e258:	91 e0       	ldi	r25, 0x01	; 1
    e25a:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    e25e:	8e 01       	movw	r16, r28
    e260:	0b 55       	subi	r16, 0x5B	; 91
    e262:	1f 4f       	sbci	r17, 0xFF	; 255
    e264:	4c e3       	ldi	r20, 0x3C	; 60
    e266:	c4 2e       	mov	r12, r20
    e268:	48 e0       	ldi	r20, 0x08	; 8
    e26a:	d4 2e       	mov	r13, r20
    e26c:	82 30       	cpi	r24, 0x02	; 2
    e26e:	09 f0       	breq	.+2      	; 0xe272 <systemGenerateReport+0x77e>
    e270:	6c c0       	rjmp	.+216    	; 0xe34a <systemGenerateReport+0x856>
		      GetProductPrice(sPrice,PumpNum,PumpNozzle);
    e272:	3f e0       	ldi	r19, 0x0F	; 15
    e274:	a3 2e       	mov	r10, r19
    e276:	b1 2c       	mov	r11, r1
    e278:	ac 0e       	add	r10, r28
    e27a:	bd 1e       	adc	r11, r29
    e27c:	c5 01       	movw	r24, r10
    e27e:	60 91 c2 02 	lds	r22, 0x02C2
    e282:	40 91 c1 02 	lds	r20, 0x02C1
    e286:	0e 94 62 68 	call	0xd0c4	; 0xd0c4 <GetProductPrice>
			  sprintf_P(strProductPrice,PSTR("Harga: Rp.%s"),sPrice);
    e28a:	00 d0       	rcall	.+0      	; 0xe28c <systemGenerateReport+0x798>
    e28c:	00 d0       	rcall	.+0      	; 0xe28e <systemGenerateReport+0x79a>
    e28e:	00 d0       	rcall	.+0      	; 0xe290 <systemGenerateReport+0x79c>
    e290:	ed b7       	in	r30, 0x3d	; 61
    e292:	fe b7       	in	r31, 0x3e	; 62
    e294:	31 96       	adiw	r30, 0x01	; 1
    e296:	21 e9       	ldi	r18, 0x91	; 145
    e298:	e2 2e       	mov	r14, r18
    e29a:	f1 2c       	mov	r15, r1
    e29c:	ec 0e       	add	r14, r28
    e29e:	fd 1e       	adc	r15, r29
    e2a0:	ad b7       	in	r26, 0x3d	; 61
    e2a2:	be b7       	in	r27, 0x3e	; 62
    e2a4:	12 96       	adiw	r26, 0x02	; 2
    e2a6:	fc 92       	st	X, r15
    e2a8:	ee 92       	st	-X, r14
    e2aa:	11 97       	sbiw	r26, 0x01	; 1
    e2ac:	8a ef       	ldi	r24, 0xFA	; 250
    e2ae:	95 e0       	ldi	r25, 0x05	; 5
    e2b0:	93 83       	std	Z+3, r25	; 0x03
    e2b2:	82 83       	std	Z+2, r24	; 0x02
    e2b4:	b5 82       	std	Z+5, r11	; 0x05
    e2b6:	a4 82       	std	Z+4, r10	; 0x04
    e2b8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

		      GetTabSpace(((17+10-strlen(strProduct))-strlen(strProductPrice)),strTabSpace2);
    e2bc:	f6 01       	movw	r30, r12
    e2be:	01 90       	ld	r0, Z+
    e2c0:	00 20       	and	r0, r0
    e2c2:	e9 f7       	brne	.-6      	; 0xe2be <systemGenerateReport+0x7ca>
    e2c4:	31 97       	sbiw	r30, 0x01	; 1
    e2c6:	ec 19       	sub	r30, r12
    e2c8:	fd 09       	sbc	r31, r13
    e2ca:	d7 01       	movw	r26, r14
    e2cc:	0d 90       	ld	r0, X+
    e2ce:	00 20       	and	r0, r0
    e2d0:	e9 f7       	brne	.-6      	; 0xe2cc <systemGenerateReport+0x7d8>
    e2d2:	11 97       	sbiw	r26, 0x01	; 1
    e2d4:	8d b7       	in	r24, 0x3d	; 61
    e2d6:	9e b7       	in	r25, 0x3e	; 62
    e2d8:	06 96       	adiw	r24, 0x06	; 6
    e2da:	0f b6       	in	r0, 0x3f	; 63
    e2dc:	f8 94       	cli
    e2de:	9e bf       	out	0x3e, r25	; 62
    e2e0:	0f be       	out	0x3f, r0	; 63
    e2e2:	8d bf       	out	0x3d, r24	; 61
    e2e4:	8e 2d       	mov	r24, r14
    e2e6:	8a 1b       	sub	r24, r26
    e2e8:	8e 1b       	sub	r24, r30
    e2ea:	9d e7       	ldi	r25, 0x7D	; 125
    e2ec:	a9 2e       	mov	r10, r25
    e2ee:	b1 2c       	mov	r11, r1
    e2f0:	ac 0e       	add	r10, r28
    e2f2:	bd 1e       	adc	r11, r29
    e2f4:	85 5e       	subi	r24, 0xE5	; 229
    e2f6:	b5 01       	movw	r22, r10
    e2f8:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
		      sprintf_P(strReport,PSTR("P%d.%d - %s %s %s"),PumpNum,PumpNozzle,strProduct,strTabSpace2,strProductPrice);
    e2fc:	ad b7       	in	r26, 0x3d	; 61
    e2fe:	be b7       	in	r27, 0x3e	; 62
    e300:	1e 97       	sbiw	r26, 0x0e	; 14
    e302:	0f b6       	in	r0, 0x3f	; 63
    e304:	f8 94       	cli
    e306:	be bf       	out	0x3e, r27	; 62
    e308:	0f be       	out	0x3f, r0	; 63
    e30a:	ad bf       	out	0x3d, r26	; 61
    e30c:	ed b7       	in	r30, 0x3d	; 61
    e30e:	fe b7       	in	r31, 0x3e	; 62
    e310:	31 96       	adiw	r30, 0x01	; 1
    e312:	12 96       	adiw	r26, 0x02	; 2
    e314:	1c 93       	st	X, r17
    e316:	0e 93       	st	-X, r16
    e318:	11 97       	sbiw	r26, 0x01	; 1
    e31a:	88 ee       	ldi	r24, 0xE8	; 232
    e31c:	95 e0       	ldi	r25, 0x05	; 5
    e31e:	93 83       	std	Z+3, r25	; 0x03
    e320:	82 83       	std	Z+2, r24	; 0x02
    e322:	80 91 c2 02 	lds	r24, 0x02C2
    e326:	84 83       	std	Z+4, r24	; 0x04
    e328:	15 82       	std	Z+5, r1	; 0x05
    e32a:	80 91 c1 02 	lds	r24, 0x02C1
    e32e:	86 83       	std	Z+6, r24	; 0x06
    e330:	17 82       	std	Z+7, r1	; 0x07
    e332:	d1 86       	std	Z+9, r13	; 0x09
    e334:	c0 86       	std	Z+8, r12	; 0x08
    e336:	b3 86       	std	Z+11, r11	; 0x0b
    e338:	a2 86       	std	Z+10, r10	; 0x0a
    e33a:	f5 86       	std	Z+13, r15	; 0x0d
    e33c:	e4 86       	std	Z+12, r14	; 0x0c
    e33e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e342:	ed b7       	in	r30, 0x3d	; 61
    e344:	fe b7       	in	r31, 0x3e	; 62
    e346:	3e 96       	adiw	r30, 0x0e	; 14
    e348:	24 c0       	rjmp	.+72     	; 0xe392 <systemGenerateReport+0x89e>
		  }
		  else sprintf_P(strReport,PSTR("P%d.%d - %s "),PumpNum,PumpNozzle,strProduct);
    e34a:	8d b7       	in	r24, 0x3d	; 61
    e34c:	9e b7       	in	r25, 0x3e	; 62
    e34e:	0a 97       	sbiw	r24, 0x0a	; 10
    e350:	0f b6       	in	r0, 0x3f	; 63
    e352:	f8 94       	cli
    e354:	9e bf       	out	0x3e, r25	; 62
    e356:	0f be       	out	0x3f, r0	; 63
    e358:	8d bf       	out	0x3d, r24	; 61
    e35a:	ed b7       	in	r30, 0x3d	; 61
    e35c:	fe b7       	in	r31, 0x3e	; 62
    e35e:	31 96       	adiw	r30, 0x01	; 1
    e360:	ad b7       	in	r26, 0x3d	; 61
    e362:	be b7       	in	r27, 0x3e	; 62
    e364:	12 96       	adiw	r26, 0x02	; 2
    e366:	1c 93       	st	X, r17
    e368:	0e 93       	st	-X, r16
    e36a:	11 97       	sbiw	r26, 0x01	; 1
    e36c:	8b ed       	ldi	r24, 0xDB	; 219
    e36e:	95 e0       	ldi	r25, 0x05	; 5
    e370:	93 83       	std	Z+3, r25	; 0x03
    e372:	82 83       	std	Z+2, r24	; 0x02
    e374:	80 91 c2 02 	lds	r24, 0x02C2
    e378:	84 83       	std	Z+4, r24	; 0x04
    e37a:	15 82       	std	Z+5, r1	; 0x05
    e37c:	80 91 c1 02 	lds	r24, 0x02C1
    e380:	86 83       	std	Z+6, r24	; 0x06
    e382:	17 82       	std	Z+7, r1	; 0x07
    e384:	d1 86       	std	Z+9, r13	; 0x09
    e386:	c0 86       	std	Z+8, r12	; 0x08
    e388:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e38c:	ed b7       	in	r30, 0x3d	; 61
    e38e:	fe b7       	in	r31, 0x3e	; 62
    e390:	3a 96       	adiw	r30, 0x0a	; 10
    e392:	0f b6       	in	r0, 0x3f	; 63
    e394:	f8 94       	cli
    e396:	fe bf       	out	0x3e, r31	; 62
    e398:	0f be       	out	0x3f, r0	; 63
    e39a:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    e39c:	15 ea       	ldi	r17, 0xA5	; 165
    e39e:	c1 2e       	mov	r12, r17
    e3a0:	d1 2c       	mov	r13, r1
    e3a2:	cc 0e       	add	r12, r28
    e3a4:	dd 1e       	adc	r13, r29
    e3a6:	c6 01       	movw	r24, r12
    e3a8:	6a ec       	ldi	r22, 0xCA	; 202
    e3aa:	74 e0       	ldi	r23, 0x04	; 4
    e3ac:	44 eb       	ldi	r20, 0xB4	; 180
    e3ae:	52 e0       	ldi	r21, 0x02	; 2
    e3b0:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>
          InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    e3b4:	84 e0       	ldi	r24, 0x04	; 4
    e3b6:	61 e0       	ldi	r22, 0x01	; 1
    e3b8:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e3bc:	8b e0       	ldi	r24, 0x0B	; 11
    e3be:	6a e2       	ldi	r22, 0x2A	; 42
    e3c0:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e3c4:	86 e0       	ldi	r24, 0x06	; 6
    e3c6:	61 e0       	ldi	r22, 0x01	; 1
    e3c8:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e3cc:	8c e0       	ldi	r24, 0x0C	; 12
    e3ce:	61 e0       	ldi	r22, 0x01	; 1
    e3d0:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>

		  GetTabSpace((17-strlen(strCurrentVolume)),strTabSpace);
    e3d4:	8e 01       	movw	r16, r28
    e3d6:	09 5c       	subi	r16, 0xC9	; 201
    e3d8:	1f 4f       	sbci	r17, 0xFF	; 255
    e3da:	f8 01       	movw	r30, r16
    e3dc:	01 90       	ld	r0, Z+
    e3de:	00 20       	and	r0, r0
    e3e0:	e9 f7       	brne	.-6      	; 0xe3dc <systemGenerateReport+0x8e8>
    e3e2:	80 2f       	mov	r24, r16
    e3e4:	8e 1b       	sub	r24, r30
    e3e6:	b9 e6       	ldi	r27, 0x69	; 105
    e3e8:	eb 2e       	mov	r14, r27
    e3ea:	f1 2c       	mov	r15, r1
    e3ec:	ec 0e       	add	r14, r28
    e3ee:	fd 1e       	adc	r15, r29
    e3f0:	8e 5e       	subi	r24, 0xEE	; 238
    e3f2:	b7 01       	movw	r22, r14
    e3f4:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
		  GetTabSpace((15-strlen(strCurrentMoney)),strTabSpace2);
    e3f8:	a6 e4       	ldi	r26, 0x46	; 70
    e3fa:	aa 2e       	mov	r10, r26
    e3fc:	b1 2c       	mov	r11, r1
    e3fe:	ac 0e       	add	r10, r28
    e400:	bd 1e       	adc	r11, r29
    e402:	f5 01       	movw	r30, r10
    e404:	01 90       	ld	r0, Z+
    e406:	00 20       	and	r0, r0
    e408:	e9 f7       	brne	.-6      	; 0xe404 <systemGenerateReport+0x910>
    e40a:	8a 2d       	mov	r24, r10
    e40c:	8e 1b       	sub	r24, r30
    e40e:	fd e7       	ldi	r31, 0x7D	; 125
    e410:	8f 2e       	mov	r8, r31
    e412:	91 2c       	mov	r9, r1
    e414:	8c 0e       	add	r8, r28
    e416:	9d 1e       	adc	r9, r29
    e418:	80 5f       	subi	r24, 0xF0	; 240
    e41a:	b4 01       	movw	r22, r8
    e41c:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True) sprintf_P(strReport,PSTR("Akhir:%s%s%s%s"),strTabSpace,strCurrentVolume,strTabSpace2,strCurrentMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    e420:	81 ec       	ldi	r24, 0xC1	; 193
    e422:	93 e0       	ldi	r25, 0x03	; 3
    e424:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    e428:	81 30       	cpi	r24, 0x01	; 1
    e42a:	19 f5       	brne	.+70     	; 0xe472 <systemGenerateReport+0x97e>
    e42c:	8d b7       	in	r24, 0x3d	; 61
    e42e:	9e b7       	in	r25, 0x3e	; 62
    e430:	0c 97       	sbiw	r24, 0x0c	; 12
    e432:	0f b6       	in	r0, 0x3f	; 63
    e434:	f8 94       	cli
    e436:	9e bf       	out	0x3e, r25	; 62
    e438:	0f be       	out	0x3f, r0	; 63
    e43a:	8d bf       	out	0x3d, r24	; 61
    e43c:	ed b7       	in	r30, 0x3d	; 61
    e43e:	fe b7       	in	r31, 0x3e	; 62
    e440:	31 96       	adiw	r30, 0x01	; 1
    e442:	ad b7       	in	r26, 0x3d	; 61
    e444:	be b7       	in	r27, 0x3e	; 62
    e446:	12 96       	adiw	r26, 0x02	; 2
    e448:	dc 92       	st	X, r13
    e44a:	ce 92       	st	-X, r12
    e44c:	11 97       	sbiw	r26, 0x01	; 1
    e44e:	8c ec       	ldi	r24, 0xCC	; 204
    e450:	95 e0       	ldi	r25, 0x05	; 5
    e452:	93 83       	std	Z+3, r25	; 0x03
    e454:	82 83       	std	Z+2, r24	; 0x02
    e456:	f5 82       	std	Z+5, r15	; 0x05
    e458:	e4 82       	std	Z+4, r14	; 0x04
    e45a:	17 83       	std	Z+7, r17	; 0x07
    e45c:	06 83       	std	Z+6, r16	; 0x06
    e45e:	91 86       	std	Z+9, r9	; 0x09
    e460:	80 86       	std	Z+8, r8	; 0x08
    e462:	b3 86       	std	Z+11, r11	; 0x0b
    e464:	a2 86       	std	Z+10, r10	; 0x0a
    e466:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e46a:	ed b7       	in	r30, 0x3d	; 61
    e46c:	fe b7       	in	r31, 0x3e	; 62
    e46e:	3c 96       	adiw	r30, 0x0c	; 12
    e470:	1e c0       	rjmp	.+60     	; 0xe4ae <systemGenerateReport+0x9ba>
		  else sprintf_P(strReport,PSTR("Akhir:%s%s"),strTabSpace,strCurrentVolume);
    e472:	8d b7       	in	r24, 0x3d	; 61
    e474:	9e b7       	in	r25, 0x3e	; 62
    e476:	08 97       	sbiw	r24, 0x08	; 8
    e478:	0f b6       	in	r0, 0x3f	; 63
    e47a:	f8 94       	cli
    e47c:	9e bf       	out	0x3e, r25	; 62
    e47e:	0f be       	out	0x3f, r0	; 63
    e480:	8d bf       	out	0x3d, r24	; 61
    e482:	ed b7       	in	r30, 0x3d	; 61
    e484:	fe b7       	in	r31, 0x3e	; 62
    e486:	31 96       	adiw	r30, 0x01	; 1
    e488:	ad b7       	in	r26, 0x3d	; 61
    e48a:	be b7       	in	r27, 0x3e	; 62
    e48c:	12 96       	adiw	r26, 0x02	; 2
    e48e:	dc 92       	st	X, r13
    e490:	ce 92       	st	-X, r12
    e492:	11 97       	sbiw	r26, 0x01	; 1
    e494:	81 ec       	ldi	r24, 0xC1	; 193
    e496:	95 e0       	ldi	r25, 0x05	; 5
    e498:	93 83       	std	Z+3, r25	; 0x03
    e49a:	82 83       	std	Z+2, r24	; 0x02
    e49c:	f5 82       	std	Z+5, r15	; 0x05
    e49e:	e4 82       	std	Z+4, r14	; 0x04
    e4a0:	17 83       	std	Z+7, r17	; 0x07
    e4a2:	06 83       	std	Z+6, r16	; 0x06
    e4a4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e4a8:	ed b7       	in	r30, 0x3d	; 61
    e4aa:	fe b7       	in	r31, 0x3e	; 62
    e4ac:	38 96       	adiw	r30, 0x08	; 8
    e4ae:	0f b6       	in	r0, 0x3f	; 63
    e4b0:	f8 94       	cli
    e4b2:	fe bf       	out	0x3e, r31	; 62
    e4b4:	0f be       	out	0x3f, r0	; 63
    e4b6:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    e4b8:	e5 ea       	ldi	r30, 0xA5	; 165
    e4ba:	ce 2e       	mov	r12, r30
    e4bc:	d1 2c       	mov	r13, r1
    e4be:	cc 0e       	add	r12, r28
    e4c0:	dd 1e       	adc	r13, r29
    e4c2:	c6 01       	movw	r24, r12
    e4c4:	6a ec       	ldi	r22, 0xCA	; 202
    e4c6:	74 e0       	ldi	r23, 0x04	; 4
    e4c8:	44 eb       	ldi	r20, 0xB4	; 180
    e4ca:	52 e0       	ldi	r21, 0x02	; 2
    e4cc:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>

		  GetTabSpace((17-strlen(strLastVolume)),strTabSpace);
    e4d0:	8e 01       	movw	r16, r28
    e4d2:	07 5e       	subi	r16, 0xE7	; 231
    e4d4:	1f 4f       	sbci	r17, 0xFF	; 255
    e4d6:	f8 01       	movw	r30, r16
    e4d8:	01 90       	ld	r0, Z+
    e4da:	00 20       	and	r0, r0
    e4dc:	e9 f7       	brne	.-6      	; 0xe4d8 <systemGenerateReport+0x9e4>
    e4de:	80 2f       	mov	r24, r16
    e4e0:	8e 1b       	sub	r24, r30
    e4e2:	79 e6       	ldi	r23, 0x69	; 105
    e4e4:	e7 2e       	mov	r14, r23
    e4e6:	f1 2c       	mov	r15, r1
    e4e8:	ec 0e       	add	r14, r28
    e4ea:	fd 1e       	adc	r15, r29
    e4ec:	8e 5e       	subi	r24, 0xEE	; 238
    e4ee:	b7 01       	movw	r22, r14
    e4f0:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
		  GetTabSpace((15-strlen(strLastMoney)),strTabSpace2);
    e4f4:	68 e2       	ldi	r22, 0x28	; 40
    e4f6:	a6 2e       	mov	r10, r22
    e4f8:	b1 2c       	mov	r11, r1
    e4fa:	ac 0e       	add	r10, r28
    e4fc:	bd 1e       	adc	r11, r29
    e4fe:	f5 01       	movw	r30, r10
    e500:	01 90       	ld	r0, Z+
    e502:	00 20       	and	r0, r0
    e504:	e9 f7       	brne	.-6      	; 0xe500 <systemGenerateReport+0xa0c>
    e506:	8a 2d       	mov	r24, r10
    e508:	8e 1b       	sub	r24, r30
    e50a:	5d e7       	ldi	r21, 0x7D	; 125
    e50c:	85 2e       	mov	r8, r21
    e50e:	91 2c       	mov	r9, r1
    e510:	8c 0e       	add	r8, r28
    e512:	9d 1e       	adc	r9, r29
    e514:	80 5f       	subi	r24, 0xF0	; 240
    e516:	b4 01       	movw	r22, r8
    e518:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("Awal :%s%s%s%s"),strTabSpace,strLastVolume,strTabSpace2,strLastMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    e51c:	81 ec       	ldi	r24, 0xC1	; 193
    e51e:	93 e0       	ldi	r25, 0x03	; 3
    e520:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    e524:	81 30       	cpi	r24, 0x01	; 1
    e526:	19 f5       	brne	.+70     	; 0xe56e <systemGenerateReport+0xa7a>
    e528:	8d b7       	in	r24, 0x3d	; 61
    e52a:	9e b7       	in	r25, 0x3e	; 62
    e52c:	0c 97       	sbiw	r24, 0x0c	; 12
    e52e:	0f b6       	in	r0, 0x3f	; 63
    e530:	f8 94       	cli
    e532:	9e bf       	out	0x3e, r25	; 62
    e534:	0f be       	out	0x3f, r0	; 63
    e536:	8d bf       	out	0x3d, r24	; 61
    e538:	ed b7       	in	r30, 0x3d	; 61
    e53a:	fe b7       	in	r31, 0x3e	; 62
    e53c:	31 96       	adiw	r30, 0x01	; 1
    e53e:	ad b7       	in	r26, 0x3d	; 61
    e540:	be b7       	in	r27, 0x3e	; 62
    e542:	12 96       	adiw	r26, 0x02	; 2
    e544:	dc 92       	st	X, r13
    e546:	ce 92       	st	-X, r12
    e548:	11 97       	sbiw	r26, 0x01	; 1
    e54a:	82 eb       	ldi	r24, 0xB2	; 178
    e54c:	95 e0       	ldi	r25, 0x05	; 5
    e54e:	93 83       	std	Z+3, r25	; 0x03
    e550:	82 83       	std	Z+2, r24	; 0x02
    e552:	f5 82       	std	Z+5, r15	; 0x05
    e554:	e4 82       	std	Z+4, r14	; 0x04
    e556:	17 83       	std	Z+7, r17	; 0x07
    e558:	06 83       	std	Z+6, r16	; 0x06
    e55a:	91 86       	std	Z+9, r9	; 0x09
    e55c:	80 86       	std	Z+8, r8	; 0x08
    e55e:	b3 86       	std	Z+11, r11	; 0x0b
    e560:	a2 86       	std	Z+10, r10	; 0x0a
    e562:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e566:	ed b7       	in	r30, 0x3d	; 61
    e568:	fe b7       	in	r31, 0x3e	; 62
    e56a:	3c 96       	adiw	r30, 0x0c	; 12
    e56c:	1e c0       	rjmp	.+60     	; 0xe5aa <systemGenerateReport+0xab6>
		  else sprintf_P(strReport,PSTR("Awal :%s%s"),strTabSpace,strLastVolume);
    e56e:	8d b7       	in	r24, 0x3d	; 61
    e570:	9e b7       	in	r25, 0x3e	; 62
    e572:	08 97       	sbiw	r24, 0x08	; 8
    e574:	0f b6       	in	r0, 0x3f	; 63
    e576:	f8 94       	cli
    e578:	9e bf       	out	0x3e, r25	; 62
    e57a:	0f be       	out	0x3f, r0	; 63
    e57c:	8d bf       	out	0x3d, r24	; 61
    e57e:	ed b7       	in	r30, 0x3d	; 61
    e580:	fe b7       	in	r31, 0x3e	; 62
    e582:	31 96       	adiw	r30, 0x01	; 1
    e584:	ad b7       	in	r26, 0x3d	; 61
    e586:	be b7       	in	r27, 0x3e	; 62
    e588:	12 96       	adiw	r26, 0x02	; 2
    e58a:	dc 92       	st	X, r13
    e58c:	ce 92       	st	-X, r12
    e58e:	11 97       	sbiw	r26, 0x01	; 1
    e590:	87 ea       	ldi	r24, 0xA7	; 167
    e592:	95 e0       	ldi	r25, 0x05	; 5
    e594:	93 83       	std	Z+3, r25	; 0x03
    e596:	82 83       	std	Z+2, r24	; 0x02
    e598:	f5 82       	std	Z+5, r15	; 0x05
    e59a:	e4 82       	std	Z+4, r14	; 0x04
    e59c:	17 83       	std	Z+7, r17	; 0x07
    e59e:	06 83       	std	Z+6, r16	; 0x06
    e5a0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e5a4:	ed b7       	in	r30, 0x3d	; 61
    e5a6:	fe b7       	in	r31, 0x3e	; 62
    e5a8:	38 96       	adiw	r30, 0x08	; 8
    e5aa:	0f b6       	in	r0, 0x3f	; 63
    e5ac:	f8 94       	cli
    e5ae:	fe bf       	out	0x3e, r31	; 62
    e5b0:	0f be       	out	0x3f, r0	; 63
    e5b2:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    e5b4:	45 ea       	ldi	r20, 0xA5	; 165
    e5b6:	e4 2e       	mov	r14, r20
    e5b8:	f1 2c       	mov	r15, r1
    e5ba:	ec 0e       	add	r14, r28
    e5bc:	fd 1e       	adc	r15, r29
    e5be:	c7 01       	movw	r24, r14
    e5c0:	6a ec       	ldi	r22, 0xCA	; 202
    e5c2:	74 e0       	ldi	r23, 0x04	; 4
    e5c4:	44 eb       	ldi	r20, 0xB4	; 180
    e5c6:	52 e0       	ldi	r21, 0x02	; 2
    e5c8:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>

		  GetTabSpace(12,strTabSpace);
    e5cc:	8e 01       	movw	r16, r28
    e5ce:	07 59       	subi	r16, 0x97	; 151
    e5d0:	1f 4f       	sbci	r17, 0xFF	; 255
    e5d2:	8c e0       	ldi	r24, 0x0C	; 12
    e5d4:	b8 01       	movw	r22, r16
    e5d6:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
          //PrintMoney
          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s-----------   -------------"),strTabSpace);//CreateReport(strReport,PrintBuffer,&RepPos);
    e5da:	81 ec       	ldi	r24, 0xC1	; 193
    e5dc:	93 e0       	ldi	r25, 0x03	; 3
    e5de:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    e5e2:	81 30       	cpi	r24, 0x01	; 1
    e5e4:	79 f4       	brne	.+30     	; 0xe604 <systemGenerateReport+0xb10>
    e5e6:	00 d0       	rcall	.+0      	; 0xe5e8 <systemGenerateReport+0xaf4>
    e5e8:	00 d0       	rcall	.+0      	; 0xe5ea <systemGenerateReport+0xaf6>
    e5ea:	00 d0       	rcall	.+0      	; 0xe5ec <systemGenerateReport+0xaf8>
    e5ec:	ed b7       	in	r30, 0x3d	; 61
    e5ee:	fe b7       	in	r31, 0x3e	; 62
    e5f0:	31 96       	adiw	r30, 0x01	; 1
    e5f2:	ad b7       	in	r26, 0x3d	; 61
    e5f4:	be b7       	in	r27, 0x3e	; 62
    e5f6:	12 96       	adiw	r26, 0x02	; 2
    e5f8:	fc 92       	st	X, r15
    e5fa:	ee 92       	st	-X, r14
    e5fc:	11 97       	sbiw	r26, 0x01	; 1
    e5fe:	89 e8       	ldi	r24, 0x89	; 137
    e600:	95 e0       	ldi	r25, 0x05	; 5
    e602:	0e c0       	rjmp	.+28     	; 0xe620 <systemGenerateReport+0xb2c>
		  else sprintf_P(strReport,PSTR("%s-----------                "),strTabSpace);CreateReport(strReport,PrintBuffer,&RepPos);
    e604:	00 d0       	rcall	.+0      	; 0xe606 <systemGenerateReport+0xb12>
    e606:	00 d0       	rcall	.+0      	; 0xe608 <systemGenerateReport+0xb14>
    e608:	00 d0       	rcall	.+0      	; 0xe60a <systemGenerateReport+0xb16>
    e60a:	ed b7       	in	r30, 0x3d	; 61
    e60c:	fe b7       	in	r31, 0x3e	; 62
    e60e:	31 96       	adiw	r30, 0x01	; 1
    e610:	ad b7       	in	r26, 0x3d	; 61
    e612:	be b7       	in	r27, 0x3e	; 62
    e614:	12 96       	adiw	r26, 0x02	; 2
    e616:	fc 92       	st	X, r15
    e618:	ee 92       	st	-X, r14
    e61a:	11 97       	sbiw	r26, 0x01	; 1
    e61c:	8b e6       	ldi	r24, 0x6B	; 107
    e61e:	95 e0       	ldi	r25, 0x05	; 5
    e620:	93 83       	std	Z+3, r25	; 0x03
    e622:	82 83       	std	Z+2, r24	; 0x02
    e624:	15 83       	std	Z+5, r17	; 0x05
    e626:	04 83       	std	Z+4, r16	; 0x04
    e628:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e62c:	ed b7       	in	r30, 0x3d	; 61
    e62e:	fe b7       	in	r31, 0x3e	; 62
    e630:	36 96       	adiw	r30, 0x06	; 6
    e632:	0f b6       	in	r0, 0x3f	; 63
    e634:	f8 94       	cli
    e636:	fe bf       	out	0x3e, r31	; 62
    e638:	0f be       	out	0x3f, r0	; 63
    e63a:	ed bf       	out	0x3d, r30	; 61
    e63c:	35 ea       	ldi	r19, 0xA5	; 165
    e63e:	c3 2e       	mov	r12, r19
    e640:	d1 2c       	mov	r13, r1
    e642:	cc 0e       	add	r12, r28
    e644:	dd 1e       	adc	r13, r29
    e646:	c6 01       	movw	r24, r12
    e648:	6a ec       	ldi	r22, 0xCA	; 202
    e64a:	74 e0       	ldi	r23, 0x04	; 4
    e64c:	44 eb       	ldi	r20, 0xB4	; 180
    e64e:	52 e0       	ldi	r21, 0x02	; 2
    e650:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>

		  GetTabSpace((23-strlen(strDeltaVolume)),strTabSpace);
    e654:	23 ee       	ldi	r18, 0xE3	; 227
    e656:	e2 2e       	mov	r14, r18
    e658:	29 e0       	ldi	r18, 0x09	; 9
    e65a:	f2 2e       	mov	r15, r18
    e65c:	f7 01       	movw	r30, r14
    e65e:	01 90       	ld	r0, Z+
    e660:	00 20       	and	r0, r0
    e662:	e9 f7       	brne	.-6      	; 0xe65e <systemGenerateReport+0xb6a>
    e664:	31 97       	sbiw	r30, 0x01	; 1
    e666:	ee 19       	sub	r30, r14
    e668:	ff 09       	sbc	r31, r15
    e66a:	8e 01       	movw	r16, r28
    e66c:	07 59       	subi	r16, 0x97	; 151
    e66e:	1f 4f       	sbci	r17, 0xFF	; 255
    e670:	87 e1       	ldi	r24, 0x17	; 23
    e672:	8e 1b       	sub	r24, r30
    e674:	b8 01       	movw	r22, r16
    e676:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
		  GetTabSpace((15-strlen(strDeltaMoney)),strTabSpace2);
    e67a:	9b e0       	ldi	r25, 0x0B	; 11
    e67c:	89 2e       	mov	r8, r25
    e67e:	9d e0       	ldi	r25, 0x0D	; 13
    e680:	99 2e       	mov	r9, r25
    e682:	f4 01       	movw	r30, r8
    e684:	01 90       	ld	r0, Z+
    e686:	00 20       	and	r0, r0
    e688:	e9 f7       	brne	.-6      	; 0xe684 <systemGenerateReport+0xb90>
    e68a:	31 97       	sbiw	r30, 0x01	; 1
    e68c:	e8 19       	sub	r30, r8
    e68e:	f9 09       	sbc	r31, r9
    e690:	8d e7       	ldi	r24, 0x7D	; 125
    e692:	a8 2e       	mov	r10, r24
    e694:	b1 2c       	mov	r11, r1
    e696:	ac 0e       	add	r10, r28
    e698:	bd 1e       	adc	r11, r29
    e69a:	8f e0       	ldi	r24, 0x0F	; 15
    e69c:	8e 1b       	sub	r24, r30
    e69e:	b5 01       	movw	r22, r10
    e6a0:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s%s%s%s"),strTabSpace,strDeltaVolume,strTabSpace2,strDeltaMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    e6a4:	81 ec       	ldi	r24, 0xC1	; 193
    e6a6:	93 e0       	ldi	r25, 0x03	; 3
    e6a8:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    e6ac:	81 30       	cpi	r24, 0x01	; 1
    e6ae:	19 f5       	brne	.+70     	; 0xe6f6 <systemGenerateReport+0xc02>
    e6b0:	8d b7       	in	r24, 0x3d	; 61
    e6b2:	9e b7       	in	r25, 0x3e	; 62
    e6b4:	0c 97       	sbiw	r24, 0x0c	; 12
    e6b6:	0f b6       	in	r0, 0x3f	; 63
    e6b8:	f8 94       	cli
    e6ba:	9e bf       	out	0x3e, r25	; 62
    e6bc:	0f be       	out	0x3f, r0	; 63
    e6be:	8d bf       	out	0x3d, r24	; 61
    e6c0:	ed b7       	in	r30, 0x3d	; 61
    e6c2:	fe b7       	in	r31, 0x3e	; 62
    e6c4:	31 96       	adiw	r30, 0x01	; 1
    e6c6:	ad b7       	in	r26, 0x3d	; 61
    e6c8:	be b7       	in	r27, 0x3e	; 62
    e6ca:	12 96       	adiw	r26, 0x02	; 2
    e6cc:	dc 92       	st	X, r13
    e6ce:	ce 92       	st	-X, r12
    e6d0:	11 97       	sbiw	r26, 0x01	; 1
    e6d2:	82 e6       	ldi	r24, 0x62	; 98
    e6d4:	95 e0       	ldi	r25, 0x05	; 5
    e6d6:	93 83       	std	Z+3, r25	; 0x03
    e6d8:	82 83       	std	Z+2, r24	; 0x02
    e6da:	15 83       	std	Z+5, r17	; 0x05
    e6dc:	04 83       	std	Z+4, r16	; 0x04
    e6de:	f7 82       	std	Z+7, r15	; 0x07
    e6e0:	e6 82       	std	Z+6, r14	; 0x06
    e6e2:	b1 86       	std	Z+9, r11	; 0x09
    e6e4:	a0 86       	std	Z+8, r10	; 0x08
    e6e6:	93 86       	std	Z+11, r9	; 0x0b
    e6e8:	82 86       	std	Z+10, r8	; 0x0a
    e6ea:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e6ee:	ed b7       	in	r30, 0x3d	; 61
    e6f0:	fe b7       	in	r31, 0x3e	; 62
    e6f2:	3c 96       	adiw	r30, 0x0c	; 12
    e6f4:	1e c0       	rjmp	.+60     	; 0xe732 <systemGenerateReport+0xc3e>
          else sprintf_P(strReport,PSTR("%s%s"),strTabSpace,strDeltaVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    e6f6:	8d b7       	in	r24, 0x3d	; 61
    e6f8:	9e b7       	in	r25, 0x3e	; 62
    e6fa:	08 97       	sbiw	r24, 0x08	; 8
    e6fc:	0f b6       	in	r0, 0x3f	; 63
    e6fe:	f8 94       	cli
    e700:	9e bf       	out	0x3e, r25	; 62
    e702:	0f be       	out	0x3f, r0	; 63
    e704:	8d bf       	out	0x3d, r24	; 61
    e706:	ed b7       	in	r30, 0x3d	; 61
    e708:	fe b7       	in	r31, 0x3e	; 62
    e70a:	31 96       	adiw	r30, 0x01	; 1
    e70c:	ad b7       	in	r26, 0x3d	; 61
    e70e:	be b7       	in	r27, 0x3e	; 62
    e710:	12 96       	adiw	r26, 0x02	; 2
    e712:	dc 92       	st	X, r13
    e714:	ce 92       	st	-X, r12
    e716:	11 97       	sbiw	r26, 0x01	; 1
    e718:	8d e5       	ldi	r24, 0x5D	; 93
    e71a:	95 e0       	ldi	r25, 0x05	; 5
    e71c:	93 83       	std	Z+3, r25	; 0x03
    e71e:	82 83       	std	Z+2, r24	; 0x02
    e720:	15 83       	std	Z+5, r17	; 0x05
    e722:	04 83       	std	Z+4, r16	; 0x04
    e724:	f7 82       	std	Z+7, r15	; 0x07
    e726:	e6 82       	std	Z+6, r14	; 0x06
    e728:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e72c:	ed b7       	in	r30, 0x3d	; 61
    e72e:	fe b7       	in	r31, 0x3e	; 62
    e730:	38 96       	adiw	r30, 0x08	; 8
    e732:	0f b6       	in	r0, 0x3f	; 63
    e734:	f8 94       	cli
    e736:	fe bf       	out	0x3e, r31	; 62
    e738:	0f be       	out	0x3f, r0	; 63
    e73a:	ed bf       	out	0x3d, r30	; 61
    e73c:	ce 01       	movw	r24, r28
    e73e:	8b 55       	subi	r24, 0x5B	; 91
    e740:	9f 4f       	sbci	r25, 0xFF	; 255
    e742:	6a ec       	ldi	r22, 0xCA	; 202
    e744:	74 e0       	ldi	r23, 0x04	; 4
    e746:	44 eb       	ldi	r20, 0xB4	; 180
    e748:	52 e0       	ldi	r21, 0x02	; 2
    e74a:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>

          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    e74e:	87 e0       	ldi	r24, 0x07	; 7
    e750:	61 e0       	ldi	r22, 0x01	; 1
    e752:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e756:	8b e0       	ldi	r24, 0x0B	; 11
    e758:	6a e2       	ldi	r22, 0x2A	; 42
    e75a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e75e:	89 e0       	ldi	r24, 0x09	; 9
    e760:	61 e0       	ldi	r22, 0x01	; 1
    e762:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e766:	8c e0       	ldi	r24, 0x0C	; 12
    e768:	61 e0       	ldi	r22, 0x01	; 1
    e76a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>


          cmdPrint=0b00000000;
    e76e:	10 92 93 02 	sts	0x0293, r1
		  LengthMessage81=RepPos+1;
    e772:	80 91 b4 02 	lds	r24, 0x02B4
    e776:	90 91 b5 02 	lds	r25, 0x02B5
    e77a:	01 96       	adiw	r24, 0x01	; 1
    e77c:	90 93 6c 02 	sts	0x026C, r25
    e780:	80 93 6b 02 	sts	0x026B, r24

		  IsFreePrinting=True;
    e784:	81 e0       	ldi	r24, 0x01	; 1
    e786:	80 93 86 02 	sts	0x0286, r24
	      IsBusyFreePrinting=True;
    e78a:	80 93 92 02 	sts	0x0292, r24

	      stGenerateReport=grWaitPrinted2;
    e78e:	89 e0       	ldi	r24, 0x09	; 9
    e790:	f6 c2       	rjmp	.+1516   	; 0xed7e <systemGenerateReport+0x128a>
	      break;
     case grWaitPrinted2:
	 
          if (IsBusyFreePrinting==False)stGenerateReport=grGenerateReportData;
    e792:	80 91 92 02 	lds	r24, 0x0292
    e796:	88 23       	and	r24, r24
    e798:	09 f0       	breq	.+2      	; 0xe79c <systemGenerateReport+0xca8>
    e79a:	f9 c2       	rjmp	.+1522   	; 0xed8e <systemGenerateReport+0x129a>
    e79c:	86 e0       	ldi	r24, 0x06	; 6
    e79e:	ef c2       	rjmp	.+1502   	; 0xed7e <systemGenerateReport+0x128a>
	      break;
     case grCreateReportFooter:
          RepPos=0;
    e7a0:	10 92 b5 02 	sts	0x02B5, r1
    e7a4:	10 92 b4 02 	sts	0x02B4, r1
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    e7a8:	8a ec       	ldi	r24, 0xCA	; 202
    e7aa:	94 e0       	ldi	r25, 0x04	; 4
    e7ac:	61 e9       	ldi	r22, 0x91	; 145
    e7ae:	71 e0       	ldi	r23, 0x01	; 1
    e7b0:	40 e0       	ldi	r20, 0x00	; 0
    e7b2:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		  FillChar(strReport,sizeof(strReport),0);
    e7b6:	05 ea       	ldi	r16, 0xA5	; 165
    e7b8:	a0 2e       	mov	r10, r16
    e7ba:	b1 2c       	mov	r11, r1
    e7bc:	ac 0e       	add	r10, r28
    e7be:	bd 1e       	adc	r11, r29
    e7c0:	c5 01       	movw	r24, r10
    e7c2:	60 e5       	ldi	r22, 0x50	; 80
    e7c4:	70 e0       	ldi	r23, 0x00	; 0
    e7c6:	40 e0       	ldi	r20, 0x00	; 0
    e7c8:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

		  RemZeroLead(strTotalMoney);
    e7cc:	16 e8       	ldi	r17, 0x86	; 134
    e7ce:	e1 2e       	mov	r14, r17
    e7d0:	19 e0       	ldi	r17, 0x09	; 9
    e7d2:	f1 2e       	mov	r15, r17
    e7d4:	c7 01       	movw	r24, r14
    e7d6:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		  RemZeroLead(strTotalVolume);
    e7da:	05 ed       	ldi	r16, 0xD5	; 213
    e7dc:	18 e0       	ldi	r17, 0x08	; 8
    e7de:	c8 01       	movw	r24, r16
    e7e0:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>

		  FormatTotalizerMoney(strTotalMoney);
    e7e4:	c7 01       	movw	r24, r14
    e7e6:	0e 94 4e 2b 	call	0x569c	; 0x569c <FormatTotalizerMoney>
		  FormatCurrency(strTotalMoney);
    e7ea:	c7 01       	movw	r24, r14
    e7ec:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
		  FormatTotalizerVolume(strTotalVolume);
    e7f0:	c8 01       	movw	r24, r16
    e7f2:	0e 94 40 2b 	call	0x5680	; 0x5680 <FormatTotalizerVolume>
		  FormatCurrency(strTotalVolume);
    e7f6:	c8 01       	movw	r24, r16
    e7f8:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>

          //Test
		  //RemZeroLead(strTotalMoney);
		  //RemZeroLead(strTotalVolume);

		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    e7fc:	81 e0       	ldi	r24, 0x01	; 1
    e7fe:	61 e0       	ldi	r22, 0x01	; 1
    e800:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e804:	8b e0       	ldi	r24, 0x0B	; 11
    e806:	6a e2       	ldi	r22, 0x2A	; 42
    e808:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e80c:	83 e0       	ldi	r24, 0x03	; 3
    e80e:	61 e0       	ldi	r22, 0x01	; 1
    e810:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e814:	8c e0       	ldi	r24, 0x0C	; 12
    e816:	61 e0       	ldi	r22, 0x01	; 1
    e818:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
		  GetTabSpace((17-strlen(strTotalVolume)),strTabSpace);
    e81c:	f8 01       	movw	r30, r16
    e81e:	01 90       	ld	r0, Z+
    e820:	00 20       	and	r0, r0
    e822:	e9 f7       	brne	.-6      	; 0xe81e <systemGenerateReport+0xd2a>
    e824:	31 97       	sbiw	r30, 0x01	; 1
    e826:	e0 1b       	sub	r30, r16
    e828:	f1 0b       	sbc	r31, r17
    e82a:	b9 e6       	ldi	r27, 0x69	; 105
    e82c:	cb 2e       	mov	r12, r27
    e82e:	d1 2c       	mov	r13, r1
    e830:	cc 0e       	add	r12, r28
    e832:	dd 1e       	adc	r13, r29
    e834:	81 e1       	ldi	r24, 0x11	; 17
    e836:	8e 1b       	sub	r24, r30
    e838:	b6 01       	movw	r22, r12
    e83a:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
		  GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    e83e:	f7 01       	movw	r30, r14
    e840:	01 90       	ld	r0, Z+
    e842:	00 20       	and	r0, r0
    e844:	e9 f7       	brne	.-6      	; 0xe840 <systemGenerateReport+0xd4c>
    e846:	31 97       	sbiw	r30, 0x01	; 1
    e848:	ee 19       	sub	r30, r14
    e84a:	ff 09       	sbc	r31, r15
    e84c:	ad e7       	ldi	r26, 0x7D	; 125
    e84e:	8a 2e       	mov	r8, r26
    e850:	91 2c       	mov	r9, r1
    e852:	8c 0e       	add	r8, r28
    e854:	9d 1e       	adc	r9, r29
    e856:	8f e0       	ldi	r24, 0x0F	; 15
    e858:	8e 1b       	sub	r24, r30
    e85a:	b4 01       	movw	r22, r8
    e85c:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    e860:	81 ec       	ldi	r24, 0xC1	; 193
    e862:	93 e0       	ldi	r25, 0x03	; 3
    e864:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    e868:	81 30       	cpi	r24, 0x01	; 1
    e86a:	19 f5       	brne	.+70     	; 0xe8b2 <systemGenerateReport+0xdbe>
    e86c:	8d b7       	in	r24, 0x3d	; 61
    e86e:	9e b7       	in	r25, 0x3e	; 62
    e870:	0c 97       	sbiw	r24, 0x0c	; 12
    e872:	0f b6       	in	r0, 0x3f	; 63
    e874:	f8 94       	cli
    e876:	9e bf       	out	0x3e, r25	; 62
    e878:	0f be       	out	0x3f, r0	; 63
    e87a:	8d bf       	out	0x3d, r24	; 61
    e87c:	ed b7       	in	r30, 0x3d	; 61
    e87e:	fe b7       	in	r31, 0x3e	; 62
    e880:	31 96       	adiw	r30, 0x01	; 1
    e882:	ad b7       	in	r26, 0x3d	; 61
    e884:	be b7       	in	r27, 0x3e	; 62
    e886:	12 96       	adiw	r26, 0x02	; 2
    e888:	bc 92       	st	X, r11
    e88a:	ae 92       	st	-X, r10
    e88c:	11 97       	sbiw	r26, 0x01	; 1
    e88e:	8e e4       	ldi	r24, 0x4E	; 78
    e890:	95 e0       	ldi	r25, 0x05	; 5
    e892:	93 83       	std	Z+3, r25	; 0x03
    e894:	82 83       	std	Z+2, r24	; 0x02
    e896:	d5 82       	std	Z+5, r13	; 0x05
    e898:	c4 82       	std	Z+4, r12	; 0x04
    e89a:	17 83       	std	Z+7, r17	; 0x07
    e89c:	06 83       	std	Z+6, r16	; 0x06
    e89e:	91 86       	std	Z+9, r9	; 0x09
    e8a0:	80 86       	std	Z+8, r8	; 0x08
    e8a2:	f3 86       	std	Z+11, r15	; 0x0b
    e8a4:	e2 86       	std	Z+10, r14	; 0x0a
    e8a6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e8aa:	ed b7       	in	r30, 0x3d	; 61
    e8ac:	fe b7       	in	r31, 0x3e	; 62
    e8ae:	3c 96       	adiw	r30, 0x0c	; 12
    e8b0:	1e c0       	rjmp	.+60     	; 0xe8ee <systemGenerateReport+0xdfa>
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    e8b2:	8d b7       	in	r24, 0x3d	; 61
    e8b4:	9e b7       	in	r25, 0x3e	; 62
    e8b6:	08 97       	sbiw	r24, 0x08	; 8
    e8b8:	0f b6       	in	r0, 0x3f	; 63
    e8ba:	f8 94       	cli
    e8bc:	9e bf       	out	0x3e, r25	; 62
    e8be:	0f be       	out	0x3f, r0	; 63
    e8c0:	8d bf       	out	0x3d, r24	; 61
    e8c2:	ed b7       	in	r30, 0x3d	; 61
    e8c4:	fe b7       	in	r31, 0x3e	; 62
    e8c6:	31 96       	adiw	r30, 0x01	; 1
    e8c8:	ad b7       	in	r26, 0x3d	; 61
    e8ca:	be b7       	in	r27, 0x3e	; 62
    e8cc:	12 96       	adiw	r26, 0x02	; 2
    e8ce:	bc 92       	st	X, r11
    e8d0:	ae 92       	st	-X, r10
    e8d2:	11 97       	sbiw	r26, 0x01	; 1
    e8d4:	83 e4       	ldi	r24, 0x43	; 67
    e8d6:	95 e0       	ldi	r25, 0x05	; 5
    e8d8:	93 83       	std	Z+3, r25	; 0x03
    e8da:	82 83       	std	Z+2, r24	; 0x02
    e8dc:	d5 82       	std	Z+5, r13	; 0x05
    e8de:	c4 82       	std	Z+4, r12	; 0x04
    e8e0:	17 83       	std	Z+7, r17	; 0x07
    e8e2:	06 83       	std	Z+6, r16	; 0x06
    e8e4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    e8e8:	ed b7       	in	r30, 0x3d	; 61
    e8ea:	fe b7       	in	r31, 0x3e	; 62
    e8ec:	38 96       	adiw	r30, 0x08	; 8
    e8ee:	0f b6       	in	r0, 0x3f	; 63
    e8f0:	f8 94       	cli
    e8f2:	fe bf       	out	0x3e, r31	; 62
    e8f4:	0f be       	out	0x3f, r0	; 63
    e8f6:	ed bf       	out	0x3d, r30	; 61
    e8f8:	ce 01       	movw	r24, r28
    e8fa:	8b 55       	subi	r24, 0x5B	; 91
    e8fc:	9f 4f       	sbci	r25, 0xFF	; 255
    e8fe:	6a ec       	ldi	r22, 0xCA	; 202
    e900:	74 e0       	ldi	r23, 0x04	; 4
    e902:	44 eb       	ldi	r20, 0xB4	; 180
    e904:	52 e0       	ldi	r21, 0x02	; 2
    e906:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      
    e90a:	84 e0       	ldi	r24, 0x04	; 4
    e90c:	61 e0       	ldi	r22, 0x01	; 1
    e90e:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e912:	8b e0       	ldi	r24, 0x0B	; 11
    e914:	6a e2       	ldi	r22, 0x2A	; 42
    e916:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e91a:	86 e0       	ldi	r24, 0x06	; 6
    e91c:	61 e0       	ldi	r22, 0x01	; 1
    e91e:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    e922:	8c e0       	ldi	r24, 0x0C	; 12
    e924:	61 e0       	ldi	r22, 0x01	; 1
    e926:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    e92a:	cb 50       	subi	r28, 0x0B	; 11
    e92c:	df 4f       	sbci	r29, 0xFF	; 255
    e92e:	18 82       	st	Y, r1
    e930:	c5 5f       	subi	r28, 0xF5	; 245
    e932:	d0 40       	sbci	r29, 0x00	; 0
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){

						          FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
								  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
    e934:	f9 e1       	ldi	r31, 0x19	; 25
    e936:	6f 2e       	mov	r6, r31
    e938:	71 2c       	mov	r7, r1
    e93a:	6c 0e       	add	r6, r28
    e93c:	7d 1e       	adc	r7, r29
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
    e93e:	e8 e2       	ldi	r30, 0x28	; 40
    e940:	2e 2e       	mov	r2, r30
    e942:	31 2c       	mov	r3, r1
    e944:	2c 0e       	add	r2, r28
    e946:	3d 1e       	adc	r3, r29
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    e948:	cb c1       	rjmp	.+918    	; 0xece0 <systemGenerateReport+0x11ec>
		      xGrade=Ord(GradeList[iTotal]);
    e94a:	f5 01       	movw	r30, r10
    e94c:	ea 54       	subi	r30, 0x4A	; 74
    e94e:	fd 4f       	sbci	r31, 0xFD	; 253
    e950:	80 81       	ld	r24, Z
    e952:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
    e956:	80 93 c3 02 	sts	0x02C3, r24
			  if (xGrade>0){
    e95a:	88 23       	and	r24, r24
    e95c:	09 f4       	brne	.+2      	; 0xe960 <systemGenerateReport+0xe6c>
    e95e:	b5 c1       	rjmp	.+874    	; 0xecca <systemGenerateReport+0x11d6>
			      GetProductName(xGrade,strProduct);
    e960:	6c e3       	ldi	r22, 0x3C	; 60
    e962:	78 e0       	ldi	r23, 0x08	; 8
    e964:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <GetProductName>
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
    e968:	85 ed       	ldi	r24, 0xD5	; 213
    e96a:	98 e0       	ldi	r25, 0x08	; 8
    e96c:	64 e1       	ldi	r22, 0x14	; 20
    e96e:	70 e0       	ldi	r23, 0x00	; 0
    e970:	40 e0       	ldi	r20, 0x00	; 0
    e972:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);
    e976:	86 e8       	ldi	r24, 0x86	; 134
    e978:	99 e0       	ldi	r25, 0x09	; 9
    e97a:	64 e1       	ldi	r22, 0x14	; 20
    e97c:	70 e0       	ldi	r23, 0x00	; 0
    e97e:	40 e0       	ldi	r20, 0x00	; 0
    e980:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

				  for(xPump=1;xPump<=8;xPump++){
    e984:	81 e0       	ldi	r24, 0x01	; 1
    e986:	80 93 c5 02 	sts	0x02C5, r24
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    e98a:	77 e0       	ldi	r23, 0x07	; 7
    e98c:	87 2e       	mov	r8, r23
    e98e:	91 2c       	mov	r9, r1
    e990:	8c 0e       	add	r8, r28
    e992:	9d 1e       	adc	r9, r29
			          PumpNum=PPumpID[xPump-1];
    e994:	66 e0       	ldi	r22, 0x06	; 6
    e996:	c6 2e       	mov	r12, r22
    e998:	d1 2c       	mov	r13, r1
    e99a:	cc 0e       	add	r12, r28
    e99c:	dd 1e       	adc	r13, r29
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    e99e:	44 24       	eor	r4, r4
    e9a0:	43 94       	inc	r4
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    e9a2:	e4 c0       	rjmp	.+456    	; 0xeb6c <systemGenerateReport+0x1078>
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    e9a4:	c4 01       	movw	r24, r8
    e9a6:	65 e4       	ldi	r22, 0x45	; 69
    e9a8:	70 e0       	ldi	r23, 0x00	; 0
    e9aa:	48 e0       	ldi	r20, 0x08	; 8
    e9ac:	50 e0       	ldi	r21, 0x00	; 0
    e9ae:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
			          PumpNum=PPumpID[xPump-1];
    e9b2:	80 91 c5 02 	lds	r24, 0x02C5
    e9b6:	f6 01       	movw	r30, r12
    e9b8:	e8 0f       	add	r30, r24
    e9ba:	f1 1d       	adc	r31, r1
    e9bc:	80 81       	ld	r24, Z
    e9be:	80 93 c2 02 	sts	0x02C2, r24
					  if (PumpNum>0){
    e9c2:	88 23       	and	r24, r24
    e9c4:	09 f4       	brne	.+2      	; 0xe9c8 <systemGenerateReport+0xed4>
    e9c6:	cd c0       	rjmp	.+410    	; 0xeb62 <systemGenerateReport+0x106e>
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    e9c8:	40 92 c4 02 	sts	0x02C4, r4
    e9cc:	c5 c0       	rjmp	.+394    	; 0xeb58 <systemGenerateReport+0x1064>
							  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    e9ce:	80 91 c5 02 	lds	r24, 0x02C5
    e9d2:	90 e0       	ldi	r25, 0x00	; 0
    e9d4:	01 97       	sbiw	r24, 0x01	; 1
    e9d6:	bc 01       	movw	r22, r24
    e9d8:	66 0f       	add	r22, r22
    e9da:	77 1f       	adc	r23, r23
    e9dc:	68 0f       	add	r22, r24
    e9de:	79 1f       	adc	r23, r25
    e9e0:	66 0f       	add	r22, r22
    e9e2:	77 1f       	adc	r23, r23
    e9e4:	6b 5a       	subi	r22, 0xAB	; 171
    e9e6:	7f 4f       	sbci	r23, 0xFF	; 255
    e9e8:	ce 01       	movw	r24, r28
    e9ea:	01 96       	adiw	r24, 0x01	; 1
    e9ec:	46 e0       	ldi	r20, 0x06	; 6
    e9ee:	50 e0       	ldi	r21, 0x00	; 0
    e9f0:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){
    e9f4:	00 91 c4 02 	lds	r16, 0x02C4
    e9f8:	fe 01       	movw	r30, r28
    e9fa:	e0 0f       	add	r30, r16
    e9fc:	f1 1d       	adc	r31, r1
    e9fe:	90 81       	ld	r25, Z
    ea00:	80 91 c3 02 	lds	r24, 0x02C3
    ea04:	98 17       	cp	r25, r24
    ea06:	09 f0       	breq	.+2      	; 0xea0a <systemGenerateReport+0xf16>
    ea08:	a2 c0       	rjmp	.+324    	; 0xeb4e <systemGenerateReport+0x105a>

						          FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
    ea0a:	8b e0       	ldi	r24, 0x0B	; 11
    ea0c:	9d e0       	ldi	r25, 0x0D	; 13
    ea0e:	6f e0       	ldi	r22, 0x0F	; 15
    ea10:	70 e0       	ldi	r23, 0x00	; 0
    ea12:	40 e0       	ldi	r20, 0x00	; 0
    ea14:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
								  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
    ea18:	83 ee       	ldi	r24, 0xE3	; 227
    ea1a:	99 e0       	ldi	r25, 0x09	; 9
    ea1c:	6f e0       	ldi	r22, 0x0F	; 15
    ea1e:	70 e0       	ldi	r23, 0x00	; 0
    ea20:	40 e0       	ldi	r20, 0x00	; 0
    ea22:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
    ea26:	c3 01       	movw	r24, r6
    ea28:	6f e0       	ldi	r22, 0x0F	; 15
    ea2a:	70 e0       	ldi	r23, 0x00	; 0
    ea2c:	40 e0       	ldi	r20, 0x00	; 0
    ea2e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
    ea32:	c1 01       	movw	r24, r2
    ea34:	6f e0       	ldi	r22, 0x0F	; 15
    ea36:	70 e0       	ldi	r23, 0x00	; 0
    ea38:	40 e0       	ldi	r20, 0x00	; 0
    ea3a:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
								  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
    ea3e:	ce 01       	movw	r24, r28
    ea40:	c7 96       	adiw	r24, 0x37	; 55
    ea42:	6f e0       	ldi	r22, 0x0F	; 15
    ea44:	70 e0       	ldi	r23, 0x00	; 0
    ea46:	40 e0       	ldi	r20, 0x00	; 0
    ea48:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
								  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);
    ea4c:	ce 01       	movw	r24, r28
    ea4e:	8a 5b       	subi	r24, 0xBA	; 186
    ea50:	9f 4f       	sbci	r25, 0xFF	; 255
    ea52:	6f e0       	ldi	r22, 0x0F	; 15
    ea54:	70 e0       	ldi	r23, 0x00	; 0
    ea56:	40 e0       	ldi	r20, 0x00	; 0
    ea58:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

								  PumpNozzle=xNozzle;
    ea5c:	00 93 c1 02 	sts	0x02C1, r16
								  
								  FIPAddr=GetFIPAddr(PumpNum); 
    ea60:	80 91 c2 02 	lds	r24, 0x02C2
    ea64:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
								  if (FIPAddr>0){
    ea68:	88 23       	and	r24, r24
    ea6a:	31 f1       	breq	.+76     	; 0xeab8 <systemGenerateReport+0xfc4>
									  FIPAddr=FIPAddr-1;							  							  							      
    ea6c:	e8 2e       	mov	r14, r24
    ea6e:	ea 94       	dec	r14
									  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    ea70:	80 e0       	ldi	r24, 0x00	; 0
    ea72:	60 e0       	ldi	r22, 0x00	; 0
    ea74:	4e 2d       	mov	r20, r14
    ea76:	20 91 c1 02 	lds	r18, 0x02C1
    ea7a:	83 01       	movw	r16, r6
    ea7c:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    ea80:	81 e0       	ldi	r24, 0x01	; 1
    ea82:	60 e0       	ldi	r22, 0x00	; 0
    ea84:	4e 2d       	mov	r20, r14
    ea86:	20 91 c1 02 	lds	r18, 0x02C1
    ea8a:	81 01       	movw	r16, r2
    ea8c:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>

									  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    ea90:	80 e0       	ldi	r24, 0x00	; 0
    ea92:	61 e0       	ldi	r22, 0x01	; 1
    ea94:	4e 2d       	mov	r20, r14
    ea96:	20 91 c1 02 	lds	r18, 0x02C1
    ea9a:	8e 01       	movw	r16, r28
    ea9c:	09 5c       	subi	r16, 0xC9	; 201
    ea9e:	1f 4f       	sbci	r17, 0xFF	; 255
    eaa0:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    eaa4:	81 e0       	ldi	r24, 0x01	; 1
    eaa6:	61 e0       	ldi	r22, 0x01	; 1
    eaa8:	4e 2d       	mov	r20, r14
    eaaa:	20 91 c1 02 	lds	r18, 0x02C1
    eaae:	8e 01       	movw	r16, r28
    eab0:	0a 5b       	subi	r16, 0xBA	; 186
    eab2:	1f 4f       	sbci	r17, 0xFF	; 255
    eab4:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
								  }

								  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    eab8:	80 e0       	ldi	r24, 0x00	; 0
    eaba:	be 01       	movw	r22, r28
    eabc:	69 5c       	subi	r22, 0xC9	; 201
    eabe:	7f 4f       	sbci	r23, 0xFF	; 255
    eac0:	a3 01       	movw	r20, r6
    eac2:	23 ee       	ldi	r18, 0xE3	; 227
    eac4:	39 e0       	ldi	r19, 0x09	; 9
    eac6:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>
								  if (IsMinus(strDeltaVolume)==True)
    eaca:	83 ee       	ldi	r24, 0xE3	; 227
    eacc:	99 e0       	ldi	r25, 0x09	; 9
    eace:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <IsMinus>
    ead2:	81 30       	cpi	r24, 0x01	; 1
    ead4:	21 f4       	brne	.+8      	; 0xeade <systemGenerateReport+0xfea>
								      NormalizeOverflow(strDeltaVolume);
    ead6:	83 ee       	ldi	r24, 0xE3	; 227
    ead8:	99 e0       	ldi	r25, 0x09	; 9
    eada:	0e 94 11 68 	call	0xd022	; 0xd022 <NormalizeOverflow>


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    eade:	87 e3       	ldi	r24, 0x37	; 55
    eae0:	91 e0       	ldi	r25, 0x01	; 1
    eae2:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    eae6:	82 30       	cpi	r24, 0x02	; 2
    eae8:	79 f4       	brne	.+30     	; 0xeb08 <systemGenerateReport+0x1014>
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    eaea:	ce 01       	movw	r24, r28
    eaec:	0f 96       	adiw	r24, 0x0f	; 15
    eaee:	60 91 c2 02 	lds	r22, 0x02C2
    eaf2:	40 91 c1 02 	lds	r20, 0x02C1
    eaf6:	0e 94 62 68 	call	0xd0c4	; 0xd0c4 <GetProductPrice>
									  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    eafa:	82 e0       	ldi	r24, 0x02	; 2
    eafc:	be 01       	movw	r22, r28
    eafe:	61 5f       	subi	r22, 0xF1	; 241
    eb00:	7f 4f       	sbci	r23, 0xFF	; 255
    eb02:	43 ee       	ldi	r20, 0xE3	; 227
    eb04:	59 e0       	ldi	r21, 0x09	; 9
    eb06:	05 c0       	rjmp	.+10     	; 0xeb12 <systemGenerateReport+0x101e>
								  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    eb08:	80 e0       	ldi	r24, 0x00	; 0
    eb0a:	be 01       	movw	r22, r28
    eb0c:	6a 5b       	subi	r22, 0xBA	; 186
    eb0e:	7f 4f       	sbci	r23, 0xFF	; 255
    eb10:	a1 01       	movw	r20, r2
    eb12:	2b e0       	ldi	r18, 0x0B	; 11
    eb14:	3d e0       	ldi	r19, 0x0D	; 13
    eb16:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>
								  //StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
								  if (IsMinus(strDeltaMoney)==True)
    eb1a:	8b e0       	ldi	r24, 0x0B	; 11
    eb1c:	9d e0       	ldi	r25, 0x0D	; 13
    eb1e:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <IsMinus>
    eb22:	81 30       	cpi	r24, 0x01	; 1
    eb24:	21 f4       	brne	.+8      	; 0xeb2e <systemGenerateReport+0x103a>
								      NormalizeOverflow(strDeltaMoney);
    eb26:	8b e0       	ldi	r24, 0x0B	; 11
    eb28:	9d e0       	ldi	r25, 0x0D	; 13
    eb2a:	0e 94 11 68 	call	0xd022	; 0xd022 <NormalizeOverflow>
		  
								  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    eb2e:	81 e0       	ldi	r24, 0x01	; 1
    eb30:	65 ed       	ldi	r22, 0xD5	; 213
    eb32:	78 e0       	ldi	r23, 0x08	; 8
    eb34:	43 ee       	ldi	r20, 0xE3	; 227
    eb36:	59 e0       	ldi	r21, 0x09	; 9
    eb38:	9b 01       	movw	r18, r22
    eb3a:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>
								  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    eb3e:	81 e0       	ldi	r24, 0x01	; 1
    eb40:	66 e8       	ldi	r22, 0x86	; 134
    eb42:	79 e0       	ldi	r23, 0x09	; 9
    eb44:	4b e0       	ldi	r20, 0x0B	; 11
    eb46:	5d e0       	ldi	r21, 0x0D	; 13
    eb48:	9b 01       	movw	r18, r22
    eb4a:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <StrCalc>

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
			          PumpNum=PPumpID[xPump-1];
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    eb4e:	80 91 c4 02 	lds	r24, 0x02C4
    eb52:	8f 5f       	subi	r24, 0xFF	; 255
    eb54:	80 93 c4 02 	sts	0x02C4, r24
    eb58:	80 91 c4 02 	lds	r24, 0x02C4
    eb5c:	87 30       	cpi	r24, 0x07	; 7
    eb5e:	08 f4       	brcc	.+2      	; 0xeb62 <systemGenerateReport+0x106e>
    eb60:	36 cf       	rjmp	.-404    	; 0xe9ce <systemGenerateReport+0xeda>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    eb62:	80 91 c5 02 	lds	r24, 0x02C5
    eb66:	8f 5f       	subi	r24, 0xFF	; 255
    eb68:	80 93 c5 02 	sts	0x02C5, r24
    eb6c:	80 91 c5 02 	lds	r24, 0x02C5
    eb70:	89 30       	cpi	r24, 0x09	; 9
    eb72:	08 f4       	brcc	.+2      	; 0xeb76 <systemGenerateReport+0x1082>
    eb74:	17 cf       	rjmp	.-466    	; 0xe9a4 <systemGenerateReport+0xeb0>
							  }
						  }
					  }				  
				  }

				  RemZeroLead(strTotalMoney);
    eb76:	36 e8       	ldi	r19, 0x86	; 134
    eb78:	e3 2e       	mov	r14, r19
    eb7a:	39 e0       	ldi	r19, 0x09	; 9
    eb7c:	f3 2e       	mov	r15, r19
    eb7e:	c7 01       	movw	r24, r14
    eb80:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
				  RemZeroLead(strTotalVolume);
    eb84:	05 ed       	ldi	r16, 0xD5	; 213
    eb86:	18 e0       	ldi	r17, 0x08	; 8
    eb88:	c8 01       	movw	r24, r16
    eb8a:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>

				  FormatTotalizerMoney(strTotalMoney);
    eb8e:	c7 01       	movw	r24, r14
    eb90:	0e 94 4e 2b 	call	0x569c	; 0x569c <FormatTotalizerMoney>
				  FormatCurrency(strTotalMoney);
    eb94:	c7 01       	movw	r24, r14
    eb96:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>

				  FormatTotalizerVolume(strTotalVolume);
    eb9a:	c8 01       	movw	r24, r16
    eb9c:	0e 94 40 2b 	call	0x5680	; 0x5680 <FormatTotalizerVolume>
				  FormatCurrency(strTotalVolume);
    eba0:	c8 01       	movw	r24, r16
    eba2:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
		          //Test
				 // RemZeroLead(strTotalMoney);
				 // RemZeroLead(strTotalVolume);


			      GetTabSpace((21-strlen(strProduct)-strlen(strTotalVolume)),strTabSpace);
    eba6:	2c e3       	ldi	r18, 0x3C	; 60
    eba8:	82 2e       	mov	r8, r18
    ebaa:	28 e0       	ldi	r18, 0x08	; 8
    ebac:	92 2e       	mov	r9, r18
    ebae:	d4 01       	movw	r26, r8
    ebb0:	0d 90       	ld	r0, X+
    ebb2:	00 20       	and	r0, r0
    ebb4:	e9 f7       	brne	.-6      	; 0xebb0 <systemGenerateReport+0x10bc>
    ebb6:	11 97       	sbiw	r26, 0x01	; 1
    ebb8:	a8 19       	sub	r26, r8
    ebba:	b9 09       	sbc	r27, r9
    ebbc:	f8 01       	movw	r30, r16
    ebbe:	01 90       	ld	r0, Z+
    ebc0:	00 20       	and	r0, r0
    ebc2:	e9 f7       	brne	.-6      	; 0xebbe <systemGenerateReport+0x10ca>
    ebc4:	31 97       	sbiw	r30, 0x01	; 1
    ebc6:	e0 1b       	sub	r30, r16
    ebc8:	f1 0b       	sbc	r31, r17
    ebca:	8a 2f       	mov	r24, r26
    ebcc:	81 95       	neg	r24
    ebce:	8e 1b       	sub	r24, r30
    ebd0:	99 e6       	ldi	r25, 0x69	; 105
    ebd2:	c9 2e       	mov	r12, r25
    ebd4:	d1 2c       	mov	r13, r1
    ebd6:	cc 0e       	add	r12, r28
    ebd8:	dd 1e       	adc	r13, r29
    ebda:	8b 5e       	subi	r24, 0xEB	; 235
    ebdc:	b6 01       	movw	r22, r12
    ebde:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>
			      GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    ebe2:	f7 01       	movw	r30, r14
    ebe4:	01 90       	ld	r0, Z+
    ebe6:	00 20       	and	r0, r0
    ebe8:	e9 f7       	brne	.-6      	; 0xebe4 <systemGenerateReport+0x10f0>
    ebea:	31 97       	sbiw	r30, 0x01	; 1
    ebec:	ee 19       	sub	r30, r14
    ebee:	ff 09       	sbc	r31, r15
    ebf0:	8d e7       	ldi	r24, 0x7D	; 125
    ebf2:	48 2e       	mov	r4, r24
    ebf4:	51 2c       	mov	r5, r1
    ebf6:	4c 0e       	add	r4, r28
    ebf8:	5d 1e       	adc	r5, r29
    ebfa:	8f e0       	ldi	r24, 0x0F	; 15
    ebfc:	8e 1b       	sub	r24, r30
    ebfe:	b2 01       	movw	r22, r4
    ec00:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <GetTabSpace>

				  //PrintMoney
		          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%d.%s%s%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);
    ec04:	81 ec       	ldi	r24, 0xC1	; 193
    ec06:	93 e0       	ldi	r25, 0x03	; 3
    ec08:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
    ec0c:	ae 01       	movw	r20, r28
    ec0e:	4b 55       	subi	r20, 0x5B	; 91
    ec10:	5f 4f       	sbci	r21, 0xFF	; 255
    ec12:	95 01       	movw	r18, r10
    ec14:	2f 5f       	subi	r18, 0xFF	; 255
    ec16:	3f 4f       	sbci	r19, 0xFF	; 255
    ec18:	81 30       	cpi	r24, 0x01	; 1
    ec1a:	39 f5       	brne	.+78     	; 0xec6a <systemGenerateReport+0x1176>
    ec1c:	8d b7       	in	r24, 0x3d	; 61
    ec1e:	9e b7       	in	r25, 0x3e	; 62
    ec20:	40 97       	sbiw	r24, 0x10	; 16
    ec22:	0f b6       	in	r0, 0x3f	; 63
    ec24:	f8 94       	cli
    ec26:	9e bf       	out	0x3e, r25	; 62
    ec28:	0f be       	out	0x3f, r0	; 63
    ec2a:	8d bf       	out	0x3d, r24	; 61
    ec2c:	ed b7       	in	r30, 0x3d	; 61
    ec2e:	fe b7       	in	r31, 0x3e	; 62
    ec30:	31 96       	adiw	r30, 0x01	; 1
    ec32:	ad b7       	in	r26, 0x3d	; 61
    ec34:	be b7       	in	r27, 0x3e	; 62
    ec36:	12 96       	adiw	r26, 0x02	; 2
    ec38:	5c 93       	st	X, r21
    ec3a:	4e 93       	st	-X, r20
    ec3c:	11 97       	sbiw	r26, 0x01	; 1
    ec3e:	85 e3       	ldi	r24, 0x35	; 53
    ec40:	95 e0       	ldi	r25, 0x05	; 5
    ec42:	93 83       	std	Z+3, r25	; 0x03
    ec44:	82 83       	std	Z+2, r24	; 0x02
    ec46:	35 83       	std	Z+5, r19	; 0x05
    ec48:	24 83       	std	Z+4, r18	; 0x04
    ec4a:	97 82       	std	Z+7, r9	; 0x07
    ec4c:	86 82       	std	Z+6, r8	; 0x06
    ec4e:	d1 86       	std	Z+9, r13	; 0x09
    ec50:	c0 86       	std	Z+8, r12	; 0x08
    ec52:	13 87       	std	Z+11, r17	; 0x0b
    ec54:	02 87       	std	Z+10, r16	; 0x0a
    ec56:	55 86       	std	Z+13, r5	; 0x0d
    ec58:	44 86       	std	Z+12, r4	; 0x0c
    ec5a:	f7 86       	std	Z+15, r15	; 0x0f
    ec5c:	e6 86       	std	Z+14, r14	; 0x0e
    ec5e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    ec62:	ed b7       	in	r30, 0x3d	; 61
    ec64:	fe b7       	in	r31, 0x3e	; 62
    ec66:	70 96       	adiw	r30, 0x10	; 16
    ec68:	22 c0       	rjmp	.+68     	; 0xecae <systemGenerateReport+0x11ba>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);
    ec6a:	8d b7       	in	r24, 0x3d	; 61
    ec6c:	9e b7       	in	r25, 0x3e	; 62
    ec6e:	0c 97       	sbiw	r24, 0x0c	; 12
    ec70:	0f b6       	in	r0, 0x3f	; 63
    ec72:	f8 94       	cli
    ec74:	9e bf       	out	0x3e, r25	; 62
    ec76:	0f be       	out	0x3f, r0	; 63
    ec78:	8d bf       	out	0x3d, r24	; 61
    ec7a:	ed b7       	in	r30, 0x3d	; 61
    ec7c:	fe b7       	in	r31, 0x3e	; 62
    ec7e:	31 96       	adiw	r30, 0x01	; 1
    ec80:	ad b7       	in	r26, 0x3d	; 61
    ec82:	be b7       	in	r27, 0x3e	; 62
    ec84:	12 96       	adiw	r26, 0x02	; 2
    ec86:	5c 93       	st	X, r21
    ec88:	4e 93       	st	-X, r20
    ec8a:	11 97       	sbiw	r26, 0x01	; 1
    ec8c:	8b e2       	ldi	r24, 0x2B	; 43
    ec8e:	95 e0       	ldi	r25, 0x05	; 5
    ec90:	93 83       	std	Z+3, r25	; 0x03
    ec92:	82 83       	std	Z+2, r24	; 0x02
    ec94:	35 83       	std	Z+5, r19	; 0x05
    ec96:	24 83       	std	Z+4, r18	; 0x04
    ec98:	97 82       	std	Z+7, r9	; 0x07
    ec9a:	86 82       	std	Z+6, r8	; 0x06
    ec9c:	d1 86       	std	Z+9, r13	; 0x09
    ec9e:	c0 86       	std	Z+8, r12	; 0x08
    eca0:	13 87       	std	Z+11, r17	; 0x0b
    eca2:	02 87       	std	Z+10, r16	; 0x0a
    eca4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    eca8:	ed b7       	in	r30, 0x3d	; 61
    ecaa:	fe b7       	in	r31, 0x3e	; 62
    ecac:	3c 96       	adiw	r30, 0x0c	; 12
    ecae:	0f b6       	in	r0, 0x3f	; 63
    ecb0:	f8 94       	cli
    ecb2:	fe bf       	out	0x3e, r31	; 62
    ecb4:	0f be       	out	0x3f, r0	; 63
    ecb6:	ed bf       	out	0x3d, r30	; 61

				  CreateReport(strReport,PrintBuffer,&RepPos);
    ecb8:	ce 01       	movw	r24, r28
    ecba:	8b 55       	subi	r24, 0x5B	; 91
    ecbc:	9f 4f       	sbci	r25, 0xFF	; 255
    ecbe:	6a ec       	ldi	r22, 0xCA	; 202
    ecc0:	74 e0       	ldi	r23, 0x04	; 4
    ecc2:	44 eb       	ldi	r20, 0xB4	; 180
    ecc4:	52 e0       	ldi	r21, 0x02	; 2
    ecc6:	0e 94 01 6a 	call	0xd402	; 0xd402 <CreateReport>
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    ecca:	cb 50       	subi	r28, 0x0B	; 11
    eccc:	df 4f       	sbci	r29, 0xFF	; 255
    ecce:	f8 81       	ld	r31, Y
    ecd0:	c5 5f       	subi	r28, 0xF5	; 245
    ecd2:	d0 40       	sbci	r29, 0x00	; 0
    ecd4:	ff 5f       	subi	r31, 0xFF	; 255
    ecd6:	cb 50       	subi	r28, 0x0B	; 11
    ecd8:	df 4f       	sbci	r29, 0xFF	; 255
    ecda:	f8 83       	st	Y, r31
    ecdc:	c5 5f       	subi	r28, 0xF5	; 245
    ecde:	d0 40       	sbci	r29, 0x00	; 0
    ece0:	e6 eb       	ldi	r30, 0xB6	; 182
    ece2:	f2 e0       	ldi	r31, 0x02	; 2
    ece4:	01 90       	ld	r0, Z+
    ece6:	00 20       	and	r0, r0
    ece8:	e9 f7       	brne	.-6      	; 0xece4 <systemGenerateReport+0x11f0>
    ecea:	31 97       	sbiw	r30, 0x01	; 1
    ecec:	e6 5b       	subi	r30, 0xB6	; 182
    ecee:	f2 40       	sbci	r31, 0x02	; 2
    ecf0:	cb 50       	subi	r28, 0x0B	; 11
    ecf2:	df 4f       	sbci	r29, 0xFF	; 255
    ecf4:	88 81       	ld	r24, Y
    ecf6:	c5 5f       	subi	r28, 0xF5	; 245
    ecf8:	d0 40       	sbci	r29, 0x00	; 0
    ecfa:	a8 2e       	mov	r10, r24
    ecfc:	bb 24       	eor	r11, r11
    ecfe:	ae 16       	cp	r10, r30
    ed00:	bf 06       	cpc	r11, r31
    ed02:	08 f4       	brcc	.+2      	; 0xed06 <systemGenerateReport+0x1212>
    ed04:	22 ce       	rjmp	.-956    	; 0xe94a <systemGenerateReport+0xe56>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);

				  CreateReport(strReport,PrintBuffer,&RepPos);
               }
		  }
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    ed06:	87 e0       	ldi	r24, 0x07	; 7
    ed08:	61 e0       	ldi	r22, 0x01	; 1
    ed0a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    ed0e:	8b e0       	ldi	r24, 0x0B	; 11
    ed10:	6a e2       	ldi	r22, 0x2A	; 42
    ed12:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    ed16:	89 e0       	ldi	r24, 0x09	; 9
    ed18:	61 e0       	ldi	r22, 0x01	; 1
    ed1a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    ed1e:	8c e0       	ldi	r24, 0x0C	; 12
    ed20:	61 e0       	ldi	r22, 0x01	; 1
    ed22:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
		  InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    ed26:	8c e0       	ldi	r24, 0x0C	; 12
    ed28:	61 e0       	ldi	r22, 0x01	; 1
    ed2a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    ed2e:	8c e0       	ldi	r24, 0x0C	; 12
    ed30:	61 e0       	ldi	r22, 0x01	; 1
    ed32:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    ed36:	8c e0       	ldi	r24, 0x0C	; 12
    ed38:	61 e0       	ldi	r22, 0x01	; 1
    ed3a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    ed3e:	8c e0       	ldi	r24, 0x0C	; 12
    ed40:	61 e0       	ldi	r22, 0x01	; 1
    ed42:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>
    ed46:	8c e0       	ldi	r24, 0x0C	; 12
    ed48:	61 e0       	ldi	r22, 0x01	; 1
    ed4a:	0e 94 9c 69 	call	0xd338	; 0xd338 <InserBorder.clone.0>


          cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    ed4e:	80 e3       	ldi	r24, 0x30	; 48
    ed50:	80 93 93 02 	sts	0x0293, r24
		  LengthMessage81=RepPos+1;
    ed54:	80 91 b4 02 	lds	r24, 0x02B4
    ed58:	90 91 b5 02 	lds	r25, 0x02B5
    ed5c:	01 96       	adiw	r24, 0x01	; 1
    ed5e:	90 93 6c 02 	sts	0x026C, r25
    ed62:	80 93 6b 02 	sts	0x026B, r24
		  IsFreePrinting=True;
    ed66:	81 e0       	ldi	r24, 0x01	; 1
    ed68:	80 93 86 02 	sts	0x0286, r24
	      IsBusyFreePrinting=True; 
    ed6c:	80 93 92 02 	sts	0x0292, r24
         	       
	      stGenerateReport=grWaitPrinted3;
    ed70:	8b e0       	ldi	r24, 0x0B	; 11
    ed72:	05 c0       	rjmp	.+10     	; 0xed7e <systemGenerateReport+0x128a>
	      break;
     case grWaitPrinted3:
          if (IsBusyFreePrinting==False)stGenerateReport=grFinishGenerateReport;
    ed74:	80 91 92 02 	lds	r24, 0x0292
    ed78:	88 23       	and	r24, r24
    ed7a:	49 f4       	brne	.+18     	; 0xed8e <systemGenerateReport+0x129a>
    ed7c:	8c e0       	ldi	r24, 0x0C	; 12
    ed7e:	80 93 c6 02 	sts	0x02C6, r24
    ed82:	05 c0       	rjmp	.+10     	; 0xed8e <systemGenerateReport+0x129a>
	      break;
     case grFinishGenerateReport:
	      IsFinishPrintingTotalizer=True;
    ed84:	81 e0       	ldi	r24, 0x01	; 1
    ed86:	80 93 65 02 	sts	0x0265, r24
          stGenerateReport=grScanAction;
    ed8a:	10 92 c6 02 	sts	0x02C6, r1
	      break;
	 }
}
    ed8e:	cb 50       	subi	r28, 0x0B	; 11
    ed90:	df 4f       	sbci	r29, 0xFF	; 255
    ed92:	0f b6       	in	r0, 0x3f	; 63
    ed94:	f8 94       	cli
    ed96:	de bf       	out	0x3e, r29	; 62
    ed98:	0f be       	out	0x3f, r0	; 63
    ed9a:	cd bf       	out	0x3d, r28	; 61
    ed9c:	cf 91       	pop	r28
    ed9e:	df 91       	pop	r29
    eda0:	1f 91       	pop	r17
    eda2:	0f 91       	pop	r16
    eda4:	ff 90       	pop	r15
    eda6:	ef 90       	pop	r14
    eda8:	df 90       	pop	r13
    edaa:	cf 90       	pop	r12
    edac:	bf 90       	pop	r11
    edae:	af 90       	pop	r10
    edb0:	9f 90       	pop	r9
    edb2:	8f 90       	pop	r8
    edb4:	7f 90       	pop	r7
    edb6:	6f 90       	pop	r6
    edb8:	5f 90       	pop	r5
    edba:	4f 90       	pop	r4
    edbc:	3f 90       	pop	r3
    edbe:	2f 90       	pop	r2
    edc0:	08 95       	ret

0000edc2 <SaveTotalizerCurrentToLast>:
	 }Dest[12]=0;
}

//SetTotalizerData(TVOLUME,TOTALIZER_NOW,1,1,strVolume)

void SaveTotalizerCurrentToLast(){
    edc2:	bf 92       	push	r11
    edc4:	cf 92       	push	r12
    edc6:	df 92       	push	r13
    edc8:	ef 92       	push	r14
    edca:	ff 92       	push	r15
    edcc:	0f 93       	push	r16
    edce:	1f 93       	push	r17
    edd0:	df 93       	push	r29
    edd2:	cf 93       	push	r28
    edd4:	cd b7       	in	r28, 0x3d	; 61
    edd6:	de b7       	in	r29, 0x3e	; 62
    edd8:	2f 97       	sbiw	r28, 0x0f	; 15
    edda:	0f b6       	in	r0, 0x3f	; 63
    eddc:	f8 94       	cli
    edde:	de bf       	out	0x3e, r29	; 62
    ede0:	0f be       	out	0x3f, r0	; 63
    ede2:	cd bf       	out	0x3d, r28	; 61
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    ede4:	bb 24       	eor	r11, r11
    ede6:	b3 94       	inc	r11
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
    ede8:	7e 01       	movw	r14, r28
    edea:	08 94       	sec
    edec:	e1 1c       	adc	r14, r1
    edee:	f1 1c       	adc	r15, r1
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    edf0:	8b 2d       	mov	r24, r11
    edf2:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
		  if (FIPAddr>0){
    edf6:	88 23       	and	r24, r24
    edf8:	69 f1       	breq	.+90     	; 0xee54 <SaveTotalizerCurrentToLast+0x92>
		      FIPAddr=FIPAddr-1;
    edfa:	c8 2e       	mov	r12, r24
    edfc:	ca 94       	dec	r12
			  for(iGrade=1;iGrade<=6;iGrade++){
    edfe:	dd 24       	eor	r13, r13
    ee00:	d3 94       	inc	r13
				  FillChar(strValue,sizeof(strValue),0);
    ee02:	c7 01       	movw	r24, r14
    ee04:	6f e0       	ldi	r22, 0x0F	; 15
    ee06:	70 e0       	ldi	r23, 0x00	; 0
    ee08:	40 e0       	ldi	r20, 0x00	; 0
    ee0a:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    ee0e:	80 e0       	ldi	r24, 0x00	; 0
    ee10:	61 e0       	ldi	r22, 0x01	; 1
    ee12:	4c 2d       	mov	r20, r12
    ee14:	2d 2d       	mov	r18, r13
    ee16:	87 01       	movw	r16, r14
    ee18:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    ee1c:	80 e0       	ldi	r24, 0x00	; 0
    ee1e:	60 e0       	ldi	r22, 0x00	; 0
    ee20:	4c 2d       	mov	r20, r12
    ee22:	2d 2d       	mov	r18, r13
    ee24:	0e 94 22 60 	call	0xc044	; 0xc044 <SetTotalizerData>
				  FillChar(strValue,sizeof(strValue),0);
    ee28:	c7 01       	movw	r24, r14
    ee2a:	6f e0       	ldi	r22, 0x0F	; 15
    ee2c:	70 e0       	ldi	r23, 0x00	; 0
    ee2e:	40 e0       	ldi	r20, 0x00	; 0
    ee30:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    ee34:	81 e0       	ldi	r24, 0x01	; 1
    ee36:	61 e0       	ldi	r22, 0x01	; 1
    ee38:	4c 2d       	mov	r20, r12
    ee3a:	2d 2d       	mov	r18, r13
    ee3c:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <GetTotalizerData>
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    ee40:	81 e0       	ldi	r24, 0x01	; 1
    ee42:	60 e0       	ldi	r22, 0x00	; 0
    ee44:	4c 2d       	mov	r20, r12
    ee46:	2d 2d       	mov	r18, r13
    ee48:	0e 94 22 60 	call	0xc044	; 0xc044 <SetTotalizerData>
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    ee4c:	d3 94       	inc	r13
    ee4e:	8d 2d       	mov	r24, r13
    ee50:	87 30       	cpi	r24, 0x07	; 7
    ee52:	b9 f6       	brne	.-82     	; 0xee02 <SaveTotalizerCurrentToLast+0x40>
void SaveTotalizerCurrentToLast(){
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    ee54:	b3 94       	inc	r11
    ee56:	8b 2d       	mov	r24, r11
    ee58:	81 31       	cpi	r24, 0x11	; 17
    ee5a:	51 f6       	brne	.-108    	; 0xedf0 <SaveTotalizerCurrentToLast+0x2e>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    ee5c:	2f 96       	adiw	r28, 0x0f	; 15
    ee5e:	0f b6       	in	r0, 0x3f	; 63
    ee60:	f8 94       	cli
    ee62:	de bf       	out	0x3e, r29	; 62
    ee64:	0f be       	out	0x3f, r0	; 63
    ee66:	cd bf       	out	0x3d, r28	; 61
    ee68:	cf 91       	pop	r28
    ee6a:	df 91       	pop	r29
    ee6c:	1f 91       	pop	r17
    ee6e:	0f 91       	pop	r16
    ee70:	ff 90       	pop	r15
    ee72:	ef 90       	pop	r14
    ee74:	df 90       	pop	r13
    ee76:	cf 90       	pop	r12
    ee78:	bf 90       	pop	r11
    ee7a:	08 95       	ret

0000ee7c <ResetTotalizer>:
}

//-------------------Totalizer-----------------------------------------
//TAddr{TOTALIZER_LAST,TOTALIZER_NOW}
//TType:{TNONE,TVOLUME,TMONEY};
void ResetTotalizer(char TAddr){//Clear All TotalizerData;
    ee7c:	af 92       	push	r10
    ee7e:	bf 92       	push	r11
    ee80:	cf 92       	push	r12
    ee82:	df 92       	push	r13
    ee84:	ef 92       	push	r14
    ee86:	ff 92       	push	r15
    ee88:	0f 93       	push	r16
    ee8a:	1f 93       	push	r17
    ee8c:	df 93       	push	r29
    ee8e:	cf 93       	push	r28
    ee90:	cd b7       	in	r28, 0x3d	; 61
    ee92:	de b7       	in	r29, 0x3e	; 62
    ee94:	29 97       	sbiw	r28, 0x09	; 9
    ee96:	0f b6       	in	r0, 0x3f	; 63
    ee98:	f8 94       	cli
    ee9a:	de bf       	out	0x3e, r29	; 62
    ee9c:	0f be       	out	0x3f, r0	; 63
    ee9e:	cd bf       	out	0x3d, r28	; 61
    eea0:	d8 2e       	mov	r13, r24
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
    eea2:	00 d0       	rcall	.+0      	; 0xeea4 <ResetTotalizer+0x28>
    eea4:	00 d0       	rcall	.+0      	; 0xeea6 <ResetTotalizer+0x2a>
    eea6:	7e 01       	movw	r14, r28
    eea8:	08 94       	sec
    eeaa:	e1 1c       	adc	r14, r1
    eeac:	f1 1c       	adc	r15, r1
    eeae:	ed b7       	in	r30, 0x3d	; 61
    eeb0:	fe b7       	in	r31, 0x3e	; 62
    eeb2:	f2 82       	std	Z+2, r15	; 0x02
    eeb4:	e1 82       	std	Z+1, r14	; 0x01
    eeb6:	25 ee       	ldi	r18, 0xE5	; 229
    eeb8:	36 e0       	ldi	r19, 0x06	; 6
    eeba:	34 83       	std	Z+4, r19	; 0x04
    eebc:	23 83       	std	Z+3, r18	; 0x03
    eebe:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    eec2:	0f 90       	pop	r0
    eec4:	0f 90       	pop	r0
    eec6:	0f 90       	pop	r0
    eec8:	0f 90       	pop	r0
	 for (iPump=1;iPump<=16;iPump++){//Pump
    eeca:	bb 24       	eor	r11, r11
    eecc:	b3 94       	inc	r11
	      FIPAddr=GetFIPAddr(iPump);
    eece:	8b 2d       	mov	r24, r11
    eed0:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
		  if (FIPAddr>0){
    eed4:	88 23       	and	r24, r24
    eed6:	a9 f0       	breq	.+42     	; 0xef02 <ResetTotalizer+0x86>
		      FIPAddr=FIPAddr-1;
    eed8:	a8 2e       	mov	r10, r24
    eeda:	aa 94       	dec	r10
			  for(iGrade=1;iGrade<=6;iGrade++){
    eedc:	cc 24       	eor	r12, r12
    eede:	c3 94       	inc	r12
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
    eee0:	80 e0       	ldi	r24, 0x00	; 0
    eee2:	6d 2d       	mov	r22, r13
    eee4:	4a 2d       	mov	r20, r10
    eee6:	2c 2d       	mov	r18, r12
    eee8:	87 01       	movw	r16, r14
    eeea:	0e 94 22 60 	call	0xc044	; 0xc044 <SetTotalizerData>
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
    eeee:	81 e0       	ldi	r24, 0x01	; 1
    eef0:	6d 2d       	mov	r22, r13
    eef2:	4a 2d       	mov	r20, r10
    eef4:	2c 2d       	mov	r18, r12
    eef6:	0e 94 22 60 	call	0xc044	; 0xc044 <SetTotalizerData>
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    eefa:	c3 94       	inc	r12
    eefc:	fc 2d       	mov	r31, r12
    eefe:	f7 30       	cpi	r31, 0x07	; 7
    ef00:	79 f7       	brne	.-34     	; 0xeee0 <ResetTotalizer+0x64>
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
    ef02:	b3 94       	inc	r11
    ef04:	8b 2d       	mov	r24, r11
    ef06:	81 31       	cpi	r24, 0x11	; 17
    ef08:	11 f7       	brne	.-60     	; 0xeece <ResetTotalizer+0x52>
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    ef0a:	29 96       	adiw	r28, 0x09	; 9
    ef0c:	0f b6       	in	r0, 0x3f	; 63
    ef0e:	f8 94       	cli
    ef10:	de bf       	out	0x3e, r29	; 62
    ef12:	0f be       	out	0x3f, r0	; 63
    ef14:	cd bf       	out	0x3d, r28	; 61
    ef16:	cf 91       	pop	r28
    ef18:	df 91       	pop	r29
    ef1a:	1f 91       	pop	r17
    ef1c:	0f 91       	pop	r16
    ef1e:	ff 90       	pop	r15
    ef20:	ef 90       	pop	r14
    ef22:	df 90       	pop	r13
    ef24:	cf 90       	pop	r12
    ef26:	bf 90       	pop	r11
    ef28:	af 90       	pop	r10
    ef2a:	08 95       	ret

0000ef2c <FMenuLocalAccount>:
	 __key_lgtcnt = 0; 
	 PORTG=PORTG&0b11111101;
}


char FMenuLocalAccount(){
    ef2c:	7f 92       	push	r7
    ef2e:	8f 92       	push	r8
    ef30:	9f 92       	push	r9
    ef32:	af 92       	push	r10
    ef34:	bf 92       	push	r11
    ef36:	cf 92       	push	r12
    ef38:	df 92       	push	r13
    ef3a:	ef 92       	push	r14
    ef3c:	ff 92       	push	r15
    ef3e:	0f 93       	push	r16
    ef40:	1f 93       	push	r17
    ef42:	df 93       	push	r29
    ef44:	cf 93       	push	r28
    ef46:	cd b7       	in	r28, 0x3d	; 61
    ef48:	de b7       	in	r29, 0x3e	; 62
    ef4a:	e4 97       	sbiw	r28, 0x34	; 52
    ef4c:	0f b6       	in	r0, 0x3f	; 63
    ef4e:	f8 94       	cli
    ef50:	de bf       	out	0x3e, r29	; 62
    ef52:	0f be       	out	0x3f, r0	; 63
    ef54:	cd bf       	out	0x3d, r28	; 61
       char ProductName[11],strName[21];//,strPumpL[3],strPumpR[3];
       char Result;

	   Result=MENU_NONE;
	                                 //|   Local Account   |          
	       switch(stLocalAccount){   //|ID: ACD12345       |
    ef56:	80 91 5b 01 	lds	r24, 0x015B
    ef5a:	90 e0       	ldi	r25, 0x00	; 0
    ef5c:	01 97       	sbiw	r24, 0x01	; 1
    ef5e:	8f 31       	cpi	r24, 0x1F	; 31
    ef60:	91 05       	cpc	r25, r1
    ef62:	10 f0       	brcs	.+4      	; 0xef68 <FMenuLocalAccount+0x3c>
    ef64:	0c 94 11 80 	jmp	0x10022	; 0x10022 <FMenuLocalAccount+0x10f6>
    ef68:	8e 56       	subi	r24, 0x6E	; 110
    ef6a:	9f 4f       	sbci	r25, 0xFF	; 255
    ef6c:	fc 01       	movw	r30, r24
    ef6e:	ee 0f       	add	r30, r30
    ef70:	ff 1f       	adc	r31, r31
    ef72:	05 90       	lpm	r0, Z+
    ef74:	f4 91       	lpm	r31, Z+
    ef76:	e0 2d       	mov	r30, r0
    ef78:	09 94       	ijmp
	       case laInit:              //|Process ...        |
		        //Process RFID Data  //|                   |
				//UpdateCardID();
                BackLightTrig();ViewCardID();
    ef7a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <BackLightTrig>
    ef7e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <ViewCardID>
	            lcd_clear();
    ef82:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	            lcd_printf(1,1,PSTR("   Local Account   "));
    ef86:	81 e0       	ldi	r24, 0x01	; 1
    ef88:	61 e0       	ldi	r22, 0x01	; 1
    ef8a:	41 e9       	ldi	r20, 0x91	; 145
    ef8c:	52 e2       	ldi	r21, 0x22	; 34
    ef8e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	            sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
    ef92:	00 d0       	rcall	.+0      	; 0xef94 <FMenuLocalAccount+0x68>
    ef94:	00 d0       	rcall	.+0      	; 0xef96 <FMenuLocalAccount+0x6a>
    ef96:	00 d0       	rcall	.+0      	; 0xef98 <FMenuLocalAccount+0x6c>
    ef98:	ed b7       	in	r30, 0x3d	; 61
    ef9a:	fe b7       	in	r31, 0x3e	; 62
    ef9c:	31 96       	adiw	r30, 0x01	; 1
    ef9e:	8e 01       	movw	r16, r28
    efa0:	04 5f       	subi	r16, 0xF4	; 244
    efa2:	1f 4f       	sbci	r17, 0xFF	; 255
    efa4:	ad b7       	in	r26, 0x3d	; 61
    efa6:	be b7       	in	r27, 0x3e	; 62
    efa8:	12 96       	adiw	r26, 0x02	; 2
    efaa:	1c 93       	st	X, r17
    efac:	0e 93       	st	-X, r16
    efae:	11 97       	sbiw	r26, 0x01	; 1
    efb0:	8b e8       	ldi	r24, 0x8B	; 139
    efb2:	92 e2       	ldi	r25, 0x22	; 34
    efb4:	93 83       	std	Z+3, r25	; 0x03
    efb6:	82 83       	std	Z+2, r24	; 0x02
    efb8:	87 e6       	ldi	r24, 0x67	; 103
    efba:	9c e0       	ldi	r25, 0x0C	; 12
    efbc:	95 83       	std	Z+5, r25	; 0x05
    efbe:	84 83       	std	Z+4, r24	; 0x04
    efc0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    efc4:	ed b7       	in	r30, 0x3d	; 61
    efc6:	fe b7       	in	r31, 0x3e	; 62
    efc8:	36 96       	adiw	r30, 0x06	; 6
    efca:	0f b6       	in	r0, 0x3f	; 63
    efcc:	f8 94       	cli
    efce:	fe bf       	out	0x3e, r31	; 62
    efd0:	0f be       	out	0x3f, r0	; 63
    efd2:	ed bf       	out	0x3d, r30	; 61
    efd4:	82 e0       	ldi	r24, 0x02	; 2
    efd6:	61 e0       	ldi	r22, 0x01	; 1
    efd8:	a8 01       	movw	r20, r16
    efda:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
                lcd_printf(3,1,PSTR("Proses"));
    efde:	83 e0       	ldi	r24, 0x03	; 3
    efe0:	61 e0       	ldi	r22, 0x01	; 1
    efe2:	44 e8       	ldi	r20, 0x84	; 132
    efe4:	52 e2       	ldi	r21, 0x22	; 34
    efe6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				iPos=0;//iLoop=0;
    efea:	10 92 74 03 	sts	0x0374, r1
				IsFullAuthorized=False;
    efee:	10 92 64 03 	sts	0x0364, r1
		        stLocalAccount=laSendID;
    eff2:	82 e0       	ldi	r24, 0x02	; 2
    eff4:	27 c6       	rjmp	.+3150   	; 0xfc44 <FMenuLocalAccount+0xd18>
				break;         
           case laSendID://sendMessage56 
				IsMessage57=False;
    eff6:	10 92 83 02 	sts	0x0283, r1
                sendMessage56();
    effa:	0e 94 29 2a 	call	0x5452	; 0x5452 <sendMessage56>
				iWait=0;iPos=0;
    effe:	10 92 73 03 	sts	0x0373, r1
    f002:	10 92 74 03 	sts	0x0374, r1
				//iLoop=0;
				TimSend=0;
    f006:	10 92 56 0d 	sts	0x0D56, r1
				stLocalAccount=laWaitMessage57;
    f00a:	83 e0       	ldi	r24, 0x03	; 3
    f00c:	1b c6       	rjmp	.+3126   	; 0xfc44 <FMenuLocalAccount+0xd18>
						 system_beep(2);
						 stLocalAccount=laConTimout;
				}
				*/
				
		        iLoop++;
    f00e:	80 91 62 03 	lds	r24, 0x0362
    f012:	90 91 63 03 	lds	r25, 0x0363
    f016:	01 96       	adiw	r24, 0x01	; 1
    f018:	90 93 63 03 	sts	0x0363, r25
    f01c:	80 93 62 03 	sts	0x0362, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
    f020:	68 e9       	ldi	r22, 0x98	; 152
    f022:	7a e3       	ldi	r23, 0x3A	; 58
    f024:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    f028:	00 97       	sbiw	r24, 0x00	; 0
    f02a:	e1 f4       	brne	.+56     	; 0xf064 <FMenuLocalAccount+0x138>
				   if (iPos<5){
    f02c:	60 91 74 03 	lds	r22, 0x0374
    f030:	65 30       	cpi	r22, 0x05	; 5
    f032:	58 f4       	brcc	.+22     	; 0xf04a <FMenuLocalAccount+0x11e>
					   lcd_put(3,(8+iPos),'.');
    f034:	68 5f       	subi	r22, 0xF8	; 248
    f036:	83 e0       	ldi	r24, 0x03	; 3
    f038:	4e e2       	ldi	r20, 0x2E	; 46
    f03a:	0e 94 d7 a0 	call	0x141ae	; 0x141ae <lcd_put>
				       iPos++;
    f03e:	80 91 74 03 	lds	r24, 0x0374
    f042:	8f 5f       	subi	r24, 0xFF	; 255
    f044:	80 93 74 03 	sts	0x0374, r24
    f048:	0d c0       	rjmp	.+26     	; 0xf064 <FMenuLocalAccount+0x138>
					   }
				   else{
				       iPos=0;
    f04a:	10 92 74 03 	sts	0x0374, r1
					   lcd_printf(3,(9+iPos),PSTR("       "));
    f04e:	83 e0       	ldi	r24, 0x03	; 3
    f050:	69 e0       	ldi	r22, 0x09	; 9
    f052:	4c e7       	ldi	r20, 0x7C	; 124
    f054:	52 e2       	ldi	r21, 0x22	; 34
    f056:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   iWait++;
    f05a:	80 91 73 03 	lds	r24, 0x0373
    f05e:	8f 5f       	subi	r24, 0xFF	; 255
    f060:	80 93 73 03 	sts	0x0373, r24
					   }
				}
				if (iWait>3){
    f064:	80 91 73 03 	lds	r24, 0x0373
    f068:	84 30       	cpi	r24, 0x04	; 4
    f06a:	48 f0       	brcs	.+18     	; 0xf07e <FMenuLocalAccount+0x152>
				    stLocalAccount=laConTimout;
    f06c:	84 e0       	ldi	r24, 0x04	; 4
    f06e:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
    f072:	10 92 98 02 	sts	0x0298, r1
					system_beep(2);
    f076:	82 e0       	ldi	r24, 0x02	; 2
    f078:	90 e0       	ldi	r25, 0x00	; 0
    f07a:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
				    }
                 
				if (IsMessage57==True){
    f07e:	80 91 83 02 	lds	r24, 0x0283
    f082:	81 30       	cpi	r24, 0x01	; 1
    f084:	09 f0       	breq	.+2      	; 0xf088 <FMenuLocalAccount+0x15c>
    f086:	cd c7       	rjmp	.+3994   	; 0x10022 <FMenuLocalAccount+0x10f6>
				    IsMessage57=False;
    f088:	10 92 83 02 	sts	0x0283, r1
				    stLocalAccount=laProcMessage57;
    f08c:	85 e0       	ldi	r24, 0x05	; 5
    f08e:	da c5       	rjmp	.+2996   	; 0xfc44 <FMenuLocalAccount+0xd18>
					}
		        break;
           case laConTimout:
		        //IsErrorTCPIP=True;
				lcd_printf(3,1,PSTR("Sending Failed      "));
    f090:	83 e0       	ldi	r24, 0x03	; 3
    f092:	61 e0       	ldi	r22, 0x01	; 1
    f094:	47 e6       	ldi	r20, 0x67	; 103
    f096:	52 e2       	ldi	r21, 0x22	; 34
    f098:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
    f09c:	84 e0       	ldi	r24, 0x04	; 4
    f09e:	61 e0       	ldi	r22, 0x01	; 1
    f0a0:	42 e5       	ldi	r20, 0x52	; 82
    f0a2:	52 e2       	ldi	r21, 0x22	; 34
    f0a4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
    f0a8:	80 91 98 02 	lds	r24, 0x0298
    f0ac:	83 30       	cpi	r24, 0x03	; 3
    f0ae:	08 f4       	brcc	.+2      	; 0xf0b2 <FMenuLocalAccount+0x186>
    f0b0:	b8 c7       	rjmp	.+3952   	; 0x10022 <FMenuLocalAccount+0x10f6>
    f0b2:	ae c7       	rjmp	.+3932   	; 0x10010 <FMenuLocalAccount+0x10e4>
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
    f0b4:	83 e0       	ldi	r24, 0x03	; 3
    f0b6:	61 e0       	ldi	r22, 0x01	; 1
    f0b8:	4d e3       	ldi	r20, 0x3D	; 61
    f0ba:	52 e2       	ldi	r21, 0x22	; 34
    f0bc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				LocAccStatus=GetLocAccStatus(procMessage57());
    f0c0:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <procMessage57>
    f0c4:	0e 94 87 37 	call	0x6f0e	; 0x6f0e <GetLocAccStatus>
    f0c8:	80 93 75 03 	sts	0x0375, r24
				TimLocAcc=0;
    f0cc:	10 92 98 02 	sts	0x0298, r1
				stLocalAccount=laDispStatus;
    f0d0:	86 e0       	ldi	r24, 0x06	; 6
    f0d2:	b8 c5       	rjmp	.+2928   	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laDispStatus://Display Status
		        if (LocAccStatus==LA_INVALID){
    f0d4:	80 91 75 03 	lds	r24, 0x0375
    f0d8:	81 30       	cpi	r24, 0x01	; 1
    f0da:	29 f4       	brne	.+10     	; 0xf0e6 <FMenuLocalAccount+0x1ba>
					lcd_printf(3,1,PSTR("Tidak Terdaftar     "));    
    f0dc:	83 e0       	ldi	r24, 0x03	; 3
    f0de:	61 e0       	ldi	r22, 0x01	; 1
    f0e0:	48 e2       	ldi	r20, 0x28	; 40
    f0e2:	52 e2       	ldi	r21, 0x22	; 34
    f0e4:	0d c0       	rjmp	.+26     	; 0xf100 <FMenuLocalAccount+0x1d4>
					TimLocAcc=0;
				    stLocalAccount=laDelayExit;
				}
				else
                if (LocAccStatus==LA_VALID) {
    f0e6:	82 30       	cpi	r24, 0x02	; 2
    f0e8:	31 f4       	brne	.+12     	; 0xf0f6 <FMenuLocalAccount+0x1ca>
				    stLocalAccount=laDispValid; 
    f0ea:	87 e0       	ldi	r24, 0x07	; 7
    f0ec:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    f0f0:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    f0f4:	0c c0       	rjmp	.+24     	; 0xf10e <FMenuLocalAccount+0x1e2>
					}
				else
                if (LocAccStatus==LA_LIMITED){
    f0f6:	83 30       	cpi	r24, 0x03	; 3
    f0f8:	51 f4       	brne	.+20     	; 0xf10e <FMenuLocalAccount+0x1e2>
					lcd_printf(3,1,PSTR("Kartu Terbatas      "));    
    f0fa:	61 e0       	ldi	r22, 0x01	; 1
    f0fc:	43 e1       	ldi	r20, 0x13	; 19
    f0fe:	52 e2       	ldi	r21, 0x22	; 34
    f100:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					TimLocAcc=0;
    f104:	10 92 98 02 	sts	0x0298, r1
				    stLocalAccount=laDelayExit;
    f108:	8e e1       	ldi	r24, 0x1E	; 30
    f10a:	80 93 5b 01 	sts	0x015B, r24
				}
                if (TimLocAcc>5)stLocalAccount=laExitLocAcc;
    f10e:	80 91 98 02 	lds	r24, 0x0298
    f112:	86 30       	cpi	r24, 0x06	; 6
    f114:	08 f4       	brcc	.+2      	; 0xf118 <FMenuLocalAccount+0x1ec>
    f116:	85 c7       	rjmp	.+3850   	; 0x10022 <FMenuLocalAccount+0x10f6>
    f118:	7b c7       	rjmp	.+3830   	; 0x10010 <FMenuLocalAccount+0x10e4>
		        break;
           case laDispValid://Display VALID ID
		        lcd_clear();
    f11a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
    f11e:	00 d0       	rcall	.+0      	; 0xf120 <FMenuLocalAccount+0x1f4>
    f120:	00 d0       	rcall	.+0      	; 0xf122 <FMenuLocalAccount+0x1f6>
    f122:	00 d0       	rcall	.+0      	; 0xf124 <FMenuLocalAccount+0x1f8>
    f124:	ed b7       	in	r30, 0x3d	; 61
    f126:	fe b7       	in	r31, 0x3e	; 62
    f128:	31 96       	adiw	r30, 0x01	; 1
    f12a:	8d ef       	ldi	r24, 0xFD	; 253
    f12c:	9c e0       	ldi	r25, 0x0C	; 12
    f12e:	ad b7       	in	r26, 0x3d	; 61
    f130:	be b7       	in	r27, 0x3e	; 62
    f132:	12 96       	adiw	r26, 0x02	; 2
    f134:	9c 93       	st	X, r25
    f136:	8e 93       	st	-X, r24
    f138:	11 97       	sbiw	r26, 0x01	; 1
    f13a:	80 e1       	ldi	r24, 0x10	; 16
    f13c:	92 e2       	ldi	r25, 0x22	; 34
    f13e:	93 83       	std	Z+3, r25	; 0x03
    f140:	82 83       	std	Z+2, r24	; 0x02
    f142:	46 ed       	ldi	r20, 0xD6	; 214
    f144:	e4 2e       	mov	r14, r20
    f146:	4c e0       	ldi	r20, 0x0C	; 12
    f148:	f4 2e       	mov	r15, r20
    f14a:	f5 82       	std	Z+5, r15	; 0x05
    f14c:	e4 82       	std	Z+4, r14	; 0x04
    f14e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				FormatCurrency(strBalance);
    f152:	ed b7       	in	r30, 0x3d	; 61
    f154:	fe b7       	in	r31, 0x3e	; 62
    f156:	36 96       	adiw	r30, 0x06	; 6
    f158:	0f b6       	in	r0, 0x3f	; 63
    f15a:	f8 94       	cli
    f15c:	fe bf       	out	0x3e, r31	; 62
    f15e:	0f be       	out	0x3f, r0	; 63
    f160:	ed bf       	out	0x3d, r30	; 61
    f162:	c7 01       	movw	r24, r14
    f164:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>

		        StringCopy(strCardHolder,strName,20);  				                                                        
    f168:	30 e2       	ldi	r19, 0x20	; 32
    f16a:	c3 2e       	mov	r12, r19
    f16c:	d1 2c       	mov	r13, r1
    f16e:	cc 0e       	add	r12, r28
    f170:	dd 1e       	adc	r13, r29
    f172:	82 e0       	ldi	r24, 0x02	; 2
    f174:	94 e0       	ldi	r25, 0x04	; 4
    f176:	b6 01       	movw	r22, r12
    f178:	44 e1       	ldi	r20, 0x14	; 20
    f17a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <StringCopy>
		        sprintf_P(lcdteks,PSTR("%s"),strCompName);               lcd_print(1,1,lcdteks);   //[CompName]
    f17e:	00 d0       	rcall	.+0      	; 0xf180 <FMenuLocalAccount+0x254>
    f180:	00 d0       	rcall	.+0      	; 0xf182 <FMenuLocalAccount+0x256>
    f182:	00 d0       	rcall	.+0      	; 0xf184 <FMenuLocalAccount+0x258>
    f184:	ed b7       	in	r30, 0x3d	; 61
    f186:	fe b7       	in	r31, 0x3e	; 62
    f188:	31 96       	adiw	r30, 0x01	; 1
    f18a:	8e 01       	movw	r16, r28
    f18c:	04 5f       	subi	r16, 0xF4	; 244
    f18e:	1f 4f       	sbci	r17, 0xFF	; 255
    f190:	ad b7       	in	r26, 0x3d	; 61
    f192:	be b7       	in	r27, 0x3e	; 62
    f194:	12 96       	adiw	r26, 0x02	; 2
    f196:	1c 93       	st	X, r17
    f198:	0e 93       	st	-X, r16
    f19a:	11 97       	sbiw	r26, 0x01	; 1
    f19c:	8d e0       	ldi	r24, 0x0D	; 13
    f19e:	92 e2       	ldi	r25, 0x22	; 34
    f1a0:	93 83       	std	Z+3, r25	; 0x03
    f1a2:	82 83       	std	Z+2, r24	; 0x02
    f1a4:	87 e5       	ldi	r24, 0x57	; 87
    f1a6:	98 e0       	ldi	r25, 0x08	; 8
    f1a8:	95 83       	std	Z+5, r25	; 0x05
    f1aa:	84 83       	std	Z+4, r24	; 0x04
    f1ac:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f1b0:	ed b7       	in	r30, 0x3d	; 61
    f1b2:	fe b7       	in	r31, 0x3e	; 62
    f1b4:	36 96       	adiw	r30, 0x06	; 6
    f1b6:	0f b6       	in	r0, 0x3f	; 63
    f1b8:	f8 94       	cli
    f1ba:	fe bf       	out	0x3e, r31	; 62
    f1bc:	0f be       	out	0x3f, r0	; 63
    f1be:	ed bf       	out	0x3d, r30	; 61
    f1c0:	81 e0       	ldi	r24, 0x01	; 1
    f1c2:	61 e0       	ldi	r22, 0x01	; 1
    f1c4:	a8 01       	movw	r20, r16
    f1c6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
                //sprintf(lcdteks,"%s %s",strCardID,strName);    lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
				sprintf_P(lcdteks,PSTR("%s"),strName);                   lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
    f1ca:	00 d0       	rcall	.+0      	; 0xf1cc <FMenuLocalAccount+0x2a0>
    f1cc:	00 d0       	rcall	.+0      	; 0xf1ce <FMenuLocalAccount+0x2a2>
    f1ce:	00 d0       	rcall	.+0      	; 0xf1d0 <FMenuLocalAccount+0x2a4>
    f1d0:	ed b7       	in	r30, 0x3d	; 61
    f1d2:	fe b7       	in	r31, 0x3e	; 62
    f1d4:	31 96       	adiw	r30, 0x01	; 1
    f1d6:	ad b7       	in	r26, 0x3d	; 61
    f1d8:	be b7       	in	r27, 0x3e	; 62
    f1da:	12 96       	adiw	r26, 0x02	; 2
    f1dc:	1c 93       	st	X, r17
    f1de:	0e 93       	st	-X, r16
    f1e0:	11 97       	sbiw	r26, 0x01	; 1
    f1e2:	8a e0       	ldi	r24, 0x0A	; 10
    f1e4:	92 e2       	ldi	r25, 0x22	; 34
    f1e6:	93 83       	std	Z+3, r25	; 0x03
    f1e8:	82 83       	std	Z+2, r24	; 0x02
    f1ea:	d5 82       	std	Z+5, r13	; 0x05
    f1ec:	c4 82       	std	Z+4, r12	; 0x04
    f1ee:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f1f2:	ed b7       	in	r30, 0x3d	; 61
    f1f4:	fe b7       	in	r31, 0x3e	; 62
    f1f6:	36 96       	adiw	r30, 0x06	; 6
    f1f8:	0f b6       	in	r0, 0x3f	; 63
    f1fa:	f8 94       	cli
    f1fc:	fe bf       	out	0x3e, r31	; 62
    f1fe:	0f be       	out	0x3f, r0	; 63
    f200:	ed bf       	out	0x3d, r30	; 61
    f202:	82 e0       	ldi	r24, 0x02	; 2
    f204:	61 e0       	ldi	r22, 0x01	; 1
    f206:	a8 01       	movw	r20, r16
    f208:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
				sprintf_P(lcdteks,PSTR("%s %s"),strLicPlate,strBalance); lcd_print(3,1,lcdteks);   //[LicPlate][Balance] 
    f20c:	8d b7       	in	r24, 0x3d	; 61
    f20e:	9e b7       	in	r25, 0x3e	; 62
    f210:	08 97       	sbiw	r24, 0x08	; 8
    f212:	0f b6       	in	r0, 0x3f	; 63
    f214:	f8 94       	cli
    f216:	9e bf       	out	0x3e, r25	; 62
    f218:	0f be       	out	0x3f, r0	; 63
    f21a:	8d bf       	out	0x3d, r24	; 61
    f21c:	ed b7       	in	r30, 0x3d	; 61
    f21e:	fe b7       	in	r31, 0x3e	; 62
    f220:	31 96       	adiw	r30, 0x01	; 1
    f222:	ad b7       	in	r26, 0x3d	; 61
    f224:	be b7       	in	r27, 0x3e	; 62
    f226:	12 96       	adiw	r26, 0x02	; 2
    f228:	1c 93       	st	X, r17
    f22a:	0e 93       	st	-X, r16
    f22c:	11 97       	sbiw	r26, 0x01	; 1
    f22e:	84 e0       	ldi	r24, 0x04	; 4
    f230:	92 e2       	ldi	r25, 0x22	; 34
    f232:	93 83       	std	Z+3, r25	; 0x03
    f234:	82 83       	std	Z+2, r24	; 0x02
    f236:	88 ed       	ldi	r24, 0xD8	; 216
    f238:	99 e0       	ldi	r25, 0x09	; 9
    f23a:	95 83       	std	Z+5, r25	; 0x05
    f23c:	84 83       	std	Z+4, r24	; 0x04
    f23e:	f7 82       	std	Z+7, r15	; 0x07
    f240:	e6 82       	std	Z+6, r14	; 0x06
    f242:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f246:	ed b7       	in	r30, 0x3d	; 61
    f248:	fe b7       	in	r31, 0x3e	; 62
    f24a:	38 96       	adiw	r30, 0x08	; 8
    f24c:	0f b6       	in	r0, 0x3f	; 63
    f24e:	f8 94       	cli
    f250:	fe bf       	out	0x3e, r31	; 62
    f252:	0f be       	out	0x3f, r0	; 63
    f254:	ed bf       	out	0x3d, r30	; 61
    f256:	83 e0       	ldi	r24, 0x03	; 3
    f258:	61 e0       	ldi	r22, 0x01	; 1
    f25a:	a8 01       	movw	r20, r16
    f25c:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	            lcd_printf(4,1,PSTR("[*]Batal       [#]OK"));   //[*]Batal       [#]OK
    f260:	84 e0       	ldi	r24, 0x04	; 4
    f262:	61 e0       	ldi	r22, 0x01	; 1
    f264:	4f ee       	ldi	r20, 0xEF	; 239
    f266:	51 e2       	ldi	r21, 0x21	; 33
    f268:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				stLocalAccount=laDispValidInput;
    f26c:	88 e0       	ldi	r24, 0x08	; 8
    f26e:	ea c4       	rjmp	.+2516   	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laDispValidInput:
                KeyPressed=_key_scan(1);
    f270:	81 e0       	ldi	r24, 0x01	; 1
    f272:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
				if (KeyPressed==_KEY_ENTER) stLocalAccount=laSelectFIP;
    f276:	87 3b       	cpi	r24, 0xB7	; 183
    f278:	09 f4       	brne	.+2      	; 0xf27c <FMenuLocalAccount+0x350>
    f27a:	c9 c1       	rjmp	.+914    	; 0xf60e <FMenuLocalAccount+0x6e2>
				else
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laExitLocAcc;
    f27c:	87 3e       	cpi	r24, 0xE7	; 231
    f27e:	09 f0       	breq	.+2      	; 0xf282 <FMenuLocalAccount+0x356>
    f280:	d0 c6       	rjmp	.+3488   	; 0x10022 <FMenuLocalAccount+0x10f6>
    f282:	c6 c6       	rjmp	.+3468   	; 0x10010 <FMenuLocalAccount+0x10e4>
		        break;
           case laSelectFIP:      
			    FIPResult=menu_FIP(&FIP_Used,strFIP);
    f284:	0f e6       	ldi	r16, 0x6F	; 111
    f286:	13 e0       	ldi	r17, 0x03	; 3
    f288:	86 e6       	ldi	r24, 0x66	; 102
    f28a:	93 e0       	ldi	r25, 0x03	; 3
    f28c:	b8 01       	movw	r22, r16
    f28e:	0e 94 a3 2b 	call	0x5746	; 0x5746 <menu_FIP>

			    if ((FIPResult==FIP_DONE)&&(FIP_Used>0)){
    f292:	88 23       	and	r24, r24
    f294:	09 f0       	breq	.+2      	; 0xf298 <FMenuLocalAccount+0x36c>
    f296:	53 c0       	rjmp	.+166    	; 0xf33e <FMenuLocalAccount+0x412>
    f298:	20 91 66 03 	lds	r18, 0x0366
    f29c:	22 23       	and	r18, r18
    f29e:	09 f4       	brne	.+2      	; 0xf2a2 <FMenuLocalAccount+0x376>
    f2a0:	c0 c6       	rjmp	.+3456   	; 0x10022 <FMenuLocalAccount+0x10f6>
                    sprintf_P(strFIP,PSTR("%.2d"),FIP_Used);
    f2a2:	00 d0       	rcall	.+0      	; 0xf2a4 <FMenuLocalAccount+0x378>
    f2a4:	00 d0       	rcall	.+0      	; 0xf2a6 <FMenuLocalAccount+0x37a>
    f2a6:	00 d0       	rcall	.+0      	; 0xf2a8 <FMenuLocalAccount+0x37c>
    f2a8:	ed b7       	in	r30, 0x3d	; 61
    f2aa:	fe b7       	in	r31, 0x3e	; 62
    f2ac:	31 96       	adiw	r30, 0x01	; 1
    f2ae:	ad b7       	in	r26, 0x3d	; 61
    f2b0:	be b7       	in	r27, 0x3e	; 62
    f2b2:	12 96       	adiw	r26, 0x02	; 2
    f2b4:	1c 93       	st	X, r17
    f2b6:	0e 93       	st	-X, r16
    f2b8:	11 97       	sbiw	r26, 0x01	; 1
    f2ba:	8a ee       	ldi	r24, 0xEA	; 234
    f2bc:	91 e2       	ldi	r25, 0x21	; 33
    f2be:	93 83       	std	Z+3, r25	; 0x03
    f2c0:	82 83       	std	Z+2, r24	; 0x02
    f2c2:	24 83       	std	Z+4, r18	; 0x04
    f2c4:	15 82       	std	Z+5, r1	; 0x05
    f2c6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
					sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
    f2ca:	ed b7       	in	r30, 0x3d	; 61
    f2cc:	fe b7       	in	r31, 0x3e	; 62
    f2ce:	31 96       	adiw	r30, 0x01	; 1
    f2d0:	87 e9       	ldi	r24, 0x97	; 151
    f2d2:	98 e0       	ldi	r25, 0x08	; 8
    f2d4:	ad b7       	in	r26, 0x3d	; 61
    f2d6:	be b7       	in	r27, 0x3e	; 62
    f2d8:	12 96       	adiw	r26, 0x02	; 2
    f2da:	9c 93       	st	X, r25
    f2dc:	8e 93       	st	-X, r24
    f2de:	11 97       	sbiw	r26, 0x01	; 1
    f2e0:	85 ee       	ldi	r24, 0xE5	; 229
    f2e2:	91 e2       	ldi	r25, 0x21	; 33
    f2e4:	93 83       	std	Z+3, r25	; 0x03
    f2e6:	82 83       	std	Z+2, r24	; 0x02
    f2e8:	80 91 66 03 	lds	r24, 0x0366
    f2ec:	84 83       	std	Z+4, r24	; 0x04
    f2ee:	15 82       	std	Z+5, r1	; 0x05
    f2f0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
                    //Load Product Info
					if (GetFIPAddr(FIP_Used)>0) 
    f2f4:	ed b7       	in	r30, 0x3d	; 61
    f2f6:	fe b7       	in	r31, 0x3e	; 62
    f2f8:	36 96       	adiw	r30, 0x06	; 6
    f2fa:	0f b6       	in	r0, 0x3f	; 63
    f2fc:	f8 94       	cli
    f2fe:	fe bf       	out	0x3e, r31	; 62
    f300:	0f be       	out	0x3f, r0	; 63
    f302:	ed bf       	out	0x3d, r30	; 61
    f304:	80 91 66 03 	lds	r24, 0x0366
    f308:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
    f30c:	88 23       	and	r24, r24
    f30e:	a9 f0       	breq	.+42     	; 0xf33a <FMenuLocalAccount+0x40e>
					    eeprom_read_block((void*) &ProductID, (const void*) &DefNozzleMap[GetFIPAddr(FIP_Used)-1], 6);
    f310:	80 91 66 03 	lds	r24, 0x0366
    f314:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
    f318:	90 e0       	ldi	r25, 0x00	; 0
    f31a:	01 97       	sbiw	r24, 0x01	; 1
    f31c:	bc 01       	movw	r22, r24
    f31e:	66 0f       	add	r22, r22
    f320:	77 1f       	adc	r23, r23
    f322:	68 0f       	add	r22, r24
    f324:	79 1f       	adc	r23, r25
    f326:	66 0f       	add	r22, r22
    f328:	77 1f       	adc	r23, r23
    f32a:	6b 5a       	subi	r22, 0xAB	; 171
    f32c:	7f 4f       	sbci	r23, 0xFF	; 255
    f32e:	87 e6       	ldi	r24, 0x67	; 103
    f330:	93 e0       	ldi	r25, 0x03	; 3
    f332:	46 e0       	ldi	r20, 0x06	; 6
    f334:	50 e0       	ldi	r21, 0x00	; 0
    f336:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
				    stLocalAccount=laSelectProduct;
    f33a:	8b e0       	ldi	r24, 0x0B	; 11
    f33c:	83 c4       	rjmp	.+2310   	; 0xfc44 <FMenuLocalAccount+0xd18>
				}
			    else if (FIPResult==FIP_CANCEL){
    f33e:	82 30       	cpi	r24, 0x02	; 2
    f340:	09 f0       	breq	.+2      	; 0xf344 <FMenuLocalAccount+0x418>
    f342:	6f c6       	rjmp	.+3294   	; 0x10022 <FMenuLocalAccount+0x10f6>
				    stLocalAccount=laDispValid;
    f344:	87 e0       	ldi	r24, 0x07	; 7
    f346:	7e c4       	rjmp	.+2300   	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break; 
           case laSelectFIPInput:

		        break;
           case laSelectProduct://NozzleID
				lcd_clear();
    f348:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		        sprintf_P(lcdteks,PSTR("Pompa-%s"),strFIP);lcd_print(1,1,lcdteks);
    f34c:	00 d0       	rcall	.+0      	; 0xf34e <FMenuLocalAccount+0x422>
    f34e:	00 d0       	rcall	.+0      	; 0xf350 <FMenuLocalAccount+0x424>
    f350:	00 d0       	rcall	.+0      	; 0xf352 <FMenuLocalAccount+0x426>
    f352:	ed b7       	in	r30, 0x3d	; 61
    f354:	fe b7       	in	r31, 0x3e	; 62
    f356:	31 96       	adiw	r30, 0x01	; 1
    f358:	8e 01       	movw	r16, r28
    f35a:	04 5f       	subi	r16, 0xF4	; 244
    f35c:	1f 4f       	sbci	r17, 0xFF	; 255
    f35e:	ad b7       	in	r26, 0x3d	; 61
    f360:	be b7       	in	r27, 0x3e	; 62
    f362:	12 96       	adiw	r26, 0x02	; 2
    f364:	1c 93       	st	X, r17
    f366:	0e 93       	st	-X, r16
    f368:	11 97       	sbiw	r26, 0x01	; 1
    f36a:	8c ed       	ldi	r24, 0xDC	; 220
    f36c:	91 e2       	ldi	r25, 0x21	; 33
    f36e:	93 83       	std	Z+3, r25	; 0x03
    f370:	82 83       	std	Z+2, r24	; 0x02
    f372:	8f e6       	ldi	r24, 0x6F	; 111
    f374:	93 e0       	ldi	r25, 0x03	; 3
    f376:	95 83       	std	Z+5, r25	; 0x05
    f378:	84 83       	std	Z+4, r24	; 0x04
    f37a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f37e:	ed b7       	in	r30, 0x3d	; 61
    f380:	fe b7       	in	r31, 0x3e	; 62
    f382:	36 96       	adiw	r30, 0x06	; 6
    f384:	0f b6       	in	r0, 0x3f	; 63
    f386:	f8 94       	cli
    f388:	fe bf       	out	0x3e, r31	; 62
    f38a:	0f be       	out	0x3f, r0	; 63
    f38c:	ed bf       	out	0x3d, r30	; 61
    f38e:	81 e0       	ldi	r24, 0x01	; 1
    f390:	61 e0       	ldi	r22, 0x01	; 1
    f392:	a8 01       	movw	r20, r16
    f394:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
				//Not MPD->Single Product
				if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&
    f398:	80 91 67 03 	lds	r24, 0x0367
    f39c:	98 2f       	mov	r25, r24
    f39e:	91 50       	subi	r25, 0x01	; 1
    f3a0:	96 30       	cpi	r25, 0x06	; 6
    f3a2:	08 f0       	brcs	.+2      	; 0xf3a6 <FMenuLocalAccount+0x47a>
    f3a4:	50 c0       	rjmp	.+160    	; 0xf446 <FMenuLocalAccount+0x51a>
    f3a6:	90 91 68 03 	lds	r25, 0x0368
    f3aa:	99 23       	and	r25, r25
    f3ac:	09 f0       	breq	.+2      	; 0xf3b0 <FMenuLocalAccount+0x484>
    f3ae:	4b c0       	rjmp	.+150    	; 0xf446 <FMenuLocalAccount+0x51a>
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
    f3b0:	90 91 69 03 	lds	r25, 0x0369
    f3b4:	99 23       	and	r25, r25
    f3b6:	09 f0       	breq	.+2      	; 0xf3ba <FMenuLocalAccount+0x48e>
    f3b8:	46 c0       	rjmp	.+140    	; 0xf446 <FMenuLocalAccount+0x51a>
    f3ba:	90 91 6a 03 	lds	r25, 0x036A
    f3be:	99 23       	and	r25, r25
    f3c0:	09 f0       	breq	.+2      	; 0xf3c4 <FMenuLocalAccount+0x498>
    f3c2:	41 c0       	rjmp	.+130    	; 0xf446 <FMenuLocalAccount+0x51a>
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
    f3c4:	80 93 65 03 	sts	0x0365, r24
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
    f3c8:	90 e0       	ldi	r25, 0x00	; 0
    f3ca:	01 97       	sbiw	r24, 0x01	; 1
    f3cc:	2d e0       	ldi	r18, 0x0D	; 13
    f3ce:	30 e0       	ldi	r19, 0x00	; 0
    f3d0:	82 9f       	mul	r24, r18
    f3d2:	b0 01       	movw	r22, r0
    f3d4:	83 9f       	mul	r24, r19
    f3d6:	70 0d       	add	r23, r0
    f3d8:	92 9f       	mul	r25, r18
    f3da:	70 0d       	add	r23, r0
    f3dc:	11 24       	eor	r1, r1
    f3de:	65 54       	subi	r22, 0x45	; 69
    f3e0:	7f 4f       	sbci	r23, 0xFF	; 255
    f3e2:	8e 01       	movw	r16, r28
    f3e4:	0f 5f       	subi	r16, 0xFF	; 255
    f3e6:	1f 4f       	sbci	r17, 0xFF	; 255
    f3e8:	c8 01       	movw	r24, r16
    f3ea:	4a e0       	ldi	r20, 0x0A	; 10
    f3ec:	50 e0       	ldi	r21, 0x00	; 0
    f3ee:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
					 StrPosCopy(ProductName,ProductName,0,8);
    f3f2:	c8 01       	movw	r24, r16
    f3f4:	b8 01       	movw	r22, r16
    f3f6:	40 e0       	ldi	r20, 0x00	; 0
    f3f8:	50 e0       	ldi	r21, 0x00	; 0
    f3fa:	28 e0       	ldi	r18, 0x08	; 8
    f3fc:	30 e0       	ldi	r19, 0x00	; 0
    f3fe:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
					 sprintf_P(strProduct,PSTR("%s"),ProductName);
    f402:	00 d0       	rcall	.+0      	; 0xf404 <FMenuLocalAccount+0x4d8>
    f404:	00 d0       	rcall	.+0      	; 0xf406 <FMenuLocalAccount+0x4da>
    f406:	00 d0       	rcall	.+0      	; 0xf408 <FMenuLocalAccount+0x4dc>
    f408:	ed b7       	in	r30, 0x3d	; 61
    f40a:	fe b7       	in	r31, 0x3e	; 62
    f40c:	31 96       	adiw	r30, 0x01	; 1
    f40e:	8c e3       	ldi	r24, 0x3C	; 60
    f410:	98 e0       	ldi	r25, 0x08	; 8
    f412:	ad b7       	in	r26, 0x3d	; 61
    f414:	be b7       	in	r27, 0x3e	; 62
    f416:	12 96       	adiw	r26, 0x02	; 2
    f418:	9c 93       	st	X, r25
    f41a:	8e 93       	st	-X, r24
    f41c:	11 97       	sbiw	r26, 0x01	; 1
    f41e:	89 ed       	ldi	r24, 0xD9	; 217
    f420:	91 e2       	ldi	r25, 0x21	; 33
    f422:	93 83       	std	Z+3, r25	; 0x03
    f424:	82 83       	std	Z+2, r24	; 0x02
    f426:	15 83       	std	Z+5, r17	; 0x05
    f428:	04 83       	std	Z+4, r16	; 0x04
    f42a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
                     stLocalAccount=laSelectBalanceType;
    f42e:	8d e0       	ldi	r24, 0x0D	; 13
    f430:	80 93 5b 01 	sts	0x015B, r24
    f434:	ed b7       	in	r30, 0x3d	; 61
    f436:	fe b7       	in	r31, 0x3e	; 62
    f438:	36 96       	adiw	r30, 0x06	; 6
    f43a:	0f b6       	in	r0, 0x3f	; 63
    f43c:	f8 94       	cli
    f43e:	fe bf       	out	0x3e, r31	; 62
    f440:	0f be       	out	0x3f, r0	; 63
    f442:	ed bf       	out	0x3d, r30	; 61
    f444:	ee c5       	rjmp	.+3036   	; 0x10022 <FMenuLocalAccount+0x10f6>
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
    f446:	10 92 6d 03 	sts	0x036D, r1
    f44a:	1c e0       	ldi	r17, 0x0C	; 12
    f44c:	e1 2e       	mov	r14, r17
    f44e:	f1 2c       	mov	r15, r1
    f450:	ec 0e       	add	r14, r28
    f452:	fd 1e       	adc	r15, r29
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
    f454:	bd ec       	ldi	r27, 0xCD	; 205
    f456:	cb 2e       	mov	r12, r27
    f458:	b1 e2       	ldi	r27, 0x21	; 33
    f45a:	db 2e       	mov	r13, r27
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
    f45c:	ad e0       	ldi	r26, 0x0D	; 13
    f45e:	aa 2e       	mov	r10, r26
    f460:	b1 2c       	mov	r11, r1
    f462:	8e 01       	movw	r16, r28
    f464:	0f 5f       	subi	r16, 0xFF	; 255
    f466:	1f 4f       	sbci	r17, 0xFF	; 255
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
    f468:	f3 ed       	ldi	r31, 0xD3	; 211
    f46a:	8f 2e       	mov	r8, r31
    f46c:	f1 e2       	ldi	r31, 0x21	; 33
    f46e:	9f 2e       	mov	r9, r31
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
    f470:	eb e0       	ldi	r30, 0x0B	; 11
    f472:	7e 2e       	mov	r7, r30
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
    f474:	6c c0       	rjmp	.+216    	; 0xf54e <FMenuLocalAccount+0x622>
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
    f476:	f0 e0       	ldi	r31, 0x00	; 0
    f478:	e9 59       	subi	r30, 0x99	; 153
    f47a:	fc 4f       	sbci	r31, 0xFC	; 252
    f47c:	80 81       	ld	r24, Z
    f47e:	80 93 65 03 	sts	0x0365, r24
					if ((ProdId>=1)&&(ProdId<=6)){
    f482:	98 2f       	mov	r25, r24
    f484:	91 50       	subi	r25, 0x01	; 1
    f486:	96 30       	cpi	r25, 0x06	; 6
    f488:	f0 f5       	brcc	.+124    	; 0xf506 <FMenuLocalAccount+0x5da>
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
    f48a:	90 e0       	ldi	r25, 0x00	; 0
    f48c:	01 97       	sbiw	r24, 0x01	; 1
    f48e:	8a 9d       	mul	r24, r10
    f490:	b0 01       	movw	r22, r0
    f492:	8b 9d       	mul	r24, r11
    f494:	70 0d       	add	r23, r0
    f496:	9a 9d       	mul	r25, r10
    f498:	70 0d       	add	r23, r0
    f49a:	11 24       	eor	r1, r1
    f49c:	65 54       	subi	r22, 0x45	; 69
    f49e:	7f 4f       	sbci	r23, 0xFF	; 255
    f4a0:	c8 01       	movw	r24, r16
    f4a2:	4a e0       	ldi	r20, 0x0A	; 10
    f4a4:	50 e0       	ldi	r21, 0x00	; 0
    f4a6:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
						StrPosCopy(ProductName,ProductName,0,8);
    f4aa:	c8 01       	movw	r24, r16
    f4ac:	b8 01       	movw	r22, r16
    f4ae:	40 e0       	ldi	r20, 0x00	; 0
    f4b0:	50 e0       	ldi	r21, 0x00	; 0
    f4b2:	28 e0       	ldi	r18, 0x08	; 8
    f4b4:	30 e0       	ldi	r19, 0x00	; 0
    f4b6:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
    f4ba:	8d b7       	in	r24, 0x3d	; 61
    f4bc:	9e b7       	in	r25, 0x3e	; 62
    f4be:	08 97       	sbiw	r24, 0x08	; 8
    f4c0:	0f b6       	in	r0, 0x3f	; 63
    f4c2:	f8 94       	cli
    f4c4:	9e bf       	out	0x3e, r25	; 62
    f4c6:	0f be       	out	0x3f, r0	; 63
    f4c8:	8d bf       	out	0x3d, r24	; 61
    f4ca:	ed b7       	in	r30, 0x3d	; 61
    f4cc:	fe b7       	in	r31, 0x3e	; 62
    f4ce:	31 96       	adiw	r30, 0x01	; 1
    f4d0:	ad b7       	in	r26, 0x3d	; 61
    f4d2:	be b7       	in	r27, 0x3e	; 62
    f4d4:	12 96       	adiw	r26, 0x02	; 2
    f4d6:	fc 92       	st	X, r15
    f4d8:	ee 92       	st	-X, r14
    f4da:	11 97       	sbiw	r26, 0x01	; 1
    f4dc:	93 82       	std	Z+3, r9	; 0x03
    f4de:	82 82       	std	Z+2, r8	; 0x02
    f4e0:	80 91 6d 03 	lds	r24, 0x036D
    f4e4:	90 e0       	ldi	r25, 0x00	; 0
    f4e6:	01 96       	adiw	r24, 0x01	; 1
    f4e8:	95 83       	std	Z+5, r25	; 0x05
    f4ea:	84 83       	std	Z+4, r24	; 0x04
    f4ec:	17 83       	std	Z+7, r17	; 0x07
    f4ee:	06 83       	std	Z+6, r16	; 0x06
    f4f0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f4f4:	ed b7       	in	r30, 0x3d	; 61
    f4f6:	fe b7       	in	r31, 0x3e	; 62
    f4f8:	38 96       	adiw	r30, 0x08	; 8
    f4fa:	0f b6       	in	r0, 0x3f	; 63
    f4fc:	f8 94       	cli
    f4fe:	fe bf       	out	0x3e, r31	; 62
    f500:	0f be       	out	0x3f, r0	; 63
    f502:	ed bf       	out	0x3d, r30	; 61
    f504:	12 c0       	rjmp	.+36     	; 0xf52a <FMenuLocalAccount+0x5fe>
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
    f506:	00 d0       	rcall	.+0      	; 0xf508 <FMenuLocalAccount+0x5dc>
    f508:	00 d0       	rcall	.+0      	; 0xf50a <FMenuLocalAccount+0x5de>
    f50a:	ad b7       	in	r26, 0x3d	; 61
    f50c:	be b7       	in	r27, 0x3e	; 62
    f50e:	12 96       	adiw	r26, 0x02	; 2
    f510:	fc 92       	st	X, r15
    f512:	ee 92       	st	-X, r14
    f514:	11 97       	sbiw	r26, 0x01	; 1
    f516:	14 96       	adiw	r26, 0x04	; 4
    f518:	dc 92       	st	X, r13
    f51a:	ce 92       	st	-X, r12
    f51c:	13 97       	sbiw	r26, 0x03	; 3
    f51e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f522:	0f 90       	pop	r0
    f524:	0f 90       	pop	r0
    f526:	0f 90       	pop	r0
    f528:	0f 90       	pop	r0
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
    f52a:	60 91 6d 03 	lds	r22, 0x036D
    f52e:	86 2f       	mov	r24, r22
    f530:	81 70       	andi	r24, 0x01	; 1
    f532:	66 95       	lsr	r22
    f534:	67 9d       	mul	r22, r7
    f536:	60 2d       	mov	r22, r0
    f538:	11 24       	eor	r1, r1
    f53a:	6f 5f       	subi	r22, 0xFF	; 255
    f53c:	8e 5f       	subi	r24, 0xFE	; 254
    f53e:	a7 01       	movw	r20, r14
    f540:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
    f544:	80 91 6d 03 	lds	r24, 0x036D
    f548:	8f 5f       	subi	r24, 0xFF	; 255
    f54a:	80 93 6d 03 	sts	0x036D, r24
    f54e:	e0 91 6d 03 	lds	r30, 0x036D
    f552:	e4 30       	cpi	r30, 0x04	; 4
    f554:	08 f4       	brcc	.+2      	; 0xf558 <FMenuLocalAccount+0x62c>
    f556:	8f cf       	rjmp	.-226    	; 0xf476 <FMenuLocalAccount+0x54a>
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
				}
	            lcd_printf(4,1,PSTR("[*]Back             "));   //"[*]Back             "				
    f558:	84 e0       	ldi	r24, 0x04	; 4
    f55a:	61 e0       	ldi	r22, 0x01	; 1
    f55c:	48 eb       	ldi	r20, 0xB8	; 184
    f55e:	51 e2       	ldi	r21, 0x21	; 33
    f560:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				stLocalAccount=laSelectProductInput;
    f564:	8c e0       	ldi	r24, 0x0C	; 12
    f566:	6e c3       	rjmp	.+1756   	; 0xfc44 <FMenuLocalAccount+0xd18>
				}
		        break; 
           case laSelectProductInput:
				KeyPressed=_key_scan(1);
    f568:	81 e0       	ldi	r24, 0x01	; 1
    f56a:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    f56e:	e8 2e       	mov	r14, r24
			    KeyChar=_key_btn(KeyPressed);
    f570:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='4')){
    f574:	81 53       	subi	r24, 0x31	; 49
    f576:	84 30       	cpi	r24, 0x04	; 4
    f578:	08 f0       	brcs	.+2      	; 0xf57c <FMenuLocalAccount+0x650>
    f57a:	45 c0       	rjmp	.+138    	; 0xf606 <FMenuLocalAccount+0x6da>
				    iNozzle=KeyChar-'1';
    f57c:	80 93 6d 03 	sts	0x036D, r24
				    eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProductID[iNozzle]-1],10);
    f580:	e8 2f       	mov	r30, r24
    f582:	f0 e0       	ldi	r31, 0x00	; 0
    f584:	e9 59       	subi	r30, 0x99	; 153
    f586:	fc 4f       	sbci	r31, 0xFC	; 252
    f588:	20 81       	ld	r18, Z
    f58a:	30 e0       	ldi	r19, 0x00	; 0
    f58c:	21 50       	subi	r18, 0x01	; 1
    f58e:	30 40       	sbci	r19, 0x00	; 0
    f590:	8d e0       	ldi	r24, 0x0D	; 13
    f592:	90 e0       	ldi	r25, 0x00	; 0
    f594:	28 9f       	mul	r18, r24
    f596:	b0 01       	movw	r22, r0
    f598:	29 9f       	mul	r18, r25
    f59a:	70 0d       	add	r23, r0
    f59c:	38 9f       	mul	r19, r24
    f59e:	70 0d       	add	r23, r0
    f5a0:	11 24       	eor	r1, r1
    f5a2:	65 54       	subi	r22, 0x45	; 69
    f5a4:	7f 4f       	sbci	r23, 0xFF	; 255
    f5a6:	8e 01       	movw	r16, r28
    f5a8:	0f 5f       	subi	r16, 0xFF	; 255
    f5aa:	1f 4f       	sbci	r17, 0xFF	; 255
    f5ac:	c8 01       	movw	r24, r16
    f5ae:	4a e0       	ldi	r20, 0x0A	; 10
    f5b0:	50 e0       	ldi	r21, 0x00	; 0
    f5b2:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
					sprintf_P(strProduct,PSTR("%s"),ProductName);
    f5b6:	00 d0       	rcall	.+0      	; 0xf5b8 <FMenuLocalAccount+0x68c>
    f5b8:	00 d0       	rcall	.+0      	; 0xf5ba <FMenuLocalAccount+0x68e>
    f5ba:	00 d0       	rcall	.+0      	; 0xf5bc <FMenuLocalAccount+0x690>
    f5bc:	ed b7       	in	r30, 0x3d	; 61
    f5be:	fe b7       	in	r31, 0x3e	; 62
    f5c0:	31 96       	adiw	r30, 0x01	; 1
    f5c2:	8c e3       	ldi	r24, 0x3C	; 60
    f5c4:	98 e0       	ldi	r25, 0x08	; 8
    f5c6:	ad b7       	in	r26, 0x3d	; 61
    f5c8:	be b7       	in	r27, 0x3e	; 62
    f5ca:	12 96       	adiw	r26, 0x02	; 2
    f5cc:	9c 93       	st	X, r25
    f5ce:	8e 93       	st	-X, r24
    f5d0:	11 97       	sbiw	r26, 0x01	; 1
    f5d2:	85 eb       	ldi	r24, 0xB5	; 181
    f5d4:	91 e2       	ldi	r25, 0x21	; 33
    f5d6:	93 83       	std	Z+3, r25	; 0x03
    f5d8:	82 83       	std	Z+2, r24	; 0x02
    f5da:	15 83       	std	Z+5, r17	; 0x05
    f5dc:	04 83       	std	Z+4, r16	; 0x04
    f5de:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
					NozzleID=iNozzle+1;
    f5e2:	80 91 6d 03 	lds	r24, 0x036D
    f5e6:	8f 5f       	subi	r24, 0xFF	; 255
    f5e8:	80 93 4b 08 	sts	0x084B, r24
                    stLocalAccount=laSelectBalanceType;
    f5ec:	8d e0       	ldi	r24, 0x0D	; 13
    f5ee:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    f5f2:	ed b7       	in	r30, 0x3d	; 61
    f5f4:	fe b7       	in	r31, 0x3e	; 62
    f5f6:	36 96       	adiw	r30, 0x06	; 6
    f5f8:	0f b6       	in	r0, 0x3f	; 63
    f5fa:	f8 94       	cli
    f5fc:	fe bf       	out	0x3e, r31	; 62
    f5fe:	0f be       	out	0x3f, r0	; 63
    f600:	ed bf       	out	0x3d, r30	; 61
    f602:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
					}                
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laSelectFIP;//Back To Pump Selection
    f606:	fe 2d       	mov	r31, r14
    f608:	f7 3e       	cpi	r31, 0xE7	; 231
    f60a:	09 f0       	breq	.+2      	; 0xf60e <FMenuLocalAccount+0x6e2>
    f60c:	0a c5       	rjmp	.+2580   	; 0x10022 <FMenuLocalAccount+0x10f6>
    f60e:	89 e0       	ldi	r24, 0x09	; 9
    f610:	19 c3       	rjmp	.+1586   	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laSelectBalanceType:
		        lcd_clear();
    f612:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		        sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
    f616:	8d b7       	in	r24, 0x3d	; 61
    f618:	9e b7       	in	r25, 0x3e	; 62
    f61a:	08 97       	sbiw	r24, 0x08	; 8
    f61c:	0f b6       	in	r0, 0x3f	; 63
    f61e:	f8 94       	cli
    f620:	9e bf       	out	0x3e, r25	; 62
    f622:	0f be       	out	0x3f, r0	; 63
    f624:	8d bf       	out	0x3d, r24	; 61
    f626:	ed b7       	in	r30, 0x3d	; 61
    f628:	fe b7       	in	r31, 0x3e	; 62
    f62a:	31 96       	adiw	r30, 0x01	; 1
    f62c:	8e 01       	movw	r16, r28
    f62e:	04 5f       	subi	r16, 0xF4	; 244
    f630:	1f 4f       	sbci	r17, 0xFF	; 255
    f632:	ad b7       	in	r26, 0x3d	; 61
    f634:	be b7       	in	r27, 0x3e	; 62
    f636:	12 96       	adiw	r26, 0x02	; 2
    f638:	1c 93       	st	X, r17
    f63a:	0e 93       	st	-X, r16
    f63c:	11 97       	sbiw	r26, 0x01	; 1
    f63e:	8d ea       	ldi	r24, 0xAD	; 173
    f640:	91 e2       	ldi	r25, 0x21	; 33
    f642:	93 83       	std	Z+3, r25	; 0x03
    f644:	82 83       	std	Z+2, r24	; 0x02
    f646:	8f e6       	ldi	r24, 0x6F	; 111
    f648:	93 e0       	ldi	r25, 0x03	; 3
    f64a:	95 83       	std	Z+5, r25	; 0x05
    f64c:	84 83       	std	Z+4, r24	; 0x04
    f64e:	8c e3       	ldi	r24, 0x3C	; 60
    f650:	98 e0       	ldi	r25, 0x08	; 8
    f652:	97 83       	std	Z+7, r25	; 0x07
    f654:	86 83       	std	Z+6, r24	; 0x06
    f656:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				 lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
    f65a:	ed b7       	in	r30, 0x3d	; 61
    f65c:	fe b7       	in	r31, 0x3e	; 62
    f65e:	38 96       	adiw	r30, 0x08	; 8
    f660:	0f b6       	in	r0, 0x3f	; 63
    f662:	f8 94       	cli
    f664:	fe bf       	out	0x3e, r31	; 62
    f666:	0f be       	out	0x3f, r0	; 63
    f668:	ed bf       	out	0x3d, r30	; 61
    f66a:	81 e0       	ldi	r24, 0x01	; 1
    f66c:	61 e0       	ldi	r22, 0x01	; 1
    f66e:	a8 01       	movw	r20, r16
    f670:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		        lcd_printf(2,1,PSTR("[1]Volume           "));   //"[1]Premium          "                                                                      
    f674:	82 e0       	ldi	r24, 0x02	; 2
    f676:	61 e0       	ldi	r22, 0x01	; 1
    f678:	48 e9       	ldi	r20, 0x98	; 152
    f67a:	51 e2       	ldi	r21, 0x21	; 33
    f67c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				lcd_printf(3,1,PSTR("[2]Amount           "));   //"[2]Pertamax         "
    f680:	83 e0       	ldi	r24, 0x03	; 3
    f682:	61 e0       	ldi	r22, 0x01	; 1
    f684:	43 e8       	ldi	r20, 0x83	; 131
    f686:	51 e2       	ldi	r21, 0x21	; 33
    f688:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
    f68c:	84 e0       	ldi	r24, 0x04	; 4
    f68e:	61 e0       	ldi	r22, 0x01	; 1
    f690:	4e e6       	ldi	r20, 0x6E	; 110
    f692:	51 e2       	ldi	r21, 0x21	; 33
    f694:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	            //lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
                stLocalAccount=laSelectBalanceTypeInput;   
    f698:	8e e0       	ldi	r24, 0x0E	; 14
    f69a:	d4 c2       	rjmp	.+1448   	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laSelectBalanceTypeInput:
				KeyPressed=_key_scan(1);
    f69c:	81 e0       	ldi	r24, 0x01	; 1
    f69e:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
    f6a2:	08 2f       	mov	r16, r24
			    KeyChar=_key_btn(KeyPressed);
    f6a4:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='2')){
    f6a8:	98 2f       	mov	r25, r24
    f6aa:	91 53       	subi	r25, 0x31	; 49
    f6ac:	92 30       	cpi	r25, 0x02	; 2
    f6ae:	60 f5       	brcc	.+88     	; 0xf708 <FMenuLocalAccount+0x7dc>
    f6b0:	21 e8       	ldi	r18, 0x81	; 129
    f6b2:	34 e0       	ldi	r19, 0x04	; 4
                    if(KeyChar=='1'){
    f6b4:	81 33       	cpi	r24, 0x31	; 49
    f6b6:	91 f4       	brne	.+36     	; 0xf6dc <FMenuLocalAccount+0x7b0>
					   BalanceType=1;
    f6b8:	81 e0       	ldi	r24, 0x01	; 1
    f6ba:	80 93 72 03 	sts	0x0372, r24
					   sprintf_P(strBalanceType,PSTR("V"));
    f6be:	00 d0       	rcall	.+0      	; 0xf6c0 <FMenuLocalAccount+0x794>
    f6c0:	00 d0       	rcall	.+0      	; 0xf6c2 <FMenuLocalAccount+0x796>
    f6c2:	ad b7       	in	r26, 0x3d	; 61
    f6c4:	be b7       	in	r27, 0x3e	; 62
    f6c6:	12 96       	adiw	r26, 0x02	; 2
    f6c8:	3c 93       	st	X, r19
    f6ca:	2e 93       	st	-X, r18
    f6cc:	11 97       	sbiw	r26, 0x01	; 1
    f6ce:	2c e6       	ldi	r18, 0x6C	; 108
    f6d0:	31 e2       	ldi	r19, 0x21	; 33
    f6d2:	14 96       	adiw	r26, 0x04	; 4
    f6d4:	3c 93       	st	X, r19
    f6d6:	2e 93       	st	-X, r18
    f6d8:	13 97       	sbiw	r26, 0x03	; 3
    f6da:	0d c0       	rjmp	.+26     	; 0xf6f6 <FMenuLocalAccount+0x7ca>
					   }
					else
                    if(KeyChar=='2'){
					   BalanceType=2;
    f6dc:	82 e0       	ldi	r24, 0x02	; 2
    f6de:	80 93 72 03 	sts	0x0372, r24
                       sprintf_P(strBalanceType,PSTR("A"));
    f6e2:	00 d0       	rcall	.+0      	; 0xf6e4 <FMenuLocalAccount+0x7b8>
    f6e4:	00 d0       	rcall	.+0      	; 0xf6e6 <FMenuLocalAccount+0x7ba>
    f6e6:	ed b7       	in	r30, 0x3d	; 61
    f6e8:	fe b7       	in	r31, 0x3e	; 62
    f6ea:	32 83       	std	Z+2, r19	; 0x02
    f6ec:	21 83       	std	Z+1, r18	; 0x01
    f6ee:	2a e6       	ldi	r18, 0x6A	; 106
    f6f0:	31 e2       	ldi	r19, 0x21	; 33
    f6f2:	34 83       	std	Z+4, r19	; 0x04
    f6f4:	23 83       	std	Z+3, r18	; 0x03
    f6f6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f6fa:	0f 90       	pop	r0
    f6fc:	0f 90       	pop	r0
    f6fe:	0f 90       	pop	r0
    f700:	0f 90       	pop	r0
					   }
				    stLocalAccount=laBalanceValue;  
    f702:	8f e0       	ldi	r24, 0x0F	; 15
    f704:	80 93 5b 01 	sts	0x015B, r24
					}              
				if (KeyPressed==_KEY_CANCEL){
    f708:	07 3e       	cpi	r16, 0xE7	; 231
    f70a:	c9 f4       	brne	.+50     	; 0xf73e <FMenuLocalAccount+0x812>
				    if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&(ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0))
    f70c:	80 91 67 03 	lds	r24, 0x0367
    f710:	81 50       	subi	r24, 0x01	; 1
    f712:	86 30       	cpi	r24, 0x06	; 6
    f714:	70 f4       	brcc	.+28     	; 0xf732 <FMenuLocalAccount+0x806>
    f716:	80 91 68 03 	lds	r24, 0x0368
    f71a:	88 23       	and	r24, r24
    f71c:	51 f4       	brne	.+20     	; 0xf732 <FMenuLocalAccount+0x806>
    f71e:	80 91 69 03 	lds	r24, 0x0369
    f722:	88 23       	and	r24, r24
    f724:	31 f4       	brne	.+12     	; 0xf732 <FMenuLocalAccount+0x806>
    f726:	80 91 6a 03 	lds	r24, 0x036A
    f72a:	88 23       	and	r24, r24
    f72c:	11 f4       	brne	.+4      	; 0xf732 <FMenuLocalAccount+0x806>
					     stLocalAccount=laSelectFIP;//Back To FIP Select Non MPD
    f72e:	89 e0       	ldi	r24, 0x09	; 9
    f730:	01 c0       	rjmp	.+2      	; 0xf734 <FMenuLocalAccount+0x808>
                    else stLocalAccount=laSelectProduct;//Back To Product Selection MPD
    f732:	8b e0       	ldi	r24, 0x0B	; 11
    f734:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    f738:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    f73c:	72 c4       	rjmp	.+2276   	; 0x10022 <FMenuLocalAccount+0x10f6>
					}
                else
				if (KeyPressed==_KEY_ENTER){
    f73e:	07 3b       	cpi	r16, 0xB7	; 183
    f740:	09 f0       	breq	.+2      	; 0xf744 <FMenuLocalAccount+0x818>
    f742:	6f c4       	rjmp	.+2270   	; 0x10022 <FMenuLocalAccount+0x10f6>
				    BalanceType=1;
    f744:	01 e0       	ldi	r16, 0x01	; 1
    f746:	00 93 72 03 	sts	0x0372, r16
					sprintf_P(strBalanceType,PSTR("A"));
    f74a:	00 d0       	rcall	.+0      	; 0xf74c <FMenuLocalAccount+0x820>
    f74c:	00 d0       	rcall	.+0      	; 0xf74e <FMenuLocalAccount+0x822>
    f74e:	81 e8       	ldi	r24, 0x81	; 129
    f750:	94 e0       	ldi	r25, 0x04	; 4
    f752:	ad b7       	in	r26, 0x3d	; 61
    f754:	be b7       	in	r27, 0x3e	; 62
    f756:	12 96       	adiw	r26, 0x02	; 2
    f758:	9c 93       	st	X, r25
    f75a:	8e 93       	st	-X, r24
    f75c:	11 97       	sbiw	r26, 0x01	; 1
    f75e:	88 e6       	ldi	r24, 0x68	; 104
    f760:	91 e2       	ldi	r25, 0x21	; 33
    f762:	14 96       	adiw	r26, 0x04	; 4
    f764:	9c 93       	st	X, r25
    f766:	8e 93       	st	-X, r24
    f768:	13 97       	sbiw	r26, 0x03	; 3
    f76a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
					//sprintf_P(strBalanceValue,PSTR("999"));
					IsFullAuthorized=True;
    f76e:	00 93 64 03 	sts	0x0364, r16
                    stLocalAccount=laOdometer;//FullAuthorized
    f772:	81 e1       	ldi	r24, 0x11	; 17
    f774:	80 93 5b 01 	sts	0x015B, r24
    f778:	0f 90       	pop	r0
    f77a:	0f 90       	pop	r0
    f77c:	0f 90       	pop	r0
    f77e:	0f 90       	pop	r0
    f780:	50 c4       	rjmp	.+2208   	; 0x10022 <FMenuLocalAccount+0x10f6>
					}

		        break;
           case laBalanceValue:
		        lcd_clear();
    f782:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		        if(BalanceType==1){
    f786:	80 91 72 03 	lds	r24, 0x0372
    f78a:	81 30       	cpi	r24, 0x01	; 1
    f78c:	f1 f5       	brne	.+124    	; 0xf80a <FMenuLocalAccount+0x8de>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
    f78e:	ed b7       	in	r30, 0x3d	; 61
    f790:	fe b7       	in	r31, 0x3e	; 62
    f792:	38 97       	sbiw	r30, 0x08	; 8
    f794:	0f b6       	in	r0, 0x3f	; 63
    f796:	f8 94       	cli
    f798:	fe bf       	out	0x3e, r31	; 62
    f79a:	0f be       	out	0x3f, r0	; 63
    f79c:	ed bf       	out	0x3d, r30	; 61
    f79e:	31 96       	adiw	r30, 0x01	; 1
    f7a0:	8e 01       	movw	r16, r28
    f7a2:	04 5f       	subi	r16, 0xF4	; 244
    f7a4:	1f 4f       	sbci	r17, 0xFF	; 255
    f7a6:	ad b7       	in	r26, 0x3d	; 61
    f7a8:	be b7       	in	r27, 0x3e	; 62
    f7aa:	12 96       	adiw	r26, 0x02	; 2
    f7ac:	1c 93       	st	X, r17
    f7ae:	0e 93       	st	-X, r16
    f7b0:	11 97       	sbiw	r26, 0x01	; 1
    f7b2:	80 e6       	ldi	r24, 0x60	; 96
    f7b4:	91 e2       	ldi	r25, 0x21	; 33
    f7b6:	93 83       	std	Z+3, r25	; 0x03
    f7b8:	82 83       	std	Z+2, r24	; 0x02
    f7ba:	8f e6       	ldi	r24, 0x6F	; 111
    f7bc:	93 e0       	ldi	r25, 0x03	; 3
    f7be:	95 83       	std	Z+5, r25	; 0x05
    f7c0:	84 83       	std	Z+4, r24	; 0x04
    f7c2:	8c e3       	ldi	r24, 0x3C	; 60
    f7c4:	98 e0       	ldi	r25, 0x08	; 8
    f7c6:	97 83       	std	Z+7, r25	; 0x07
    f7c8:	86 83       	std	Z+6, r24	; 0x06
    f7ca:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				    lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
    f7ce:	ed b7       	in	r30, 0x3d	; 61
    f7d0:	fe b7       	in	r31, 0x3e	; 62
    f7d2:	38 96       	adiw	r30, 0x08	; 8
    f7d4:	0f b6       	in	r0, 0x3f	; 63
    f7d6:	f8 94       	cli
    f7d8:	fe bf       	out	0x3e, r31	; 62
    f7da:	0f be       	out	0x3f, r0	; 63
    f7dc:	ed bf       	out	0x3d, r30	; 61
    f7de:	81 e0       	ldi	r24, 0x01	; 1
    f7e0:	61 e0       	ldi	r22, 0x01	; 1
    f7e2:	a8 01       	movw	r20, r16
    f7e4:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		           lcd_printf(2,1,PSTR("[1]Volume:_         "));   //"[1]Volume:_         "                                                                      
    f7e8:	82 e0       	ldi	r24, 0x02	; 2
    f7ea:	61 e0       	ldi	r22, 0x01	; 1
    f7ec:	4b e4       	ldi	r20, 0x4B	; 75
    f7ee:	51 e2       	ldi	r21, 0x21	; 33
    f7f0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				   lcd_printf(3,1,PSTR("                    "));   //"                    "
    f7f4:	83 e0       	ldi	r24, 0x03	; 3
    f7f6:	61 e0       	ldi	r22, 0x01	; 1
    f7f8:	46 e3       	ldi	r20, 0x36	; 54
    f7fa:	51 e2       	ldi	r21, 0x21	; 33
    f7fc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK     "						        
    f800:	84 e0       	ldi	r24, 0x04	; 4
    f802:	61 e0       	ldi	r22, 0x01	; 1
    f804:	41 e2       	ldi	r20, 0x21	; 33
    f806:	51 e2       	ldi	r21, 0x21	; 33
    f808:	42 c0       	rjmp	.+132    	; 0xf88e <FMenuLocalAccount+0x962>
				   }
                else
		        if(BalanceType==2){
    f80a:	82 30       	cpi	r24, 0x02	; 2
    f80c:	09 f0       	breq	.+2      	; 0xf810 <FMenuLocalAccount+0x8e4>
    f80e:	41 c0       	rjmp	.+130    	; 0xf892 <FMenuLocalAccount+0x966>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
    f810:	8d b7       	in	r24, 0x3d	; 61
    f812:	9e b7       	in	r25, 0x3e	; 62
    f814:	08 97       	sbiw	r24, 0x08	; 8
    f816:	0f b6       	in	r0, 0x3f	; 63
    f818:	f8 94       	cli
    f81a:	9e bf       	out	0x3e, r25	; 62
    f81c:	0f be       	out	0x3f, r0	; 63
    f81e:	8d bf       	out	0x3d, r24	; 61
    f820:	ed b7       	in	r30, 0x3d	; 61
    f822:	fe b7       	in	r31, 0x3e	; 62
    f824:	31 96       	adiw	r30, 0x01	; 1
    f826:	8e 01       	movw	r16, r28
    f828:	04 5f       	subi	r16, 0xF4	; 244
    f82a:	1f 4f       	sbci	r17, 0xFF	; 255
    f82c:	ad b7       	in	r26, 0x3d	; 61
    f82e:	be b7       	in	r27, 0x3e	; 62
    f830:	12 96       	adiw	r26, 0x02	; 2
    f832:	1c 93       	st	X, r17
    f834:	0e 93       	st	-X, r16
    f836:	11 97       	sbiw	r26, 0x01	; 1
    f838:	89 e1       	ldi	r24, 0x19	; 25
    f83a:	91 e2       	ldi	r25, 0x21	; 33
    f83c:	93 83       	std	Z+3, r25	; 0x03
    f83e:	82 83       	std	Z+2, r24	; 0x02
    f840:	8f e6       	ldi	r24, 0x6F	; 111
    f842:	93 e0       	ldi	r25, 0x03	; 3
    f844:	95 83       	std	Z+5, r25	; 0x05
    f846:	84 83       	std	Z+4, r24	; 0x04
    f848:	8c e3       	ldi	r24, 0x3C	; 60
    f84a:	98 e0       	ldi	r25, 0x08	; 8
    f84c:	97 83       	std	Z+7, r25	; 0x07
    f84e:	86 83       	std	Z+6, r24	; 0x06
    f850:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				   lcd_print(1,1,lcdteks);                         //"P01-Pertamax        "                                                                      
    f854:	ed b7       	in	r30, 0x3d	; 61
    f856:	fe b7       	in	r31, 0x3e	; 62
    f858:	38 96       	adiw	r30, 0x08	; 8
    f85a:	0f b6       	in	r0, 0x3f	; 63
    f85c:	f8 94       	cli
    f85e:	fe bf       	out	0x3e, r31	; 62
    f860:	0f be       	out	0x3f, r0	; 63
    f862:	ed bf       	out	0x3d, r30	; 61
    f864:	81 e0       	ldi	r24, 0x01	; 1
    f866:	61 e0       	ldi	r22, 0x01	; 1
    f868:	a8 01       	movw	r20, r16
    f86a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		           lcd_printf(2,1,PSTR("                    "));   //"                    "                                                                      
    f86e:	82 e0       	ldi	r24, 0x02	; 2
    f870:	61 e0       	ldi	r22, 0x01	; 1
    f872:	44 e0       	ldi	r20, 0x04	; 4
    f874:	51 e2       	ldi	r21, 0x21	; 33
    f876:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				   lcd_printf(3,1,PSTR("[2]Amount:_         "));   //"[2]Amount:_         "
    f87a:	83 e0       	ldi	r24, 0x03	; 3
    f87c:	61 e0       	ldi	r22, 0x01	; 1
    f87e:	4f ee       	ldi	r20, 0xEF	; 239
    f880:	50 e2       	ldi	r21, 0x20	; 32
    f882:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK      "			        
    f886:	84 e0       	ldi	r24, 0x04	; 4
    f888:	61 e0       	ldi	r22, 0x01	; 1
    f88a:	4a ed       	ldi	r20, 0xDA	; 218
    f88c:	50 e2       	ldi	r21, 0x20	; 32
    f88e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				   }
                iLoop=0;
    f892:	10 92 63 03 	sts	0x0363, r1
    f896:	10 92 62 03 	sts	0x0362, r1
				iValuePos=0;
    f89a:	10 92 6e 03 	sts	0x036E, r1
				//ValueChar[iValuePos]=' ';
		        stLocalAccount=laBalanceValueInput;  
    f89e:	80 e1       	ldi	r24, 0x10	; 16
    f8a0:	d1 c1       	rjmp	.+930    	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break; 
           case laBalanceValueInput:
		        uiResult=UserInput(UI_NUMBER_R,(1+BalanceType),11,strBalanceValue,0,10); 
    f8a2:	60 91 72 03 	lds	r22, 0x0372
    f8a6:	6f 5f       	subi	r22, 0xFF	; 255
    f8a8:	81 e0       	ldi	r24, 0x01	; 1
    f8aa:	4b e0       	ldi	r20, 0x0B	; 11
    f8ac:	2d ef       	ldi	r18, 0xFD	; 253
    f8ae:	3c e0       	ldi	r19, 0x0C	; 12
    f8b0:	00 e0       	ldi	r16, 0x00	; 0
    f8b2:	10 e0       	ldi	r17, 0x00	; 0
    f8b4:	7a e0       	ldi	r23, 0x0A	; 10
    f8b6:	e7 2e       	mov	r14, r23
    f8b8:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
				if (uiResult==USER_CANCEL){
    f8bc:	81 30       	cpi	r24, 0x01	; 1
    f8be:	61 f4       	brne	.+24     	; 0xf8d8 <FMenuLocalAccount+0x9ac>
				    lcd_clear();
    f8c0:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    f8c4:	8f ef       	ldi	r24, 0xFF	; 255
    f8c6:	9f e7       	ldi	r25, 0x7F	; 127
    f8c8:	a4 e0       	ldi	r26, 0x04	; 4
    f8ca:	81 50       	subi	r24, 0x01	; 1
    f8cc:	90 40       	sbci	r25, 0x00	; 0
    f8ce:	a0 40       	sbci	r26, 0x00	; 0
    f8d0:	e1 f7       	brne	.-8      	; 0xf8ca <FMenuLocalAccount+0x99e>
    f8d2:	00 c0       	rjmp	.+0      	; 0xf8d4 <FMenuLocalAccount+0x9a8>
    f8d4:	00 00       	nop
    f8d6:	fc c0       	rjmp	.+504    	; 0xfad0 <FMenuLocalAccount+0xba4>
					_delay_ms(100);		        
				    stLocalAccount=laSelectBalanceType;		        
					}
				else
				if (uiResult==USER_OK){				    
    f8d8:	83 30       	cpi	r24, 0x03	; 3
    f8da:	09 f0       	breq	.+2      	; 0xf8de <FMenuLocalAccount+0x9b2>
    f8dc:	a2 c3       	rjmp	.+1860   	; 0x10022 <FMenuLocalAccount+0x10f6>
				    stLocalAccount=laOdometer;
    f8de:	81 e1       	ldi	r24, 0x11	; 17
    f8e0:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    f8e4:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    f8e8:	8f ef       	ldi	r24, 0xFF	; 255
    f8ea:	9f e7       	ldi	r25, 0x7F	; 127
    f8ec:	a4 e0       	ldi	r26, 0x04	; 4
    f8ee:	81 50       	subi	r24, 0x01	; 1
    f8f0:	90 40       	sbci	r25, 0x00	; 0
    f8f2:	a0 40       	sbci	r26, 0x00	; 0
    f8f4:	e1 f7       	brne	.-8      	; 0xf8ee <FMenuLocalAccount+0x9c2>
    f8f6:	00 c0       	rjmp	.+0      	; 0xf8f8 <FMenuLocalAccount+0x9cc>
    f8f8:	00 00       	nop
    f8fa:	93 c3       	rjmp	.+1830   	; 0x10022 <FMenuLocalAccount+0x10f6>
					_delay_ms(100);		        
					}
*/
		        break;
           case laOdometer://GetOdometer			
		        lcd_clear();
    f8fc:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
				if (IsFullAuthorized==True){
    f900:	80 91 64 03 	lds	r24, 0x0364
    f904:	81 30       	cpi	r24, 0x01	; 1
    f906:	09 f0       	breq	.+2      	; 0xf90a <FMenuLocalAccount+0x9de>
    f908:	47 c0       	rjmp	.+142    	; 0xf998 <FMenuLocalAccount+0xa6c>
				    lcd_printf(1,1,PSTR("Pump Product   Full"));
    f90a:	61 e0       	ldi	r22, 0x01	; 1
    f90c:	46 ec       	ldi	r20, 0xC6	; 198
    f90e:	50 e2       	ldi	r21, 0x20	; 32
    f910:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
    f914:	ad b7       	in	r26, 0x3d	; 61
    f916:	be b7       	in	r27, 0x3e	; 62
    f918:	18 97       	sbiw	r26, 0x08	; 8
    f91a:	0f b6       	in	r0, 0x3f	; 63
    f91c:	f8 94       	cli
    f91e:	be bf       	out	0x3e, r27	; 62
    f920:	0f be       	out	0x3f, r0	; 63
    f922:	ad bf       	out	0x3d, r26	; 61
    f924:	ed b7       	in	r30, 0x3d	; 61
    f926:	fe b7       	in	r31, 0x3e	; 62
    f928:	31 96       	adiw	r30, 0x01	; 1
    f92a:	8e 01       	movw	r16, r28
    f92c:	04 5f       	subi	r16, 0xF4	; 244
    f92e:	1f 4f       	sbci	r17, 0xFF	; 255
    f930:	12 96       	adiw	r26, 0x02	; 2
    f932:	1c 93       	st	X, r17
    f934:	0e 93       	st	-X, r16
    f936:	11 97       	sbiw	r26, 0x01	; 1
    f938:	8d eb       	ldi	r24, 0xBD	; 189
    f93a:	90 e2       	ldi	r25, 0x20	; 32
    f93c:	93 83       	std	Z+3, r25	; 0x03
    f93e:	82 83       	std	Z+2, r24	; 0x02
    f940:	8f e6       	ldi	r24, 0x6F	; 111
    f942:	93 e0       	ldi	r25, 0x03	; 3
    f944:	95 83       	std	Z+5, r25	; 0x05
    f946:	84 83       	std	Z+4, r24	; 0x04
    f948:	8c e3       	ldi	r24, 0x3C	; 60
    f94a:	98 e0       	ldi	r25, 0x08	; 8
    f94c:	97 83       	std	Z+7, r25	; 0x07
    f94e:	86 83       	std	Z+6, r24	; 0x06
    f950:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f954:	ed b7       	in	r30, 0x3d	; 61
    f956:	fe b7       	in	r31, 0x3e	; 62
    f958:	38 96       	adiw	r30, 0x08	; 8
    f95a:	0f b6       	in	r0, 0x3f	; 63
    f95c:	f8 94       	cli
    f95e:	fe bf       	out	0x3e, r31	; 62
    f960:	0f be       	out	0x3f, r0	; 63
    f962:	ed bf       	out	0x3d, r30	; 61
    f964:	82 e0       	ldi	r24, 0x02	; 2
    f966:	61 e0       	ldi	r22, 0x01	; 1
    f968:	a8 01       	movw	r20, r16
    f96a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		            sprintf_P(lcdteks,PSTR("  Tank"));            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
    f96e:	00 d0       	rcall	.+0      	; 0xf970 <FMenuLocalAccount+0xa44>
    f970:	00 d0       	rcall	.+0      	; 0xf972 <FMenuLocalAccount+0xa46>
    f972:	ad b7       	in	r26, 0x3d	; 61
    f974:	be b7       	in	r27, 0x3e	; 62
    f976:	12 96       	adiw	r26, 0x02	; 2
    f978:	1c 93       	st	X, r17
    f97a:	0e 93       	st	-X, r16
    f97c:	11 97       	sbiw	r26, 0x01	; 1
    f97e:	86 eb       	ldi	r24, 0xB6	; 182
    f980:	90 e2       	ldi	r25, 0x20	; 32
    f982:	14 96       	adiw	r26, 0x04	; 4
    f984:	9c 93       	st	X, r25
    f986:	8e 93       	st	-X, r24
    f988:	13 97       	sbiw	r26, 0x03	; 3
    f98a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f98e:	0f 90       	pop	r0
    f990:	0f 90       	pop	r0
    f992:	0f 90       	pop	r0
    f994:	0f 90       	pop	r0
    f996:	5e c0       	rjmp	.+188    	; 0xfa54 <FMenuLocalAccount+0xb28>
				}
                else{
		            if (BalanceType==1) lcd_printf(1,1,PSTR("Pump Product Volume"));
    f998:	80 91 72 03 	lds	r24, 0x0372
    f99c:	81 30       	cpi	r24, 0x01	; 1
    f99e:	29 f4       	brne	.+10     	; 0xf9aa <FMenuLocalAccount+0xa7e>
    f9a0:	61 e0       	ldi	r22, 0x01	; 1
    f9a2:	42 ea       	ldi	r20, 0xA2	; 162
    f9a4:	50 e2       	ldi	r21, 0x20	; 32
    f9a6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
                    if (BalanceType==2) lcd_printf(1,1,PSTR("Pump Product Amount"));//"Pump Product  Amount" 
    f9aa:	80 91 72 03 	lds	r24, 0x0372
    f9ae:	82 30       	cpi	r24, 0x02	; 2
    f9b0:	31 f4       	brne	.+12     	; 0xf9be <FMenuLocalAccount+0xa92>
    f9b2:	81 e0       	ldi	r24, 0x01	; 1
    f9b4:	61 e0       	ldi	r22, 0x01	; 1
    f9b6:	4e e8       	ldi	r20, 0x8E	; 142
    f9b8:	50 e2       	ldi	r21, 0x20	; 32
    f9ba:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
    f9be:	ed b7       	in	r30, 0x3d	; 61
    f9c0:	fe b7       	in	r31, 0x3e	; 62
    f9c2:	38 97       	sbiw	r30, 0x08	; 8
    f9c4:	0f b6       	in	r0, 0x3f	; 63
    f9c6:	f8 94       	cli
    f9c8:	fe bf       	out	0x3e, r31	; 62
    f9ca:	0f be       	out	0x3f, r0	; 63
    f9cc:	ed bf       	out	0x3d, r30	; 61
    f9ce:	31 96       	adiw	r30, 0x01	; 1
    f9d0:	8e 01       	movw	r16, r28
    f9d2:	04 5f       	subi	r16, 0xF4	; 244
    f9d4:	1f 4f       	sbci	r17, 0xFF	; 255
    f9d6:	ad b7       	in	r26, 0x3d	; 61
    f9d8:	be b7       	in	r27, 0x3e	; 62
    f9da:	12 96       	adiw	r26, 0x02	; 2
    f9dc:	1c 93       	st	X, r17
    f9de:	0e 93       	st	-X, r16
    f9e0:	11 97       	sbiw	r26, 0x01	; 1
    f9e2:	85 e8       	ldi	r24, 0x85	; 133
    f9e4:	90 e2       	ldi	r25, 0x20	; 32
    f9e6:	93 83       	std	Z+3, r25	; 0x03
    f9e8:	82 83       	std	Z+2, r24	; 0x02
    f9ea:	8f e6       	ldi	r24, 0x6F	; 111
    f9ec:	93 e0       	ldi	r25, 0x03	; 3
    f9ee:	95 83       	std	Z+5, r25	; 0x05
    f9f0:	84 83       	std	Z+4, r24	; 0x04
    f9f2:	8c e3       	ldi	r24, 0x3C	; 60
    f9f4:	98 e0       	ldi	r25, 0x08	; 8
    f9f6:	97 83       	std	Z+7, r25	; 0x07
    f9f8:	86 83       	std	Z+6, r24	; 0x06
    f9fa:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    f9fe:	ed b7       	in	r30, 0x3d	; 61
    fa00:	fe b7       	in	r31, 0x3e	; 62
    fa02:	38 96       	adiw	r30, 0x08	; 8
    fa04:	0f b6       	in	r0, 0x3f	; 63
    fa06:	f8 94       	cli
    fa08:	fe bf       	out	0x3e, r31	; 62
    fa0a:	0f be       	out	0x3f, r0	; 63
    fa0c:	ed bf       	out	0x3d, r30	; 61
    fa0e:	82 e0       	ldi	r24, 0x02	; 2
    fa10:	61 e0       	ldi	r22, 0x01	; 1
    fa12:	a8 01       	movw	r20, r16
    fa14:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		            sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
    fa18:	00 d0       	rcall	.+0      	; 0xfa1a <FMenuLocalAccount+0xaee>
    fa1a:	00 d0       	rcall	.+0      	; 0xfa1c <FMenuLocalAccount+0xaf0>
    fa1c:	00 d0       	rcall	.+0      	; 0xfa1e <FMenuLocalAccount+0xaf2>
    fa1e:	ed b7       	in	r30, 0x3d	; 61
    fa20:	fe b7       	in	r31, 0x3e	; 62
    fa22:	31 96       	adiw	r30, 0x01	; 1
    fa24:	ad b7       	in	r26, 0x3d	; 61
    fa26:	be b7       	in	r27, 0x3e	; 62
    fa28:	12 96       	adiw	r26, 0x02	; 2
    fa2a:	1c 93       	st	X, r17
    fa2c:	0e 93       	st	-X, r16
    fa2e:	11 97       	sbiw	r26, 0x01	; 1
    fa30:	81 e8       	ldi	r24, 0x81	; 129
    fa32:	90 e2       	ldi	r25, 0x20	; 32
    fa34:	93 83       	std	Z+3, r25	; 0x03
    fa36:	82 83       	std	Z+2, r24	; 0x02
    fa38:	8d ef       	ldi	r24, 0xFD	; 253
    fa3a:	9c e0       	ldi	r25, 0x0C	; 12
    fa3c:	95 83       	std	Z+5, r25	; 0x05
    fa3e:	84 83       	std	Z+4, r24	; 0x04
    fa40:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fa44:	ed b7       	in	r30, 0x3d	; 61
    fa46:	fe b7       	in	r31, 0x3e	; 62
    fa48:	36 96       	adiw	r30, 0x06	; 6
    fa4a:	0f b6       	in	r0, 0x3f	; 63
    fa4c:	f8 94       	cli
    fa4e:	fe bf       	out	0x3e, r31	; 62
    fa50:	0f be       	out	0x3f, r0	; 63
    fa52:	ed bf       	out	0x3d, r30	; 61
    fa54:	82 e0       	ldi	r24, 0x02	; 2
    fa56:	6e e0       	ldi	r22, 0x0E	; 14
    fa58:	a8 01       	movw	r20, r16
    fa5a:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>

				}
				lcd_printf(3,1,PSTR("Odometer:_       "));                                //"Odometer:_          "
    fa5e:	83 e0       	ldi	r24, 0x03	; 3
    fa60:	61 e0       	ldi	r22, 0x01	; 1
    fa62:	4f e6       	ldi	r20, 0x6F	; 111
    fa64:	50 e2       	ldi	r21, 0x20	; 32
    fa66:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	            lcd_printf(4,1,PSTR("[*]Back  [#]OK   "));                                //"[*]Back  [#]OK      "						        
    fa6a:	84 e0       	ldi	r24, 0x04	; 4
    fa6c:	61 e0       	ldi	r22, 0x01	; 1
    fa6e:	4d e5       	ldi	r20, 0x5D	; 93
    fa70:	50 e2       	ldi	r21, 0x20	; 32
    fa72:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				ClearMem(strOdometer);
    fa76:	81 ea       	ldi	r24, 0xA1	; 161
    fa78:	94 e0       	ldi	r25, 0x04	; 4
    fa7a:	0e 94 49 a0 	call	0x14092	; 0x14092 <ClearMem>
		        stLocalAccount=laOdometerInput;
    fa7e:	82 e1       	ldi	r24, 0x12	; 18
    fa80:	e1 c0       	rjmp	.+450    	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laOdometerInput:
				uiResult=UserInput(UI_NUMBER_R,3,10,strOdometer,0,10);
    fa82:	61 ea       	ldi	r22, 0xA1	; 161
    fa84:	c6 2e       	mov	r12, r22
    fa86:	64 e0       	ldi	r22, 0x04	; 4
    fa88:	d6 2e       	mov	r13, r22
    fa8a:	81 e0       	ldi	r24, 0x01	; 1
    fa8c:	63 e0       	ldi	r22, 0x03	; 3
    fa8e:	4a e0       	ldi	r20, 0x0A	; 10
    fa90:	96 01       	movw	r18, r12
    fa92:	00 e0       	ldi	r16, 0x00	; 0
    fa94:	10 e0       	ldi	r17, 0x00	; 0
    fa96:	5a e0       	ldi	r21, 0x0A	; 10
    fa98:	e5 2e       	mov	r14, r21
    fa9a:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
				if (uiResult==USER_OK){
    fa9e:	83 30       	cpi	r24, 0x03	; 3
    faa0:	81 f4       	brne	.+32     	; 0xfac2 <FMenuLocalAccount+0xb96>
				    if ((strlen(strOdometer)==1)&&(strOdometer[0]=='0'))
    faa2:	f6 01       	movw	r30, r12
    faa4:	01 90       	ld	r0, Z+
    faa6:	00 20       	and	r0, r0
    faa8:	e9 f7       	brne	.-6      	; 0xfaa4 <FMenuLocalAccount+0xb78>
    faaa:	84 e0       	ldi	r24, 0x04	; 4
    faac:	e3 3a       	cpi	r30, 0xA3	; 163
    faae:	f8 07       	cpc	r31, r24
    fab0:	31 f4       	brne	.+12     	; 0xfabe <FMenuLocalAccount+0xb92>
    fab2:	80 91 a1 04 	lds	r24, 0x04A1
    fab6:	80 33       	cpi	r24, 0x30	; 48
    fab8:	11 f4       	brne	.+4      	; 0xfabe <FMenuLocalAccount+0xb92>
					    strOdometer[0]=0;
    faba:	10 92 a1 04 	sts	0x04A1, r1
				    stLocalAccount=laDataConfirm;
    fabe:	83 e1       	ldi	r24, 0x13	; 19
    fac0:	c1 c0       	rjmp	.+386    	; 0xfc44 <FMenuLocalAccount+0xd18>
					}
			    else
			    if (uiResult==USER_CANCEL){
    fac2:	81 30       	cpi	r24, 0x01	; 1
    fac4:	09 f0       	breq	.+2      	; 0xfac8 <FMenuLocalAccount+0xb9c>
    fac6:	ad c2       	rjmp	.+1370   	; 0x10022 <FMenuLocalAccount+0x10f6>
				    if (IsFullAuthorized==True)
    fac8:	80 91 64 03 	lds	r24, 0x0364
    facc:	81 30       	cpi	r24, 0x01	; 1
    face:	11 f4       	brne	.+4      	; 0xfad4 <FMenuLocalAccount+0xba8>
					     stLocalAccount=laSelectBalanceType;
    fad0:	8d e0       	ldi	r24, 0x0D	; 13
    fad2:	b8 c0       	rjmp	.+368    	; 0xfc44 <FMenuLocalAccount+0xd18>
					else stLocalAccount=laBalanceValue;		        
    fad4:	8f e0       	ldi	r24, 0x0F	; 15
    fad6:	b6 c0       	rjmp	.+364    	; 0xfc44 <FMenuLocalAccount+0xd18>
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
    fad8:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		        StringCopyPos(strCardHolder,strName,9,10);                                          //Data Confirmation   
    fadc:	20 e2       	ldi	r18, 0x20	; 32
    fade:	e2 2e       	mov	r14, r18
    fae0:	f1 2c       	mov	r15, r1
    fae2:	ec 0e       	add	r14, r28
    fae4:	fd 1e       	adc	r15, r29
    fae6:	82 e0       	ldi	r24, 0x02	; 2
    fae8:	94 e0       	ldi	r25, 0x04	; 4
    faea:	b7 01       	movw	r22, r14
    faec:	49 e0       	ldi	r20, 0x09	; 9
    faee:	2a e0       	ldi	r18, 0x0A	; 10
    faf0:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <StringCopyPos>
                sprintf_P(lcdteks,PSTR("%s "),strName);                  lcd_print(1,1,lcdteks);    //"Iyan The Man        "
    faf4:	00 d0       	rcall	.+0      	; 0xfaf6 <FMenuLocalAccount+0xbca>
    faf6:	00 d0       	rcall	.+0      	; 0xfaf8 <FMenuLocalAccount+0xbcc>
    faf8:	00 d0       	rcall	.+0      	; 0xfafa <FMenuLocalAccount+0xbce>
    fafa:	ed b7       	in	r30, 0x3d	; 61
    fafc:	fe b7       	in	r31, 0x3e	; 62
    fafe:	31 96       	adiw	r30, 0x01	; 1
    fb00:	8e 01       	movw	r16, r28
    fb02:	04 5f       	subi	r16, 0xF4	; 244
    fb04:	1f 4f       	sbci	r17, 0xFF	; 255
    fb06:	ad b7       	in	r26, 0x3d	; 61
    fb08:	be b7       	in	r27, 0x3e	; 62
    fb0a:	12 96       	adiw	r26, 0x02	; 2
    fb0c:	1c 93       	st	X, r17
    fb0e:	0e 93       	st	-X, r16
    fb10:	11 97       	sbiw	r26, 0x01	; 1
    fb12:	89 e5       	ldi	r24, 0x59	; 89
    fb14:	90 e2       	ldi	r25, 0x20	; 32
    fb16:	93 83       	std	Z+3, r25	; 0x03
    fb18:	82 83       	std	Z+2, r24	; 0x02
    fb1a:	f5 82       	std	Z+5, r15	; 0x05
    fb1c:	e4 82       	std	Z+4, r14	; 0x04
    fb1e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fb22:	ed b7       	in	r30, 0x3d	; 61
    fb24:	fe b7       	in	r31, 0x3e	; 62
    fb26:	36 96       	adiw	r30, 0x06	; 6
    fb28:	0f b6       	in	r0, 0x3f	; 63
    fb2a:	f8 94       	cli
    fb2c:	fe bf       	out	0x3e, r31	; 62
    fb2e:	0f be       	out	0x3f, r0	; 63
    fb30:	ed bf       	out	0x3d, r30	; 61
    fb32:	81 e0       	ldi	r24, 0x01	; 1
    fb34:	61 e0       	ldi	r22, 0x01	; 1
    fb36:	a8 01       	movw	r20, r16
    fb38:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		        sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);             lcd_print(2,1,lcdteks);    //"ID1CCDA565 OD:123456"
    fb3c:	00 d0       	rcall	.+0      	; 0xfb3e <FMenuLocalAccount+0xc12>
    fb3e:	00 d0       	rcall	.+0      	; 0xfb40 <FMenuLocalAccount+0xc14>
    fb40:	00 d0       	rcall	.+0      	; 0xfb42 <FMenuLocalAccount+0xc16>
    fb42:	ed b7       	in	r30, 0x3d	; 61
    fb44:	fe b7       	in	r31, 0x3e	; 62
    fb46:	31 96       	adiw	r30, 0x01	; 1
    fb48:	ad b7       	in	r26, 0x3d	; 61
    fb4a:	be b7       	in	r27, 0x3e	; 62
    fb4c:	12 96       	adiw	r26, 0x02	; 2
    fb4e:	1c 93       	st	X, r17
    fb50:	0e 93       	st	-X, r16
    fb52:	11 97       	sbiw	r26, 0x01	; 1
    fb54:	82 e5       	ldi	r24, 0x52	; 82
    fb56:	90 e2       	ldi	r25, 0x20	; 32
    fb58:	93 83       	std	Z+3, r25	; 0x03
    fb5a:	82 83       	std	Z+2, r24	; 0x02
    fb5c:	87 e6       	ldi	r24, 0x67	; 103
    fb5e:	9c e0       	ldi	r25, 0x0C	; 12
    fb60:	95 83       	std	Z+5, r25	; 0x05
    fb62:	84 83       	std	Z+4, r24	; 0x04
    fb64:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fb68:	ed b7       	in	r30, 0x3d	; 61
    fb6a:	fe b7       	in	r31, 0x3e	; 62
    fb6c:	36 96       	adiw	r30, 0x06	; 6
    fb6e:	0f b6       	in	r0, 0x3f	; 63
    fb70:	f8 94       	cli
    fb72:	fe bf       	out	0x3e, r31	; 62
    fb74:	0f be       	out	0x3f, r0	; 63
    fb76:	ed bf       	out	0x3d, r30	; 61
    fb78:	82 e0       	ldi	r24, 0x02	; 2
    fb7a:	61 e0       	ldi	r22, 0x01	; 1
    fb7c:	a8 01       	movw	r20, r16
    fb7e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
				sprintf_P(lcdteks,PSTR("%s  %s "),strFIP,strProduct);    lcd_print(3,1,lcdteks);    //"P01  Pertamax 500000"
    fb82:	8d b7       	in	r24, 0x3d	; 61
    fb84:	9e b7       	in	r25, 0x3e	; 62
    fb86:	08 97       	sbiw	r24, 0x08	; 8
    fb88:	0f b6       	in	r0, 0x3f	; 63
    fb8a:	f8 94       	cli
    fb8c:	9e bf       	out	0x3e, r25	; 62
    fb8e:	0f be       	out	0x3f, r0	; 63
    fb90:	8d bf       	out	0x3d, r24	; 61
    fb92:	ed b7       	in	r30, 0x3d	; 61
    fb94:	fe b7       	in	r31, 0x3e	; 62
    fb96:	31 96       	adiw	r30, 0x01	; 1
    fb98:	ad b7       	in	r26, 0x3d	; 61
    fb9a:	be b7       	in	r27, 0x3e	; 62
    fb9c:	12 96       	adiw	r26, 0x02	; 2
    fb9e:	1c 93       	st	X, r17
    fba0:	0e 93       	st	-X, r16
    fba2:	11 97       	sbiw	r26, 0x01	; 1
    fba4:	8a e4       	ldi	r24, 0x4A	; 74
    fba6:	90 e2       	ldi	r25, 0x20	; 32
    fba8:	93 83       	std	Z+3, r25	; 0x03
    fbaa:	82 83       	std	Z+2, r24	; 0x02
    fbac:	8f e6       	ldi	r24, 0x6F	; 111
    fbae:	93 e0       	ldi	r25, 0x03	; 3
    fbb0:	95 83       	std	Z+5, r25	; 0x05
    fbb2:	84 83       	std	Z+4, r24	; 0x04
    fbb4:	8c e3       	ldi	r24, 0x3C	; 60
    fbb6:	98 e0       	ldi	r25, 0x08	; 8
    fbb8:	97 83       	std	Z+7, r25	; 0x07
    fbba:	86 83       	std	Z+6, r24	; 0x06
    fbbc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fbc0:	ed b7       	in	r30, 0x3d	; 61
    fbc2:	fe b7       	in	r31, 0x3e	; 62
    fbc4:	38 96       	adiw	r30, 0x08	; 8
    fbc6:	0f b6       	in	r0, 0x3f	; 63
    fbc8:	f8 94       	cli
    fbca:	fe bf       	out	0x3e, r31	; 62
    fbcc:	0f be       	out	0x3f, r0	; 63
    fbce:	ed bf       	out	0x3d, r30	; 61
    fbd0:	83 e0       	ldi	r24, 0x03	; 3
    fbd2:	61 e0       	ldi	r22, 0x01	; 1
    fbd4:	a8 01       	movw	r20, r16
    fbd6:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		        if (IsFullAuthorized==True){
    fbda:	80 91 64 03 	lds	r24, 0x0364
    fbde:	81 30       	cpi	r24, 0x01	; 1
    fbe0:	39 f4       	brne	.+14     	; 0xfbf0 <FMenuLocalAccount+0xcc4>
                    lcd_printf(3,15,PSTR(" Full"));
    fbe2:	83 e0       	ldi	r24, 0x03	; 3
    fbe4:	6f e0       	ldi	r22, 0x0F	; 15
    fbe6:	44 e4       	ldi	r20, 0x44	; 68
    fbe8:	50 e2       	ldi	r21, 0x20	; 32
    fbea:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    fbee:	23 c0       	rjmp	.+70     	; 0xfc36 <FMenuLocalAccount+0xd0a>
				}
				else {
				    sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);          lcd_print(3,15,lcdteks);   //"[*]Back [0]ESC [#]OK " 
    fbf0:	00 d0       	rcall	.+0      	; 0xfbf2 <FMenuLocalAccount+0xcc6>
    fbf2:	00 d0       	rcall	.+0      	; 0xfbf4 <FMenuLocalAccount+0xcc8>
    fbf4:	00 d0       	rcall	.+0      	; 0xfbf6 <FMenuLocalAccount+0xcca>
    fbf6:	ed b7       	in	r30, 0x3d	; 61
    fbf8:	fe b7       	in	r31, 0x3e	; 62
    fbfa:	31 96       	adiw	r30, 0x01	; 1
    fbfc:	ad b7       	in	r26, 0x3d	; 61
    fbfe:	be b7       	in	r27, 0x3e	; 62
    fc00:	12 96       	adiw	r26, 0x02	; 2
    fc02:	1c 93       	st	X, r17
    fc04:	0e 93       	st	-X, r16
    fc06:	11 97       	sbiw	r26, 0x01	; 1
    fc08:	80 e4       	ldi	r24, 0x40	; 64
    fc0a:	90 e2       	ldi	r25, 0x20	; 32
    fc0c:	93 83       	std	Z+3, r25	; 0x03
    fc0e:	82 83       	std	Z+2, r24	; 0x02
    fc10:	8d ef       	ldi	r24, 0xFD	; 253
    fc12:	9c e0       	ldi	r25, 0x0C	; 12
    fc14:	95 83       	std	Z+5, r25	; 0x05
    fc16:	84 83       	std	Z+4, r24	; 0x04
    fc18:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fc1c:	ed b7       	in	r30, 0x3d	; 61
    fc1e:	fe b7       	in	r31, 0x3e	; 62
    fc20:	36 96       	adiw	r30, 0x06	; 6
    fc22:	0f b6       	in	r0, 0x3f	; 63
    fc24:	f8 94       	cli
    fc26:	fe bf       	out	0x3e, r31	; 62
    fc28:	0f be       	out	0x3f, r0	; 63
    fc2a:	ed bf       	out	0x3d, r30	; 61
    fc2c:	83 e0       	ldi	r24, 0x03	; 3
    fc2e:	6f e0       	ldi	r22, 0x0F	; 15
    fc30:	a8 01       	movw	r20, r16
    fc32:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
					}
	            lcd_printf(4,1,PSTR("[*]Back [0]ESC [#]OK"));    
    fc36:	84 e0       	ldi	r24, 0x04	; 4
    fc38:	61 e0       	ldi	r22, 0x01	; 1
    fc3a:	4b e2       	ldi	r20, 0x2B	; 43
    fc3c:	50 e2       	ldi	r21, 0x20	; 32
    fc3e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
                stLocalAccount=laDataConfirmInput;
    fc42:	84 e1       	ldi	r24, 0x14	; 20
    fc44:	80 93 5b 01 	sts	0x015B, r24
    fc48:	ec c1       	rjmp	.+984    	; 0x10022 <FMenuLocalAccount+0x10f6>
                //while(1){};   
		        break;
           case laDataConfirmInput:
                KeyPressed=_key_scan(1);
    fc4a:	81 e0       	ldi	r24, 0x01	; 1
    fc4c:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
                if (KeyPressed==_KEY_CANCEL)stLocalAccount=laOdometer;		        
    fc50:	87 3e       	cpi	r24, 0xE7	; 231
    fc52:	11 f4       	brne	.+4      	; 0xfc58 <FMenuLocalAccount+0xd2c>
    fc54:	81 e1       	ldi	r24, 0x11	; 17
    fc56:	f6 cf       	rjmp	.-20     	; 0xfc44 <FMenuLocalAccount+0xd18>
				else
				if (KeyPressed==_KEY_ENTER)stLocalAccount=laProceedTransaction;
    fc58:	87 3b       	cpi	r24, 0xB7	; 183
    fc5a:	11 f4       	brne	.+4      	; 0xfc60 <FMenuLocalAccount+0xd34>
    fc5c:	85 e1       	ldi	r24, 0x15	; 21
    fc5e:	f2 cf       	rjmp	.-28     	; 0xfc44 <FMenuLocalAccount+0xd18>
				else
				if (KeyPressed==_KEY_0){
    fc60:	87 3d       	cpi	r24, 0xD7	; 215
    fc62:	09 f0       	breq	.+2      	; 0xfc66 <FMenuLocalAccount+0xd3a>
    fc64:	de c1       	rjmp	.+956    	; 0x10022 <FMenuLocalAccount+0x10f6>
				   //ShowCancel
				   TimLocAcc=0;
    fc66:	10 92 98 02 	sts	0x0298, r1
                   lcd_clear();
    fc6a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
				   lcd_printf(1,1,PSTR("Cancel Transaction  "));    //"Cancel Transaction"
    fc6e:	81 e0       	ldi	r24, 0x01	; 1
    fc70:	61 e0       	ldi	r22, 0x01	; 1
    fc72:	46 e1       	ldi	r20, 0x16	; 22
    fc74:	50 e2       	ldi	r21, 0x20	; 32
    fc76:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
    fc7a:	c4 c1       	rjmp	.+904    	; 0x10004 <FMenuLocalAccount+0x10d8>
				   stLocalAccount=laDelayExit;
				   }
		        break;
           case laProceedTransaction:
		        sendMessage58();
    fc7c:	0e 94 25 2a 	call	0x544a	; 0x544a <sendMessage58>
                RemZeroLead(strCardID);
    fc80:	87 e6       	ldi	r24, 0x67	; 103
    fc82:	9c e0       	ldi	r25, 0x0C	; 12
    fc84:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
                RemZeroLead(strBalanceValue);
    fc88:	9d ef       	ldi	r25, 0xFD	; 253
    fc8a:	e9 2e       	mov	r14, r25
    fc8c:	9c e0       	ldi	r25, 0x0C	; 12
    fc8e:	f9 2e       	mov	r15, r25
    fc90:	c7 01       	movw	r24, r14
    fc92:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
				sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct);       lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
    fc96:	8d b7       	in	r24, 0x3d	; 61
    fc98:	9e b7       	in	r25, 0x3e	; 62
    fc9a:	08 97       	sbiw	r24, 0x08	; 8
    fc9c:	0f b6       	in	r0, 0x3f	; 63
    fc9e:	f8 94       	cli
    fca0:	9e bf       	out	0x3e, r25	; 62
    fca2:	0f be       	out	0x3f, r0	; 63
    fca4:	8d bf       	out	0x3d, r24	; 61
    fca6:	ed b7       	in	r30, 0x3d	; 61
    fca8:	fe b7       	in	r31, 0x3e	; 62
    fcaa:	31 96       	adiw	r30, 0x01	; 1
    fcac:	8e 01       	movw	r16, r28
    fcae:	04 5f       	subi	r16, 0xF4	; 244
    fcb0:	1f 4f       	sbci	r17, 0xFF	; 255
    fcb2:	ad b7       	in	r26, 0x3d	; 61
    fcb4:	be b7       	in	r27, 0x3e	; 62
    fcb6:	12 96       	adiw	r26, 0x02	; 2
    fcb8:	1c 93       	st	X, r17
    fcba:	0e 93       	st	-X, r16
    fcbc:	11 97       	sbiw	r26, 0x01	; 1
    fcbe:	8e e0       	ldi	r24, 0x0E	; 14
    fcc0:	90 e2       	ldi	r25, 0x20	; 32
    fcc2:	93 83       	std	Z+3, r25	; 0x03
    fcc4:	82 83       	std	Z+2, r24	; 0x02
    fcc6:	8f e6       	ldi	r24, 0x6F	; 111
    fcc8:	93 e0       	ldi	r25, 0x03	; 3
    fcca:	95 83       	std	Z+5, r25	; 0x05
    fccc:	84 83       	std	Z+4, r24	; 0x04
    fcce:	8c e3       	ldi	r24, 0x3C	; 60
    fcd0:	98 e0       	ldi	r25, 0x08	; 8
    fcd2:	97 83       	std	Z+7, r25	; 0x07
    fcd4:	86 83       	std	Z+6, r24	; 0x06
    fcd6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fcda:	ed b7       	in	r30, 0x3d	; 61
    fcdc:	fe b7       	in	r31, 0x3e	; 62
    fcde:	38 96       	adiw	r30, 0x08	; 8
    fce0:	0f b6       	in	r0, 0x3f	; 63
    fce2:	f8 94       	cli
    fce4:	fe bf       	out	0x3e, r31	; 62
    fce6:	0f be       	out	0x3f, r0	; 63
    fce8:	ed bf       	out	0x3d, r30	; 61
    fcea:	81 e0       	ldi	r24, 0x01	; 1
    fcec:	61 e0       	ldi	r22, 0x01	; 1
    fcee:	a8 01       	movw	r20, r16
    fcf0:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);              lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
    fcf4:	00 d0       	rcall	.+0      	; 0xfcf6 <FMenuLocalAccount+0xdca>
    fcf6:	00 d0       	rcall	.+0      	; 0xfcf8 <FMenuLocalAccount+0xdcc>
    fcf8:	00 d0       	rcall	.+0      	; 0xfcfa <FMenuLocalAccount+0xdce>
    fcfa:	ed b7       	in	r30, 0x3d	; 61
    fcfc:	fe b7       	in	r31, 0x3e	; 62
    fcfe:	31 96       	adiw	r30, 0x01	; 1
    fd00:	ad b7       	in	r26, 0x3d	; 61
    fd02:	be b7       	in	r27, 0x3e	; 62
    fd04:	12 96       	adiw	r26, 0x02	; 2
    fd06:	1c 93       	st	X, r17
    fd08:	0e 93       	st	-X, r16
    fd0a:	11 97       	sbiw	r26, 0x01	; 1
    fd0c:	8b e0       	ldi	r24, 0x0B	; 11
    fd0e:	90 e2       	ldi	r25, 0x20	; 32
    fd10:	93 83       	std	Z+3, r25	; 0x03
    fd12:	82 83       	std	Z+2, r24	; 0x02
    fd14:	f5 82       	std	Z+5, r15	; 0x05
    fd16:	e4 82       	std	Z+4, r14	; 0x04
    fd18:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fd1c:	ed b7       	in	r30, 0x3d	; 61
    fd1e:	fe b7       	in	r31, 0x3e	; 62
    fd20:	36 96       	adiw	r30, 0x06	; 6
    fd22:	0f b6       	in	r0, 0x3f	; 63
    fd24:	f8 94       	cli
    fd26:	fe bf       	out	0x3e, r31	; 62
    fd28:	0f be       	out	0x3f, r0	; 63
    fd2a:	ed bf       	out	0x3d, r30	; 61
    fd2c:	81 e0       	ldi	r24, 0x01	; 1
    fd2e:	6f e0       	ldi	r22, 0x0F	; 15
    fd30:	a8 01       	movw	r20, r16
    fd32:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
                lcd_printf(3,1,PSTR("Mohon Tunggu        "));                                         //"Mohon Tunggu ...    "
    fd36:	83 e0       	ldi	r24, 0x03	; 3
    fd38:	61 e0       	ldi	r22, 0x01	; 1
    fd3a:	46 ef       	ldi	r20, 0xF6	; 246
    fd3c:	5f e1       	ldi	r21, 0x1F	; 31
    fd3e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		        lcd_printf(4,1,PSTR("                    "));                                  //"                    "
    fd42:	84 e0       	ldi	r24, 0x04	; 4
    fd44:	61 e0       	ldi	r22, 0x01	; 1
    fd46:	41 ee       	ldi	r20, 0xE1	; 225
    fd48:	5f e1       	ldi	r21, 0x1F	; 31
    fd4a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				IsMessage00=False;
    fd4e:	10 92 7c 02 	sts	0x027C, r1
				TimLocAcc=0;
    fd52:	10 92 98 02 	sts	0x0298, r1
				iLoop=0;iPos=0;iWait=0;
    fd56:	10 92 63 03 	sts	0x0363, r1
    fd5a:	10 92 62 03 	sts	0x0362, r1
    fd5e:	10 92 74 03 	sts	0x0374, r1
    fd62:	10 92 73 03 	sts	0x0373, r1
				stLocalAccount=laWaitMessage00;
    fd66:	87 e1       	ldi	r24, 0x17	; 23
    fd68:	6d cf       	rjmp	.-294    	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laWaitMessage00:
                iLoop++;
    fd6a:	80 91 62 03 	lds	r24, 0x0362
    fd6e:	90 91 63 03 	lds	r25, 0x0363
    fd72:	01 96       	adiw	r24, 0x01	; 1
    fd74:	90 93 63 03 	sts	0x0363, r25
    fd78:	80 93 62 03 	sts	0x0362, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
    fd7c:	68 e9       	ldi	r22, 0x98	; 152
    fd7e:	7a e3       	ldi	r23, 0x3A	; 58
    fd80:	0e 94 a5 a5 	call	0x14b4a	; 0x14b4a <__udivmodhi4>
    fd84:	00 97       	sbiw	r24, 0x00	; 0
    fd86:	e9 f4       	brne	.+58     	; 0xfdc2 <FMenuLocalAccount+0xe96>
				   if (iPos<5){
    fd88:	60 91 74 03 	lds	r22, 0x0374
    fd8c:	65 30       	cpi	r22, 0x05	; 5
    fd8e:	60 f4       	brcc	.+24     	; 0xfda8 <FMenuLocalAccount+0xe7c>
				       iPos++;
    fd90:	86 2f       	mov	r24, r22
    fd92:	8f 5f       	subi	r24, 0xFF	; 255
    fd94:	80 93 74 03 	sts	0x0374, r24
					   lcd_xy(3,(14+iPos));_lcd('.');
    fd98:	61 5f       	subi	r22, 0xF1	; 241
    fd9a:	83 e0       	ldi	r24, 0x03	; 3
    fd9c:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
    fda0:	8e e2       	ldi	r24, 0x2E	; 46
    fda2:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
    fda6:	0d c0       	rjmp	.+26     	; 0xfdc2 <FMenuLocalAccount+0xe96>
					   }
				   else{
				       iPos=0;
    fda8:	10 92 74 03 	sts	0x0374, r1
					   lcd_printf(3,(14+iPos),PSTR("       "));
    fdac:	83 e0       	ldi	r24, 0x03	; 3
    fdae:	6e e0       	ldi	r22, 0x0E	; 14
    fdb0:	49 ed       	ldi	r20, 0xD9	; 217
    fdb2:	5f e1       	ldi	r21, 0x1F	; 31
    fdb4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					   iWait++;
    fdb8:	80 91 73 03 	lds	r24, 0x0373
    fdbc:	8f 5f       	subi	r24, 0xFF	; 255
    fdbe:	80 93 73 03 	sts	0x0373, r24
					   }
				}
				if (iWait>5){
    fdc2:	80 91 73 03 	lds	r24, 0x0373
    fdc6:	86 30       	cpi	r24, 0x06	; 6
    fdc8:	48 f0       	brcs	.+18     	; 0xfddc <FMenuLocalAccount+0xeb0>
				    stLocalAccount=laConTimout;
    fdca:	84 e0       	ldi	r24, 0x04	; 4
    fdcc:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
    fdd0:	10 92 98 02 	sts	0x0298, r1
					system_beep(2);
    fdd4:	82 e0       	ldi	r24, 0x02	; 2
    fdd6:	90 e0       	ldi	r25, 0x00	; 0
    fdd8:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
				    }
				if (IsMessage00==True){
    fddc:	80 91 7c 02 	lds	r24, 0x027C
    fde0:	81 30       	cpi	r24, 0x01	; 1
    fde2:	09 f0       	breq	.+2      	; 0xfde6 <FMenuLocalAccount+0xeba>
    fde4:	1e c1       	rjmp	.+572    	; 0x10022 <FMenuLocalAccount+0x10f6>
                    IsMessage00=False;
    fde6:	10 92 7c 02 	sts	0x027C, r1
				    stLocalAccount=laProcMessage00;
    fdea:	88 e1       	ldi	r24, 0x18	; 24
    fdec:	2b cf       	rjmp	.-426    	; 0xfc44 <FMenuLocalAccount+0xd18>
					}
		        break;
           case laProcMessage00:
		        LocAccStatus=procMessage00();
    fdee:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <procMessage00>
    fdf2:	80 93 75 03 	sts	0x0375, r24
                lcd_clear();
    fdf6:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		        switch(LocAccStatus){
    fdfa:	00 91 75 03 	lds	r16, 0x0375
    fdfe:	01 30       	cpi	r16, 0x01	; 1
    fe00:	51 f0       	breq	.+20     	; 0xfe16 <FMenuLocalAccount+0xeea>
    fe02:	01 30       	cpi	r16, 0x01	; 1
    fe04:	18 f0       	brcs	.+6      	; 0xfe0c <FMenuLocalAccount+0xee0>
    fe06:	03 30       	cpi	r16, 0x03	; 3
    fe08:	49 f5       	brne	.+82     	; 0xfe5c <FMenuLocalAccount+0xf30>
    fe0a:	1b c0       	rjmp	.+54     	; 0xfe42 <FMenuLocalAccount+0xf16>
				case MSG00_NACK:
                     lcd_printf(2,1,PSTR("Authorisasi Gagal   "));
    fe0c:	82 e0       	ldi	r24, 0x02	; 2
    fe0e:	61 e0       	ldi	r22, 0x01	; 1
    fe10:	44 ec       	ldi	r20, 0xC4	; 196
    fe12:	5f e1       	ldi	r21, 0x1F	; 31
    fe14:	1a c0       	rjmp	.+52     	; 0xfe4a <FMenuLocalAccount+0xf1e>
					 system_beep(2); 
					 stLocalAccount=laDelayExit;
				     break;
                case MSG00_ACK:
				     lcd_printf(2,1,PSTR("Authorisasi Berhasil"));
    fe16:	82 e0       	ldi	r24, 0x02	; 2
    fe18:	61 e0       	ldi	r22, 0x01	; 1
    fe1a:	4f ea       	ldi	r20, 0xAF	; 175
    fe1c:	5f e1       	ldi	r21, 0x1F	; 31
    fe1e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				     LocalAccountFIP[nLocalAccount]=FIP_Used;
    fe22:	80 91 6d 02 	lds	r24, 0x026D
    fe26:	e8 2f       	mov	r30, r24
    fe28:	f0 e0       	ldi	r31, 0x00	; 0
    fe2a:	ec 5c       	subi	r30, 0xCC	; 204
    fe2c:	fb 4f       	sbci	r31, 0xFB	; 251
    fe2e:	90 91 66 03 	lds	r25, 0x0366
    fe32:	90 83       	st	Z, r25
					 nLocalAccount++;
    fe34:	8f 5f       	subi	r24, 0xFF	; 255
    fe36:	80 93 6d 02 	sts	0x026D, r24
					 IsViewFillingFIP=True;
    fe3a:	00 93 74 02 	sts	0x0274, r16
					 stLocalAccount=laViewStatus;
    fe3e:	86 e1       	ldi	r24, 0x16	; 22
    fe40:	0b c0       	rjmp	.+22     	; 0xfe58 <FMenuLocalAccount+0xf2c>
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
    fe42:	82 e0       	ldi	r24, 0x02	; 2
    fe44:	61 e0       	ldi	r22, 0x01	; 1
    fe46:	4c e9       	ldi	r20, 0x9C	; 156
    fe48:	5f e1       	ldi	r21, 0x1F	; 31
    fe4a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
					 system_beep(2);
    fe4e:	82 e0       	ldi	r24, 0x02	; 2
    fe50:	90 e0       	ldi	r25, 0x00	; 0
    fe52:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
					 stLocalAccount=laDelayExit;
    fe56:	8e e1       	ldi	r24, 0x1E	; 30
    fe58:	80 93 5b 01 	sts	0x015B, r24
				     break;
				}
				TimLocAcc=0;
    fe5c:	10 92 98 02 	sts	0x0298, r1
				ClearMem(strOdometer);
    fe60:	81 ea       	ldi	r24, 0xA1	; 161
    fe62:	94 e0       	ldi	r25, 0x04	; 4
    fe64:	0e 94 49 a0 	call	0x14092	; 0x14092 <ClearMem>
	            ClearMem(strLicPlate);
    fe68:	88 ed       	ldi	r24, 0xD8	; 216
    fe6a:	99 e0       	ldi	r25, 0x09	; 9
    fe6c:	0e 94 49 a0 	call	0x14092	; 0x14092 <ClearMem>
    fe70:	d8 c0       	rjmp	.+432    	; 0x10022 <FMenuLocalAccount+0x10f6>
		        break;
           case laViewStatus:
                if (TimLocAcc>20)stLocalAccount=laExitLocAcc;//laDisplayTransaction;
    fe72:	80 91 98 02 	lds	r24, 0x0298
    fe76:	85 31       	cpi	r24, 0x15	; 21
    fe78:	08 f4       	brcc	.+2      	; 0xfe7c <FMenuLocalAccount+0xf50>
    fe7a:	d3 c0       	rjmp	.+422    	; 0x10022 <FMenuLocalAccount+0x10f6>
    fe7c:	c9 c0       	rjmp	.+402    	; 0x10010 <FMenuLocalAccount+0x10e4>
		        break; 
           case laDisplayTransaction:
		        lcd_clear();
    fe7e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
                sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct); lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
    fe82:	8d b7       	in	r24, 0x3d	; 61
    fe84:	9e b7       	in	r25, 0x3e	; 62
    fe86:	08 97       	sbiw	r24, 0x08	; 8
    fe88:	0f b6       	in	r0, 0x3f	; 63
    fe8a:	f8 94       	cli
    fe8c:	9e bf       	out	0x3e, r25	; 62
    fe8e:	0f be       	out	0x3f, r0	; 63
    fe90:	8d bf       	out	0x3d, r24	; 61
    fe92:	ed b7       	in	r30, 0x3d	; 61
    fe94:	fe b7       	in	r31, 0x3e	; 62
    fe96:	31 96       	adiw	r30, 0x01	; 1
    fe98:	8e 01       	movw	r16, r28
    fe9a:	04 5f       	subi	r16, 0xF4	; 244
    fe9c:	1f 4f       	sbci	r17, 0xFF	; 255
    fe9e:	ad b7       	in	r26, 0x3d	; 61
    fea0:	be b7       	in	r27, 0x3e	; 62
    fea2:	12 96       	adiw	r26, 0x02	; 2
    fea4:	1c 93       	st	X, r17
    fea6:	0e 93       	st	-X, r16
    fea8:	11 97       	sbiw	r26, 0x01	; 1
    feaa:	84 e9       	ldi	r24, 0x94	; 148
    feac:	9f e1       	ldi	r25, 0x1F	; 31
    feae:	93 83       	std	Z+3, r25	; 0x03
    feb0:	82 83       	std	Z+2, r24	; 0x02
    feb2:	8f e6       	ldi	r24, 0x6F	; 111
    feb4:	93 e0       	ldi	r25, 0x03	; 3
    feb6:	95 83       	std	Z+5, r25	; 0x05
    feb8:	84 83       	std	Z+4, r24	; 0x04
    feba:	8c e3       	ldi	r24, 0x3C	; 60
    febc:	98 e0       	ldi	r25, 0x08	; 8
    febe:	97 83       	std	Z+7, r25	; 0x07
    fec0:	86 83       	std	Z+6, r24	; 0x06
    fec2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    fec6:	ed b7       	in	r30, 0x3d	; 61
    fec8:	fe b7       	in	r31, 0x3e	; 62
    feca:	38 96       	adiw	r30, 0x08	; 8
    fecc:	0f b6       	in	r0, 0x3f	; 63
    fece:	f8 94       	cli
    fed0:	fe bf       	out	0x3e, r31	; 62
    fed2:	0f be       	out	0x3f, r0	; 63
    fed4:	ed bf       	out	0x3d, r30	; 61
    fed6:	81 e0       	ldi	r24, 0x01	; 1
    fed8:	61 e0       	ldi	r22, 0x01	; 1
    feda:	a8 01       	movw	r20, r16
    fedc:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);        lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
    fee0:	00 d0       	rcall	.+0      	; 0xfee2 <FMenuLocalAccount+0xfb6>
    fee2:	00 d0       	rcall	.+0      	; 0xfee4 <FMenuLocalAccount+0xfb8>
    fee4:	00 d0       	rcall	.+0      	; 0xfee6 <FMenuLocalAccount+0xfba>
    fee6:	ed b7       	in	r30, 0x3d	; 61
    fee8:	fe b7       	in	r31, 0x3e	; 62
    feea:	31 96       	adiw	r30, 0x01	; 1
    feec:	ad b7       	in	r26, 0x3d	; 61
    feee:	be b7       	in	r27, 0x3e	; 62
    fef0:	12 96       	adiw	r26, 0x02	; 2
    fef2:	1c 93       	st	X, r17
    fef4:	0e 93       	st	-X, r16
    fef6:	11 97       	sbiw	r26, 0x01	; 1
    fef8:	81 e9       	ldi	r24, 0x91	; 145
    fefa:	9f e1       	ldi	r25, 0x1F	; 31
    fefc:	93 83       	std	Z+3, r25	; 0x03
    fefe:	82 83       	std	Z+2, r24	; 0x02
    ff00:	8d ef       	ldi	r24, 0xFD	; 253
    ff02:	9c e0       	ldi	r25, 0x0C	; 12
    ff04:	95 83       	std	Z+5, r25	; 0x05
    ff06:	84 83       	std	Z+4, r24	; 0x04
    ff08:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    ff0c:	ed b7       	in	r30, 0x3d	; 61
    ff0e:	fe b7       	in	r31, 0x3e	; 62
    ff10:	36 96       	adiw	r30, 0x06	; 6
    ff12:	0f b6       	in	r0, 0x3f	; 63
    ff14:	f8 94       	cli
    ff16:	fe bf       	out	0x3e, r31	; 62
    ff18:	0f be       	out	0x3f, r0	; 63
    ff1a:	ed bf       	out	0x3d, r30	; 61
    ff1c:	81 e0       	ldi	r24, 0x01	; 1
    ff1e:	6f e0       	ldi	r22, 0x0F	; 15
    ff20:	a8 01       	movw	r20, r16
    ff22:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
                RemSpaceLead(strCardID);
    ff26:	87 e6       	ldi	r24, 0x67	; 103
    ff28:	e8 2e       	mov	r14, r24
    ff2a:	8c e0       	ldi	r24, 0x0C	; 12
    ff2c:	f8 2e       	mov	r15, r24
    ff2e:	c7 01       	movw	r24, r14
    ff30:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <RemSpaceLead>
				sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);          lcd_print(2,1,lcdteks);
    ff34:	00 d0       	rcall	.+0      	; 0xff36 <FMenuLocalAccount+0x100a>
    ff36:	00 d0       	rcall	.+0      	; 0xff38 <FMenuLocalAccount+0x100c>
    ff38:	00 d0       	rcall	.+0      	; 0xff3a <FMenuLocalAccount+0x100e>
    ff3a:	ed b7       	in	r30, 0x3d	; 61
    ff3c:	fe b7       	in	r31, 0x3e	; 62
    ff3e:	31 96       	adiw	r30, 0x01	; 1
    ff40:	ad b7       	in	r26, 0x3d	; 61
    ff42:	be b7       	in	r27, 0x3e	; 62
    ff44:	12 96       	adiw	r26, 0x02	; 2
    ff46:	1c 93       	st	X, r17
    ff48:	0e 93       	st	-X, r16
    ff4a:	11 97       	sbiw	r26, 0x01	; 1
    ff4c:	8a e8       	ldi	r24, 0x8A	; 138
    ff4e:	9f e1       	ldi	r25, 0x1F	; 31
    ff50:	93 83       	std	Z+3, r25	; 0x03
    ff52:	82 83       	std	Z+2, r24	; 0x02
    ff54:	f5 82       	std	Z+5, r15	; 0x05
    ff56:	e4 82       	std	Z+4, r14	; 0x04
    ff58:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
    ff5c:	ed b7       	in	r30, 0x3d	; 61
    ff5e:	fe b7       	in	r31, 0x3e	; 62
    ff60:	36 96       	adiw	r30, 0x06	; 6
    ff62:	0f b6       	in	r0, 0x3f	; 63
    ff64:	f8 94       	cli
    ff66:	fe bf       	out	0x3e, r31	; 62
    ff68:	0f be       	out	0x3f, r0	; 63
    ff6a:	ed bf       	out	0x3d, r30	; 61
    ff6c:	82 e0       	ldi	r24, 0x02	; 2
    ff6e:	61 e0       	ldi	r22, 0x01	; 1
    ff70:	a8 01       	movw	r20, r16
    ff72:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
				TimLocAcc=0;
    ff76:	10 92 98 02 	sts	0x0298, r1
		        IsCompleteFilling=False;
    ff7a:	10 92 87 02 	sts	0x0287, r1
				stLocalAccount=laWaitFilling;
    ff7e:	8d e1       	ldi	r24, 0x1D	; 29
    ff80:	61 ce       	rjmp	.-830    	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break; 
           case laWaitFilling:
				if ((IsCompleteFilling==True)||(TimLocAcc>FILLING_TIMOUT)){
    ff82:	80 91 87 02 	lds	r24, 0x0287
    ff86:	81 30       	cpi	r24, 0x01	; 1
    ff88:	29 f0       	breq	.+10     	; 0xff94 <FMenuLocalAccount+0x1068>
    ff8a:	80 91 98 02 	lds	r24, 0x0298
    ff8e:	8b 30       	cpi	r24, 0x0B	; 11
    ff90:	08 f4       	brcc	.+2      	; 0xff94 <FMenuLocalAccount+0x1068>
    ff92:	47 c0       	rjmp	.+142    	; 0x10022 <FMenuLocalAccount+0x10f6>
				    IsCompleteFilling=False;
    ff94:	10 92 87 02 	sts	0x0287, r1
				    stLocalAccount=laSuccessTransaction;
    ff98:	89 e1       	ldi	r24, 0x19	; 25
    ff9a:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
    ff9e:	10 92 98 02 	sts	0x0298, r1
    ffa2:	3f c0       	rjmp	.+126    	; 0x10022 <FMenuLocalAccount+0x10f6>
					}
		        break;
           case laSuccessTransaction:
				lcd_clear();lcd_printf(2,1,PSTR("Transaksi Selesai"));
    ffa4:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
    ffa8:	82 e0       	ldi	r24, 0x02	; 2
    ffaa:	61 e0       	ldi	r22, 0x01	; 1
    ffac:	48 e7       	ldi	r20, 0x78	; 120
    ffae:	5f e1       	ldi	r21, 0x1F	; 31
    ffb0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
				//Show Status FIP
				sprintf_P(lcdteks,PSTR("Fueling @FIP:#%d"),FIP_Used);
    ffb4:	00 d0       	rcall	.+0      	; 0xffb6 <FMenuLocalAccount+0x108a>
    ffb6:	00 d0       	rcall	.+0      	; 0xffb8 <FMenuLocalAccount+0x108c>
    ffb8:	00 d0       	rcall	.+0      	; 0xffba <FMenuLocalAccount+0x108e>
    ffba:	ed b7       	in	r30, 0x3d	; 61
    ffbc:	fe b7       	in	r31, 0x3e	; 62
    ffbe:	31 96       	adiw	r30, 0x01	; 1
    ffc0:	8e 01       	movw	r16, r28
    ffc2:	04 5f       	subi	r16, 0xF4	; 244
    ffc4:	1f 4f       	sbci	r17, 0xFF	; 255
    ffc6:	ad b7       	in	r26, 0x3d	; 61
    ffc8:	be b7       	in	r27, 0x3e	; 62
    ffca:	12 96       	adiw	r26, 0x02	; 2
    ffcc:	1c 93       	st	X, r17
    ffce:	0e 93       	st	-X, r16
    ffd0:	11 97       	sbiw	r26, 0x01	; 1
    ffd2:	87 e6       	ldi	r24, 0x67	; 103
    ffd4:	9f e1       	ldi	r25, 0x1F	; 31
    ffd6:	93 83       	std	Z+3, r25	; 0x03
    ffd8:	82 83       	std	Z+2, r24	; 0x02
    ffda:	80 91 66 03 	lds	r24, 0x0366
    ffde:	84 83       	std	Z+4, r24	; 0x04
    ffe0:	15 82       	std	Z+5, r1	; 0x05
    ffe2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				lcd_print(3,1,lcdteks);
    ffe6:	ed b7       	in	r30, 0x3d	; 61
    ffe8:	fe b7       	in	r31, 0x3e	; 62
    ffea:	36 96       	adiw	r30, 0x06	; 6
    ffec:	0f b6       	in	r0, 0x3f	; 63
    ffee:	f8 94       	cli
    fff0:	fe bf       	out	0x3e, r31	; 62
    fff2:	0f be       	out	0x3f, r0	; 63
    fff4:	ed bf       	out	0x3d, r30	; 61
    fff6:	83 e0       	ldi	r24, 0x03	; 3
    fff8:	61 e0       	ldi	r22, 0x01	; 1
    fffa:	a8 01       	movw	r20, r16
    fffc:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>

				TimLocAcc=0;
				stLocalAccount=laDelayExit;
		        break;
           case laFailedTransaction:
		        TimLocAcc=0;
   10000:	10 92 98 02 	sts	0x0298, r1
		        //Show Failed Report
				stLocalAccount=laDelayExit;
   10004:	8e e1       	ldi	r24, 0x1E	; 30
   10006:	1e ce       	rjmp	.-964    	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laDelayExit:
		        if (TimLocAcc>15)stLocalAccount=laExitLocAcc;
   10008:	80 91 98 02 	lds	r24, 0x0298
   1000c:	80 31       	cpi	r24, 0x10	; 16
   1000e:	48 f0       	brcs	.+18     	; 0x10022 <FMenuLocalAccount+0x10f6>
   10010:	8f e1       	ldi	r24, 0x1F	; 31
   10012:	18 ce       	rjmp	.-976    	; 0xfc44 <FMenuLocalAccount+0xd18>
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
				stLocalAccount=laInit;
   10014:	81 e0       	ldi	r24, 0x01	; 1
   10016:	80 93 5b 01 	sts	0x015B, r24
				lcd_clear();
   1001a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		        break;
           case laDelayExit:
		        if (TimLocAcc>15)stLocalAccount=laExitLocAcc;
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
   1001e:	81 e0       	ldi	r24, 0x01	; 1
				stLocalAccount=laInit;
				lcd_clear();
		        break;
   10020:	01 c0       	rjmp	.+2      	; 0x10024 <FMenuLocalAccount+0x10f8>
       char KeyPressed=0,KeyChar=0;
       char lcdteks[20],uiResult,FIPResult;
       char ProductName[11],strName[21];//,strPumpL[3],strPumpR[3];
       char Result;

	   Result=MENU_NONE;
   10022:	80 e0       	ldi	r24, 0x00	; 0
				stLocalAccount=laInit;
				lcd_clear();
		        break;
	       }//EndSwitch
return Result;
}
   10024:	e4 96       	adiw	r28, 0x34	; 52
   10026:	0f b6       	in	r0, 0x3f	; 63
   10028:	f8 94       	cli
   1002a:	de bf       	out	0x3e, r29	; 62
   1002c:	0f be       	out	0x3f, r0	; 63
   1002e:	cd bf       	out	0x3d, r28	; 61
   10030:	cf 91       	pop	r28
   10032:	df 91       	pop	r29
   10034:	1f 91       	pop	r17
   10036:	0f 91       	pop	r16
   10038:	ff 90       	pop	r15
   1003a:	ef 90       	pop	r14
   1003c:	df 90       	pop	r13
   1003e:	cf 90       	pop	r12
   10040:	bf 90       	pop	r11
   10042:	af 90       	pop	r10
   10044:	9f 90       	pop	r9
   10046:	8f 90       	pop	r8
   10048:	7f 90       	pop	r7
   1004a:	08 95       	ret

0001004c <UpdateStandaloneStatus>:
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
         lcd_print(4,1,lcdteks);
     	 }
}

void UpdateStandaloneStatus(char xPumpID,char xPumpStatus){//xPumpID: (1-16)&0x0F
   1004c:	0f 93       	push	r16
   1004e:	1f 93       	push	r17
   10050:	df 93       	push	r29
   10052:	cf 93       	push	r28
   10054:	0f 92       	push	r0
   10056:	cd b7       	in	r28, 0x3d	; 61
   10058:	de b7       	in	r29, 0x3e	; 62
   1005a:	18 2f       	mov	r17, r24
char strSend[20],iPumpID; //[xxxxxxxxxPx]
char iAddr;

	 if (xPumpID<16){
   1005c:	80 31       	cpi	r24, 0x10	; 16
   1005e:	08 f0       	brcs	.+2      	; 0x10062 <UpdateStandaloneStatus+0x16>
   10060:	57 c0       	rjmp	.+174    	; 0x10110 <UpdateStandaloneStatus+0xc4>
	     DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   10062:	87 e3       	ldi	r24, 0x37	; 55
   10064:	91 e0       	ldi	r25, 0x01	; 1
   10066:	69 83       	std	Y+1, r22	; 0x01
   10068:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   1006c:	80 93 3c 02 	sts	0x023C, r24
	     switch(DispenserBrand){
   10070:	81 50       	subi	r24, 0x01	; 1
   10072:	69 81       	ldd	r22, Y+1	; 0x01
   10074:	82 30       	cpi	r24, 0x02	; 2
   10076:	08 f4       	brcc	.+2      	; 0x1007a <UpdateStandaloneStatus+0x2e>
   10078:	01 2f       	mov	r16, r17
	     case ST_WAYNE_DART:
              iPumpID=xPumpID;
	          break;				   
	     }

		 iAddr=GetFIPAddr(iPumpID);
   1007a:	80 2f       	mov	r24, r16
   1007c:	69 83       	std	Y+1, r22	; 0x01
   1007e:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
		 if (iAddr>0){
   10082:	69 81       	ldd	r22, Y+1	; 0x01
   10084:	88 23       	and	r24, r24
   10086:	09 f4       	brne	.+2      	; 0x1008a <UpdateStandaloneStatus+0x3e>
   10088:	43 c0       	rjmp	.+134    	; 0x10110 <UpdateStandaloneStatus+0xc4>
		     iAddr=iAddr-1;
   1008a:	81 50       	subi	r24, 0x01	; 1
			 if (strPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY)){//iFdiiiiiiiiiiiii
   1008c:	90 e0       	ldi	r25, 0x00	; 0
   1008e:	fc 01       	movw	r30, r24
   10090:	ee 5f       	subi	r30, 0xFE	; 254
   10092:	fe 4f       	sbci	r31, 0xFE	; 254
   10094:	20 81       	ld	r18, Z
   10096:	20 35       	cpi	r18, 0x50	; 80
   10098:	d1 f0       	breq	.+52     	; 0x100ce <UpdateStandaloneStatus+0x82>
		         if (xPumpStatus!=PS_PRINT_READY)
   1009a:	60 31       	cpi	r22, 0x10	; 16
   1009c:	31 f0       	breq	.+12     	; 0x100aa <UpdateStandaloneStatus+0x5e>
				     CurrentPumpStatus[iAddr]=xPumpStatus;
   1009e:	fc 01       	movw	r30, r24
   100a0:	e3 5c       	subi	r30, 0xC3	; 195
   100a2:	fd 4f       	sbci	r31, 0xFD	; 253
   100a4:	60 83       	st	Z, r22
   100a6:	6e 31       	cpi	r22, 0x1E	; 30
   100a8:	30 f4       	brcc	.+12     	; 0x100b6 <UpdateStandaloneStatus+0x6a>
   100aa:	e6 2f       	mov	r30, r22
   100ac:	f0 e0       	ldi	r31, 0x00	; 0
   100ae:	e4 5a       	subi	r30, 0xA4	; 164
   100b0:	fe 4f       	sbci	r31, 0xFE	; 254
   100b2:	20 81       	ld	r18, Z
   100b4:	01 c0       	rjmp	.+2      	; 0x100b8 <UpdateStandaloneStatus+0x6c>
   100b6:	28 e7       	ldi	r18, 0x78	; 120
			     strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
   100b8:	fc 01       	movw	r30, r24
   100ba:	ee 5f       	subi	r30, 0xFE	; 254
   100bc:	fe 4f       	sbci	r31, 0xFE	; 254
   100be:	20 83       	st	Z, r18
                 if (xPumpStatus==PS_FINISH_TOTALIZER)
   100c0:	65 31       	cpi	r22, 0x15	; 21
   100c2:	09 f5       	brne	.+66     	; 0x10106 <UpdateStandaloneStatus+0xba>
				     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
   100c4:	fc 01       	movw	r30, r24
   100c6:	e3 5c       	subi	r30, 0xC3	; 195
   100c8:	fd 4f       	sbci	r31, 0xFD	; 253
   100ca:	e0 81       	ld	r30, Z
   100cc:	06 c0       	rjmp	.+12     	; 0x100da <UpdateStandaloneStatus+0x8e>
   100ce:	dc 01       	movw	r26, r24
   100d0:	a3 5c       	subi	r26, 0xC3	; 195
   100d2:	bd 4f       	sbci	r27, 0xFD	; 253
		     }else if ((strPumpStatus[iAddr]==GetPumpStatusLabel(PS_PRINT_READY))||(xPumpStatus==PUMP_FEOT)||(xPumpStatus==PS_PRINTED)||(xPumpStatus==PS_TOTALIZER)){//P
			     if (xPumpStatus==PS_PRINTED){
   100d4:	61 31       	cpi	r22, 0x11	; 17
   100d6:	71 f4       	brne	.+28     	; 0x100f4 <UpdateStandaloneStatus+0xa8>
				 //New

				     //if (CurrentPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY))
			             strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
   100d8:	ec 91       	ld	r30, X
   100da:	ee 31       	cpi	r30, 0x1E	; 30
   100dc:	28 f4       	brcc	.+10     	; 0x100e8 <UpdateStandaloneStatus+0x9c>
   100de:	f0 e0       	ldi	r31, 0x00	; 0
   100e0:	e4 5a       	subi	r30, 0xA4	; 164
   100e2:	fe 4f       	sbci	r31, 0xFE	; 254
   100e4:	20 81       	ld	r18, Z
   100e6:	01 c0       	rjmp	.+2      	; 0x100ea <UpdateStandaloneStatus+0x9e>
   100e8:	28 e7       	ldi	r18, 0x78	; 120
   100ea:	8e 5f       	subi	r24, 0xFE	; 254
   100ec:	9e 4f       	sbci	r25, 0xFE	; 254
   100ee:	fc 01       	movw	r30, r24
   100f0:	20 83       	st	Z, r18
   100f2:	09 c0       	rjmp	.+18     	; 0x10106 <UpdateStandaloneStatus+0xba>
					 //    CurrentPumpStatus[iAddr]=PUMP_OFF;
					 //    strPumpStatus[iAddr]=GetPumpStatusLabel(PUMP_OFF);
					 //}

				  }
			     else CurrentPumpStatus[iAddr]=xPumpStatus;			 
   100f4:	6c 93       	st	X, r22
			 if (xPumpStatus==PUMP_FEOT){
   100f6:	6b 30       	cpi	r22, 0x0B	; 11
   100f8:	11 f4       	brne	.+4      	; 0x100fe <UpdateStandaloneStatus+0xb2>
			     CurrentPumpStatus[iAddr]=xPumpStatus;
			     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
   100fa:	86 e4       	ldi	r24, 0x46	; 70
   100fc:	03 c0       	rjmp	.+6      	; 0x10104 <UpdateStandaloneStatus+0xb8>
				 }
             else if (xPumpStatus==PS_TOTALIZER){
   100fe:	64 31       	cpi	r22, 0x14	; 20
   10100:	11 f4       	brne	.+4      	; 0x10106 <UpdateStandaloneStatus+0xba>
			      strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
   10102:	84 e5       	ldi	r24, 0x54	; 84
   10104:	80 83       	st	Z, r24
				 }
		 }		 	     
         strPumpStatus[16]=0;
   10106:	10 92 12 01 	sts	0x0112, r1
	     IsNewPumpStatus=True;		 
   1010a:	81 e0       	ldi	r24, 0x01	; 1
   1010c:	80 93 01 01 	sts	0x0101, r24
		 }		 
	 }
}
   10110:	0f 90       	pop	r0
   10112:	cf 91       	pop	r28
   10114:	df 91       	pop	r29
   10116:	1f 91       	pop	r17
   10118:	0f 91       	pop	r16
   1011a:	08 95       	ret

0001011c <PrintIdle>:
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
		}
}

void PrintIdle(){
   1011c:	ef 92       	push	r14
   1011e:	ff 92       	push	r15
   10120:	0f 93       	push	r16
   10122:	1f 93       	push	r17
   10124:	df 93       	push	r29
   10126:	cf 93       	push	r28
   10128:	cd b7       	in	r28, 0x3d	; 61
   1012a:	de b7       	in	r29, 0x3e	; 62
   1012c:	64 97       	sbiw	r28, 0x14	; 20
   1012e:	0f b6       	in	r0, 0x3f	; 63
   10130:	f8 94       	cli
   10132:	de bf       	out	0x3e, r29	; 62
   10134:	0f be       	out	0x3f, r0	; 63
   10136:	cd bf       	out	0x3d, r28	; 61
		uart_print(1,1,strSend);
	 }
	 #endif

     //Normalize PrintIdleState
     if ((IsPrinting==True)&&(stPrintIdle!=piIdle)){
   10138:	80 91 8a 02 	lds	r24, 0x028A
   1013c:	81 30       	cpi	r24, 0x01	; 1
   1013e:	31 f4       	brne	.+12     	; 0x1014c <PrintIdle+0x30>
   10140:	80 91 e4 02 	lds	r24, 0x02E4
   10144:	88 23       	and	r24, r24
   10146:	11 f0       	breq	.+4      	; 0x1014c <PrintIdle+0x30>
	     stPrintIdle=piIdle;
   10148:	10 92 e4 02 	sts	0x02E4, r1
	 }

     switch(stPrintIdle){
   1014c:	e0 91 e4 02 	lds	r30, 0x02E4
   10150:	f0 e0       	ldi	r31, 0x00	; 0
   10152:	e8 31       	cpi	r30, 0x18	; 24
   10154:	f1 05       	cpc	r31, r1
   10156:	08 f0       	brcs	.+2      	; 0x1015a <PrintIdle+0x3e>
   10158:	67 c7       	rjmp	.+3790   	; 0x11028 <PrintIdle+0xf0c>
   1015a:	ef 54       	subi	r30, 0x4F	; 79
   1015c:	ff 4f       	sbci	r31, 0xFF	; 255
   1015e:	ee 0f       	add	r30, r30
   10160:	ff 1f       	adc	r31, r31
   10162:	05 90       	lpm	r0, Z+
   10164:	f4 91       	lpm	r31, Z+
   10166:	e0 2d       	mov	r30, r0
   10168:	09 94       	ijmp
	 case piIdle:
	      if (IsPrinting==True){
   1016a:	80 91 8a 02 	lds	r24, 0x028A
   1016e:	81 30       	cpi	r24, 0x01	; 1
   10170:	09 f0       	breq	.+2      	; 0x10174 <PrintIdle+0x58>
   10172:	5a c7       	rjmp	.+3764   	; 0x11028 <PrintIdle+0xf0c>
		      IsPrinting=False;
   10174:	10 92 8a 02 	sts	0x028A, r1
			  IsBusyIdlePrinting=True;
   10178:	80 93 90 02 	sts	0x0290, r24
			  IsBusyPrint=False;
   1017c:	10 92 91 02 	sts	0x0291, r1
			  iPrinted=0;
   10180:	10 92 d6 02 	sts	0x02D6, r1
			  PrintCopy=0;
   10184:	10 92 d5 02 	sts	0x02D5, r1
		      stPrintIdle=piInit;
   10188:	80 93 e4 02 	sts	0x02E4, r24
			  InitPrinter();
   1018c:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <InitPrinter>
			  IsSignedField=False;
   10190:	10 92 dd 02 	sts	0x02DD, r1
   10194:	49 c7       	rjmp	.+3730   	; 0x11028 <PrintIdle+0xf0c>
			  }
	      break;
	 case piInit:
	      iHeader=0;
   10196:	10 92 e3 02 	sts	0x02E3, r1
		  CarriegeReturn();
   1019a:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
   1019e:	1b c0       	rjmp	.+54     	; 0x101d6 <PrintIdle+0xba>
		  stPrintIdle=piLoadHeader;
	      break;
     case piLoadHeader:
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], sizeof(DefHeaderFooter[iHeader]));
   101a0:	60 91 e3 02 	lds	r22, 0x02E3
   101a4:	89 e2       	ldi	r24, 0x29	; 41
   101a6:	68 9f       	mul	r22, r24
   101a8:	b0 01       	movw	r22, r0
   101aa:	11 24       	eor	r1, r1
   101ac:	69 5d       	subi	r22, 0xD9	; 217
   101ae:	7d 4f       	sbci	r23, 0xFD	; 253
   101b0:	8a e9       	ldi	r24, 0x9A	; 154
   101b2:	99 e0       	ldi	r25, 0x09	; 9
   101b4:	49 e2       	ldi	r20, 0x29	; 41
   101b6:	50 e0       	ldi	r21, 0x00	; 0
   101b8:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  iHeader++;
   101bc:	00 91 e3 02 	lds	r16, 0x02E3
   101c0:	0f 5f       	subi	r16, 0xFF	; 255
   101c2:	00 93 e3 02 	sts	0x02E3, r16
		  if (iHeader<6){
   101c6:	06 30       	cpi	r16, 0x06	; 6
   101c8:	f0 f4       	brcc	.+60     	; 0x10206 <PrintIdle+0xea>
		      if (SpaceOnly(strPrint)==True){
   101ca:	8a e9       	ldi	r24, 0x9A	; 154
   101cc:	99 e0       	ldi	r25, 0x09	; 9
   101ce:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   101d2:	81 30       	cpi	r24, 0x01	; 1
   101d4:	11 f4       	brne	.+4      	; 0x101da <PrintIdle+0xbe>
			      stPrintIdle=piLoadHeader;
   101d6:	82 e0       	ldi	r24, 0x02	; 2
   101d8:	fc c6       	rjmp	.+3576   	; 0x10fd2 <PrintIdle+0xeb6>
				  }	      
			  else{
			      stPrintIdle=piPrintHeader;
   101da:	83 e0       	ldi	r24, 0x03	; 3
   101dc:	80 93 e4 02 	sts	0x02E4, r24
			      iSend=0;
   101e0:	10 92 dc 02 	sts	0x02DC, r1
   101e4:	10 92 db 02 	sts	0x02DB, r1
				  iLoop=0;
   101e8:	10 92 d8 02 	sts	0x02D8, r1
   101ec:	10 92 d7 02 	sts	0x02D7, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   101f0:	01 30       	cpi	r16, 0x01	; 1
   101f2:	19 f4       	brne	.+6      	; 0x101fa <PrintIdle+0xde>
   101f4:	0e 94 b4 5a 	call	0xb568	; 0xb568 <PrintDoubleHeight>
   101f8:	17 c7       	rjmp	.+3630   	; 0x11028 <PrintIdle+0xf0c>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   101fa:	02 30       	cpi	r16, 0x02	; 2
   101fc:	09 f0       	breq	.+2      	; 0x10200 <PrintIdle+0xe4>
   101fe:	14 c7       	rjmp	.+3624   	; 0x11028 <PrintIdle+0xf0c>
   10200:	0e 94 ca 5a 	call	0xb594	; 0xb594 <PrintNormalHeight>
   10204:	11 c7       	rjmp	.+3618   	; 0x11028 <PrintIdle+0xf0c>
			   }
		  }else{stPrintIdle=piInitDuplicate; //stPrintIdle=piInitMessage;//
   10206:	84 e0       	ldi	r24, 0x04	; 4
   10208:	e4 c6       	rjmp	.+3528   	; 0x10fd2 <PrintIdle+0xeb6>
		        //else stPrintIdle=piInitMessage;
		  }
	      break;
	 case piPrintHeader:
		  if (iSend<40){
   1020a:	80 91 db 02 	lds	r24, 0x02DB
   1020e:	90 91 dc 02 	lds	r25, 0x02DC
   10212:	88 32       	cpi	r24, 0x28	; 40
   10214:	91 05       	cpc	r25, r1
   10216:	68 f4       	brcc	.+26     	; 0x10232 <PrintIdle+0x116>
		      iLoop++;
   10218:	80 91 d7 02 	lds	r24, 0x02D7
   1021c:	90 91 d8 02 	lds	r25, 0x02D8
   10220:	01 96       	adiw	r24, 0x01	; 1
   10222:	90 93 d8 02 	sts	0x02D8, r25
   10226:	80 93 d7 02 	sts	0x02D7, r24
			  if ((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   1022a:	10 92 94 02 	sts	0x0294, r1
				 stPrintIdle=piCheckPrintStatusHeader;
   1022e:	8b e0       	ldi	r24, 0x0B	; 11
   10230:	d0 c6       	rjmp	.+3488   	; 0x10fd2 <PrintIdle+0xeb6>
				 }
			  }
          else{ 
		     stPrintIdle=piLoadHeader;
   10232:	82 e0       	ldi	r24, 0x02	; 2
   10234:	68 c6       	rjmp	.+3280   	; 0x10f06 <PrintIdle+0xdea>
			 CarriegeReturn();
		  }
	      break;
     case piCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   10236:	80 91 91 02 	lds	r24, 0x0291
   1023a:	88 23       	and	r24, r24
   1023c:	09 f0       	breq	.+2      	; 0x10240 <PrintIdle+0x124>
   1023e:	c1 c6       	rjmp	.+3458   	; 0x10fc2 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   10240:	e0 91 db 02 	lds	r30, 0x02DB
   10244:	f0 91 dc 02 	lds	r31, 0x02DC
   10248:	e6 56       	subi	r30, 0x66	; 102
   1024a:	f6 4f       	sbci	r31, 0xF6	; 246
   1024c:	61 e0       	ldi	r22, 0x01	; 1
   1024e:	40 81       	ld	r20, Z
   10250:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
   10254:	80 91 db 02 	lds	r24, 0x02DB
   10258:	90 91 dc 02 	lds	r25, 0x02DC
   1025c:	01 96       	adiw	r24, 0x01	; 1
   1025e:	90 93 dc 02 	sts	0x02DC, r25
   10262:	80 93 db 02 	sts	0x02DB, r24
		      stPrintIdle=piPrintHeader;
   10266:	83 e0       	ldi	r24, 0x03	; 3
   10268:	aa c6       	rjmp	.+3412   	; 0x10fbe <PrintIdle+0xea2>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitDuplicate:
          if ((iPrinted>0)||(IsReprintTicket==True)){
   1026a:	80 91 d6 02 	lds	r24, 0x02D6
   1026e:	88 23       	and	r24, r24
   10270:	21 f4       	brne	.+8      	; 0x1027a <PrintIdle+0x15e>
   10272:	80 91 5d 02 	lds	r24, 0x025D
   10276:	81 30       	cpi	r24, 0x01	; 1
   10278:	a9 f4       	brne	.+42     	; 0x102a4 <PrintIdle+0x188>
		      IsReprintTicket=False;
   1027a:	10 92 5d 02 	sts	0x025D, r1
		      CarriegeReturn(); 
   1027e:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		      sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   10282:	00 d0       	rcall	.+0      	; 0x10284 <PrintIdle+0x168>
   10284:	00 d0       	rcall	.+0      	; 0x10286 <PrintIdle+0x16a>
   10286:	8a e9       	ldi	r24, 0x9A	; 154
   10288:	99 e0       	ldi	r25, 0x09	; 9
   1028a:	ad b7       	in	r26, 0x3d	; 61
   1028c:	be b7       	in	r27, 0x3e	; 62
   1028e:	12 96       	adiw	r26, 0x02	; 2
   10290:	9c 93       	st	X, r25
   10292:	8e 93       	st	-X, r24
   10294:	11 97       	sbiw	r26, 0x01	; 1
   10296:	8e e3       	ldi	r24, 0x3E	; 62
   10298:	9b e0       	ldi	r25, 0x0B	; 11
   1029a:	14 96       	adiw	r26, 0x04	; 4
   1029c:	9c 93       	st	X, r25
   1029e:	8e 93       	st	-X, r24
   102a0:	13 97       	sbiw	r26, 0x03	; 3
   102a2:	0c c0       	rjmp	.+24     	; 0x102bc <PrintIdle+0x1a0>
		      }
          else{           sprintf_P(strPrint,PSTR(" "));
   102a4:	00 d0       	rcall	.+0      	; 0x102a6 <PrintIdle+0x18a>
   102a6:	00 d0       	rcall	.+0      	; 0x102a8 <PrintIdle+0x18c>
   102a8:	8a e9       	ldi	r24, 0x9A	; 154
   102aa:	99 e0       	ldi	r25, 0x09	; 9
   102ac:	ed b7       	in	r30, 0x3d	; 61
   102ae:	fe b7       	in	r31, 0x3e	; 62
   102b0:	92 83       	std	Z+2, r25	; 0x02
   102b2:	81 83       	std	Z+1, r24	; 0x01
   102b4:	8c e3       	ldi	r24, 0x3C	; 60
   102b6:	9b e0       	ldi	r25, 0x0B	; 11
   102b8:	94 83       	std	Z+4, r25	; 0x04
   102ba:	83 83       	std	Z+3, r24	; 0x03
   102bc:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
   102c0:	0f 90       	pop	r0
   102c2:	0f 90       	pop	r0
   102c4:	0f 90       	pop	r0
   102c6:	0f 90       	pop	r0
		      }
		  iSend=0;
   102c8:	10 92 dc 02 	sts	0x02DC, r1
   102cc:	10 92 db 02 	sts	0x02DB, r1
		  iLoop=0;
   102d0:	10 92 d8 02 	sts	0x02D8, r1
   102d4:	10 92 d7 02 	sts	0x02D7, r1
		  LSend=strlen(strPrint);
   102d8:	ea e9       	ldi	r30, 0x9A	; 154
   102da:	f9 e0       	ldi	r31, 0x09	; 9
   102dc:	01 90       	ld	r0, Z+
   102de:	00 20       	and	r0, r0
   102e0:	e9 f7       	brne	.-6      	; 0x102dc <PrintIdle+0x1c0>
   102e2:	31 97       	sbiw	r30, 0x01	; 1
   102e4:	ea 59       	subi	r30, 0x9A	; 154
   102e6:	f9 40       	sbci	r31, 0x09	; 9
   102e8:	f0 93 da 02 	sts	0x02DA, r31
   102ec:	e0 93 d9 02 	sts	0x02D9, r30
          stPrintIdle=piPrintDuplicate; 
   102f0:	85 e0       	ldi	r24, 0x05	; 5
   102f2:	6f c6       	rjmp	.+3294   	; 0x10fd2 <PrintIdle+0xeb6>
	      break;
     case piPrintDuplicate:
		  if (iSend<LSend){
   102f4:	20 91 db 02 	lds	r18, 0x02DB
   102f8:	30 91 dc 02 	lds	r19, 0x02DC
   102fc:	80 91 d9 02 	lds	r24, 0x02D9
   10300:	90 91 da 02 	lds	r25, 0x02DA
   10304:	28 17       	cp	r18, r24
   10306:	39 07       	cpc	r19, r25
   10308:	68 f4       	brcc	.+26     	; 0x10324 <PrintIdle+0x208>
		      iLoop++;
   1030a:	80 91 d7 02 	lds	r24, 0x02D7
   1030e:	90 91 d8 02 	lds	r25, 0x02D8
   10312:	01 96       	adiw	r24, 0x01	; 1
   10314:	90 93 d8 02 	sts	0x02D8, r25
   10318:	80 93 d7 02 	sts	0x02D7, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   1031c:	10 92 94 02 	sts	0x0294, r1
                 stPrintIdle=piCheckPrintStatusDuplicate;
   10320:	86 e0       	ldi	r24, 0x06	; 6
   10322:	57 c6       	rjmp	.+3246   	; 0x10fd2 <PrintIdle+0xeb6>
				 }
			  }
          else {
		     iSend=0;
   10324:	10 92 dc 02 	sts	0x02DC, r1
   10328:	10 92 db 02 	sts	0x02DB, r1
		     stPrintIdle=piInitMessage;
   1032c:	87 e0       	ldi	r24, 0x07	; 7
   1032e:	51 c6       	rjmp	.+3234   	; 0x10fd2 <PrintIdle+0xeb6>
			 }
	      break;
     case piCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   10330:	80 91 91 02 	lds	r24, 0x0291
   10334:	88 23       	and	r24, r24
   10336:	09 f0       	breq	.+2      	; 0x1033a <PrintIdle+0x21e>
   10338:	44 c6       	rjmp	.+3208   	; 0x10fc2 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   1033a:	e0 91 db 02 	lds	r30, 0x02DB
   1033e:	f0 91 dc 02 	lds	r31, 0x02DC
   10342:	e6 56       	subi	r30, 0x66	; 102
   10344:	f6 4f       	sbci	r31, 0xF6	; 246
   10346:	61 e0       	ldi	r22, 0x01	; 1
   10348:	40 81       	ld	r20, Z
   1034a:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
   1034e:	8f ef       	ldi	r24, 0xFF	; 255
   10350:	9f e8       	ldi	r25, 0x8F	; 143
   10352:	01 97       	sbiw	r24, 0x01	; 1
   10354:	f1 f7       	brne	.-4      	; 0x10352 <PrintIdle+0x236>
   10356:	00 c0       	rjmp	.+0      	; 0x10358 <PrintIdle+0x23c>
   10358:	00 00       	nop
			  _delay_ms(10);
		      iSend++;
   1035a:	80 91 db 02 	lds	r24, 0x02DB
   1035e:	90 91 dc 02 	lds	r25, 0x02DC
   10362:	01 96       	adiw	r24, 0x01	; 1
   10364:	90 93 dc 02 	sts	0x02DC, r25
   10368:	80 93 db 02 	sts	0x02DB, r24
		      stPrintIdle=piPrintDuplicate;
   1036c:	85 e0       	ldi	r24, 0x05	; 5
   1036e:	27 c6       	rjmp	.+3150   	; 0x10fbe <PrintIdle+0xea2>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitMessage:
	      iSend=0;iLoop=0;
   10370:	10 92 dc 02 	sts	0x02DC, r1
   10374:	10 92 db 02 	sts	0x02DB, r1
   10378:	10 92 d8 02 	sts	0x02D8, r1
   1037c:	10 92 d7 02 	sts	0x02D7, r1
		  iMessage=0;
   10380:	10 92 df 02 	sts	0x02DF, r1
		  switch(MOPType){
   10384:	80 91 96 02 	lds	r24, 0x0296
   10388:	83 30       	cpi	r24, 0x03	; 3
   1038a:	81 f0       	breq	.+32     	; 0x103ac <PrintIdle+0x290>
   1038c:	84 30       	cpi	r24, 0x04	; 4
   1038e:	28 f4       	brcc	.+10     	; 0x1039a <PrintIdle+0x27e>
   10390:	81 30       	cpi	r24, 0x01	; 1
   10392:	61 f0       	breq	.+24     	; 0x103ac <PrintIdle+0x290>
   10394:	82 30       	cpi	r24, 0x02	; 2
   10396:	40 f4       	brcc	.+16     	; 0x103a8 <PrintIdle+0x28c>
   10398:	10 c0       	rjmp	.+32     	; 0x103ba <PrintIdle+0x29e>
   1039a:	88 30       	cpi	r24, 0x08	; 8
   1039c:	49 f0       	breq	.+18     	; 0x103b0 <PrintIdle+0x294>
   1039e:	89 30       	cpi	r24, 0x09	; 9
   103a0:	61 f0       	breq	.+24     	; 0x103ba <PrintIdle+0x29e>
   103a2:	87 30       	cpi	r24, 0x07	; 7
   103a4:	51 f4       	brne	.+20     	; 0x103ba <PrintIdle+0x29e>
   103a6:	02 c0       	rjmp	.+4      	; 0x103ac <PrintIdle+0x290>
		  case MOP_CASH:
		       MessageLine=10;
			   PrintCopy=1;
		       break;
          case MOP_CREDIT_CARD:
		       MessageLine=10;
   103a8:	8a e0       	ldi	r24, 0x0A	; 10
   103aa:	03 c0       	rjmp	.+6      	; 0x103b2 <PrintIdle+0x296>
          case MOP_LOCAL_ACCOUNT:
		       MessageLine=20;
			   PrintCopy=2;
		       break;
          case MOP_VOUCHER:
		       MessageLine=20;
   103ac:	84 e1       	ldi	r24, 0x14	; 20
   103ae:	01 c0       	rjmp	.+2      	; 0x103b2 <PrintIdle+0x296>
			   PrintCopy=2;
		       break;
          case MOP_PUMP_TEST:
		       MessageLine=12;
   103b0:	8c e0       	ldi	r24, 0x0C	; 12
   103b2:	80 93 de 02 	sts	0x02DE, r24
			   PrintCopy=2;
   103b6:	82 e0       	ldi	r24, 0x02	; 2
   103b8:	04 c0       	rjmp	.+8      	; 0x103c2 <PrintIdle+0x2a6>
          case MOP_VOID_CARD:
		       MessageLine=10;
			   PrintCopy=1;
		       break;          
          default:
		       MessageLine=10;
   103ba:	8a e0       	ldi	r24, 0x0A	; 10
   103bc:	80 93 de 02 	sts	0x02DE, r24
			   PrintCopy=1;
   103c0:	81 e0       	ldi	r24, 0x01	; 1
   103c2:	80 93 d5 02 	sts	0x02D5, r24
		       break; 
		  }
		  //LoyaltyDetection
          if ((strlen(strLoyCardID)>0)&&(SpaceOnly(strLoyCardID)==False)){
   103c6:	80 91 c5 03 	lds	r24, 0x03C5
   103ca:	88 23       	and	r24, r24
   103cc:	49 f0       	breq	.+18     	; 0x103e0 <PrintIdle+0x2c4>
   103ce:	85 ec       	ldi	r24, 0xC5	; 197
   103d0:	93 e0       	ldi	r25, 0x03	; 3
   103d2:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   103d6:	88 23       	and	r24, r24
   103d8:	19 f4       	brne	.+6      	; 0x103e0 <PrintIdle+0x2c4>
		       MessageLine=33;
   103da:	81 e2       	ldi	r24, 0x21	; 33
   103dc:	80 93 de 02 	sts	0x02DE, r24
		  }
          //stPrintIdle=piLoadMessage;
		  stPrintIdle=piFormatingMessage;
   103e0:	88 e0       	ldi	r24, 0x08	; 8
   103e2:	f7 c5       	rjmp	.+3054   	; 0x10fd2 <PrintIdle+0xeb6>
	      break;
     case piFormatingMessage:
	      if (iPrinted==0){
   103e4:	80 91 d6 02 	lds	r24, 0x02D6
   103e8:	88 23       	and	r24, r24
   103ea:	09 f0       	breq	.+2      	; 0x103ee <PrintIdle+0x2d2>
   103ec:	9a c4       	rjmp	.+2356   	; 0x10d22 <PrintIdle+0xc06>

		      FormatDate(DATE_LONG_YEAR,strDate);
   103ee:	6c e4       	ldi	r22, 0x4C	; 76
   103f0:	78 e0       	ldi	r23, 0x08	; 8
   103f2:	0e 94 95 3d 	call	0x7b2a	; 0x7b2a <FormatDate>
              RemZeroLead(strIslandID);
   103f6:	85 ed       	ldi	r24, 0xD5	; 213
   103f8:	99 e0       	ldi	r25, 0x09	; 9
   103fa:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
			  RemZeroLead(strFIP_ID);
   103fe:	87 e9       	ldi	r24, 0x97	; 151
   10400:	98 e0       	ldi	r25, 0x08	; 8
   10402:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		      RemZeroLead(strPrice);              
   10406:	8c e7       	ldi	r24, 0x7C	; 124
   10408:	96 e0       	ldi	r25, 0x06	; 6
   1040a:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
              if (IFType==IT_SLAVE)
   1040e:	80 91 00 01 	lds	r24, 0x0100
   10412:	81 30       	cpi	r24, 0x01	; 1
   10414:	21 f4       	brne	.+8      	; 0x1041e <PrintIdle+0x302>
			      RemZeroLead(strVolume);
   10416:	83 e5       	ldi	r24, 0x53	; 83
   10418:	94 e0       	ldi	r25, 0x04	; 4
   1041a:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
              RemZeroLead(strAmount);
   1041e:	81 e9       	ldi	r24, 0x91	; 145
   10420:	9c e0       	ldi	r25, 0x0C	; 12
   10422:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>

			  RemDecimal(strPrice);
   10426:	8c e7       	ldi	r24, 0x7C	; 124
   10428:	96 e0       	ldi	r25, 0x06	; 6
   1042a:	0e 94 0d 49 	call	0x921a	; 0x921a <RemDecimal>
			  RemDecimal(strAmount);
   1042e:	81 e9       	ldi	r24, 0x91	; 145
   10430:	9c e0       	ldi	r25, 0x0C	; 12
   10432:	0e 94 0d 49 	call	0x921a	; 0x921a <RemDecimal>
	  
			  FormatCurrency(strPrice);
   10436:	8c e7       	ldi	r24, 0x7C	; 124
   10438:	96 e0       	ldi	r25, 0x06	; 6
   1043a:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
			  FormatCurrency(strAmount);
   1043e:	81 e9       	ldi	r24, 0x91	; 145
   10440:	9c e0       	ldi	r25, 0x0C	; 12
   10442:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
              if (IFType==IT_SLAVE){
   10446:	80 91 00 01 	lds	r24, 0x0100
   1044a:	81 30       	cpi	r24, 0x01	; 1
   1044c:	09 f0       	breq	.+2      	; 0x10450 <PrintIdle+0x334>
   1044e:	69 c4       	rjmp	.+2258   	; 0x10d22 <PrintIdle+0xc06>
		          RemSpaceLag(strCardID);
   10450:	87 e6       	ldi	r24, 0x67	; 103
   10452:	9c e0       	ldi	r25, 0x0C	; 12
   10454:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          RemSpaceLag(strCardHolder);
   10458:	82 e0       	ldi	r24, 0x02	; 2
   1045a:	94 e0       	ldi	r25, 0x04	; 4
   1045c:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          RemSpaceLag(strMOPName);
   10460:	8b e5       	ldi	r24, 0x5B	; 91
   10462:	96 e0       	ldi	r25, 0x06	; 6
   10464:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          RemSpaceLag(strLoyCardHolder);
   10468:	82 ea       	ldi	r24, 0xA2	; 162
   1046a:	93 e0       	ldi	r25, 0x03	; 3
   1046c:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          RemSpaceLag(strCorporateID);
   10470:	88 ee       	ldi	r24, 0xE8	; 232
   10472:	9c e0       	ldi	r25, 0x0C	; 12
   10474:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          RemSpaceLag(strCorporateName);
   10478:	8b ea       	ldi	r24, 0xAB	; 171
   1047a:	94 e0       	ldi	r25, 0x04	; 4
   1047c:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          RemSpaceLag(strLoyRedeemPoints);
   10480:	88 e7       	ldi	r24, 0x78	; 120
   10482:	94 e0       	ldi	r25, 0x04	; 4
   10484:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          RemSpaceLag(strLoyCurrMonConsumeV);
   10488:	8b ec       	ldi	r24, 0xCB	; 203
   1048a:	9c e0       	ldi	r25, 0x0C	; 12
   1048c:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
				  RemSpaceLag(strLoyCurrMonConsumeA);
   10490:	8c e5       	ldi	r24, 0x5C	; 92
   10492:	94 e0       	ldi	r25, 0x04	; 4
   10494:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <RemSpaceLag>
		          FormatCurrency(strLoyCurrMonConsumeV);              
   10498:	8b ec       	ldi	r24, 0xCB	; 203
   1049a:	9c e0       	ldi	r25, 0x0C	; 12
   1049c:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
		          FormatCurrency(strLoyCurrMonConsumeA);
   104a0:	8c e5       	ldi	r24, 0x5C	; 92
   104a2:	94 e0       	ldi	r25, 0x04	; 4
   104a4:	0e 94 39 55 	call	0xaa72	; 0xaa72 <FormatCurrency>
   104a8:	3c c4       	rjmp	.+2168   	; 0x10d22 <PrintIdle+0xc06>
			   }
		  }
          stPrintIdle=piLoadMessage;
	      break;
     case piLoadMessage:
	      switch(iMessage){
   104aa:	e0 91 df 02 	lds	r30, 0x02DF
   104ae:	f0 e0       	ldi	r31, 0x00	; 0
   104b0:	e5 32       	cpi	r30, 0x25	; 37
   104b2:	f1 05       	cpc	r31, r1
   104b4:	08 f0       	brcs	.+2      	; 0x104b8 <PrintIdle+0x39c>
   104b6:	f8 c3       	rjmp	.+2032   	; 0x10ca8 <PrintIdle+0xb8c>
   104b8:	e7 53       	subi	r30, 0x37	; 55
   104ba:	ff 4f       	sbci	r31, 0xFF	; 255
   104bc:	0a e9       	ldi	r16, 0x9A	; 154
   104be:	19 e0       	ldi	r17, 0x09	; 9
   104c0:	ee 0f       	add	r30, r30
   104c2:	ff 1f       	adc	r31, r31
   104c4:	05 90       	lpm	r0, Z+
   104c6:	f4 91       	lpm	r31, Z+
   104c8:	e0 2d       	mov	r30, r0
   104ca:	09 94       	ijmp
		  case 0:
		       CarriegeReturn();
   104cc:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Shift: %s  No.Trans: %s "),strShift,strTranNo);
   104d0:	ad b7       	in	r26, 0x3d	; 61
   104d2:	be b7       	in	r27, 0x3e	; 62
   104d4:	18 97       	sbiw	r26, 0x08	; 8
   104d6:	0f b6       	in	r0, 0x3f	; 63
   104d8:	f8 94       	cli
   104da:	be bf       	out	0x3e, r27	; 62
   104dc:	0f be       	out	0x3f, r0	; 63
   104de:	ad bf       	out	0x3d, r26	; 61
   104e0:	ed b7       	in	r30, 0x3d	; 61
   104e2:	fe b7       	in	r31, 0x3e	; 62
   104e4:	31 96       	adiw	r30, 0x01	; 1
   104e6:	12 96       	adiw	r26, 0x02	; 2
   104e8:	1c 93       	st	X, r17
   104ea:	0e 93       	st	-X, r16
   104ec:	11 97       	sbiw	r26, 0x01	; 1
   104ee:	8d e1       	ldi	r24, 0x1D	; 29
   104f0:	9b e0       	ldi	r25, 0x0B	; 11
   104f2:	93 83       	std	Z+3, r25	; 0x03
   104f4:	82 83       	std	Z+2, r24	; 0x02
   104f6:	86 e4       	ldi	r24, 0x46	; 70
   104f8:	9d e0       	ldi	r25, 0x0D	; 13
   104fa:	95 83       	std	Z+5, r25	; 0x05
   104fc:	84 83       	std	Z+4, r24	; 0x04
   104fe:	85 e6       	ldi	r24, 0x65	; 101
   10500:	9d e0       	ldi	r25, 0x0D	; 13
   10502:	1d c0       	rjmp	.+58     	; 0x1053e <PrintIdle+0x422>
		       break;
		  case 1:
		       //FormatDate(strDate);
			   CarriegeReturn();
   10504:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Waktu: %s %s "),strDate,strTime);
   10508:	8d b7       	in	r24, 0x3d	; 61
   1050a:	9e b7       	in	r25, 0x3e	; 62
   1050c:	08 97       	sbiw	r24, 0x08	; 8
   1050e:	0f b6       	in	r0, 0x3f	; 63
   10510:	f8 94       	cli
   10512:	9e bf       	out	0x3e, r25	; 62
   10514:	0f be       	out	0x3f, r0	; 63
   10516:	8d bf       	out	0x3d, r24	; 61
   10518:	ed b7       	in	r30, 0x3d	; 61
   1051a:	fe b7       	in	r31, 0x3e	; 62
   1051c:	31 96       	adiw	r30, 0x01	; 1
   1051e:	ad b7       	in	r26, 0x3d	; 61
   10520:	be b7       	in	r27, 0x3e	; 62
   10522:	12 96       	adiw	r26, 0x02	; 2
   10524:	1c 93       	st	X, r17
   10526:	0e 93       	st	-X, r16
   10528:	11 97       	sbiw	r26, 0x01	; 1
   1052a:	89 e0       	ldi	r24, 0x09	; 9
   1052c:	9b e0       	ldi	r25, 0x0B	; 11
   1052e:	93 83       	std	Z+3, r25	; 0x03
   10530:	82 83       	std	Z+2, r24	; 0x02
   10532:	8c e4       	ldi	r24, 0x4C	; 76
   10534:	98 e0       	ldi	r25, 0x08	; 8
   10536:	95 83       	std	Z+5, r25	; 0x05
   10538:	84 83       	std	Z+4, r24	; 0x04
   1053a:	8b e2       	ldi	r24, 0x2B	; 43
   1053c:	94 e0       	ldi	r25, 0x04	; 4
   1053e:	97 83       	std	Z+7, r25	; 0x07
   10540:	86 83       	std	Z+6, r24	; 0x06
   10542:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		       break;
   10546:	ed b7       	in	r30, 0x3d	; 61
   10548:	fe b7       	in	r31, 0x3e	; 62
   1054a:	38 96       	adiw	r30, 0x08	; 8
   1054c:	91 c3       	rjmp	.+1826   	; 0x10c70 <PrintIdle+0xb54>
		  case 2:
		       CarriegeReturn();
   1054e:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   10552:	00 d0       	rcall	.+0      	; 0x10554 <PrintIdle+0x438>
   10554:	00 d0       	rcall	.+0      	; 0x10556 <PrintIdle+0x43a>
   10556:	ad b7       	in	r26, 0x3d	; 61
   10558:	be b7       	in	r27, 0x3e	; 62
   1055a:	12 96       	adiw	r26, 0x02	; 2
   1055c:	1c 93       	st	X, r17
   1055e:	0e 93       	st	-X, r16
   10560:	11 97       	sbiw	r26, 0x01	; 1
   10562:	86 ee       	ldi	r24, 0xE6	; 230
   10564:	9a e0       	ldi	r25, 0x0A	; 10
   10566:	96 c3       	rjmp	.+1836   	; 0x10c94 <PrintIdle+0xb78>
		       break;
		  case 3:
		       CarriegeReturn();
   10568:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			   //RemZeroLead(strIslandID);
			   //RemZeroLead(strFIP_ID);
		       sprintf_P(strPrint,PSTR("      Pulau/Pompa : [%s]-%s"),strIslandID,strFIP_ID);
   1056c:	ed b7       	in	r30, 0x3d	; 61
   1056e:	fe b7       	in	r31, 0x3e	; 62
   10570:	38 97       	sbiw	r30, 0x08	; 8
   10572:	0f b6       	in	r0, 0x3f	; 63
   10574:	f8 94       	cli
   10576:	fe bf       	out	0x3e, r31	; 62
   10578:	0f be       	out	0x3f, r0	; 63
   1057a:	ed bf       	out	0x3d, r30	; 61
   1057c:	31 96       	adiw	r30, 0x01	; 1
   1057e:	ad b7       	in	r26, 0x3d	; 61
   10580:	be b7       	in	r27, 0x3e	; 62
   10582:	12 96       	adiw	r26, 0x02	; 2
   10584:	1c 93       	st	X, r17
   10586:	0e 93       	st	-X, r16
   10588:	11 97       	sbiw	r26, 0x01	; 1
   1058a:	8a ec       	ldi	r24, 0xCA	; 202
   1058c:	9a e0       	ldi	r25, 0x0A	; 10
   1058e:	93 83       	std	Z+3, r25	; 0x03
   10590:	82 83       	std	Z+2, r24	; 0x02
   10592:	85 ed       	ldi	r24, 0xD5	; 213
   10594:	99 e0       	ldi	r25, 0x09	; 9
   10596:	95 83       	std	Z+5, r25	; 0x05
   10598:	84 83       	std	Z+4, r24	; 0x04
   1059a:	87 e9       	ldi	r24, 0x97	; 151
   1059c:	98 e0       	ldi	r25, 0x08	; 8
   1059e:	cf cf       	rjmp	.-98     	; 0x1053e <PrintIdle+0x422>
		       break;
		  case 4:
		       CarriegeReturn();
   105a0:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Produk      : %s"),strDescription);
   105a4:	00 d0       	rcall	.+0      	; 0x105a6 <PrintIdle+0x48a>
   105a6:	00 d0       	rcall	.+0      	; 0x105a8 <PrintIdle+0x48c>
   105a8:	00 d0       	rcall	.+0      	; 0x105aa <PrintIdle+0x48e>
   105aa:	ed b7       	in	r30, 0x3d	; 61
   105ac:	fe b7       	in	r31, 0x3e	; 62
   105ae:	31 96       	adiw	r30, 0x01	; 1
   105b0:	ad b7       	in	r26, 0x3d	; 61
   105b2:	be b7       	in	r27, 0x3e	; 62
   105b4:	12 96       	adiw	r26, 0x02	; 2
   105b6:	1c 93       	st	X, r17
   105b8:	0e 93       	st	-X, r16
   105ba:	11 97       	sbiw	r26, 0x01	; 1
   105bc:	83 eb       	ldi	r24, 0xB3	; 179
   105be:	9a e0       	ldi	r25, 0x0A	; 10
   105c0:	93 83       	std	Z+3, r25	; 0x03
   105c2:	82 83       	std	Z+2, r24	; 0x02
   105c4:	80 e0       	ldi	r24, 0x00	; 0
   105c6:	99 e0       	ldi	r25, 0x09	; 9
   105c8:	4c c3       	rjmp	.+1688   	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 5:
		       //RemZeroLead(strPrice);
               //FormatCurrency(strPrice);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   105ca:	81 ec       	ldi	r24, 0xC1	; 193
   105cc:	93 e0       	ldi	r25, 0x03	; 3
   105ce:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   105d2:	0a e9       	ldi	r16, 0x9A	; 154
   105d4:	19 e0       	ldi	r17, 0x09	; 9
   105d6:	81 30       	cpi	r24, 0x01	; 1
   105d8:	a9 f4       	brne	.+42     	; 0x10604 <PrintIdle+0x4e8>
			   	   CarriegeReturn();
   105da:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Harga/L     : Rp.%s"),strPrice);
   105de:	00 d0       	rcall	.+0      	; 0x105e0 <PrintIdle+0x4c4>
   105e0:	00 d0       	rcall	.+0      	; 0x105e2 <PrintIdle+0x4c6>
   105e2:	00 d0       	rcall	.+0      	; 0x105e4 <PrintIdle+0x4c8>
   105e4:	ed b7       	in	r30, 0x3d	; 61
   105e6:	fe b7       	in	r31, 0x3e	; 62
   105e8:	31 96       	adiw	r30, 0x01	; 1
   105ea:	ad b7       	in	r26, 0x3d	; 61
   105ec:	be b7       	in	r27, 0x3e	; 62
   105ee:	12 96       	adiw	r26, 0x02	; 2
   105f0:	1c 93       	st	X, r17
   105f2:	0e 93       	st	-X, r16
   105f4:	11 97       	sbiw	r26, 0x01	; 1
   105f6:	89 e9       	ldi	r24, 0x99	; 153
   105f8:	9a e0       	ldi	r25, 0x0A	; 10
   105fa:	93 83       	std	Z+3, r25	; 0x03
   105fc:	82 83       	std	Z+2, r24	; 0x02
   105fe:	8c e7       	ldi	r24, 0x7C	; 124
   10600:	96 e0       	ldi	r25, 0x06	; 6
   10602:	2f c3       	rjmp	.+1630   	; 0x10c62 <PrintIdle+0xb46>
			   }else sprintf_P(strPrint,PSTR(""));
   10604:	00 d0       	rcall	.+0      	; 0x10606 <PrintIdle+0x4ea>
   10606:	00 d0       	rcall	.+0      	; 0x10608 <PrintIdle+0x4ec>
   10608:	ad b7       	in	r26, 0x3d	; 61
   1060a:	be b7       	in	r27, 0x3e	; 62
   1060c:	12 96       	adiw	r26, 0x02	; 2
   1060e:	1c 93       	st	X, r17
   10610:	0e 93       	st	-X, r16
   10612:	11 97       	sbiw	r26, 0x01	; 1
   10614:	88 e9       	ldi	r24, 0x98	; 152
   10616:	9a e0       	ldi	r25, 0x0A	; 10
   10618:	3d c3       	rjmp	.+1658   	; 0x10c94 <PrintIdle+0xb78>

		       break;
		  case 6:
		       //RemZeroLead(strVolume);
		       CarriegeReturn();
   1061a:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Jml Liter   : %s L"),strVolume);
   1061e:	00 d0       	rcall	.+0      	; 0x10620 <PrintIdle+0x504>
   10620:	00 d0       	rcall	.+0      	; 0x10622 <PrintIdle+0x506>
   10622:	00 d0       	rcall	.+0      	; 0x10624 <PrintIdle+0x508>
   10624:	ed b7       	in	r30, 0x3d	; 61
   10626:	fe b7       	in	r31, 0x3e	; 62
   10628:	31 96       	adiw	r30, 0x01	; 1
   1062a:	ad b7       	in	r26, 0x3d	; 61
   1062c:	be b7       	in	r27, 0x3e	; 62
   1062e:	12 96       	adiw	r26, 0x02	; 2
   10630:	1c 93       	st	X, r17
   10632:	0e 93       	st	-X, r16
   10634:	11 97       	sbiw	r26, 0x01	; 1
   10636:	8f e7       	ldi	r24, 0x7F	; 127
   10638:	9a e0       	ldi	r25, 0x0A	; 10
   1063a:	93 83       	std	Z+3, r25	; 0x03
   1063c:	82 83       	std	Z+2, r24	; 0x02
   1063e:	83 e5       	ldi	r24, 0x53	; 83
   10640:	94 e0       	ldi	r25, 0x04	; 4
   10642:	0f c3       	rjmp	.+1566   	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 7:
		       //RemZeroLead(strAmount);		       
			   //FormatCurrency(strAmount);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   10644:	81 ec       	ldi	r24, 0xC1	; 193
   10646:	93 e0       	ldi	r25, 0x03	; 3
   10648:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   1064c:	0a e9       	ldi	r16, 0x9A	; 154
   1064e:	19 e0       	ldi	r17, 0x09	; 9
   10650:	81 30       	cpi	r24, 0x01	; 1
   10652:	a9 f4       	brne	.+42     	; 0x1067e <PrintIdle+0x562>
			   	   CarriegeReturn();
   10654:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Jml Rupiah  : Rp.%s"),strAmount);
   10658:	00 d0       	rcall	.+0      	; 0x1065a <PrintIdle+0x53e>
   1065a:	00 d0       	rcall	.+0      	; 0x1065c <PrintIdle+0x540>
   1065c:	00 d0       	rcall	.+0      	; 0x1065e <PrintIdle+0x542>
   1065e:	ed b7       	in	r30, 0x3d	; 61
   10660:	fe b7       	in	r31, 0x3e	; 62
   10662:	31 96       	adiw	r30, 0x01	; 1
   10664:	ad b7       	in	r26, 0x3d	; 61
   10666:	be b7       	in	r27, 0x3e	; 62
   10668:	12 96       	adiw	r26, 0x02	; 2
   1066a:	1c 93       	st	X, r17
   1066c:	0e 93       	st	-X, r16
   1066e:	11 97       	sbiw	r26, 0x01	; 1
   10670:	85 e6       	ldi	r24, 0x65	; 101
   10672:	9a e0       	ldi	r25, 0x0A	; 10
   10674:	93 83       	std	Z+3, r25	; 0x03
   10676:	82 83       	std	Z+2, r24	; 0x02
   10678:	81 e9       	ldi	r24, 0x91	; 145
   1067a:	9c e0       	ldi	r25, 0x0C	; 12
   1067c:	f2 c2       	rjmp	.+1508   	; 0x10c62 <PrintIdle+0xb46>
			   }else sprintf_P(strPrint,PSTR(""));
   1067e:	00 d0       	rcall	.+0      	; 0x10680 <PrintIdle+0x564>
   10680:	00 d0       	rcall	.+0      	; 0x10682 <PrintIdle+0x566>
   10682:	ad b7       	in	r26, 0x3d	; 61
   10684:	be b7       	in	r27, 0x3e	; 62
   10686:	12 96       	adiw	r26, 0x02	; 2
   10688:	1c 93       	st	X, r17
   1068a:	0e 93       	st	-X, r16
   1068c:	11 97       	sbiw	r26, 0x01	; 1
   1068e:	84 e6       	ldi	r24, 0x64	; 100
   10690:	9a e0       	ldi	r25, 0x0A	; 10
   10692:	00 c3       	rjmp	.+1536   	; 0x10c94 <PrintIdle+0xb78>

		       break;
		  case 8:
		       if ((strlen(strLicPlate)>0)&&(SpaceOnly(strLicPlate)==False)){
   10694:	08 ed       	ldi	r16, 0xD8	; 216
   10696:	19 e0       	ldi	r17, 0x09	; 9
   10698:	80 91 d8 09 	lds	r24, 0x09D8
   1069c:	88 23       	and	r24, r24
   1069e:	09 f4       	brne	.+2      	; 0x106a2 <PrintIdle+0x586>
   106a0:	6d c1       	rjmp	.+730    	; 0x1097c <PrintIdle+0x860>
   106a2:	c8 01       	movw	r24, r16
   106a4:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   106a8:	88 23       	and	r24, r24
   106aa:	09 f0       	breq	.+2      	; 0x106ae <PrintIdle+0x592>
   106ac:	67 c1       	rjmp	.+718    	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   106ae:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      No.Polisi   : %s"),strLicPlate);
   106b2:	00 d0       	rcall	.+0      	; 0x106b4 <PrintIdle+0x598>
   106b4:	00 d0       	rcall	.+0      	; 0x106b6 <PrintIdle+0x59a>
   106b6:	00 d0       	rcall	.+0      	; 0x106b8 <PrintIdle+0x59c>
   106b8:	ed b7       	in	r30, 0x3d	; 61
   106ba:	fe b7       	in	r31, 0x3e	; 62
   106bc:	31 96       	adiw	r30, 0x01	; 1
   106be:	8a e9       	ldi	r24, 0x9A	; 154
   106c0:	99 e0       	ldi	r25, 0x09	; 9
   106c2:	ad b7       	in	r26, 0x3d	; 61
   106c4:	be b7       	in	r27, 0x3e	; 62
   106c6:	12 96       	adiw	r26, 0x02	; 2
   106c8:	9c 93       	st	X, r25
   106ca:	8e 93       	st	-X, r24
   106cc:	11 97       	sbiw	r26, 0x01	; 1
   106ce:	8d e4       	ldi	r24, 0x4D	; 77
   106d0:	9a e0       	ldi	r25, 0x0A	; 10
   106d2:	1f c0       	rjmp	.+62     	; 0x10712 <PrintIdle+0x5f6>
                   ClearMem(strLicPlate);
				   }
               else ClearMem(strPrint);
		       break;
		  case 9:
		       if ((strlen(strOdometer)>0)&&(SpaceOnly(strOdometer)==False)){
   106d4:	01 ea       	ldi	r16, 0xA1	; 161
   106d6:	14 e0       	ldi	r17, 0x04	; 4
   106d8:	80 91 a1 04 	lds	r24, 0x04A1
   106dc:	88 23       	and	r24, r24
   106de:	09 f4       	brne	.+2      	; 0x106e2 <PrintIdle+0x5c6>
   106e0:	4d c1       	rjmp	.+666    	; 0x1097c <PrintIdle+0x860>
   106e2:	c8 01       	movw	r24, r16
   106e4:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   106e8:	88 23       	and	r24, r24
   106ea:	09 f0       	breq	.+2      	; 0x106ee <PrintIdle+0x5d2>
   106ec:	47 c1       	rjmp	.+654    	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   106ee:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("      Odometer    : %s"),strOdometer);
   106f2:	00 d0       	rcall	.+0      	; 0x106f4 <PrintIdle+0x5d8>
   106f4:	00 d0       	rcall	.+0      	; 0x106f6 <PrintIdle+0x5da>
   106f6:	00 d0       	rcall	.+0      	; 0x106f8 <PrintIdle+0x5dc>
   106f8:	ed b7       	in	r30, 0x3d	; 61
   106fa:	fe b7       	in	r31, 0x3e	; 62
   106fc:	31 96       	adiw	r30, 0x01	; 1
   106fe:	8a e9       	ldi	r24, 0x9A	; 154
   10700:	99 e0       	ldi	r25, 0x09	; 9
   10702:	ad b7       	in	r26, 0x3d	; 61
   10704:	be b7       	in	r27, 0x3e	; 62
   10706:	12 96       	adiw	r26, 0x02	; 2
   10708:	9c 93       	st	X, r25
   1070a:	8e 93       	st	-X, r24
   1070c:	11 97       	sbiw	r26, 0x01	; 1
   1070e:	86 e3       	ldi	r24, 0x36	; 54
   10710:	9a e0       	ldi	r25, 0x0A	; 10
   10712:	93 83       	std	Z+3, r25	; 0x03
   10714:	82 83       	std	Z+2, r24	; 0x02
   10716:	15 83       	std	Z+5, r17	; 0x05
   10718:	04 83       	std	Z+4, r16	; 0x04
   1071a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				   ClearMem(strOdometer);
   1071e:	ed b7       	in	r30, 0x3d	; 61
   10720:	fe b7       	in	r31, 0x3e	; 62
   10722:	36 96       	adiw	r30, 0x06	; 6
   10724:	0f b6       	in	r0, 0x3f	; 63
   10726:	f8 94       	cli
   10728:	fe bf       	out	0x3e, r31	; 62
   1072a:	0f be       	out	0x3f, r0	; 63
   1072c:	ed bf       	out	0x3d, r30	; 61
   1072e:	c8 01       	movw	r24, r16
   10730:	0e 94 49 a0 	call	0x14092	; 0x14092 <ClearMem>
   10734:	b9 c2       	rjmp	.+1394   	; 0x10ca8 <PrintIdle+0xb8c>
			   }else ClearMem(strPrint);
		       break;
		  case 10:
		       CarriegeReturn();
   10736:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   1073a:	00 d0       	rcall	.+0      	; 0x1073c <PrintIdle+0x620>
   1073c:	00 d0       	rcall	.+0      	; 0x1073e <PrintIdle+0x622>
   1073e:	ad b7       	in	r26, 0x3d	; 61
   10740:	be b7       	in	r27, 0x3e	; 62
   10742:	12 96       	adiw	r26, 0x02	; 2
   10744:	1c 93       	st	X, r17
   10746:	0e 93       	st	-X, r16
   10748:	11 97       	sbiw	r26, 0x01	; 1
   1074a:	83 e1       	ldi	r24, 0x13	; 19
   1074c:	9a e0       	ldi	r25, 0x0A	; 10
   1074e:	a2 c2       	rjmp	.+1348   	; 0x10c94 <PrintIdle+0xb78>
		       break;
          //ChangeMOPPrint
		  case 11:
			   if ((MOPType==MOP_LOCAL_ACCOUNT)||(MOPType==MOP_DEBIT_CARD)||(MOPType==MOP_LOYALTY_LOCAL_ACCOUNT)){
   10750:	80 91 96 02 	lds	r24, 0x0296
   10754:	81 30       	cpi	r24, 0x01	; 1
   10756:	21 f0       	breq	.+8      	; 0x10760 <PrintIdle+0x644>
   10758:	83 30       	cpi	r24, 0x03	; 3
   1075a:	11 f0       	breq	.+4      	; 0x10760 <PrintIdle+0x644>
   1075c:	86 30       	cpi	r24, 0x06	; 6
   1075e:	b9 f4       	brne	.+46     	; 0x1078e <PrintIdle+0x672>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   10760:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Kartu ID : %s"),strCardID);
   10764:	00 d0       	rcall	.+0      	; 0x10766 <PrintIdle+0x64a>
   10766:	00 d0       	rcall	.+0      	; 0x10768 <PrintIdle+0x64c>
   10768:	00 d0       	rcall	.+0      	; 0x1076a <PrintIdle+0x64e>
   1076a:	ed b7       	in	r30, 0x3d	; 61
   1076c:	fe b7       	in	r31, 0x3e	; 62
   1076e:	31 96       	adiw	r30, 0x01	; 1
   10770:	8a e9       	ldi	r24, 0x9A	; 154
   10772:	99 e0       	ldi	r25, 0x09	; 9
   10774:	ad b7       	in	r26, 0x3d	; 61
   10776:	be b7       	in	r27, 0x3e	; 62
   10778:	12 96       	adiw	r26, 0x02	; 2
   1077a:	9c 93       	st	X, r25
   1077c:	8e 93       	st	-X, r24
   1077e:	11 97       	sbiw	r26, 0x01	; 1
   10780:	81 e0       	ldi	r24, 0x01	; 1
   10782:	9a e0       	ldi	r25, 0x0A	; 10
   10784:	93 83       	std	Z+3, r25	; 0x03
   10786:	82 83       	std	Z+2, r24	; 0x02
   10788:	87 e6       	ldi	r24, 0x67	; 103
   1078a:	9c e0       	ldi	r25, 0x0C	; 12
   1078c:	18 c0       	rjmp	.+48     	; 0x107be <PrintIdle+0x6a2>
				   IsSignedField=True;
				   }
	           else
			   if (MOPType==MOP_VOUCHER){
   1078e:	87 30       	cpi	r24, 0x07	; 7
   10790:	f1 f4       	brne	.+60     	; 0x107ce <PrintIdle+0x6b2>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   10792:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Voucher No: %s"),strVoucherNum);
   10796:	00 d0       	rcall	.+0      	; 0x10798 <PrintIdle+0x67c>
   10798:	00 d0       	rcall	.+0      	; 0x1079a <PrintIdle+0x67e>
   1079a:	00 d0       	rcall	.+0      	; 0x1079c <PrintIdle+0x680>
   1079c:	ed b7       	in	r30, 0x3d	; 61
   1079e:	fe b7       	in	r31, 0x3e	; 62
   107a0:	31 96       	adiw	r30, 0x01	; 1
   107a2:	8a e9       	ldi	r24, 0x9A	; 154
   107a4:	99 e0       	ldi	r25, 0x09	; 9
   107a6:	ad b7       	in	r26, 0x3d	; 61
   107a8:	be b7       	in	r27, 0x3e	; 62
   107aa:	12 96       	adiw	r26, 0x02	; 2
   107ac:	9c 93       	st	X, r25
   107ae:	8e 93       	st	-X, r24
   107b0:	11 97       	sbiw	r26, 0x01	; 1
   107b2:	8e ee       	ldi	r24, 0xEE	; 238
   107b4:	99 e0       	ldi	r25, 0x09	; 9
   107b6:	93 83       	std	Z+3, r25	; 0x03
   107b8:	82 83       	std	Z+2, r24	; 0x02
   107ba:	8a e1       	ldi	r24, 0x1A	; 26
   107bc:	9d e0       	ldi	r25, 0x0D	; 13
   107be:	95 83       	std	Z+5, r25	; 0x05
   107c0:	84 83       	std	Z+4, r24	; 0x04
   107c2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				   IsSignedField=True;
   107c6:	81 e0       	ldi	r24, 0x01	; 1
   107c8:	80 93 dd 02 	sts	0x02DD, r24
   107cc:	4e c2       	rjmp	.+1180   	; 0x10c6a <PrintIdle+0xb4e>
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   107ce:	88 30       	cpi	r24, 0x08	; 8
   107d0:	09 f0       	breq	.+2      	; 0x107d4 <PrintIdle+0x6b8>
   107d2:	d4 c0       	rjmp	.+424    	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   107d4:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("          *** PUMP TEST ***       "));
   107d8:	00 d0       	rcall	.+0      	; 0x107da <PrintIdle+0x6be>
   107da:	00 d0       	rcall	.+0      	; 0x107dc <PrintIdle+0x6c0>
   107dc:	8a e9       	ldi	r24, 0x9A	; 154
   107de:	99 e0       	ldi	r25, 0x09	; 9
   107e0:	ad b7       	in	r26, 0x3d	; 61
   107e2:	be b7       	in	r27, 0x3e	; 62
   107e4:	12 96       	adiw	r26, 0x02	; 2
   107e6:	9c 93       	st	X, r25
   107e8:	8e 93       	st	-X, r24
   107ea:	11 97       	sbiw	r26, 0x01	; 1
   107ec:	8b ec       	ldi	r24, 0xCB	; 203
   107ee:	99 e0       	ldi	r25, 0x09	; 9
   107f0:	14 96       	adiw	r26, 0x04	; 4
   107f2:	9c 93       	st	X, r25
   107f4:	8e 93       	st	-X, r24
   107f6:	13 97       	sbiw	r26, 0x03	; 3
   107f8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
				   IsSignedField=False;
   107fc:	10 92 dd 02 	sts	0x02DD, r1
   10800:	4f c2       	rjmp	.+1182   	; 0x10ca0 <PrintIdle+0xb84>
				   }
               else ClearMem(strPrint);
		       break;
          case 12:
			   if (MOPType==MOP_LOCAL_ACCOUNT) {
   10802:	80 91 96 02 	lds	r24, 0x0296
   10806:	81 30       	cpi	r24, 0x01	; 1
   10808:	99 f4       	brne	.+38     	; 0x10830 <PrintIdle+0x714>
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   1080a:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Nama     : %s"),strCardHolder);
   1080e:	00 d0       	rcall	.+0      	; 0x10810 <PrintIdle+0x6f4>
   10810:	00 d0       	rcall	.+0      	; 0x10812 <PrintIdle+0x6f6>
   10812:	00 d0       	rcall	.+0      	; 0x10814 <PrintIdle+0x6f8>
   10814:	ed b7       	in	r30, 0x3d	; 61
   10816:	fe b7       	in	r31, 0x3e	; 62
   10818:	31 96       	adiw	r30, 0x01	; 1
   1081a:	8a e9       	ldi	r24, 0x9A	; 154
   1081c:	99 e0       	ldi	r25, 0x09	; 9
   1081e:	ad b7       	in	r26, 0x3d	; 61
   10820:	be b7       	in	r27, 0x3e	; 62
   10822:	12 96       	adiw	r26, 0x02	; 2
   10824:	9c 93       	st	X, r25
   10826:	8e 93       	st	-X, r24
   10828:	11 97       	sbiw	r26, 0x01	; 1
   1082a:	89 eb       	ldi	r24, 0xB9	; 185
   1082c:	99 e0       	ldi	r25, 0x09	; 9
   1082e:	41 c0       	rjmp	.+130    	; 0x108b2 <PrintIdle+0x796>
				   }
               else 
               if (MOPType==MOP_DEBIT_CARD) {//EDCApprovalCode
   10830:	83 30       	cpi	r24, 0x03	; 3
   10832:	09 f0       	breq	.+2      	; 0x10836 <PrintIdle+0x71a>
   10834:	43 c0       	rjmp	.+134    	; 0x108bc <PrintIdle+0x7a0>
			       if (IsPrintApprovalCode==True){
   10836:	80 91 78 02 	lds	r24, 0x0278
   1083a:	81 30       	cpi	r24, 0x01	; 1
   1083c:	41 f5       	brne	.+80     	; 0x1088e <PrintIdle+0x772>
				       IsPrintApprovalCode=False;
   1083e:	10 92 78 02 	sts	0x0278, r1
					   FillChar(strCardHolder,0,sizeof(strCardHolder));
   10842:	02 e0       	ldi	r16, 0x02	; 2
   10844:	14 e0       	ldi	r17, 0x04	; 4
   10846:	c8 01       	movw	r24, r16
   10848:	60 e0       	ldi	r22, 0x00	; 0
   1084a:	70 e0       	ldi	r23, 0x00	; 0
   1084c:	49 e2       	ldi	r20, 0x29	; 41
   1084e:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
					   sprintf_P(strCardHolder,PSTR("%s  "),strApprovalCode);
   10852:	00 d0       	rcall	.+0      	; 0x10854 <PrintIdle+0x738>
   10854:	00 d0       	rcall	.+0      	; 0x10856 <PrintIdle+0x73a>
   10856:	00 d0       	rcall	.+0      	; 0x10858 <PrintIdle+0x73c>
   10858:	ed b7       	in	r30, 0x3d	; 61
   1085a:	fe b7       	in	r31, 0x3e	; 62
   1085c:	31 96       	adiw	r30, 0x01	; 1
   1085e:	ad b7       	in	r26, 0x3d	; 61
   10860:	be b7       	in	r27, 0x3e	; 62
   10862:	12 96       	adiw	r26, 0x02	; 2
   10864:	1c 93       	st	X, r17
   10866:	0e 93       	st	-X, r16
   10868:	11 97       	sbiw	r26, 0x01	; 1
   1086a:	84 eb       	ldi	r24, 0xB4	; 180
   1086c:	99 e0       	ldi	r25, 0x09	; 9
   1086e:	93 83       	std	Z+3, r25	; 0x03
   10870:	82 83       	std	Z+2, r24	; 0x02
   10872:	8e ec       	ldi	r24, 0xCE	; 206
   10874:	98 e0       	ldi	r25, 0x08	; 8
   10876:	95 83       	std	Z+5, r25	; 0x05
   10878:	84 83       	std	Z+4, r24	; 0x04
   1087a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
   1087e:	ed b7       	in	r30, 0x3d	; 61
   10880:	fe b7       	in	r31, 0x3e	; 62
   10882:	36 96       	adiw	r30, 0x06	; 6
   10884:	0f b6       	in	r0, 0x3f	; 63
   10886:	f8 94       	cli
   10888:	fe bf       	out	0x3e, r31	; 62
   1088a:	0f be       	out	0x3f, r0	; 63
   1088c:	ed bf       	out	0x3d, r30	; 61
				   }
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   1088e:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Appr Code: %s"),strCardHolder);
   10892:	00 d0       	rcall	.+0      	; 0x10894 <PrintIdle+0x778>
   10894:	00 d0       	rcall	.+0      	; 0x10896 <PrintIdle+0x77a>
   10896:	00 d0       	rcall	.+0      	; 0x10898 <PrintIdle+0x77c>
   10898:	ed b7       	in	r30, 0x3d	; 61
   1089a:	fe b7       	in	r31, 0x3e	; 62
   1089c:	31 96       	adiw	r30, 0x01	; 1
   1089e:	8a e9       	ldi	r24, 0x9A	; 154
   108a0:	99 e0       	ldi	r25, 0x09	; 9
   108a2:	ad b7       	in	r26, 0x3d	; 61
   108a4:	be b7       	in	r27, 0x3e	; 62
   108a6:	12 96       	adiw	r26, 0x02	; 2
   108a8:	9c 93       	st	X, r25
   108aa:	8e 93       	st	-X, r24
   108ac:	11 97       	sbiw	r26, 0x01	; 1
   108ae:	82 ea       	ldi	r24, 0xA2	; 162
   108b0:	99 e0       	ldi	r25, 0x09	; 9
   108b2:	93 83       	std	Z+3, r25	; 0x03
   108b4:	82 83       	std	Z+2, r24	; 0x02
   108b6:	82 e0       	ldi	r24, 0x02	; 2
   108b8:	94 e0       	ldi	r25, 0x04	; 4
   108ba:	d3 c1       	rjmp	.+934    	; 0x10c62 <PrintIdle+0xb46>
				   }
               else
			   if (MOPType==MOP_VOUCHER){
   108bc:	87 30       	cpi	r24, 0x07	; 7
   108be:	79 f4       	brne	.+30     	; 0x108de <PrintIdle+0x7c2>
			       CarriegeReturn();
   108c0:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("  "));
   108c4:	00 d0       	rcall	.+0      	; 0x108c6 <PrintIdle+0x7aa>
   108c6:	00 d0       	rcall	.+0      	; 0x108c8 <PrintIdle+0x7ac>
   108c8:	8a e9       	ldi	r24, 0x9A	; 154
   108ca:	99 e0       	ldi	r25, 0x09	; 9
   108cc:	ad b7       	in	r26, 0x3d	; 61
   108ce:	be b7       	in	r27, 0x3e	; 62
   108d0:	12 96       	adiw	r26, 0x02	; 2
   108d2:	9c 93       	st	X, r25
   108d4:	8e 93       	st	-X, r24
   108d6:	11 97       	sbiw	r26, 0x01	; 1
   108d8:	8f e9       	ldi	r24, 0x9F	; 159
   108da:	99 e0       	ldi	r25, 0x09	; 9
   108dc:	db c1       	rjmp	.+950    	; 0x10c94 <PrintIdle+0xb78>
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   108de:	88 30       	cpi	r24, 0x08	; 8
   108e0:	09 f0       	breq	.+2      	; 0x108e4 <PrintIdle+0x7c8>
   108e2:	4c c0       	rjmp	.+152    	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   108e4:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                 "));
   108e8:	00 d0       	rcall	.+0      	; 0x108ea <PrintIdle+0x7ce>
   108ea:	00 d0       	rcall	.+0      	; 0x108ec <PrintIdle+0x7d0>
   108ec:	8a e9       	ldi	r24, 0x9A	; 154
   108ee:	99 e0       	ldi	r25, 0x09	; 9
   108f0:	ed b7       	in	r30, 0x3d	; 61
   108f2:	fe b7       	in	r31, 0x3e	; 62
   108f4:	92 83       	std	Z+2, r25	; 0x02
   108f6:	81 83       	std	Z+1, r24	; 0x01
   108f8:	8d e8       	ldi	r24, 0x8D	; 141
   108fa:	99 e0       	ldi	r25, 0x09	; 9
   108fc:	23 c0       	rjmp	.+70     	; 0x10944 <PrintIdle+0x828>
				   }
               else ClearMem(strPrint);
		       break;
          case 13:
		       if (IsSignedField==True){
   108fe:	80 91 dd 02 	lds	r24, 0x02DD
   10902:	81 30       	cpi	r24, 0x01	; 1
   10904:	d9 f5       	brne	.+118    	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   10906:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   1090a:	00 d0       	rcall	.+0      	; 0x1090c <PrintIdle+0x7f0>
   1090c:	00 d0       	rcall	.+0      	; 0x1090e <PrintIdle+0x7f2>
   1090e:	8a e9       	ldi	r24, 0x9A	; 154
   10910:	99 e0       	ldi	r25, 0x09	; 9
   10912:	ad b7       	in	r26, 0x3d	; 61
   10914:	be b7       	in	r27, 0x3e	; 62
   10916:	12 96       	adiw	r26, 0x02	; 2
   10918:	9c 93       	st	X, r25
   1091a:	8e 93       	st	-X, r24
   1091c:	11 97       	sbiw	r26, 0x01	; 1
   1091e:	86 e7       	ldi	r24, 0x76	; 118
   10920:	99 e0       	ldi	r25, 0x09	; 9
   10922:	b8 c1       	rjmp	.+880    	; 0x10c94 <PrintIdle+0xb78>
               }else ClearMem(strPrint);
		       break;
          case 14:
		       if (IsSignedField==True){
   10924:	80 91 dd 02 	lds	r24, 0x02DD
   10928:	81 30       	cpi	r24, 0x01	; 1
   1092a:	41 f5       	brne	.+80     	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   1092c:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   10930:	00 d0       	rcall	.+0      	; 0x10932 <PrintIdle+0x816>
   10932:	00 d0       	rcall	.+0      	; 0x10934 <PrintIdle+0x818>
   10934:	8a e9       	ldi	r24, 0x9A	; 154
   10936:	99 e0       	ldi	r25, 0x09	; 9
   10938:	ed b7       	in	r30, 0x3d	; 61
   1093a:	fe b7       	in	r31, 0x3e	; 62
   1093c:	92 83       	std	Z+2, r25	; 0x02
   1093e:	81 83       	std	Z+1, r24	; 0x01
   10940:	8f e5       	ldi	r24, 0x5F	; 95
   10942:	99 e0       	ldi	r25, 0x09	; 9
   10944:	94 83       	std	Z+4, r25	; 0x04
   10946:	83 83       	std	Z+3, r24	; 0x03
   10948:	a9 c1       	rjmp	.+850    	; 0x10c9c <PrintIdle+0xb80>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 17:
		       if (IsSignedField==True){
   1094a:	80 91 dd 02 	lds	r24, 0x02DD
   1094e:	81 30       	cpi	r24, 0x01	; 1
   10950:	a9 f4       	brne	.+42     	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   10952:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Tanda Tangan  (______________)"));
   10956:	00 d0       	rcall	.+0      	; 0x10958 <PrintIdle+0x83c>
   10958:	00 d0       	rcall	.+0      	; 0x1095a <PrintIdle+0x83e>
   1095a:	8a e9       	ldi	r24, 0x9A	; 154
   1095c:	99 e0       	ldi	r25, 0x09	; 9
   1095e:	ad b7       	in	r26, 0x3d	; 61
   10960:	be b7       	in	r27, 0x3e	; 62
   10962:	12 96       	adiw	r26, 0x02	; 2
   10964:	9c 93       	st	X, r25
   10966:	8e 93       	st	-X, r24
   10968:	11 97       	sbiw	r26, 0x01	; 1
   1096a:	8c e3       	ldi	r24, 0x3C	; 60
   1096c:	99 e0       	ldi	r25, 0x09	; 9
   1096e:	92 c1       	rjmp	.+804    	; 0x10c94 <PrintIdle+0xb78>
               }else ClearMem(strPrint);
		       break;
          case 18:
		       if (IsSignedField==True){
   10970:	80 91 dd 02 	lds	r24, 0x02DD
   10974:	81 30       	cpi	r24, 0x01	; 1
   10976:	11 f4       	brne	.+4      	; 0x1097c <PrintIdle+0x860>
			       IsSignedField=False;
   10978:	10 92 dd 02 	sts	0x02DD, r1
			       //CarriegeReturn();
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
   1097c:	8a e9       	ldi	r24, 0x9A	; 154
   1097e:	99 e0       	ldi	r25, 0x09	; 9
   10980:	d7 ce       	rjmp	.-594    	; 0x10730 <PrintIdle+0x614>
               }else ClearMem(strPrint);
		       break;
          case 19://PrintMOP Name
		       if (MOPType!=MOP_CASH){
   10982:	80 91 96 02 	lds	r24, 0x0296
   10986:	88 23       	and	r24, r24
   10988:	c9 f3       	breq	.-14     	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   1098a:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			       //RemSpaceLag(strMOPName);
			       sprintf_P(strPrint,PSTR("    .%s"),strMOPName);
   1098e:	00 d0       	rcall	.+0      	; 0x10990 <PrintIdle+0x874>
   10990:	00 d0       	rcall	.+0      	; 0x10992 <PrintIdle+0x876>
   10992:	00 d0       	rcall	.+0      	; 0x10994 <PrintIdle+0x878>
   10994:	ed b7       	in	r30, 0x3d	; 61
   10996:	fe b7       	in	r31, 0x3e	; 62
   10998:	31 96       	adiw	r30, 0x01	; 1
   1099a:	8a e9       	ldi	r24, 0x9A	; 154
   1099c:	99 e0       	ldi	r25, 0x09	; 9
   1099e:	ad b7       	in	r26, 0x3d	; 61
   109a0:	be b7       	in	r27, 0x3e	; 62
   109a2:	12 96       	adiw	r26, 0x02	; 2
   109a4:	9c 93       	st	X, r25
   109a6:	8e 93       	st	-X, r24
   109a8:	11 97       	sbiw	r26, 0x01	; 1
   109aa:	84 e3       	ldi	r24, 0x34	; 52
   109ac:	99 e0       	ldi	r25, 0x09	; 9
   109ae:	93 83       	std	Z+3, r25	; 0x03
   109b0:	82 83       	std	Z+2, r24	; 0x02
   109b2:	8b e5       	ldi	r24, 0x5B	; 91
   109b4:	96 e0       	ldi	r25, 0x06	; 6
   109b6:	55 c1       	rjmp	.+682    	; 0x10c62 <PrintIdle+0xb46>
			   }else ClearMem(strPrint);
		       break;
		  case 20:
		       if (MOPType!=MOP_CASH){
   109b8:	80 91 96 02 	lds	r24, 0x0296
   109bc:	88 23       	and	r24, r24
   109be:	f1 f2       	breq	.-68     	; 0x1097c <PrintIdle+0x860>
			       CarriegeReturn();
   109c0:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("    ------------------------------"));
   109c4:	00 d0       	rcall	.+0      	; 0x109c6 <PrintIdle+0x8aa>
   109c6:	00 d0       	rcall	.+0      	; 0x109c8 <PrintIdle+0x8ac>
   109c8:	8a e9       	ldi	r24, 0x9A	; 154
   109ca:	99 e0       	ldi	r25, 0x09	; 9
   109cc:	ad b7       	in	r26, 0x3d	; 61
   109ce:	be b7       	in	r27, 0x3e	; 62
   109d0:	12 96       	adiw	r26, 0x02	; 2
   109d2:	9c 93       	st	X, r25
   109d4:	8e 93       	st	-X, r24
   109d6:	11 97       	sbiw	r26, 0x01	; 1
   109d8:	81 e1       	ldi	r24, 0x11	; 17
   109da:	99 e0       	ldi	r25, 0x09	; 9
   109dc:	5b c1       	rjmp	.+694    	; 0x10c94 <PrintIdle+0xb78>
			   }else ClearMem(strPrint);
		       break;          
          //Loyalty
		  case 21:
		       CarriegeReturn();
   109de:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("         LOYALTY INFORMATION      "));
   109e2:	00 d0       	rcall	.+0      	; 0x109e4 <PrintIdle+0x8c8>
   109e4:	00 d0       	rcall	.+0      	; 0x109e6 <PrintIdle+0x8ca>
   109e6:	ed b7       	in	r30, 0x3d	; 61
   109e8:	fe b7       	in	r31, 0x3e	; 62
   109ea:	12 83       	std	Z+2, r17	; 0x02
   109ec:	01 83       	std	Z+1, r16	; 0x01
   109ee:	8e ee       	ldi	r24, 0xEE	; 238
   109f0:	98 e0       	ldi	r25, 0x08	; 8
   109f2:	a8 cf       	rjmp	.-176    	; 0x10944 <PrintIdle+0x828>
		       break; 			            
		  case 22:
		       CarriegeReturn();
   109f4:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Card ID      : %s"),strLoyCardID);
   109f8:	00 d0       	rcall	.+0      	; 0x109fa <PrintIdle+0x8de>
   109fa:	00 d0       	rcall	.+0      	; 0x109fc <PrintIdle+0x8e0>
   109fc:	00 d0       	rcall	.+0      	; 0x109fe <PrintIdle+0x8e2>
   109fe:	ed b7       	in	r30, 0x3d	; 61
   10a00:	fe b7       	in	r31, 0x3e	; 62
   10a02:	31 96       	adiw	r30, 0x01	; 1
   10a04:	ad b7       	in	r26, 0x3d	; 61
   10a06:	be b7       	in	r27, 0x3e	; 62
   10a08:	12 96       	adiw	r26, 0x02	; 2
   10a0a:	1c 93       	st	X, r17
   10a0c:	0e 93       	st	-X, r16
   10a0e:	11 97       	sbiw	r26, 0x01	; 1
   10a10:	87 ed       	ldi	r24, 0xD7	; 215
   10a12:	98 e0       	ldi	r25, 0x08	; 8
   10a14:	93 83       	std	Z+3, r25	; 0x03
   10a16:	82 83       	std	Z+2, r24	; 0x02
   10a18:	85 ec       	ldi	r24, 0xC5	; 197
   10a1a:	93 e0       	ldi	r25, 0x03	; 3
   10a1c:	22 c1       	rjmp	.+580    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 23:
		       CarriegeReturn();
   10a1e:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			   //RemSpaceLag(strLoyCardHolder);
		       sprintf_P(strPrint,PSTR("     Card Holder  : %s "),strLoyCardHolder);
   10a22:	00 d0       	rcall	.+0      	; 0x10a24 <PrintIdle+0x908>
   10a24:	00 d0       	rcall	.+0      	; 0x10a26 <PrintIdle+0x90a>
   10a26:	00 d0       	rcall	.+0      	; 0x10a28 <PrintIdle+0x90c>
   10a28:	ed b7       	in	r30, 0x3d	; 61
   10a2a:	fe b7       	in	r31, 0x3e	; 62
   10a2c:	31 96       	adiw	r30, 0x01	; 1
   10a2e:	ad b7       	in	r26, 0x3d	; 61
   10a30:	be b7       	in	r27, 0x3e	; 62
   10a32:	12 96       	adiw	r26, 0x02	; 2
   10a34:	1c 93       	st	X, r17
   10a36:	0e 93       	st	-X, r16
   10a38:	11 97       	sbiw	r26, 0x01	; 1
   10a3a:	8f eb       	ldi	r24, 0xBF	; 191
   10a3c:	98 e0       	ldi	r25, 0x08	; 8
   10a3e:	93 83       	std	Z+3, r25	; 0x03
   10a40:	82 83       	std	Z+2, r24	; 0x02
   10a42:	82 ea       	ldi	r24, 0xA2	; 162
   10a44:	93 e0       	ldi	r25, 0x03	; 3
   10a46:	0d c1       	rjmp	.+538    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 24:
		       if ((strlen(strCorporateID)>0)&&(SpaceOnly(strCorporateID)==False)){
   10a48:	08 ee       	ldi	r16, 0xE8	; 232
   10a4a:	1c e0       	ldi	r17, 0x0C	; 12
   10a4c:	80 91 e8 0c 	lds	r24, 0x0CE8
   10a50:	88 23       	and	r24, r24
   10a52:	09 f4       	brne	.+2      	; 0x10a56 <PrintIdle+0x93a>
   10a54:	93 cf       	rjmp	.-218    	; 0x1097c <PrintIdle+0x860>
   10a56:	c8 01       	movw	r24, r16
   10a58:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   10a5c:	88 23       	and	r24, r24
   10a5e:	09 f0       	breq	.+2      	; 0x10a62 <PrintIdle+0x946>
   10a60:	8d cf       	rjmp	.-230    	; 0x1097c <PrintIdle+0x860>
		           CarriegeReturn();
   10a62:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
				   //RemSpaceLag(strCorporateID);
		           sprintf_P(strPrint,PSTR("     Corp ID      : %s"),strCorporateID);
   10a66:	00 d0       	rcall	.+0      	; 0x10a68 <PrintIdle+0x94c>
   10a68:	00 d0       	rcall	.+0      	; 0x10a6a <PrintIdle+0x94e>
   10a6a:	00 d0       	rcall	.+0      	; 0x10a6c <PrintIdle+0x950>
   10a6c:	ed b7       	in	r30, 0x3d	; 61
   10a6e:	fe b7       	in	r31, 0x3e	; 62
   10a70:	31 96       	adiw	r30, 0x01	; 1
   10a72:	8a e9       	ldi	r24, 0x9A	; 154
   10a74:	99 e0       	ldi	r25, 0x09	; 9
   10a76:	ad b7       	in	r26, 0x3d	; 61
   10a78:	be b7       	in	r27, 0x3e	; 62
   10a7a:	12 96       	adiw	r26, 0x02	; 2
   10a7c:	9c 93       	st	X, r25
   10a7e:	8e 93       	st	-X, r24
   10a80:	11 97       	sbiw	r26, 0x01	; 1
   10a82:	88 ea       	ldi	r24, 0xA8	; 168
   10a84:	98 e0       	ldi	r25, 0x08	; 8
   10a86:	1f c0       	rjmp	.+62     	; 0x10ac6 <PrintIdle+0x9aa>
			   }else ClearMem(strPrint);
		       break;
		  case 25:
		       if ((strlen(strCorporateName)>0)&&(SpaceOnly(strCorporateName)==False)){
   10a88:	0b ea       	ldi	r16, 0xAB	; 171
   10a8a:	14 e0       	ldi	r17, 0x04	; 4
   10a8c:	80 91 ab 04 	lds	r24, 0x04AB
   10a90:	88 23       	and	r24, r24
   10a92:	09 f4       	brne	.+2      	; 0x10a96 <PrintIdle+0x97a>
   10a94:	73 cf       	rjmp	.-282    	; 0x1097c <PrintIdle+0x860>
   10a96:	c8 01       	movw	r24, r16
   10a98:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   10a9c:	88 23       	and	r24, r24
   10a9e:	09 f0       	breq	.+2      	; 0x10aa2 <PrintIdle+0x986>
   10aa0:	6d cf       	rjmp	.-294    	; 0x1097c <PrintIdle+0x860>
		           CarriegeReturn();
   10aa2:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
				   //RemSpaceLag(strCorporateName);
		           sprintf_P(strPrint,PSTR("     Corp Name    : %s"),strCorporateName);
   10aa6:	00 d0       	rcall	.+0      	; 0x10aa8 <PrintIdle+0x98c>
   10aa8:	00 d0       	rcall	.+0      	; 0x10aaa <PrintIdle+0x98e>
   10aaa:	00 d0       	rcall	.+0      	; 0x10aac <PrintIdle+0x990>
   10aac:	ed b7       	in	r30, 0x3d	; 61
   10aae:	fe b7       	in	r31, 0x3e	; 62
   10ab0:	31 96       	adiw	r30, 0x01	; 1
   10ab2:	8a e9       	ldi	r24, 0x9A	; 154
   10ab4:	99 e0       	ldi	r25, 0x09	; 9
   10ab6:	ad b7       	in	r26, 0x3d	; 61
   10ab8:	be b7       	in	r27, 0x3e	; 62
   10aba:	12 96       	adiw	r26, 0x02	; 2
   10abc:	9c 93       	st	X, r25
   10abe:	8e 93       	st	-X, r24
   10ac0:	11 97       	sbiw	r26, 0x01	; 1
   10ac2:	81 e9       	ldi	r24, 0x91	; 145
   10ac4:	98 e0       	ldi	r25, 0x08	; 8
   10ac6:	93 83       	std	Z+3, r25	; 0x03
   10ac8:	82 83       	std	Z+2, r24	; 0x02
   10aca:	15 83       	std	Z+5, r17	; 0x05
   10acc:	04 83       	std	Z+4, r16	; 0x04
   10ace:	cb c0       	rjmp	.+406    	; 0x10c66 <PrintIdle+0xb4a>
			   }else ClearMem(strPrint);
		       break;
		  case 26:
		       CarriegeReturn();
   10ad0:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Gain Points  : %s"),strGainPoints);
   10ad4:	00 d0       	rcall	.+0      	; 0x10ad6 <PrintIdle+0x9ba>
   10ad6:	00 d0       	rcall	.+0      	; 0x10ad8 <PrintIdle+0x9bc>
   10ad8:	00 d0       	rcall	.+0      	; 0x10ada <PrintIdle+0x9be>
   10ada:	ed b7       	in	r30, 0x3d	; 61
   10adc:	fe b7       	in	r31, 0x3e	; 62
   10ade:	31 96       	adiw	r30, 0x01	; 1
   10ae0:	ad b7       	in	r26, 0x3d	; 61
   10ae2:	be b7       	in	r27, 0x3e	; 62
   10ae4:	12 96       	adiw	r26, 0x02	; 2
   10ae6:	1c 93       	st	X, r17
   10ae8:	0e 93       	st	-X, r16
   10aea:	11 97       	sbiw	r26, 0x01	; 1
   10aec:	8a e7       	ldi	r24, 0x7A	; 122
   10aee:	98 e0       	ldi	r25, 0x08	; 8
   10af0:	93 83       	std	Z+3, r25	; 0x03
   10af2:	82 83       	std	Z+2, r24	; 0x02
   10af4:	89 e9       	ldi	r24, 0x99	; 153
   10af6:	93 e0       	ldi	r25, 0x03	; 3
   10af8:	b4 c0       	rjmp	.+360    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 27:
		       CarriegeReturn();
   10afa:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Prev Points  : %s"),strPrevPoints);
   10afe:	00 d0       	rcall	.+0      	; 0x10b00 <PrintIdle+0x9e4>
   10b00:	00 d0       	rcall	.+0      	; 0x10b02 <PrintIdle+0x9e6>
   10b02:	00 d0       	rcall	.+0      	; 0x10b04 <PrintIdle+0x9e8>
   10b04:	ed b7       	in	r30, 0x3d	; 61
   10b06:	fe b7       	in	r31, 0x3e	; 62
   10b08:	31 96       	adiw	r30, 0x01	; 1
   10b0a:	ad b7       	in	r26, 0x3d	; 61
   10b0c:	be b7       	in	r27, 0x3e	; 62
   10b0e:	12 96       	adiw	r26, 0x02	; 2
   10b10:	1c 93       	st	X, r17
   10b12:	0e 93       	st	-X, r16
   10b14:	11 97       	sbiw	r26, 0x01	; 1
   10b16:	83 e6       	ldi	r24, 0x63	; 99
   10b18:	98 e0       	ldi	r25, 0x08	; 8
   10b1a:	93 83       	std	Z+3, r25	; 0x03
   10b1c:	82 83       	std	Z+2, r24	; 0x02
   10b1e:	82 ef       	ldi	r24, 0xF2	; 242
   10b20:	99 e0       	ldi	r25, 0x09	; 9
   10b22:	9f c0       	rjmp	.+318    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 28:
		       CarriegeReturn();
   10b24:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Curr Points  : %s"),strLoyCurrentPoints);
   10b28:	00 d0       	rcall	.+0      	; 0x10b2a <PrintIdle+0xa0e>
   10b2a:	00 d0       	rcall	.+0      	; 0x10b2c <PrintIdle+0xa10>
   10b2c:	00 d0       	rcall	.+0      	; 0x10b2e <PrintIdle+0xa12>
   10b2e:	ed b7       	in	r30, 0x3d	; 61
   10b30:	fe b7       	in	r31, 0x3e	; 62
   10b32:	31 96       	adiw	r30, 0x01	; 1
   10b34:	ad b7       	in	r26, 0x3d	; 61
   10b36:	be b7       	in	r27, 0x3e	; 62
   10b38:	12 96       	adiw	r26, 0x02	; 2
   10b3a:	1c 93       	st	X, r17
   10b3c:	0e 93       	st	-X, r16
   10b3e:	11 97       	sbiw	r26, 0x01	; 1
   10b40:	8c e4       	ldi	r24, 0x4C	; 76
   10b42:	98 e0       	ldi	r25, 0x08	; 8
   10b44:	93 83       	std	Z+3, r25	; 0x03
   10b46:	82 83       	std	Z+2, r24	; 0x02
   10b48:	83 e1       	ldi	r24, 0x13	; 19
   10b4a:	99 e0       	ldi	r25, 0x09	; 9
   10b4c:	8a c0       	rjmp	.+276    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 29:
		       CarriegeReturn();
   10b4e:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Expiry       : %s"),strLoyExpiry);
   10b52:	00 d0       	rcall	.+0      	; 0x10b54 <PrintIdle+0xa38>
   10b54:	00 d0       	rcall	.+0      	; 0x10b56 <PrintIdle+0xa3a>
   10b56:	00 d0       	rcall	.+0      	; 0x10b58 <PrintIdle+0xa3c>
   10b58:	ed b7       	in	r30, 0x3d	; 61
   10b5a:	fe b7       	in	r31, 0x3e	; 62
   10b5c:	31 96       	adiw	r30, 0x01	; 1
   10b5e:	ad b7       	in	r26, 0x3d	; 61
   10b60:	be b7       	in	r27, 0x3e	; 62
   10b62:	12 96       	adiw	r26, 0x02	; 2
   10b64:	1c 93       	st	X, r17
   10b66:	0e 93       	st	-X, r16
   10b68:	11 97       	sbiw	r26, 0x01	; 1
   10b6a:	85 e3       	ldi	r24, 0x35	; 53
   10b6c:	98 e0       	ldi	r25, 0x08	; 8
   10b6e:	93 83       	std	Z+3, r25	; 0x03
   10b70:	82 83       	std	Z+2, r24	; 0x02
   10b72:	87 e5       	ldi	r24, 0x57	; 87
   10b74:	9d e0       	ldi	r25, 0x0D	; 13
   10b76:	75 c0       	rjmp	.+234    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 30:
		       CarriegeReturn();
   10b78:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			   //RemSpaceLag(strLoyRedeemPoints);
		       sprintf_P(strPrint,PSTR("     Total Redeem : %s"),strLoyRedeemPoints);
   10b7c:	00 d0       	rcall	.+0      	; 0x10b7e <PrintIdle+0xa62>
   10b7e:	00 d0       	rcall	.+0      	; 0x10b80 <PrintIdle+0xa64>
   10b80:	00 d0       	rcall	.+0      	; 0x10b82 <PrintIdle+0xa66>
   10b82:	ed b7       	in	r30, 0x3d	; 61
   10b84:	fe b7       	in	r31, 0x3e	; 62
   10b86:	31 96       	adiw	r30, 0x01	; 1
   10b88:	ad b7       	in	r26, 0x3d	; 61
   10b8a:	be b7       	in	r27, 0x3e	; 62
   10b8c:	12 96       	adiw	r26, 0x02	; 2
   10b8e:	1c 93       	st	X, r17
   10b90:	0e 93       	st	-X, r16
   10b92:	11 97       	sbiw	r26, 0x01	; 1
   10b94:	8e e1       	ldi	r24, 0x1E	; 30
   10b96:	98 e0       	ldi	r25, 0x08	; 8
   10b98:	93 83       	std	Z+3, r25	; 0x03
   10b9a:	82 83       	std	Z+2, r24	; 0x02
   10b9c:	88 e7       	ldi	r24, 0x78	; 120
   10b9e:	94 e0       	ldi	r25, 0x04	; 4
   10ba0:	60 c0       	rjmp	.+192    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 31:
		       CarriegeReturn();
   10ba2:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeV);
			   //FormatCurrency(strLoyCurrMonConsumeV);
		       sprintf_P(strPrint,PSTR("     Month Cons V : %s L"),strLoyCurrMonConsumeV);
   10ba6:	00 d0       	rcall	.+0      	; 0x10ba8 <PrintIdle+0xa8c>
   10ba8:	00 d0       	rcall	.+0      	; 0x10baa <PrintIdle+0xa8e>
   10baa:	00 d0       	rcall	.+0      	; 0x10bac <PrintIdle+0xa90>
   10bac:	ed b7       	in	r30, 0x3d	; 61
   10bae:	fe b7       	in	r31, 0x3e	; 62
   10bb0:	31 96       	adiw	r30, 0x01	; 1
   10bb2:	ad b7       	in	r26, 0x3d	; 61
   10bb4:	be b7       	in	r27, 0x3e	; 62
   10bb6:	12 96       	adiw	r26, 0x02	; 2
   10bb8:	1c 93       	st	X, r17
   10bba:	0e 93       	st	-X, r16
   10bbc:	11 97       	sbiw	r26, 0x01	; 1
   10bbe:	85 e0       	ldi	r24, 0x05	; 5
   10bc0:	98 e0       	ldi	r25, 0x08	; 8
   10bc2:	93 83       	std	Z+3, r25	; 0x03
   10bc4:	82 83       	std	Z+2, r24	; 0x02
   10bc6:	8b ec       	ldi	r24, 0xCB	; 203
   10bc8:	9c e0       	ldi	r25, 0x0C	; 12
   10bca:	4b c0       	rjmp	.+150    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 32:
		       CarriegeReturn();
   10bcc:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeA);
			   //FormatCurrency(strLoyCurrMonConsumeA);
		       sprintf_P(strPrint,PSTR("     Month Cons A : Rp.%s"),strLoyCurrMonConsumeA);
   10bd0:	00 d0       	rcall	.+0      	; 0x10bd2 <PrintIdle+0xab6>
   10bd2:	00 d0       	rcall	.+0      	; 0x10bd4 <PrintIdle+0xab8>
   10bd4:	00 d0       	rcall	.+0      	; 0x10bd6 <PrintIdle+0xaba>
   10bd6:	ed b7       	in	r30, 0x3d	; 61
   10bd8:	fe b7       	in	r31, 0x3e	; 62
   10bda:	31 96       	adiw	r30, 0x01	; 1
   10bdc:	ad b7       	in	r26, 0x3d	; 61
   10bde:	be b7       	in	r27, 0x3e	; 62
   10be0:	12 96       	adiw	r26, 0x02	; 2
   10be2:	1c 93       	st	X, r17
   10be4:	0e 93       	st	-X, r16
   10be6:	11 97       	sbiw	r26, 0x01	; 1
   10be8:	8b ee       	ldi	r24, 0xEB	; 235
   10bea:	97 e0       	ldi	r25, 0x07	; 7
   10bec:	93 83       	std	Z+3, r25	; 0x03
   10bee:	82 83       	std	Z+2, r24	; 0x02
   10bf0:	8c e5       	ldi	r24, 0x5C	; 92
   10bf2:	94 e0       	ldi	r25, 0x04	; 4
   10bf4:	36 c0       	rjmp	.+108    	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 33://EndOfLoyalty
		       CarriegeReturn();
   10bf6:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   10bfa:	00 d0       	rcall	.+0      	; 0x10bfc <PrintIdle+0xae0>
   10bfc:	00 d0       	rcall	.+0      	; 0x10bfe <PrintIdle+0xae2>
   10bfe:	ad b7       	in	r26, 0x3d	; 61
   10c00:	be b7       	in	r27, 0x3e	; 62
   10c02:	12 96       	adiw	r26, 0x02	; 2
   10c04:	1c 93       	st	X, r17
   10c06:	0e 93       	st	-X, r16
   10c08:	11 97       	sbiw	r26, 0x01	; 1
   10c0a:	88 ec       	ldi	r24, 0xC8	; 200
   10c0c:	97 e0       	ldi	r25, 0x07	; 7
   10c0e:	42 c0       	rjmp	.+132    	; 0x10c94 <PrintIdle+0xb78>
		       break;
		  case 34:
		       CarriegeReturn();
   10c10:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Dsc: %s"),strSurchargeDesc);
   10c14:	00 d0       	rcall	.+0      	; 0x10c16 <PrintIdle+0xafa>
   10c16:	00 d0       	rcall	.+0      	; 0x10c18 <PrintIdle+0xafc>
   10c18:	00 d0       	rcall	.+0      	; 0x10c1a <PrintIdle+0xafe>
   10c1a:	ed b7       	in	r30, 0x3d	; 61
   10c1c:	fe b7       	in	r31, 0x3e	; 62
   10c1e:	31 96       	adiw	r30, 0x01	; 1
   10c20:	ad b7       	in	r26, 0x3d	; 61
   10c22:	be b7       	in	r27, 0x3e	; 62
   10c24:	12 96       	adiw	r26, 0x02	; 2
   10c26:	1c 93       	st	X, r17
   10c28:	0e 93       	st	-X, r16
   10c2a:	11 97       	sbiw	r26, 0x01	; 1
   10c2c:	81 eb       	ldi	r24, 0xB1	; 177
   10c2e:	97 e0       	ldi	r25, 0x07	; 7
   10c30:	93 83       	std	Z+3, r25	; 0x03
   10c32:	82 83       	std	Z+2, r24	; 0x02
   10c34:	89 eb       	ldi	r24, 0xB9	; 185
   10c36:	98 e0       	ldi	r25, 0x08	; 8
   10c38:	14 c0       	rjmp	.+40     	; 0x10c62 <PrintIdle+0xb46>
		       break;
		  case 35:
		       CarriegeReturn();
   10c3a:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Amt: %s"),strSurchargeAmount);
   10c3e:	00 d0       	rcall	.+0      	; 0x10c40 <PrintIdle+0xb24>
   10c40:	00 d0       	rcall	.+0      	; 0x10c42 <PrintIdle+0xb26>
   10c42:	00 d0       	rcall	.+0      	; 0x10c44 <PrintIdle+0xb28>
   10c44:	ed b7       	in	r30, 0x3d	; 61
   10c46:	fe b7       	in	r31, 0x3e	; 62
   10c48:	31 96       	adiw	r30, 0x01	; 1
   10c4a:	ad b7       	in	r26, 0x3d	; 61
   10c4c:	be b7       	in	r27, 0x3e	; 62
   10c4e:	12 96       	adiw	r26, 0x02	; 2
   10c50:	1c 93       	st	X, r17
   10c52:	0e 93       	st	-X, r16
   10c54:	11 97       	sbiw	r26, 0x01	; 1
   10c56:	8a e9       	ldi	r24, 0x9A	; 154
   10c58:	97 e0       	ldi	r25, 0x07	; 7
   10c5a:	93 83       	std	Z+3, r25	; 0x03
   10c5c:	82 83       	std	Z+2, r24	; 0x02
   10c5e:	80 e3       	ldi	r24, 0x30	; 48
   10c60:	99 e0       	ldi	r25, 0x09	; 9
   10c62:	95 83       	std	Z+5, r25	; 0x05
   10c64:	84 83       	std	Z+4, r24	; 0x04
   10c66:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		       break;
   10c6a:	ed b7       	in	r30, 0x3d	; 61
   10c6c:	fe b7       	in	r31, 0x3e	; 62
   10c6e:	36 96       	adiw	r30, 0x06	; 6
   10c70:	0f b6       	in	r0, 0x3f	; 63
   10c72:	f8 94       	cli
   10c74:	fe bf       	out	0x3e, r31	; 62
   10c76:	0f be       	out	0x3f, r0	; 63
   10c78:	ed bf       	out	0x3d, r30	; 61
   10c7a:	16 c0       	rjmp	.+44     	; 0x10ca8 <PrintIdle+0xb8c>
		  case 36:
		       CarriegeReturn();
   10c7c:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   10c80:	00 d0       	rcall	.+0      	; 0x10c82 <PrintIdle+0xb66>
   10c82:	00 d0       	rcall	.+0      	; 0x10c84 <PrintIdle+0xb68>
   10c84:	ad b7       	in	r26, 0x3d	; 61
   10c86:	be b7       	in	r27, 0x3e	; 62
   10c88:	12 96       	adiw	r26, 0x02	; 2
   10c8a:	1c 93       	st	X, r17
   10c8c:	0e 93       	st	-X, r16
   10c8e:	11 97       	sbiw	r26, 0x01	; 1
   10c90:	87 e7       	ldi	r24, 0x77	; 119
   10c92:	97 e0       	ldi	r25, 0x07	; 7
   10c94:	14 96       	adiw	r26, 0x04	; 4
   10c96:	9c 93       	st	X, r25
   10c98:	8e 93       	st	-X, r24
   10c9a:	13 97       	sbiw	r26, 0x03	; 3
   10c9c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		       break;
   10ca0:	0f 90       	pop	r0
   10ca2:	0f 90       	pop	r0
   10ca4:	0f 90       	pop	r0
   10ca6:	0f 90       	pop	r0
		  }
		  iLoop=0;iSend=0;LSend=strlen(strPrint);
   10ca8:	10 92 d8 02 	sts	0x02D8, r1
   10cac:	10 92 d7 02 	sts	0x02D7, r1
   10cb0:	10 92 dc 02 	sts	0x02DC, r1
   10cb4:	10 92 db 02 	sts	0x02DB, r1
   10cb8:	ea e9       	ldi	r30, 0x9A	; 154
   10cba:	f9 e0       	ldi	r31, 0x09	; 9
   10cbc:	01 90       	ld	r0, Z+
   10cbe:	00 20       	and	r0, r0
   10cc0:	e9 f7       	brne	.-6      	; 0x10cbc <PrintIdle+0xba0>
   10cc2:	31 97       	sbiw	r30, 0x01	; 1
   10cc4:	ea 59       	subi	r30, 0x9A	; 154
   10cc6:	f9 40       	sbci	r31, 0x09	; 9
   10cc8:	f0 93 da 02 	sts	0x02DA, r31
   10ccc:	e0 93 d9 02 	sts	0x02D9, r30
          stPrintIdle=piPrintMessage;
   10cd0:	8a e0       	ldi	r24, 0x0A	; 10
   10cd2:	7f c1       	rjmp	.+766    	; 0x10fd2 <PrintIdle+0xeb6>
	      break;
     case piPrintMessage:
	      if (iSend<LSend){
   10cd4:	20 91 db 02 	lds	r18, 0x02DB
   10cd8:	30 91 dc 02 	lds	r19, 0x02DC
   10cdc:	80 91 d9 02 	lds	r24, 0x02D9
   10ce0:	90 91 da 02 	lds	r25, 0x02DA
   10ce4:	28 17       	cp	r18, r24
   10ce6:	39 07       	cpc	r19, r25
   10ce8:	68 f4       	brcc	.+26     	; 0x10d04 <PrintIdle+0xbe8>
		      iLoop++;
   10cea:	80 91 d7 02 	lds	r24, 0x02D7
   10cee:	90 91 d8 02 	lds	r25, 0x02D8
   10cf2:	01 96       	adiw	r24, 0x01	; 1
   10cf4:	90 93 d8 02 	sts	0x02D8, r25
   10cf8:	80 93 d7 02 	sts	0x02D7, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   10cfc:	10 92 94 02 	sts	0x0294, r1
				 stPrintIdle=piCheckPrintStatusMessage;
   10d00:	8c e0       	ldi	r24, 0x0C	; 12
   10d02:	67 c1       	rjmp	.+718    	; 0x10fd2 <PrintIdle+0xeb6>
				 }
			  }
          else{iMessage++;
   10d04:	80 91 df 02 	lds	r24, 0x02DF
   10d08:	8f 5f       	subi	r24, 0xFF	; 255
   10d0a:	80 93 df 02 	sts	0x02DF, r24
		      if (iMessage>MessageLine){
   10d0e:	90 91 de 02 	lds	r25, 0x02DE
   10d12:	98 17       	cp	r25, r24
   10d14:	30 f4       	brcc	.+12     	; 0x10d22 <PrintIdle+0xc06>
			      iFooter=0;				  
   10d16:	10 92 e2 02 	sts	0x02E2, r1
				  CarriegeReturn();
   10d1a:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
				  stPrintIdle=piLoadOperatorName;//piLoadFooter;
   10d1e:	85 e1       	ldi	r24, 0x15	; 21
   10d20:	58 c1       	rjmp	.+688    	; 0x10fd2 <PrintIdle+0xeb6>
			  }
			  else stPrintIdle=piLoadMessage;
   10d22:	89 e0       	ldi	r24, 0x09	; 9
   10d24:	56 c1       	rjmp	.+684    	; 0x10fd2 <PrintIdle+0xeb6>
			  }
	      break;
     case piCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   10d26:	80 91 91 02 	lds	r24, 0x0291
   10d2a:	88 23       	and	r24, r24
   10d2c:	09 f0       	breq	.+2      	; 0x10d30 <PrintIdle+0xc14>
   10d2e:	49 c1       	rjmp	.+658    	; 0x10fc2 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   10d30:	e0 91 db 02 	lds	r30, 0x02DB
   10d34:	f0 91 dc 02 	lds	r31, 0x02DC
   10d38:	e6 56       	subi	r30, 0x66	; 102
   10d3a:	f6 4f       	sbci	r31, 0xF6	; 246
   10d3c:	61 e0       	ldi	r22, 0x01	; 1
   10d3e:	40 81       	ld	r20, Z
   10d40:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
   10d44:	80 91 db 02 	lds	r24, 0x02DB
   10d48:	90 91 dc 02 	lds	r25, 0x02DC
   10d4c:	01 96       	adiw	r24, 0x01	; 1
   10d4e:	90 93 dc 02 	sts	0x02DC, r25
   10d52:	80 93 db 02 	sts	0x02DB, r24
		      stPrintIdle=piPrintMessage;
   10d56:	8a e0       	ldi	r24, 0x0A	; 10
   10d58:	32 c1       	rjmp	.+612    	; 0x10fbe <PrintIdle+0xea2>


	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   10d5a:	8e 01       	movw	r16, r28
   10d5c:	0f 5f       	subi	r16, 0xFF	; 255
   10d5e:	1f 4f       	sbci	r17, 0xFF	; 255
   10d60:	c8 01       	movw	r24, r16
   10d62:	65 e1       	ldi	r22, 0x15	; 21
   10d64:	70 e0       	ldi	r23, 0x00	; 0
   10d66:	42 e1       	ldi	r20, 0x12	; 18
   10d68:	50 e0       	ldi	r21, 0x00	; 0
   10d6a:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
   10d6e:	c8 01       	movw	r24, r16
   10d70:	b8 01       	movw	r22, r16
   10d72:	40 e0       	ldi	r20, 0x00	; 0
   10d74:	50 e0       	ldi	r21, 0x00	; 0
   10d76:	2f e0       	ldi	r18, 0x0F	; 15
   10d78:	30 e0       	ldi	r19, 0x00	; 0
   10d7a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		  if (strlen(strOperatorName)>0){
   10d7e:	89 81       	ldd	r24, Y+1	; 0x01
   10d80:	88 23       	and	r24, r24
   10d82:	09 f4       	brne	.+2      	; 0x10d86 <PrintIdle+0xc6a>
   10d84:	9d c0       	rjmp	.+314    	; 0x10ec0 <PrintIdle+0xda4>
			  if (SpaceOnly(strOperatorName)!=True){		      				  
   10d86:	c8 01       	movw	r24, r16
   10d88:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   10d8c:	81 30       	cpi	r24, 0x01	; 1
   10d8e:	09 f4       	brne	.+2      	; 0x10d92 <PrintIdle+0xc76>
   10d90:	97 c0       	rjmp	.+302    	; 0x10ec0 <PrintIdle+0xda4>
				  sprintf_P(strPrint,PSTR("     Operator: %s"),strOperatorName);			   
   10d92:	00 d0       	rcall	.+0      	; 0x10d94 <PrintIdle+0xc78>
   10d94:	00 d0       	rcall	.+0      	; 0x10d96 <PrintIdle+0xc7a>
   10d96:	00 d0       	rcall	.+0      	; 0x10d98 <PrintIdle+0xc7c>
   10d98:	ed b7       	in	r30, 0x3d	; 61
   10d9a:	fe b7       	in	r31, 0x3e	; 62
   10d9c:	31 96       	adiw	r30, 0x01	; 1
   10d9e:	5a e9       	ldi	r21, 0x9A	; 154
   10da0:	e5 2e       	mov	r14, r21
   10da2:	59 e0       	ldi	r21, 0x09	; 9
   10da4:	f5 2e       	mov	r15, r21
   10da6:	ad b7       	in	r26, 0x3d	; 61
   10da8:	be b7       	in	r27, 0x3e	; 62
   10daa:	12 96       	adiw	r26, 0x02	; 2
   10dac:	fc 92       	st	X, r15
   10dae:	ee 92       	st	-X, r14
   10db0:	11 97       	sbiw	r26, 0x01	; 1
   10db2:	85 e6       	ldi	r24, 0x65	; 101
   10db4:	97 e0       	ldi	r25, 0x07	; 7
   10db6:	93 83       	std	Z+3, r25	; 0x03
   10db8:	82 83       	std	Z+2, r24	; 0x02
   10dba:	15 83       	std	Z+5, r17	; 0x05
   10dbc:	04 83       	std	Z+4, r16	; 0x04
   10dbe:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			      iSend=0;iLoop=0;
   10dc2:	10 92 dc 02 	sts	0x02DC, r1
   10dc6:	10 92 db 02 	sts	0x02DB, r1
   10dca:	10 92 d8 02 	sts	0x02D8, r1
   10dce:	10 92 d7 02 	sts	0x02D7, r1
				  LSend=strlen(strPrint);
   10dd2:	f7 01       	movw	r30, r14
   10dd4:	01 90       	ld	r0, Z+
   10dd6:	00 20       	and	r0, r0
   10dd8:	e9 f7       	brne	.-6      	; 0x10dd4 <PrintIdle+0xcb8>
   10dda:	31 97       	sbiw	r30, 0x01	; 1
   10ddc:	ee 19       	sub	r30, r14
   10dde:	ff 09       	sbc	r31, r15
   10de0:	f0 93 da 02 	sts	0x02DA, r31
   10de4:	e0 93 d9 02 	sts	0x02D9, r30
				  stPrintIdle=piPrintOperatorName;
   10de8:	86 e1       	ldi	r24, 0x16	; 22
   10dea:	80 93 e4 02 	sts	0x02E4, r24
   10dee:	ed b7       	in	r30, 0x3d	; 61
   10df0:	fe b7       	in	r31, 0x3e	; 62
   10df2:	36 96       	adiw	r30, 0x06	; 6
   10df4:	0f b6       	in	r0, 0x3f	; 63
   10df6:	f8 94       	cli
   10df8:	fe bf       	out	0x3e, r31	; 62
   10dfa:	0f be       	out	0x3f, r0	; 63
   10dfc:	ed bf       	out	0x3d, r30	; 61
   10dfe:	14 c1       	rjmp	.+552    	; 0x11028 <PrintIdle+0xf0c>
			  }else stPrintIdle=piLoadFooter;
          }  
          else stPrintIdle=piLoadFooter;
	      break;
	 case piPrintOperatorName:
		  if (iSend<LSend){
   10e00:	20 91 db 02 	lds	r18, 0x02DB
   10e04:	30 91 dc 02 	lds	r19, 0x02DC
   10e08:	80 91 d9 02 	lds	r24, 0x02D9
   10e0c:	90 91 da 02 	lds	r25, 0x02DA
   10e10:	28 17       	cp	r18, r24
   10e12:	39 07       	cpc	r19, r25
   10e14:	68 f4       	brcc	.+26     	; 0x10e30 <PrintIdle+0xd14>
		      iLoop++;
   10e16:	80 91 d7 02 	lds	r24, 0x02D7
   10e1a:	90 91 d8 02 	lds	r25, 0x02D8
   10e1e:	01 96       	adiw	r24, 0x01	; 1
   10e20:	90 93 d8 02 	sts	0x02D8, r25
   10e24:	80 93 d7 02 	sts	0x02D7, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   10e28:	10 92 94 02 	sts	0x0294, r1
				  stPrintIdle=piCheckPrintOperatorName;
   10e2c:	87 e1       	ldi	r24, 0x17	; 23
   10e2e:	d1 c0       	rjmp	.+418    	; 0x10fd2 <PrintIdle+0xeb6>
				}
			  }
          else {
			  CarriegeReturn();
   10e30:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
			  CarriegeReturn();
   10e34:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
   10e38:	43 c0       	rjmp	.+134    	; 0x10ec0 <PrintIdle+0xda4>
			  stPrintIdle=piLoadFooter;
			  }
	      break;
	 case piCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   10e3a:	80 91 91 02 	lds	r24, 0x0291
   10e3e:	88 23       	and	r24, r24
   10e40:	09 f0       	breq	.+2      	; 0x10e44 <PrintIdle+0xd28>
   10e42:	bf c0       	rjmp	.+382    	; 0x10fc2 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   10e44:	e0 91 db 02 	lds	r30, 0x02DB
   10e48:	f0 91 dc 02 	lds	r31, 0x02DC
   10e4c:	e6 56       	subi	r30, 0x66	; 102
   10e4e:	f6 4f       	sbci	r31, 0xF6	; 246
   10e50:	61 e0       	ldi	r22, 0x01	; 1
   10e52:	40 81       	ld	r20, Z
   10e54:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
   10e58:	80 91 db 02 	lds	r24, 0x02DB
   10e5c:	90 91 dc 02 	lds	r25, 0x02DC
   10e60:	01 96       	adiw	r24, 0x01	; 1
   10e62:	90 93 dc 02 	sts	0x02DC, r25
   10e66:	80 93 db 02 	sts	0x02DB, r24
		      stPrintIdle=piPrintOperatorName;
   10e6a:	86 e1       	ldi	r24, 0x16	; 22
   10e6c:	a8 c0       	rjmp	.+336    	; 0x10fbe <PrintIdle+0xea2>
			  }
	      break;

	 	       
     case piLoadFooter:
	      FillChar(strPrint,0,sizeof(strPrint));
   10e6e:	8a e9       	ldi	r24, 0x9A	; 154
   10e70:	99 e0       	ldi	r25, 0x09	; 9
   10e72:	60 e0       	ldi	r22, 0x00	; 0
   10e74:	70 e0       	ldi	r23, 0x00	; 0
   10e76:	4d e2       	ldi	r20, 0x2D	; 45
   10e78:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   10e7c:	80 91 e2 02 	lds	r24, 0x02E2
   10e80:	90 e0       	ldi	r25, 0x00	; 0
   10e82:	06 96       	adiw	r24, 0x06	; 6
   10e84:	29 e2       	ldi	r18, 0x29	; 41
   10e86:	30 e0       	ldi	r19, 0x00	; 0
   10e88:	82 9f       	mul	r24, r18
   10e8a:	b0 01       	movw	r22, r0
   10e8c:	83 9f       	mul	r24, r19
   10e8e:	70 0d       	add	r23, r0
   10e90:	92 9f       	mul	r25, r18
   10e92:	70 0d       	add	r23, r0
   10e94:	11 24       	eor	r1, r1
   10e96:	69 5d       	subi	r22, 0xD9	; 217
   10e98:	7d 4f       	sbci	r23, 0xFD	; 253
   10e9a:	8a e9       	ldi	r24, 0x9A	; 154
   10e9c:	99 e0       	ldi	r25, 0x09	; 9
   10e9e:	48 e2       	ldi	r20, 0x28	; 40
   10ea0:	50 e0       	ldi	r21, 0x00	; 0
   10ea2:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		  iFooter++;
   10ea6:	80 91 e2 02 	lds	r24, 0x02E2
   10eaa:	8f 5f       	subi	r24, 0xFF	; 255
   10eac:	80 93 e2 02 	sts	0x02E2, r24
		  if (iFooter<=4){
   10eb0:	85 30       	cpi	r24, 0x05	; 5
   10eb2:	90 f4       	brcc	.+36     	; 0x10ed8 <PrintIdle+0xdbc>
		      if (SpaceOnly(strPrint)==True){
   10eb4:	8a e9       	ldi	r24, 0x9A	; 154
   10eb6:	99 e0       	ldi	r25, 0x09	; 9
   10eb8:	0e 94 34 49 	call	0x9268	; 0x9268 <SpaceOnly>
   10ebc:	81 30       	cpi	r24, 0x01	; 1
   10ebe:	11 f4       	brne	.+4      	; 0x10ec4 <PrintIdle+0xda8>
			      stPrintIdle=piLoadFooter;
   10ec0:	8e e0       	ldi	r24, 0x0E	; 14
   10ec2:	87 c0       	rjmp	.+270    	; 0x10fd2 <PrintIdle+0xeb6>
				  }
			  else{
			      iSend=0;
   10ec4:	10 92 dc 02 	sts	0x02DC, r1
   10ec8:	10 92 db 02 	sts	0x02DB, r1
				  iLoop=0;
   10ecc:	10 92 d8 02 	sts	0x02D8, r1
   10ed0:	10 92 d7 02 	sts	0x02D7, r1
				  stPrintIdle=piPrintFooter;
   10ed4:	8f e0       	ldi	r24, 0x0F	; 15
   10ed6:	7d c0       	rjmp	.+250    	; 0x10fd2 <PrintIdle+0xeb6>
				  //RemSpaceLag(strPrint);
				  //CarriegeReturn();
			      }
		  }else{stPrintIdle=piInitScroll;
   10ed8:	81 e1       	ldi	r24, 0x11	; 17
   10eda:	7b c0       	rjmp	.+246    	; 0x10fd2 <PrintIdle+0xeb6>
		        //iPrinted++;
			}
	      break;
     case piPrintFooter:
		  if (iSend<40){
   10edc:	80 91 db 02 	lds	r24, 0x02DB
   10ee0:	90 91 dc 02 	lds	r25, 0x02DC
   10ee4:	88 32       	cpi	r24, 0x28	; 40
   10ee6:	91 05       	cpc	r25, r1
   10ee8:	68 f4       	brcc	.+26     	; 0x10f04 <PrintIdle+0xde8>
		      iLoop++;
   10eea:	80 91 d7 02 	lds	r24, 0x02D7
   10eee:	90 91 d8 02 	lds	r25, 0x02D8
   10ef2:	01 96       	adiw	r24, 0x01	; 1
   10ef4:	90 93 d8 02 	sts	0x02D8, r25
   10ef8:	80 93 d7 02 	sts	0x02D7, r24
			  if((iLoop%PRINT_DELAY)==0){
				TimPrintBusy=0;
   10efc:	10 92 94 02 	sts	0x0294, r1
				stPrintIdle=piCheckPrintStatusFooter;
   10f00:	8d e0       	ldi	r24, 0x0D	; 13
   10f02:	67 c0       	rjmp	.+206    	; 0x10fd2 <PrintIdle+0xeb6>
				}
			  }
          else {
		      stPrintIdle=piLoadFooter;
   10f04:	8e e0       	ldi	r24, 0x0E	; 14
   10f06:	80 93 e4 02 	sts	0x02E4, r24
			  CarriegeReturn();
   10f0a:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
   10f0e:	8c c0       	rjmp	.+280    	; 0x11028 <PrintIdle+0xf0c>
			  }
	      break;
     case piCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   10f10:	80 91 91 02 	lds	r24, 0x0291
   10f14:	88 23       	and	r24, r24
   10f16:	09 f0       	breq	.+2      	; 0x10f1a <PrintIdle+0xdfe>
   10f18:	54 c0       	rjmp	.+168    	; 0x10fc2 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   10f1a:	e0 91 db 02 	lds	r30, 0x02DB
   10f1e:	f0 91 dc 02 	lds	r31, 0x02DC
   10f22:	e6 56       	subi	r30, 0x66	; 102
   10f24:	f6 4f       	sbci	r31, 0xF6	; 246
   10f26:	61 e0       	ldi	r22, 0x01	; 1
   10f28:	40 81       	ld	r20, Z
   10f2a:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		      iSend++;
   10f2e:	80 91 db 02 	lds	r24, 0x02DB
   10f32:	90 91 dc 02 	lds	r25, 0x02DC
   10f36:	01 96       	adiw	r24, 0x01	; 1
   10f38:	90 93 dc 02 	sts	0x02DC, r25
   10f3c:	80 93 db 02 	sts	0x02DB, r24
		      stPrintIdle=piPrintFooter;
   10f40:	8f e0       	ldi	r24, 0x0F	; 15
   10f42:	3d c0       	rjmp	.+122    	; 0x10fbe <PrintIdle+0xea2>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitScroll:
	      iPrinted++;
   10f44:	80 91 d6 02 	lds	r24, 0x02D6
   10f48:	8f 5f       	subi	r24, 0xFF	; 255
   10f4a:	80 93 d6 02 	sts	0x02D6, r24
		  iScroll=0;
   10f4e:	10 92 e1 02 	sts	0x02E1, r1
		  iLoop=0;
   10f52:	10 92 d8 02 	sts	0x02D8, r1
   10f56:	10 92 d7 02 	sts	0x02D7, r1
		  if (iPrinted<PrintCopy){
   10f5a:	90 91 d5 02 	lds	r25, 0x02D5
   10f5e:	89 17       	cp	r24, r25
   10f60:	18 f4       	brcc	.+6      	; 0x10f68 <PrintIdle+0xe4c>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   10f62:	82 e3       	ldi	r24, 0x32	; 50
   10f64:	90 e0       	ldi	r25, 0x00	; 0
   10f66:	02 c0       	rjmp	.+4      	; 0x10f6c <PrintIdle+0xe50>
		  }else if (iPrinted>=PrintCopy){		  	  
		      nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   10f68:	81 e3       	ldi	r24, 0x31	; 49
   10f6a:	90 e0       	ldi	r25, 0x00	; 0
   10f6c:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   10f70:	80 93 e0 02 	sts	0x02E0, r24
		  if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_TG02){
		      uart_printf(0,1,PSTR("----Scrolled2-----"));

		      stPrintIdle=piPaperCut;
		  }*/
          stPrintIdle=piScrollPaper;              
   10f74:	80 e1       	ldi	r24, 0x10	; 16
   10f76:	2d c0       	rjmp	.+90     	; 0x10fd2 <PrintIdle+0xeb6>
	      break;
     case piScrollPaper:
	      iLoop++;
   10f78:	80 91 d7 02 	lds	r24, 0x02D7
   10f7c:	90 91 d8 02 	lds	r25, 0x02D8
   10f80:	01 96       	adiw	r24, 0x01	; 1
   10f82:	90 93 d8 02 	sts	0x02D8, r25
   10f86:	80 93 d7 02 	sts	0x02D7, r24
		  if (iLoop%PRINT_DELAY==0){
			  TimPrintBusy=0;
   10f8a:	10 92 94 02 	sts	0x0294, r1
			  stPrintIdle=piCheckPrintStatusScroll;
   10f8e:	82 e1       	ldi	r24, 0x12	; 18
   10f90:	80 93 e4 02 	sts	0x02E4, r24
			  }
	      if (iScroll>nScroll)stPrintIdle=piPaperCut;
   10f94:	90 91 e1 02 	lds	r25, 0x02E1
   10f98:	80 91 e0 02 	lds	r24, 0x02E0
   10f9c:	89 17       	cp	r24, r25
   10f9e:	08 f0       	brcs	.+2      	; 0x10fa2 <PrintIdle+0xe86>
   10fa0:	43 c0       	rjmp	.+134    	; 0x11028 <PrintIdle+0xf0c>
   10fa2:	83 e1       	ldi	r24, 0x13	; 19
   10fa4:	16 c0       	rjmp	.+44     	; 0x10fd2 <PrintIdle+0xeb6>
	      break;
     case piCheckPrintStatusScroll:
	      if (IsBusyPrint==False){
   10fa6:	80 91 91 02 	lds	r24, 0x0291
   10faa:	88 23       	and	r24, r24
   10fac:	51 f4       	brne	.+20     	; 0x10fc2 <PrintIdle+0xea6>
		      iScroll++;
   10fae:	80 91 e1 02 	lds	r24, 0x02E1
   10fb2:	8f 5f       	subi	r24, 0xFF	; 255
   10fb4:	80 93 e1 02 	sts	0x02E1, r24
		      CarriegeReturn();
   10fb8:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		      stPrintIdle=piScrollPaper;
   10fbc:	80 e1       	ldi	r24, 0x10	; 16
   10fbe:	80 93 e4 02 	sts	0x02E4, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   10fc2:	80 91 94 02 	lds	r24, 0x0294
   10fc6:	8b 30       	cpi	r24, 0x0B	; 11
   10fc8:	78 f1       	brcs	.+94     	; 0x11028 <PrintIdle+0xf0c>
		      IsPrintERROR=True;
   10fca:	81 e0       	ldi	r24, 0x01	; 1
   10fcc:	80 93 8f 02 	sts	0x028F, r24
		      stPrintIdle=piFinishPrintIdle;
   10fd0:	84 e1       	ldi	r24, 0x14	; 20
   10fd2:	80 93 e4 02 	sts	0x02E4, r24
   10fd6:	28 c0       	rjmp	.+80     	; 0x11028 <PrintIdle+0xf0c>
	      break;
     case piPaperCut:
	      //sprintf_P(strSend,PSTR("i:%d Copy:%d"),iPrinted,PrintCopy);
		  //uart_print(0,1,strSend);

          if (iPrinted>=PrintCopy){
   10fd8:	90 91 d6 02 	lds	r25, 0x02D6
   10fdc:	80 91 d5 02 	lds	r24, 0x02D5
   10fe0:	98 17       	cp	r25, r24
   10fe2:	10 f0       	brcs	.+4      	; 0x10fe8 <PrintIdle+0xecc>
		      stPrintIdle=piFinishPrintIdle;
   10fe4:	84 e1       	ldi	r24, 0x14	; 20
   10fe6:	05 c0       	rjmp	.+10     	; 0x10ff2 <PrintIdle+0xed6>
			  }
		  else {CarriegeReturn();
   10fe8:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		        CarriegeReturn();
   10fec:	0e 94 44 5b 	call	0xb688	; 0xb688 <CarriegeReturn>
		        stPrintIdle=piInit;
   10ff0:	81 e0       	ldi	r24, 0x01	; 1
   10ff2:	80 93 e4 02 	sts	0x02E4, r24
		       }
		  PaperCut();
   10ff6:	0e 94 4c 49 	call	0x9298	; 0x9298 <PaperCut>
	      break;
   10ffa:	16 c0       	rjmp	.+44     	; 0x11028 <PrintIdle+0xf0c>
     case piFinishPrintIdle:	      
	      switch(IFType){
   10ffc:	80 91 00 01 	lds	r24, 0x0100
   11000:	81 30       	cpi	r24, 0x01	; 1
   11002:	19 f0       	breq	.+6      	; 0x1100a <PrintIdle+0xeee>
   11004:	82 30       	cpi	r24, 0x02	; 2
   11006:	61 f4       	brne	.+24     	; 0x11020 <PrintIdle+0xf04>
   11008:	03 c0       	rjmp	.+6      	; 0x11010 <PrintIdle+0xef4>
		  case IT_SLAVE:
		       sendMessage04();
   1100a:	0e 94 44 2a 	call	0x5488	; 0x5488 <sendMessage04>
		       break;
   1100e:	08 c0       	rjmp	.+16     	; 0x11020 <PrintIdle+0xf04>
		  case IT_STANDALONE:		  
		       UpdateStandaloneStatus((atoi(strFIP_ID)&0x0F),PS_PRINTED);
   11010:	87 e9       	ldi	r24, 0x97	; 151
   11012:	98 e0       	ldi	r25, 0x08	; 8
   11014:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
   11018:	8f 70       	andi	r24, 0x0F	; 15
   1101a:	61 e1       	ldi	r22, 0x11	; 17
   1101c:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
			   //CurrentPumpStatus[FIPAddr]=PUMP_OFF;
			   //strPumpStatus[FIPAddr]=GetPumpStatusLabel(PUMP_OFF);			   
			   //IsNewPumpStatus=True;//UpdateDisplay
		       break;
		  }
		  IsBusyIdlePrinting=False;
   11020:	10 92 90 02 	sts	0x0290, r1
          stPrintIdle=piIdle;
   11024:	10 92 e4 02 	sts	0x02E4, r1
	      break;	 
	 }
}
   11028:	64 96       	adiw	r28, 0x14	; 20
   1102a:	0f b6       	in	r0, 0x3f	; 63
   1102c:	f8 94       	cli
   1102e:	de bf       	out	0x3e, r29	; 62
   11030:	0f be       	out	0x3f, r0	; 63
   11032:	cd bf       	out	0x3d, r28	; 61
   11034:	cf 91       	pop	r28
   11036:	df 91       	pop	r29
   11038:	1f 91       	pop	r17
   1103a:	0f 91       	pop	r16
   1103c:	ff 90       	pop	r15
   1103e:	ef 90       	pop	r14
   11040:	08 95       	ret

00011042 <systemPrinting>:
     

}

void systemPrinting(){
	 FreePrinting();
   11042:	0e 94 7f 5b 	call	0xb6fe	; 0xb6fe <FreePrinting>
	 PrintIdle();
   11046:	0e 94 8e 80 	call	0x1011c	; 0x1011c <PrintIdle>
}
   1104a:	08 95       	ret

0001104c <FCloseShift>:
	 }
  return Result;
}


char FCloseShift(char ShiftType){//SHIFT_NONE,NEW_SHIFT,CONTINUE_SHIFT
   1104c:	ef 92       	push	r14
   1104e:	ff 92       	push	r15
   11050:	0f 93       	push	r16
   11052:	1f 93       	push	r17
   11054:	df 93       	push	r29
   11056:	cf 93       	push	r28
   11058:	cd b7       	in	r28, 0x3d	; 61
   1105a:	de b7       	in	r29, 0x3e	; 62
   1105c:	64 97       	sbiw	r28, 0x14	; 20
   1105e:	0f b6       	in	r0, 0x3f	; 63
   11060:	f8 94       	cli
   11062:	de bf       	out	0x3e, r29	; 62
   11064:	0f be       	out	0x3f, r0	; 63
   11066:	cd bf       	out	0x3d, r28	; 61
   11068:	08 2f       	mov	r16, r24
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
	 switch(stCloseShift){
   1106a:	80 91 27 03 	lds	r24, 0x0327
   1106e:	87 30       	cpi	r24, 0x07	; 7
   11070:	09 f4       	brne	.+2      	; 0x11074 <FCloseShift+0x28>
   11072:	7b c1       	rjmp	.+758    	; 0x1136a <FCloseShift+0x31e>
   11074:	88 30       	cpi	r24, 0x08	; 8
   11076:	78 f4       	brcc	.+30     	; 0x11096 <FCloseShift+0x4a>
   11078:	84 30       	cpi	r24, 0x04	; 4
   1107a:	09 f4       	brne	.+2      	; 0x1107e <FCloseShift+0x32>
   1107c:	55 c0       	rjmp	.+170    	; 0x11128 <FCloseShift+0xdc>
   1107e:	85 30       	cpi	r24, 0x05	; 5
   11080:	18 f4       	brcc	.+6      	; 0x11088 <FCloseShift+0x3c>
   11082:	88 23       	and	r24, r24
   11084:	c1 f0       	breq	.+48     	; 0x110b6 <FCloseShift+0x6a>
   11086:	e6 c1       	rjmp	.+972    	; 0x11454 <FCloseShift+0x408>
   11088:	85 30       	cpi	r24, 0x05	; 5
   1108a:	09 f4       	brne	.+2      	; 0x1108e <FCloseShift+0x42>
   1108c:	90 c0       	rjmp	.+288    	; 0x111ae <FCloseShift+0x162>
   1108e:	86 30       	cpi	r24, 0x06	; 6
   11090:	09 f0       	breq	.+2      	; 0x11094 <FCloseShift+0x48>
   11092:	e0 c1       	rjmp	.+960    	; 0x11454 <FCloseShift+0x408>
   11094:	92 c0       	rjmp	.+292    	; 0x111ba <FCloseShift+0x16e>
   11096:	8a 30       	cpi	r24, 0x0A	; 10
   11098:	09 f4       	brne	.+2      	; 0x1109c <FCloseShift+0x50>
   1109a:	aa c1       	rjmp	.+852    	; 0x113f0 <FCloseShift+0x3a4>
   1109c:	8b 30       	cpi	r24, 0x0B	; 11
   1109e:	20 f4       	brcc	.+8      	; 0x110a8 <FCloseShift+0x5c>
   110a0:	88 30       	cpi	r24, 0x08	; 8
   110a2:	09 f0       	breq	.+2      	; 0x110a6 <FCloseShift+0x5a>
   110a4:	d7 c1       	rjmp	.+942    	; 0x11454 <FCloseShift+0x408>
   110a6:	67 c1       	rjmp	.+718    	; 0x11376 <FCloseShift+0x32a>
   110a8:	8b 30       	cpi	r24, 0x0B	; 11
   110aa:	09 f4       	brne	.+2      	; 0x110ae <FCloseShift+0x62>
   110ac:	cf c1       	rjmp	.+926    	; 0x1144c <FCloseShift+0x400>
   110ae:	8c 30       	cpi	r24, 0x0C	; 12
   110b0:	09 f0       	breq	.+2      	; 0x110b4 <FCloseShift+0x68>
   110b2:	d0 c1       	rjmp	.+928    	; 0x11454 <FCloseShift+0x408>
   110b4:	a5 c1       	rjmp	.+842    	; 0x11400 <FCloseShift+0x3b4>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
   110b6:	89 e4       	ldi	r24, 0x49	; 73
   110b8:	91 e0       	ldi	r25, 0x01	; 1
   110ba:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   110be:	80 93 3b 02 	sts	0x023B, r24
		  IsPumpBusy=False;
   110c2:	10 92 26 03 	sts	0x0326, r1
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
   110c6:	ee 24       	eor	r14, r14
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
   110c8:	ff 24       	eor	r15, r15
   110ca:	f3 94       	inc	r15
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
   110cc:	27 c0       	rjmp	.+78     	; 0x1111c <FCloseShift+0xd0>
		       if ((strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_NONE))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_OFF))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_BUSY)))
   110ce:	0e 2d       	mov	r16, r14
   110d0:	10 e0       	ldi	r17, 0x00	; 0
   110d2:	f8 01       	movw	r30, r16
   110d4:	ee 5f       	subi	r30, 0xFE	; 254
   110d6:	fe 4f       	sbci	r31, 0xFE	; 254
   110d8:	80 81       	ld	r24, Z
   110da:	8d 32       	cpi	r24, 0x2D	; 45
   110dc:	51 f0       	breq	.+20     	; 0x110f2 <FCloseShift+0xa6>
   110de:	89 36       	cpi	r24, 0x69	; 105
   110e0:	41 f0       	breq	.+16     	; 0x110f2 <FCloseShift+0xa6>
   110e2:	84 36       	cpi	r24, 0x64	; 100
   110e4:	31 f0       	breq	.+12     	; 0x110f2 <FCloseShift+0xa6>
				    UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   110e6:	8e 2d       	mov	r24, r14
   110e8:	0e 94 b8 6c 	call	0xd970	; 0xd970 <GetPumpID>
   110ec:	66 e0       	ldi	r22, 0x06	; 6
   110ee:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
   110f2:	f8 01       	movw	r30, r16
   110f4:	ee 5f       	subi	r30, 0xFE	; 254
   110f6:	fe 4f       	sbci	r31, 0xFE	; 254
   110f8:	80 81       	ld	r24, Z
   110fa:	84 35       	cpi	r24, 0x54	; 84
   110fc:	31 f4       	brne	.+12     	; 0x1110a <FCloseShift+0xbe>
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   110fe:	8e 2d       	mov	r24, r14
   11100:	0e 94 b8 6c 	call	0xd970	; 0xd970 <GetPumpID>
   11104:	66 e0       	ldi	r22, 0x06	; 6
   11106:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
   1110a:	f8 01       	movw	r30, r16
   1110c:	ee 5f       	subi	r30, 0xFE	; 254
   1110e:	fe 4f       	sbci	r31, 0xFE	; 254
   11110:	80 81       	ld	r24, Z
   11112:	84 36       	cpi	r24, 0x64	; 100
   11114:	11 f4       	brne	.+4      	; 0x1111a <FCloseShift+0xce>
			       IsPumpBusy=True;
   11116:	f0 92 26 03 	sts	0x0326, r15
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
   1111a:	e3 94       	inc	r14
   1111c:	80 91 3b 02 	lds	r24, 0x023B
   11120:	e8 16       	cp	r14, r24
   11122:	a8 f2       	brcs	.-86     	; 0x110ce <FCloseShift+0x82>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
			   }

          stCloseShift=csSendTotalizerALL;
   11124:	84 e0       	ldi	r24, 0x04	; 4
   11126:	8f c1       	rjmp	.+798    	; 0x11446 <FCloseShift+0x3fa>
			  */
	      break;
     case csWaitPumpLocked:	     
	      break;
     case csSendTotalizerALL:
	      lcd_clear();
   11128:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("Totalizer.."));
   1112c:	81 e0       	ldi	r24, 0x01	; 1
   1112e:	61 e0       	ldi	r22, 0x01	; 1
   11130:	4a ef       	ldi	r20, 0xFA	; 250
   11132:	56 e1       	ldi	r21, 0x16	; 22
   11134:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  
		  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
   11138:	82 e0       	ldi	r24, 0x02	; 2
   1113a:	91 e0       	ldi	r25, 0x01	; 1
   1113c:	0e 94 4e 1b 	call	0x369c	; 0x369c <CountTotalizerSatus>
   11140:	00 d0       	rcall	.+0      	; 0x11142 <FCloseShift+0xf6>
   11142:	00 d0       	rcall	.+0      	; 0x11144 <FCloseShift+0xf8>
   11144:	00 d0       	rcall	.+0      	; 0x11146 <FCloseShift+0xfa>
   11146:	ed b7       	in	r30, 0x3d	; 61
   11148:	fe b7       	in	r31, 0x3e	; 62
   1114a:	31 96       	adiw	r30, 0x01	; 1
   1114c:	8e 01       	movw	r16, r28
   1114e:	0f 5f       	subi	r16, 0xFF	; 255
   11150:	1f 4f       	sbci	r17, 0xFF	; 255
   11152:	ad b7       	in	r26, 0x3d	; 61
   11154:	be b7       	in	r27, 0x3e	; 62
   11156:	12 96       	adiw	r26, 0x02	; 2
   11158:	1c 93       	st	X, r17
   1115a:	0e 93       	st	-X, r16
   1115c:	11 97       	sbiw	r26, 0x01	; 1
   1115e:	2c ee       	ldi	r18, 0xEC	; 236
   11160:	36 e1       	ldi	r19, 0x16	; 22
   11162:	33 83       	std	Z+3, r19	; 0x03
   11164:	22 83       	std	Z+2, r18	; 0x02
   11166:	20 91 3b 02 	lds	r18, 0x023B
   1116a:	30 e0       	ldi	r19, 0x00	; 0
   1116c:	28 1b       	sub	r18, r24
   1116e:	31 09       	sbc	r19, r1
   11170:	35 83       	std	Z+5, r19	; 0x05
   11172:	24 83       	std	Z+4, r18	; 0x04
   11174:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(2,1,lcdteks);
   11178:	ed b7       	in	r30, 0x3d	; 61
   1117a:	fe b7       	in	r31, 0x3e	; 62
   1117c:	36 96       	adiw	r30, 0x06	; 6
   1117e:	0f b6       	in	r0, 0x3f	; 63
   11180:	f8 94       	cli
   11182:	fe bf       	out	0x3e, r31	; 62
   11184:	0f be       	out	0x3f, r0	; 63
   11186:	ed bf       	out	0x3d, r30	; 61
   11188:	82 e0       	ldi	r24, 0x02	; 2
   1118a:	61 e0       	ldi	r22, 0x01	; 1
   1118c:	a8 01       	movw	r20, r16
   1118e:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>


          IsNewPumpStatus=True;
   11192:	01 e0       	ldi	r16, 0x01	; 1
   11194:	00 93 01 01 	sts	0x0101, r16
		  DisplayPumpStatus(); 
   11198:	0e 94 82 42 	call	0x8504	; 0x8504 <DisplayPumpStatus>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   1119c:	85 e0       	ldi	r24, 0x05	; 5
   1119e:	80 93 85 06 	sts	0x0685, r24
	 PoolMsg=plMsg;
   111a2:	92 e1       	ldi	r25, 0x12	; 18
   111a4:	90 93 b1 0c 	sts	0x0CB1, r25
     IsControlPooling=True;
   111a8:	00 93 62 02 	sts	0x0262, r16
   111ac:	4c c1       	rjmp	.+664    	; 0x11446 <FCloseShift+0x3fa>
	      //SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);          
		  SendPoolingCommand(SC_TOTALIZER,PUMP_ALL);
		  stCloseShift=csDisplayPumpStatus;
	      break;
     case csDisplayPumpStatus:
		  DisplayPumpStatus(); 
   111ae:	0e 94 82 42 	call	0x8504	; 0x8504 <DisplayPumpStatus>
		  TimDisplay=0;         
   111b2:	10 92 70 02 	sts	0x0270, r1
          stCloseShift=csWaitTotalizerComplete;
   111b6:	86 e0       	ldi	r24, 0x06	; 6
   111b8:	46 c1       	rjmp	.+652    	; 0x11446 <FCloseShift+0x3fa>
	      break;
     case csWaitTotalizerComplete:
	      KeyPressed=_key_scan(1);
   111ba:	81 e0       	ldi	r24, 0x01	; 1
   111bc:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
   111c0:	e8 2e       	mov	r14, r24
		  if (IsNewPumpStatus==True){
   111c2:	80 91 01 01 	lds	r24, 0x0101
   111c6:	81 30       	cpi	r24, 0x01	; 1
   111c8:	81 f5       	brne	.+96     	; 0x1122a <FCloseShift+0x1de>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
   111ca:	82 e0       	ldi	r24, 0x02	; 2
   111cc:	91 e0       	ldi	r25, 0x01	; 1
   111ce:	0e 94 4e 1b 	call	0x369c	; 0x369c <CountTotalizerSatus>
   111d2:	00 d0       	rcall	.+0      	; 0x111d4 <FCloseShift+0x188>
   111d4:	00 d0       	rcall	.+0      	; 0x111d6 <FCloseShift+0x18a>
   111d6:	00 d0       	rcall	.+0      	; 0x111d8 <FCloseShift+0x18c>
   111d8:	ed b7       	in	r30, 0x3d	; 61
   111da:	fe b7       	in	r31, 0x3e	; 62
   111dc:	31 96       	adiw	r30, 0x01	; 1
   111de:	8e 01       	movw	r16, r28
   111e0:	0f 5f       	subi	r16, 0xFF	; 255
   111e2:	1f 4f       	sbci	r17, 0xFF	; 255
   111e4:	ad b7       	in	r26, 0x3d	; 61
   111e6:	be b7       	in	r27, 0x3e	; 62
   111e8:	12 96       	adiw	r26, 0x02	; 2
   111ea:	1c 93       	st	X, r17
   111ec:	0e 93       	st	-X, r16
   111ee:	11 97       	sbiw	r26, 0x01	; 1
   111f0:	2e ed       	ldi	r18, 0xDE	; 222
   111f2:	36 e1       	ldi	r19, 0x16	; 22
   111f4:	33 83       	std	Z+3, r19	; 0x03
   111f6:	22 83       	std	Z+2, r18	; 0x02
   111f8:	20 91 3b 02 	lds	r18, 0x023B
   111fc:	30 e0       	ldi	r19, 0x00	; 0
   111fe:	28 1b       	sub	r18, r24
   11200:	31 09       	sbc	r19, r1
   11202:	35 83       	std	Z+5, r19	; 0x05
   11204:	24 83       	std	Z+4, r18	; 0x04
   11206:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  lcd_print(2,1,lcdteks);
   1120a:	ed b7       	in	r30, 0x3d	; 61
   1120c:	fe b7       	in	r31, 0x3e	; 62
   1120e:	36 96       	adiw	r30, 0x06	; 6
   11210:	0f b6       	in	r0, 0x3f	; 63
   11212:	f8 94       	cli
   11214:	fe bf       	out	0x3e, r31	; 62
   11216:	0f be       	out	0x3f, r0	; 63
   11218:	ed bf       	out	0x3d, r30	; 61
   1121a:	82 e0       	ldi	r24, 0x02	; 2
   1121c:	61 e0       	ldi	r22, 0x01	; 1
   1121e:	a8 01       	movw	r20, r16
   11220:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  	  stCloseShift=csDisplayPumpStatus;	 
   11224:	85 e0       	ldi	r24, 0x05	; 5
   11226:	80 93 27 03 	sts	0x0327, r24
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
   1122a:	82 e0       	ldi	r24, 0x02	; 2
   1122c:	91 e0       	ldi	r25, 0x01	; 1
   1122e:	0e 94 4e 1b 	call	0x369c	; 0x369c <CountTotalizerSatus>
   11232:	90 91 3b 02 	lds	r25, 0x023B
   11236:	89 17       	cp	r24, r25
   11238:	a0 f0       	brcs	.+40     	; 0x11262 <FCloseShift+0x216>
   1123a:	80 91 70 02 	lds	r24, 0x0270
   1123e:	86 30       	cpi	r24, 0x06	; 6
   11240:	80 f0       	brcs	.+32     	; 0x11262 <FCloseShift+0x216>
   11242:	00 e0       	ldi	r16, 0x00	; 0
   11244:	07 c0       	rjmp	.+14     	; 0x11254 <FCloseShift+0x208>
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   11246:	80 2f       	mov	r24, r16
   11248:	0e 94 b8 6c 	call	0xd970	; 0xd970 <GetPumpID>
   1124c:	66 e0       	ldi	r22, 0x06	; 6
   1124e:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
			  lcd_print(2,1,lcdteks);
		  	  stCloseShift=csDisplayPumpStatus;	 
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
   11252:	0f 5f       	subi	r16, 0xFF	; 255
   11254:	80 91 3b 02 	lds	r24, 0x023B
   11258:	08 17       	cp	r16, r24
   1125a:	a8 f3       	brcs	.-22     	; 0x11246 <FCloseShift+0x1fa>
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);

		      stCloseShift=csGenerateReport;		      
   1125c:	88 e0       	ldi	r24, 0x08	; 8
   1125e:	80 93 27 03 	sts	0x0327, r24
			  }
          //sprintf_P(lcdteks,PSTR("TimSend:%d"),TimDisplay);
		  //lcd_print(3,1,lcdteks);

          if ((TimDisplay>15)&&(IsPumpBusy!=True)){
   11262:	80 91 70 02 	lds	r24, 0x0270
   11266:	80 31       	cpi	r24, 0x10	; 16
   11268:	08 f4       	brcc	.+2      	; 0x1126c <FCloseShift+0x220>
   1126a:	57 c0       	rjmp	.+174    	; 0x1131a <FCloseShift+0x2ce>
   1126c:	80 91 26 03 	lds	r24, 0x0326
   11270:	81 30       	cpi	r24, 0x01	; 1
   11272:	09 f4       	brne	.+2      	; 0x11276 <FCloseShift+0x22a>
   11274:	52 c0       	rjmp	.+164    	; 0x1131a <FCloseShift+0x2ce>
		      if(CountNoPumpSatus(strPumpStatus)>=eeprom_read_byte(&DefActivePump)){
   11276:	82 e0       	ldi	r24, 0x02	; 2
   11278:	91 e0       	ldi	r25, 0x01	; 1
   1127a:	0e 94 3e 1b 	call	0x367c	; 0x367c <CountNoPumpSatus>
   1127e:	f8 2e       	mov	r15, r24
   11280:	89 e4       	ldi	r24, 0x49	; 73
   11282:	91 e0       	ldi	r25, 0x01	; 1
   11284:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   11288:	f8 16       	cp	r15, r24
   1128a:	08 f4       	brcc	.+2      	; 0x1128e <FCloseShift+0x242>
   1128c:	46 c0       	rjmp	.+140    	; 0x1131a <FCloseShift+0x2ce>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
   1128e:	00 d0       	rcall	.+0      	; 0x11290 <FCloseShift+0x244>
   11290:	00 d0       	rcall	.+0      	; 0x11292 <FCloseShift+0x246>
   11292:	00 d0       	rcall	.+0      	; 0x11294 <FCloseShift+0x248>
   11294:	ed b7       	in	r30, 0x3d	; 61
   11296:	fe b7       	in	r31, 0x3e	; 62
   11298:	31 96       	adiw	r30, 0x01	; 1
   1129a:	8e 01       	movw	r16, r28
   1129c:	0f 5f       	subi	r16, 0xFF	; 255
   1129e:	1f 4f       	sbci	r17, 0xFF	; 255
   112a0:	ad b7       	in	r26, 0x3d	; 61
   112a2:	be b7       	in	r27, 0x3e	; 62
   112a4:	12 96       	adiw	r26, 0x02	; 2
   112a6:	1c 93       	st	X, r17
   112a8:	0e 93       	st	-X, r16
   112aa:	11 97       	sbiw	r26, 0x01	; 1
   112ac:	2a ec       	ldi	r18, 0xCA	; 202
   112ae:	36 e1       	ldi	r19, 0x16	; 22
   112b0:	33 83       	std	Z+3, r19	; 0x03
   112b2:	22 83       	std	Z+2, r18	; 0x02
   112b4:	20 91 3b 02 	lds	r18, 0x023B
   112b8:	30 e0       	ldi	r19, 0x00	; 0
   112ba:	2f 19       	sub	r18, r15
   112bc:	31 09       	sbc	r19, r1
   112be:	35 83       	std	Z+5, r19	; 0x05
   112c0:	24 83       	std	Z+4, r18	; 0x04
   112c2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  lcd_print(3,1,lcdteks);
   112c6:	ed b7       	in	r30, 0x3d	; 61
   112c8:	fe b7       	in	r31, 0x3e	; 62
   112ca:	36 96       	adiw	r30, 0x06	; 6
   112cc:	0f b6       	in	r0, 0x3f	; 63
   112ce:	f8 94       	cli
   112d0:	fe bf       	out	0x3e, r31	; 62
   112d2:	0f be       	out	0x3f, r0	; 63
   112d4:	ed bf       	out	0x3d, r30	; 61
   112d6:	83 e0       	ldi	r24, 0x03	; 3
   112d8:	61 e0       	ldi	r22, 0x01	; 1
   112da:	a8 01       	movw	r20, r16
   112dc:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
   112e0:	00 e0       	ldi	r16, 0x00	; 0
   112e2:	0e c0       	rjmp	.+28     	; 0x11300 <FCloseShift+0x2b4>
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
   112e4:	e0 2f       	mov	r30, r16
   112e6:	f0 e0       	ldi	r31, 0x00	; 0
   112e8:	ee 5f       	subi	r30, 0xFE	; 254
   112ea:	fe 4f       	sbci	r31, 0xFE	; 254
   112ec:	80 81       	ld	r24, Z
   112ee:	84 35       	cpi	r24, 0x54	; 84
   112f0:	31 f4       	brne	.+12     	; 0x112fe <FCloseShift+0x2b2>
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   112f2:	80 2f       	mov	r24, r16
   112f4:	0e 94 b8 6c 	call	0xd970	; 0xd970 <GetPumpID>
   112f8:	66 e0       	ldi	r22, 0x06	; 6
   112fa:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
			  lcd_print(3,1,lcdteks);
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
   112fe:	0f 5f       	subi	r16, 0xFF	; 255
   11300:	80 91 3b 02 	lds	r24, 0x023B
   11304:	08 17       	cp	r16, r24
   11306:	70 f3       	brcs	.-36     	; 0x112e4 <FCloseShift+0x298>
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
			  }

			  system_beep(1);
   11308:	81 e0       	ldi	r24, 0x01	; 1
   1130a:	90 e0       	ldi	r25, 0x00	; 0
   1130c:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
			  TimDisplay=0;
   11310:	10 92 70 02 	sts	0x0270, r1
			  stCloseShift=csNoPumpFound;		     
   11314:	87 e0       	ldi	r24, 0x07	; 7
   11316:	80 93 27 03 	sts	0x0327, r24
			  }			  
		  }
		  if (KeyPressed==_KEY_CANCEL){
   1131a:	fe 2d       	mov	r31, r14
   1131c:	f7 3e       	cpi	r31, 0xE7	; 231
   1131e:	09 f0       	breq	.+2      	; 0x11322 <FCloseShift+0x2d6>
   11320:	99 c0       	rjmp	.+306    	; 0x11454 <FCloseShift+0x408>
			  sprintf_P(lcdteks,PSTR("Cancel"));
   11322:	00 d0       	rcall	.+0      	; 0x11324 <FCloseShift+0x2d8>
   11324:	00 d0       	rcall	.+0      	; 0x11326 <FCloseShift+0x2da>
   11326:	8e 01       	movw	r16, r28
   11328:	0f 5f       	subi	r16, 0xFF	; 255
   1132a:	1f 4f       	sbci	r17, 0xFF	; 255
   1132c:	ad b7       	in	r26, 0x3d	; 61
   1132e:	be b7       	in	r27, 0x3e	; 62
   11330:	12 96       	adiw	r26, 0x02	; 2
   11332:	1c 93       	st	X, r17
   11334:	0e 93       	st	-X, r16
   11336:	11 97       	sbiw	r26, 0x01	; 1
   11338:	83 ec       	ldi	r24, 0xC3	; 195
   1133a:	96 e1       	ldi	r25, 0x16	; 22
   1133c:	14 96       	adiw	r26, 0x04	; 4
   1133e:	9c 93       	st	X, r25
   11340:	8e 93       	st	-X, r24
   11342:	13 97       	sbiw	r26, 0x03	; 3
   11344:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  lcd_print(3,1,lcdteks);
   11348:	0f 90       	pop	r0
   1134a:	0f 90       	pop	r0
   1134c:	0f 90       	pop	r0
   1134e:	0f 90       	pop	r0
   11350:	83 e0       	ldi	r24, 0x03	; 3
   11352:	61 e0       	ldi	r22, 0x01	; 1
   11354:	a8 01       	movw	r20, r16
   11356:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			  system_beep(1);
   1135a:	81 e0       	ldi	r24, 0x01	; 1
   1135c:	90 e0       	ldi	r25, 0x00	; 0
   1135e:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
			  TimDisplay=0;
   11362:	10 92 70 02 	sts	0x0270, r1
			  stCloseShift=csNoPumpFound;		     		  
   11366:	87 e0       	ldi	r24, 0x07	; 7
   11368:	6e c0       	rjmp	.+220    	; 0x11446 <FCloseShift+0x3fa>
		  }
	      break;
     case csNoPumpFound:
	      if (TimDisplay>TIM_DISPLAY){
   1136a:	80 91 70 02 	lds	r24, 0x0270
   1136e:	8b 30       	cpi	r24, 0x0B	; 11
   11370:	08 f4       	brcc	.+2      	; 0x11374 <FCloseShift+0x328>
   11372:	70 c0       	rjmp	.+224    	; 0x11454 <FCloseShift+0x408>
   11374:	67 c0       	rjmp	.+206    	; 0x11444 <FCloseShift+0x3f8>
		      stCloseShift=csFinishCloseShift;
		  }	      
	      break;
     case csGenerateReport:
		  lcd_printf(1,1,PSTR("Printing Totalizer"));
   11376:	81 e0       	ldi	r24, 0x01	; 1
   11378:	61 e0       	ldi	r22, 0x01	; 1
   1137a:	40 eb       	ldi	r20, 0xB0	; 176
   1137c:	56 e1       	ldi	r21, 0x16	; 22
   1137e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          _datetime(0, strSystemDate, strSystemTime);
   11382:	08 e9       	ldi	r16, 0x98	; 152
   11384:	14 e0       	ldi	r17, 0x04	; 4
   11386:	62 e5       	ldi	r22, 0x52	; 82
   11388:	e6 2e       	mov	r14, r22
   1138a:	69 e0       	ldi	r22, 0x09	; 9
   1138c:	f6 2e       	mov	r15, r22
   1138e:	80 e0       	ldi	r24, 0x00	; 0
   11390:	b8 01       	movw	r22, r16
   11392:	a7 01       	movw	r20, r14
   11394:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <_datetime>
		  sprintf_P(CurrentShiftDateTime,PSTR("%s %s"),strSystemDate,strSystemTime);
   11398:	ed b7       	in	r30, 0x3d	; 61
   1139a:	fe b7       	in	r31, 0x3e	; 62
   1139c:	38 97       	sbiw	r30, 0x08	; 8
   1139e:	0f b6       	in	r0, 0x3f	; 63
   113a0:	f8 94       	cli
   113a2:	fe bf       	out	0x3e, r31	; 62
   113a4:	0f be       	out	0x3f, r0	; 63
   113a6:	ed bf       	out	0x3d, r30	; 61
   113a8:	31 96       	adiw	r30, 0x01	; 1
   113aa:	8c e6       	ldi	r24, 0x6C	; 108
   113ac:	98 e0       	ldi	r25, 0x08	; 8
   113ae:	ad b7       	in	r26, 0x3d	; 61
   113b0:	be b7       	in	r27, 0x3e	; 62
   113b2:	12 96       	adiw	r26, 0x02	; 2
   113b4:	9c 93       	st	X, r25
   113b6:	8e 93       	st	-X, r24
   113b8:	11 97       	sbiw	r26, 0x01	; 1
   113ba:	8a ea       	ldi	r24, 0xAA	; 170
   113bc:	96 e1       	ldi	r25, 0x16	; 22
   113be:	93 83       	std	Z+3, r25	; 0x03
   113c0:	82 83       	std	Z+2, r24	; 0x02
   113c2:	15 83       	std	Z+5, r17	; 0x05
   113c4:	04 83       	std	Z+4, r16	; 0x04
   113c6:	f7 82       	std	Z+7, r15	; 0x07
   113c8:	e6 82       	std	Z+6, r14	; 0x06
   113ca:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  IsGenerateReport=True;
   113ce:	81 e0       	ldi	r24, 0x01	; 1
   113d0:	80 93 64 02 	sts	0x0264, r24
		  IsFinishPrintingTotalizer=False;
   113d4:	10 92 65 02 	sts	0x0265, r1
		  stCloseShift=csWaitPrintTotalizerComplete;
   113d8:	8a e0       	ldi	r24, 0x0A	; 10
   113da:	80 93 27 03 	sts	0x0327, r24
	      break;
   113de:	ed b7       	in	r30, 0x3d	; 61
   113e0:	fe b7       	in	r31, 0x3e	; 62
   113e2:	38 96       	adiw	r30, 0x08	; 8
   113e4:	0f b6       	in	r0, 0x3f	; 63
   113e6:	f8 94       	cli
   113e8:	fe bf       	out	0x3e, r31	; 62
   113ea:	0f be       	out	0x3f, r0	; 63
   113ec:	ed bf       	out	0x3d, r30	; 61
   113ee:	32 c0       	rjmp	.+100    	; 0x11454 <FCloseShift+0x408>
     case csWaitTotalizerALL:
	      break;
     case csWaitPrintTotalizerComplete:
	      if (IsFinishPrintingTotalizer==True){
   113f0:	80 91 65 02 	lds	r24, 0x0265
   113f4:	81 30       	cpi	r24, 0x01	; 1
   113f6:	71 f5       	brne	.+92     	; 0x11454 <FCloseShift+0x408>
		      IsFinishPrintingTotalizer=False;
   113f8:	10 92 65 02 	sts	0x0265, r1
		      stCloseShift=csDumpShift;
   113fc:	8c e0       	ldi	r24, 0x0C	; 12
   113fe:	23 c0       	rjmp	.+70     	; 0x11446 <FCloseShift+0x3fa>
		  }
	      break;
     case csDumpShift://Increment CurrentShift save Current to Last
		  lcd_printf(1,1,PSTR("Saving ShiftData.. "));
   11400:	81 e0       	ldi	r24, 0x01	; 1
   11402:	61 e0       	ldi	r22, 0x01	; 1
   11404:	46 e9       	ldi	r20, 0x96	; 150
   11406:	56 e1       	ldi	r21, 0x16	; 22
   11408:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      if (ShiftType==CONTINUE_SHIFT)//Shift=Shift+1
   1140c:	02 30       	cpi	r16, 0x02	; 2
   1140e:	49 f4       	brne	.+18     	; 0x11422 <FCloseShift+0x3d6>
		      eeprom_write_byte(&DefShift,eeprom_read_byte(&DefShift)+1);	 
   11410:	8f e3       	ldi	r24, 0x3F	; 63
   11412:	91 e0       	ldi	r25, 0x01	; 1
   11414:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   11418:	68 2f       	mov	r22, r24
   1141a:	6f 5f       	subi	r22, 0xFF	; 255
   1141c:	8f e3       	ldi	r24, 0x3F	; 63
   1141e:	91 e0       	ldi	r25, 0x01	; 1
   11420:	05 c0       	rjmp	.+10     	; 0x1142c <FCloseShift+0x3e0>
          else if (ShiftType==NEW_SHIFT)//Shift=1
   11422:	01 30       	cpi	r16, 0x01	; 1
   11424:	29 f4       	brne	.+10     	; 0x11430 <FCloseShift+0x3e4>
		      eeprom_write_byte(&DefShift,1);	 
   11426:	8f e3       	ldi	r24, 0x3F	; 63
   11428:	91 e0       	ldi	r25, 0x01	; 1
   1142a:	61 e0       	ldi	r22, 0x01	; 1
   1142c:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

          SaveTotalizerCurrentToLast();
   11430:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <SaveTotalizerCurrentToLast>
          eeprom_write_block((const void*) &CurrentShiftDateTime, (void*) &DefLastShiftDateTime,sizeof(DefLastShiftDateTime));
   11434:	8c e6       	ldi	r24, 0x6C	; 108
   11436:	98 e0       	ldi	r25, 0x08	; 8
   11438:	63 e4       	ldi	r22, 0x43	; 67
   1143a:	78 e0       	ldi	r23, 0x08	; 8
   1143c:	44 e1       	ldi	r20, 0x14	; 20
   1143e:	50 e0       	ldi	r21, 0x00	; 0
   11440:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
		  stCloseShift=csFinishCloseShift;
   11444:	8b e0       	ldi	r24, 0x0B	; 11
   11446:	80 93 27 03 	sts	0x0327, r24
   1144a:	04 c0       	rjmp	.+8      	; 0x11454 <FCloseShift+0x408>
	      break;
     case csFinishCloseShift:
          stCloseShift=csInitCloseShift;
   1144c:	10 92 27 03 	sts	0x0327, r1
		  Result=MENU_DONE;
   11450:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   11452:	01 c0       	rjmp	.+2      	; 0x11456 <FCloseShift+0x40a>
     char Result=MENU_NONE;
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
   11454:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 //uart_printf(0,1,PSTR("Close Shift"));	
   return Result;
}
   11456:	64 96       	adiw	r28, 0x14	; 20
   11458:	0f b6       	in	r0, 0x3f	; 63
   1145a:	f8 94       	cli
   1145c:	de bf       	out	0x3e, r29	; 62
   1145e:	0f be       	out	0x3f, r0	; 63
   11460:	cd bf       	out	0x3d, r28	; 61
   11462:	cf 91       	pop	r28
   11464:	df 91       	pop	r29
   11466:	1f 91       	pop	r17
   11468:	0f 91       	pop	r16
   1146a:	ff 90       	pop	r15
   1146c:	ef 90       	pop	r14
   1146e:	08 95       	ret

00011470 <FMenuShift>:
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
     switch(stMenuShift){
   11470:	80 91 28 03 	lds	r24, 0x0328
   11474:	82 30       	cpi	r24, 0x02	; 2
   11476:	09 f4       	brne	.+2      	; 0x1147a <FMenuShift+0xa>
   11478:	48 c0       	rjmp	.+144    	; 0x1150a <FMenuShift+0x9a>
   1147a:	83 30       	cpi	r24, 0x03	; 3
   1147c:	30 f4       	brcc	.+12     	; 0x1148a <FMenuShift+0x1a>
   1147e:	88 23       	and	r24, r24
   11480:	69 f0       	breq	.+26     	; 0x1149c <FMenuShift+0x2c>
   11482:	81 30       	cpi	r24, 0x01	; 1
   11484:	09 f0       	breq	.+2      	; 0x11488 <FMenuShift+0x18>
   11486:	4f c0       	rjmp	.+158    	; 0x11526 <FMenuShift+0xb6>
   11488:	25 c0       	rjmp	.+74     	; 0x114d4 <FMenuShift+0x64>
   1148a:	84 30       	cpi	r24, 0x04	; 4
   1148c:	09 f4       	brne	.+2      	; 0x11490 <FMenuShift+0x20>
   1148e:	4d c0       	rjmp	.+154    	; 0x1152a <FMenuShift+0xba>
   11490:	84 30       	cpi	r24, 0x04	; 4
   11492:	e8 f1       	brcs	.+122    	; 0x1150e <FMenuShift+0x9e>
   11494:	85 30       	cpi	r24, 0x05	; 5
   11496:	09 f0       	breq	.+2      	; 0x1149a <FMenuShift+0x2a>
   11498:	46 c0       	rjmp	.+140    	; 0x11526 <FMenuShift+0xb6>
   1149a:	41 c0       	rjmp	.+130    	; 0x1151e <FMenuShift+0xae>
	 case msInitMenuShift:
	      lcd_clear();
   1149c:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Close Shift"));
   114a0:	81 e0       	ldi	r24, 0x01	; 1
   114a2:	61 e0       	ldi	r22, 0x01	; 1
   114a4:	49 e2       	ldi	r20, 0x29	; 41
   114a6:	57 e1       	ldi	r21, 0x17	; 23
   114a8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Close Day  "));
   114ac:	82 e0       	ldi	r24, 0x02	; 2
   114ae:	61 e0       	ldi	r22, 0x01	; 1
   114b0:	4b e1       	ldi	r20, 0x1B	; 27
   114b2:	57 e1       	ldi	r21, 0x17	; 23
   114b4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("3.Lock Pump  "));
   114b8:	83 e0       	ldi	r24, 0x03	; 3
   114ba:	61 e0       	ldi	r22, 0x01	; 1
   114bc:	4d e0       	ldi	r20, 0x0D	; 13
   114be:	57 e1       	ldi	r21, 0x17	; 23
   114c0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit"));
   114c4:	84 e0       	ldi	r24, 0x04	; 4
   114c6:	61 e0       	ldi	r22, 0x01	; 1
   114c8:	46 e0       	ldi	r20, 0x06	; 6
   114ca:	57 e1       	ldi	r21, 0x17	; 23
   114cc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stMenuShift=msSelectShift;
   114d0:	81 e0       	ldi	r24, 0x01	; 1
   114d2:	18 c0       	rjmp	.+48     	; 0x11504 <FMenuShift+0x94>
	      break;
     case msSelectShift:
          KeyPressed=_key_scan(1);
   114d4:	81 e0       	ldi	r24, 0x01	; 1
   114d6:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   114da:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
          switch(KeyChar){
   114de:	82 33       	cpi	r24, 0x32	; 50
   114e0:	61 f0       	breq	.+24     	; 0x114fa <FMenuShift+0x8a>
   114e2:	83 33       	cpi	r24, 0x33	; 51
   114e4:	28 f4       	brcc	.+10     	; 0x114f0 <FMenuShift+0x80>
   114e6:	8a 32       	cpi	r24, 0x2A	; 42
   114e8:	61 f0       	breq	.+24     	; 0x11502 <FMenuShift+0x92>
   114ea:	81 33       	cpi	r24, 0x31	; 49
   114ec:	e1 f4       	brne	.+56     	; 0x11526 <FMenuShift+0xb6>
   114ee:	03 c0       	rjmp	.+6      	; 0x114f6 <FMenuShift+0x86>
   114f0:	83 33       	cpi	r24, 0x33	; 51
   114f2:	c9 f4       	brne	.+50     	; 0x11526 <FMenuShift+0xb6>
   114f4:	04 c0       	rjmp	.+8      	; 0x114fe <FMenuShift+0x8e>
		  case '1':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseShift;
   114f6:	82 e0       	ldi	r24, 0x02	; 2
   114f8:	05 c0       	rjmp	.+10     	; 0x11504 <FMenuShift+0x94>
		       break; 
		  case '2':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseDay;
   114fa:	83 e0       	ldi	r24, 0x03	; 3
   114fc:	03 c0       	rjmp	.+6      	; 0x11504 <FMenuShift+0x94>
		       break; 
		  case '3':
		       SubMenu=MENU_NONE;
		       stMenuShift=msLockPump;
   114fe:	84 e0       	ldi	r24, 0x04	; 4
   11500:	01 c0       	rjmp	.+2      	; 0x11504 <FMenuShift+0x94>
		       break; 
		  case '*':
		       stMenuShift=msExitShift;
   11502:	85 e0       	ldi	r24, 0x05	; 5
   11504:	80 93 28 03 	sts	0x0328, r24
   11508:	0e c0       	rjmp	.+28     	; 0x11526 <FMenuShift+0xb6>
		       break; 			   		  
		  }
		  break;
     case msCloseShift:
	      SubMenu=FCloseShift(CONTINUE_SHIFT);
   1150a:	82 e0       	ldi	r24, 0x02	; 2
   1150c:	01 c0       	rjmp	.+2      	; 0x11510 <FMenuShift+0xa0>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
		  //IsGenerateReport=True;		  
	      break;
     case msCloseDay:
	      SubMenu=FCloseShift(NEW_SHIFT);
   1150e:	81 e0       	ldi	r24, 0x01	; 1
   11510:	0e 94 26 88 	call	0x1104c	; 0x1104c <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
   11514:	81 30       	cpi	r24, 0x01	; 1
   11516:	39 f4       	brne	.+14     	; 0x11526 <FMenuShift+0xb6>
   11518:	10 92 28 03 	sts	0x0328, r1
   1151c:	04 c0       	rjmp	.+8      	; 0x11526 <FMenuShift+0xb6>
     case msLockPump:
	      SubMenu=FLockPump();
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
	      break;
     case msExitShift:
          stMenuShift=msInitMenuShift;
   1151e:	10 92 28 03 	sts	0x0328, r1
	      Result=MENU_DONE;
   11522:	81 e0       	ldi	r24, 0x01	; 1
	      break;	 
   11524:	08 95       	ret
char FMenuShift(){//Close Shift,Close Day
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
   11526:	80 e0       	ldi	r24, 0x00	; 0
   11528:	08 95       	ret
   1152a:	80 e0       	ldi	r24, 0x00	; 0
          stMenuShift=msInitMenuShift;
	      Result=MENU_DONE;
	      break;	 
	 } 
   return Result;
}
   1152c:	08 95       	ret

0001152e <GenerateStandaloneTransData>:

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
}


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
   1152e:	cf 92       	push	r12
   11530:	df 92       	push	r13
   11532:	ef 92       	push	r14
   11534:	ff 92       	push	r15
   11536:	0f 93       	push	r16
   11538:	1f 93       	push	r17
   1153a:	df 93       	push	r29
   1153c:	cf 93       	push	r28
   1153e:	cd b7       	in	r28, 0x3d	; 61
   11540:	de b7       	in	r29, 0x3e	; 62
   11542:	2f 97       	sbiw	r28, 0x0f	; 15
   11544:	0f b6       	in	r0, 0x3f	; 63
   11546:	f8 94       	cli
   11548:	de bf       	out	0x3e, r29	; 62
   1154a:	0f be       	out	0x3f, r0	; 63
   1154c:	cd bf       	out	0x3d, r28	; 61
   1154e:	d8 2e       	mov	r13, r24
   11550:	7b 01       	movw	r14, r22
     char Result=GS_NONE;
	 char strSend[30];
	 char FIPAddr;

	 iPumpID=(xPumpID&0x0F);
	 FIPAddr=GetFIPAddr(iPumpID);
   11552:	8f 70       	andi	r24, 0x0F	; 15
   11554:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
     if (FIPAddr>0){
   11558:	88 23       	and	r24, r24
   1155a:	09 f4       	brne	.+2      	; 0x1155e <GenerateStandaloneTransData+0x30>
   1155c:	32 c1       	rjmp	.+612    	; 0x117c2 <GenerateStandaloneTransData+0x294>
	     FIPAddr=FIPAddr-1;
   1155e:	81 50       	subi	r24, 0x01	; 1
		 iProdID=PNozzle[RecPumpData[FIPAddr].Grade];
   11560:	08 2f       	mov	r16, r24
   11562:	10 e0       	ldi	r17, 0x00	; 0
   11564:	85 e3       	ldi	r24, 0x35	; 53
   11566:	90 e0       	ldi	r25, 0x00	; 0
   11568:	08 9f       	mul	r16, r24
   1156a:	f0 01       	movw	r30, r0
   1156c:	09 9f       	mul	r16, r25
   1156e:	f0 0d       	add	r31, r0
   11570:	18 9f       	mul	r17, r24
   11572:	f0 0d       	add	r31, r0
   11574:	11 24       	eor	r1, r1
   11576:	ea 57       	subi	r30, 0x7A	; 122
   11578:	f9 4f       	sbci	r31, 0xF9	; 249
   1157a:	80 81       	ld	r24, Z
   1157c:	f7 01       	movw	r30, r14
   1157e:	e8 0f       	add	r30, r24
   11580:	f1 1d       	adc	r31, r1
   11582:	20 81       	ld	r18, Z
   11584:	ce 01       	movw	r24, r28
   11586:	01 96       	adiw	r24, 0x01	; 1

		 if (iProdID>0) eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[iProdID-1],sizeof(DefProductName[iProdID-1]));
   11588:	22 23       	and	r18, r18
   1158a:	89 f0       	breq	.+34     	; 0x115ae <GenerateStandaloneTransData+0x80>
   1158c:	30 e0       	ldi	r19, 0x00	; 0
   1158e:	21 50       	subi	r18, 0x01	; 1
   11590:	30 40       	sbci	r19, 0x00	; 0
   11592:	4d e0       	ldi	r20, 0x0D	; 13
   11594:	50 e0       	ldi	r21, 0x00	; 0
   11596:	24 9f       	mul	r18, r20
   11598:	b0 01       	movw	r22, r0
   1159a:	25 9f       	mul	r18, r21
   1159c:	70 0d       	add	r23, r0
   1159e:	34 9f       	mul	r19, r20
   115a0:	70 0d       	add	r23, r0
   115a2:	11 24       	eor	r1, r1
   115a4:	65 54       	subi	r22, 0x45	; 69
   115a6:	7f 4f       	sbci	r23, 0xFF	; 255
   115a8:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
   115ac:	14 c0       	rjmp	.+40     	; 0x115d6 <GenerateStandaloneTransData+0xa8>
		 else sprintf_P(ProductName,PSTR("N/A"));
   115ae:	00 d0       	rcall	.+0      	; 0x115b0 <GenerateStandaloneTransData+0x82>
   115b0:	00 d0       	rcall	.+0      	; 0x115b2 <GenerateStandaloneTransData+0x84>
   115b2:	ad b7       	in	r26, 0x3d	; 61
   115b4:	be b7       	in	r27, 0x3e	; 62
   115b6:	12 96       	adiw	r26, 0x02	; 2
   115b8:	9c 93       	st	X, r25
   115ba:	8e 93       	st	-X, r24
   115bc:	11 97       	sbiw	r26, 0x01	; 1
   115be:	80 ef       	ldi	r24, 0xF0	; 240
   115c0:	93 e2       	ldi	r25, 0x23	; 35
   115c2:	14 96       	adiw	r26, 0x04	; 4
   115c4:	9c 93       	st	X, r25
   115c6:	8e 93       	st	-X, r24
   115c8:	13 97       	sbiw	r26, 0x03	; 3
   115ca:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
   115ce:	0f 90       	pop	r0
   115d0:	0f 90       	pop	r0
   115d2:	0f 90       	pop	r0
   115d4:	0f 90       	pop	r0

		 TermID=eeprom_read_byte(&DefIFT_ID);
   115d6:	80 e0       	ldi	r24, 0x00	; 0
   115d8:	90 e0       	ldi	r25, 0x00	; 0
   115da:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   115de:	c8 2e       	mov	r12, r24

		 //Shift,TransNum,Date,Time
		 sprintf_P(strShift,PSTR("%d"),RecPumpData[FIPAddr].Shift);
   115e0:	00 d0       	rcall	.+0      	; 0x115e2 <GenerateStandaloneTransData+0xb4>
   115e2:	00 d0       	rcall	.+0      	; 0x115e4 <GenerateStandaloneTransData+0xb6>
   115e4:	00 d0       	rcall	.+0      	; 0x115e6 <GenerateStandaloneTransData+0xb8>
   115e6:	ed b7       	in	r30, 0x3d	; 61
   115e8:	fe b7       	in	r31, 0x3e	; 62
   115ea:	31 96       	adiw	r30, 0x01	; 1
   115ec:	86 e4       	ldi	r24, 0x46	; 70
   115ee:	9d e0       	ldi	r25, 0x0D	; 13
   115f0:	ad b7       	in	r26, 0x3d	; 61
   115f2:	be b7       	in	r27, 0x3e	; 62
   115f4:	12 96       	adiw	r26, 0x02	; 2
   115f6:	9c 93       	st	X, r25
   115f8:	8e 93       	st	-X, r24
   115fa:	11 97       	sbiw	r26, 0x01	; 1
   115fc:	8d ee       	ldi	r24, 0xED	; 237
   115fe:	93 e2       	ldi	r25, 0x23	; 35
   11600:	93 83       	std	Z+3, r25	; 0x03
   11602:	82 83       	std	Z+2, r24	; 0x02
   11604:	85 e3       	ldi	r24, 0x35	; 53
   11606:	90 e0       	ldi	r25, 0x00	; 0
   11608:	08 9f       	mul	r16, r24
   1160a:	70 01       	movw	r14, r0
   1160c:	09 9f       	mul	r16, r25
   1160e:	f0 0c       	add	r15, r0
   11610:	18 9f       	mul	r17, r24
   11612:	f0 0c       	add	r15, r0
   11614:	11 24       	eor	r1, r1
   11616:	d7 01       	movw	r26, r14
   11618:	aa 57       	subi	r26, 0x7A	; 122
   1161a:	b9 4f       	sbci	r27, 0xF9	; 249
   1161c:	12 96       	adiw	r26, 0x02	; 2
   1161e:	8c 91       	ld	r24, X
   11620:	84 83       	std	Z+4, r24	; 0x04
   11622:	15 82       	std	Z+5, r1	; 0x05
   11624:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 sprintf_P(strTranNo,PSTR("%s"),RecPumpData[FIPAddr].strTransNum);
   11628:	ed b7       	in	r30, 0x3d	; 61
   1162a:	fe b7       	in	r31, 0x3e	; 62
   1162c:	31 96       	adiw	r30, 0x01	; 1
   1162e:	85 e6       	ldi	r24, 0x65	; 101
   11630:	9d e0       	ldi	r25, 0x0D	; 13
   11632:	ad b7       	in	r26, 0x3d	; 61
   11634:	be b7       	in	r27, 0x3e	; 62
   11636:	12 96       	adiw	r26, 0x02	; 2
   11638:	9c 93       	st	X, r25
   1163a:	8e 93       	st	-X, r24
   1163c:	11 97       	sbiw	r26, 0x01	; 1
   1163e:	8a ee       	ldi	r24, 0xEA	; 234
   11640:	93 e2       	ldi	r25, 0x23	; 35
   11642:	93 83       	std	Z+3, r25	; 0x03
   11644:	82 83       	std	Z+2, r24	; 0x02
   11646:	c7 01       	movw	r24, r14
   11648:	87 57       	subi	r24, 0x77	; 119
   1164a:	99 4f       	sbci	r25, 0xF9	; 249
   1164c:	95 83       	std	Z+5, r25	; 0x05
   1164e:	84 83       	std	Z+4, r24	; 0x04
   11650:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	     sprintf_P(strDate,PSTR("%s"),RecPumpData[FIPAddr].strTransDate);
   11654:	ed b7       	in	r30, 0x3d	; 61
   11656:	fe b7       	in	r31, 0x3e	; 62
   11658:	31 96       	adiw	r30, 0x01	; 1
   1165a:	8c e4       	ldi	r24, 0x4C	; 76
   1165c:	98 e0       	ldi	r25, 0x08	; 8
   1165e:	ad b7       	in	r26, 0x3d	; 61
   11660:	be b7       	in	r27, 0x3e	; 62
   11662:	12 96       	adiw	r26, 0x02	; 2
   11664:	9c 93       	st	X, r25
   11666:	8e 93       	st	-X, r24
   11668:	11 97       	sbiw	r26, 0x01	; 1
   1166a:	87 ee       	ldi	r24, 0xE7	; 231
   1166c:	93 e2       	ldi	r25, 0x23	; 35
   1166e:	93 83       	std	Z+3, r25	; 0x03
   11670:	82 83       	std	Z+2, r24	; 0x02
   11672:	c7 01       	movw	r24, r14
   11674:	80 57       	subi	r24, 0x70	; 112
   11676:	99 4f       	sbci	r25, 0xF9	; 249
   11678:	95 83       	std	Z+5, r25	; 0x05
   1167a:	84 83       	std	Z+4, r24	; 0x04
   1167c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 sprintf_P(strTime,PSTR("%s"),RecPumpData[FIPAddr].strTransTime);	 
   11680:	ed b7       	in	r30, 0x3d	; 61
   11682:	fe b7       	in	r31, 0x3e	; 62
   11684:	31 96       	adiw	r30, 0x01	; 1
   11686:	8b e2       	ldi	r24, 0x2B	; 43
   11688:	94 e0       	ldi	r25, 0x04	; 4
   1168a:	ad b7       	in	r26, 0x3d	; 61
   1168c:	be b7       	in	r27, 0x3e	; 62
   1168e:	12 96       	adiw	r26, 0x02	; 2
   11690:	9c 93       	st	X, r25
   11692:	8e 93       	st	-X, r24
   11694:	11 97       	sbiw	r26, 0x01	; 1
   11696:	84 ee       	ldi	r24, 0xE4	; 228
   11698:	93 e2       	ldi	r25, 0x23	; 35
   1169a:	93 83       	std	Z+3, r25	; 0x03
   1169c:	82 83       	std	Z+2, r24	; 0x02
   1169e:	c7 01       	movw	r24, r14
   116a0:	87 56       	subi	r24, 0x67	; 103
   116a2:	99 4f       	sbci	r25, 0xF9	; 249
   116a4:	95 83       	std	Z+5, r25	; 0x05
   116a6:	84 83       	std	Z+4, r24	; 0x04
   116a8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

	     //TermID,FIP_ID,Product
		 sprintf_P(strIslandID,PSTR("%d"),TermID);
   116ac:	ed b7       	in	r30, 0x3d	; 61
   116ae:	fe b7       	in	r31, 0x3e	; 62
   116b0:	31 96       	adiw	r30, 0x01	; 1
   116b2:	85 ed       	ldi	r24, 0xD5	; 213
   116b4:	99 e0       	ldi	r25, 0x09	; 9
   116b6:	ad b7       	in	r26, 0x3d	; 61
   116b8:	be b7       	in	r27, 0x3e	; 62
   116ba:	12 96       	adiw	r26, 0x02	; 2
   116bc:	9c 93       	st	X, r25
   116be:	8e 93       	st	-X, r24
   116c0:	11 97       	sbiw	r26, 0x01	; 1
   116c2:	81 ee       	ldi	r24, 0xE1	; 225
   116c4:	93 e2       	ldi	r25, 0x23	; 35
   116c6:	93 83       	std	Z+3, r25	; 0x03
   116c8:	82 83       	std	Z+2, r24	; 0x02
   116ca:	c4 82       	std	Z+4, r12	; 0x04
   116cc:	15 82       	std	Z+5, r1	; 0x05
   116ce:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 sprintf_P(strFIP_ID,PSTR("%.2d"),xPumpID);
   116d2:	ed b7       	in	r30, 0x3d	; 61
   116d4:	fe b7       	in	r31, 0x3e	; 62
   116d6:	31 96       	adiw	r30, 0x01	; 1
   116d8:	87 e9       	ldi	r24, 0x97	; 151
   116da:	98 e0       	ldi	r25, 0x08	; 8
   116dc:	ad b7       	in	r26, 0x3d	; 61
   116de:	be b7       	in	r27, 0x3e	; 62
   116e0:	12 96       	adiw	r26, 0x02	; 2
   116e2:	9c 93       	st	X, r25
   116e4:	8e 93       	st	-X, r24
   116e6:	11 97       	sbiw	r26, 0x01	; 1
   116e8:	8c ed       	ldi	r24, 0xDC	; 220
   116ea:	93 e2       	ldi	r25, 0x23	; 35
   116ec:	93 83       	std	Z+3, r25	; 0x03
   116ee:	82 83       	std	Z+2, r24	; 0x02
   116f0:	d4 82       	std	Z+4, r13	; 0x04
   116f2:	15 82       	std	Z+5, r1	; 0x05
   116f4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	     sprintf_P(strDescription,PSTR("%s"),ProductName);
   116f8:	ed b7       	in	r30, 0x3d	; 61
   116fa:	fe b7       	in	r31, 0x3e	; 62
   116fc:	31 96       	adiw	r30, 0x01	; 1
   116fe:	80 e0       	ldi	r24, 0x00	; 0
   11700:	99 e0       	ldi	r25, 0x09	; 9
   11702:	ad b7       	in	r26, 0x3d	; 61
   11704:	be b7       	in	r27, 0x3e	; 62
   11706:	12 96       	adiw	r26, 0x02	; 2
   11708:	9c 93       	st	X, r25
   1170a:	8e 93       	st	-X, r24
   1170c:	11 97       	sbiw	r26, 0x01	; 1
   1170e:	89 ed       	ldi	r24, 0xD9	; 217
   11710:	93 e2       	ldi	r25, 0x23	; 35
   11712:	93 83       	std	Z+3, r25	; 0x03
   11714:	82 83       	std	Z+2, r24	; 0x02
   11716:	ce 01       	movw	r24, r28
   11718:	01 96       	adiw	r24, 0x01	; 1
   1171a:	95 83       	std	Z+5, r25	; 0x05
   1171c:	84 83       	std	Z+4, r24	; 0x04
   1171e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

		 //Price Volume Money
		 sprintf_P(strPrice,PSTR("%s"),RecPumpData[FIPAddr].Price);
   11722:	ed b7       	in	r30, 0x3d	; 61
   11724:	fe b7       	in	r31, 0x3e	; 62
   11726:	31 96       	adiw	r30, 0x01	; 1
   11728:	8c e7       	ldi	r24, 0x7C	; 124
   1172a:	96 e0       	ldi	r25, 0x06	; 6
   1172c:	ad b7       	in	r26, 0x3d	; 61
   1172e:	be b7       	in	r27, 0x3e	; 62
   11730:	12 96       	adiw	r26, 0x02	; 2
   11732:	9c 93       	st	X, r25
   11734:	8e 93       	st	-X, r24
   11736:	11 97       	sbiw	r26, 0x01	; 1
   11738:	86 ed       	ldi	r24, 0xD6	; 214
   1173a:	93 e2       	ldi	r25, 0x23	; 35
   1173c:	93 83       	std	Z+3, r25	; 0x03
   1173e:	82 83       	std	Z+2, r24	; 0x02
   11740:	c7 01       	movw	r24, r14
   11742:	8e 55       	subi	r24, 0x5E	; 94
   11744:	99 4f       	sbci	r25, 0xF9	; 249
   11746:	95 83       	std	Z+5, r25	; 0x05
   11748:	84 83       	std	Z+4, r24	; 0x04
   1174a:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	     sprintf_P(strVolume,PSTR("%s"),RecPumpData[FIPAddr].Volume);
   1174e:	ed b7       	in	r30, 0x3d	; 61
   11750:	fe b7       	in	r31, 0x3e	; 62
   11752:	31 96       	adiw	r30, 0x01	; 1
   11754:	83 e5       	ldi	r24, 0x53	; 83
   11756:	94 e0       	ldi	r25, 0x04	; 4
   11758:	ad b7       	in	r26, 0x3d	; 61
   1175a:	be b7       	in	r27, 0x3e	; 62
   1175c:	12 96       	adiw	r26, 0x02	; 2
   1175e:	9c 93       	st	X, r25
   11760:	8e 93       	st	-X, r24
   11762:	11 97       	sbiw	r26, 0x01	; 1
   11764:	83 ed       	ldi	r24, 0xD3	; 211
   11766:	93 e2       	ldi	r25, 0x23	; 35
   11768:	93 83       	std	Z+3, r25	; 0x03
   1176a:	82 83       	std	Z+2, r24	; 0x02
   1176c:	c7 01       	movw	r24, r14
   1176e:	87 55       	subi	r24, 0x57	; 87
   11770:	99 4f       	sbci	r25, 0xF9	; 249
   11772:	95 83       	std	Z+5, r25	; 0x05
   11774:	84 83       	std	Z+4, r24	; 0x04
   11776:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		 sprintf_P(strAmount,PSTR("%s"),RecPumpData[FIPAddr].Money);
   1177a:	ed b7       	in	r30, 0x3d	; 61
   1177c:	fe b7       	in	r31, 0x3e	; 62
   1177e:	31 96       	adiw	r30, 0x01	; 1
   11780:	81 e9       	ldi	r24, 0x91	; 145
   11782:	9c e0       	ldi	r25, 0x0C	; 12
   11784:	ad b7       	in	r26, 0x3d	; 61
   11786:	be b7       	in	r27, 0x3e	; 62
   11788:	12 96       	adiw	r26, 0x02	; 2
   1178a:	9c 93       	st	X, r25
   1178c:	8e 93       	st	-X, r24
   1178e:	11 97       	sbiw	r26, 0x01	; 1
   11790:	80 ed       	ldi	r24, 0xD0	; 208
   11792:	93 e2       	ldi	r25, 0x23	; 35
   11794:	93 83       	std	Z+3, r25	; 0x03
   11796:	82 83       	std	Z+2, r24	; 0x02
   11798:	c7 01       	movw	r24, r14
   1179a:	8e 54       	subi	r24, 0x4E	; 78
   1179c:	99 4f       	sbci	r25, 0xF9	; 249
   1179e:	95 83       	std	Z+5, r25	; 0x05
   117a0:	84 83       	std	Z+4, r24	; 0x04
   117a2:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

		 MOPType=MOP_CASH;
   117a6:	10 92 96 02 	sts	0x0296, r1
	     IsPrinting=True;	 
   117aa:	81 e0       	ldi	r24, 0x01	; 1
   117ac:	80 93 8a 02 	sts	0x028A, r24
   117b0:	ed b7       	in	r30, 0x3d	; 61
   117b2:	fe b7       	in	r31, 0x3e	; 62
   117b4:	36 96       	adiw	r30, 0x06	; 6
   117b6:	0f b6       	in	r0, 0x3f	; 63
   117b8:	f8 94       	cli
   117ba:	fe bf       	out	0x3e, r31	; 62
   117bc:	0f be       	out	0x3f, r0	; 63
   117be:	ed bf       	out	0x3d, r30	; 61
   117c0:	01 c0       	rjmp	.+2      	; 0x117c4 <GenerateStandaloneTransData+0x296>


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
	 char ProductName[15];//,strPPU[7],strPVolume[8],strPMoney[8];
     char iPumpID,iProdID=0,TermID;//,PPumpID[8];
     char Result=GS_NONE;
   117c2:	80 e0       	ldi	r24, 0x00	; 0
	 }
	 //ProductName	 
	 //iProdID=PNozzle[RecPumpData[iPumpID].Nozzle];
	 //BAsedOnGrade
   return Result;
}
   117c4:	2f 96       	adiw	r28, 0x0f	; 15
   117c6:	0f b6       	in	r0, 0x3f	; 63
   117c8:	f8 94       	cli
   117ca:	de bf       	out	0x3e, r29	; 62
   117cc:	0f be       	out	0x3f, r0	; 63
   117ce:	cd bf       	out	0x3d, r28	; 61
   117d0:	cf 91       	pop	r28
   117d2:	df 91       	pop	r29
   117d4:	1f 91       	pop	r17
   117d6:	0f 91       	pop	r16
   117d8:	ff 90       	pop	r15
   117da:	ef 90       	pop	r14
   117dc:	df 90       	pop	r13
   117de:	cf 90       	pop	r12
   117e0:	08 95       	ret

000117e2 <PrintStandalone>:
     char Result=PS_NONE;

   return Result;
}

char PrintStandalone(char FIPAddr,char IsReprint){
   117e2:	ef 92       	push	r14
   117e4:	ff 92       	push	r15
   117e6:	0f 93       	push	r16
   117e8:	1f 93       	push	r17
   117ea:	df 93       	push	r29
   117ec:	cf 93       	push	r28
   117ee:	00 d0       	rcall	.+0      	; 0x117f0 <PrintStandalone+0xe>
   117f0:	00 d0       	rcall	.+0      	; 0x117f2 <PrintStandalone+0x10>
   117f2:	00 d0       	rcall	.+0      	; 0x117f4 <PrintStandalone+0x12>
   117f4:	cd b7       	in	r28, 0x3d	; 61
   117f6:	de b7       	in	r29, 0x3e	; 62
   117f8:	08 2f       	mov	r16, r24
   117fa:	f6 2e       	mov	r15, r22
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;

//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
   117fc:	0e 94 b8 6c 	call	0xd970	; 0xd970 <GetPumpID>
   11800:	e8 2e       	mov	r14, r24
     LFIPAddr=GetFIPAddr(iPumpID);
   11802:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>

     if (LFIPAddr>0){
   11806:	88 23       	and	r24, r24
   11808:	b1 f1       	breq	.+108    	; 0x11876 <PrintStandalone+0x94>
	     LFIPAddr=LFIPAddr-1;
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
   1180a:	9f 2d       	mov	r25, r15
   1180c:	91 30       	cpi	r25, 0x01	; 1
   1180e:	51 f0       	breq	.+20     	; 0x11824 <PrintStandalone+0x42>
   11810:	ee 20       	and	r14, r14
   11812:	89 f1       	breq	.+98     	; 0x11876 <PrintStandalone+0x94>
//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
     LFIPAddr=GetFIPAddr(iPumpID);

     if (LFIPAddr>0){
	     LFIPAddr=LFIPAddr-1;
   11814:	81 50       	subi	r24, 0x01	; 1
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
   11816:	e8 2f       	mov	r30, r24
   11818:	f0 e0       	ldi	r31, 0x00	; 0
   1181a:	ee 5f       	subi	r30, 0xFE	; 254
   1181c:	fe 4f       	sbci	r31, 0xFE	; 254
   1181e:	80 81       	ld	r24, Z
   11820:	80 35       	cpi	r24, 0x50	; 80
   11822:	49 f5       	brne	.+82     	; 0x11876 <PrintStandalone+0x94>
		     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);		 
   11824:	10 e0       	ldi	r17, 0x00	; 0
   11826:	c8 01       	movw	r24, r16
   11828:	01 97       	sbiw	r24, 0x01	; 1
   1182a:	9c 01       	movw	r18, r24
   1182c:	22 0f       	add	r18, r18
   1182e:	33 1f       	adc	r19, r19
   11830:	28 0f       	add	r18, r24
   11832:	39 1f       	adc	r19, r25
   11834:	22 0f       	add	r18, r18
   11836:	33 1f       	adc	r19, r19
   11838:	2b 5a       	subi	r18, 0xAB	; 171
   1183a:	3f 4f       	sbci	r19, 0xFF	; 255
   1183c:	ce 01       	movw	r24, r28
   1183e:	01 96       	adiw	r24, 0x01	; 1
   11840:	b9 01       	movw	r22, r18
   11842:	46 e0       	ldi	r20, 0x06	; 6
   11844:	50 e0       	ldi	r21, 0x00	; 0
   11846:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
		     if (((ReprintReady[FIPAddr-1]==True))||(IsReprint==False)){
   1184a:	f8 01       	movw	r30, r16
   1184c:	ee 5e       	subi	r30, 0xEE	; 238
   1184e:	fe 4f       	sbci	r31, 0xFE	; 254
   11850:	80 81       	ld	r24, Z
   11852:	81 30       	cpi	r24, 0x01	; 1
   11854:	19 f0       	breq	.+6      	; 0x1185c <PrintStandalone+0x7a>
   11856:	ff 20       	and	r15, r15
   11858:	31 f0       	breq	.+12     	; 0x11866 <PrintStandalone+0x84>
   1185a:	0d c0       	rjmp	.+26     	; 0x11876 <PrintStandalone+0x94>
			       if (IsReprint==True)IsReprintTicket=True;
   1185c:	8f 2d       	mov	r24, r15
   1185e:	81 30       	cpi	r24, 0x01	; 1
   11860:	11 f4       	brne	.+4      	; 0x11866 <PrintStandalone+0x84>
   11862:	f0 92 5d 02 	sts	0x025D, r15
			       GenerateStandaloneTransData(iPumpID,PProductID);		 			   
   11866:	8e 2d       	mov	r24, r14
   11868:	be 01       	movw	r22, r28
   1186a:	6f 5f       	subi	r22, 0xFF	; 255
   1186c:	7f 4f       	sbci	r23, 0xFF	; 255
   1186e:	0e 94 97 8a 	call	0x1152e	; 0x1152e <GenerateStandaloneTransData>
	               Result=PS_PRINTED;
   11872:	81 e1       	ldi	r24, 0x11	; 17
   11874:	01 c0       	rjmp	.+2      	; 0x11878 <PrintStandalone+0x96>
char PrintStandalone(char FIPAddr,char IsReprint){
     char iPumpID,Result=PS_NONE;
	 char PProductID[6];//,PPumpID[8];
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;
   11876:	82 e1       	ldi	r24, 0x12	; 18
			 }//else Result=PS_NO_DATA;
		 }
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}
   11878:	26 96       	adiw	r28, 0x06	; 6
   1187a:	0f b6       	in	r0, 0x3f	; 63
   1187c:	f8 94       	cli
   1187e:	de bf       	out	0x3e, r29	; 62
   11880:	0f be       	out	0x3f, r0	; 63
   11882:	cd bf       	out	0x3d, r28	; 61
   11884:	cf 91       	pop	r28
   11886:	df 91       	pop	r29
   11888:	1f 91       	pop	r17
   1188a:	0f 91       	pop	r16
   1188c:	ff 90       	pop	r15
   1188e:	ef 90       	pop	r14
   11890:	08 95       	ret

00011892 <FMenuTicket>:
	    StrResult[2]='0'+Val;
	    StrResult[3]=0;
		}   
}

char FMenuTicket(){
   11892:	ef 92       	push	r14
   11894:	0f 93       	push	r16
   11896:	1f 93       	push	r17
   11898:	df 93       	push	r29
   1189a:	cf 93       	push	r28
   1189c:	cd b7       	in	r28, 0x3d	; 61
   1189e:	de b7       	in	r29, 0x3e	; 62
   118a0:	64 97       	sbiw	r28, 0x14	; 20
   118a2:	0f b6       	in	r0, 0x3f	; 63
   118a4:	f8 94       	cli
   118a6:	de bf       	out	0x3e, r29	; 62
   118a8:	0f be       	out	0x3f, r0	; 63
   118aa:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
    switch(stMenuTicket){
   118ac:	80 91 eb 02 	lds	r24, 0x02EB
   118b0:	86 30       	cpi	r24, 0x06	; 6
   118b2:	09 f4       	brne	.+2      	; 0x118b6 <FMenuTicket+0x24>
   118b4:	be c0       	rjmp	.+380    	; 0x11a32 <FMenuTicket+0x1a0>
   118b6:	87 30       	cpi	r24, 0x07	; 7
   118b8:	88 f4       	brcc	.+34     	; 0x118dc <FMenuTicket+0x4a>
   118ba:	82 30       	cpi	r24, 0x02	; 2
   118bc:	e9 f1       	breq	.+122    	; 0x11938 <FMenuTicket+0xa6>
   118be:	83 30       	cpi	r24, 0x03	; 3
   118c0:	30 f4       	brcc	.+12     	; 0x118ce <FMenuTicket+0x3c>
   118c2:	88 23       	and	r24, r24
   118c4:	09 f1       	breq	.+66     	; 0x11908 <FMenuTicket+0x76>
   118c6:	81 30       	cpi	r24, 0x01	; 1
   118c8:	09 f0       	breq	.+2      	; 0x118cc <FMenuTicket+0x3a>
   118ca:	22 c1       	rjmp	.+580    	; 0x11b10 <FMenuTicket+0x27e>
   118cc:	1f c0       	rjmp	.+62     	; 0x1190c <FMenuTicket+0x7a>
   118ce:	84 30       	cpi	r24, 0x04	; 4
   118d0:	09 f4       	brne	.+2      	; 0x118d4 <FMenuTicket+0x42>
   118d2:	87 c0       	rjmp	.+270    	; 0x119e2 <FMenuTicket+0x150>
   118d4:	85 30       	cpi	r24, 0x05	; 5
   118d6:	08 f0       	brcs	.+2      	; 0x118da <FMenuTicket+0x48>
   118d8:	a6 c0       	rjmp	.+332    	; 0x11a26 <FMenuTicket+0x194>
   118da:	4d c0       	rjmp	.+154    	; 0x11976 <FMenuTicket+0xe4>
   118dc:	89 30       	cpi	r24, 0x09	; 9
   118de:	09 f4       	brne	.+2      	; 0x118e2 <FMenuTicket+0x50>
   118e0:	f4 c0       	rjmp	.+488    	; 0x11aca <FMenuTicket+0x238>
   118e2:	8a 30       	cpi	r24, 0x0A	; 10
   118e4:	38 f4       	brcc	.+14     	; 0x118f4 <FMenuTicket+0x62>
   118e6:	87 30       	cpi	r24, 0x07	; 7
   118e8:	09 f4       	brne	.+2      	; 0x118ec <FMenuTicket+0x5a>
   118ea:	d2 c0       	rjmp	.+420    	; 0x11a90 <FMenuTicket+0x1fe>
   118ec:	88 30       	cpi	r24, 0x08	; 8
   118ee:	09 f0       	breq	.+2      	; 0x118f2 <FMenuTicket+0x60>
   118f0:	0f c1       	rjmp	.+542    	; 0x11b10 <FMenuTicket+0x27e>
   118f2:	be c0       	rjmp	.+380    	; 0x11a70 <FMenuTicket+0x1de>
   118f4:	8b 30       	cpi	r24, 0x0B	; 11
   118f6:	09 f4       	brne	.+2      	; 0x118fa <FMenuTicket+0x68>
   118f8:	ee c0       	rjmp	.+476    	; 0x11ad6 <FMenuTicket+0x244>
   118fa:	8b 30       	cpi	r24, 0x0B	; 11
   118fc:	08 f4       	brcc	.+2      	; 0x11900 <FMenuTicket+0x6e>
   118fe:	00 c1       	rjmp	.+512    	; 0x11b00 <FMenuTicket+0x26e>
   11900:	8c 30       	cpi	r24, 0x0C	; 12
   11902:	09 f0       	breq	.+2      	; 0x11906 <FMenuTicket+0x74>
   11904:	05 c1       	rjmp	.+522    	; 0x11b10 <FMenuTicket+0x27e>
   11906:	00 c1       	rjmp	.+512    	; 0x11b08 <FMenuTicket+0x276>
	case mtInit:
		 stMenuTicket=mtPlatNo;
   11908:	81 e0       	ldi	r24, 0x01	; 1
   1190a:	fb c0       	rjmp	.+502    	; 0x11b02 <FMenuTicket+0x270>
	     break;
    case mtPlatNo:
	     lcd_clear();
   1190c:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	     lcd_printf(1,1,PSTR("Input Plat No: "));
   11910:	81 e0       	ldi	r24, 0x01	; 1
   11912:	61 e0       	ldi	r22, 0x01	; 1
   11914:	43 e2       	ldi	r20, 0x23	; 35
   11916:	5c e0       	ldi	r21, 0x0C	; 12
   11918:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	     lcd_printf(2,1,PSTR("_"));
   1191c:	82 e0       	ldi	r24, 0x02	; 2
   1191e:	61 e0       	ldi	r22, 0x01	; 1
   11920:	41 e2       	ldi	r20, 0x21	; 33
   11922:	5c e0       	ldi	r21, 0x0C	; 12
   11924:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
   11928:	84 e0       	ldi	r24, 0x04	; 4
   1192a:	61 e0       	ldi	r22, 0x01	; 1
   1192c:	4c e0       	ldi	r20, 0x0C	; 12
   1192e:	5c e0       	ldi	r21, 0x0C	; 12
   11930:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputPlatNo;
   11934:	82 e0       	ldi	r24, 0x02	; 2
   11936:	e5 c0       	rjmp	.+458    	; 0x11b02 <FMenuTicket+0x270>
	     break;
    case mtInputPlatNo:
	     uiResult=UserInput(UI_ALPHANUM_R,2,1,strLicPlate,0,10);
   11938:	83 e0       	ldi	r24, 0x03	; 3
   1193a:	62 e0       	ldi	r22, 0x02	; 2
   1193c:	41 e0       	ldi	r20, 0x01	; 1
   1193e:	28 ed       	ldi	r18, 0xD8	; 216
   11940:	39 e0       	ldi	r19, 0x09	; 9
   11942:	00 e0       	ldi	r16, 0x00	; 0
   11944:	10 e0       	ldi	r17, 0x00	; 0
   11946:	aa e0       	ldi	r26, 0x0A	; 10
   11948:	ea 2e       	mov	r14, r26
   1194a:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtOdometer;
   1194e:	83 30       	cpi	r24, 0x03	; 3
   11950:	09 f4       	brne	.+2      	; 0x11954 <FMenuTicket+0xc2>
   11952:	d7 c0       	rjmp	.+430    	; 0x11b02 <FMenuTicket+0x270>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtExitMenuTicket;
   11954:	81 30       	cpi	r24, 0x01	; 1
   11956:	09 f4       	brne	.+2      	; 0x1195a <FMenuTicket+0xc8>
   11958:	d3 c0       	rjmp	.+422    	; 0x11b00 <FMenuTicket+0x26e>
         else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   1195a:	84 30       	cpi	r24, 0x04	; 4
   1195c:	21 f4       	brne	.+8      	; 0x11966 <FMenuTicket+0xd4>
   1195e:	61 e0       	ldi	r22, 0x01	; 1
   11960:	47 ef       	ldi	r20, 0xF7	; 247
   11962:	5b e0       	ldi	r21, 0x0B	; 11
   11964:	55 c0       	rjmp	.+170    	; 0x11a10 <FMenuTicket+0x17e>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11966:	85 30       	cpi	r24, 0x05	; 5
   11968:	09 f0       	breq	.+2      	; 0x1196c <FMenuTicket+0xda>
   1196a:	d2 c0       	rjmp	.+420    	; 0x11b10 <FMenuTicket+0x27e>
   1196c:	84 e0       	ldi	r24, 0x04	; 4
   1196e:	61 e0       	ldi	r22, 0x01	; 1
   11970:	42 ee       	ldi	r20, 0xE2	; 226
   11972:	5b e0       	ldi	r21, 0x0B	; 11
   11974:	4d c0       	rjmp	.+154    	; 0x11a10 <FMenuTicket+0x17e>
	     break;
    case mtOdometer:
	     lcd_clear();
   11976:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		 sprintf_P(lcdteks,PSTR("Plat No: %s "),strLicPlate);
   1197a:	00 d0       	rcall	.+0      	; 0x1197c <FMenuTicket+0xea>
   1197c:	00 d0       	rcall	.+0      	; 0x1197e <FMenuTicket+0xec>
   1197e:	00 d0       	rcall	.+0      	; 0x11980 <FMenuTicket+0xee>
   11980:	ed b7       	in	r30, 0x3d	; 61
   11982:	fe b7       	in	r31, 0x3e	; 62
   11984:	31 96       	adiw	r30, 0x01	; 1
   11986:	8e 01       	movw	r16, r28
   11988:	0f 5f       	subi	r16, 0xFF	; 255
   1198a:	1f 4f       	sbci	r17, 0xFF	; 255
   1198c:	ad b7       	in	r26, 0x3d	; 61
   1198e:	be b7       	in	r27, 0x3e	; 62
   11990:	12 96       	adiw	r26, 0x02	; 2
   11992:	1c 93       	st	X, r17
   11994:	0e 93       	st	-X, r16
   11996:	11 97       	sbiw	r26, 0x01	; 1
   11998:	85 ed       	ldi	r24, 0xD5	; 213
   1199a:	9b e0       	ldi	r25, 0x0B	; 11
   1199c:	93 83       	std	Z+3, r25	; 0x03
   1199e:	82 83       	std	Z+2, r24	; 0x02
   119a0:	88 ed       	ldi	r24, 0xD8	; 216
   119a2:	99 e0       	ldi	r25, 0x09	; 9
   119a4:	95 83       	std	Z+5, r25	; 0x05
   119a6:	84 83       	std	Z+4, r24	; 0x04
   119a8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	     lcd_print(1,1,lcdteks);
   119ac:	8d b7       	in	r24, 0x3d	; 61
   119ae:	9e b7       	in	r25, 0x3e	; 62
   119b0:	06 96       	adiw	r24, 0x06	; 6
   119b2:	0f b6       	in	r0, 0x3f	; 63
   119b4:	f8 94       	cli
   119b6:	9e bf       	out	0x3e, r25	; 62
   119b8:	0f be       	out	0x3f, r0	; 63
   119ba:	8d bf       	out	0x3d, r24	; 61
   119bc:	81 e0       	ldi	r24, 0x01	; 1
   119be:	61 e0       	ldi	r22, 0x01	; 1
   119c0:	a8 01       	movw	r20, r16
   119c2:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
	     lcd_printf(2,1,PSTR("Odometer:_ "));
   119c6:	82 e0       	ldi	r24, 0x02	; 2
   119c8:	61 e0       	ldi	r22, 0x01	; 1
   119ca:	49 ec       	ldi	r20, 0xC9	; 201
   119cc:	5b e0       	ldi	r21, 0x0B	; 11
   119ce:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
   119d2:	84 e0       	ldi	r24, 0x04	; 4
   119d4:	61 e0       	ldi	r22, 0x01	; 1
   119d6:	44 eb       	ldi	r20, 0xB4	; 180
   119d8:	5b e0       	ldi	r21, 0x0B	; 11
   119da:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputOdometer;
   119de:	84 e0       	ldi	r24, 0x04	; 4
   119e0:	90 c0       	rjmp	.+288    	; 0x11b02 <FMenuTicket+0x270>
	     break;
    case mtInputOdometer:
	     uiResult=UserInput(UI_NUMBER_R,2,10,strOdometer,0,10);
   119e2:	81 e0       	ldi	r24, 0x01	; 1
   119e4:	62 e0       	ldi	r22, 0x02	; 2
   119e6:	4a e0       	ldi	r20, 0x0A	; 10
   119e8:	21 ea       	ldi	r18, 0xA1	; 161
   119ea:	34 e0       	ldi	r19, 0x04	; 4
   119ec:	00 e0       	ldi	r16, 0x00	; 0
   119ee:	10 e0       	ldi	r17, 0x00	; 0
   119f0:	fa e0       	ldi	r31, 0x0A	; 10
   119f2:	ef 2e       	mov	r14, r31
   119f4:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtFIP;
   119f8:	83 30       	cpi	r24, 0x03	; 3
   119fa:	11 f4       	brne	.+4      	; 0x11a00 <FMenuTicket+0x16e>
   119fc:	85 e0       	ldi	r24, 0x05	; 5
   119fe:	81 c0       	rjmp	.+258    	; 0x11b02 <FMenuTicket+0x270>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtPlatNo;
   11a00:	81 30       	cpi	r24, 0x01	; 1
   11a02:	09 f4       	brne	.+2      	; 0x11a06 <FMenuTicket+0x174>
   11a04:	7e c0       	rjmp	.+252    	; 0x11b02 <FMenuTicket+0x270>
		 else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   11a06:	84 30       	cpi	r24, 0x04	; 4
   11a08:	31 f4       	brne	.+12     	; 0x11a16 <FMenuTicket+0x184>
   11a0a:	61 e0       	ldi	r22, 0x01	; 1
   11a0c:	4f e9       	ldi	r20, 0x9F	; 159
   11a0e:	5b e0       	ldi	r21, 0x0B	; 11
   11a10:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
   11a14:	7d c0       	rjmp	.+250    	; 0x11b10 <FMenuTicket+0x27e>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11a16:	85 30       	cpi	r24, 0x05	; 5
   11a18:	09 f0       	breq	.+2      	; 0x11a1c <FMenuTicket+0x18a>
   11a1a:	7a c0       	rjmp	.+244    	; 0x11b10 <FMenuTicket+0x27e>
   11a1c:	84 e0       	ldi	r24, 0x04	; 4
   11a1e:	61 e0       	ldi	r22, 0x01	; 1
   11a20:	4a e8       	ldi	r20, 0x8A	; 138
   11a22:	5b e0       	ldi	r21, 0x0B	; 11
   11a24:	f5 cf       	rjmp	.-22     	; 0x11a10 <FMenuTicket+0x17e>
	     break;
    case mtFIP:
	     lcd_clear();
   11a26:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		 _scr_pump();
   11a2a:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <_scr_pump>
		 stMenuTicket=mtInputFIP;
   11a2e:	86 e0       	ldi	r24, 0x06	; 6
   11a30:	68 c0       	rjmp	.+208    	; 0x11b02 <FMenuTicket+0x270>
	     break;
    case mtInputFIP:
	     KeyPressed=_key_scan(1);
   11a32:	81 e0       	ldi	r24, 0x01	; 1
   11a34:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
   11a38:	08 2f       	mov	r16, r24
		 KeyChar=_key_btn(KeyPressed);
   11a3a:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		 if ((KeyChar>='1')&&(KeyChar<='8')){
   11a3e:	98 2f       	mov	r25, r24
   11a40:	91 53       	subi	r25, 0x31	; 49
   11a42:	98 30       	cpi	r25, 0x08	; 8
   11a44:	40 f4       	brcc	.+16     	; 0x11a56 <FMenuTicket+0x1c4>
		     FIP_Used=KeyChar-'0';
   11a46:	80 53       	subi	r24, 0x30	; 48
   11a48:	80 93 e8 02 	sts	0x02E8, r24
			 zFIP_Used=FIP_Used;
   11a4c:	80 93 e7 02 	sts	0x02E7, r24
		     stMenuTicket=mtSendMsg98;
   11a50:	87 e0       	ldi	r24, 0x07	; 7
   11a52:	80 93 eb 02 	sts	0x02EB, r24
		 }
		 if (KeyPressed==_KEY_CANCEL){
   11a56:	07 3e       	cpi	r16, 0xE7	; 231
   11a58:	11 f4       	brne	.+4      	; 0x11a5e <FMenuTicket+0x1cc>
             stMenuTicket=mtOdometer;
   11a5a:	83 e0       	ldi	r24, 0x03	; 3
   11a5c:	52 c0       	rjmp	.+164    	; 0x11b02 <FMenuTicket+0x270>
		 }else
		 if (KeyPressed==_KEY_ENTER){
   11a5e:	07 3b       	cpi	r16, 0xB7	; 183
   11a60:	09 f0       	breq	.+2      	; 0x11a64 <FMenuTicket+0x1d2>
   11a62:	56 c0       	rjmp	.+172    	; 0x11b10 <FMenuTicket+0x27e>
		     FIP_Used=zFIP_Used;
   11a64:	80 91 e7 02 	lds	r24, 0x02E7
   11a68:	80 93 e8 02 	sts	0x02E8, r24
             stMenuTicket=mtInitWaitMessage99;
   11a6c:	88 e0       	ldi	r24, 0x08	; 8
   11a6e:	49 c0       	rjmp	.+146    	; 0x11b02 <FMenuTicket+0x270>
		 }
	     break;	
    case mtInitWaitMessage99:
	     lcd_clear();
   11a70:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		 lcd_printf(2,1,PSTR("Send Request"));
   11a74:	82 e0       	ldi	r24, 0x02	; 2
   11a76:	61 e0       	ldi	r22, 0x01	; 1
   11a78:	4d e7       	ldi	r20, 0x7D	; 125
   11a7a:	5b e0       	ldi	r21, 0x0B	; 11
   11a7c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 lcd_printf(3,1,PSTR("Proses"));
   11a80:	83 e0       	ldi	r24, 0x03	; 3
   11a82:	61 e0       	ldi	r22, 0x01	; 1
   11a84:	46 e7       	ldi	r20, 0x76	; 118
   11a86:	5b e0       	ldi	r21, 0x0B	; 11
   11a88:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
         stMenuTicket=mtSendMsg98;
   11a8c:	87 e0       	ldi	r24, 0x07	; 7
   11a8e:	39 c0       	rjmp	.+114    	; 0x11b02 <FMenuTicket+0x270>
	     break;
    case mtSendMsg98:
	     iPos=0;
   11a90:	10 92 ea 02 	sts	0x02EA, r1
		 iSend=0;
   11a94:	10 92 e9 02 	sts	0x02E9, r1
		 IsMessage99=False;
   11a98:	10 92 7d 02 	sts	0x027D, r1
		 TimSend=0;
   11a9c:	10 92 56 0d 	sts	0x0D56, r1
		 iLoop=0;
   11aa0:	10 92 e6 02 	sts	0x02E6, r1
   11aa4:	10 92 e5 02 	sts	0x02E5, r1
		 if (IFType==IT_SLAVE)sendMessage98(FIP_Used);
   11aa8:	80 91 00 01 	lds	r24, 0x0100
   11aac:	81 30       	cpi	r24, 0x01	; 1
   11aae:	29 f4       	brne	.+10     	; 0x11aba <FMenuTicket+0x228>
   11ab0:	80 91 e8 02 	lds	r24, 0x02E8
   11ab4:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <sendMessage98>
   11ab8:	23 c0       	rjmp	.+70     	; 0x11b00 <FMenuTicket+0x26e>
		 else 
		 if (IFType==IT_STANDALONE)PrintStandalone(FIP_Used,False);
   11aba:	82 30       	cpi	r24, 0x02	; 2
   11abc:	09 f5       	brne	.+66     	; 0x11b00 <FMenuTicket+0x26e>
   11abe:	80 91 e8 02 	lds	r24, 0x02E8
   11ac2:	60 e0       	ldi	r22, 0x00	; 0
   11ac4:	0e 94 f1 8b 	call	0x117e2	; 0x117e2 <PrintStandalone>
   11ac8:	1b c0       	rjmp	.+54     	; 0x11b00 <FMenuTicket+0x26e>
	                     stMenuTicket=mtSendMsg98;
				  }
			 }
		 }
		 */
		 if (IsMessage99==True){ 
   11aca:	80 91 7d 02 	lds	r24, 0x027D
   11ace:	81 30       	cpi	r24, 0x01	; 1
   11ad0:	f9 f4       	brne	.+62     	; 0x11b10 <FMenuTicket+0x27e>
		    stMenuTicket=mtMessage99Received;
   11ad2:	8a e0       	ldi	r24, 0x0A	; 10
   11ad4:	16 c0       	rjmp	.+44     	; 0x11b02 <FMenuTicket+0x270>
	     break;
    case mtMessage99Received:
	     stMenuTicket=mtExitMenuTicket;
		 break;
    case mtNoConnection:
	     lcd_clear();
   11ad6:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		 lcd_printf(2,1,PSTR("Error No Connection"));
   11ada:	82 e0       	ldi	r24, 0x02	; 2
   11adc:	61 e0       	ldi	r22, 0x01	; 1
   11ade:	42 e6       	ldi	r20, 0x62	; 98
   11ae0:	5b e0       	ldi	r21, 0x0B	; 11
   11ae2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		 system_beep(2);
   11ae6:	82 e0       	ldi	r24, 0x02	; 2
   11ae8:	90 e0       	ldi	r25, 0x00	; 0
   11aea:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   11aee:	8f ef       	ldi	r24, 0xFF	; 255
   11af0:	9f ef       	ldi	r25, 0xFF	; 255
   11af2:	a9 e5       	ldi	r26, 0x59	; 89
   11af4:	81 50       	subi	r24, 0x01	; 1
   11af6:	90 40       	sbci	r25, 0x00	; 0
   11af8:	a0 40       	sbci	r26, 0x00	; 0
   11afa:	e1 f7       	brne	.-8      	; 0x11af4 <FMenuTicket+0x262>
   11afc:	00 c0       	rjmp	.+0      	; 0x11afe <FMenuTicket+0x26c>
   11afe:	00 00       	nop
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
   11b00:	8c e0       	ldi	r24, 0x0C	; 12
   11b02:	80 93 eb 02 	sts	0x02EB, r24
   11b06:	04 c0       	rjmp	.+8      	; 0x11b10 <FMenuTicket+0x27e>
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
   11b08:	10 92 eb 02 	sts	0x02EB, r1
		 system_beep(2);
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
   11b0c:	81 e0       	ldi	r24, 0x01	; 1
	     stMenuTicket=mtInit;
	     break;
   11b0e:	01 c0       	rjmp	.+2      	; 0x11b12 <FMenuTicket+0x280>
static char iPos,iSend,FIP_Used,zFIP_Used;
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
   11b10:	80 e0       	ldi	r24, 0x00	; 0
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
	     break;
	}
  return Result;
}
   11b12:	64 96       	adiw	r28, 0x14	; 20
   11b14:	0f b6       	in	r0, 0x3f	; 63
   11b16:	f8 94       	cli
   11b18:	de bf       	out	0x3e, r29	; 62
   11b1a:	0f be       	out	0x3f, r0	; 63
   11b1c:	cd bf       	out	0x3d, r28	; 61
   11b1e:	cf 91       	pop	r28
   11b20:	df 91       	pop	r29
   11b22:	1f 91       	pop	r17
   11b24:	0f 91       	pop	r16
   11b26:	ef 90       	pop	r14
   11b28:	08 95       	ret

00011b2a <FMenuReprint>:
	       break;
	 }
return Result;
}

char FMenuReprint(){
   11b2a:	0f 93       	push	r16
   11b2c:	1f 93       	push	r17
   11b2e:	df 93       	push	r29
   11b30:	cf 93       	push	r28
   11b32:	cd b7       	in	r28, 0x3d	; 61
   11b34:	de b7       	in	r29, 0x3e	; 62
   11b36:	64 97       	sbiw	r28, 0x14	; 20
   11b38:	0f b6       	in	r0, 0x3f	; 63
   11b3a:	f8 94       	cli
   11b3c:	de bf       	out	0x3e, r29	; 62
   11b3e:	0f be       	out	0x3f, r0	; 63
   11b40:	cd bf       	out	0x3d, r28	; 61
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
	 switch(stReprint){
   11b42:	80 91 46 03 	lds	r24, 0x0346
   11b46:	87 30       	cpi	r24, 0x07	; 7
   11b48:	09 f4       	brne	.+2      	; 0x11b4c <FMenuReprint+0x22>
   11b4a:	92 c0       	rjmp	.+292    	; 0x11c70 <FMenuReprint+0x146>
   11b4c:	88 30       	cpi	r24, 0x08	; 8
   11b4e:	88 f4       	brcc	.+34     	; 0x11b72 <FMenuReprint+0x48>
   11b50:	83 30       	cpi	r24, 0x03	; 3
   11b52:	e9 f1       	breq	.+122    	; 0x11bce <FMenuReprint+0xa4>
   11b54:	84 30       	cpi	r24, 0x04	; 4
   11b56:	30 f4       	brcc	.+12     	; 0x11b64 <FMenuReprint+0x3a>
   11b58:	81 30       	cpi	r24, 0x01	; 1
   11b5a:	09 f4       	brne	.+2      	; 0x11b5e <FMenuReprint+0x34>
   11b5c:	4b c0       	rjmp	.+150    	; 0x11bf4 <FMenuReprint+0xca>
   11b5e:	82 30       	cpi	r24, 0x02	; 2
   11b60:	48 f5       	brcc	.+82     	; 0x11bb4 <FMenuReprint+0x8a>
   11b62:	1d c0       	rjmp	.+58     	; 0x11b9e <FMenuReprint+0x74>
   11b64:	85 30       	cpi	r24, 0x05	; 5
   11b66:	09 f4       	brne	.+2      	; 0x11b6a <FMenuReprint+0x40>
   11b68:	75 c0       	rjmp	.+234    	; 0x11c54 <FMenuReprint+0x12a>
   11b6a:	86 30       	cpi	r24, 0x06	; 6
   11b6c:	08 f0       	brcs	.+2      	; 0x11b70 <FMenuReprint+0x46>
   11b6e:	46 c0       	rjmp	.+140    	; 0x11bfc <FMenuReprint+0xd2>
   11b70:	3b c0       	rjmp	.+118    	; 0x11be8 <FMenuReprint+0xbe>
   11b72:	8b 30       	cpi	r24, 0x0B	; 11
   11b74:	09 f4       	brne	.+2      	; 0x11b78 <FMenuReprint+0x4e>
   11b76:	dd c0       	rjmp	.+442    	; 0x11d32 <FMenuReprint+0x208>
   11b78:	8c 30       	cpi	r24, 0x0C	; 12
   11b7a:	38 f4       	brcc	.+14     	; 0x11b8a <FMenuReprint+0x60>
   11b7c:	89 30       	cpi	r24, 0x09	; 9
   11b7e:	09 f4       	brne	.+2      	; 0x11b82 <FMenuReprint+0x58>
   11b80:	bd c0       	rjmp	.+378    	; 0x11cfc <FMenuReprint+0x1d2>
   11b82:	8a 30       	cpi	r24, 0x0A	; 10
   11b84:	08 f0       	brcs	.+2      	; 0x11b88 <FMenuReprint+0x5e>
   11b86:	cf c0       	rjmp	.+414    	; 0x11d26 <FMenuReprint+0x1fc>
   11b88:	81 c0       	rjmp	.+258    	; 0x11c8c <FMenuReprint+0x162>
   11b8a:	8d 30       	cpi	r24, 0x0D	; 13
   11b8c:	09 f4       	brne	.+2      	; 0x11b90 <FMenuReprint+0x66>
   11b8e:	f0 c0       	rjmp	.+480    	; 0x11d70 <FMenuReprint+0x246>
   11b90:	8d 30       	cpi	r24, 0x0D	; 13
   11b92:	08 f4       	brcc	.+2      	; 0x11b96 <FMenuReprint+0x6c>
   11b94:	da c0       	rjmp	.+436    	; 0x11d4a <FMenuReprint+0x220>
   11b96:	8e 30       	cpi	r24, 0x0E	; 14
   11b98:	09 f0       	breq	.+2      	; 0x11b9c <FMenuReprint+0x72>
   11b9a:	f6 c0       	rjmp	.+492    	; 0x11d88 <FMenuReprint+0x25e>
   11b9c:	f1 c0       	rjmp	.+482    	; 0x11d80 <FMenuReprint+0x256>
	 case rtInit:
	      lcd_clear();
   11b9e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
          if (IFType==IT_SLAVE)stReprint=rtFIP;
   11ba2:	80 91 00 01 	lds	r24, 0x0100
   11ba6:	81 30       	cpi	r24, 0x01	; 1
   11ba8:	09 f4       	brne	.+2      	; 0x11bac <FMenuReprint+0x82>
   11baa:	b8 c0       	rjmp	.+368    	; 0x11d1c <FMenuReprint+0x1f2>
		  else
		  if (IFType==IT_STANDALONE)stReprint=rtStandaloneFIP;//rtValidPassword;//rtStandaloneFIP;
   11bac:	82 30       	cpi	r24, 0x02	; 2
   11bae:	09 f0       	breq	.+2      	; 0x11bb2 <FMenuReprint+0x88>
   11bb0:	eb c0       	rjmp	.+470    	; 0x11d88 <FMenuReprint+0x25e>
   11bb2:	04 c0       	rjmp	.+8      	; 0x11bbc <FMenuReprint+0x92>
	      break;
     case rtValidPassword:
	      PassResult=FMenuPassword();
   11bb4:	0e 94 98 4f 	call	0x9f30	; 0x9f30 <FMenuPassword>
	      if (PassResult==MP_VALID_ADMIN)stReprint=rtStandaloneFIP;
   11bb8:	84 30       	cpi	r24, 0x04	; 4
   11bba:	11 f4       	brne	.+4      	; 0x11bc0 <FMenuReprint+0x96>
   11bbc:	81 e0       	ldi	r24, 0x01	; 1
   11bbe:	dd c0       	rjmp	.+442    	; 0x11d7a <FMenuReprint+0x250>
		  else
	      if (PassResult==MP_VALID_SYSTEM)stReprint=rtInvalidPassword;
   11bc0:	85 30       	cpi	r24, 0x05	; 5
   11bc2:	19 f0       	breq	.+6      	; 0x11bca <FMenuReprint+0xa0>
          else
	      if (PassResult==MP_INVALID)stReprint=rtInvalidPassword;
   11bc4:	82 30       	cpi	r24, 0x02	; 2
   11bc6:	09 f0       	breq	.+2      	; 0x11bca <FMenuReprint+0xa0>
   11bc8:	bd c0       	rjmp	.+378    	; 0x11d44 <FMenuReprint+0x21a>
   11bca:	83 e0       	ldi	r24, 0x03	; 3
   11bcc:	d6 c0       	rjmp	.+428    	; 0x11d7a <FMenuReprint+0x250>
		  else
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
   11bce:	10 92 70 02 	sts	0x0270, r1
		  system_beep(1);
   11bd2:	81 e0       	ldi	r24, 0x01	; 1
   11bd4:	90 e0       	ldi	r25, 0x00	; 0
   11bd6:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
		  lcd_printf(3,1,PSTR("Access Denied"));
   11bda:	83 e0       	ldi	r24, 0x03	; 3
   11bdc:	61 e0       	ldi	r22, 0x01	; 1
   11bde:	4f e8       	ldi	r20, 0x8F	; 143
   11be0:	5d e1       	ldi	r21, 0x1D	; 29
   11be2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
   11be6:	42 c0       	rjmp	.+132    	; 0x11c6c <FMenuReprint+0x142>
          stReprint=rtTimDisplayInvalid;
	      break;
     case rtTimDisplayInvalid:
	      if (TimDisplay>2)stReprint=rtExitReprint;
   11be8:	80 91 70 02 	lds	r24, 0x0270
   11bec:	83 30       	cpi	r24, 0x03	; 3
   11bee:	08 f4       	brcc	.+2      	; 0x11bf2 <FMenuReprint+0xc8>
   11bf0:	cb c0       	rjmp	.+406    	; 0x11d88 <FMenuReprint+0x25e>
   11bf2:	c2 c0       	rjmp	.+388    	; 0x11d78 <FMenuReprint+0x24e>
	      break;
     case rtStandaloneFIP:
	      _scr_pump();
   11bf4:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <_scr_pump>
		  stReprint=rtStandaloneInputFIP;
   11bf8:	86 e0       	ldi	r24, 0x06	; 6
   11bfa:	bf c0       	rjmp	.+382    	; 0x11d7a <FMenuReprint+0x250>
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
   11bfc:	81 e0       	ldi	r24, 0x01	; 1
   11bfe:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
   11c02:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='8')){
   11c06:	98 2f       	mov	r25, r24
   11c08:	91 53       	subi	r25, 0x31	; 49
   11c0a:	98 30       	cpi	r25, 0x08	; 8
   11c0c:	f8 f4       	brcc	.+62     	; 0x11c4c <FMenuReprint+0x122>
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
   11c0e:	08 2f       	mov	r16, r24
   11c10:	00 53       	subi	r16, 0x30	; 48
   11c12:	80 2f       	mov	r24, r16
   11c14:	0e 94 b8 6c 	call	0xd970	; 0xd970 <GetPumpID>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   11c18:	94 e0       	ldi	r25, 0x04	; 4
   11c1a:	90 93 85 06 	sts	0x0685, r25
	 PoolMsg=plMsg;
   11c1e:	80 93 b1 0c 	sts	0x0CB1, r24
     IsControlPooling=True;
   11c22:	81 e0       	ldi	r24, 0x01	; 1
   11c24:	80 93 62 02 	sts	0x0262, r24
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
		  if ((KeyChar>='1')&&(KeyChar<='8')){
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
			   TimSend=0;
   11c28:	10 92 56 0d 	sts	0x0D56, r1
			   while(TimSend<6){};
   11c2c:	80 91 56 0d 	lds	r24, 0x0D56
   11c30:	86 30       	cpi	r24, 0x06	; 6
   11c32:	e0 f3       	brcs	.-8      	; 0x11c2c <FMenuReprint+0x102>
		       ReprintResult=PrintStandalone(KeyChar-'0',True);
   11c34:	80 2f       	mov	r24, r16
   11c36:	61 e0       	ldi	r22, 0x01	; 1
   11c38:	0e 94 f1 8b 	call	0x117e2	; 0x117e2 <PrintStandalone>
			   if (ReprintResult==PS_NO_DATA)stReprint=rtDisplayNoTransaction;
   11c3c:	82 31       	cpi	r24, 0x12	; 18
   11c3e:	11 f4       	brne	.+4      	; 0x11c44 <FMenuReprint+0x11a>
   11c40:	85 e0       	ldi	r24, 0x05	; 5
   11c42:	9b c0       	rjmp	.+310    	; 0x11d7a <FMenuReprint+0x250>
			   else if (ReprintResult==PS_PRINTED)stReprint=rtExitReprint;               
   11c44:	81 31       	cpi	r24, 0x11	; 17
   11c46:	09 f0       	breq	.+2      	; 0x11c4a <FMenuReprint+0x120>
   11c48:	9f c0       	rjmp	.+318    	; 0x11d88 <FMenuReprint+0x25e>
   11c4a:	96 c0       	rjmp	.+300    	; 0x11d78 <FMenuReprint+0x24e>
			   //stReprint=rtExitReprint;
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
   11c4c:	8a 32       	cpi	r24, 0x2A	; 42
   11c4e:	09 f0       	breq	.+2      	; 0x11c52 <FMenuReprint+0x128>
   11c50:	9b c0       	rjmp	.+310    	; 0x11d88 <FMenuReprint+0x25e>
   11c52:	92 c0       	rjmp	.+292    	; 0x11d78 <FMenuReprint+0x24e>
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   11c54:	83 e0       	ldi	r24, 0x03	; 3
   11c56:	61 e0       	ldi	r22, 0x01	; 1
   11c58:	4a e7       	ldi	r20, 0x7A	; 122
   11c5a:	5d e1       	ldi	r21, 0x1D	; 29
   11c5c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  system_beep(1);
   11c60:	81 e0       	ldi	r24, 0x01	; 1
   11c62:	90 e0       	ldi	r25, 0x00	; 0
   11c64:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
          TimDisplay=0;
   11c68:	10 92 70 02 	sts	0x0270, r1
		  stReprint=rtTimDisplayInvalid;
   11c6c:	84 e0       	ldi	r24, 0x04	; 4
   11c6e:	85 c0       	rjmp	.+266    	; 0x11d7a <FMenuReprint+0x250>
	      break;
	 case rtFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11c70:	84 e4       	ldi	r24, 0x44	; 68
   11c72:	93 e0       	ldi	r25, 0x03	; 3
   11c74:	67 e9       	ldi	r22, 0x97	; 151
   11c76:	78 e0       	ldi	r23, 0x08	; 8
   11c78:	0e 94 a3 2b 	call	0x5746	; 0x5746 <menu_FIP>
		  if (FIPResult==FIP_DONE){
   11c7c:	88 23       	and	r24, r24
   11c7e:	11 f4       	brne	.+4      	; 0x11c84 <FMenuReprint+0x15a>
		      stReprint=rtRFID;
   11c80:	88 e0       	ldi	r24, 0x08	; 8
   11c82:	7b c0       	rjmp	.+246    	; 0x11d7a <FMenuReprint+0x250>
			  }
		  else
		  if (FIPResult==FIP_CANCEL)stReprint=rtExitReprint;
   11c84:	82 30       	cpi	r24, 0x02	; 2
   11c86:	09 f0       	breq	.+2      	; 0x11c8a <FMenuReprint+0x160>
   11c88:	7f c0       	rjmp	.+254    	; 0x11d88 <FMenuReprint+0x25e>
   11c8a:	76 c0       	rjmp	.+236    	; 0x11d78 <FMenuReprint+0x24e>
	      break;
	 case rtRFID:
	      lcd_clear();
   11c8c:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  sprintf_P(lcdteks,PSTR("RePrint FIP:%s "),strFIP_ID);lcd_print(1,1,lcdteks);
   11c90:	00 d0       	rcall	.+0      	; 0x11c92 <FMenuReprint+0x168>
   11c92:	00 d0       	rcall	.+0      	; 0x11c94 <FMenuReprint+0x16a>
   11c94:	00 d0       	rcall	.+0      	; 0x11c96 <FMenuReprint+0x16c>
   11c96:	ed b7       	in	r30, 0x3d	; 61
   11c98:	fe b7       	in	r31, 0x3e	; 62
   11c9a:	31 96       	adiw	r30, 0x01	; 1
   11c9c:	8e 01       	movw	r16, r28
   11c9e:	0f 5f       	subi	r16, 0xFF	; 255
   11ca0:	1f 4f       	sbci	r17, 0xFF	; 255
   11ca2:	ad b7       	in	r26, 0x3d	; 61
   11ca4:	be b7       	in	r27, 0x3e	; 62
   11ca6:	12 96       	adiw	r26, 0x02	; 2
   11ca8:	1c 93       	st	X, r17
   11caa:	0e 93       	st	-X, r16
   11cac:	11 97       	sbiw	r26, 0x01	; 1
   11cae:	8a e6       	ldi	r24, 0x6A	; 106
   11cb0:	9d e1       	ldi	r25, 0x1D	; 29
   11cb2:	93 83       	std	Z+3, r25	; 0x03
   11cb4:	82 83       	std	Z+2, r24	; 0x02
   11cb6:	87 e9       	ldi	r24, 0x97	; 151
   11cb8:	98 e0       	ldi	r25, 0x08	; 8
   11cba:	95 83       	std	Z+5, r25	; 0x05
   11cbc:	84 83       	std	Z+4, r24	; 0x04
   11cbe:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
   11cc2:	8d b7       	in	r24, 0x3d	; 61
   11cc4:	9e b7       	in	r25, 0x3e	; 62
   11cc6:	06 96       	adiw	r24, 0x06	; 6
   11cc8:	0f b6       	in	r0, 0x3f	; 63
   11cca:	f8 94       	cli
   11ccc:	9e bf       	out	0x3e, r25	; 62
   11cce:	0f be       	out	0x3f, r0	; 63
   11cd0:	8d bf       	out	0x3d, r24	; 61
   11cd2:	81 e0       	ldi	r24, 0x01	; 1
   11cd4:	61 e0       	ldi	r22, 0x01	; 1
   11cd6:	a8 01       	movw	r20, r16
   11cd8:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(2,1,PSTR(  "Tap Supervisor Card"));
   11cdc:	82 e0       	ldi	r24, 0x02	; 2
   11cde:	61 e0       	ldi	r22, 0x01	; 1
   11ce0:	46 e5       	ldi	r20, 0x56	; 86
   11ce2:	5d e1       	ldi	r21, 0x1D	; 29
   11ce4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          lcd_printf(4,1,PSTR(  "[*]Back    [#]Exit"));
   11ce8:	84 e0       	ldi	r24, 0x04	; 4
   11cea:	61 e0       	ldi	r22, 0x01	; 1
   11cec:	43 e4       	ldi	r20, 0x43	; 67
   11cee:	5d e1       	ldi	r21, 0x1D	; 29
   11cf0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  IsRFIDDetected=False;
   11cf4:	10 92 76 02 	sts	0x0276, r1
		  stReprint=rtInputRFID;
   11cf8:	89 e0       	ldi	r24, 0x09	; 9
   11cfa:	3f c0       	rjmp	.+126    	; 0x11d7a <FMenuReprint+0x250>
	      break;
	 case rtInputRFID:
	      if (IsRFIDDetected==True){
   11cfc:	80 91 76 02 	lds	r24, 0x0276
   11d00:	81 30       	cpi	r24, 0x01	; 1
   11d02:	29 f4       	brne	.+10     	; 0x11d0e <FMenuReprint+0x1e4>
		      IsRFIDDetected=False;
   11d04:	10 92 76 02 	sts	0x0276, r1
		      stReprint=rtSendMessage28;
   11d08:	8a e0       	ldi	r24, 0x0A	; 10
   11d0a:	80 93 46 03 	sts	0x0346, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11d0e:	81 e0       	ldi	r24, 0x01	; 1
   11d10:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
   11d14:	80 93 45 03 	sts	0x0345, r24
		  if (KeyPressed==_KEY_CANCEL){
   11d18:	87 3e       	cpi	r24, 0xE7	; 231
   11d1a:	11 f4       	brne	.+4      	; 0x11d20 <FMenuReprint+0x1f6>
		      stReprint=rtFIP;
   11d1c:	87 e0       	ldi	r24, 0x07	; 7
   11d1e:	2d c0       	rjmp	.+90     	; 0x11d7a <FMenuReprint+0x250>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stReprint=rtExitReprint;
   11d20:	87 3b       	cpi	r24, 0xB7	; 183
   11d22:	91 f5       	brne	.+100    	; 0x11d88 <FMenuReprint+0x25e>
   11d24:	29 c0       	rjmp	.+82     	; 0x11d78 <FMenuReprint+0x24e>
	      break;
     case rtSendMessage28:
		  sendMessage28();
   11d26:	0e 94 31 2a 	call	0x5462	; 0x5462 <sendMessage28>
		  TimSend=0;
   11d2a:	10 92 56 0d 	sts	0x0D56, r1
		  stReprint=rtWaitReply;
   11d2e:	8b e0       	ldi	r24, 0x0B	; 11
   11d30:	24 c0       	rjmp	.+72     	; 0x11d7a <FMenuReprint+0x250>
		  break;
     case rtWaitReply:
	      if (TimSend>TIM_SEND*3)stReprint=rtNoConnection;
   11d32:	80 91 56 0d 	lds	r24, 0x0D56
   11d36:	8f 31       	cpi	r24, 0x1F	; 31
   11d38:	18 f0       	brcs	.+6      	; 0x11d40 <FMenuReprint+0x216>
   11d3a:	8c e0       	ldi	r24, 0x0C	; 12
   11d3c:	80 93 46 03 	sts	0x0346, r24
	      if (IsMessage99==True){
   11d40:	80 91 7d 02 	lds	r24, 0x027D
   11d44:	81 30       	cpi	r24, 0x01	; 1
   11d46:	01 f5       	brne	.+64     	; 0x11d88 <FMenuReprint+0x25e>
   11d48:	17 c0       	rjmp	.+46     	; 0x11d78 <FMenuReprint+0x24e>
		      stReprint=rtExitReprint;
		  }
	      break;
     case rtNoConnection:
	      lcd_clear();
   11d4a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   11d4e:	82 e0       	ldi	r24, 0x02	; 2
   11d50:	61 e0       	ldi	r22, 0x01	; 1
   11d52:	45 e3       	ldi	r20, 0x35	; 53
   11d54:	5d e1       	ldi	r21, 0x1D	; 29
   11d56:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   11d5a:	83 e0       	ldi	r24, 0x03	; 3
   11d5c:	61 e0       	ldi	r22, 0x01	; 1
   11d5e:	47 e2       	ldi	r20, 0x27	; 39
   11d60:	5d e1       	ldi	r21, 0x1D	; 29
   11d62:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  TimDisplay=5;
   11d66:	85 e0       	ldi	r24, 0x05	; 5
   11d68:	80 93 70 02 	sts	0x0270, r24
		  stReprint=rtDelayExitReprint;
   11d6c:	8d e0       	ldi	r24, 0x0D	; 13
   11d6e:	05 c0       	rjmp	.+10     	; 0x11d7a <FMenuReprint+0x250>
	      break;
     case rtDelayExitReprint:
	      if(TimDisplay>=10)stReprint=rtExitReprint;
   11d70:	80 91 70 02 	lds	r24, 0x0270
   11d74:	8a 30       	cpi	r24, 0x0A	; 10
   11d76:	40 f0       	brcs	.+16     	; 0x11d88 <FMenuReprint+0x25e>
   11d78:	8e e0       	ldi	r24, 0x0E	; 14
   11d7a:	80 93 46 03 	sts	0x0346, r24
   11d7e:	04 c0       	rjmp	.+8      	; 0x11d88 <FMenuReprint+0x25e>
	      break;
	 case rtExitReprint:
	      stReprint=rtInit;
   11d80:	10 92 46 03 	sts	0x0346, r1
		  Result=MENU_DONE;
   11d84:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   11d86:	01 c0       	rjmp	.+2      	; 0x11d8a <FMenuReprint+0x260>
static char stReprint=rtInit;
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
   11d88:	80 e0       	ldi	r24, 0x00	; 0
	      stReprint=rtInit;
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   11d8a:	64 96       	adiw	r28, 0x14	; 20
   11d8c:	0f b6       	in	r0, 0x3f	; 63
   11d8e:	f8 94       	cli
   11d90:	de bf       	out	0x3e, r29	; 62
   11d92:	0f be       	out	0x3f, r0	; 63
   11d94:	cd bf       	out	0x3d, r28	; 61
   11d96:	cf 91       	pop	r28
   11d98:	df 91       	pop	r29
   11d9a:	1f 91       	pop	r17
   11d9c:	0f 91       	pop	r16
   11d9e:	08 95       	ret

00011da0 <FMenuAdmin>:

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
     
	 switch(stMenuAdmin){
   11da0:	80 91 29 03 	lds	r24, 0x0329
   11da4:	83 30       	cpi	r24, 0x03	; 3
   11da6:	09 f4       	brne	.+2      	; 0x11daa <FMenuAdmin+0xa>
   11da8:	67 c0       	rjmp	.+206    	; 0x11e78 <FMenuAdmin+0xd8>
   11daa:	84 30       	cpi	r24, 0x04	; 4
   11dac:	30 f4       	brcc	.+12     	; 0x11dba <FMenuAdmin+0x1a>
   11dae:	81 30       	cpi	r24, 0x01	; 1
   11db0:	69 f1       	breq	.+90     	; 0x11e0c <FMenuAdmin+0x6c>
   11db2:	82 30       	cpi	r24, 0x02	; 2
   11db4:	08 f0       	brcs	.+2      	; 0x11db8 <FMenuAdmin+0x18>
   11db6:	51 c0       	rjmp	.+162    	; 0x11e5a <FMenuAdmin+0xba>
   11db8:	0d c0       	rjmp	.+26     	; 0x11dd4 <FMenuAdmin+0x34>
   11dba:	85 30       	cpi	r24, 0x05	; 5
   11dbc:	09 f4       	brne	.+2      	; 0x11dc0 <FMenuAdmin+0x20>
   11dbe:	52 c0       	rjmp	.+164    	; 0x11e64 <FMenuAdmin+0xc4>
   11dc0:	85 30       	cpi	r24, 0x05	; 5
   11dc2:	08 f4       	brcc	.+2      	; 0x11dc6 <FMenuAdmin+0x26>
   11dc4:	4d c0       	rjmp	.+154    	; 0x11e60 <FMenuAdmin+0xc0>
   11dc6:	86 30       	cpi	r24, 0x06	; 6
   11dc8:	09 f4       	brne	.+2      	; 0x11dcc <FMenuAdmin+0x2c>
   11dca:	52 c0       	rjmp	.+164    	; 0x11e70 <FMenuAdmin+0xd0>
   11dcc:	87 30       	cpi	r24, 0x07	; 7
   11dce:	09 f0       	breq	.+2      	; 0x11dd2 <FMenuAdmin+0x32>
   11dd0:	5a c0       	rjmp	.+180    	; 0x11e86 <FMenuAdmin+0xe6>
   11dd2:	55 c0       	rjmp	.+170    	; 0x11e7e <FMenuAdmin+0xde>
	 case maInitAdmin:
		  lcd_clear();
   11dd4:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("1)RePrint           "));
   11dd8:	81 e0       	ldi	r24, 0x01	; 1
   11dda:	61 e0       	ldi	r22, 0x01	; 1
   11ddc:	46 e7       	ldi	r20, 0x76	; 118
   11dde:	57 e1       	ldi	r21, 0x17	; 23
   11de0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("2)CloseShift        "));
   11de4:	82 e0       	ldi	r24, 0x02	; 2
   11de6:	61 e0       	ldi	r22, 0x01	; 1
   11de8:	41 e6       	ldi	r20, 0x61	; 97
   11dea:	57 e1       	ldi	r21, 0x17	; 23
   11dec:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("3)CloseDay          "));		  
   11df0:	83 e0       	ldi	r24, 0x03	; 3
   11df2:	61 e0       	ldi	r22, 0x01	; 1
   11df4:	4c e4       	ldi	r20, 0x4C	; 76
   11df6:	57 e1       	ldi	r21, 0x17	; 23
   11df8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("4)Settings   *)Exit "));
   11dfc:	84 e0       	ldi	r24, 0x04	; 4
   11dfe:	61 e0       	ldi	r22, 0x01	; 1
   11e00:	47 e3       	ldi	r20, 0x37	; 55
   11e02:	57 e1       	ldi	r21, 0x17	; 23
   11e04:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      stMenuAdmin=maSelectOptions;
   11e08:	81 e0       	ldi	r24, 0x01	; 1
   11e0a:	24 c0       	rjmp	.+72     	; 0x11e54 <FMenuAdmin+0xb4>
	      break;
	 case maSelectOptions:
          KeyPressed=_key_scan(1);
   11e0c:	81 e0       	ldi	r24, 0x01	; 1
   11e0e:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   11e12:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
		  switch (KeyChar){
   11e16:	82 33       	cpi	r24, 0x32	; 50
   11e18:	71 f0       	breq	.+28     	; 0x11e36 <FMenuAdmin+0x96>
   11e1a:	83 33       	cpi	r24, 0x33	; 51
   11e1c:	28 f4       	brcc	.+10     	; 0x11e28 <FMenuAdmin+0x88>
   11e1e:	8a 32       	cpi	r24, 0x2A	; 42
   11e20:	c1 f0       	breq	.+48     	; 0x11e52 <FMenuAdmin+0xb2>
   11e22:	81 33       	cpi	r24, 0x31	; 49
   11e24:	81 f5       	brne	.+96     	; 0x11e86 <FMenuAdmin+0xe6>
   11e26:	05 c0       	rjmp	.+10     	; 0x11e32 <FMenuAdmin+0x92>
   11e28:	83 33       	cpi	r24, 0x33	; 51
   11e2a:	59 f0       	breq	.+22     	; 0x11e42 <FMenuAdmin+0xa2>
   11e2c:	84 33       	cpi	r24, 0x34	; 52
   11e2e:	59 f5       	brne	.+86     	; 0x11e86 <FMenuAdmin+0xe6>
   11e30:	0e c0       	rjmp	.+28     	; 0x11e4e <FMenuAdmin+0xae>
		  case '1':
		       stMenuAdmin=maMenuReprint;//maMenuAdminConfig;
   11e32:	82 e0       	ldi	r24, 0x02	; 2
   11e34:	0f c0       	rjmp	.+30     	; 0x11e54 <FMenuAdmin+0xb4>
		       break;  
		  case '2':
		       if (IFType==IT_STANDALONE)
   11e36:	80 91 00 01 	lds	r24, 0x0100
   11e3a:	82 30       	cpi	r24, 0x02	; 2
   11e3c:	e9 f4       	brne	.+58     	; 0x11e78 <FMenuAdmin+0xd8>
			       stMenuAdmin=maMenuCloseShift;
   11e3e:	84 e0       	ldi	r24, 0x04	; 4
   11e40:	09 c0       	rjmp	.+18     	; 0x11e54 <FMenuAdmin+0xb4>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '3':
		       if (IFType==IT_STANDALONE)stMenuAdmin=maMenuCloseDay;
   11e42:	80 91 00 01 	lds	r24, 0x0100
   11e46:	82 30       	cpi	r24, 0x02	; 2
   11e48:	b9 f4       	brne	.+46     	; 0x11e78 <FMenuAdmin+0xd8>
   11e4a:	85 e0       	ldi	r24, 0x05	; 5
   11e4c:	03 c0       	rjmp	.+6      	; 0x11e54 <FMenuAdmin+0xb4>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '4':
		  	   stMenuAdmin=maMenuAdminSettings;
   11e4e:	86 e0       	ldi	r24, 0x06	; 6
   11e50:	01 c0       	rjmp	.+2      	; 0x11e54 <FMenuAdmin+0xb4>
		       break;  
		  case '*':
    		   stMenuAdmin=maExitMenuAdmin;
   11e52:	87 e0       	ldi	r24, 0x07	; 7
   11e54:	80 93 29 03 	sts	0x0329, r24
   11e58:	16 c0       	rjmp	.+44     	; 0x11e86 <FMenuAdmin+0xe6>
		       break;  		  
		  }		  
	      break;
     case maMenuReprint:
	      SubMenu=FMenuReprint();
   11e5a:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <FMenuReprint>
   11e5e:	05 c0       	rjmp	.+10     	; 0x11e6a <FMenuAdmin+0xca>
	 case maMenuAdminConfig://ChangePassword[],RePrint,PumpTest
	      SubMenu=FSubMenuAdmin();
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;
          break;	 
	 case maMenuCloseShift:
	 	  SubMenu=FCloseShift(CONTINUE_SHIFT);
   11e60:	82 e0       	ldi	r24, 0x02	; 2
   11e62:	01 c0       	rjmp	.+2      	; 0x11e66 <FMenuAdmin+0xc6>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
	      break;
     case maMenuCloseDay://maMenuCloseShift,maMenuCloseDay
	 	  SubMenu=FCloseShift(NEW_SHIFT);
   11e64:	81 e0       	ldi	r24, 0x01	; 1
   11e66:	0e 94 26 88 	call	0x1104c	; 0x1104c <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
   11e6a:	81 30       	cpi	r24, 0x01	; 1
   11e6c:	61 f4       	brne	.+24     	; 0x11e86 <FMenuAdmin+0xe6>
   11e6e:	f1 cf       	rjmp	.-30     	; 0x11e52 <FMenuAdmin+0xb2>
	      break;
     case maMenuAdminSettings:
	      SubMenu=FMenuAdminSettings();
   11e70:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <FMenuAdminSettings>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;	      
   11e74:	81 30       	cpi	r24, 0x01	; 1
   11e76:	49 f4       	brne	.+18     	; 0x11e8a <FMenuAdmin+0xea>
   11e78:	10 92 29 03 	sts	0x0329, r1
   11e7c:	04 c0       	rjmp	.+8      	; 0x11e86 <FMenuAdmin+0xe6>
	      break;
     case maExitMenuAdmin:
	      stMenuAdmin=maInitAdmin;	      
   11e7e:	10 92 29 03 	sts	0x0329, r1
	      Result=MENU_DONE;
   11e82:	81 e0       	ldi	r24, 0x01	; 1
          break;	 
   11e84:	08 95       	ret

}

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
   11e86:	80 e0       	ldi	r24, 0x00	; 0
   11e88:	08 95       	ret
   11e8a:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuAdmin=maInitAdmin;	      
	      Result=MENU_DONE;
          break;	 
	 }
   return Result;
}
   11e8c:	08 95       	ret

00011e8e <StoreStandaloneTotalizerData>:
	  systemEDC();
	  systemConfigProtocol();
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}

void StoreStandaloneTotalizerData(char *strRawTransData){//Sending FlowSPI_Protocol <STX>   [MsgID][PumpID][Volume1][Amount1][Volume2][Amount2][Volume3][Amount3][Volume4][Amount4][Volume5][Amount5][Volume6][Amount6]<ETX>
   11e8e:	5f 92       	push	r5
   11e90:	6f 92       	push	r6
   11e92:	7f 92       	push	r7
   11e94:	8f 92       	push	r8
   11e96:	9f 92       	push	r9
   11e98:	af 92       	push	r10
   11e9a:	bf 92       	push	r11
   11e9c:	cf 92       	push	r12
   11e9e:	df 92       	push	r13
   11ea0:	ef 92       	push	r14
   11ea2:	ff 92       	push	r15
   11ea4:	0f 93       	push	r16
   11ea6:	1f 93       	push	r17
   11ea8:	df 93       	push	r29
   11eaa:	cf 93       	push	r28
   11eac:	cd b7       	in	r28, 0x3d	; 61
   11eae:	de b7       	in	r29, 0x3e	; 62
   11eb0:	a1 97       	sbiw	r28, 0x21	; 33
   11eb2:	0f b6       	in	r0, 0x3f	; 63
   11eb4:	f8 94       	cli
   11eb6:	de bf       	out	0x3e, r29	; 62
   11eb8:	0f be       	out	0x3f, r0	; 63
   11eba:	cd bf       	out	0x3d, r28	; 61
   11ebc:	5c 01       	movw	r10, r24

	 //for(i=0;i<strlen(strRawTransData);i++){
	 //    uart(1,1,strRawTransData[i]); 
	 // }

     StrPosCopy(strRawTransData,strPumpID,2,2);
   11ebe:	8e 01       	movw	r16, r28
   11ec0:	0f 5f       	subi	r16, 0xFF	; 255
   11ec2:	1f 4f       	sbci	r17, 0xFF	; 255
   11ec4:	b8 01       	movw	r22, r16
   11ec6:	42 e0       	ldi	r20, 0x02	; 2
   11ec8:	50 e0       	ldi	r21, 0x00	; 0
   11eca:	22 e0       	ldi	r18, 0x02	; 2
   11ecc:	30 e0       	ldi	r19, 0x00	; 0
   11ece:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
   11ed2:	c8 01       	movw	r24, r16
   11ed4:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
   11ed8:	e8 2e       	mov	r14, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
   11eda:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
	 if (FIPAddr>0){
   11ede:	88 23       	and	r24, r24
   11ee0:	b9 f1       	breq	.+110    	; 0x11f50 <StoreStandaloneTotalizerData+0xc2>
	     FIPAddr=FIPAddr-1;
   11ee2:	58 2e       	mov	r5, r24
   11ee4:	5a 94       	dec	r5
   11ee6:	04 e0       	ldi	r16, 0x04	; 4
   11ee8:	c0 2e       	mov	r12, r16
   11eea:	d1 2c       	mov	r13, r1
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
   11eec:	ff 24       	eor	r15, r15
   11eee:	f3 94       	inc	r15
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
   11ef0:	14 e0       	ldi	r17, 0x04	; 4
   11ef2:	81 2e       	mov	r8, r17
   11ef4:	91 2c       	mov	r9, r1
   11ef6:	8c 0e       	add	r8, r28
   11ef8:	9d 1e       	adc	r9, r29
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
   11efa:	b3 e1       	ldi	r27, 0x13	; 19
   11efc:	6b 2e       	mov	r6, r27
   11efe:	71 2c       	mov	r7, r1
   11f00:	6c 0e       	add	r6, r28
   11f02:	7d 1e       	adc	r7, r29
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
   11f04:	c5 01       	movw	r24, r10
   11f06:	b4 01       	movw	r22, r8
   11f08:	a6 01       	movw	r20, r12
   11f0a:	2c e0       	ldi	r18, 0x0C	; 12
   11f0c:	30 e0       	ldi	r19, 0x00	; 0
   11f0e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
   11f12:	a6 01       	movw	r20, r12
   11f14:	44 5f       	subi	r20, 0xF4	; 244
   11f16:	5f 4f       	sbci	r21, 0xFF	; 255
   11f18:	c5 01       	movw	r24, r10
   11f1a:	b3 01       	movw	r22, r6
   11f1c:	2c e0       	ldi	r18, 0x0C	; 12
   11f1e:	30 e0       	ldi	r19, 0x00	; 0
   11f20:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			  
			  SetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strGVolume);
   11f24:	80 e0       	ldi	r24, 0x00	; 0
   11f26:	61 e0       	ldi	r22, 0x01	; 1
   11f28:	45 2d       	mov	r20, r5
   11f2a:	2f 2d       	mov	r18, r15
   11f2c:	84 01       	movw	r16, r8
   11f2e:	0e 94 22 60 	call	0xc044	; 0xc044 <SetTotalizerData>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
   11f32:	81 e0       	ldi	r24, 0x01	; 1
   11f34:	61 e0       	ldi	r22, 0x01	; 1
   11f36:	45 2d       	mov	r20, r5
   11f38:	2f 2d       	mov	r18, r15
   11f3a:	83 01       	movw	r16, r6
   11f3c:	0e 94 22 60 	call	0xc044	; 0xc044 <SetTotalizerData>
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
   11f40:	f3 94       	inc	r15
   11f42:	88 e1       	ldi	r24, 0x18	; 24
   11f44:	90 e0       	ldi	r25, 0x00	; 0
   11f46:	c8 0e       	add	r12, r24
   11f48:	d9 1e       	adc	r13, r25
   11f4a:	9f 2d       	mov	r25, r15
   11f4c:	97 30       	cpi	r25, 0x07	; 7
   11f4e:	d1 f6       	brne	.-76     	; 0x11f04 <StoreStandaloneTotalizerData+0x76>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
			  //sprintf_P(strSend,PSTR("Nozzle:%d Volume:%s Money:%s"),iGrade,strGVolume,strGMoney);
			  //uart_print(0,1,strSend);
		 }	
	}
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
   11f50:	8d e0       	ldi	r24, 0x0D	; 13
   11f52:	6e 2d       	mov	r22, r14
   11f54:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
   11f58:	8e 2d       	mov	r24, r14
   11f5a:	8f 70       	andi	r24, 0x0F	; 15
   11f5c:	64 e1       	ldi	r22, 0x14	; 20
   11f5e:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
}
   11f62:	a1 96       	adiw	r28, 0x21	; 33
   11f64:	0f b6       	in	r0, 0x3f	; 63
   11f66:	f8 94       	cli
   11f68:	de bf       	out	0x3e, r29	; 62
   11f6a:	0f be       	out	0x3f, r0	; 63
   11f6c:	cd bf       	out	0x3d, r28	; 61
   11f6e:	cf 91       	pop	r28
   11f70:	df 91       	pop	r29
   11f72:	1f 91       	pop	r17
   11f74:	0f 91       	pop	r16
   11f76:	ff 90       	pop	r15
   11f78:	ef 90       	pop	r14
   11f7a:	df 90       	pop	r13
   11f7c:	cf 90       	pop	r12
   11f7e:	bf 90       	pop	r11
   11f80:	af 90       	pop	r10
   11f82:	9f 90       	pop	r9
   11f84:	8f 90       	pop	r8
   11f86:	7f 90       	pop	r7
   11f88:	6f 90       	pop	r6
   11f8a:	5f 90       	pop	r5
   11f8c:	08 95       	ret

00011f8e <GeniusSendPumpStatus>:
   return Result;
}

void GeniusSendPumpStatus(char iPumpID){
     
}
   11f8e:	08 95       	ret

00011f90 <GeniusSendStopPump>:
void GeniusSendStopPump(char iPumpID){
}
   11f90:	08 95       	ret

00011f92 <GeniusSendResumePump>:
void GeniusSendResumePump(char iPumpID){
}
   11f92:	08 95       	ret

00011f94 <GeniusSendPumpPreset>:
void GeniusSendPumpPreset(char iPumpID){
}
   11f94:	08 95       	ret

00011f96 <GeniusSendLastTransaction>:


void GeniusSendLastTransaction(char iPumpID){
   11f96:	2f 92       	push	r2
   11f98:	3f 92       	push	r3
   11f9a:	4f 92       	push	r4
   11f9c:	5f 92       	push	r5
   11f9e:	6f 92       	push	r6
   11fa0:	7f 92       	push	r7
   11fa2:	8f 92       	push	r8
   11fa4:	9f 92       	push	r9
   11fa6:	af 92       	push	r10
   11fa8:	bf 92       	push	r11
   11faa:	cf 92       	push	r12
   11fac:	df 92       	push	r13
   11fae:	ef 92       	push	r14
   11fb0:	ff 92       	push	r15
   11fb2:	0f 93       	push	r16
   11fb4:	1f 93       	push	r17
   11fb6:	df 93       	push	r29
   11fb8:	cf 93       	push	r28
   11fba:	cd b7       	in	r28, 0x3d	; 61
   11fbc:	de b7       	in	r29, 0x3e	; 62
   11fbe:	c2 5b       	subi	r28, 0xB2	; 178
   11fc0:	d0 40       	sbci	r29, 0x00	; 0
   11fc2:	0f b6       	in	r0, 0x3f	; 63
   11fc4:	f8 94       	cli
   11fc6:	de bf       	out	0x3e, r29	; 62
   11fc8:	0f be       	out	0x3f, r0	; 63
   11fca:	cd bf       	out	0x3d, r28	; 61
   11fcc:	08 2f       	mov	r16, r24
	 char SDatetime[20];
     char strSend[90],cSum;
	 char FIPAddr,PProductID[6],iNozzle,iProdID;
     
	 //Init
	 FillChar(SVolume,sizeof(SVolume),0);
   11fce:	77 e0       	ldi	r23, 0x07	; 7
   11fd0:	e7 2e       	mov	r14, r23
   11fd2:	f1 2c       	mov	r15, r1
   11fd4:	ec 0e       	add	r14, r28
   11fd6:	fd 1e       	adc	r15, r29
   11fd8:	c7 01       	movw	r24, r14
   11fda:	6f e0       	ldi	r22, 0x0F	; 15
   11fdc:	70 e0       	ldi	r23, 0x00	; 0
   11fde:	40 e0       	ldi	r20, 0x00	; 0
   11fe0:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 FillChar(SMoney,sizeof(SMoney),0);
   11fe4:	66 e1       	ldi	r22, 0x16	; 22
   11fe6:	c6 2e       	mov	r12, r22
   11fe8:	d1 2c       	mov	r13, r1
   11fea:	cc 0e       	add	r12, r28
   11fec:	dd 1e       	adc	r13, r29
   11fee:	c6 01       	movw	r24, r12
   11ff0:	6f e0       	ldi	r22, 0x0F	; 15
   11ff2:	70 e0       	ldi	r23, 0x00	; 0
   11ff4:	40 e0       	ldi	r20, 0x00	; 0
   11ff6:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 FillChar(STotalVolume,sizeof(STotalVolume),0);
   11ffa:	55 e2       	ldi	r21, 0x25	; 37
   11ffc:	a5 2e       	mov	r10, r21
   11ffe:	b1 2c       	mov	r11, r1
   12000:	ac 0e       	add	r10, r28
   12002:	bd 1e       	adc	r11, r29
   12004:	c5 01       	movw	r24, r10
   12006:	6f e0       	ldi	r22, 0x0F	; 15
   12008:	70 e0       	ldi	r23, 0x00	; 0
   1200a:	40 e0       	ldi	r20, 0x00	; 0
   1200c:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 FillChar(STotalMoney,sizeof(STotalMoney),0);
   12010:	44 e3       	ldi	r20, 0x34	; 52
   12012:	44 2e       	mov	r4, r20
   12014:	51 2c       	mov	r5, r1
   12016:	4c 0e       	add	r4, r28
   12018:	5d 1e       	adc	r5, r29
   1201a:	c2 01       	movw	r24, r4
   1201c:	6f e0       	ldi	r22, 0x0F	; 15
   1201e:	70 e0       	ldi	r23, 0x00	; 0
   12020:	40 e0       	ldi	r20, 0x00	; 0
   12022:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	      

	 //Generate
	 FIPAddr=GetFIPAddr(iPumpID);
   12026:	80 2f       	mov	r24, r16
   12028:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);
   1202c:	90 e0       	ldi	r25, 0x00	; 0
   1202e:	01 97       	sbiw	r24, 0x01	; 1
   12030:	bc 01       	movw	r22, r24
   12032:	66 0f       	add	r22, r22
   12034:	77 1f       	adc	r23, r23
   12036:	68 0f       	add	r22, r24
   12038:	79 1f       	adc	r23, r25
   1203a:	66 0f       	add	r22, r22
   1203c:	77 1f       	adc	r23, r23
   1203e:	6b 5a       	subi	r22, 0xAB	; 171
   12040:	7f 4f       	sbci	r23, 0xFF	; 255
   12042:	4e 01       	movw	r8, r28
   12044:	08 94       	sec
   12046:	81 1c       	adc	r8, r1
   12048:	91 1c       	adc	r9, r1
   1204a:	c4 01       	movw	r24, r8
   1204c:	46 e0       	ldi	r20, 0x06	; 6
   1204e:	50 e0       	ldi	r21, 0x00	; 0
   12050:	0e 94 64 a8 	call	0x150c8	; 0x150c8 <__eerd_block_m128>
	 iNozzle=RecPumpData[iPumpID&0x0F].Grade;
   12054:	80 2f       	mov	r24, r16
   12056:	90 e0       	ldi	r25, 0x00	; 0
   12058:	cf 54       	subi	r28, 0x4F	; 79
   1205a:	df 4f       	sbci	r29, 0xFF	; 255
   1205c:	99 83       	std	Y+1, r25	; 0x01
   1205e:	88 83       	st	Y, r24
   12060:	c1 5b       	subi	r28, 0xB1	; 177
   12062:	d0 40       	sbci	r29, 0x00	; 0
   12064:	9c 01       	movw	r18, r24
   12066:	2f 70       	andi	r18, 0x0F	; 15
   12068:	30 70       	andi	r19, 0x00	; 0
   1206a:	85 e3       	ldi	r24, 0x35	; 53
   1206c:	90 e0       	ldi	r25, 0x00	; 0
   1206e:	28 9f       	mul	r18, r24
   12070:	f0 01       	movw	r30, r0
   12072:	29 9f       	mul	r18, r25
   12074:	f0 0d       	add	r31, r0
   12076:	38 9f       	mul	r19, r24
   12078:	f0 0d       	add	r31, r0
   1207a:	11 24       	eor	r1, r1
   1207c:	ea 57       	subi	r30, 0x7A	; 122
   1207e:	f9 4f       	sbci	r31, 0xF9	; 249
   12080:	10 81       	ld	r17, Z
	 iProdID=PProductID[iNozzle];
   12082:	21 2e       	mov	r2, r17
   12084:	33 24       	eor	r3, r3
   12086:	f4 01       	movw	r30, r8
   12088:	e2 0d       	add	r30, r2
   1208a:	f3 1d       	adc	r31, r3

	 GetProductName(iProdID,strProduct);
   1208c:	9c e3       	ldi	r25, 0x3C	; 60
   1208e:	69 2e       	mov	r6, r25
   12090:	98 e0       	ldi	r25, 0x08	; 8
   12092:	79 2e       	mov	r7, r25
   12094:	80 81       	ld	r24, Z
   12096:	b3 01       	movw	r22, r6
   12098:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <GetProductName>
	 GetTransactionVolume(iPumpID,SVolume);
   1209c:	80 2f       	mov	r24, r16
   1209e:	b7 01       	movw	r22, r14
   120a0:	0e 94 98 6b 	call	0xd730	; 0xd730 <GetTransactionVolume>
	 GetTransactionMoney(iPumpID,SMoney);
   120a4:	80 2f       	mov	r24, r16
   120a6:	b6 01       	movw	r22, r12
   120a8:	0e 94 d0 6b 	call	0xd7a0	; 0xd7a0 <GetTransactionMoney>
	 GetTotalizerVolume(iPumpID,iNozzle,STotalVolume);
   120ac:	80 2f       	mov	r24, r16
   120ae:	61 2f       	mov	r22, r17
   120b0:	a5 01       	movw	r20, r10
   120b2:	0e 94 57 6d 	call	0xdaae	; 0xdaae <GetTotalizerVolume>
	 GetTotalizerMoney(iPumpID,iNozzle,STotalMoney);
   120b6:	80 2f       	mov	r24, r16
   120b8:	61 2f       	mov	r22, r17
   120ba:	a2 01       	movw	r20, r4
   120bc:	0e 94 34 6d 	call	0xda68	; 0xda68 <GetTotalizerMoney>
	 
     ComposeDatetime(SDatetime);
   120c0:	83 e4       	ldi	r24, 0x43	; 67
   120c2:	88 2e       	mov	r8, r24
   120c4:	91 2c       	mov	r9, r1
   120c6:	8c 0e       	add	r8, r28
   120c8:	9d 1e       	adc	r9, r29
   120ca:	c4 01       	movw	r24, r8
   120cc:	0e 94 08 6c 	call	0xd810	; 0xd810 <ComposeDatetime>

	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
   120d0:	ad b7       	in	r26, 0x3d	; 61
   120d2:	be b7       	in	r27, 0x3e	; 62
   120d4:	54 97       	sbiw	r26, 0x14	; 20
   120d6:	0f b6       	in	r0, 0x3f	; 63
   120d8:	f8 94       	cli
   120da:	be bf       	out	0x3e, r27	; 62
   120dc:	0f be       	out	0x3f, r0	; 63
   120de:	ad bf       	out	0x3d, r26	; 61
   120e0:	ed b7       	in	r30, 0x3d	; 61
   120e2:	fe b7       	in	r31, 0x3e	; 62
   120e4:	31 96       	adiw	r30, 0x01	; 1
   120e6:	8e 01       	movw	r16, r28
   120e8:	09 5a       	subi	r16, 0xA9	; 169
   120ea:	1f 4f       	sbci	r17, 0xFF	; 255
   120ec:	12 96       	adiw	r26, 0x02	; 2
   120ee:	1c 93       	st	X, r17
   120f0:	0e 93       	st	-X, r16
   120f2:	11 97       	sbiw	r26, 0x01	; 1
   120f4:	82 ee       	ldi	r24, 0xE2	; 226
   120f6:	94 e0       	ldi	r25, 0x04	; 4
   120f8:	93 83       	std	Z+3, r25	; 0x03
   120fa:	82 83       	std	Z+2, r24	; 0x02
   120fc:	cf 54       	subi	r28, 0x4F	; 79
   120fe:	df 4f       	sbci	r29, 0xFF	; 255
   12100:	88 81       	ld	r24, Y
   12102:	99 81       	ldd	r25, Y+1	; 0x01
   12104:	c1 5b       	subi	r28, 0xB1	; 177
   12106:	d0 40       	sbci	r29, 0x00	; 0
   12108:	95 83       	std	Z+5, r25	; 0x05
   1210a:	84 83       	std	Z+4, r24	; 0x04
   1210c:	37 82       	std	Z+7, r3	; 0x07
   1210e:	26 82       	std	Z+6, r2	; 0x06
   12110:	71 86       	std	Z+9, r7	; 0x09
   12112:	60 86       	std	Z+8, r6	; 0x08
   12114:	93 86       	std	Z+11, r9	; 0x0b
   12116:	82 86       	std	Z+10, r8	; 0x0a
   12118:	f5 86       	std	Z+13, r15	; 0x0d
   1211a:	e4 86       	std	Z+12, r14	; 0x0c
   1211c:	d7 86       	std	Z+15, r13	; 0x0f
   1211e:	c6 86       	std	Z+14, r12	; 0x0e
   12120:	b1 8a       	std	Z+17, r11	; 0x11
   12122:	a0 8a       	std	Z+16, r10	; 0x10
   12124:	53 8a       	std	Z+19, r5	; 0x13
   12126:	42 8a       	std	Z+18, r4	; 0x12
   12128:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 cSum=SumChecksum(strSend);
   1212c:	ad b7       	in	r26, 0x3d	; 61
   1212e:	be b7       	in	r27, 0x3e	; 62
   12130:	54 96       	adiw	r26, 0x14	; 20
   12132:	0f b6       	in	r0, 0x3f	; 63
   12134:	f8 94       	cli
   12136:	be bf       	out	0x3e, r27	; 62
   12138:	0f be       	out	0x3f, r0	; 63
   1213a:	ad bf       	out	0x3d, r26	; 61
   1213c:	c8 01       	movw	r24, r16
   1213e:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <SumChecksum>
   12142:	e8 2e       	mov	r14, r24
	 uart_print(1,0,strSend);
   12144:	81 e0       	ldi	r24, 0x01	; 1
   12146:	60 e0       	ldi	r22, 0x00	; 0
   12148:	a8 01       	movw	r20, r16
   1214a:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
	 FillChar(strSend,sizeof(strSend),0);      
   1214e:	c8 01       	movw	r24, r16
   12150:	6a e5       	ldi	r22, 0x5A	; 90
   12152:	70 e0       	ldi	r23, 0x00	; 0
   12154:	40 e0       	ldi	r20, 0x00	; 0
   12156:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
	 sprintf_P(strSend,PSTR("%d"),cSum);
   1215a:	00 d0       	rcall	.+0      	; 0x1215c <GeniusSendLastTransaction+0x1c6>
   1215c:	00 d0       	rcall	.+0      	; 0x1215e <GeniusSendLastTransaction+0x1c8>
   1215e:	00 d0       	rcall	.+0      	; 0x12160 <GeniusSendLastTransaction+0x1ca>
   12160:	ed b7       	in	r30, 0x3d	; 61
   12162:	fe b7       	in	r31, 0x3e	; 62
   12164:	31 96       	adiw	r30, 0x01	; 1
   12166:	ad b7       	in	r26, 0x3d	; 61
   12168:	be b7       	in	r27, 0x3e	; 62
   1216a:	12 96       	adiw	r26, 0x02	; 2
   1216c:	1c 93       	st	X, r17
   1216e:	0e 93       	st	-X, r16
   12170:	11 97       	sbiw	r26, 0x01	; 1
   12172:	2f ed       	ldi	r18, 0xDF	; 223
   12174:	34 e0       	ldi	r19, 0x04	; 4
   12176:	33 83       	std	Z+3, r19	; 0x03
   12178:	22 83       	std	Z+2, r18	; 0x02
   1217a:	e4 82       	std	Z+4, r14	; 0x04
   1217c:	15 82       	std	Z+5, r1	; 0x05
   1217e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 uart_print(1,1,strSend);	 
   12182:	8d b7       	in	r24, 0x3d	; 61
   12184:	9e b7       	in	r25, 0x3e	; 62
   12186:	06 96       	adiw	r24, 0x06	; 6
   12188:	0f b6       	in	r0, 0x3f	; 63
   1218a:	f8 94       	cli
   1218c:	9e bf       	out	0x3e, r25	; 62
   1218e:	0f be       	out	0x3f, r0	; 63
   12190:	8d bf       	out	0x3d, r24	; 61
   12192:	81 e0       	ldi	r24, 0x01	; 1
   12194:	61 e0       	ldi	r22, 0x01	; 1
   12196:	a8 01       	movw	r20, r16
   12198:	0e 94 11 a4 	call	0x14822	; 0x14822 <uart_print>
}
   1219c:	ce 54       	subi	r28, 0x4E	; 78
   1219e:	df 4f       	sbci	r29, 0xFF	; 255
   121a0:	0f b6       	in	r0, 0x3f	; 63
   121a2:	f8 94       	cli
   121a4:	de bf       	out	0x3e, r29	; 62
   121a6:	0f be       	out	0x3f, r0	; 63
   121a8:	cd bf       	out	0x3d, r28	; 61
   121aa:	cf 91       	pop	r28
   121ac:	df 91       	pop	r29
   121ae:	1f 91       	pop	r17
   121b0:	0f 91       	pop	r16
   121b2:	ff 90       	pop	r15
   121b4:	ef 90       	pop	r14
   121b6:	df 90       	pop	r13
   121b8:	cf 90       	pop	r12
   121ba:	bf 90       	pop	r11
   121bc:	af 90       	pop	r10
   121be:	9f 90       	pop	r9
   121c0:	8f 90       	pop	r8
   121c2:	7f 90       	pop	r7
   121c4:	6f 90       	pop	r6
   121c6:	5f 90       	pop	r5
   121c8:	4f 90       	pop	r4
   121ca:	3f 90       	pop	r3
   121cc:	2f 90       	pop	r2
   121ce:	08 95       	ret

000121d0 <GeniusProtocol>:
   return Result;	 
}

//enum eGeniusProtocolCommand{GP_PUMP_STATUS,GP_PUMP_LAST_TRANSACTION,GP_PUMP_STOP,GP_PUMP_RESUME,GP_PUMP_PRESET};

void GeniusProtocol(char dataIn){
   121d0:	ff 92       	push	r15
   121d2:	0f 93       	push	r16
   121d4:	1f 93       	push	r17
   121d6:	df 93       	push	r29
   121d8:	cf 93       	push	r28
   121da:	cd b7       	in	r28, 0x3d	; 61
   121dc:	de b7       	in	r29, 0x3e	; 62
   121de:	67 97       	sbiw	r28, 0x17	; 23
   121e0:	0f b6       	in	r0, 0x3f	; 63
   121e2:	f8 94       	cli
   121e4:	de bf       	out	0x3e, r29	; 62
   121e6:	0f be       	out	0x3f, r0	; 63
   121e8:	cd bf       	out	0x3d, r28	; 61
   121ea:	f8 2e       	mov	r15, r24
	 char i,GeniCmd,GeniPumpID,GeniCSum;//,sCmd[7];
	 char strSend[20];

    //uart(1,1,dataIn);

	if (dataIn==0x0D){	
   121ec:	8d 30       	cpi	r24, 0x0D	; 13
   121ee:	09 f0       	breq	.+2      	; 0x121f2 <GeniusProtocol+0x22>
   121f0:	4d c0       	rjmp	.+154    	; 0x1228c <GeniusProtocol+0xbc>
	    GetParameter(Geniflow,FlowLength,&GeniCmd,&GeniPumpID,&GeniCSum);
   121f2:	80 ea       	ldi	r24, 0xA0	; 160
   121f4:	92 e0       	ldi	r25, 0x02	; 2
   121f6:	60 91 9f 02 	lds	r22, 0x029F
   121fa:	ae 01       	movw	r20, r28
   121fc:	4f 5f       	subi	r20, 0xFF	; 255
   121fe:	5f 4f       	sbci	r21, 0xFF	; 255
   12200:	9e 01       	movw	r18, r28
   12202:	2e 5f       	subi	r18, 0xFE	; 254
   12204:	3f 4f       	sbci	r19, 0xFF	; 255
   12206:	8e 01       	movw	r16, r28
   12208:	0d 5f       	subi	r16, 0xFD	; 253
   1220a:	1f 4f       	sbci	r17, 0xFF	; 255
   1220c:	0e 94 a8 6a 	call	0xd550	; 0xd550 <GetParameter>
		FlowLength=0;
   12210:	10 92 9f 02 	sts	0x029F, r1
		IsGeniusFlow=False;
   12214:	10 92 9e 02 	sts	0x029E, r1
		FillChar(strSend,0,sizeof(strSend));
   12218:	8e 01       	movw	r16, r28
   1221a:	0c 5f       	subi	r16, 0xFC	; 252
   1221c:	1f 4f       	sbci	r17, 0xFF	; 255
   1221e:	c8 01       	movw	r24, r16
   12220:	60 e0       	ldi	r22, 0x00	; 0
   12222:	70 e0       	ldi	r23, 0x00	; 0
   12224:	44 e1       	ldi	r20, 0x14	; 20
   12226:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		sprintf_P(strSend,PSTR("%c%.2d:"),GeniCmd,GeniPumpID);
   1222a:	8d b7       	in	r24, 0x3d	; 61
   1222c:	9e b7       	in	r25, 0x3e	; 62
   1222e:	08 97       	sbiw	r24, 0x08	; 8
   12230:	0f b6       	in	r0, 0x3f	; 63
   12232:	f8 94       	cli
   12234:	9e bf       	out	0x3e, r25	; 62
   12236:	0f be       	out	0x3f, r0	; 63
   12238:	8d bf       	out	0x3d, r24	; 61
   1223a:	ed b7       	in	r30, 0x3d	; 61
   1223c:	fe b7       	in	r31, 0x3e	; 62
   1223e:	31 96       	adiw	r30, 0x01	; 1
   12240:	ad b7       	in	r26, 0x3d	; 61
   12242:	be b7       	in	r27, 0x3e	; 62
   12244:	12 96       	adiw	r26, 0x02	; 2
   12246:	1c 93       	st	X, r17
   12248:	0e 93       	st	-X, r16
   1224a:	11 97       	sbiw	r26, 0x01	; 1
   1224c:	83 e1       	ldi	r24, 0x13	; 19
   1224e:	95 e0       	ldi	r25, 0x05	; 5
   12250:	93 83       	std	Z+3, r25	; 0x03
   12252:	82 83       	std	Z+2, r24	; 0x02
   12254:	89 81       	ldd	r24, Y+1	; 0x01
   12256:	84 83       	std	Z+4, r24	; 0x04
   12258:	15 82       	std	Z+5, r1	; 0x05
   1225a:	8a 81       	ldd	r24, Y+2	; 0x02
   1225c:	86 83       	std	Z+6, r24	; 0x06
   1225e:	17 82       	std	Z+7, r1	; 0x07
   12260:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		//uart_print(1,1,strSend);


		if ((SumChecksum(strSend))==GeniCSum){
   12264:	8d b7       	in	r24, 0x3d	; 61
   12266:	9e b7       	in	r25, 0x3e	; 62
   12268:	08 96       	adiw	r24, 0x08	; 8
   1226a:	0f b6       	in	r0, 0x3f	; 63
   1226c:	f8 94       	cli
   1226e:	9e bf       	out	0x3e, r25	; 62
   12270:	0f be       	out	0x3f, r0	; 63
   12272:	8d bf       	out	0x3d, r24	; 61
   12274:	c8 01       	movw	r24, r16
   12276:	0e 94 73 6b 	call	0xd6e6	; 0xd6e6 <SumChecksum>
   1227a:	9b 81       	ldd	r25, Y+3	; 0x03
   1227c:	89 17       	cp	r24, r25
   1227e:	31 f4       	brne	.+12     	; 0x1228c <GeniusProtocol+0xbc>
		     switch(GeniCmd){
   12280:	89 81       	ldd	r24, Y+1	; 0x01
   12282:	84 35       	cpi	r24, 0x54	; 84
   12284:	19 f4       	brne	.+6      	; 0x1228c <GeniusProtocol+0xbc>
			 case 'C'://PumpStatus
			      GeniusSendPumpStatus(GeniPumpID);
			      break;
             case 'T'://Transaction Request: T01:239<0D>
			      GeniusSendLastTransaction(GeniPumpID);
   12286:	8a 81       	ldd	r24, Y+2	; 0x02
   12288:	0e 94 cb 8f 	call	0x11f96	; 0x11f96 <GeniusSendLastTransaction>
			      break; 
   1228c:	e3 eb       	ldi	r30, 0xB3	; 179
   1228e:	f2 e0       	ldi	r31, 0x02	; 2
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
	    Geniflow[i]=Geniflow[i-1];	
   12290:	82 91       	ld	r24, -Z
   12292:	81 83       	std	Z+1, r24	; 0x01
			      break;
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
   12294:	92 e0       	ldi	r25, 0x02	; 2
   12296:	e0 3a       	cpi	r30, 0xA0	; 160
   12298:	f9 07       	cpc	r31, r25
   1229a:	d1 f7       	brne	.-12     	; 0x12290 <GeniusProtocol+0xc0>
	    Geniflow[i]=Geniflow[i-1];	
	}Geniflow[0]=dataIn;
   1229c:	f0 92 a0 02 	sts	0x02A0, r15

	if (IsGeniusCommand(dataIn)==True)IsGeniusFlow=True;
   122a0:	8f 2d       	mov	r24, r15
   122a2:	0e 94 2a 6b 	call	0xd654	; 0xd654 <IsGeniusCommand>
   122a6:	81 30       	cpi	r24, 0x01	; 1
   122a8:	11 f4       	brne	.+4      	; 0x122ae <GeniusProtocol+0xde>
   122aa:	80 93 9e 02 	sts	0x029E, r24
	if (IsGeniusFlow==True)FlowLength++;
   122ae:	80 91 9e 02 	lds	r24, 0x029E
   122b2:	81 30       	cpi	r24, 0x01	; 1
   122b4:	29 f4       	brne	.+10     	; 0x122c0 <GeniusProtocol+0xf0>
   122b6:	80 91 9f 02 	lds	r24, 0x029F
   122ba:	8f 5f       	subi	r24, 0xFF	; 255
   122bc:	80 93 9f 02 	sts	0x029F, r24
	Geniflow[3]=Geniflow[2];
	Geniflow[2]=Geniflow[1];
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}
   122c0:	67 96       	adiw	r28, 0x17	; 23
   122c2:	0f b6       	in	r0, 0x3f	; 63
   122c4:	f8 94       	cli
   122c6:	de bf       	out	0x3e, r29	; 62
   122c8:	0f be       	out	0x3f, r0	; 63
   122ca:	cd bf       	out	0x3d, r28	; 61
   122cc:	cf 91       	pop	r28
   122ce:	df 91       	pop	r29
   122d0:	1f 91       	pop	r17
   122d2:	0f 91       	pop	r16
   122d4:	ff 90       	pop	r15
   122d6:	08 95       	ret

000122d8 <__vector_30>:
}

// NotSuccessful! 


ISR(USART1_RX_vect){
   122d8:	1f 92       	push	r1
   122da:	0f 92       	push	r0
   122dc:	0f b6       	in	r0, 0x3f	; 63
   122de:	0f 92       	push	r0
   122e0:	0b b6       	in	r0, 0x3b	; 59
   122e2:	0f 92       	push	r0
   122e4:	11 24       	eor	r1, r1
   122e6:	1f 93       	push	r17
   122e8:	2f 93       	push	r18
   122ea:	3f 93       	push	r19
   122ec:	4f 93       	push	r20
   122ee:	5f 93       	push	r21
   122f0:	6f 93       	push	r22
   122f2:	7f 93       	push	r23
   122f4:	8f 93       	push	r24
   122f6:	9f 93       	push	r25
   122f8:	af 93       	push	r26
   122fa:	bf 93       	push	r27
   122fc:	ef 93       	push	r30
   122fe:	ff 93       	push	r31
	char dataTX1,serialSend[12];
	static char IsAdvanZProtocol=False;
	unsigned int i;
	dataTX1 = UDR1;
   12300:	10 91 9c 00 	lds	r17, 0x009C
    //Not Successfull!
	//NewPacket
	if (IsNewPacket==True){
   12304:	80 91 66 02 	lds	r24, 0x0266
   12308:	81 30       	cpi	r24, 0x01	; 1
   1230a:	51 f4       	brne	.+20     	; 0x12320 <__vector_30+0x48>
	    if (dataTX1==0x01){
   1230c:	11 30       	cpi	r17, 0x01	; 1
   1230e:	41 f4       	brne	.+16     	; 0x12320 <__vector_30+0x48>
		    char_count=0;
   12310:	10 92 68 02 	sts	0x0268, r1
   12314:	10 92 67 02 	sts	0x0267, r1
            IsNewPacket=False;
   12318:	10 92 66 02 	sts	0x0266, r1
			IsAdvanZProtocol=True;
   1231c:	10 93 76 03 	sts	0x0376, r17
			}
	}
    //Save data to buffer if AdvanZ MSG
	if (IsAdvanZProtocol==True){
   12320:	80 91 76 03 	lds	r24, 0x0376
   12324:	81 30       	cpi	r24, 0x01	; 1
   12326:	71 f4       	brne	.+28     	; 0x12344 <__vector_30+0x6c>
	    rcv_trans[char_count]=dataTX1;
   12328:	20 91 67 02 	lds	r18, 0x0267
   1232c:	30 91 68 02 	lds	r19, 0x0268
   12330:	f9 01       	movw	r30, r18
   12332:	e5 50       	subi	r30, 0x05	; 5
   12334:	f6 4f       	sbci	r31, 0xF6	; 246
   12336:	10 83       	st	Z, r17
	    char_count++; 
   12338:	2f 5f       	subi	r18, 0xFF	; 255
   1233a:	3f 4f       	sbci	r19, 0xFF	; 255
   1233c:	30 93 68 02 	sts	0x0268, r19
   12340:	20 93 67 02 	sts	0x0267, r18
	}

	if (dataTX1==0x02){
   12344:	12 30       	cpi	r17, 0x02	; 2
   12346:	c1 f5       	brne	.+112    	; 0x123b8 <__vector_30+0xe0>
		transLength=char_count;
   12348:	60 91 67 02 	lds	r22, 0x0267
   1234c:	70 91 68 02 	lds	r23, 0x0268
   12350:	70 93 6a 02 	sts	0x026A, r23
   12354:	60 93 69 02 	sts	0x0269, r22
		char_count=0;
   12358:	10 92 68 02 	sts	0x0268, r1
   1235c:	10 92 67 02 	sts	0x0267, r1
		IsAdvanZProtocol=False;
   12360:	10 92 76 03 	sts	0x0376, r1

		//MessageIdentification
        if (MsgCode!=MSG_NONE)MsgCode=MSG_NONE;
	    MsgCode=((rcv_trans[35]-'0')*10)+(rcv_trans[36]-'0');
   12364:	80 91 1f 0a 	lds	r24, 0x0A1F
   12368:	80 51       	subi	r24, 0x10	; 16
   1236a:	90 91 1e 0a 	lds	r25, 0x0A1E
   1236e:	99 0f       	add	r25, r25
   12370:	29 2f       	mov	r18, r25
   12372:	22 0f       	add	r18, r18
   12374:	22 0f       	add	r18, r18
   12376:	29 0f       	add	r18, r25
   12378:	82 0f       	add	r24, r18
   1237a:	80 93 24 01 	sts	0x0124, r24
     
	    IdentifyMessage(rcv_trans[0],transLength);
   1237e:	80 91 fb 09 	lds	r24, 0x09FB
   12382:	0e 94 c7 58 	call	0xb18e	; 0xb18e <IdentifyMessage>
		IsNewPacket=True;
   12386:	81 e0       	ldi	r24, 0x01	; 1
   12388:	80 93 66 02 	sts	0x0266, r24

		if ((rcv_trans[35]=='8')&&(rcv_trans[36]=='1')){
   1238c:	90 91 1e 0a 	lds	r25, 0x0A1E
   12390:	98 33       	cpi	r25, 0x38	; 56
   12392:	91 f4       	brne	.+36     	; 0x123b8 <__vector_30+0xe0>
   12394:	90 91 1f 0a 	lds	r25, 0x0A1F
   12398:	91 33       	cpi	r25, 0x31	; 49
   1239a:	71 f4       	brne	.+28     	; 0x123b8 <__vector_30+0xe0>
		   LengthMessage81=transLength-12-44;
   1239c:	20 91 69 02 	lds	r18, 0x0269
   123a0:	30 91 6a 02 	lds	r19, 0x026A
   123a4:	28 53       	subi	r18, 0x38	; 56
   123a6:	30 40       	sbci	r19, 0x00	; 0
   123a8:	30 93 6c 02 	sts	0x026C, r19
   123ac:	20 93 6b 02 	sts	0x026B, r18
		   IsMessage81=True;
   123b0:	80 93 84 02 	sts	0x0284, r24
		   IsCompleteFilling=True;
   123b4:	80 93 87 02 	sts	0x0287, r24
		

	}//Endif(dataTX1==0x02)

	//ConfigDetection: iConf?<0D><0A>
	if (IsNewPacket!=True)
   123b8:	80 91 66 02 	lds	r24, 0x0266
   123bc:	81 30       	cpi	r24, 0x01	; 1
   123be:	19 f0       	breq	.+6      	; 0x123c6 <__vector_30+0xee>
	    ConfigProtocol(dataTX1);
   123c0:	81 2f       	mov	r24, r17
   123c2:	0e 94 56 14 	call	0x28ac	; 0x28ac <ConfigProtocol>
	//GeniusDetection: [CMD][MSG][CSUM][0x0D]
	if ((IFType==IT_STANDALONE)&&(IsNewPacket!=True))
   123c6:	80 91 00 01 	lds	r24, 0x0100
   123ca:	82 30       	cpi	r24, 0x02	; 2
   123cc:	39 f4       	brne	.+14     	; 0x123dc <__vector_30+0x104>
   123ce:	80 91 66 02 	lds	r24, 0x0266
   123d2:	81 30       	cpi	r24, 0x01	; 1
   123d4:	19 f0       	breq	.+6      	; 0x123dc <__vector_30+0x104>
	     GeniusProtocol(dataTX1);		
   123d6:	81 2f       	mov	r24, r17
   123d8:	0e 94 e8 90 	call	0x121d0	; 0x121d0 <GeniusProtocol>
    //uart(0,1,dataTX1);
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}
   123dc:	ff 91       	pop	r31
   123de:	ef 91       	pop	r30
   123e0:	bf 91       	pop	r27
   123e2:	af 91       	pop	r26
   123e4:	9f 91       	pop	r25
   123e6:	8f 91       	pop	r24
   123e8:	7f 91       	pop	r23
   123ea:	6f 91       	pop	r22
   123ec:	5f 91       	pop	r21
   123ee:	4f 91       	pop	r20
   123f0:	3f 91       	pop	r19
   123f2:	2f 91       	pop	r18
   123f4:	1f 91       	pop	r17
   123f6:	0f 90       	pop	r0
   123f8:	0b be       	out	0x3b, r0	; 59
   123fa:	0f 90       	pop	r0
   123fc:	0f be       	out	0x3f, r0	; 63
   123fe:	0f 90       	pop	r0
   12400:	1f 90       	pop	r1
   12402:	18 95       	reti

00012404 <SetIncomingTransStatus>:
}


void SetIncomingTransStatus(char iPumpID,char xTransStatus){
char iStatus,xMaskA,xMaskB,xMaskC,xPumpID;
	 xPumpID=(iPumpID&0x0F);
   12404:	98 2f       	mov	r25, r24
   12406:	9f 70       	andi	r25, 0x0F	; 15
     iStatus=IncomingTransaction[xPumpID/8];
   12408:	e9 2f       	mov	r30, r25
   1240a:	e6 95       	lsr	r30
   1240c:	e6 95       	lsr	r30
   1240e:	e6 95       	lsr	r30
   12410:	f0 e0       	ldi	r31, 0x00	; 0
   12412:	ee 54       	subi	r30, 0x4E	; 78
   12414:	f3 4f       	sbci	r31, 0xF3	; 243
   12416:	40 81       	ld	r20, Z
	 if (xTransStatus==TS_NEW){
   12418:	62 30       	cpi	r22, 0x02	; 2
   1241a:	61 f4       	brne	.+24     	; 0x12434 <SetIncomingTransStatus+0x30>
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
   1241c:	29 2f       	mov	r18, r25
   1241e:	27 70       	andi	r18, 0x07	; 7
   12420:	81 e0       	ldi	r24, 0x01	; 1
   12422:	90 e0       	ldi	r25, 0x00	; 0
   12424:	02 c0       	rjmp	.+4      	; 0x1242a <SetIncomingTransStatus+0x26>
   12426:	88 0f       	add	r24, r24
   12428:	99 1f       	adc	r25, r25
   1242a:	2a 95       	dec	r18
   1242c:	e2 f7       	brpl	.-8      	; 0x12426 <SetIncomingTransStatus+0x22>
   1242e:	84 2b       	or	r24, r20
		 IncomingTransaction[xPumpID/8]=iStatus;
   12430:	80 83       	st	Z, r24
   12432:	08 95       	ret
	 }else if (xTransStatus==TS_OLD){
   12434:	63 30       	cpi	r22, 0x03	; 3
   12436:	c1 f4       	brne	.+48     	; 0x12468 <SetIncomingTransStatus+0x64>
		 xMaskA=(0xFE<<(xPumpID%8));
   12438:	97 70       	andi	r25, 0x07	; 7
   1243a:	2e ef       	ldi	r18, 0xFE	; 254
   1243c:	30 e0       	ldi	r19, 0x00	; 0
   1243e:	52 2f       	mov	r21, r18
   12440:	01 c0       	rjmp	.+2      	; 0x12444 <SetIncomingTransStatus+0x40>
   12442:	55 0f       	add	r21, r21
   12444:	9a 95       	dec	r25
   12446:	ea f7       	brpl	.-6      	; 0x12442 <SetIncomingTransStatus+0x3e>
		 xMaskB=(~xMaskA)>>1;
		 xMaskC=xMaskA|xMaskB;
		 iStatus=iStatus&xMaskC;
		 IncomingTransaction[iPumpID/8]=iStatus;
   12448:	86 95       	lsr	r24
   1244a:	86 95       	lsr	r24
   1244c:	86 95       	lsr	r24
   1244e:	e8 2f       	mov	r30, r24
   12450:	f0 e0       	ldi	r31, 0x00	; 0
   12452:	ee 54       	subi	r30, 0x4E	; 78
   12454:	f3 4f       	sbci	r31, 0xF3	; 243
	 if (xTransStatus==TS_NEW){
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
		 IncomingTransaction[xPumpID/8]=iStatus;
	 }else if (xTransStatus==TS_OLD){
		 xMaskA=(0xFE<<(xPumpID%8));
		 xMaskB=(~xMaskA)>>1;
   12456:	25 2f       	mov	r18, r21
   12458:	30 e0       	ldi	r19, 0x00	; 0
   1245a:	20 95       	com	r18
   1245c:	30 95       	com	r19
   1245e:	35 95       	asr	r19
   12460:	27 95       	ror	r18
		 xMaskC=xMaskA|xMaskB;
   12462:	25 2b       	or	r18, r21
		 iStatus=iStatus&xMaskC;
   12464:	24 23       	and	r18, r20
		 IncomingTransaction[iPumpID/8]=iStatus;
   12466:	20 83       	st	Z, r18
   12468:	08 95       	ret

0001246a <StoreStandaloneTransData>:
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
}
         
			                                         //      STX     MSGID  PumpID              6        8        8
void StoreStandaloneTransData(char *strRawTransData){//  [0x50,0x05]  01      01      1       004500   00000200  00000012 [0x06,0x60] = 24
   1246a:	2f 92       	push	r2
   1246c:	3f 92       	push	r3
   1246e:	4f 92       	push	r4
   12470:	5f 92       	push	r5
   12472:	6f 92       	push	r6
   12474:	7f 92       	push	r7
   12476:	8f 92       	push	r8
   12478:	9f 92       	push	r9
   1247a:	af 92       	push	r10
   1247c:	bf 92       	push	r11
   1247e:	cf 92       	push	r12
   12480:	df 92       	push	r13
   12482:	ef 92       	push	r14
   12484:	ff 92       	push	r15
   12486:	0f 93       	push	r16
   12488:	1f 93       	push	r17
   1248a:	df 93       	push	r29
   1248c:	cf 93       	push	r28
   1248e:	cd b7       	in	r28, 0x3d	; 61
   12490:	de b7       	in	r29, 0x3e	; 62
   12492:	e4 97       	sbiw	r28, 0x34	; 52
   12494:	0f b6       	in	r0, 0x3f	; 63
   12496:	f8 94       	cli
   12498:	de bf       	out	0x3e, r29	; 62
   1249a:	0f be       	out	0x3f, r0	; 63
   1249c:	cd bf       	out	0x3d, r28	; 61
   1249e:	7c 01       	movw	r14, r24
	 char strTransDate[9],strTransTime[9];
	 char strSend[30];
	 char TransDigit;
	 char FIPAddr;
      
	 StrPosCopy(strRawTransData,strPumpID,2,2);
   124a0:	8e 01       	movw	r16, r28
   124a2:	0f 5f       	subi	r16, 0xFF	; 255
   124a4:	1f 4f       	sbci	r17, 0xFF	; 255
   124a6:	b8 01       	movw	r22, r16
   124a8:	42 e0       	ldi	r20, 0x02	; 2
   124aa:	50 e0       	ldi	r21, 0x00	; 0
   124ac:	22 e0       	ldi	r18, 0x02	; 2
   124ae:	30 e0       	ldi	r19, 0x00	; 0
   124b0:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
	 RemZeroLead(strPumpID);
   124b4:	c8 01       	movw	r24, r16
   124b6:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
	 iPumpID=atoi(strPumpID); 
   124ba:	c8 01       	movw	r24, r16
   124bc:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
   124c0:	89 ab       	std	Y+49, r24	; 0x31
	 
	 FIPAddr=GetFIPAddr(iPumpID);
   124c2:	0e 94 07 6d 	call	0xda0e	; 0xda0e <GetFIPAddr>
   124c6:	58 2e       	mov	r5, r24
	 if (FIPAddr>0){
   124c8:	88 23       	and	r24, r24
   124ca:	09 f4       	brne	.+2      	; 0x124ce <StoreStandaloneTransData+0x64>
   124cc:	7d c1       	rjmp	.+762    	; 0x127c8 <StoreStandaloneTransData+0x35e>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
   124ce:	d7 01       	movw	r26, r14
   124d0:	14 96       	adiw	r26, 0x04	; 4
   124d2:	bc 91       	ld	r27, X
   124d4:	bb ab       	std	Y+51, r27	; 0x33
   124d6:	f7 01       	movw	r30, r14
   124d8:	f5 81       	ldd	r31, Z+5	; 0x05
   124da:	fc ab       	std	Y+52, r31	; 0x34
	     FIPAddr=FIPAddr-1;
	     //01 01 1 1 004500 0000055 0002475 
		 PNozzle=CharPosCopy(strRawTransData,4)-'0';
		 PGrade=CharPosCopy(strRawTransData,5)-'0';

		 FillChar(strPPU,sizeof(strPPU),0);
   124dc:	54 e0       	ldi	r21, 0x04	; 4
   124de:	c5 2e       	mov	r12, r21
   124e0:	d1 2c       	mov	r13, r1
   124e2:	cc 0e       	add	r12, r28
   124e4:	dd 1e       	adc	r13, r29
   124e6:	c6 01       	movw	r24, r12
   124e8:	67 e0       	ldi	r22, 0x07	; 7
   124ea:	70 e0       	ldi	r23, 0x00	; 0
   124ec:	40 e0       	ldi	r20, 0x00	; 0
   124ee:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		 FillChar(strPVolume,sizeof(strPVolume),0);
   124f2:	4d e1       	ldi	r20, 0x1D	; 29
   124f4:	a4 2e       	mov	r10, r20
   124f6:	b1 2c       	mov	r11, r1
   124f8:	ac 0e       	add	r10, r28
   124fa:	bd 1e       	adc	r11, r29
   124fc:	c5 01       	movw	r24, r10
   124fe:	6a e0       	ldi	r22, 0x0A	; 10
   12500:	70 e0       	ldi	r23, 0x00	; 0
   12502:	40 e0       	ldi	r20, 0x00	; 0
   12504:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>
		 FillChar(strPMoney,sizeof(strPMoney),0);
   12508:	8e 01       	movw	r16, r28
   1250a:	09 5d       	subi	r16, 0xD9	; 217
   1250c:	1f 4f       	sbci	r17, 0xFF	; 255
   1250e:	c8 01       	movw	r24, r16
   12510:	6a e0       	ldi	r22, 0x0A	; 10
   12512:	70 e0       	ldi	r23, 0x00	; 0
   12514:	40 e0       	ldi	r20, 0x00	; 0
   12516:	0e 94 66 49 	call	0x92cc	; 0x92cc <FillChar>

		 StrPosCopy(strRawTransData,strPPU,6,6);	 
   1251a:	c7 01       	movw	r24, r14
   1251c:	b6 01       	movw	r22, r12
   1251e:	46 e0       	ldi	r20, 0x06	; 6
   12520:	50 e0       	ldi	r21, 0x00	; 0
   12522:	26 e0       	ldi	r18, 0x06	; 6
   12524:	30 e0       	ldi	r19, 0x00	; 0
   12526:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 StrPosCopy(strRawTransData,strPVolume,12,8);
   1252a:	c7 01       	movw	r24, r14
   1252c:	b5 01       	movw	r22, r10
   1252e:	4c e0       	ldi	r20, 0x0C	; 12
   12530:	50 e0       	ldi	r21, 0x00	; 0
   12532:	28 e0       	ldi	r18, 0x08	; 8
   12534:	30 e0       	ldi	r19, 0x00	; 0
   12536:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 StrPosCopy(strRawTransData,strPMoney,20,8);
   1253a:	c7 01       	movw	r24, r14
   1253c:	b8 01       	movw	r22, r16
   1253e:	44 e1       	ldi	r20, 0x14	; 20
   12540:	50 e0       	ldi	r21, 0x00	; 0
   12542:	28 e0       	ldi	r18, 0x08	; 8
   12544:	30 e0       	ldi	r19, 0x00	; 0
   12546:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

		 TransDigit=Ord(CharPosCopy(strRawTransData,28));
   1254a:	d7 01       	movw	r26, r14
   1254c:	5c 96       	adiw	r26, 0x1c	; 28
   1254e:	8c 91       	ld	r24, X
   12550:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <Ord>
		 //Normalize7Digit
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
   12554:	88 30       	cpi	r24, 0x08	; 8
   12556:	79 f4       	brne	.+30     	; 0x12576 <StoreStandaloneTransData+0x10c>
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
   12558:	f8 01       	movw	r30, r16
   1255a:	01 90       	ld	r0, Z+
   1255c:	00 20       	and	r0, r0
   1255e:	e9 f7       	brne	.-6      	; 0x1255a <StoreStandaloneTransData+0xf0>
   12560:	9f 01       	movw	r18, r30
   12562:	20 1b       	sub	r18, r16
   12564:	31 0b       	sbc	r19, r17
   12566:	22 50       	subi	r18, 0x02	; 2
   12568:	30 40       	sbci	r19, 0x00	; 0
   1256a:	c8 01       	movw	r24, r16
   1256c:	b8 01       	movw	r22, r16
   1256e:	40 e0       	ldi	r20, 0x00	; 0
   12570:	50 e0       	ldi	r21, 0x00	; 0
   12572:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
		 }
		 RemZeroLead(strPPU);
   12576:	34 e0       	ldi	r19, 0x04	; 4
   12578:	83 2e       	mov	r8, r19
   1257a:	91 2c       	mov	r9, r1
   1257c:	8c 0e       	add	r8, r28
   1257e:	9d 1e       	adc	r9, r29
   12580:	c4 01       	movw	r24, r8
   12582:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		 RemZeroLead(strPVolume);
   12586:	2d e1       	ldi	r18, 0x1D	; 29
   12588:	62 2e       	mov	r6, r18
   1258a:	71 2c       	mov	r7, r1
   1258c:	6c 0e       	add	r6, r28
   1258e:	7d 1e       	adc	r7, r29
   12590:	c3 01       	movw	r24, r6
   12592:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		 RemZeroLead(strPMoney);
   12596:	97 e2       	ldi	r25, 0x27	; 39
   12598:	a9 2e       	mov	r10, r25
   1259a:	b1 2c       	mov	r11, r1
   1259c:	ac 0e       	add	r10, r28
   1259e:	bd 1e       	adc	r11, r29
   125a0:	c5 01       	movw	r24, r10
   125a2:	0e 94 31 38 	call	0x7062	; 0x7062 <RemZeroLead>
		 //sprintf_P(strSend,PSTR("Money: %s"),strPMoney);
		 //uart_print(1,1,strSend);


		 //Void Detection
		 if (atoi(strPMoney)==0)TransactionStatus=TS_VOID;
   125a6:	c5 01       	movw	r24, r10
   125a8:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
   125ac:	f9 a9       	ldd	r31, Y+49	; 0x31
   125ae:	ff 70       	andi	r31, 0x0F	; 15
   125b0:	fa ab       	std	Y+50, r31	; 0x32
   125b2:	00 97       	sbiw	r24, 0x00	; 0
   125b4:	29 f4       	brne	.+10     	; 0x125c0 <StoreStandaloneTransData+0x156>
		 else TransactionStatus=TS_NEW;
		 
		 if (TransactionStatus==TS_VOID){//RejectData
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
   125b6:	8f 2f       	mov	r24, r31
   125b8:	63 e1       	ldi	r22, 0x13	; 19
   125ba:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
   125be:	04 c1       	rjmp	.+520    	; 0x127c8 <StoreStandaloneTransData+0x35e>
	 RemZeroLead(strPumpID);
	 iPumpID=atoi(strPumpID); 
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
   125c0:	5a 94       	dec	r5
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
		 }
		 else 
		 if (TransactionStatus=TS_NEW){ 
			 //Update ReprintReady
			 ReprintReady[FIPAddr]=True;//Ready for Printing
   125c2:	25 2c       	mov	r2, r5
   125c4:	33 24       	eor	r3, r3
   125c6:	f1 01       	movw	r30, r2
   125c8:	ed 5e       	subi	r30, 0xED	; 237
   125ca:	fe 4f       	sbci	r31, 0xFE	; 254
   125cc:	81 e0       	ldi	r24, 0x01	; 1
   125ce:	80 83       	st	Z, r24
			  
			 FormatPrice(strPPU);
   125d0:	c4 01       	movw	r24, r8
   125d2:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <FormatPrice>
			 FormatMoney(strPMoney);
   125d6:	c5 01       	movw	r24, r10
   125d8:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <FormatMoney>
			 FormatVolume(strPVolume);
   125dc:	c3 01       	movw	r24, r6
   125de:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <FormatVolume>

			 //uart_print(1,1,strPVolume);
			 
			 GenerateTransactionNum(strTranNo);		 
   125e2:	85 e6       	ldi	r24, 0x65	; 101
   125e4:	e8 2e       	mov	r14, r24
   125e6:	8d e0       	ldi	r24, 0x0D	; 13
   125e8:	f8 2e       	mov	r15, r24
   125ea:	c7 01       	movw	r24, r14
   125ec:	0e 94 0e 58 	call	0xb01c	; 0xb01c <GenerateTransactionNum>
			 sprintf_P(strTransDate,PSTR("%s"),strSystemDate);
   125f0:	00 d0       	rcall	.+0      	; 0x125f2 <StoreStandaloneTransData+0x188>
   125f2:	00 d0       	rcall	.+0      	; 0x125f4 <StoreStandaloneTransData+0x18a>
   125f4:	00 d0       	rcall	.+0      	; 0x125f6 <StoreStandaloneTransData+0x18c>
   125f6:	ed b7       	in	r30, 0x3d	; 61
   125f8:	fe b7       	in	r31, 0x3e	; 62
   125fa:	31 96       	adiw	r30, 0x01	; 1
   125fc:	0b e0       	ldi	r16, 0x0B	; 11
   125fe:	c0 2e       	mov	r12, r16
   12600:	d1 2c       	mov	r13, r1
   12602:	cc 0e       	add	r12, r28
   12604:	dd 1e       	adc	r13, r29
   12606:	ad b7       	in	r26, 0x3d	; 61
   12608:	be b7       	in	r27, 0x3e	; 62
   1260a:	12 96       	adiw	r26, 0x02	; 2
   1260c:	dc 92       	st	X, r13
   1260e:	ce 92       	st	-X, r12
   12610:	11 97       	sbiw	r26, 0x01	; 1
   12612:	8a ef       	ldi	r24, 0xFA	; 250
   12614:	93 e2       	ldi	r25, 0x23	; 35
   12616:	93 83       	std	Z+3, r25	; 0x03
   12618:	82 83       	std	Z+2, r24	; 0x02
   1261a:	88 e9       	ldi	r24, 0x98	; 152
   1261c:	94 e0       	ldi	r25, 0x04	; 4
   1261e:	95 83       	std	Z+5, r25	; 0x05
   12620:	84 83       	std	Z+4, r24	; 0x04
   12622:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
   12626:	ed b7       	in	r30, 0x3d	; 61
   12628:	fe b7       	in	r31, 0x3e	; 62
   1262a:	31 96       	adiw	r30, 0x01	; 1
   1262c:	14 e1       	ldi	r17, 0x14	; 20
   1262e:	41 2e       	mov	r4, r17
   12630:	51 2c       	mov	r5, r1
   12632:	4c 0e       	add	r4, r28
   12634:	5d 1e       	adc	r5, r29
   12636:	ad b7       	in	r26, 0x3d	; 61
   12638:	be b7       	in	r27, 0x3e	; 62
   1263a:	12 96       	adiw	r26, 0x02	; 2
   1263c:	5c 92       	st	X, r5
   1263e:	4e 92       	st	-X, r4
   12640:	11 97       	sbiw	r26, 0x01	; 1
   12642:	87 ef       	ldi	r24, 0xF7	; 247
   12644:	93 e2       	ldi	r25, 0x23	; 35
   12646:	93 83       	std	Z+3, r25	; 0x03
   12648:	82 83       	std	Z+2, r24	; 0x02
   1264a:	82 e5       	ldi	r24, 0x52	; 82
   1264c:	99 e0       	ldi	r25, 0x09	; 9
   1264e:	95 83       	std	Z+5, r25	; 0x05
   12650:	84 83       	std	Z+4, r24	; 0x04
   12652:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
   12656:	ed b7       	in	r30, 0x3d	; 61
   12658:	fe b7       	in	r31, 0x3e	; 62
   1265a:	36 96       	adiw	r30, 0x06	; 6
   1265c:	0f b6       	in	r0, 0x3f	; 63
   1265e:	f8 94       	cli
   12660:	fe bf       	out	0x3e, r31	; 62
   12662:	0f be       	out	0x3f, r0	; 63
   12664:	ed bf       	out	0x3d, r30	; 61
   12666:	8f e3       	ldi	r24, 0x3F	; 63
   12668:	91 e0       	ldi	r25, 0x01	; 1
   1266a:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   1266e:	00 d0       	rcall	.+0      	; 0x12670 <StoreStandaloneTransData+0x206>
   12670:	00 d0       	rcall	.+0      	; 0x12672 <StoreStandaloneTransData+0x208>
   12672:	00 d0       	rcall	.+0      	; 0x12674 <StoreStandaloneTransData+0x20a>
   12674:	ed b7       	in	r30, 0x3d	; 61
   12676:	fe b7       	in	r31, 0x3e	; 62
   12678:	31 96       	adiw	r30, 0x01	; 1
   1267a:	26 e4       	ldi	r18, 0x46	; 70
   1267c:	3d e0       	ldi	r19, 0x0D	; 13
   1267e:	ad b7       	in	r26, 0x3d	; 61
   12680:	be b7       	in	r27, 0x3e	; 62
   12682:	12 96       	adiw	r26, 0x02	; 2
   12684:	3c 93       	st	X, r19
   12686:	2e 93       	st	-X, r18
   12688:	11 97       	sbiw	r26, 0x01	; 1
   1268a:	24 ef       	ldi	r18, 0xF4	; 244
   1268c:	33 e2       	ldi	r19, 0x23	; 35
   1268e:	33 83       	std	Z+3, r19	; 0x03
   12690:	22 83       	std	Z+2, r18	; 0x02
   12692:	84 83       	std	Z+4, r24	; 0x04
   12694:	15 82       	std	Z+5, r1	; 0x05
   12696:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
   1269a:	d7 01       	movw	r26, r14
   1269c:	0d 90       	ld	r0, X+
   1269e:	00 20       	and	r0, r0
   126a0:	e9 f7       	brne	.-6      	; 0x1269c <StoreStandaloneTransData+0x232>
   126a2:	9d 01       	movw	r18, r26
   126a4:	21 50       	subi	r18, 0x01	; 1
   126a6:	30 40       	sbci	r19, 0x00	; 0
   126a8:	2e 19       	sub	r18, r14
   126aa:	3f 09       	sbc	r19, r15
   126ac:	ed b7       	in	r30, 0x3d	; 61
   126ae:	fe b7       	in	r31, 0x3e	; 62
   126b0:	36 96       	adiw	r30, 0x06	; 6
   126b2:	0f b6       	in	r0, 0x3f	; 63
   126b4:	f8 94       	cli
   126b6:	fe bf       	out	0x3e, r31	; 62
   126b8:	0f be       	out	0x3f, r0	; 63
   126ba:	ed bf       	out	0x3d, r30	; 61
   126bc:	85 e3       	ldi	r24, 0x35	; 53
   126be:	90 e0       	ldi	r25, 0x00	; 0
   126c0:	28 9e       	mul	r2, r24
   126c2:	80 01       	movw	r16, r0
   126c4:	29 9e       	mul	r2, r25
   126c6:	10 0d       	add	r17, r0
   126c8:	38 9e       	mul	r3, r24
   126ca:	10 0d       	add	r17, r0
   126cc:	11 24       	eor	r1, r1
   126ce:	b8 01       	movw	r22, r16
   126d0:	67 57       	subi	r22, 0x77	; 119
   126d2:	79 4f       	sbci	r23, 0xF9	; 249
   126d4:	c7 01       	movw	r24, r14
   126d6:	40 e0       	ldi	r20, 0x00	; 0
   126d8:	50 e0       	ldi	r21, 0x00	; 0
   126da:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
   126de:	d6 01       	movw	r26, r12
   126e0:	0d 90       	ld	r0, X+
   126e2:	00 20       	and	r0, r0
   126e4:	e9 f7       	brne	.-6      	; 0x126e0 <StoreStandaloneTransData+0x276>
   126e6:	9d 01       	movw	r18, r26
   126e8:	21 50       	subi	r18, 0x01	; 1
   126ea:	30 40       	sbci	r19, 0x00	; 0
   126ec:	2c 19       	sub	r18, r12
   126ee:	3d 09       	sbc	r19, r13
   126f0:	b8 01       	movw	r22, r16
   126f2:	60 57       	subi	r22, 0x70	; 112
   126f4:	79 4f       	sbci	r23, 0xF9	; 249
   126f6:	c6 01       	movw	r24, r12
   126f8:	40 e0       	ldi	r20, 0x00	; 0
   126fa:	50 e0       	ldi	r21, 0x00	; 0
   126fc:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
   12700:	f2 01       	movw	r30, r4
   12702:	01 90       	ld	r0, Z+
   12704:	00 20       	and	r0, r0
   12706:	e9 f7       	brne	.-6      	; 0x12702 <StoreStandaloneTransData+0x298>
   12708:	9f 01       	movw	r18, r30
   1270a:	21 50       	subi	r18, 0x01	; 1
   1270c:	30 40       	sbci	r19, 0x00	; 0
   1270e:	24 19       	sub	r18, r4
   12710:	35 09       	sbc	r19, r5
   12712:	b8 01       	movw	r22, r16
   12714:	67 56       	subi	r22, 0x67	; 103
   12716:	79 4f       	sbci	r23, 0xF9	; 249
   12718:	c2 01       	movw	r24, r4
   1271a:	40 e0       	ldi	r20, 0x00	; 0
   1271c:	50 e0       	ldi	r21, 0x00	; 0
   1271e:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
   12722:	b6 e8       	ldi	r27, 0x86	; 134
   12724:	eb 2e       	mov	r14, r27
   12726:	b6 e0       	ldi	r27, 0x06	; 6
   12728:	fb 2e       	mov	r15, r27
   1272a:	e0 0e       	add	r14, r16
   1272c:	f1 1e       	adc	r15, r17
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
	     //01 01 1 1 004500 0000055 0002475 
		 PNozzle=CharPosCopy(strRawTransData,4)-'0';
		 PGrade=CharPosCopy(strRawTransData,5)-'0';
   1272e:	8c a9       	ldd	r24, Y+52	; 0x34
   12730:	80 53       	subi	r24, 0x30	; 48
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
   12732:	d7 01       	movw	r26, r14
   12734:	8c 93       	st	X, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
	     //01 01 1 1 004500 0000055 0002475 
		 PNozzle=CharPosCopy(strRawTransData,4)-'0';
   12736:	8b a9       	ldd	r24, Y+51	; 0x33
   12738:	80 53       	subi	r24, 0x30	; 48
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
   1273a:	11 96       	adiw	r26, 0x01	; 1
   1273c:	8c 93       	st	X, r24
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
   1273e:	86 e4       	ldi	r24, 0x46	; 70
   12740:	9d e0       	ldi	r25, 0x0D	; 13
   12742:	0e 94 ee a5 	call	0x14bdc	; 0x14bdc <atoi>
   12746:	f7 01       	movw	r30, r14
   12748:	82 83       	std	Z+2, r24	; 0x02
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
   1274a:	d4 01       	movw	r26, r8
   1274c:	0d 90       	ld	r0, X+
   1274e:	00 20       	and	r0, r0
   12750:	e9 f7       	brne	.-6      	; 0x1274c <StoreStandaloneTransData+0x2e2>
   12752:	9d 01       	movw	r18, r26
   12754:	21 50       	subi	r18, 0x01	; 1
   12756:	30 40       	sbci	r19, 0x00	; 0
   12758:	28 19       	sub	r18, r8
   1275a:	39 09       	sbc	r19, r9
   1275c:	b8 01       	movw	r22, r16
   1275e:	6e 55       	subi	r22, 0x5E	; 94
   12760:	79 4f       	sbci	r23, 0xF9	; 249
   12762:	c4 01       	movw	r24, r8
   12764:	40 e0       	ldi	r20, 0x00	; 0
   12766:	50 e0       	ldi	r21, 0x00	; 0
   12768:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
   1276c:	f3 01       	movw	r30, r6
   1276e:	01 90       	ld	r0, Z+
   12770:	00 20       	and	r0, r0
   12772:	e9 f7       	brne	.-6      	; 0x1276e <StoreStandaloneTransData+0x304>
   12774:	9f 01       	movw	r18, r30
   12776:	21 50       	subi	r18, 0x01	; 1
   12778:	30 40       	sbci	r19, 0x00	; 0
   1277a:	26 19       	sub	r18, r6
   1277c:	37 09       	sbc	r19, r7
   1277e:	b8 01       	movw	r22, r16
   12780:	67 55       	subi	r22, 0x57	; 87
   12782:	79 4f       	sbci	r23, 0xF9	; 249
   12784:	c3 01       	movw	r24, r6
   12786:	40 e0       	ldi	r20, 0x00	; 0
   12788:	50 e0       	ldi	r21, 0x00	; 0
   1278a:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));
   1278e:	d5 01       	movw	r26, r10
   12790:	0d 90       	ld	r0, X+
   12792:	00 20       	and	r0, r0
   12794:	e9 f7       	brne	.-6      	; 0x12790 <StoreStandaloneTransData+0x326>
   12796:	9d 01       	movw	r18, r26
   12798:	21 50       	subi	r18, 0x01	; 1
   1279a:	30 40       	sbci	r19, 0x00	; 0
   1279c:	2a 19       	sub	r18, r10
   1279e:	3b 09       	sbc	r19, r11
   127a0:	b8 01       	movw	r22, r16
   127a2:	6e 54       	subi	r22, 0x4E	; 78
   127a4:	79 4f       	sbci	r23, 0xF9	; 249
   127a6:	c5 01       	movw	r24, r10
   127a8:	40 e0       	ldi	r20, 0x00	; 0
   127aa:	50 e0       	ldi	r21, 0x00	; 0
   127ac:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <StrPosCopy>

			 UpdateStandaloneStatus((iPumpID&0x0F),PS_PRINT_READY);
   127b0:	8a a9       	ldd	r24, Y+50	; 0x32
   127b2:	60 e1       	ldi	r22, 0x10	; 16
   127b4:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
			 
			 SetIncomingTransStatus(iPumpID,TS_NEW);		 
   127b8:	89 a9       	ldd	r24, Y+49	; 0x31
   127ba:	62 e0       	ldi	r22, 0x02	; 2
   127bc:	0e 94 02 92 	call	0x12404	; 0x12404 <SetIncomingTransStatus>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
   127c0:	8b e0       	ldi	r24, 0x0B	; 11
   127c2:	69 a9       	ldd	r22, Y+49	; 0x31
   127c4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
		 }		 
	 }    
     //uart_print(0,1,strRawTransData);
}
   127c8:	e4 96       	adiw	r28, 0x34	; 52
   127ca:	0f b6       	in	r0, 0x3f	; 63
   127cc:	f8 94       	cli
   127ce:	de bf       	out	0x3e, r29	; 62
   127d0:	0f be       	out	0x3f, r0	; 63
   127d2:	cd bf       	out	0x3d, r28	; 61
   127d4:	cf 91       	pop	r28
   127d6:	df 91       	pop	r29
   127d8:	1f 91       	pop	r17
   127da:	0f 91       	pop	r16
   127dc:	ff 90       	pop	r15
   127de:	ef 90       	pop	r14
   127e0:	df 90       	pop	r13
   127e2:	cf 90       	pop	r12
   127e4:	bf 90       	pop	r11
   127e6:	af 90       	pop	r10
   127e8:	9f 90       	pop	r9
   127ea:	8f 90       	pop	r8
   127ec:	7f 90       	pop	r7
   127ee:	6f 90       	pop	r6
   127f0:	5f 90       	pop	r5
   127f2:	4f 90       	pop	r4
   127f4:	3f 90       	pop	r3
   127f6:	2f 90       	pop	r2
   127f8:	08 95       	ret

000127fa <ScanStandaloneFlow>:
	 _spi(SlaveMessage);
	 _spi(0x06);
	 systemSlave();
}

void ScanStandaloneFlow(char data){  //<STX>[PumpID][STA]<ETX> --> 0x07 0xF1 0xF2 0x08
   127fa:	0f 93       	push	r16
   127fc:	1f 93       	push	r17
   127fe:	18 2f       	mov	r17, r24

      DataPumpID=0;
      DataPumpStatus=0;
	  MixData=0;
      //Shift data
      zDataFlow[4]=zDataFlow[3];
   12800:	80 91 87 03 	lds	r24, 0x0387
   12804:	80 93 88 03 	sts	0x0388, r24
	  zDataFlow[3]=zDataFlow[2];
   12808:	80 91 86 03 	lds	r24, 0x0386
   1280c:	80 93 87 03 	sts	0x0387, r24
	  zDataFlow[2]=zDataFlow[1];
   12810:	90 91 85 03 	lds	r25, 0x0385
   12814:	90 93 86 03 	sts	0x0386, r25
      zDataFlow[1]=zDataFlow[0];
   12818:	80 91 84 03 	lds	r24, 0x0384
   1281c:	80 93 85 03 	sts	0x0385, r24
      zDataFlow[0]=data;
   12820:	10 93 84 03 	sts	0x0384, r17

      //Scan UpdatedPumpStatus Flow
	  //<STX>[ID][STA]<ETX>: 0x07[ID STA]0x08
	  if((zDataFlow[2]==0x07)&&(zDataFlow[0]==0x08)){
   12824:	97 30       	cpi	r25, 0x07	; 7
   12826:	71 f4       	brne	.+28     	; 0x12844 <ScanStandaloneFlow+0x4a>
   12828:	18 30       	cpi	r17, 0x08	; 8
   1282a:	61 f4       	brne	.+24     	; 0x12844 <ScanStandaloneFlow+0x4a>
          MixData=zDataFlow[1];
	      DataPumpID=((MixData&0xF0)>>4);
		  DataPumpStatus=(MixData&0x0F);
   1282c:	08 2f       	mov	r16, r24
   1282e:	0f 70       	andi	r16, 0x0F	; 15
		  UpdateStandaloneStatus(DataPumpID,DataPumpStatus);
   12830:	82 95       	swap	r24
   12832:	8f 70       	andi	r24, 0x0F	; 15
   12834:	60 2f       	mov	r22, r16
   12836:	0e 94 26 80 	call	0x1004c	; 0x1004c <UpdateStandaloneStatus>
		  if (DataPumpStatus!=PUMP_NONE)IsStandAloneDetected=True;
   1283a:	0e 30       	cpi	r16, 0x0E	; 14
   1283c:	19 f0       	breq	.+6      	; 0x12844 <ScanStandaloneFlow+0x4a>
   1283e:	81 e0       	ldi	r24, 0x01	; 1
   12840:	80 93 7a 02 	sts	0x027A, r24
		  //sprintf_P(strSend,PSTR("PS:%d Id:%d"),MixData,DataPumpID);
		  //uart_print(0,1,strSend);
	  }

	  //Scan Transaction Completion FEOT
	  if (IsStandaloneTrans==True){
   12844:	80 91 7b 02 	lds	r24, 0x027B
   12848:	81 30       	cpi	r24, 0x01	; 1
   1284a:	71 f4       	brne	.+28     	; 0x12868 <ScanStandaloneFlow+0x6e>
	      strStandReceived[iFlow]=data;
   1284c:	20 91 82 03 	lds	r18, 0x0382
   12850:	30 91 83 03 	lds	r19, 0x0383
   12854:	f9 01       	movw	r30, r18
   12856:	ec 51       	subi	r30, 0x1C	; 28
   12858:	fc 4f       	sbci	r31, 0xFC	; 252
   1285a:	10 83       	st	Z, r17
		  iFlow++;
   1285c:	2f 5f       	subi	r18, 0xFF	; 255
   1285e:	3f 4f       	sbci	r19, 0xFF	; 255
   12860:	30 93 83 03 	sts	0x0383, r19
   12864:	20 93 82 03 	sts	0x0382, r18
	  }
	  if((zDataFlow[1]==0x05)&&(zDataFlow[0]==0x50)){
   12868:	80 91 85 03 	lds	r24, 0x0385
   1286c:	85 30       	cpi	r24, 0x05	; 5
   1286e:	61 f4       	brne	.+24     	; 0x12888 <ScanStandaloneFlow+0x8e>
   12870:	80 91 84 03 	lds	r24, 0x0384
   12874:	80 35       	cpi	r24, 0x50	; 80
   12876:	41 f5       	brne	.+80     	; 0x128c8 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=True;
   12878:	81 e0       	ldi	r24, 0x01	; 1
   1287a:	80 93 7b 02 	sts	0x027B, r24
		  iFlow=0;
   1287e:	10 92 83 03 	sts	0x0383, r1
   12882:	10 92 82 03 	sts	0x0382, r1
   12886:	20 c0       	rjmp	.+64     	; 0x128c8 <ScanStandaloneFlow+0xce>
	  }
	  if((zDataFlow[1]==0x06)&&(zDataFlow[0]==0x60)){
   12888:	86 30       	cpi	r24, 0x06	; 6
   1288a:	f1 f4       	brne	.+60     	; 0x128c8 <ScanStandaloneFlow+0xce>
   1288c:	80 91 84 03 	lds	r24, 0x0384
   12890:	80 36       	cpi	r24, 0x60	; 96
   12892:	d1 f4       	brne	.+52     	; 0x128c8 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=False;
   12894:	10 92 7b 02 	sts	0x027B, r1
	      strStandReceived[iFlow]=0;
   12898:	e0 91 82 03 	lds	r30, 0x0382
   1289c:	f0 91 83 03 	lds	r31, 0x0383
   128a0:	ec 51       	subi	r30, 0x1C	; 28
   128a2:	fc 4f       	sbci	r31, 0xFC	; 252
   128a4:	10 82       	st	Z, r1

		  //uart_print(1,1,strStandReceived);

		  MsgIDx=GetMessageID(strStandReceived);
   128a6:	84 ee       	ldi	r24, 0xE4	; 228
   128a8:	93 e0       	ldi	r25, 0x03	; 3
   128aa:	0e 94 62 42 	call	0x84c4	; 0x84c4 <GetMessageID>
          if (MsgIDx==0x01)StoreStandaloneTransData(strStandReceived);
   128ae:	81 30       	cpi	r24, 0x01	; 1
   128b0:	29 f4       	brne	.+10     	; 0x128bc <ScanStandaloneFlow+0xc2>
   128b2:	84 ee       	ldi	r24, 0xE4	; 228
   128b4:	93 e0       	ldi	r25, 0x03	; 3
   128b6:	0e 94 35 92 	call	0x1246a	; 0x1246a <StoreStandaloneTransData>
   128ba:	06 c0       	rjmp	.+12     	; 0x128c8 <ScanStandaloneFlow+0xce>
		  else
          if (MsgIDx==0x02)StoreStandaloneTotalizerData(strStandReceived);
   128bc:	82 30       	cpi	r24, 0x02	; 2
   128be:	21 f4       	brne	.+8      	; 0x128c8 <ScanStandaloneFlow+0xce>
   128c0:	84 ee       	ldi	r24, 0xE4	; 228
   128c2:	93 e0       	ldi	r25, 0x03	; 3
   128c4:	0e 94 47 8f 	call	0x11e8e	; 0x11e8e <StoreStandaloneTotalizerData>
	  }
	  //AcknoledgeCommand
	  if ((zDataFlow[3]==0x09)&&(zDataFlow[0]==0x0A)){
   128c8:	80 91 87 03 	lds	r24, 0x0387
   128cc:	89 30       	cpi	r24, 0x09	; 9
   128ce:	c1 f5       	brne	.+112    	; 0x12940 <ScanStandaloneFlow+0x146>
   128d0:	80 91 84 03 	lds	r24, 0x0384
   128d4:	8a 30       	cpi	r24, 0x0A	; 10
   128d6:	a1 f5       	brne	.+104    	; 0x12940 <ScanStandaloneFlow+0x146>
	      
	      AcknoledgePump=zDataFlow[1];
   128d8:	90 91 85 03 	lds	r25, 0x0385
   128dc:	90 93 ca 0c 	sts	0x0CCA, r25
	      AcknoledgeCommand=zDataFlow[2];	  
   128e0:	80 91 86 03 	lds	r24, 0x0386
   128e4:	80 93 7b 06 	sts	0x067B, r24
		  switch(AcknoledgeCommand){
   128e8:	89 31       	cpi	r24, 0x19	; 25
   128ea:	51 f0       	breq	.+20     	; 0x12900 <ScanStandaloneFlow+0x106>
   128ec:	8a 31       	cpi	r24, 0x1A	; 26
   128ee:	18 f4       	brcc	.+6      	; 0x128f6 <ScanStandaloneFlow+0xfc>
   128f0:	85 30       	cpi	r24, 0x05	; 5
   128f2:	19 f5       	brne	.+70     	; 0x1293a <ScanStandaloneFlow+0x140>
   128f4:	17 c0       	rjmp	.+46     	; 0x12924 <ScanStandaloneFlow+0x12a>
   128f6:	8a 31       	cpi	r24, 0x1A	; 26
   128f8:	c9 f0       	breq	.+50     	; 0x1292c <ScanStandaloneFlow+0x132>
   128fa:	8c 31       	cpi	r24, 0x1C	; 28
   128fc:	f1 f4       	brne	.+60     	; 0x1293a <ScanStandaloneFlow+0x140>
   128fe:	1a c0       	rjmp	.+52     	; 0x12934 <ScanStandaloneFlow+0x13a>
		  case SC_LIVE_SEQUENCE:
		       iSequencePooling=AcknoledgePump;
   12900:	90 93 5e 02 	sts	0x025E, r25
			   IsNewPoolingSequence=True;
   12904:	81 e0       	ldi	r24, 0x01	; 1
   12906:	80 93 5f 02 	sts	0x025F, r24
			   //SendPoolingCommand()
			   if (IsControlPooling==True){
   1290a:	80 91 62 02 	lds	r24, 0x0262
   1290e:	81 30       	cpi	r24, 0x01	; 1
   12910:	a1 f4       	brne	.+40     	; 0x1293a <ScanStandaloneFlow+0x140>
			       IsControlPooling=False;
   12912:	10 92 62 02 	sts	0x0262, r1
				   SendSlaveCommand(PoolCmd,PoolMsg);
   12916:	80 91 85 06 	lds	r24, 0x0685
   1291a:	60 91 b1 0c 	lds	r22, 0x0CB1
   1291e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
   12922:	0b c0       	rjmp	.+22     	; 0x1293a <ScanStandaloneFlow+0x140>
                }
		       break;
          case SC_TOTALIZER:
		       IsTotalizerReceived=True;
   12924:	81 e0       	ldi	r24, 0x01	; 1
   12926:	80 93 8d 02 	sts	0x028D, r24
		       break;
   1292a:	07 c0       	rjmp	.+14     	; 0x1293a <ScanStandaloneFlow+0x140>
		  case SC_POOL_RESTARTED:
		       IsPoolingRestarted=True;
   1292c:	81 e0       	ldi	r24, 0x01	; 1
   1292e:	80 93 61 02 	sts	0x0261, r24
		       break;
   12932:	03 c0       	rjmp	.+6      	; 0x1293a <ScanStandaloneFlow+0x140>
          case SC_SET_PUMP_TYPE:
		       IsSetPumpType=True;
   12934:	81 e0       	ldi	r24, 0x01	; 1
   12936:	80 93 23 01 	sts	0x0123, r24
		       break;
		  }
       IsStandaloneAcknoledge=True;
   1293a:	81 e0       	ldi	r24, 0x01	; 1
   1293c:	80 93 60 02 	sts	0x0260, r24
	  }
}
   12940:	1f 91       	pop	r17
   12942:	0f 91       	pop	r16
   12944:	08 95       	ret

00012946 <__vector_17>:
//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}

ISR(SPI_STC_vect){
   12946:	1f 92       	push	r1
   12948:	0f 92       	push	r0
   1294a:	0f b6       	in	r0, 0x3f	; 63
   1294c:	0f 92       	push	r0
   1294e:	0b b6       	in	r0, 0x3b	; 59
   12950:	0f 92       	push	r0
   12952:	11 24       	eor	r1, r1
   12954:	1f 93       	push	r17
   12956:	2f 93       	push	r18
   12958:	3f 93       	push	r19
   1295a:	4f 93       	push	r20
   1295c:	5f 93       	push	r21
   1295e:	6f 93       	push	r22
   12960:	7f 93       	push	r23
   12962:	8f 93       	push	r24
   12964:	9f 93       	push	r25
   12966:	af 93       	push	r26
   12968:	bf 93       	push	r27
   1296a:	ef 93       	push	r30
   1296c:	ff 93       	push	r31
char dataSPI;
//char Reply=0;
    //uart(0,1,SPDR);
	dataSPI=SPDR;
   1296e:	1f b1       	in	r17, 0x0f	; 15
	ScanRFIDFlow(dataSPI);
   12970:	81 2f       	mov	r24, r17
   12972:	0e 94 23 16 	call	0x2c46	; 0x2c46 <ScanRFIDFlow>
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
   12976:	80 91 00 01 	lds	r24, 0x0100
   1297a:	81 30       	cpi	r24, 0x01	; 1
   1297c:	21 f4       	brne	.+8      	; 0x12986 <__vector_17+0x40>
   1297e:	81 2f       	mov	r24, r17
   12980:	0e 94 bd 41 	call	0x837a	; 0x837a <ScanEDCFlow>
   12984:	05 c0       	rjmp	.+10     	; 0x12990 <__vector_17+0x4a>
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
   12986:	82 30       	cpi	r24, 0x02	; 2
   12988:	19 f4       	brne	.+6      	; 0x12990 <__vector_17+0x4a>
   1298a:	81 2f       	mov	r24, r17
   1298c:	0e 94 fd 93 	call	0x127fa	; 0x127fa <ScanStandaloneFlow>
}
   12990:	ff 91       	pop	r31
   12992:	ef 91       	pop	r30
   12994:	bf 91       	pop	r27
   12996:	af 91       	pop	r26
   12998:	9f 91       	pop	r25
   1299a:	8f 91       	pop	r24
   1299c:	7f 91       	pop	r23
   1299e:	6f 91       	pop	r22
   129a0:	5f 91       	pop	r21
   129a2:	4f 91       	pop	r20
   129a4:	3f 91       	pop	r19
   129a6:	2f 91       	pop	r18
   129a8:	1f 91       	pop	r17
   129aa:	0f 90       	pop	r0
   129ac:	0b be       	out	0x3b, r0	; 59
   129ae:	0f 90       	pop	r0
   129b0:	0f be       	out	0x3f, r0	; 63
   129b2:	0f 90       	pop	r0
   129b4:	1f 90       	pop	r1
   129b6:	18 95       	reti

000129b8 <GetIncomingTransStatus>:
		 IncomingTransaction[iPumpID/8]=iStatus;
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
   129b8:	8f 70       	andi	r24, 0x0F	; 15
	 Result=TS_NONE;
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
   129ba:	e8 2f       	mov	r30, r24
   129bc:	e6 95       	lsr	r30
   129be:	e6 95       	lsr	r30
   129c0:	e6 95       	lsr	r30
   129c2:	f0 e0       	ldi	r31, 0x00	; 0
   129c4:	ee 54       	subi	r30, 0x4E	; 78
   129c6:	f3 4f       	sbci	r31, 0xF3	; 243
   129c8:	20 81       	ld	r18, Z
   129ca:	30 e0       	ldi	r19, 0x00	; 0
   129cc:	87 70       	andi	r24, 0x07	; 7
   129ce:	02 c0       	rjmp	.+4      	; 0x129d4 <GetIncomingTransStatus+0x1c>
   129d0:	35 95       	asr	r19
   129d2:	27 95       	ror	r18
   129d4:	8a 95       	dec	r24
   129d6:	e2 f7       	brpl	.-8      	; 0x129d0 <GetIncomingTransStatus+0x18>
   129d8:	21 30       	cpi	r18, 0x01	; 1
   129da:	31 05       	cpc	r19, r1
   129dc:	29 f0       	breq	.+10     	; 0x129e8 <GetIncomingTransStatus+0x30>
	     Result=TS_NEW;
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
   129de:	21 15       	cp	r18, r1
   129e0:	31 05       	cpc	r19, r1
   129e2:	21 f0       	breq	.+8      	; 0x129ec <GetIncomingTransStatus+0x34>
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
	 Result=TS_NONE;
   129e4:	80 e0       	ldi	r24, 0x00	; 0
   129e6:	08 95       	ret
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
	     Result=TS_NEW;
   129e8:	82 e0       	ldi	r24, 0x02	; 2
   129ea:	08 95       	ret
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
	     Result=TS_OLD;
   129ec:	83 e0       	ldi	r24, 0x03	; 3
	 }
   return Result;
}
   129ee:	08 95       	ret

000129f0 <systemGeniusProtocol>:

void systemGeniusProtocol(){
   129f0:	1f 93       	push	r17
static char stGeniusProtocol=gpInitScan;
static char iPumpID;
	 
	 switch(stGeniusProtocol){
   129f2:	80 91 9d 02 	lds	r24, 0x029D
   129f6:	83 30       	cpi	r24, 0x03	; 3
   129f8:	61 f1       	breq	.+88     	; 0x12a52 <systemGeniusProtocol+0x62>
   129fa:	84 30       	cpi	r24, 0x04	; 4
   129fc:	28 f4       	brcc	.+10     	; 0x12a08 <systemGeniusProtocol+0x18>
   129fe:	81 30       	cpi	r24, 0x01	; 1
   12a00:	81 f0       	breq	.+32     	; 0x12a22 <systemGeniusProtocol+0x32>
   12a02:	82 30       	cpi	r24, 0x02	; 2
   12a04:	c0 f4       	brcc	.+48     	; 0x12a36 <systemGeniusProtocol+0x46>
   12a06:	09 c0       	rjmp	.+18     	; 0x12a1a <systemGeniusProtocol+0x2a>
   12a08:	85 30       	cpi	r24, 0x05	; 5
   12a0a:	09 f4       	brne	.+2      	; 0x12a0e <systemGeniusProtocol+0x1e>
   12a0c:	43 c0       	rjmp	.+134    	; 0x12a94 <systemGeniusProtocol+0xa4>
   12a0e:	85 30       	cpi	r24, 0x05	; 5
   12a10:	a0 f1       	brcs	.+104    	; 0x12a7a <systemGeniusProtocol+0x8a>
   12a12:	86 30       	cpi	r24, 0x06	; 6
   12a14:	09 f0       	breq	.+2      	; 0x12a18 <systemGeniusProtocol+0x28>
   12a16:	52 c0       	rjmp	.+164    	; 0x12abc <systemGeniusProtocol+0xcc>
   12a18:	43 c0       	rjmp	.+134    	; 0x12aa0 <systemGeniusProtocol+0xb0>
	 case gpInitScan:
	      iPumpID=1;
   12a1a:	81 e0       	ldi	r24, 0x01	; 1
   12a1c:	80 93 9c 02 	sts	0x029C, r24
   12a20:	4b c0       	rjmp	.+150    	; 0x12ab8 <systemGeniusProtocol+0xc8>
          stGeniusProtocol=gpScanNewTransaction;
	      break;
	 case gpScanNewTransaction:
	      if (GetIncomingTransStatus(PumpID)==TS_NEW){
   12a22:	80 91 9b 02 	lds	r24, 0x029B
   12a26:	0e 94 dc 94 	call	0x129b8	; 0x129b8 <GetIncomingTransStatus>
   12a2a:	82 30       	cpi	r24, 0x02	; 2
   12a2c:	09 f0       	breq	.+2      	; 0x12a30 <systemGeniusProtocol+0x40>
   12a2e:	46 c0       	rjmp	.+140    	; 0x12abc <systemGeniusProtocol+0xcc>
		      IsTotalizerReceived=False;
   12a30:	10 92 8d 02 	sts	0x028D, r1
   12a34:	41 c0       	rjmp	.+130    	; 0x12ab8 <systemGeniusProtocol+0xc8>
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
   12a36:	80 91 9c 02 	lds	r24, 0x029C
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   12a3a:	95 e0       	ldi	r25, 0x05	; 5
   12a3c:	90 93 85 06 	sts	0x0685, r25
	 PoolMsg=plMsg;
   12a40:	80 93 b1 0c 	sts	0x0CB1, r24
     IsControlPooling=True;
   12a44:	81 e0       	ldi	r24, 0x01	; 1
   12a46:	80 93 62 02 	sts	0x0262, r24
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
		  TimSend=0;
   12a4a:	10 92 56 0d 	sts	0x0D56, r1
		  stGeniusProtocol=gpWaitRequestedTotalizer;
   12a4e:	83 e0       	ldi	r24, 0x03	; 3
   12a50:	33 c0       	rjmp	.+102    	; 0x12ab8 <systemGeniusProtocol+0xc8>
	      break;
     case gpWaitRequestedTotalizer:
	      if ((IsTotalizerReceived==True)&&(AcknoledgePump==iPumpID)){
   12a52:	80 91 8d 02 	lds	r24, 0x028D
   12a56:	81 30       	cpi	r24, 0x01	; 1
   12a58:	59 f4       	brne	.+22     	; 0x12a70 <systemGeniusProtocol+0x80>
   12a5a:	90 91 ca 0c 	lds	r25, 0x0CCA
   12a5e:	80 91 9c 02 	lds	r24, 0x029C
   12a62:	98 17       	cp	r25, r24
   12a64:	29 f4       	brne	.+10     	; 0x12a70 <systemGeniusProtocol+0x80>
		      IsTotalizerReceived=False;
   12a66:	10 92 8d 02 	sts	0x028D, r1
			  stGeniusProtocol=gpSendTransactionData;
   12a6a:	84 e0       	ldi	r24, 0x04	; 4
   12a6c:	80 93 9d 02 	sts	0x029D, r24
		  }
	      if (TimSend>TIM_SEND*2)stGeniusProtocol=gpNextPumpScan;
   12a70:	80 91 56 0d 	lds	r24, 0x0D56
   12a74:	85 31       	cpi	r24, 0x15	; 21
   12a76:	10 f1       	brcs	.+68     	; 0x12abc <systemGeniusProtocol+0xcc>
   12a78:	11 c0       	rjmp	.+34     	; 0x12a9c <systemGeniusProtocol+0xac>
	      break;
     case gpSendTransactionData:
          GeniusSendLastTransaction(iPumpID);
   12a7a:	80 91 9c 02 	lds	r24, 0x029C
   12a7e:	0e 94 cb 8f 	call	0x11f96	; 0x11f96 <GeniusSendLastTransaction>
		  SetIncomingTransStatus(iPumpID,TS_OLD);
   12a82:	80 91 9c 02 	lds	r24, 0x029C
   12a86:	63 e0       	ldi	r22, 0x03	; 3
   12a88:	0e 94 02 92 	call	0x12404	; 0x12404 <SetIncomingTransStatus>
		  
		  TimSend=0;
   12a8c:	10 92 56 0d 	sts	0x0D56, r1
          stGeniusProtocol=gpDelayNextPumpScan;
   12a90:	85 e0       	ldi	r24, 0x05	; 5
   12a92:	12 c0       	rjmp	.+36     	; 0x12ab8 <systemGeniusProtocol+0xc8>
	      break;
     case gpDelayNextPumpScan:
          if (TimSend>1)stGeniusProtocol=gpNextPumpScan;
   12a94:	80 91 56 0d 	lds	r24, 0x0D56
   12a98:	82 30       	cpi	r24, 0x02	; 2
   12a9a:	80 f0       	brcs	.+32     	; 0x12abc <systemGeniusProtocol+0xcc>
   12a9c:	86 e0       	ldi	r24, 0x06	; 6
   12a9e:	0c c0       	rjmp	.+24     	; 0x12ab8 <systemGeniusProtocol+0xc8>
	      break;
     case gpNextPumpScan:
          if (iPumpID<=eeprom_read_byte(&DefPoolingPumpMax)){
   12aa0:	10 91 9c 02 	lds	r17, 0x029C
   12aa4:	84 e4       	ldi	r24, 0x44	; 68
   12aa6:	91 e0       	ldi	r25, 0x01	; 1
   12aa8:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   12aac:	81 17       	cp	r24, r17
   12aae:	30 f0       	brcs	.+12     	; 0x12abc <systemGeniusProtocol+0xcc>
		      iPumpID++;
   12ab0:	1f 5f       	subi	r17, 0xFF	; 255
   12ab2:	10 93 9c 02 	sts	0x029C, r17
              stGeniusProtocol=gpScanNewTransaction;
   12ab6:	81 e0       	ldi	r24, 0x01	; 1
   12ab8:	80 93 9d 02 	sts	0x029D, r24
		  }
	      break;
	 }
}
   12abc:	1f 91       	pop	r17
   12abe:	08 95       	ret

00012ac0 <SetDispenser>:

void SetDispenser(char DispType){
   12ac0:	ef 92       	push	r14
   12ac2:	ff 92       	push	r15
   12ac4:	0f 93       	push	r16
   12ac6:	1f 93       	push	r17
   12ac8:	df 93       	push	r29
   12aca:	cf 93       	push	r28
   12acc:	00 d0       	rcall	.+0      	; 0x12ace <SetDispenser+0xe>
   12ace:	00 d0       	rcall	.+0      	; 0x12ad0 <SetDispenser+0x10>
   12ad0:	0f 92       	push	r0
   12ad2:	cd b7       	in	r28, 0x3d	; 61
   12ad4:	de b7       	in	r29, 0x3e	; 62
   12ad6:	08 2f       	mov	r16, r24
     char CurrentDispenser;
	 char i,DecimalSetting[5];
     CurrentDispenser=eeprom_read_byte(&DefDispenserBrand);
   12ad8:	87 e3       	ldi	r24, 0x37	; 55
   12ada:	91 e0       	ldi	r25, 0x01	; 1
   12adc:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
	 if (CurrentDispenser!=DispType){
   12ae0:	80 17       	cp	r24, r16
   12ae2:	29 f0       	breq	.+10     	; 0x12aee <SetDispenser+0x2e>
	     eeprom_write_byte(&DefDispenserBrand,DispType);
   12ae4:	87 e3       	ldi	r24, 0x37	; 55
   12ae6:	91 e0       	ldi	r25, 0x01	; 1
   12ae8:	60 2f       	mov	r22, r16
   12aea:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 }
     //Apply Setting for Pump respectively
	 switch(DispType){
   12aee:	01 30       	cpi	r16, 0x01	; 1
   12af0:	19 f0       	breq	.+6      	; 0x12af8 <SetDispenser+0x38>
   12af2:	02 30       	cpi	r16, 0x02	; 2
   12af4:	41 f4       	brne	.+16     	; 0x12b06 <SetDispenser+0x46>
   12af6:	0e c0       	rjmp	.+28     	; 0x12b14 <SetDispenser+0x54>
	 case ST_GILBARCO:
          DecimalSetting[0]=0;//Price
   12af8:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=3;//Volume
   12afa:	83 e0       	ldi	r24, 0x03	; 3
   12afc:	8a 83       	std	Y+2, r24	; 0x02
		  DecimalSetting[2]=0;//Money
   12afe:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
   12b00:	82 e0       	ldi	r24, 0x02	; 2
   12b02:	8c 83       	std	Y+4, r24	; 0x04
		  DecimalSetting[4]=0;//TotalMoney 
   12b04:	1d 82       	std	Y+5, r1	; 0x05
	      break;
   12b06:	09 e3       	ldi	r16, 0x39	; 57
   12b08:	10 e0       	ldi	r17, 0x00	; 0
   12b0a:	7e 01       	movw	r14, r28
   12b0c:	08 94       	sec
   12b0e:	e1 1c       	adc	r14, r1
   12b10:	f1 1c       	adc	r15, r1
   12b12:	06 c0       	rjmp	.+12     	; 0x12b20 <SetDispenser+0x60>
	 case ST_WAYNE_DART:
          DecimalSetting[0]=0;//Price
   12b14:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=2;//Volume
   12b16:	0a 83       	std	Y+2, r16	; 0x02
		  DecimalSetting[2]=0;//Money
   12b18:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
   12b1a:	0c 83       	std	Y+4, r16	; 0x04
		  DecimalSetting[4]=2;//TotalMoney 
   12b1c:	0d 83       	std	Y+5, r16	; 0x05
	      break;	 
   12b1e:	f3 cf       	rjmp	.-26     	; 0x12b06 <SetDispenser+0x46>
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
   12b20:	c8 01       	movw	r24, r16
   12b22:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   12b26:	f7 01       	movw	r30, r14
   12b28:	61 91       	ld	r22, Z+
   12b2a:	7f 01       	movw	r14, r30
   12b2c:	86 17       	cp	r24, r22
   12b2e:	19 f0       	breq	.+6      	; 0x12b36 <SetDispenser+0x76>
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
   12b30:	c8 01       	movw	r24, r16
   12b32:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
   12b36:	0f 5f       	subi	r16, 0xFF	; 255
   12b38:	1f 4f       	sbci	r17, 0xFF	; 255
		  DecimalSetting[3]=2;//TotalVolume
		  DecimalSetting[4]=2;//TotalMoney 
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
   12b3a:	f0 e0       	ldi	r31, 0x00	; 0
   12b3c:	0e 33       	cpi	r16, 0x3E	; 62
   12b3e:	1f 07       	cpc	r17, r31
   12b40:	79 f7       	brne	.-34     	; 0x12b20 <SetDispenser+0x60>
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}
   12b42:	0f 90       	pop	r0
   12b44:	0f 90       	pop	r0
   12b46:	0f 90       	pop	r0
   12b48:	0f 90       	pop	r0
   12b4a:	0f 90       	pop	r0
   12b4c:	cf 91       	pop	r28
   12b4e:	df 91       	pop	r29
   12b50:	1f 91       	pop	r17
   12b52:	0f 91       	pop	r16
   12b54:	ff 90       	pop	r15
   12b56:	ef 90       	pop	r14
   12b58:	08 95       	ret

00012b5a <FMenuPumpType>:





void FMenuPumpType(){
   12b5a:	cf 92       	push	r12
   12b5c:	df 92       	push	r13
   12b5e:	ef 92       	push	r14
   12b60:	ff 92       	push	r15
   12b62:	0f 93       	push	r16
   12b64:	1f 93       	push	r17
   12b66:	df 93       	push	r29
   12b68:	cf 93       	push	r28
   12b6a:	cd b7       	in	r28, 0x3d	; 61
   12b6c:	de b7       	in	r29, 0x3e	; 62
   12b6e:	a8 97       	sbiw	r28, 0x28	; 40
   12b70:	0f b6       	in	r0, 0x3f	; 63
   12b72:	f8 94       	cli
   12b74:	de bf       	out	0x3e, r29	; 62
   12b76:	0f be       	out	0x3f, r0	; 63
   12b78:	cd bf       	out	0x3d, r28	; 61
     stPumpType=ptInitMenu;
	 IsRunPumpType=True;
	 while(IsRunPumpType==True){
		  switch(stPumpType){
		  case ptInitMenu:
		       lcd_clear();
   12b7a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
			   lcd_printf(1,1,PSTR("-Dispenser Brand-"));
   12b7e:	81 e0       	ldi	r24, 0x01	; 1
   12b80:	61 e0       	ldi	r22, 0x01	; 1
   12b82:	49 e6       	ldi	r20, 0x69	; 105
   12b84:	5e e0       	ldi	r21, 0x0E	; 14
   12b86:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   IdxType=eeprom_read_byte(&DefDispenserBrand);
   12b8a:	87 e3       	ldi	r24, 0x37	; 55
   12b8c:	91 e0       	ldi	r25, 0x01	; 1
   12b8e:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
			   //Brand Selection
			   if (IdxType>=3) IdxType=0;
   12b92:	83 30       	cpi	r24, 0x03	; 3
   12b94:	08 f0       	brcs	.+2      	; 0x12b98 <FMenuPumpType+0x3e>
   12b96:	80 e0       	ldi	r24, 0x00	; 0
               strcpy_P(DispenserBrandName,(PGM_P)pgm_read_word(&(DefListDispenserName[IdxType])));
   12b98:	e8 2e       	mov	r14, r24
   12b9a:	ff 24       	eor	r15, r15
   12b9c:	f7 01       	movw	r30, r14
   12b9e:	ee 0f       	add	r30, r30
   12ba0:	ff 1f       	adc	r31, r31
   12ba2:	e7 53       	subi	r30, 0x37	; 55
   12ba4:	fd 4f       	sbci	r31, 0xFD	; 253
   12ba6:	25 91       	lpm	r18, Z+
   12ba8:	34 91       	lpm	r19, Z+
   12baa:	65 e1       	ldi	r22, 0x15	; 21
   12bac:	c6 2e       	mov	r12, r22
   12bae:	d1 2c       	mov	r13, r1
   12bb0:	cc 0e       	add	r12, r28
   12bb2:	dd 1e       	adc	r13, r29
   12bb4:	c6 01       	movw	r24, r12
   12bb6:	b9 01       	movw	r22, r18
   12bb8:	0e 94 0c a6 	call	0x14c18	; 0x14c18 <strcpy_P>
			   sprintf_P(lcdteks,PSTR("%d.%s"),IdxType+1,DispenserBrandName);
   12bbc:	8d b7       	in	r24, 0x3d	; 61
   12bbe:	9e b7       	in	r25, 0x3e	; 62
   12bc0:	08 97       	sbiw	r24, 0x08	; 8
   12bc2:	0f b6       	in	r0, 0x3f	; 63
   12bc4:	f8 94       	cli
   12bc6:	9e bf       	out	0x3e, r25	; 62
   12bc8:	0f be       	out	0x3f, r0	; 63
   12bca:	8d bf       	out	0x3d, r24	; 61
   12bcc:	ed b7       	in	r30, 0x3d	; 61
   12bce:	fe b7       	in	r31, 0x3e	; 62
   12bd0:	31 96       	adiw	r30, 0x01	; 1
   12bd2:	8e 01       	movw	r16, r28
   12bd4:	0f 5f       	subi	r16, 0xFF	; 255
   12bd6:	1f 4f       	sbci	r17, 0xFF	; 255
   12bd8:	ad b7       	in	r26, 0x3d	; 61
   12bda:	be b7       	in	r27, 0x3e	; 62
   12bdc:	12 96       	adiw	r26, 0x02	; 2
   12bde:	1c 93       	st	X, r17
   12be0:	0e 93       	st	-X, r16
   12be2:	11 97       	sbiw	r26, 0x01	; 1
   12be4:	83 e6       	ldi	r24, 0x63	; 99
   12be6:	9e e0       	ldi	r25, 0x0E	; 14
   12be8:	93 83       	std	Z+3, r25	; 0x03
   12bea:	82 83       	std	Z+2, r24	; 0x02
   12bec:	08 94       	sec
   12bee:	e1 1c       	adc	r14, r1
   12bf0:	f1 1c       	adc	r15, r1
   12bf2:	f5 82       	std	Z+5, r15	; 0x05
   12bf4:	e4 82       	std	Z+4, r14	; 0x04
   12bf6:	d7 82       	std	Z+7, r13	; 0x07
   12bf8:	c6 82       	std	Z+6, r12	; 0x06
   12bfa:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			   lcd_print(2,1,lcdteks);
   12bfe:	8d b7       	in	r24, 0x3d	; 61
   12c00:	9e b7       	in	r25, 0x3e	; 62
   12c02:	08 96       	adiw	r24, 0x08	; 8
   12c04:	0f b6       	in	r0, 0x3f	; 63
   12c06:	f8 94       	cli
   12c08:	9e bf       	out	0x3e, r25	; 62
   12c0a:	0f be       	out	0x3f, r0	; 63
   12c0c:	8d bf       	out	0x3d, r24	; 61
   12c0e:	82 e0       	ldi	r24, 0x02	; 2
   12c10:	61 e0       	ldi	r22, 0x01	; 1
   12c12:	a8 01       	movw	r20, r16
   12c14:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Exit  [#]Change "));
   12c18:	84 e0       	ldi	r24, 0x04	; 4
   12c1a:	61 e0       	ldi	r22, 0x01	; 1
   12c1c:	4f e4       	ldi	r20, 0x4F	; 79
   12c1e:	5e e0       	ldi	r21, 0x0E	; 14
   12c20:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
			   if (IFType==IT_STANDALONE)
   12c24:	80 91 00 01 	lds	r24, 0x0100
   12c28:	82 30       	cpi	r24, 0x02	; 2
   12c2a:	21 f4       	brne	.+8      	; 0x12c34 <FMenuPumpType+0xda>
			       SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
   12c2c:	8f e1       	ldi	r24, 0x1F	; 31
   12c2e:	60 e0       	ldi	r22, 0x00	; 0
   12c30:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
			   stPumpType=ptSelectBrand;
	 		   break;
          case ptSelectBrand:
		       KeyPressed = _key_scan(1);
   12c34:	81 e0       	ldi	r24, 0x01	; 1
   12c36:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		       KeyChar    = _key_btn(KeyPressed);
   12c3a:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>

			   if (KeyChar=='#'){
   12c3e:	83 32       	cpi	r24, 0x23	; 35
   12c40:	11 f5       	brne	.+68     	; 0x12c86 <FMenuPumpType+0x12c>
			       DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   12c42:	87 e3       	ldi	r24, 0x37	; 55
   12c44:	91 e0       	ldi	r25, 0x01	; 1
   12c46:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
				   if (DispenserBrand<ST_WAYNE_DART)
   12c4a:	82 30       	cpi	r24, 0x02	; 2
   12c4c:	20 f4       	brcc	.+8      	; 0x12c56 <FMenuPumpType+0xfc>
				        DispenserBrand++;
   12c4e:	8f 5f       	subi	r24, 0xFF	; 255
   12c50:	80 93 3c 02 	sts	0x023C, r24
   12c54:	02 c0       	rjmp	.+4      	; 0x12c5a <FMenuPumpType+0x100>
				   else DispenserBrand=ST_NONE;
   12c56:	10 92 3c 02 	sts	0x023C, r1
                   //Apply DecimalSetting  
				   SetDispenser(DispenserBrand);
   12c5a:	80 91 3c 02 	lds	r24, 0x023C
   12c5e:	0e 94 60 95 	call	0x12ac0	; 0x12ac0 <SetDispenser>
			       eeprom_write_byte(&DefDispenserBrand,DispenserBrand);
   12c62:	87 e3       	ldi	r24, 0x37	; 55
   12c64:	91 e0       	ldi	r25, 0x01	; 1
   12c66:	60 91 3c 02 	lds	r22, 0x023C
   12c6a:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
				   //SendPoolingCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
				   SendSlaveCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
   12c6e:	87 e3       	ldi	r24, 0x37	; 55
   12c70:	91 e0       	ldi	r25, 0x01	; 1
   12c72:	0e 94 74 a8 	call	0x150e8	; 0x150e8 <__eerd_byte_m128>
   12c76:	68 2f       	mov	r22, r24
   12c78:	8c e1       	ldi	r24, 0x1C	; 28
   12c7a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
				   IsSetPumpType=True;//False;
   12c7e:	81 e0       	ldi	r24, 0x01	; 1
   12c80:	80 93 23 01 	sts	0x0123, r24
   12c84:	0b c0       	rjmp	.+22     	; 0x12c9c <FMenuPumpType+0x142>
			       stPumpType=ptUpdated;			   
			   }else
			   if (KeyChar=='*'){
   12c86:	8a 32       	cpi	r24, 0x2A	; 42
   12c88:	a9 f6       	brne	.-86     	; 0x12c34 <FMenuPumpType+0xda>
			       IsRunPumpType=False;
				   if (IFType==IT_STANDALONE)SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
   12c8a:	80 91 00 01 	lds	r24, 0x0100
   12c8e:	82 30       	cpi	r24, 0x02	; 2
   12c90:	51 f4       	brne	.+20     	; 0x12ca6 <FMenuPumpType+0x14c>
   12c92:	80 e2       	ldi	r24, 0x20	; 32
   12c94:	60 e0       	ldi	r22, 0x00	; 0
   12c96:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
   12c9a:	05 c0       	rjmp	.+10     	; 0x12ca6 <FMenuPumpType+0x14c>
			   }
		       break;
          case ptUpdated:
		       if (IsSetPumpType==True){
   12c9c:	80 91 23 01 	lds	r24, 0x0123
   12ca0:	81 30       	cpi	r24, 0x01	; 1
   12ca2:	e1 f7       	brne	.-8      	; 0x12c9c <FMenuPumpType+0x142>
   12ca4:	6a cf       	rjmp	.-300    	; 0x12b7a <FMenuPumpType+0x20>
			       stPumpType=ptInitMenu;
			   }
		       break;		         
	      }
	 }     
}
   12ca6:	a8 96       	adiw	r28, 0x28	; 40
   12ca8:	0f b6       	in	r0, 0x3f	; 63
   12caa:	f8 94       	cli
   12cac:	de bf       	out	0x3e, r29	; 62
   12cae:	0f be       	out	0x3f, r0	; 63
   12cb0:	cd bf       	out	0x3d, r28	; 61
   12cb2:	cf 91       	pop	r28
   12cb4:	df 91       	pop	r29
   12cb6:	1f 91       	pop	r17
   12cb8:	0f 91       	pop	r16
   12cba:	ff 90       	pop	r15
   12cbc:	ef 90       	pop	r14
   12cbe:	df 90       	pop	r13
   12cc0:	cf 90       	pop	r12
   12cc2:	08 95       	ret

00012cc4 <MasterReset>:
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}

void MasterReset(){
   12cc4:	bf 92       	push	r11
   12cc6:	cf 92       	push	r12
   12cc8:	df 92       	push	r13
   12cca:	ef 92       	push	r14
   12ccc:	ff 92       	push	r15
   12cce:	0f 93       	push	r16
   12cd0:	1f 93       	push	r17
   12cd2:	df 93       	push	r29
   12cd4:	cf 93       	push	r28
   12cd6:	cd b7       	in	r28, 0x3d	; 61
   12cd8:	de b7       	in	r29, 0x3e	; 62
   12cda:	ec 97       	sbiw	r28, 0x3c	; 60
   12cdc:	0f b6       	in	r0, 0x3f	; 63
   12cde:	f8 94       	cli
   12ce0:	de bf       	out	0x3e, r29	; 62
   12ce2:	0f be       	out	0x3f, r0	; 63
   12ce4:	cd bf       	out	0x3d, r28	; 61
     char strEEP[50];
	 char xArray[10];
     //Restore All Stored EEPROM data to the Default
     sprintf_P(strEEP,PSTR("  "));
   12ce6:	00 d0       	rcall	.+0      	; 0x12ce8 <MasterReset+0x24>
   12ce8:	00 d0       	rcall	.+0      	; 0x12cea <MasterReset+0x26>
   12cea:	fb e0       	ldi	r31, 0x0B	; 11
   12cec:	ef 2e       	mov	r14, r31
   12cee:	f1 2c       	mov	r15, r1
   12cf0:	ec 0e       	add	r14, r28
   12cf2:	fd 1e       	adc	r15, r29
   12cf4:	ed b7       	in	r30, 0x3d	; 61
   12cf6:	fe b7       	in	r31, 0x3e	; 62
   12cf8:	f2 82       	std	Z+2, r15	; 0x02
   12cfa:	e1 82       	std	Z+1, r14	; 0x01
   12cfc:	8c ed       	ldi	r24, 0xDC	; 220
   12cfe:	94 e0       	ldi	r25, 0x04	; 4
   12d00:	94 83       	std	Z+4, r25	; 0x04
   12d02:	83 83       	std	Z+3, r24	; 0x03
   12d04:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefOperatorName, sizeof(DefOperatorName));
   12d08:	0f 90       	pop	r0
   12d0a:	0f 90       	pop	r0
   12d0c:	0f 90       	pop	r0
   12d0e:	0f 90       	pop	r0
   12d10:	c7 01       	movw	r24, r14
   12d12:	65 e1       	ldi	r22, 0x15	; 21
   12d14:	70 e0       	ldi	r23, 0x00	; 0
   12d16:	43 e1       	ldi	r20, 0x13	; 19
   12d18:	50 e0       	ldi	r21, 0x00	; 0
   12d1a:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=70; 
   12d1e:	e0 ec       	ldi	r30, 0xC0	; 192
   12d20:	be 2e       	mov	r11, r30
   12d22:	b9 82       	std	Y+1, r11	; 0x01
   12d24:	18 ea       	ldi	r17, 0xA8	; 168
   12d26:	1a 83       	std	Y+2, r17	; 0x02
   12d28:	00 e1       	ldi	r16, 0x10	; 16
   12d2a:	0b 83       	std	Y+3, r16	; 0x03
   12d2c:	86 e4       	ldi	r24, 0x46	; 70
   12d2e:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefClientIP, 4);
   12d30:	6e 01       	movw	r12, r28
   12d32:	08 94       	sec
   12d34:	c1 1c       	adc	r12, r1
   12d36:	d1 1c       	adc	r13, r1
   12d38:	c6 01       	movw	r24, r12
   12d3a:	68 e2       	ldi	r22, 0x28	; 40
   12d3c:	70 e0       	ldi	r23, 0x00	; 0
   12d3e:	44 e0       	ldi	r20, 0x04	; 4
   12d40:	50 e0       	ldi	r21, 0x00	; 0
   12d42:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=180; 
   12d46:	b9 82       	std	Y+1, r11	; 0x01
   12d48:	1a 83       	std	Y+2, r17	; 0x02
   12d4a:	0b 83       	std	Y+3, r16	; 0x03
   12d4c:	84 eb       	ldi	r24, 0xB4	; 180
   12d4e:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefServerIP, 4);
   12d50:	c6 01       	movw	r24, r12
   12d52:	6c e2       	ldi	r22, 0x2C	; 44
   12d54:	70 e0       	ldi	r23, 0x00	; 0
   12d56:	44 e0       	ldi	r20, 0x04	; 4
   12d58:	50 e0       	ldi	r21, 0x00	; 0
   12d5a:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

     eeprom_write_byte(&DefPrinterType,PT_CUSTOM_TG02);
   12d5e:	80 e3       	ldi	r24, 0x30	; 48
   12d60:	90 e0       	ldi	r25, 0x00	; 0
   12d62:	61 e0       	ldi	r22, 0x01	; 1
   12d64:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 eeprom_write_byte(&DefPrintScrollEnd,7);
   12d68:	81 e3       	ldi	r24, 0x31	; 49
   12d6a:	90 e0       	ldi	r25, 0x00	; 0
   12d6c:	67 e0       	ldi	r22, 0x07	; 7
   12d6e:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintScrollSpace,5);
   12d72:	82 e3       	ldi	r24, 0x32	; 50
   12d74:	90 e0       	ldi	r25, 0x00	; 0
   12d76:	65 e0       	ldi	r22, 0x05	; 5
   12d78:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintAutoCut,2);
   12d7c:	83 e3       	ldi	r24, 0x33	; 51
   12d7e:	90 e0       	ldi	r25, 0x00	; 0
   12d80:	62 e0       	ldi	r22, 0x02	; 2
   12d82:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintLogo,0);
   12d86:	84 e3       	ldi	r24, 0x34	; 52
   12d88:	90 e0       	ldi	r25, 0x00	; 0
   12d8a:	60 e0       	ldi	r22, 0x00	; 0
   12d8c:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintSize,3);
   12d90:	85 e3       	ldi	r24, 0x35	; 53
   12d92:	90 e0       	ldi	r25, 0x00	; 0
   12d94:	63 e0       	ldi	r22, 0x03	; 3
   12d96:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 eeprom_write_byte(&DefConnectionHost,0);
   12d9a:	86 e3       	ldi	r24, 0x36	; 54
   12d9c:	90 e0       	ldi	r25, 0x00	; 0
   12d9e:	60 e0       	ldi	r22, 0x00	; 0
   12da0:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefShowDateTime,1);
   12da4:	87 e3       	ldi	r24, 0x37	; 55
   12da6:	90 e0       	ldi	r25, 0x00	; 0
   12da8:	61 e0       	ldi	r22, 0x01	; 1
   12daa:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefNotifScreen,1);
   12dae:	88 e3       	ldi	r24, 0x38	; 56
   12db0:	90 e0       	ldi	r25, 0x00	; 0
   12db2:	61 e0       	ldi	r22, 0x01	; 1
   12db4:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 eeprom_write_byte(&DefDecimalPrice,0);
   12db8:	89 e3       	ldi	r24, 0x39	; 57
   12dba:	90 e0       	ldi	r25, 0x00	; 0
   12dbc:	60 e0       	ldi	r22, 0x00	; 0
   12dbe:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalVolume,3);
   12dc2:	8a e3       	ldi	r24, 0x3A	; 58
   12dc4:	90 e0       	ldi	r25, 0x00	; 0
   12dc6:	63 e0       	ldi	r22, 0x03	; 3
   12dc8:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMoney,0);
   12dcc:	8b e3       	ldi	r24, 0x3B	; 59
   12dce:	90 e0       	ldi	r25, 0x00	; 0
   12dd0:	60 e0       	ldi	r22, 0x00	; 0
   12dd2:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalVolume,2);
   12dd6:	8c e3       	ldi	r24, 0x3C	; 60
   12dd8:	90 e0       	ldi	r25, 0x00	; 0
   12dda:	62 e0       	ldi	r22, 0x02	; 2
   12ddc:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalMoney,0);
   12de0:	8d e3       	ldi	r24, 0x3D	; 61
   12de2:	90 e0       	ldi	r25, 0x00	; 0
   12de4:	60 e0       	ldi	r22, 0x00	; 0
   12de6:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMark,',');
   12dea:	8e e3       	ldi	r24, 0x3E	; 62
   12dec:	90 e0       	ldi	r25, 0x00	; 0
   12dee:	6c e2       	ldi	r22, 0x2C	; 44
   12df0:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefCurrencyMark,'.');
   12df4:	8f e3       	ldi	r24, 0x3F	; 63
   12df6:	90 e0       	ldi	r25, 0x00	; 0
   12df8:	6e e2       	ldi	r22, 0x2E	; 46
   12dfa:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 xArray[0]=',';	 xArray[1]='.'; 	 xArray[2]=' ';	 xArray[3]='/';  xArray[4]='-'; 
   12dfe:	8c e2       	ldi	r24, 0x2C	; 44
   12e00:	89 83       	std	Y+1, r24	; 0x01
   12e02:	8e e2       	ldi	r24, 0x2E	; 46
   12e04:	8a 83       	std	Y+2, r24	; 0x02
   12e06:	80 e2       	ldi	r24, 0x20	; 32
   12e08:	8b 83       	std	Y+3, r24	; 0x03
   12e0a:	8f e2       	ldi	r24, 0x2F	; 47
   12e0c:	8c 83       	std	Y+4, r24	; 0x04
   12e0e:	8d e2       	ldi	r24, 0x2D	; 45
   12e10:	8d 83       	std	Y+5, r24	; 0x05
	 eeprom_write_block((const void*) &xArray, (void*) &DefMarkMap, 5);
   12e12:	c6 01       	movw	r24, r12
   12e14:	60 e4       	ldi	r22, 0x40	; 64
   12e16:	70 e0       	ldi	r23, 0x00	; 0
   12e18:	45 e0       	ldi	r20, 0x05	; 5
   12e1a:	50 e0       	ldi	r21, 0x00	; 0
   12e1c:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; xArray[6]=0;	 	 
   12e20:	bb 24       	eor	r11, r11
   12e22:	b3 94       	inc	r11
   12e24:	b9 82       	std	Y+1, r11	; 0x01
   12e26:	02 e0       	ldi	r16, 0x02	; 2
   12e28:	0a 83       	std	Y+2, r16	; 0x02
   12e2a:	1b 82       	std	Y+3, r1	; 0x03
   12e2c:	1c 82       	std	Y+4, r1	; 0x04
   12e2e:	1d 82       	std	Y+5, r1	; 0x05
   12e30:	1e 82       	std	Y+6, r1	; 0x06
   12e32:	1f 82       	std	Y+7, r1	; 0x07
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpMap, 8);
   12e34:	c6 01       	movw	r24, r12
   12e36:	65 e4       	ldi	r22, 0x45	; 69
   12e38:	70 e0       	ldi	r23, 0x00	; 0
   12e3a:	48 e0       	ldi	r20, 0x08	; 8
   12e3c:	50 e0       	ldi	r21, 0x00	; 0
   12e3e:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpLabel, 8);
   12e42:	c6 01       	movw	r24, r12
   12e44:	6d e4       	ldi	r22, 0x4D	; 77
   12e46:	70 e0       	ldi	r23, 0x00	; 0
   12e48:	48 e0       	ldi	r20, 0x08	; 8
   12e4a:	50 e0       	ldi	r21, 0x00	; 0
   12e4c:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; 
   12e50:	b9 82       	std	Y+1, r11	; 0x01
   12e52:	0a 83       	std	Y+2, r16	; 0x02
   12e54:	1b 82       	std	Y+3, r1	; 0x03
   12e56:	1c 82       	std	Y+4, r1	; 0x04
   12e58:	1d 82       	std	Y+5, r1	; 0x05
   12e5a:	1e 82       	std	Y+6, r1	; 0x06
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[0], 6);
   12e5c:	05 e5       	ldi	r16, 0x55	; 85
   12e5e:	10 e0       	ldi	r17, 0x00	; 0
   12e60:	c6 01       	movw	r24, r12
   12e62:	b8 01       	movw	r22, r16
   12e64:	46 e0       	ldi	r20, 0x06	; 6
   12e66:	50 e0       	ldi	r21, 0x00	; 0
   12e68:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[1], 6);
   12e6c:	b8 01       	movw	r22, r16
   12e6e:	6a 5f       	subi	r22, 0xFA	; 250
   12e70:	7f 4f       	sbci	r23, 0xFF	; 255
   12e72:	c6 01       	movw	r24, r12
   12e74:	46 e0       	ldi	r20, 0x06	; 6
   12e76:	50 e0       	ldi	r21, 0x00	; 0
   12e78:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("6500"));
   12e7c:	00 d0       	rcall	.+0      	; 0x12e7e <MasterReset+0x1ba>
   12e7e:	00 d0       	rcall	.+0      	; 0x12e80 <MasterReset+0x1bc>
   12e80:	ed b7       	in	r30, 0x3d	; 61
   12e82:	fe b7       	in	r31, 0x3e	; 62
   12e84:	f2 82       	std	Z+2, r15	; 0x02
   12e86:	e1 82       	std	Z+1, r14	; 0x01
   12e88:	87 ed       	ldi	r24, 0xD7	; 215
   12e8a:	94 e0       	ldi	r25, 0x04	; 4
   12e8c:	94 83       	std	Z+4, r25	; 0x04
   12e8e:	83 83       	std	Z+3, r24	; 0x03
   12e90:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[0], sizeof(DefProductPrice[0]));
   12e94:	0f 90       	pop	r0
   12e96:	0f 90       	pop	r0
   12e98:	0f 90       	pop	r0
   12e9a:	0f 90       	pop	r0
   12e9c:	05 e8       	ldi	r16, 0x85	; 133
   12e9e:	10 e0       	ldi	r17, 0x00	; 0
   12ea0:	c7 01       	movw	r24, r14
   12ea2:	b8 01       	movw	r22, r16
   12ea4:	49 e0       	ldi	r20, 0x09	; 9
   12ea6:	50 e0       	ldi	r21, 0x00	; 0
   12ea8:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("7250"));
   12eac:	00 d0       	rcall	.+0      	; 0x12eae <MasterReset+0x1ea>
   12eae:	00 d0       	rcall	.+0      	; 0x12eb0 <MasterReset+0x1ec>
   12eb0:	ed b7       	in	r30, 0x3d	; 61
   12eb2:	fe b7       	in	r31, 0x3e	; 62
   12eb4:	f2 82       	std	Z+2, r15	; 0x02
   12eb6:	e1 82       	std	Z+1, r14	; 0x01
   12eb8:	82 ed       	ldi	r24, 0xD2	; 210
   12eba:	94 e0       	ldi	r25, 0x04	; 4
   12ebc:	94 83       	std	Z+4, r25	; 0x04
   12ebe:	83 83       	std	Z+3, r24	; 0x03
   12ec0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[1], sizeof(DefProductPrice[1]));
   12ec4:	0f 90       	pop	r0
   12ec6:	0f 90       	pop	r0
   12ec8:	0f 90       	pop	r0
   12eca:	0f 90       	pop	r0
   12ecc:	b8 01       	movw	r22, r16
   12ece:	67 5f       	subi	r22, 0xF7	; 247
   12ed0:	7f 4f       	sbci	r23, 0xFF	; 255
   12ed2:	c7 01       	movw	r24, r14
   12ed4:	49 e0       	ldi	r20, 0x09	; 9
   12ed6:	50 e0       	ldi	r21, 0x00	; 0
   12ed8:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("4500"));
   12edc:	00 d0       	rcall	.+0      	; 0x12ede <MasterReset+0x21a>
   12ede:	00 d0       	rcall	.+0      	; 0x12ee0 <MasterReset+0x21c>
   12ee0:	ed b7       	in	r30, 0x3d	; 61
   12ee2:	fe b7       	in	r31, 0x3e	; 62
   12ee4:	f2 82       	std	Z+2, r15	; 0x02
   12ee6:	e1 82       	std	Z+1, r14	; 0x01
   12ee8:	8d ec       	ldi	r24, 0xCD	; 205
   12eea:	94 e0       	ldi	r25, 0x04	; 4
   12eec:	94 83       	std	Z+4, r25	; 0x04
   12eee:	83 83       	std	Z+3, r24	; 0x03
   12ef0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[2], sizeof(DefProductPrice[2]));
   12ef4:	0f 90       	pop	r0
   12ef6:	0f 90       	pop	r0
   12ef8:	0f 90       	pop	r0
   12efa:	0f 90       	pop	r0
   12efc:	b8 01       	movw	r22, r16
   12efe:	6e 5e       	subi	r22, 0xEE	; 238
   12f00:	7f 4f       	sbci	r23, 0xFF	; 255
   12f02:	c7 01       	movw	r24, r14
   12f04:	49 e0       	ldi	r20, 0x09	; 9
   12f06:	50 e0       	ldi	r21, 0x00	; 0
   12f08:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
   12f0c:	00 d0       	rcall	.+0      	; 0x12f0e <MasterReset+0x24a>
   12f0e:	00 d0       	rcall	.+0      	; 0x12f10 <MasterReset+0x24c>
   12f10:	ed b7       	in	r30, 0x3d	; 61
   12f12:	fe b7       	in	r31, 0x3e	; 62
   12f14:	f2 82       	std	Z+2, r15	; 0x02
   12f16:	e1 82       	std	Z+1, r14	; 0x01
   12f18:	88 ec       	ldi	r24, 0xC8	; 200
   12f1a:	94 e0       	ldi	r25, 0x04	; 4
   12f1c:	94 83       	std	Z+4, r25	; 0x04
   12f1e:	83 83       	std	Z+3, r24	; 0x03
   12f20:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[3], sizeof(DefProductPrice[3]));
   12f24:	0f 90       	pop	r0
   12f26:	0f 90       	pop	r0
   12f28:	0f 90       	pop	r0
   12f2a:	0f 90       	pop	r0
   12f2c:	b8 01       	movw	r22, r16
   12f2e:	65 5e       	subi	r22, 0xE5	; 229
   12f30:	7f 4f       	sbci	r23, 0xFF	; 255
   12f32:	c7 01       	movw	r24, r14
   12f34:	49 e0       	ldi	r20, 0x09	; 9
   12f36:	50 e0       	ldi	r21, 0x00	; 0
   12f38:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("4500"));
   12f3c:	00 d0       	rcall	.+0      	; 0x12f3e <MasterReset+0x27a>
   12f3e:	00 d0       	rcall	.+0      	; 0x12f40 <MasterReset+0x27c>
   12f40:	ed b7       	in	r30, 0x3d	; 61
   12f42:	fe b7       	in	r31, 0x3e	; 62
   12f44:	f2 82       	std	Z+2, r15	; 0x02
   12f46:	e1 82       	std	Z+1, r14	; 0x01
   12f48:	83 ec       	ldi	r24, 0xC3	; 195
   12f4a:	94 e0       	ldi	r25, 0x04	; 4
   12f4c:	94 83       	std	Z+4, r25	; 0x04
   12f4e:	83 83       	std	Z+3, r24	; 0x03
   12f50:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[4], sizeof(DefProductPrice[4]));
   12f54:	0f 90       	pop	r0
   12f56:	0f 90       	pop	r0
   12f58:	0f 90       	pop	r0
   12f5a:	0f 90       	pop	r0
   12f5c:	b8 01       	movw	r22, r16
   12f5e:	6c 5d       	subi	r22, 0xDC	; 220
   12f60:	7f 4f       	sbci	r23, 0xFF	; 255
   12f62:	c7 01       	movw	r24, r14
   12f64:	49 e0       	ldi	r20, 0x09	; 9
   12f66:	50 e0       	ldi	r21, 0x00	; 0
   12f68:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
   12f6c:	00 d0       	rcall	.+0      	; 0x12f6e <MasterReset+0x2aa>
   12f6e:	00 d0       	rcall	.+0      	; 0x12f70 <MasterReset+0x2ac>
   12f70:	ed b7       	in	r30, 0x3d	; 61
   12f72:	fe b7       	in	r31, 0x3e	; 62
   12f74:	f2 82       	std	Z+2, r15	; 0x02
   12f76:	e1 82       	std	Z+1, r14	; 0x01
   12f78:	8e eb       	ldi	r24, 0xBE	; 190
   12f7a:	94 e0       	ldi	r25, 0x04	; 4
   12f7c:	94 83       	std	Z+4, r25	; 0x04
   12f7e:	83 83       	std	Z+3, r24	; 0x03
   12f80:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[5], sizeof(DefProductPrice[5]));
   12f84:	0f 90       	pop	r0
   12f86:	0f 90       	pop	r0
   12f88:	0f 90       	pop	r0
   12f8a:	0f 90       	pop	r0
   12f8c:	b8 01       	movw	r22, r16
   12f8e:	63 5d       	subi	r22, 0xD3	; 211
   12f90:	7f 4f       	sbci	r23, 0xFF	; 255
   12f92:	c7 01       	movw	r24, r14
   12f94:	49 e0       	ldi	r20, 0x09	; 9
   12f96:	50 e0       	ldi	r21, 0x00	; 0
   12f98:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("Pert+   "));
   12f9c:	00 d0       	rcall	.+0      	; 0x12f9e <MasterReset+0x2da>
   12f9e:	00 d0       	rcall	.+0      	; 0x12fa0 <MasterReset+0x2dc>
   12fa0:	ed b7       	in	r30, 0x3d	; 61
   12fa2:	fe b7       	in	r31, 0x3e	; 62
   12fa4:	f2 82       	std	Z+2, r15	; 0x02
   12fa6:	e1 82       	std	Z+1, r14	; 0x01
   12fa8:	85 eb       	ldi	r24, 0xB5	; 181
   12faa:	94 e0       	ldi	r25, 0x04	; 4
   12fac:	94 83       	std	Z+4, r25	; 0x04
   12fae:	83 83       	std	Z+3, r24	; 0x03
   12fb0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[0], sizeof(DefProductName[0]));
   12fb4:	0f 90       	pop	r0
   12fb6:	0f 90       	pop	r0
   12fb8:	0f 90       	pop	r0
   12fba:	0f 90       	pop	r0
   12fbc:	0b eb       	ldi	r16, 0xBB	; 187
   12fbe:	10 e0       	ldi	r17, 0x00	; 0
   12fc0:	c7 01       	movw	r24, r14
   12fc2:	b8 01       	movw	r22, r16
   12fc4:	4d e0       	ldi	r20, 0x0D	; 13
   12fc6:	50 e0       	ldi	r21, 0x00	; 0
   12fc8:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Pertamax"));
   12fcc:	00 d0       	rcall	.+0      	; 0x12fce <MasterReset+0x30a>
   12fce:	00 d0       	rcall	.+0      	; 0x12fd0 <MasterReset+0x30c>
   12fd0:	ed b7       	in	r30, 0x3d	; 61
   12fd2:	fe b7       	in	r31, 0x3e	; 62
   12fd4:	f2 82       	std	Z+2, r15	; 0x02
   12fd6:	e1 82       	std	Z+1, r14	; 0x01
   12fd8:	8c ea       	ldi	r24, 0xAC	; 172
   12fda:	94 e0       	ldi	r25, 0x04	; 4
   12fdc:	94 83       	std	Z+4, r25	; 0x04
   12fde:	83 83       	std	Z+3, r24	; 0x03
   12fe0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[1], sizeof(DefProductName[1]));
   12fe4:	0f 90       	pop	r0
   12fe6:	0f 90       	pop	r0
   12fe8:	0f 90       	pop	r0
   12fea:	0f 90       	pop	r0
   12fec:	b8 01       	movw	r22, r16
   12fee:	63 5f       	subi	r22, 0xF3	; 243
   12ff0:	7f 4f       	sbci	r23, 0xFF	; 255
   12ff2:	c7 01       	movw	r24, r14
   12ff4:	4d e0       	ldi	r20, 0x0D	; 13
   12ff6:	50 e0       	ldi	r21, 0x00	; 0
   12ff8:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Premium "));
   12ffc:	00 d0       	rcall	.+0      	; 0x12ffe <MasterReset+0x33a>
   12ffe:	00 d0       	rcall	.+0      	; 0x13000 <MasterReset+0x33c>
   13000:	ed b7       	in	r30, 0x3d	; 61
   13002:	fe b7       	in	r31, 0x3e	; 62
   13004:	f2 82       	std	Z+2, r15	; 0x02
   13006:	e1 82       	std	Z+1, r14	; 0x01
   13008:	83 ea       	ldi	r24, 0xA3	; 163
   1300a:	94 e0       	ldi	r25, 0x04	; 4
   1300c:	94 83       	std	Z+4, r25	; 0x04
   1300e:	83 83       	std	Z+3, r24	; 0x03
   13010:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[2], sizeof(DefProductName[2]));
   13014:	0f 90       	pop	r0
   13016:	0f 90       	pop	r0
   13018:	0f 90       	pop	r0
   1301a:	0f 90       	pop	r0
   1301c:	b8 01       	movw	r22, r16
   1301e:	66 5e       	subi	r22, 0xE6	; 230
   13020:	7f 4f       	sbci	r23, 0xFF	; 255
   13022:	c7 01       	movw	r24, r14
   13024:	4d e0       	ldi	r20, 0x0D	; 13
   13026:	50 e0       	ldi	r21, 0x00	; 0
   13028:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Solar   "));
   1302c:	00 d0       	rcall	.+0      	; 0x1302e <MasterReset+0x36a>
   1302e:	00 d0       	rcall	.+0      	; 0x13030 <MasterReset+0x36c>
   13030:	ed b7       	in	r30, 0x3d	; 61
   13032:	fe b7       	in	r31, 0x3e	; 62
   13034:	f2 82       	std	Z+2, r15	; 0x02
   13036:	e1 82       	std	Z+1, r14	; 0x01
   13038:	8a e9       	ldi	r24, 0x9A	; 154
   1303a:	94 e0       	ldi	r25, 0x04	; 4
   1303c:	94 83       	std	Z+4, r25	; 0x04
   1303e:	83 83       	std	Z+3, r24	; 0x03
   13040:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[3], sizeof(DefProductName[3]));
   13044:	0f 90       	pop	r0
   13046:	0f 90       	pop	r0
   13048:	0f 90       	pop	r0
   1304a:	0f 90       	pop	r0
   1304c:	b8 01       	movw	r22, r16
   1304e:	69 5d       	subi	r22, 0xD9	; 217
   13050:	7f 4f       	sbci	r23, 0xFF	; 255
   13052:	c7 01       	movw	r24, r14
   13054:	4d e0       	ldi	r20, 0x0D	; 13
   13056:	50 e0       	ldi	r21, 0x00	; 0
   13058:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("BioSolr "));
   1305c:	00 d0       	rcall	.+0      	; 0x1305e <MasterReset+0x39a>
   1305e:	00 d0       	rcall	.+0      	; 0x13060 <MasterReset+0x39c>
   13060:	ed b7       	in	r30, 0x3d	; 61
   13062:	fe b7       	in	r31, 0x3e	; 62
   13064:	f2 82       	std	Z+2, r15	; 0x02
   13066:	e1 82       	std	Z+1, r14	; 0x01
   13068:	81 e9       	ldi	r24, 0x91	; 145
   1306a:	94 e0       	ldi	r25, 0x04	; 4
   1306c:	94 83       	std	Z+4, r25	; 0x04
   1306e:	83 83       	std	Z+3, r24	; 0x03
   13070:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[4], sizeof(DefProductName[4]));
   13074:	0f 90       	pop	r0
   13076:	0f 90       	pop	r0
   13078:	0f 90       	pop	r0
   1307a:	0f 90       	pop	r0
   1307c:	b8 01       	movw	r22, r16
   1307e:	6c 5c       	subi	r22, 0xCC	; 204
   13080:	7f 4f       	sbci	r23, 0xFF	; 255
   13082:	c7 01       	movw	r24, r14
   13084:	4d e0       	ldi	r20, 0x0D	; 13
   13086:	50 e0       	ldi	r21, 0x00	; 0
   13088:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Diesel  "));
   1308c:	00 d0       	rcall	.+0      	; 0x1308e <MasterReset+0x3ca>
   1308e:	00 d0       	rcall	.+0      	; 0x13090 <MasterReset+0x3cc>
   13090:	ed b7       	in	r30, 0x3d	; 61
   13092:	fe b7       	in	r31, 0x3e	; 62
   13094:	f2 82       	std	Z+2, r15	; 0x02
   13096:	e1 82       	std	Z+1, r14	; 0x01
   13098:	88 e8       	ldi	r24, 0x88	; 136
   1309a:	94 e0       	ldi	r25, 0x04	; 4
   1309c:	94 83       	std	Z+4, r25	; 0x04
   1309e:	83 83       	std	Z+3, r24	; 0x03
   130a0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[5], sizeof(DefProductName[5]));
   130a4:	0f 90       	pop	r0
   130a6:	0f 90       	pop	r0
   130a8:	0f 90       	pop	r0
   130aa:	0f 90       	pop	r0
   130ac:	c7 01       	movw	r24, r14
   130ae:	6c ef       	ldi	r22, 0xFC	; 252
   130b0:	70 e0       	ldi	r23, 0x00	; 0
   130b2:	4d e0       	ldi	r20, 0x0D	; 13
   130b4:	50 e0       	ldi	r21, 0x00	; 0
   130b6:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("BCA"));
   130ba:	00 d0       	rcall	.+0      	; 0x130bc <MasterReset+0x3f8>
   130bc:	00 d0       	rcall	.+0      	; 0x130be <MasterReset+0x3fa>
   130be:	ed b7       	in	r30, 0x3d	; 61
   130c0:	fe b7       	in	r31, 0x3e	; 62
   130c2:	f2 82       	std	Z+2, r15	; 0x02
   130c4:	e1 82       	std	Z+1, r14	; 0x01
   130c6:	84 e8       	ldi	r24, 0x84	; 132
   130c8:	94 e0       	ldi	r25, 0x04	; 4
   130ca:	94 83       	std	Z+4, r25	; 0x04
   130cc:	83 83       	std	Z+3, r24	; 0x03
   130ce:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[0], sizeof(DefBankName[0]));
   130d2:	0f 90       	pop	r0
   130d4:	0f 90       	pop	r0
   130d6:	0f 90       	pop	r0
   130d8:	0f 90       	pop	r0
   130da:	09 e0       	ldi	r16, 0x09	; 9
   130dc:	11 e0       	ldi	r17, 0x01	; 1
   130de:	c7 01       	movw	r24, r14
   130e0:	b8 01       	movw	r22, r16
   130e2:	4b e0       	ldi	r20, 0x0B	; 11
   130e4:	50 e0       	ldi	r21, 0x00	; 0
   130e6:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Mandiri"));
   130ea:	00 d0       	rcall	.+0      	; 0x130ec <MasterReset+0x428>
   130ec:	00 d0       	rcall	.+0      	; 0x130ee <MasterReset+0x42a>
   130ee:	ed b7       	in	r30, 0x3d	; 61
   130f0:	fe b7       	in	r31, 0x3e	; 62
   130f2:	f2 82       	std	Z+2, r15	; 0x02
   130f4:	e1 82       	std	Z+1, r14	; 0x01
   130f6:	8c e7       	ldi	r24, 0x7C	; 124
   130f8:	94 e0       	ldi	r25, 0x04	; 4
   130fa:	94 83       	std	Z+4, r25	; 0x04
   130fc:	83 83       	std	Z+3, r24	; 0x03
   130fe:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[1], sizeof(DefBankName[1]));
   13102:	0f 90       	pop	r0
   13104:	0f 90       	pop	r0
   13106:	0f 90       	pop	r0
   13108:	0f 90       	pop	r0
   1310a:	b8 01       	movw	r22, r16
   1310c:	65 5f       	subi	r22, 0xF5	; 245
   1310e:	7f 4f       	sbci	r23, 0xFF	; 255
   13110:	c7 01       	movw	r24, r14
   13112:	4b e0       	ldi	r20, 0x0B	; 11
   13114:	50 e0       	ldi	r21, 0x00	; 0
   13116:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BNI"));
   1311a:	00 d0       	rcall	.+0      	; 0x1311c <MasterReset+0x458>
   1311c:	00 d0       	rcall	.+0      	; 0x1311e <MasterReset+0x45a>
   1311e:	ed b7       	in	r30, 0x3d	; 61
   13120:	fe b7       	in	r31, 0x3e	; 62
   13122:	f2 82       	std	Z+2, r15	; 0x02
   13124:	e1 82       	std	Z+1, r14	; 0x01
   13126:	88 e7       	ldi	r24, 0x78	; 120
   13128:	94 e0       	ldi	r25, 0x04	; 4
   1312a:	94 83       	std	Z+4, r25	; 0x04
   1312c:	83 83       	std	Z+3, r24	; 0x03
   1312e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[2], sizeof(DefBankName[2]));
   13132:	0f 90       	pop	r0
   13134:	0f 90       	pop	r0
   13136:	0f 90       	pop	r0
   13138:	0f 90       	pop	r0
   1313a:	b8 01       	movw	r22, r16
   1313c:	6a 5e       	subi	r22, 0xEA	; 234
   1313e:	7f 4f       	sbci	r23, 0xFF	; 255
   13140:	c7 01       	movw	r24, r14
   13142:	4b e0       	ldi	r20, 0x0B	; 11
   13144:	50 e0       	ldi	r21, 0x00	; 0
   13146:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BRI"));
   1314a:	00 d0       	rcall	.+0      	; 0x1314c <MasterReset+0x488>
   1314c:	00 d0       	rcall	.+0      	; 0x1314e <MasterReset+0x48a>
   1314e:	ed b7       	in	r30, 0x3d	; 61
   13150:	fe b7       	in	r31, 0x3e	; 62
   13152:	f2 82       	std	Z+2, r15	; 0x02
   13154:	e1 82       	std	Z+1, r14	; 0x01
   13156:	84 e7       	ldi	r24, 0x74	; 116
   13158:	94 e0       	ldi	r25, 0x04	; 4
   1315a:	94 83       	std	Z+4, r25	; 0x04
   1315c:	83 83       	std	Z+3, r24	; 0x03
   1315e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[3], sizeof(DefBankName[3]));
   13162:	0f 90       	pop	r0
   13164:	0f 90       	pop	r0
   13166:	0f 90       	pop	r0
   13168:	0f 90       	pop	r0
   1316a:	b8 01       	movw	r22, r16
   1316c:	6f 5d       	subi	r22, 0xDF	; 223
   1316e:	7f 4f       	sbci	r23, 0xFF	; 255
   13170:	c7 01       	movw	r24, r14
   13172:	4b e0       	ldi	r20, 0x0B	; 11
   13174:	50 e0       	ldi	r21, 0x00	; 0
   13176:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 eeprom_write_byte(&DefPrintInitialize,False);
   1317a:	85 e3       	ldi	r24, 0x35	; 53
   1317c:	91 e0       	ldi	r25, 0x01	; 1
   1317e:	60 e0       	ldi	r22, 0x00	; 0
   13180:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefInitIFT,IT_SLAVE);
   13184:	86 e3       	ldi	r24, 0x36	; 54
   13186:	91 e0       	ldi	r25, 0x01	; 1
   13188:	61 e0       	ldi	r22, 0x01	; 1
   1318a:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefDispenserBrand,ST_GILBARCO);//ST_WAYNE_DART;
   1318e:	87 e3       	ldi	r24, 0x37	; 55
   13190:	91 e0       	ldi	r25, 0x01	; 1
   13192:	61 e0       	ldi	r22, 0x01	; 1
   13194:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("000000"));
   13198:	00 d0       	rcall	.+0      	; 0x1319a <MasterReset+0x4d6>
   1319a:	00 d0       	rcall	.+0      	; 0x1319c <MasterReset+0x4d8>
   1319c:	ed b7       	in	r30, 0x3d	; 61
   1319e:	fe b7       	in	r31, 0x3e	; 62
   131a0:	f2 82       	std	Z+2, r15	; 0x02
   131a2:	e1 82       	std	Z+1, r14	; 0x01
   131a4:	8d e6       	ldi	r24, 0x6D	; 109
   131a6:	94 e0       	ldi	r25, 0x04	; 4
   131a8:	94 83       	std	Z+4, r25	; 0x04
   131aa:	83 83       	std	Z+3, r24	; 0x03
   131ac:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefTransactionNumber, sizeof(DefTransactionNumber));
   131b0:	0f 90       	pop	r0
   131b2:	0f 90       	pop	r0
   131b4:	0f 90       	pop	r0
   131b6:	0f 90       	pop	r0
   131b8:	c7 01       	movw	r24, r14
   131ba:	68 e3       	ldi	r22, 0x38	; 56
   131bc:	71 e0       	ldi	r23, 0x01	; 1
   131be:	47 e0       	ldi	r20, 0x07	; 7
   131c0:	50 e0       	ldi	r21, 0x00	; 0
   131c2:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

     eeprom_write_byte(&DefShift,1);
   131c6:	8f e3       	ldi	r24, 0x3F	; 63
   131c8:	91 e0       	ldi	r25, 0x01	; 1
   131ca:	61 e0       	ldi	r22, 0x01	; 1
   131cc:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 xArray[0]=br9600;	 xArray[1]=br9600; 	 xArray[2]=br5787;	 xArray[3]=br9600;
   131d0:	b9 82       	std	Y+1, r11	; 0x01
   131d2:	ba 82       	std	Y+2, r11	; 0x02
   131d4:	83 e0       	ldi	r24, 0x03	; 3
   131d6:	8b 83       	std	Y+3, r24	; 0x03
   131d8:	bc 82       	std	Y+4, r11	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefBaudrate, 4);
   131da:	c6 01       	movw	r24, r12
   131dc:	60 e4       	ldi	r22, 0x40	; 64
   131de:	71 e0       	ldi	r23, 0x01	; 1
   131e0:	44 e0       	ldi	r20, 0x04	; 4
   131e2:	50 e0       	ldi	r21, 0x00	; 0
   131e4:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

     eeprom_write_byte(&DefPoolingPumpMax,MAX_PUMP);
   131e8:	84 e4       	ldi	r24, 0x44	; 68
   131ea:	91 e0       	ldi	r25, 0x01	; 1
   131ec:	64 e0       	ldi	r22, 0x04	; 4
   131ee:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingNoPumpCount,NO_PUMP_COUNT_MAX);
   131f2:	85 e4       	ldi	r24, 0x45	; 69
   131f4:	91 e0       	ldi	r25, 0x01	; 1
   131f6:	65 e0       	ldi	r22, 0x05	; 5
   131f8:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingTryResend,TRY_RESEND);
   131fc:	86 e4       	ldi	r24, 0x46	; 70
   131fe:	91 e0       	ldi	r25, 0x01	; 1
   13200:	62 e0       	ldi	r22, 0x02	; 2
   13202:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingSendTimeout,SEND_TIMEOUT);
   13206:	87 e4       	ldi	r24, 0x47	; 71
   13208:	91 e0       	ldi	r25, 0x01	; 1
   1320a:	65 e0       	ldi	r22, 0x05	; 5
   1320c:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingDelayNextPump,DELAY_NEXT_PUMP);
   13210:	88 e4       	ldi	r24, 0x48	; 72
   13212:	91 e0       	ldi	r25, 0x01	; 1
   13214:	65 e0       	ldi	r22, 0x05	; 5
   13216:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
     eeprom_write_byte(&DefActivePump,ACTIVE_PUMP);
   1321a:	89 e4       	ldi	r24, 0x49	; 73
   1321c:	91 e0       	ldi	r25, 0x01	; 1
   1321e:	64 e0       	ldi	r22, 0x04	; 4
   13220:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
     eeprom_write_byte(&DefSequenceTimeout,SEQUENCE_TIMEOUT);
   13224:	8a e4       	ldi	r24, 0x4A	; 74
   13226:	91 e0       	ldi	r25, 0x01	; 1
   13228:	6a e0       	ldi	r22, 0x0A	; 10
   1322a:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

     eeprom_write_byte(&DefPrintMoney,True);
   1322e:	81 ec       	ldi	r24, 0xC1	; 193
   13230:	93 e0       	ldi	r25, 0x03	; 3
   13232:	61 e0       	ldi	r22, 0x01	; 1
   13234:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
	 eeprom_write_byte(&DefHGMode,HM_232);//HM_TTL,HM_232,HM_485
   13238:	82 ec       	ldi	r24, 0xC2	; 194
   1323a:	93 e0       	ldi	r25, 0x03	; 3
   1323c:	61 e0       	ldi	r22, 0x01	; 1
   1323e:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("    PT. HANINDO AUTOMATION SOLUTIONS    "));
   13242:	00 d0       	rcall	.+0      	; 0x13244 <MasterReset+0x580>
   13244:	00 d0       	rcall	.+0      	; 0x13246 <MasterReset+0x582>
   13246:	ed b7       	in	r30, 0x3d	; 61
   13248:	fe b7       	in	r31, 0x3e	; 62
   1324a:	f2 82       	std	Z+2, r15	; 0x02
   1324c:	e1 82       	std	Z+1, r14	; 0x01
   1324e:	84 e4       	ldi	r24, 0x44	; 68
   13250:	94 e0       	ldi	r25, 0x04	; 4
   13252:	94 83       	std	Z+4, r25	; 0x04
   13254:	83 83       	std	Z+3, r24	; 0x03
   13256:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[0],41);
   1325a:	0f 90       	pop	r0
   1325c:	0f 90       	pop	r0
   1325e:	0f 90       	pop	r0
   13260:	0f 90       	pop	r0
   13262:	07 e2       	ldi	r16, 0x27	; 39
   13264:	12 e0       	ldi	r17, 0x02	; 2
   13266:	c7 01       	movw	r24, r14
   13268:	b8 01       	movw	r22, r16
   1326a:	49 e2       	ldi	r20, 0x29	; 41
   1326c:	50 e0       	ldi	r21, 0x00	; 0
   1326e:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("        JL. RS Fatmawati No.55          "));
   13272:	00 d0       	rcall	.+0      	; 0x13274 <MasterReset+0x5b0>
   13274:	00 d0       	rcall	.+0      	; 0x13276 <MasterReset+0x5b2>
   13276:	ed b7       	in	r30, 0x3d	; 61
   13278:	fe b7       	in	r31, 0x3e	; 62
   1327a:	f2 82       	std	Z+2, r15	; 0x02
   1327c:	e1 82       	std	Z+1, r14	; 0x01
   1327e:	8b e1       	ldi	r24, 0x1B	; 27
   13280:	94 e0       	ldi	r25, 0x04	; 4
   13282:	94 83       	std	Z+4, r25	; 0x04
   13284:	83 83       	std	Z+3, r24	; 0x03
   13286:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[1],41);
   1328a:	0f 90       	pop	r0
   1328c:	0f 90       	pop	r0
   1328e:	0f 90       	pop	r0
   13290:	0f 90       	pop	r0
   13292:	b8 01       	movw	r22, r16
   13294:	67 5d       	subi	r22, 0xD7	; 215
   13296:	7f 4f       	sbci	r23, 0xFF	; 255
   13298:	c7 01       	movw	r24, r14
   1329a:	49 e2       	ldi	r20, 0x29	; 41
   1329c:	50 e0       	ldi	r21, 0x00	; 0
   1329e:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Jakarta Selatan             "));
   132a2:	00 d0       	rcall	.+0      	; 0x132a4 <MasterReset+0x5e0>
   132a4:	00 d0       	rcall	.+0      	; 0x132a6 <MasterReset+0x5e2>
   132a6:	ed b7       	in	r30, 0x3d	; 61
   132a8:	fe b7       	in	r31, 0x3e	; 62
   132aa:	f2 82       	std	Z+2, r15	; 0x02
   132ac:	e1 82       	std	Z+1, r14	; 0x01
   132ae:	82 ef       	ldi	r24, 0xF2	; 242
   132b0:	93 e0       	ldi	r25, 0x03	; 3
   132b2:	94 83       	std	Z+4, r25	; 0x04
   132b4:	83 83       	std	Z+3, r24	; 0x03
   132b6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[2],41);
   132ba:	0f 90       	pop	r0
   132bc:	0f 90       	pop	r0
   132be:	0f 90       	pop	r0
   132c0:	0f 90       	pop	r0
   132c2:	c7 01       	movw	r24, r14
   132c4:	69 e7       	ldi	r22, 0x79	; 121
   132c6:	72 e0       	ldi	r23, 0x02	; 2
   132c8:	49 e2       	ldi	r20, 0x29	; 41
   132ca:	50 e0       	ldi	r21, 0x00	; 0
   132cc:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   132d0:	00 d0       	rcall	.+0      	; 0x132d2 <MasterReset+0x60e>
   132d2:	00 d0       	rcall	.+0      	; 0x132d4 <MasterReset+0x610>
   132d4:	ed b7       	in	r30, 0x3d	; 61
   132d6:	fe b7       	in	r31, 0x3e	; 62
   132d8:	f2 82       	std	Z+2, r15	; 0x02
   132da:	e1 82       	std	Z+1, r14	; 0x01
   132dc:	89 ec       	ldi	r24, 0xC9	; 201
   132de:	93 e0       	ldi	r25, 0x03	; 3
   132e0:	94 83       	std	Z+4, r25	; 0x04
   132e2:	83 83       	std	Z+3, r24	; 0x03
   132e4:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[3],41);
   132e8:	0f 90       	pop	r0
   132ea:	0f 90       	pop	r0
   132ec:	0f 90       	pop	r0
   132ee:	0f 90       	pop	r0
   132f0:	c7 01       	movw	r24, r14
   132f2:	62 ea       	ldi	r22, 0xA2	; 162
   132f4:	72 e0       	ldi	r23, 0x02	; 2
   132f6:	49 e2       	ldi	r20, 0x29	; 41
   132f8:	50 e0       	ldi	r21, 0x00	; 0
   132fa:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   132fe:	00 d0       	rcall	.+0      	; 0x13300 <MasterReset+0x63c>
   13300:	00 d0       	rcall	.+0      	; 0x13302 <MasterReset+0x63e>
   13302:	ed b7       	in	r30, 0x3d	; 61
   13304:	fe b7       	in	r31, 0x3e	; 62
   13306:	f2 82       	std	Z+2, r15	; 0x02
   13308:	e1 82       	std	Z+1, r14	; 0x01
   1330a:	80 ea       	ldi	r24, 0xA0	; 160
   1330c:	93 e0       	ldi	r25, 0x03	; 3
   1330e:	94 83       	std	Z+4, r25	; 0x04
   13310:	83 83       	std	Z+3, r24	; 0x03
   13312:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[4],41);
   13316:	0f 90       	pop	r0
   13318:	0f 90       	pop	r0
   1331a:	0f 90       	pop	r0
   1331c:	0f 90       	pop	r0
   1331e:	c7 01       	movw	r24, r14
   13320:	6b ec       	ldi	r22, 0xCB	; 203
   13322:	72 e0       	ldi	r23, 0x02	; 2
   13324:	49 e2       	ldi	r20, 0x29	; 41
   13326:	50 e0       	ldi	r21, 0x00	; 0
   13328:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   1332c:	00 d0       	rcall	.+0      	; 0x1332e <MasterReset+0x66a>
   1332e:	00 d0       	rcall	.+0      	; 0x13330 <MasterReset+0x66c>
   13330:	ed b7       	in	r30, 0x3d	; 61
   13332:	fe b7       	in	r31, 0x3e	; 62
   13334:	f2 82       	std	Z+2, r15	; 0x02
   13336:	e1 82       	std	Z+1, r14	; 0x01
   13338:	87 e7       	ldi	r24, 0x77	; 119
   1333a:	93 e0       	ldi	r25, 0x03	; 3
   1333c:	94 83       	std	Z+4, r25	; 0x04
   1333e:	83 83       	std	Z+3, r24	; 0x03
   13340:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[5],41);
   13344:	0f 90       	pop	r0
   13346:	0f 90       	pop	r0
   13348:	0f 90       	pop	r0
   1334a:	0f 90       	pop	r0
   1334c:	c7 01       	movw	r24, r14
   1334e:	64 ef       	ldi	r22, 0xF4	; 244
   13350:	72 e0       	ldi	r23, 0x02	; 2
   13352:	49 e2       	ldi	r20, 0x29	; 41
   13354:	50 e0       	ldi	r21, 0x00	; 0
   13356:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("             Terima Kasih               "));
   1335a:	00 d0       	rcall	.+0      	; 0x1335c <MasterReset+0x698>
   1335c:	00 d0       	rcall	.+0      	; 0x1335e <MasterReset+0x69a>
   1335e:	ed b7       	in	r30, 0x3d	; 61
   13360:	fe b7       	in	r31, 0x3e	; 62
   13362:	f2 82       	std	Z+2, r15	; 0x02
   13364:	e1 82       	std	Z+1, r14	; 0x01
   13366:	8e e4       	ldi	r24, 0x4E	; 78
   13368:	93 e0       	ldi	r25, 0x03	; 3
   1336a:	94 83       	std	Z+4, r25	; 0x04
   1336c:	83 83       	std	Z+3, r24	; 0x03
   1336e:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[6],41);
   13372:	0f 90       	pop	r0
   13374:	0f 90       	pop	r0
   13376:	0f 90       	pop	r0
   13378:	0f 90       	pop	r0
   1337a:	c7 01       	movw	r24, r14
   1337c:	6d e1       	ldi	r22, 0x1D	; 29
   1337e:	73 e0       	ldi	r23, 0x03	; 3
   13380:	49 e2       	ldi	r20, 0x29	; 41
   13382:	50 e0       	ldi	r21, 0x00	; 0
   13384:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Selamat  Jalan              "));
   13388:	00 d0       	rcall	.+0      	; 0x1338a <MasterReset+0x6c6>
   1338a:	00 d0       	rcall	.+0      	; 0x1338c <MasterReset+0x6c8>
   1338c:	ed b7       	in	r30, 0x3d	; 61
   1338e:	fe b7       	in	r31, 0x3e	; 62
   13390:	f2 82       	std	Z+2, r15	; 0x02
   13392:	e1 82       	std	Z+1, r14	; 0x01
   13394:	85 e2       	ldi	r24, 0x25	; 37
   13396:	93 e0       	ldi	r25, 0x03	; 3
   13398:	94 83       	std	Z+4, r25	; 0x04
   1339a:	83 83       	std	Z+3, r24	; 0x03
   1339c:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[7],41);
   133a0:	0f 90       	pop	r0
   133a2:	0f 90       	pop	r0
   133a4:	0f 90       	pop	r0
   133a6:	0f 90       	pop	r0
   133a8:	c7 01       	movw	r24, r14
   133aa:	66 e4       	ldi	r22, 0x46	; 70
   133ac:	73 e0       	ldi	r23, 0x03	; 3
   133ae:	49 e2       	ldi	r20, 0x29	; 41
   133b0:	50 e0       	ldi	r21, 0x00	; 0
   133b2:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("      Semoga Selamat Sampai Tujuan      "));
   133b6:	00 d0       	rcall	.+0      	; 0x133b8 <MasterReset+0x6f4>
   133b8:	00 d0       	rcall	.+0      	; 0x133ba <MasterReset+0x6f6>
   133ba:	ed b7       	in	r30, 0x3d	; 61
   133bc:	fe b7       	in	r31, 0x3e	; 62
   133be:	f2 82       	std	Z+2, r15	; 0x02
   133c0:	e1 82       	std	Z+1, r14	; 0x01
   133c2:	8c ef       	ldi	r24, 0xFC	; 252
   133c4:	92 e0       	ldi	r25, 0x02	; 2
   133c6:	94 83       	std	Z+4, r25	; 0x04
   133c8:	83 83       	std	Z+3, r24	; 0x03
   133ca:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[8],41);
   133ce:	0f 90       	pop	r0
   133d0:	0f 90       	pop	r0
   133d2:	0f 90       	pop	r0
   133d4:	0f 90       	pop	r0
   133d6:	c7 01       	movw	r24, r14
   133d8:	6f e6       	ldi	r22, 0x6F	; 111
   133da:	73 e0       	ldi	r23, 0x03	; 3
   133dc:	49 e2       	ldi	r20, 0x29	; 41
   133de:	50 e0       	ldi	r21, 0x00	; 0
   133e0:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   133e4:	00 d0       	rcall	.+0      	; 0x133e6 <MasterReset+0x722>
   133e6:	00 d0       	rcall	.+0      	; 0x133e8 <MasterReset+0x724>
   133e8:	ed b7       	in	r30, 0x3d	; 61
   133ea:	fe b7       	in	r31, 0x3e	; 62
   133ec:	f2 82       	std	Z+2, r15	; 0x02
   133ee:	e1 82       	std	Z+1, r14	; 0x01
   133f0:	83 ed       	ldi	r24, 0xD3	; 211
   133f2:	92 e0       	ldi	r25, 0x02	; 2
   133f4:	94 83       	std	Z+4, r25	; 0x04
   133f6:	83 83       	std	Z+3, r24	; 0x03
   133f8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[9],41);
   133fc:	0f 90       	pop	r0
   133fe:	0f 90       	pop	r0
   13400:	0f 90       	pop	r0
   13402:	0f 90       	pop	r0
   13404:	c7 01       	movw	r24, r14
   13406:	68 e9       	ldi	r22, 0x98	; 152
   13408:	73 e0       	ldi	r23, 0x03	; 3
   1340a:	49 e2       	ldi	r20, 0x29	; 41
   1340c:	50 e0       	ldi	r21, 0x00	; 0
   1340e:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	 
	 eeprom_write_byte(&DefIFT_ID,1);
   13412:	80 e0       	ldi	r24, 0x00	; 0
   13414:	90 e0       	ldi	r25, 0x00	; 0
   13416:	61 e0       	ldi	r22, 0x01	; 1
   13418:	0e 94 86 a8 	call	0x1510c	; 0x1510c <__eewr_byte_m128>
}
   1341c:	ec 96       	adiw	r28, 0x3c	; 60
   1341e:	0f b6       	in	r0, 0x3f	; 63
   13420:	f8 94       	cli
   13422:	de bf       	out	0x3e, r29	; 62
   13424:	0f be       	out	0x3f, r0	; 63
   13426:	cd bf       	out	0x3d, r28	; 61
   13428:	cf 91       	pop	r28
   1342a:	df 91       	pop	r29
   1342c:	1f 91       	pop	r17
   1342e:	0f 91       	pop	r16
   13430:	ff 90       	pop	r15
   13432:	ef 90       	pop	r14
   13434:	df 90       	pop	r13
   13436:	cf 90       	pop	r12
   13438:	bf 90       	pop	r11
   1343a:	08 95       	ret

0001343c <FMenuMaster>:
     else Result=RC_INVALID;

   return Result;
}

char FMenuMaster(){ 
   1343c:	cf 92       	push	r12
   1343e:	df 92       	push	r13
   13440:	ef 92       	push	r14
   13442:	ff 92       	push	r15
   13444:	0f 93       	push	r16
   13446:	1f 93       	push	r17
   13448:	df 93       	push	r29
   1344a:	cf 93       	push	r28
   1344c:	cd b7       	in	r28, 0x3d	; 61
   1344e:	de b7       	in	r29, 0x3e	; 62
   13450:	e2 97       	sbiw	r28, 0x32	; 50
   13452:	0f b6       	in	r0, 0x3f	; 63
   13454:	f8 94       	cli
   13456:	de bf       	out	0x3e, r29	; 62
   13458:	0f be       	out	0x3f, r0	; 63
   1345a:	cd bf       	out	0x3d, r28	; 61
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
	 char uiResult,lcdteks[20],PTime[10],PDate[10],strNewPassword[10];
	 char strSend[20];

	 switch(stMenuMaster){
   1345c:	e0 91 2a 03 	lds	r30, 0x032A
   13460:	f0 e0       	ldi	r31, 0x00	; 0
   13462:	e9 31       	cpi	r30, 0x19	; 25
   13464:	f1 05       	cpc	r31, r1
   13466:	08 f0       	brcs	.+2      	; 0x1346a <FMenuMaster+0x2e>
   13468:	d7 c2       	rjmp	.+1454   	; 0x13a18 <FMenuMaster+0x5dc>
   1346a:	e2 51       	subi	r30, 0x12	; 18
   1346c:	ff 4f       	sbci	r31, 0xFF	; 255
   1346e:	ee 0f       	add	r30, r30
   13470:	ff 1f       	adc	r31, r31
   13472:	05 90       	lpm	r0, Z+
   13474:	f4 91       	lpm	r31, Z+
   13476:	e0 2d       	mov	r30, r0
   13478:	09 94       	ijmp
	 case mmInitMaster:
	      lcd_clear();
   1347a:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("-System Admin Level-"));
   1347e:	81 e0       	ldi	r24, 0x01	; 1
   13480:	61 e0       	ldi	r22, 0x01	; 1
   13482:	43 eb       	ldi	r20, 0xB3	; 179
   13484:	59 e1       	ldi	r21, 0x19	; 25
   13486:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Restore Password  "));
   1348a:	82 e0       	ldi	r24, 0x02	; 2
   1348c:	61 e0       	ldi	r22, 0x01	; 1
   1348e:	4e e9       	ldi	r20, 0x9E	; 158
   13490:	59 e1       	ldi	r21, 0x19	; 25
   13492:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Master Reset      "));
   13496:	83 e0       	ldi	r24, 0x03	; 3
   13498:	61 e0       	ldi	r22, 0x01	; 1
   1349a:	49 e8       	ldi	r20, 0x89	; 137
   1349c:	59 e1       	ldi	r21, 0x19	; 25
   1349e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Exit             "));
   134a2:	84 e0       	ldi	r24, 0x04	; 4
   134a4:	61 e0       	ldi	r22, 0x01	; 1
   134a6:	44 e7       	ldi	r20, 0x74	; 116
   134a8:	59 e1       	ldi	r21, 0x19	; 25
   134aa:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>

		  //uart_printf(1,1,PSTR("-System Admin Level-"));

		  stMenuMaster=mmMasterSelect;
   134ae:	81 e0       	ldi	r24, 0x01	; 1
   134b0:	ac c2       	rjmp	.+1368   	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmMasterSelect:
	 	  KeyPressed=_key_scan(1);
   134b2:	81 e0       	ldi	r24, 0x01	; 1
   134b4:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   134b8:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>
          switch(KeyChar){
   134bc:	81 33       	cpi	r24, 0x31	; 49
   134be:	09 f4       	brne	.+2      	; 0x134c2 <FMenuMaster+0x86>
   134c0:	d9 c1       	rjmp	.+946    	; 0x13874 <FMenuMaster+0x438>
   134c2:	82 33       	cpi	r24, 0x32	; 50
   134c4:	21 f0       	breq	.+8      	; 0x134ce <FMenuMaster+0x92>
   134c6:	8a 32       	cpi	r24, 0x2A	; 42
   134c8:	09 f0       	breq	.+2      	; 0x134cc <FMenuMaster+0x90>
   134ca:	a6 c2       	rjmp	.+1356   	; 0x13a18 <FMenuMaster+0x5dc>
   134cc:	9d c2       	rjmp	.+1338   	; 0x13a08 <FMenuMaster+0x5cc>
		  case '1':
               stMenuMaster=mmRestorePasswordMenu;
		       break;
		  case '2':
		       stMenuMaster=mmMasterReset;
   134ce:	81 e1       	ldi	r24, 0x11	; 17
   134d0:	9c c2       	rjmp	.+1336   	; 0x13a0a <FMenuMaster+0x5ce>
		       break;
		  }
	      break;
     case mmMasterReset:
		  
	      _datetime(0, strSystemDate, strSystemTime);
   134d2:	e2 e5       	ldi	r30, 0x52	; 82
   134d4:	ee 2e       	mov	r14, r30
   134d6:	e9 e0       	ldi	r30, 0x09	; 9
   134d8:	fe 2e       	mov	r15, r30
   134da:	80 e0       	ldi	r24, 0x00	; 0
   134dc:	68 e9       	ldi	r22, 0x98	; 152
   134de:	74 e0       	ldi	r23, 0x04	; 4
   134e0:	a7 01       	movw	r20, r14
   134e2:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <_datetime>
	      sprintf_P(PTime,PSTR("%s"),strSystemTime);
   134e6:	00 d0       	rcall	.+0      	; 0x134e8 <FMenuMaster+0xac>
   134e8:	00 d0       	rcall	.+0      	; 0x134ea <FMenuMaster+0xae>
   134ea:	00 d0       	rcall	.+0      	; 0x134ec <FMenuMaster+0xb0>
   134ec:	ed b7       	in	r30, 0x3d	; 61
   134ee:	fe b7       	in	r31, 0x3e	; 62
   134f0:	31 96       	adiw	r30, 0x01	; 1
   134f2:	8e 01       	movw	r16, r28
   134f4:	0f 5f       	subi	r16, 0xFF	; 255
   134f6:	1f 4f       	sbci	r17, 0xFF	; 255
   134f8:	ad b7       	in	r26, 0x3d	; 61
   134fa:	be b7       	in	r27, 0x3e	; 62
   134fc:	12 96       	adiw	r26, 0x02	; 2
   134fe:	1c 93       	st	X, r17
   13500:	0e 93       	st	-X, r16
   13502:	11 97       	sbiw	r26, 0x01	; 1
   13504:	81 e7       	ldi	r24, 0x71	; 113
   13506:	99 e1       	ldi	r25, 0x19	; 25
   13508:	93 83       	std	Z+3, r25	; 0x03
   1350a:	82 83       	std	Z+2, r24	; 0x02
   1350c:	f5 82       	std	Z+5, r15	; 0x05
   1350e:	e4 82       	std	Z+4, r14	; 0x04
   13510:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  sprintf_P(strGeniusCode,PSTR("22345678"));		  
   13514:	0f 90       	pop	r0
   13516:	0f 90       	pop	r0
   13518:	70 e7       	ldi	r23, 0x70	; 112
   1351a:	e7 2e       	mov	r14, r23
   1351c:	76 e0       	ldi	r23, 0x06	; 6
   1351e:	f7 2e       	mov	r15, r23
   13520:	ed b7       	in	r30, 0x3d	; 61
   13522:	fe b7       	in	r31, 0x3e	; 62
   13524:	f2 82       	std	Z+2, r15	; 0x02
   13526:	e1 82       	std	Z+1, r14	; 0x01
   13528:	88 e6       	ldi	r24, 0x68	; 104
   1352a:	99 e1       	ldi	r25, 0x19	; 25
   1352c:	94 83       	std	Z+4, r25	; 0x04
   1352e:	83 83       	std	Z+3, r24	; 0x03
   13530:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
   13534:	0f 90       	pop	r0
   13536:	0f 90       	pop	r0
   13538:	0f 90       	pop	r0
   1353a:	0f 90       	pop	r0
   1353c:	c8 01       	movw	r24, r16
   1353e:	6a e3       	ldi	r22, 0x3A	; 58
   13540:	0e 94 22 1a 	call	0x3444	; 0x3444 <RemoveChar>
   13544:	00 d0       	rcall	.+0      	; 0x13546 <FMenuMaster+0x10a>
   13546:	00 d0       	rcall	.+0      	; 0x13548 <FMenuMaster+0x10c>
   13548:	6e ea       	ldi	r22, 0xAE	; 174
   1354a:	c6 2e       	mov	r12, r22
   1354c:	68 e0       	ldi	r22, 0x08	; 8
   1354e:	d6 2e       	mov	r13, r22
   13550:	ad b7       	in	r26, 0x3d	; 61
   13552:	be b7       	in	r27, 0x3e	; 62
   13554:	12 96       	adiw	r26, 0x02	; 2
   13556:	dc 92       	st	X, r13
   13558:	ce 92       	st	-X, r12
   1355a:	11 97       	sbiw	r26, 0x01	; 1
   1355c:	87 e6       	ldi	r24, 0x67	; 103
   1355e:	99 e1       	ldi	r25, 0x19	; 25
   13560:	14 96       	adiw	r26, 0x04	; 4
   13562:	9c 93       	st	X, r25
   13564:	8e 93       	st	-X, r24
   13566:	13 97       	sbiw	r26, 0x03	; 3
   13568:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);
   1356c:	0f 90       	pop	r0
   1356e:	0f 90       	pop	r0
   13570:	0f 90       	pop	r0
   13572:	0f 90       	pop	r0
   13574:	c8 01       	movw	r24, r16
   13576:	b7 01       	movw	r22, r14
   13578:	a6 01       	movw	r20, r12
   1357a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <GenerateKeyStamp>

		  lcd_clear();
   1357e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("-Master Reset-"));
   13582:	81 e0       	ldi	r24, 0x01	; 1
   13584:	61 e0       	ldi	r22, 0x01	; 1
   13586:	48 e5       	ldi	r20, 0x58	; 88
   13588:	59 e1       	ldi	r21, 0x19	; 25
   1358a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  sprintf_P(lcdteks,PSTR("Seed Code:%s"),strKeyStamp);
   1358e:	00 d0       	rcall	.+0      	; 0x13590 <FMenuMaster+0x154>
   13590:	00 d0       	rcall	.+0      	; 0x13592 <FMenuMaster+0x156>
   13592:	00 d0       	rcall	.+0      	; 0x13594 <FMenuMaster+0x158>
   13594:	ed b7       	in	r30, 0x3d	; 61
   13596:	fe b7       	in	r31, 0x3e	; 62
   13598:	31 96       	adiw	r30, 0x01	; 1
   1359a:	8e 01       	movw	r16, r28
   1359c:	01 5e       	subi	r16, 0xE1	; 225
   1359e:	1f 4f       	sbci	r17, 0xFF	; 255
   135a0:	ad b7       	in	r26, 0x3d	; 61
   135a2:	be b7       	in	r27, 0x3e	; 62
   135a4:	12 96       	adiw	r26, 0x02	; 2
   135a6:	1c 93       	st	X, r17
   135a8:	0e 93       	st	-X, r16
   135aa:	11 97       	sbiw	r26, 0x01	; 1
   135ac:	8b e4       	ldi	r24, 0x4B	; 75
   135ae:	99 e1       	ldi	r25, 0x19	; 25
   135b0:	93 83       	std	Z+3, r25	; 0x03
   135b2:	82 83       	std	Z+2, r24	; 0x02
   135b4:	d5 82       	std	Z+5, r13	; 0x05
   135b6:	c4 82       	std	Z+4, r12	; 0x04
   135b8:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(2,1,lcdteks);
   135bc:	ed b7       	in	r30, 0x3d	; 61
   135be:	fe b7       	in	r31, 0x3e	; 62
   135c0:	36 96       	adiw	r30, 0x06	; 6
   135c2:	0f b6       	in	r0, 0x3f	; 63
   135c4:	f8 94       	cli
   135c6:	fe bf       	out	0x3e, r31	; 62
   135c8:	0f be       	out	0x3f, r0	; 63
   135ca:	ed bf       	out	0x3d, r30	; 61
   135cc:	82 e0       	ldi	r24, 0x02	; 2
   135ce:	61 e0       	ldi	r22, 0x01	; 1
   135d0:	a8 01       	movw	r20, r16
   135d2:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(3,1,   PSTR("ResetCode:_         "));
   135d6:	83 e0       	ldi	r24, 0x03	; 3
   135d8:	61 e0       	ldi	r22, 0x01	; 1
   135da:	46 e3       	ldi	r20, 0x36	; 54
   135dc:	59 e1       	ldi	r21, 0x19	; 25
   135de:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,   PSTR("[*]Cancel   [#]Enter"));		          
   135e2:	84 e0       	ldi	r24, 0x04	; 4
   135e4:	61 e0       	ldi	r22, 0x01	; 1
   135e6:	41 e2       	ldi	r20, 0x21	; 33
   135e8:	59 e1       	ldi	r21, 0x19	; 25
   135ea:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      stMenuMaster=mmResetCodeEntry;
   135ee:	82 e1       	ldi	r24, 0x12	; 18
   135f0:	0c c2       	rjmp	.+1048   	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmResetCodeEntry:
          uiResult=UserInput(UI_NUMBER_R,3,11,strRestoreCode,0,9);
   135f2:	81 e0       	ldi	r24, 0x01	; 1
   135f4:	63 e0       	ldi	r22, 0x03	; 3
   135f6:	4b e0       	ldi	r20, 0x0B	; 11
   135f8:	29 e3       	ldi	r18, 0x39	; 57
   135fa:	3d e0       	ldi	r19, 0x0D	; 13
   135fc:	00 e0       	ldi	r16, 0x00	; 0
   135fe:	10 e0       	ldi	r17, 0x00	; 0
   13600:	59 e0       	ldi	r21, 0x09	; 9
   13602:	e5 2e       	mov	r14, r21
   13604:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  switch(uiResult){
   13608:	83 30       	cpi	r24, 0x03	; 3
   1360a:	49 f0       	breq	.+18     	; 0x1361e <FMenuMaster+0x1e2>
   1360c:	84 30       	cpi	r24, 0x04	; 4
   1360e:	08 f4       	brcc	.+2      	; 0x13612 <FMenuMaster+0x1d6>
   13610:	7e c1       	rjmp	.+764    	; 0x1390e <FMenuMaster+0x4d2>
   13612:	84 30       	cpi	r24, 0x04	; 4
   13614:	31 f0       	breq	.+12     	; 0x13622 <FMenuMaster+0x1e6>
   13616:	85 30       	cpi	r24, 0x05	; 5
   13618:	09 f0       	breq	.+2      	; 0x1361c <FMenuMaster+0x1e0>
   1361a:	fe c1       	rjmp	.+1020   	; 0x13a18 <FMenuMaster+0x5dc>
   1361c:	07 c0       	rjmp	.+14     	; 0x1362c <FMenuMaster+0x1f0>
		  case USER_OK:
               stMenuMaster=mmIsValidResetCode;
   1361e:	83 e1       	ldi	r24, 0x13	; 19
   13620:	f4 c1       	rjmp	.+1000   	; 0x13a0a <FMenuMaster+0x5ce>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   13622:	84 e0       	ldi	r24, 0x04	; 4
   13624:	61 e0       	ldi	r22, 0x01	; 1
   13626:	4c e0       	ldi	r20, 0x0C	; 12
   13628:	59 e1       	ldi	r21, 0x19	; 25
   1362a:	86 c1       	rjmp	.+780    	; 0x13938 <FMenuMaster+0x4fc>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   1362c:	84 e0       	ldi	r24, 0x04	; 4
   1362e:	61 e0       	ldi	r22, 0x01	; 1
   13630:	47 ef       	ldi	r20, 0xF7	; 247
   13632:	58 e1       	ldi	r21, 0x18	; 24
   13634:	81 c1       	rjmp	.+770    	; 0x13938 <FMenuMaster+0x4fc>
		       break;
		  }	      
	      break;
     case mmIsValidResetCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
   13636:	8e ea       	ldi	r24, 0xAE	; 174
   13638:	98 e0       	ldi	r25, 0x08	; 8
   1363a:	69 e3       	ldi	r22, 0x39	; 57
   1363c:	7d e0       	ldi	r23, 0x0D	; 13
   1363e:	0e 94 11 1b 	call	0x3622	; 0x3622 <ValidateRestoreCode>
   13642:	81 30       	cpi	r24, 0x01	; 1
   13644:	11 f4       	brne	.+4      	; 0x1364a <FMenuMaster+0x20e>
		      stMenuMaster=mmMasterResetExec;
   13646:	84 e1       	ldi	r24, 0x14	; 20
   13648:	e0 c1       	rjmp	.+960    	; 0x13a0a <FMenuMaster+0x5ce>
		  }else stMenuMaster=mmDisplayInvalidResetCode;
   1364a:	86 e1       	ldi	r24, 0x16	; 22
   1364c:	de c1       	rjmp	.+956    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmMasterResetExec:
	      lcd_clear();
   1364e:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
	      lcd_printf(1,1,PSTR("Reset EEPROM"));
   13652:	81 e0       	ldi	r24, 0x01	; 1
   13654:	61 e0       	ldi	r22, 0x01	; 1
   13656:	4a ee       	ldi	r20, 0xEA	; 234
   13658:	58 e1       	ldi	r21, 0x18	; 24
   1365a:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      lcd_printf(2,1,PSTR("Please Wait.."));
   1365e:	82 e0       	ldi	r24, 0x02	; 2
   13660:	61 e0       	ldi	r22, 0x01	; 1
   13662:	4c ed       	ldi	r20, 0xDC	; 220
   13664:	58 e1       	ldi	r21, 0x18	; 24
   13666:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      MasterReset();
   1366a:	0e 94 62 96 	call	0x12cc4	; 0x12cc4 <MasterReset>
          stMenuMaster=mmSuccesfullReset;
   1366e:	85 e1       	ldi	r24, 0x15	; 21
   13670:	cc c1       	rjmp	.+920    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
   13672:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  system_beep(1);
   13676:	81 e0       	ldi	r24, 0x01	; 1
   13678:	90 e0       	ldi	r25, 0x00	; 0
   1367a:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
	      lcd_printf(2,1,PSTR("Reset Complete"));
   1367e:	82 e0       	ldi	r24, 0x02	; 2
   13680:	61 e0       	ldi	r22, 0x01	; 1
   13682:	4d ec       	ldi	r20, 0xCD	; 205
   13684:	58 e1       	ldi	r21, 0x18	; 24
   13686:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	      TimDisplay=0; 
   1368a:	10 92 70 02 	sts	0x0270, r1
		  stMenuMaster=mmDelayDisplayComplete;
   1368e:	88 e1       	ldi	r24, 0x18	; 24
   13690:	bc c1       	rjmp	.+888    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmDisplayInvalidResetCode:
          system_beep(1);
   13692:	81 e0       	ldi	r24, 0x01	; 1
   13694:	90 e0       	ldi	r25, 0x00	; 0
   13696:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
          lcd_printf(3,1,PSTR("Invalid Code        "));
   1369a:	83 e0       	ldi	r24, 0x03	; 3
   1369c:	61 e0       	ldi	r22, 0x01	; 1
   1369e:	48 eb       	ldi	r20, 0xB8	; 184
   136a0:	58 e1       	ldi	r21, 0x18	; 24
   136a2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          TimDisplay=0; 
   136a6:	10 92 70 02 	sts	0x0270, r1
		  stMenuMaster=mmDelayDisplayInvalidResetCode;
   136aa:	87 e1       	ldi	r24, 0x17	; 23
   136ac:	ae c1       	rjmp	.+860    	; 0x13a0a <FMenuMaster+0x5ce>
     case mmDelayDisplayInvalidResetCode:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
	      break;
     
	 case mmDelayDisplayComplete:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
   136ae:	80 91 70 02 	lds	r24, 0x0270
   136b2:	86 30       	cpi	r24, 0x06	; 6
   136b4:	08 f4       	brcc	.+2      	; 0x136b8 <FMenuMaster+0x27c>
   136b6:	b0 c1       	rjmp	.+864    	; 0x13a18 <FMenuMaster+0x5dc>
   136b8:	a7 c1       	rjmp	.+846    	; 0x13a08 <FMenuMaster+0x5cc>
	      break;

     case mmRestorePasswordMenu:	      
	      lcd_clear();
   136ba:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  lcd_printf(1,1,PSTR("Enter GeNiUs Code   "));
   136be:	81 e0       	ldi	r24, 0x01	; 1
   136c0:	61 e0       	ldi	r22, 0x01	; 1
   136c2:	43 ea       	ldi	r20, 0xA3	; 163
   136c4:	58 e1       	ldi	r21, 0x18	; 24
   136c6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(2,1,PSTR("_                   "));
   136ca:	82 e0       	ldi	r24, 0x02	; 2
   136cc:	61 e0       	ldi	r22, 0x01	; 1
   136ce:	4e e8       	ldi	r20, 0x8E	; 142
   136d0:	58 e1       	ldi	r21, 0x18	; 24
   136d2:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,4,PSTR("[*]Cancel   [#]Enter"));
   136d6:	84 e0       	ldi	r24, 0x04	; 4
   136d8:	64 e0       	ldi	r22, 0x04	; 4
   136da:	49 e7       	ldi	r20, 0x79	; 121
   136dc:	58 e1       	ldi	r21, 0x18	; 24
   136de:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  sprintf_P(strGeniusCode,PSTR(""));
   136e2:	00 d0       	rcall	.+0      	; 0x136e4 <FMenuMaster+0x2a8>
   136e4:	00 d0       	rcall	.+0      	; 0x136e6 <FMenuMaster+0x2aa>
   136e6:	80 e7       	ldi	r24, 0x70	; 112
   136e8:	96 e0       	ldi	r25, 0x06	; 6
   136ea:	ad b7       	in	r26, 0x3d	; 61
   136ec:	be b7       	in	r27, 0x3e	; 62
   136ee:	12 96       	adiw	r26, 0x02	; 2
   136f0:	9c 93       	st	X, r25
   136f2:	8e 93       	st	-X, r24
   136f4:	11 97       	sbiw	r26, 0x01	; 1
   136f6:	88 e7       	ldi	r24, 0x78	; 120
   136f8:	98 e1       	ldi	r25, 0x18	; 24
   136fa:	14 96       	adiw	r26, 0x04	; 4
   136fc:	9c 93       	st	X, r25
   136fe:	8e 93       	st	-X, r24
   13700:	13 97       	sbiw	r26, 0x03	; 3
   13702:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
          stMenuMaster=mmGeniusCodeEntry;
   13706:	83 e0       	ldi	r24, 0x03	; 3
   13708:	80 93 2a 03 	sts	0x032A, r24
	      break;
   1370c:	0f 90       	pop	r0
   1370e:	0f 90       	pop	r0
   13710:	0f 90       	pop	r0
   13712:	0f 90       	pop	r0
   13714:	81 c1       	rjmp	.+770    	; 0x13a18 <FMenuMaster+0x5dc>
     case mmGeniusCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,2,1,strGeniusCode,0,10);
   13716:	81 e0       	ldi	r24, 0x01	; 1
   13718:	62 e0       	ldi	r22, 0x02	; 2
   1371a:	41 e0       	ldi	r20, 0x01	; 1
   1371c:	20 e7       	ldi	r18, 0x70	; 112
   1371e:	36 e0       	ldi	r19, 0x06	; 6
   13720:	00 e0       	ldi	r16, 0x00	; 0
   13722:	10 e0       	ldi	r17, 0x00	; 0
   13724:	9a e0       	ldi	r25, 0x0A	; 10
   13726:	e9 2e       	mov	r14, r25
   13728:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  switch(uiResult){
   1372c:	83 30       	cpi	r24, 0x03	; 3
   1372e:	49 f0       	breq	.+18     	; 0x13742 <FMenuMaster+0x306>
   13730:	84 30       	cpi	r24, 0x04	; 4
   13732:	08 f4       	brcc	.+2      	; 0x13736 <FMenuMaster+0x2fa>
   13734:	ec c0       	rjmp	.+472    	; 0x1390e <FMenuMaster+0x4d2>
   13736:	84 30       	cpi	r24, 0x04	; 4
   13738:	69 f0       	breq	.+26     	; 0x13754 <FMenuMaster+0x318>
   1373a:	85 30       	cpi	r24, 0x05	; 5
   1373c:	09 f0       	breq	.+2      	; 0x13740 <FMenuMaster+0x304>
   1373e:	6c c1       	rjmp	.+728    	; 0x13a18 <FMenuMaster+0x5dc>
   13740:	0e c0       	rjmp	.+28     	; 0x1375e <FMenuMaster+0x322>
		  case USER_OK:               
			   //uart_printf(1,0,PSTR("GeniusCode: "));
			   //uart_print(1,1,strGeniusCode);
		       _datetime(0, strSystemDate, strSystemTime);
   13742:	80 e0       	ldi	r24, 0x00	; 0
   13744:	68 e9       	ldi	r22, 0x98	; 152
   13746:	74 e0       	ldi	r23, 0x04	; 4
   13748:	42 e5       	ldi	r20, 0x52	; 82
   1374a:	59 e0       	ldi	r21, 0x09	; 9
   1374c:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <_datetime>
               stMenuMaster=mmIsValidGeniusCode;
   13750:	84 e0       	ldi	r24, 0x04	; 4
   13752:	5b c1       	rjmp	.+694    	; 0x13a0a <FMenuMaster+0x5ce>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   13754:	84 e0       	ldi	r24, 0x04	; 4
   13756:	61 e0       	ldi	r22, 0x01	; 1
   13758:	43 e6       	ldi	r20, 0x63	; 99
   1375a:	58 e1       	ldi	r21, 0x18	; 24
   1375c:	ed c0       	rjmp	.+474    	; 0x13938 <FMenuMaster+0x4fc>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   1375e:	84 e0       	ldi	r24, 0x04	; 4
   13760:	61 e0       	ldi	r22, 0x01	; 1
   13762:	4e e4       	ldi	r20, 0x4E	; 78
   13764:	58 e1       	ldi	r21, 0x18	; 24
   13766:	e8 c0       	rjmp	.+464    	; 0x13938 <FMenuMaster+0x4fc>
		       break;
		  }
	      break;
     case mmIsValidGeniusCode:
	      //GetDate
		      sprintf_P(PDate,PSTR("%s"),strSystemDate);
   13768:	00 d0       	rcall	.+0      	; 0x1376a <FMenuMaster+0x32e>
   1376a:	00 d0       	rcall	.+0      	; 0x1376c <FMenuMaster+0x330>
   1376c:	00 d0       	rcall	.+0      	; 0x1376e <FMenuMaster+0x332>
   1376e:	ed b7       	in	r30, 0x3d	; 61
   13770:	fe b7       	in	r31, 0x3e	; 62
   13772:	31 96       	adiw	r30, 0x01	; 1
   13774:	8e 01       	movw	r16, r28
   13776:	05 5f       	subi	r16, 0xF5	; 245
   13778:	1f 4f       	sbci	r17, 0xFF	; 255
   1377a:	ad b7       	in	r26, 0x3d	; 61
   1377c:	be b7       	in	r27, 0x3e	; 62
   1377e:	12 96       	adiw	r26, 0x02	; 2
   13780:	1c 93       	st	X, r17
   13782:	0e 93       	st	-X, r16
   13784:	11 97       	sbiw	r26, 0x01	; 1
   13786:	8b e4       	ldi	r24, 0x4B	; 75
   13788:	98 e1       	ldi	r25, 0x18	; 24
   1378a:	93 83       	std	Z+3, r25	; 0x03
   1378c:	82 83       	std	Z+2, r24	; 0x02
   1378e:	88 e9       	ldi	r24, 0x98	; 152
   13790:	94 e0       	ldi	r25, 0x04	; 4
   13792:	95 83       	std	Z+5, r25	; 0x05
   13794:	84 83       	std	Z+4, r24	; 0x04
   13796:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  RemoveChar(PDate,'/');
   1379a:	ed b7       	in	r30, 0x3d	; 61
   1379c:	fe b7       	in	r31, 0x3e	; 62
   1379e:	36 96       	adiw	r30, 0x06	; 6
   137a0:	0f b6       	in	r0, 0x3f	; 63
   137a2:	f8 94       	cli
   137a4:	fe bf       	out	0x3e, r31	; 62
   137a6:	0f be       	out	0x3f, r0	; 63
   137a8:	ed bf       	out	0x3d, r30	; 61
   137aa:	c8 01       	movw	r24, r16
   137ac:	6f e2       	ldi	r22, 0x2F	; 47
   137ae:	0e 94 22 1a 	call	0x3444	; 0x3444 <RemoveChar>
		  if (ValidateGeniusCode(PDate,strGeniusCode)==GC_VALID){
   137b2:	c8 01       	movw	r24, r16
   137b4:	60 e7       	ldi	r22, 0x70	; 112
   137b6:	76 e0       	ldi	r23, 0x06	; 6
   137b8:	0e 94 d9 44 	call	0x89b2	; 0x89b2 <ValidateGeniusCode>
   137bc:	81 30       	cpi	r24, 0x01	; 1
   137be:	09 f0       	breq	.+2      	; 0x137c2 <FMenuMaster+0x386>
   137c0:	44 c0       	rjmp	.+136    	; 0x1384a <FMenuMaster+0x40e>

		  	  sprintf_P(PTime,PSTR("%s"),strSystemTime);
   137c2:	00 d0       	rcall	.+0      	; 0x137c4 <FMenuMaster+0x388>
   137c4:	00 d0       	rcall	.+0      	; 0x137c6 <FMenuMaster+0x38a>
   137c6:	00 d0       	rcall	.+0      	; 0x137c8 <FMenuMaster+0x38c>
   137c8:	ed b7       	in	r30, 0x3d	; 61
   137ca:	fe b7       	in	r31, 0x3e	; 62
   137cc:	31 96       	adiw	r30, 0x01	; 1
   137ce:	8e 01       	movw	r16, r28
   137d0:	0f 5f       	subi	r16, 0xFF	; 255
   137d2:	1f 4f       	sbci	r17, 0xFF	; 255
   137d4:	ad b7       	in	r26, 0x3d	; 61
   137d6:	be b7       	in	r27, 0x3e	; 62
   137d8:	12 96       	adiw	r26, 0x02	; 2
   137da:	1c 93       	st	X, r17
   137dc:	0e 93       	st	-X, r16
   137de:	11 97       	sbiw	r26, 0x01	; 1
   137e0:	88 e4       	ldi	r24, 0x48	; 72
   137e2:	98 e1       	ldi	r25, 0x18	; 24
   137e4:	93 83       	std	Z+3, r25	; 0x03
   137e6:	82 83       	std	Z+2, r24	; 0x02
   137e8:	82 e5       	ldi	r24, 0x52	; 82
   137ea:	99 e0       	ldi	r25, 0x09	; 9
   137ec:	95 83       	std	Z+5, r25	; 0x05
   137ee:	84 83       	std	Z+4, r24	; 0x04
   137f0:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
			  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
   137f4:	ed b7       	in	r30, 0x3d	; 61
   137f6:	fe b7       	in	r31, 0x3e	; 62
   137f8:	36 96       	adiw	r30, 0x06	; 6
   137fa:	0f b6       	in	r0, 0x3f	; 63
   137fc:	f8 94       	cli
   137fe:	fe bf       	out	0x3e, r31	; 62
   13800:	0f be       	out	0x3f, r0	; 63
   13802:	ed bf       	out	0x3d, r30	; 61
   13804:	c8 01       	movw	r24, r16
   13806:	6a e3       	ldi	r22, 0x3A	; 58
   13808:	0e 94 22 1a 	call	0x3444	; 0x3444 <RemoveChar>
   1380c:	00 d0       	rcall	.+0      	; 0x1380e <FMenuMaster+0x3d2>
   1380e:	00 d0       	rcall	.+0      	; 0x13810 <FMenuMaster+0x3d4>
   13810:	be ea       	ldi	r27, 0xAE	; 174
   13812:	eb 2e       	mov	r14, r27
   13814:	b8 e0       	ldi	r27, 0x08	; 8
   13816:	fb 2e       	mov	r15, r27
   13818:	ad b7       	in	r26, 0x3d	; 61
   1381a:	be b7       	in	r27, 0x3e	; 62
   1381c:	12 96       	adiw	r26, 0x02	; 2
   1381e:	fc 92       	st	X, r15
   13820:	ee 92       	st	-X, r14
   13822:	11 97       	sbiw	r26, 0x01	; 1
   13824:	87 e4       	ldi	r24, 0x47	; 71
   13826:	98 e1       	ldi	r25, 0x18	; 24
   13828:	14 96       	adiw	r26, 0x04	; 4
   1382a:	9c 93       	st	X, r25
   1382c:	8e 93       	st	-X, r24
   1382e:	13 97       	sbiw	r26, 0x03	; 3
   13830:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>

              //sprintf_P(strSend,PSTR("Time:%s"),PTime);
			  // uart_print(1,1,strSend);

		      GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);			  
   13834:	0f 90       	pop	r0
   13836:	0f 90       	pop	r0
   13838:	0f 90       	pop	r0
   1383a:	0f 90       	pop	r0
   1383c:	c8 01       	movw	r24, r16
   1383e:	60 e7       	ldi	r22, 0x70	; 112
   13840:	76 e0       	ldi	r23, 0x06	; 6
   13842:	a7 01       	movw	r20, r14
   13844:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <GenerateKeyStamp>
   13848:	cb c0       	rjmp	.+406    	; 0x139e0 <FMenuMaster+0x5a4>
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
   1384a:	85 e0       	ldi	r24, 0x05	; 5
   1384c:	de c0       	rjmp	.+444    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmDisplayInvalidCode:
	      system_beep(1);
   1384e:	81 e0       	ldi	r24, 0x01	; 1
   13850:	90 e0       	ldi	r25, 0x00	; 0
   13852:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
          lcd_printf(3,1,PSTR("Invalid Code        "));
   13856:	83 e0       	ldi	r24, 0x03	; 3
   13858:	61 e0       	ldi	r22, 0x01	; 1
   1385a:	42 e3       	ldi	r20, 0x32	; 50
   1385c:	58 e1       	ldi	r21, 0x18	; 24
   1385e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          TimDisplay=0; 
   13862:	10 92 70 02 	sts	0x0270, r1
		  stMenuMaster=mmDelayDisplayInvalidCode;
   13866:	86 e0       	ldi	r24, 0x06	; 6
   13868:	d0 c0       	rjmp	.+416    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;

     case mmDelayDisplayInvalidCode:
	      if (TimDisplay>5)stMenuMaster=mmRestorePasswordMenu;
   1386a:	80 91 70 02 	lds	r24, 0x0270
   1386e:	86 30       	cpi	r24, 0x06	; 6
   13870:	08 f4       	brcc	.+2      	; 0x13874 <FMenuMaster+0x438>
   13872:	d2 c0       	rjmp	.+420    	; 0x13a18 <FMenuMaster+0x5dc>
   13874:	82 e0       	ldi	r24, 0x02	; 2
   13876:	c9 c0       	rjmp	.+402    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmDisplayKeyStamp:
	      lcd_clear();
   13878:	0e 94 be a0 	call	0x1417c	; 0x1417c <lcd_clear>
		  sprintf_P(lcdteks,PSTR("Key Stamp:%s "),strKeyStamp);
   1387c:	00 d0       	rcall	.+0      	; 0x1387e <FMenuMaster+0x442>
   1387e:	00 d0       	rcall	.+0      	; 0x13880 <FMenuMaster+0x444>
   13880:	00 d0       	rcall	.+0      	; 0x13882 <FMenuMaster+0x446>
   13882:	ed b7       	in	r30, 0x3d	; 61
   13884:	fe b7       	in	r31, 0x3e	; 62
   13886:	31 96       	adiw	r30, 0x01	; 1
   13888:	8e 01       	movw	r16, r28
   1388a:	01 5e       	subi	r16, 0xE1	; 225
   1388c:	1f 4f       	sbci	r17, 0xFF	; 255
   1388e:	ad b7       	in	r26, 0x3d	; 61
   13890:	be b7       	in	r27, 0x3e	; 62
   13892:	12 96       	adiw	r26, 0x02	; 2
   13894:	1c 93       	st	X, r17
   13896:	0e 93       	st	-X, r16
   13898:	11 97       	sbiw	r26, 0x01	; 1
   1389a:	84 e2       	ldi	r24, 0x24	; 36
   1389c:	98 e1       	ldi	r25, 0x18	; 24
   1389e:	93 83       	std	Z+3, r25	; 0x03
   138a0:	82 83       	std	Z+2, r24	; 0x02
   138a2:	8e ea       	ldi	r24, 0xAE	; 174
   138a4:	98 e0       	ldi	r25, 0x08	; 8
   138a6:	95 83       	std	Z+5, r25	; 0x05
   138a8:	84 83       	std	Z+4, r24	; 0x04
   138aa:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  lcd_print(1,1,lcdteks);
   138ae:	ed b7       	in	r30, 0x3d	; 61
   138b0:	fe b7       	in	r31, 0x3e	; 62
   138b2:	36 96       	adiw	r30, 0x06	; 6
   138b4:	0f b6       	in	r0, 0x3f	; 63
   138b6:	f8 94       	cli
   138b8:	fe bf       	out	0x3e, r31	; 62
   138ba:	0f be       	out	0x3f, r0	; 63
   138bc:	ed bf       	out	0x3d, r30	; 61
   138be:	81 e0       	ldi	r24, 0x01	; 1
   138c0:	61 e0       	ldi	r22, 0x01	; 1
   138c2:	a8 01       	movw	r20, r16
   138c4:	0e 94 5d a0 	call	0x140ba	; 0x140ba <lcd_print>
		  lcd_printf(2,1,PSTR("Enter Restore Code  "));
   138c8:	82 e0       	ldi	r24, 0x02	; 2
   138ca:	61 e0       	ldi	r22, 0x01	; 1
   138cc:	4f e0       	ldi	r20, 0x0F	; 15
   138ce:	58 e1       	ldi	r21, 0x18	; 24
   138d0:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(3,1,PSTR("_                   "));
   138d4:	83 e0       	ldi	r24, 0x03	; 3
   138d6:	61 e0       	ldi	r22, 0x01	; 1
   138d8:	4a ef       	ldi	r20, 0xFA	; 250
   138da:	57 e1       	ldi	r21, 0x17	; 23
   138dc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   138e0:	84 e0       	ldi	r24, 0x04	; 4
   138e2:	61 e0       	ldi	r22, 0x01	; 1
   138e4:	45 ee       	ldi	r20, 0xE5	; 229
   138e6:	57 e1       	ldi	r21, 0x17	; 23
   138e8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
          stMenuMaster=mmRestoreCodeEntry;
   138ec:	88 e0       	ldi	r24, 0x08	; 8
   138ee:	8d c0       	rjmp	.+282    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmRestoreCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,3,1,strRestoreCode,0,10);
   138f0:	81 e0       	ldi	r24, 0x01	; 1
   138f2:	63 e0       	ldi	r22, 0x03	; 3
   138f4:	41 e0       	ldi	r20, 0x01	; 1
   138f6:	29 e3       	ldi	r18, 0x39	; 57
   138f8:	3d e0       	ldi	r19, 0x0D	; 13
   138fa:	00 e0       	ldi	r16, 0x00	; 0
   138fc:	10 e0       	ldi	r17, 0x00	; 0
   138fe:	aa e0       	ldi	r26, 0x0A	; 10
   13900:	ea 2e       	mov	r14, r26
   13902:	0e 94 71 38 	call	0x70e2	; 0x70e2 <UserInput>
		  switch(uiResult){
   13906:	83 30       	cpi	r24, 0x03	; 3
   13908:	61 f0       	breq	.+24     	; 0x13922 <FMenuMaster+0x4e6>
   1390a:	84 30       	cpi	r24, 0x04	; 4
   1390c:	20 f4       	brcc	.+8      	; 0x13916 <FMenuMaster+0x4da>
   1390e:	81 30       	cpi	r24, 0x01	; 1
   13910:	09 f0       	breq	.+2      	; 0x13914 <FMenuMaster+0x4d8>
   13912:	82 c0       	rjmp	.+260    	; 0x13a18 <FMenuMaster+0x5dc>
   13914:	79 c0       	rjmp	.+242    	; 0x13a08 <FMenuMaster+0x5cc>
   13916:	84 30       	cpi	r24, 0x04	; 4
   13918:	31 f0       	breq	.+12     	; 0x13926 <FMenuMaster+0x4ea>
   1391a:	85 30       	cpi	r24, 0x05	; 5
   1391c:	09 f0       	breq	.+2      	; 0x13920 <FMenuMaster+0x4e4>
   1391e:	7c c0       	rjmp	.+248    	; 0x13a18 <FMenuMaster+0x5dc>
   13920:	07 c0       	rjmp	.+14     	; 0x13930 <FMenuMaster+0x4f4>
		  case USER_OK:
               stMenuMaster=mmIsValidRestoreCode;
   13922:	89 e0       	ldi	r24, 0x09	; 9
   13924:	72 c0       	rjmp	.+228    	; 0x13a0a <FMenuMaster+0x5ce>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   13926:	84 e0       	ldi	r24, 0x04	; 4
   13928:	61 e0       	ldi	r22, 0x01	; 1
   1392a:	40 ed       	ldi	r20, 0xD0	; 208
   1392c:	57 e1       	ldi	r21, 0x17	; 23
   1392e:	04 c0       	rjmp	.+8      	; 0x13938 <FMenuMaster+0x4fc>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   13930:	84 e0       	ldi	r24, 0x04	; 4
   13932:	61 e0       	ldi	r22, 0x01	; 1
   13934:	4b eb       	ldi	r20, 0xBB	; 187
   13936:	57 e1       	ldi	r21, 0x17	; 23
   13938:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
   1393c:	6d c0       	rjmp	.+218    	; 0x13a18 <FMenuMaster+0x5dc>
		       break;
		  }
	      break;
     case mmIsValidRestoreCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
   1393e:	8e ea       	ldi	r24, 0xAE	; 174
   13940:	98 e0       	ldi	r25, 0x08	; 8
   13942:	69 e3       	ldi	r22, 0x39	; 57
   13944:	7d e0       	ldi	r23, 0x0D	; 13
   13946:	0e 94 11 1b 	call	0x3622	; 0x3622 <ValidateRestoreCode>
   1394a:	81 30       	cpi	r24, 0x01	; 1
   1394c:	11 f4       	brne	.+4      	; 0x13952 <FMenuMaster+0x516>
		      stMenuMaster=mmRestorePassword;
   1394e:	8c e0       	ldi	r24, 0x0C	; 12
   13950:	5c c0       	rjmp	.+184    	; 0x13a0a <FMenuMaster+0x5ce>
		  }else stMenuMaster=mmDisplayInvalidRestoreCode;
   13952:	8a e0       	ldi	r24, 0x0A	; 10
   13954:	5a c0       	rjmp	.+180    	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmRestorePassword:
	      sprintf_P(strNewPassword,PSTR(SPV_DEFAULT_PASS));
   13956:	00 d0       	rcall	.+0      	; 0x13958 <FMenuMaster+0x51c>
   13958:	00 d0       	rcall	.+0      	; 0x1395a <FMenuMaster+0x51e>
   1395a:	8e 01       	movw	r16, r28
   1395c:	0b 5e       	subi	r16, 0xEB	; 235
   1395e:	1f 4f       	sbci	r17, 0xFF	; 255
   13960:	ad b7       	in	r26, 0x3d	; 61
   13962:	be b7       	in	r27, 0x3e	; 62
   13964:	12 96       	adiw	r26, 0x02	; 2
   13966:	1c 93       	st	X, r17
   13968:	0e 93       	st	-X, r16
   1396a:	11 97       	sbiw	r26, 0x01	; 1
   1396c:	85 eb       	ldi	r24, 0xB5	; 181
   1396e:	97 e1       	ldi	r25, 0x17	; 23
   13970:	14 96       	adiw	r26, 0x04	; 4
   13972:	9c 93       	st	X, r25
   13974:	8e 93       	st	-X, r24
   13976:	13 97       	sbiw	r26, 0x03	; 3
   13978:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSpvPassword,sizeof(DefSpvPassword));
   1397c:	0f 90       	pop	r0
   1397e:	0f 90       	pop	r0
   13980:	0f 90       	pop	r0
   13982:	0f 90       	pop	r0
   13984:	c8 01       	movw	r24, r16
   13986:	61 e0       	ldi	r22, 0x01	; 1
   13988:	70 e0       	ldi	r23, 0x00	; 0
   1398a:	4a e0       	ldi	r20, 0x0A	; 10
   1398c:	50 e0       	ldi	r21, 0x00	; 0
   1398e:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
		  sprintf_P(strNewPassword,PSTR(SYS_DEFAULT_PASS));
   13992:	00 d0       	rcall	.+0      	; 0x13994 <FMenuMaster+0x558>
   13994:	00 d0       	rcall	.+0      	; 0x13996 <FMenuMaster+0x55a>
   13996:	ed b7       	in	r30, 0x3d	; 61
   13998:	fe b7       	in	r31, 0x3e	; 62
   1399a:	12 83       	std	Z+2, r17	; 0x02
   1399c:	01 83       	std	Z+1, r16	; 0x01
   1399e:	8f ea       	ldi	r24, 0xAF	; 175
   139a0:	97 e1       	ldi	r25, 0x17	; 23
   139a2:	94 83       	std	Z+4, r25	; 0x04
   139a4:	83 83       	std	Z+3, r24	; 0x03
   139a6:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSysPassword,sizeof(DefSysPassword));	      		  
   139aa:	0f 90       	pop	r0
   139ac:	0f 90       	pop	r0
   139ae:	0f 90       	pop	r0
   139b0:	0f 90       	pop	r0
   139b2:	c8 01       	movw	r24, r16
   139b4:	6b e0       	ldi	r22, 0x0B	; 11
   139b6:	70 e0       	ldi	r23, 0x00	; 0
   139b8:	4a e0       	ldi	r20, 0x0A	; 10
   139ba:	50 e0       	ldi	r21, 0x00	; 0
   139bc:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <__eewr_block_m128>
	      stMenuMaster=mmDisplaySuccess;
   139c0:	8d e0       	ldi	r24, 0x0D	; 13
   139c2:	23 c0       	rjmp	.+70     	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmDisplayInvalidRestoreCode:
	      lcd_printf(3,1,PSTR("Invalid Restore  "));
   139c4:	83 e0       	ldi	r24, 0x03	; 3
   139c6:	61 e0       	ldi	r22, 0x01	; 1
   139c8:	4d e9       	ldi	r20, 0x9D	; 157
   139ca:	57 e1       	ldi	r21, 0x17	; 23
   139cc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  TimDisplay=0;
   139d0:	10 92 70 02 	sts	0x0270, r1
          stMenuMaster=mmDelayInvalidRestoreCode;
   139d4:	8b e0       	ldi	r24, 0x0B	; 11
   139d6:	19 c0       	rjmp	.+50     	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmDelayInvalidRestoreCode:
	      if (TimDisplay>5)stMenuMaster=mmDisplayKeyStamp;
   139d8:	80 91 70 02 	lds	r24, 0x0270
   139dc:	86 30       	cpi	r24, 0x06	; 6
   139de:	e0 f0       	brcs	.+56     	; 0x13a18 <FMenuMaster+0x5dc>
   139e0:	87 e0       	ldi	r24, 0x07	; 7
   139e2:	13 c0       	rjmp	.+38     	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
   139e4:	83 e0       	ldi	r24, 0x03	; 3
   139e6:	61 e0       	ldi	r22, 0x01	; 1
   139e8:	4b e8       	ldi	r20, 0x8B	; 139
   139ea:	57 e1       	ldi	r21, 0x17	; 23
   139ec:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  system_beep(1);
   139f0:	81 e0       	ldi	r24, 0x01	; 1
   139f2:	90 e0       	ldi	r25, 0x00	; 0
   139f4:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
		  TimDisplay=0;
   139f8:	10 92 70 02 	sts	0x0270, r1
          stMenuMaster=mmDelayExit;
   139fc:	8f e0       	ldi	r24, 0x0F	; 15
   139fe:	05 c0       	rjmp	.+10     	; 0x13a0a <FMenuMaster+0x5ce>
	      break;
     case mmDelayExit:
	      if (TimDisplay>=5)stMenuMaster=mmExitMaster;
   13a00:	80 91 70 02 	lds	r24, 0x0270
   13a04:	85 30       	cpi	r24, 0x05	; 5
   13a06:	40 f0       	brcs	.+16     	; 0x13a18 <FMenuMaster+0x5dc>
   13a08:	80 e1       	ldi	r24, 0x10	; 16
   13a0a:	80 93 2a 03 	sts	0x032A, r24
   13a0e:	04 c0       	rjmp	.+8      	; 0x13a18 <FMenuMaster+0x5dc>
	      break;
     case mmExitMaster:
	      stMenuMaster=mmInitMaster;
   13a10:	10 92 2a 03 	sts	0x032A, r1
	      Result=MENU_DONE;
   13a14:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   13a16:	01 c0       	rjmp	.+2      	; 0x13a1a <FMenuMaster+0x5de>
   return Result;
}

char FMenuMaster(){ 
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
   13a18:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;

}
   13a1a:	e2 96       	adiw	r28, 0x32	; 50
   13a1c:	0f b6       	in	r0, 0x3f	; 63
   13a1e:	f8 94       	cli
   13a20:	de bf       	out	0x3e, r29	; 62
   13a22:	0f be       	out	0x3f, r0	; 63
   13a24:	cd bf       	out	0x3d, r28	; 61
   13a26:	cf 91       	pop	r28
   13a28:	df 91       	pop	r29
   13a2a:	1f 91       	pop	r17
   13a2c:	0f 91       	pop	r16
   13a2e:	ff 90       	pop	r15
   13a30:	ef 90       	pop	r14
   13a32:	df 90       	pop	r13
   13a34:	cf 90       	pop	r12
   13a36:	08 95       	ret

00013a38 <FMenuAuthorization>:


char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
static char stMenuAuthorization=maInit,PassTry=0;
     switch(stMenuAuthorization){
   13a38:	80 91 38 03 	lds	r24, 0x0338
   13a3c:	83 30       	cpi	r24, 0x03	; 3
   13a3e:	51 f1       	breq	.+84     	; 0x13a94 <FMenuAuthorization+0x5c>
   13a40:	84 30       	cpi	r24, 0x04	; 4
   13a42:	28 f4       	brcc	.+10     	; 0x13a4e <FMenuAuthorization+0x16>
   13a44:	81 30       	cpi	r24, 0x01	; 1
   13a46:	81 f0       	breq	.+32     	; 0x13a68 <FMenuAuthorization+0x30>
   13a48:	82 30       	cpi	r24, 0x02	; 2
   13a4a:	38 f5       	brcc	.+78     	; 0x13a9a <FMenuAuthorization+0x62>
   13a4c:	0a c0       	rjmp	.+20     	; 0x13a62 <FMenuAuthorization+0x2a>
   13a4e:	85 30       	cpi	r24, 0x05	; 5
   13a50:	61 f1       	breq	.+88     	; 0x13aaa <FMenuAuthorization+0x72>
   13a52:	85 30       	cpi	r24, 0x05	; 5
   13a54:	28 f1       	brcs	.+74     	; 0x13aa0 <FMenuAuthorization+0x68>
   13a56:	86 30       	cpi	r24, 0x06	; 6
   13a58:	d9 f1       	breq	.+118    	; 0x13ad0 <FMenuAuthorization+0x98>
   13a5a:	87 30       	cpi	r24, 0x07	; 7
   13a5c:	09 f0       	breq	.+2      	; 0x13a60 <FMenuAuthorization+0x28>
   13a5e:	4a c0       	rjmp	.+148    	; 0x13af4 <FMenuAuthorization+0xbc>
   13a60:	45 c0       	rjmp	.+138    	; 0x13aec <FMenuAuthorization+0xb4>
	 case maInit:
	      PassTry=0;
   13a62:	10 92 37 03 	sts	0x0337, r1
   13a66:	3c c0       	rjmp	.+120    	; 0x13ae0 <FMenuAuthorization+0xa8>
		  stMenuAuthorization=maInputPassword;
	      break;
	 case maInputPassword:
	      PassResult=FMenuPassword();
   13a68:	0e 94 98 4f 	call	0x9f30	; 0x9f30 <FMenuPassword>
		  switch(PassResult){
   13a6c:	83 30       	cpi	r24, 0x03	; 3
   13a6e:	d9 f1       	breq	.+118    	; 0x13ae6 <FMenuAuthorization+0xae>
   13a70:	84 30       	cpi	r24, 0x04	; 4
   13a72:	28 f4       	brcc	.+10     	; 0x13a7e <FMenuAuthorization+0x46>
   13a74:	81 30       	cpi	r24, 0x01	; 1
   13a76:	b1 f1       	breq	.+108    	; 0x13ae4 <FMenuAuthorization+0xac>
   13a78:	82 30       	cpi	r24, 0x02	; 2
   13a7a:	e1 f5       	brne	.+120    	; 0x13af4 <FMenuAuthorization+0xbc>
   13a7c:	09 c0       	rjmp	.+18     	; 0x13a90 <FMenuAuthorization+0x58>
   13a7e:	84 30       	cpi	r24, 0x04	; 4
   13a80:	19 f0       	breq	.+6      	; 0x13a88 <FMenuAuthorization+0x50>
   13a82:	85 30       	cpi	r24, 0x05	; 5
   13a84:	b9 f5       	brne	.+110    	; 0x13af4 <FMenuAuthorization+0xbc>
   13a86:	02 c0       	rjmp	.+4      	; 0x13a8c <FMenuAuthorization+0x54>
		  case MP_VALID_ADMIN:
		       stMenuAuthorization=maMenuAdmin;
   13a88:	82 e0       	ldi	r24, 0x02	; 2
   13a8a:	2d c0       	rjmp	.+90     	; 0x13ae6 <FMenuAuthorization+0xae>
		       break;
		  case MP_VALID_SYSTEM:
		       stMenuAuthorization=maMenuSettings;
   13a8c:	84 e0       	ldi	r24, 0x04	; 4
   13a8e:	2b c0       	rjmp	.+86     	; 0x13ae6 <FMenuAuthorization+0xae>
		       break;
		  case MP_INVALID:
		       stMenuAuthorization=maInvalidAuthorization;
   13a90:	85 e0       	ldi	r24, 0x05	; 5
   13a92:	29 c0       	rjmp	.+82     	; 0x13ae6 <FMenuAuthorization+0xae>
		  else
	      if (PassResult==MP_CANCEL)stMenuAuthorization=maExitAuthorization;
		  */
	      break;
	 case maMenuMaster:
	      SubMenu=FMenuMaster();
   13a94:	0e 94 1e 9a 	call	0x1343c	; 0x1343c <FMenuMaster>
   13a98:	05 c0       	rjmp	.+10     	; 0x13aa4 <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
	      break;
	 case maMenuAdmin:
          SubMenu=FMenuAdmin();
   13a9a:	0e 94 d0 8e 	call	0x11da0	; 0x11da0 <FMenuAdmin>
   13a9e:	02 c0       	rjmp	.+4      	; 0x13aa4 <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;          
		  break;
	 case maMenuSettings:
	      SubMenu=FMenuSettings();
   13aa0:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <FMenuSettings>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
   13aa4:	81 30       	cpi	r24, 0x01	; 1
   13aa6:	31 f5       	brne	.+76     	; 0x13af4 <FMenuAuthorization+0xbc>
   13aa8:	1d c0       	rjmp	.+58     	; 0x13ae4 <FMenuAuthorization+0xac>
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
   13aaa:	80 91 37 03 	lds	r24, 0x0337
   13aae:	8f 5f       	subi	r24, 0xFF	; 255
   13ab0:	80 93 37 03 	sts	0x0337, r24
	      TimDisplay=0;
   13ab4:	10 92 70 02 	sts	0x0270, r1
		  system_beep(1);
   13ab8:	81 e0       	ldi	r24, 0x01	; 1
   13aba:	90 e0       	ldi	r25, 0x00	; 0
   13abc:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
		  lcd_printf(3,1,PSTR("Access Denied"));
   13ac0:	83 e0       	ldi	r24, 0x03	; 3
   13ac2:	61 e0       	ldi	r22, 0x01	; 1
   13ac4:	4e e2       	ldi	r20, 0x2E	; 46
   13ac6:	5a e1       	ldi	r21, 0x1A	; 26
   13ac8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		  stMenuAuthorization=maDelayExitAuthorization;
   13acc:	86 e0       	ldi	r24, 0x06	; 6
   13ace:	0b c0       	rjmp	.+22     	; 0x13ae6 <FMenuAuthorization+0xae>
          break;	 
	 case maDelayExitAuthorization:
	      if (TimDisplay>2){
   13ad0:	80 91 70 02 	lds	r24, 0x0270
   13ad4:	83 30       	cpi	r24, 0x03	; 3
   13ad6:	80 f0       	brcs	.+32     	; 0x13af8 <FMenuAuthorization+0xc0>
		      if (PassTry<3)stMenuAuthorization=maInputPassword;
   13ad8:	80 91 37 03 	lds	r24, 0x0337
   13adc:	83 30       	cpi	r24, 0x03	; 3
   13ade:	10 f4       	brcc	.+4      	; 0x13ae4 <FMenuAuthorization+0xac>
   13ae0:	81 e0       	ldi	r24, 0x01	; 1
   13ae2:	01 c0       	rjmp	.+2      	; 0x13ae6 <FMenuAuthorization+0xae>
			  else stMenuAuthorization=maExitAuthorization;
   13ae4:	87 e0       	ldi	r24, 0x07	; 7
   13ae6:	80 93 38 03 	sts	0x0338, r24
   13aea:	04 c0       	rjmp	.+8      	; 0x13af4 <FMenuAuthorization+0xbc>
		  }
	      break;
	 case maExitAuthorization:
	      stMenuAuthorization=maInit;
   13aec:	10 92 38 03 	sts	0x0338, r1
	      Result=MENU_DONE;
   13af0:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   13af2:	08 95       	ret
}



char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
   13af4:	80 e0       	ldi	r24, 0x00	; 0
   13af6:	08 95       	ret
   13af8:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuAuthorization=maInit;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;	 
}
   13afa:	08 95       	ret

00013afc <FMenuIdle>:
	     ProcTimeOut++;
	}
	TimSend++;
}

void FMenuIdle(){
   13afc:	1f 93       	push	r17
	static char stMenuIdle=miInit,ButtonID=0;
	       char PrintStandaloneResult=PS_NONE;
	       char KeyPressed=0,KeyChar=0;
	       char lcdteks[20];

	switch(stMenuIdle){
   13afe:	e0 91 8a 03 	lds	r30, 0x038A
   13b02:	f0 e0       	ldi	r31, 0x00	; 0
   13b04:	e9 31       	cpi	r30, 0x19	; 25
   13b06:	f1 05       	cpc	r31, r1
   13b08:	08 f0       	brcs	.+2      	; 0x13b0c <FMenuIdle+0x10>
   13b0a:	73 c1       	rjmp	.+742    	; 0x13df2 <FMenuIdle+0x2f6>
   13b0c:	e9 5f       	subi	r30, 0xF9	; 249
   13b0e:	fe 4f       	sbci	r31, 0xFE	; 254
   13b10:	ee 0f       	add	r30, r30
   13b12:	ff 1f       	adc	r31, r31
   13b14:	05 90       	lpm	r0, Z+
   13b16:	f4 91       	lpm	r31, Z+
   13b18:	e0 2d       	mov	r30, r0
   13b1a:	09 94       	ijmp
	case miInit:
         DisplayScreenIdle();
   13b1c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <DisplayScreenIdle>
   13b20:	2f c1       	rjmp	.+606    	; 0x13d80 <FMenuIdle+0x284>
		 stMenuIdle=miScan;		
	     break;
	case miScan:
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
   13b22:	81 e0       	ldi	r24, 0x01	; 1
   13b24:	0e 94 68 a1 	call	0x142d0	; 0x142d0 <_key_scan>
   13b28:	18 2f       	mov	r17, r24
		 KeyChar= _key_btn(KeyPressed);       
   13b2a:	0e 94 5d a1 	call	0x142ba	; 0x142ba <_key_btn>

		 switch(KeyPressed){
   13b2e:	1b 3b       	cpi	r17, 0xBB	; 187
   13b30:	09 f4       	brne	.+2      	; 0x13b34 <FMenuIdle+0x38>
   13b32:	70 c0       	rjmp	.+224    	; 0x13c14 <FMenuIdle+0x118>
   13b34:	1c 3b       	cpi	r17, 0xBC	; 188
   13b36:	70 f4       	brcc	.+28     	; 0x13b54 <FMenuIdle+0x58>
   13b38:	1b 37       	cpi	r17, 0x7B	; 123
   13b3a:	61 f1       	breq	.+88     	; 0x13b94 <FMenuIdle+0x98>
   13b3c:	1c 37       	cpi	r17, 0x7C	; 124
   13b3e:	20 f4       	brcc	.+8      	; 0x13b48 <FMenuIdle+0x4c>
   13b40:	17 37       	cpi	r17, 0x77	; 119
   13b42:	09 f0       	breq	.+2      	; 0x13b46 <FMenuIdle+0x4a>
   13b44:	56 c1       	rjmp	.+684    	; 0x13df2 <FMenuIdle+0x2f6>
   13b46:	2c c0       	rjmp	.+88     	; 0x13ba0 <FMenuIdle+0xa4>
   13b48:	1d 37       	cpi	r17, 0x7D	; 125
   13b4a:	e1 f0       	breq	.+56     	; 0x13b84 <FMenuIdle+0x88>
   13b4c:	1e 37       	cpi	r17, 0x7E	; 126
   13b4e:	09 f0       	breq	.+2      	; 0x13b52 <FMenuIdle+0x56>
   13b50:	50 c1       	rjmp	.+672    	; 0x13df2 <FMenuIdle+0x2f6>
   13b52:	12 c0       	rjmp	.+36     	; 0x13b78 <FMenuIdle+0x7c>
   13b54:	1d 3d       	cpi	r17, 0xDD	; 221
   13b56:	09 f4       	brne	.+2      	; 0x13b5a <FMenuIdle+0x5e>
   13b58:	47 c0       	rjmp	.+142    	; 0x13be8 <FMenuIdle+0xec>
   13b5a:	1e 3d       	cpi	r17, 0xDE	; 222
   13b5c:	38 f4       	brcc	.+14     	; 0x13b6c <FMenuIdle+0x70>
   13b5e:	1d 3b       	cpi	r17, 0xBD	; 189
   13b60:	09 f4       	brne	.+2      	; 0x13b64 <FMenuIdle+0x68>
   13b62:	4d c0       	rjmp	.+154    	; 0x13bfe <FMenuIdle+0x102>
   13b64:	17 3d       	cpi	r17, 0xD7	; 215
   13b66:	09 f0       	breq	.+2      	; 0x13b6a <FMenuIdle+0x6e>
   13b68:	44 c1       	rjmp	.+648    	; 0x13df2 <FMenuIdle+0x2f6>
   13b6a:	22 c0       	rjmp	.+68     	; 0x13bb0 <FMenuIdle+0xb4>
   13b6c:	1e 3d       	cpi	r17, 0xDE	; 222
   13b6e:	31 f1       	breq	.+76     	; 0x13bbc <FMenuIdle+0xc0>
   13b70:	1d 3e       	cpi	r17, 0xED	; 237
   13b72:	09 f0       	breq	.+2      	; 0x13b76 <FMenuIdle+0x7a>
   13b74:	3e c1       	rjmp	.+636    	; 0x13df2 <FMenuIdle+0x2f6>
   13b76:	2d c0       	rjmp	.+90     	; 0x13bd2 <FMenuIdle+0xd6>
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
   13b78:	82 e0       	ldi	r24, 0x02	; 2
   13b7a:	90 e0       	ldi	r25, 0x00	; 0
   13b7c:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13b80:	81 e0       	ldi	r24, 0x01	; 1
   13b82:	13 c0       	rjmp	.+38     	; 0x13baa <FMenuIdle+0xae>
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
   13b84:	82 e0       	ldi	r24, 0x02	; 2
   13b86:	90 e0       	ldi	r25, 0x00	; 0
   13b88:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13b8c:	82 e0       	ldi	r24, 0x02	; 2
   13b8e:	80 93 89 03 	sts	0x0389, r24
   13b92:	2d c1       	rjmp	.+602    	; 0x13dee <FMenuIdle+0x2f2>
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
   13b94:	82 e0       	ldi	r24, 0x02	; 2
   13b96:	90 e0       	ldi	r25, 0x00	; 0
   13b98:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13b9c:	83 e0       	ldi	r24, 0x03	; 3
   13b9e:	05 c0       	rjmp	.+10     	; 0x13baa <FMenuIdle+0xae>
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
   13ba0:	82 e0       	ldi	r24, 0x02	; 2
   13ba2:	90 e0       	ldi	r25, 0x00	; 0
   13ba4:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13ba8:	84 e0       	ldi	r24, 0x04	; 4
   13baa:	80 93 89 03 	sts	0x0389, r24
   13bae:	4c c0       	rjmp	.+152    	; 0x13c48 <FMenuIdle+0x14c>
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
   13bb0:	82 e0       	ldi	r24, 0x02	; 2
   13bb2:	90 e0       	ldi	r25, 0x00	; 0
   13bb4:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13bb8:	8c e0       	ldi	r24, 0x0C	; 12
   13bba:	19 c1       	rjmp	.+562    	; 0x13dee <FMenuIdle+0x2f2>
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   13bbc:	80 91 00 01 	lds	r24, 0x0100
   13bc0:	81 30       	cpi	r24, 0x01	; 1
   13bc2:	09 f0       	breq	.+2      	; 0x13bc6 <FMenuIdle+0xca>
   13bc4:	16 c1       	rjmp	.+556    	; 0x13df2 <FMenuIdle+0x2f6>
   13bc6:	82 e0       	ldi	r24, 0x02	; 2
   13bc8:	90 e0       	ldi	r25, 0x00	; 0
   13bca:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13bce:	80 e1       	ldi	r24, 0x10	; 16
   13bd0:	0e c1       	rjmp	.+540    	; 0x13dee <FMenuIdle+0x2f2>
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   13bd2:	80 91 00 01 	lds	r24, 0x0100
   13bd6:	81 30       	cpi	r24, 0x01	; 1
   13bd8:	09 f0       	breq	.+2      	; 0x13bdc <FMenuIdle+0xe0>
   13bda:	0b c1       	rjmp	.+534    	; 0x13df2 <FMenuIdle+0x2f6>
   13bdc:	82 e0       	ldi	r24, 0x02	; 2
   13bde:	90 e0       	ldi	r25, 0x00	; 0
   13be0:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13be4:	82 e1       	ldi	r24, 0x12	; 18
   13be6:	03 c1       	rjmp	.+518    	; 0x13dee <FMenuIdle+0x2f2>
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   13be8:	80 91 00 01 	lds	r24, 0x0100
   13bec:	81 30       	cpi	r24, 0x01	; 1
   13bee:	09 f0       	breq	.+2      	; 0x13bf2 <FMenuIdle+0xf6>
   13bf0:	00 c1       	rjmp	.+512    	; 0x13df2 <FMenuIdle+0x2f6>
   13bf2:	82 e0       	ldi	r24, 0x02	; 2
   13bf4:	90 e0       	ldi	r25, 0x00	; 0
   13bf6:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13bfa:	81 e1       	ldi	r24, 0x11	; 17
   13bfc:	f8 c0       	rjmp	.+496    	; 0x13dee <FMenuIdle+0x2f2>
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   13bfe:	80 91 00 01 	lds	r24, 0x0100
   13c02:	81 30       	cpi	r24, 0x01	; 1
   13c04:	09 f0       	breq	.+2      	; 0x13c08 <FMenuIdle+0x10c>
   13c06:	f5 c0       	rjmp	.+490    	; 0x13df2 <FMenuIdle+0x2f6>
   13c08:	82 e0       	ldi	r24, 0x02	; 2
   13c0a:	90 e0       	ldi	r25, 0x00	; 0
   13c0c:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13c10:	8f e0       	ldi	r24, 0x0F	; 15
   13c12:	ed c0       	rjmp	.+474    	; 0x13dee <FMenuIdle+0x2f2>
		 //case _KEY_8:    system_beep(2);           stMenuIdle=miRunTestChar;   break;
		 case _KEY_9:    system_beep(2);stMenuIdle=miRunAuth;      break;
   13c14:	82 e0       	ldi	r24, 0x02	; 2
   13c16:	90 e0       	ldi	r25, 0x00	; 0
   13c18:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
   13c1c:	8d e0       	ldi	r24, 0x0D	; 13
   13c1e:	e7 c0       	rjmp	.+462    	; 0x13dee <FMenuIdle+0x2f2>
		 }
	     break;
    case miTestMsg56:
	     sprintf_P(strCardID,PSTR("4356A31A"));
   13c20:	00 d0       	rcall	.+0      	; 0x13c22 <FMenuIdle+0x126>
   13c22:	00 d0       	rcall	.+0      	; 0x13c24 <FMenuIdle+0x128>
   13c24:	87 e6       	ldi	r24, 0x67	; 103
   13c26:	9c e0       	ldi	r25, 0x0C	; 12
   13c28:	ed b7       	in	r30, 0x3d	; 61
   13c2a:	fe b7       	in	r31, 0x3e	; 62
   13c2c:	92 83       	std	Z+2, r25	; 0x02
   13c2e:	81 83       	std	Z+1, r24	; 0x01
   13c30:	85 ed       	ldi	r24, 0xD5	; 213
   13c32:	94 e2       	ldi	r25, 0x24	; 36
   13c34:	94 83       	std	Z+4, r25	; 0x04
   13c36:	83 83       	std	Z+3, r24	; 0x03
   13c38:	0e 94 24 a6 	call	0x14c48	; 0x14c48 <sprintf_P>
	     sendMessage56();
   13c3c:	0f 90       	pop	r0
   13c3e:	0f 90       	pop	r0
   13c40:	0f 90       	pop	r0
   13c42:	0f 90       	pop	r0
   13c44:	0e 94 29 2a 	call	0x5452	; 0x5452 <sendMessage56>
         stMenuIdle=miDisplayProses;
   13c48:	82 e0       	ldi	r24, 0x02	; 2
   13c4a:	d1 c0       	rjmp	.+418    	; 0x13dee <FMenuIdle+0x2f2>
	     break;
	case miDisplayProses:
	     if (IsBusyIdlePrinting==False){
   13c4c:	80 91 90 02 	lds	r24, 0x0290
   13c50:	88 23       	and	r24, r24
   13c52:	09 f0       	breq	.+2      	; 0x13c56 <FMenuIdle+0x15a>
   13c54:	95 c0       	rjmp	.+298    	; 0x13d80 <FMenuIdle+0x284>
		     lcd_printf(3,1,PSTR("SedangProses"));
   13c56:	83 e0       	ldi	r24, 0x03	; 3
   13c58:	61 e0       	ldi	r22, 0x01	; 1
   13c5a:	48 ec       	ldi	r20, 0xC8	; 200
   13c5c:	54 e2       	ldi	r21, 0x24	; 36
   13c5e:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	         TimDisplay=0;
   13c62:	10 92 70 02 	sts	0x0270, r1
			 stMenuIdle=miWaitProses;
   13c66:	83 e0       	ldi	r24, 0x03	; 3
   13c68:	c2 c0       	rjmp	.+388    	; 0x13dee <FMenuIdle+0x2f2>
         }else stMenuIdle=miScan;
	     break;
    case miWaitProses:
	     if (TimDisplay>1){
   13c6a:	80 91 70 02 	lds	r24, 0x0270
   13c6e:	82 30       	cpi	r24, 0x02	; 2
   13c70:	08 f4       	brcc	.+2      	; 0x13c74 <FMenuIdle+0x178>
   13c72:	bf c0       	rjmp	.+382    	; 0x13df2 <FMenuIdle+0x2f6>
		     if (IFType==IT_SLAVE)stMenuIdle=miSendMessage98;
   13c74:	80 91 00 01 	lds	r24, 0x0100
   13c78:	81 30       	cpi	r24, 0x01	; 1
   13c7a:	11 f4       	brne	.+4      	; 0x13c80 <FMenuIdle+0x184>
   13c7c:	84 e0       	ldi	r24, 0x04	; 4
   13c7e:	b7 c0       	rjmp	.+366    	; 0x13dee <FMenuIdle+0x2f2>
			 else
		     if (IFType==IT_STANDALONE)stMenuIdle=miPrintStandalone;
   13c80:	82 30       	cpi	r24, 0x02	; 2
   13c82:	09 f0       	breq	.+2      	; 0x13c86 <FMenuIdle+0x18a>
   13c84:	b6 c0       	rjmp	.+364    	; 0x13df2 <FMenuIdle+0x2f6>
   13c86:	87 e0       	ldi	r24, 0x07	; 7
   13c88:	b2 c0       	rjmp	.+356    	; 0x13dee <FMenuIdle+0x2f2>
		 }
	     break;
    case miPrintStandalone:
	     PrintStandaloneResult=PrintStandalone(ButtonID,False);
   13c8a:	80 91 89 03 	lds	r24, 0x0389
   13c8e:	60 e0       	ldi	r22, 0x00	; 0
   13c90:	0e 94 f1 8b 	call	0x117e2	; 0x117e2 <PrintStandalone>
	     if (PrintStandaloneResult==PS_PRINTED)stMenuIdle=miReady;
   13c94:	81 31       	cpi	r24, 0x11	; 17
   13c96:	09 f4       	brne	.+2      	; 0x13c9a <FMenuIdle+0x19e>
   13c98:	a9 c0       	rjmp	.+338    	; 0x13dec <FMenuIdle+0x2f0>
		 else
		 if (PrintStandaloneResult==PS_NO_DATA)stMenuIdle=miDisplayNoTransaction;
   13c9a:	82 31       	cpi	r24, 0x12	; 18
   13c9c:	09 f0       	breq	.+2      	; 0x13ca0 <FMenuIdle+0x1a4>
   13c9e:	a9 c0       	rjmp	.+338    	; 0x13df2 <FMenuIdle+0x2f6>
   13ca0:	88 e0       	ldi	r24, 0x08	; 8
   13ca2:	a5 c0       	rjmp	.+330    	; 0x13dee <FMenuIdle+0x2f2>
	     break;
    case miDisplayNoTransaction:
	     lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   13ca4:	83 e0       	ldi	r24, 0x03	; 3
   13ca6:	61 e0       	ldi	r22, 0x01	; 1
   13ca8:	43 eb       	ldi	r20, 0xB3	; 179
   13caa:	54 e2       	ldi	r21, 0x24	; 36
   13cac:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
         TimDisplay=0;
   13cb0:	10 92 70 02 	sts	0x0270, r1
		 stMenuIdle=miWaitDisplayNoTransaction;
   13cb4:	89 e0       	ldi	r24, 0x09	; 9
   13cb6:	9b c0       	rjmp	.+310    	; 0x13dee <FMenuIdle+0x2f2>
	     break;
    case miWaitDisplayNoTransaction:
	     if (TimDisplay>1){
   13cb8:	80 91 70 02 	lds	r24, 0x0270
   13cbc:	82 30       	cpi	r24, 0x02	; 2
   13cbe:	08 f4       	brcc	.+2      	; 0x13cc2 <FMenuIdle+0x1c6>
   13cc0:	98 c0       	rjmp	.+304    	; 0x13df2 <FMenuIdle+0x2f6>
	         lcd_printf(3,1,PSTR("Ready...            "));
   13cc2:	83 e0       	ldi	r24, 0x03	; 3
   13cc4:	61 e0       	ldi	r22, 0x01	; 1
   13cc6:	4e e9       	ldi	r20, 0x9E	; 158
   13cc8:	54 e2       	ldi	r21, 0x24	; 36
   13cca:	32 c0       	rjmp	.+100    	; 0x13d30 <FMenuIdle+0x234>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
		 }
	     break;
    case miSendMessage98:
	     lcd_printf(3,1,PSTR("Please Wait..       "));
   13ccc:	83 e0       	ldi	r24, 0x03	; 3
   13cce:	61 e0       	ldi	r22, 0x01	; 1
   13cd0:	49 e8       	ldi	r20, 0x89	; 137
   13cd2:	54 e2       	ldi	r21, 0x24	; 36
   13cd4:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	     sendMessage98(ButtonID);
   13cd8:	80 91 89 03 	lds	r24, 0x0389
   13cdc:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <sendMessage98>
		 ProcTimeOut=0;
   13ce0:	10 92 99 02 	sts	0x0299, r1
		 stMenuIdle=miWaitPlease;
   13ce4:	85 e0       	ldi	r24, 0x05	; 5
   13ce6:	83 c0       	rjmp	.+262    	; 0x13dee <FMenuIdle+0x2f2>
	     break;
    case miWaitPlease:	     
         if (ProcTimeOut>TIM_NO_RESPONSE){
   13ce8:	80 91 99 02 	lds	r24, 0x0299
   13cec:	8f 30       	cpi	r24, 0x0F	; 15
   13cee:	58 f0       	brcs	.+22     	; 0x13d06 <FMenuIdle+0x20a>
	         lcd_printf(3,1,PSTR("No Response..       "));
   13cf0:	83 e0       	ldi	r24, 0x03	; 3
   13cf2:	61 e0       	ldi	r22, 0x01	; 1
   13cf4:	44 e7       	ldi	r20, 0x74	; 116
   13cf6:	54 e2       	ldi	r21, 0x24	; 36
   13cf8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		     stMenuIdle=miNoResponse;
   13cfc:	86 e0       	ldi	r24, 0x06	; 6
   13cfe:	80 93 8a 03 	sts	0x038A, r24
			 TimDisplay=0;		 
   13d02:	10 92 70 02 	sts	0x0270, r1
		 }
		 if ((IsMessage99==True)||(IsMessage00==True)){
   13d06:	80 91 7d 02 	lds	r24, 0x027D
   13d0a:	81 30       	cpi	r24, 0x01	; 1
   13d0c:	29 f0       	breq	.+10     	; 0x13d18 <FMenuIdle+0x21c>
   13d0e:	80 91 7c 02 	lds	r24, 0x027C
   13d12:	81 30       	cpi	r24, 0x01	; 1
   13d14:	09 f0       	breq	.+2      	; 0x13d18 <FMenuIdle+0x21c>
   13d16:	6d c0       	rjmp	.+218    	; 0x13df2 <FMenuIdle+0x2f6>
		     ClearMem(strOdometer);
   13d18:	81 ea       	ldi	r24, 0xA1	; 161
   13d1a:	94 e0       	ldi	r25, 0x04	; 4
   13d1c:	0e 94 49 a0 	call	0x14092	; 0x14092 <ClearMem>
		     ClearMem(strLicPlate);
   13d20:	88 ed       	ldi	r24, 0xD8	; 216
   13d22:	99 e0       	ldi	r25, 0x09	; 9
   13d24:	0e 94 49 a0 	call	0x14092	; 0x14092 <ClearMem>
	         lcd_printf(3,1,PSTR("Ready...            "));
   13d28:	83 e0       	ldi	r24, 0x03	; 3
   13d2a:	61 e0       	ldi	r22, 0x01	; 1
   13d2c:	4f e5       	ldi	r20, 0x5F	; 95
   13d2e:	54 e2       	ldi	r21, 0x24	; 36
   13d30:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		     stMenuIdle=miWaitReady;
   13d34:	8a e0       	ldi	r24, 0x0A	; 10
   13d36:	80 93 8a 03 	sts	0x038A, r24
			 TimDisplay=0;
   13d3a:	10 92 70 02 	sts	0x0270, r1
   13d3e:	59 c0       	rjmp	.+178    	; 0x13df2 <FMenuIdle+0x2f6>
			 }
	     break;
    case miNoResponse:
         if (TimDisplay>1){
   13d40:	80 91 70 02 	lds	r24, 0x0270
   13d44:	82 30       	cpi	r24, 0x02	; 2
   13d46:	08 f4       	brcc	.+2      	; 0x13d4a <FMenuIdle+0x24e>
   13d48:	54 c0       	rjmp	.+168    	; 0x13df2 <FMenuIdle+0x2f6>
	         lcd_printf(3,1,PSTR("Ready...            "));
   13d4a:	83 e0       	ldi	r24, 0x03	; 3
   13d4c:	61 e0       	ldi	r22, 0x01	; 1
   13d4e:	4a e4       	ldi	r20, 0x4A	; 74
   13d50:	54 e2       	ldi	r21, 0x24	; 36
   13d52:	ee cf       	rjmp	.-36     	; 0x13d30 <FMenuIdle+0x234>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
			 }	     
	     break;
    case miWaitReady:
         if (TimDisplay>1){
   13d54:	80 91 70 02 	lds	r24, 0x0270
   13d58:	82 30       	cpi	r24, 0x02	; 2
   13d5a:	08 f4       	brcc	.+2      	; 0x13d5e <FMenuIdle+0x262>
   13d5c:	4a c0       	rjmp	.+148    	; 0x13df2 <FMenuIdle+0x2f6>
	         lcd_printf(3,1,PSTR("                "));
   13d5e:	83 e0       	ldi	r24, 0x03	; 3
   13d60:	61 e0       	ldi	r22, 0x01	; 1
   13d62:	49 e3       	ldi	r20, 0x39	; 57
   13d64:	54 e2       	ldi	r21, 0x24	; 36
   13d66:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		     stMenuIdle=miReady;
   13d6a:	8b e0       	ldi	r24, 0x0B	; 11
   13d6c:	e4 cf       	rjmp	.-56     	; 0x13d36 <FMenuIdle+0x23a>
			 TimDisplay=0;
			 }	     
	     break;
    case miReady:
	     DisplayScreenIdle();
   13d6e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <DisplayScreenIdle>
		 if (IFType==IT_STANDALONE)IsNewPumpStatus=True;
   13d72:	80 91 00 01 	lds	r24, 0x0100
   13d76:	82 30       	cpi	r24, 0x02	; 2
   13d78:	19 f4       	brne	.+6      	; 0x13d80 <FMenuIdle+0x284>
   13d7a:	81 e0       	ldi	r24, 0x01	; 1
   13d7c:	80 93 01 01 	sts	0x0101, r24
		 stMenuIdle=miScan;
   13d80:	81 e0       	ldi	r24, 0x01	; 1
   13d82:	35 c0       	rjmp	.+106    	; 0x13dee <FMenuIdle+0x2f2>
	     break;
	case miRunTicket://Slave,Standalone
		 if (FMenuTicket()==MENU_DONE)
   13d84:	0e 94 49 8c 	call	0x11892	; 0x11892 <FMenuTicket>
   13d88:	2f c0       	rjmp	.+94     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
	case miRunAuth://Slave,Standalone
		 if (FMenuAuthorization()==MENU_DONE)
   13d8a:	0e 94 1c 9d 	call	0x13a38	; 0x13a38 <FMenuAuthorization>
   13d8e:	2c c0       	rjmp	.+88     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
		 
    case miRunLocalAccount://Slave
		 if (FMenuLocalAccount()==MENU_DONE)
   13d90:	0e 94 96 77 	call	0xef2c	; 0xef2c <FMenuLocalAccount>
   13d94:	29 c0       	rjmp	.+82     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;  
    case miRunChangeMOP://Slave
	     if (FMenuChangeMOP()==MENU_DONE)
   13d96:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <FMenuChangeMOP>
   13d9a:	26 c0       	rjmp	.+76     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miRunEDC://Slave
	     if (FMenuEDCTransaction()==MENU_DONE)
   13d9c:	0e 94 53 54 	call	0xa8a6	; 0xa8a6 <FMenuEDCTransaction>
   13da0:	23 c0       	rjmp	.+70     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
         break;
    case miRunLoyalty://Slave
	     if (FMenuLoyalty()==MENU_DONE)
   13da2:	0e 94 22 46 	call	0x8c44	; 0x8c44 <FMenuLoyalty>
   13da6:	20 c0       	rjmp	.+64     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miRunReprint://Slave,Standalone
	     if (FMenuReprint()==MENU_DONE)
   13da8:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <FMenuReprint>
   13dac:	1d c0       	rjmp	.+58     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miRunViewFreeMessage://Slave
	     if (FViewFreeMessage()==MENU_DONE)
   13dae:	0e 94 61 19 	call	0x32c2	; 0x32c2 <FViewFreeMessage>
   13db2:	1a c0       	rjmp	.+52     	; 0x13de8 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miClearTotalizer://Standalone
	     lcd_printf(3,1,PSTR("Clear Data Totalizer"));
   13db4:	83 e0       	ldi	r24, 0x03	; 3
   13db6:	61 e0       	ldi	r22, 0x01	; 1
   13db8:	44 e2       	ldi	r20, 0x24	; 36
   13dba:	54 e2       	ldi	r21, 0x24	; 36
   13dbc:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	     ResetTotalizer(TOTALIZER_LAST);
   13dc0:	80 e0       	ldi	r24, 0x00	; 0
   13dc2:	0e 94 3e 77 	call	0xee7c	; 0xee7c <ResetTotalizer>
         ResetTotalizer(TOTALIZER_NOW);
   13dc6:	81 e0       	ldi	r24, 0x01	; 1
   13dc8:	0e 94 3e 77 	call	0xee7c	; 0xee7c <ResetTotalizer>
   13dcc:	0f c0       	rjmp	.+30     	; 0x13dec <FMenuIdle+0x2f0>
         stMenuIdle=miReady;	      
	     break;
    case miRunTotalizer://Standalone
	     lcd_printf(3,1,PSTR("TotalizerAll     "));
   13dce:	83 e0       	ldi	r24, 0x03	; 3
   13dd0:	61 e0       	ldi	r22, 0x01	; 1
   13dd2:	42 e1       	ldi	r20, 0x12	; 18
   13dd4:	54 e2       	ldi	r21, 0x24	; 36
   13dd6:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
	     SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);
   13dda:	85 e0       	ldi	r24, 0x05	; 5
   13ddc:	62 e1       	ldi	r22, 0x12	; 18
   13dde:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <SendSlaveCommand>
   13de2:	04 c0       	rjmp	.+8      	; 0x13dec <FMenuIdle+0x2f0>
		 stMenuIdle=miReady;	      
	     break;
    case miRunTestChar:	     
 	     if (FTestChar()==MENU_DONE)
   13de4:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <FTestChar>
   13de8:	81 30       	cpi	r24, 0x01	; 1
   13dea:	19 f4       	brne	.+6      	; 0x13df2 <FMenuIdle+0x2f6>
         stMenuIdle=miReady;
   13dec:	8b e0       	ldi	r24, 0x0B	; 11
   13dee:	80 93 8a 03 	sts	0x038A, r24
	     break;
	}
//----------SYSTEM_PROC--------------------------------

        //Bank InfoUpdated
        if (IsMessage21==True){
   13df2:	80 91 7f 02 	lds	r24, 0x027F
   13df6:	81 30       	cpi	r24, 0x01	; 1
   13df8:	21 f4       	brne	.+8      	; 0x13e02 <FMenuIdle+0x306>
		    IsMessage21=False;
   13dfa:	10 92 7f 02 	sts	0x027F, r1
			procMessage21();
   13dfe:	0e 94 88 45 	call	0x8b10	; 0x8b10 <procMessage21>

        }
        //Transaction Status
        if (IsMessage00==True){
   13e02:	10 91 7c 02 	lds	r17, 0x027C
   13e06:	11 30       	cpi	r17, 0x01	; 1
   13e08:	41 f4       	brne	.+16     	; 0x13e1a <FMenuIdle+0x31e>
		    IsMessage00=False;
   13e0a:	10 92 7c 02 	sts	0x027C, r1
			if (procMessage00()==MSG00_NO_PRINT){
   13e0e:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <procMessage00>
   13e12:	84 30       	cpi	r24, 0x04	; 4
   13e14:	11 f4       	brne	.+4      	; 0x13e1a <FMenuIdle+0x31e>
			    IsNoTransaction=True;
   13e16:	10 93 89 02 	sts	0x0289, r17
				}
		}
  
		//Send EDC Message Information;
		if (IsSendMessageEDC==True){
   13e1a:	80 91 75 02 	lds	r24, 0x0275
   13e1e:	81 30       	cpi	r24, 0x01	; 1
   13e20:	21 f4       	brne	.+8      	; 0x13e2a <FMenuIdle+0x32e>
		    IsSendMessageEDC=False;
   13e22:	10 92 75 02 	sts	0x0275, r1
			SendEDCMessage();
   13e26:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <SendEDCMessage>
		}
		if (IsEDCApproved==True){
   13e2a:	80 91 77 02 	lds	r24, 0x0277
   13e2e:	81 30       	cpi	r24, 0x01	; 1
   13e30:	21 f4       	brne	.+8      	; 0x13e3a <FMenuIdle+0x33e>
		    IsEDCApproved=False;
   13e32:	10 92 77 02 	sts	0x0277, r1
            sendMessage92();
   13e36:	0e 94 1d 2a 	call	0x543a	; 0x543a <sendMessage92>
		}
		if (IsVoidTransaction==True){
   13e3a:	80 91 79 02 	lds	r24, 0x0279
   13e3e:	81 30       	cpi	r24, 0x01	; 1
   13e40:	21 f4       	brne	.+8      	; 0x13e4a <FMenuIdle+0x34e>
		    IsVoidTransaction=False;
   13e42:	10 92 79 02 	sts	0x0279, r1
            sendMessage94();
   13e46:	0e 94 19 2a 	call	0x5432	; 0x5432 <sendMessage94>
		}


        //Message99 Detection 
        if (IsMessage99==True){
   13e4a:	10 91 7d 02 	lds	r17, 0x027D
   13e4e:	11 30       	cpi	r17, 0x01	; 1
   13e50:	31 f4       	brne	.+12     	; 0x13e5e <FMenuIdle+0x362>
	        IsMessage99=False;
   13e52:	10 92 7d 02 	sts	0x027D, r1
		    procMessage99();
   13e56:	0e 94 2c 59 	call	0xb258	; 0xb258 <procMessage99>
		    IsPrinting=True;
   13e5a:	10 93 8a 02 	sts	0x028A, r17
		}
		//No Transaction
		if (IsNoTransaction==True){
   13e5e:	80 91 89 02 	lds	r24, 0x0289
   13e62:	81 30       	cpi	r24, 0x01	; 1
   13e64:	41 f4       	brne	.+16     	; 0x13e76 <FMenuIdle+0x37a>
			IsNoTransaction=False;
   13e66:	10 92 89 02 	sts	0x0289, r1
			lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   13e6a:	83 e0       	ldi	r24, 0x03	; 3
   13e6c:	61 e0       	ldi	r22, 0x01	; 1
   13e6e:	4d ef       	ldi	r20, 0xFD	; 253
   13e70:	53 e2       	ldi	r21, 0x23	; 35
   13e72:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
		}
        
		//Display Idle
		if (stMenuIdle==miScan){//||(stMenuIdle=miWaitPlease)){ 
   13e76:	80 91 8a 03 	lds	r24, 0x038A
   13e7a:	81 30       	cpi	r24, 0x01	; 1
   13e7c:	11 f4       	brne	.+4      	; 0x13e82 <FMenuIdle+0x386>
		    DisplayIdle();			
   13e7e:	0e 94 d7 42 	call	0x85ae	; 0x85ae <DisplayIdle>
			}        

        //Display FreeMessage
		if (stMenuIdle==miScan){ 
   13e82:	80 91 8a 03 	lds	r24, 0x038A
   13e86:	81 30       	cpi	r24, 0x01	; 1
   13e88:	59 f4       	brne	.+22     	; 0x13ea0 <FMenuIdle+0x3a4>
		    if (IsMessage09==True){
   13e8a:	80 91 81 02 	lds	r24, 0x0281
   13e8e:	81 30       	cpi	r24, 0x01	; 1
   13e90:	39 f4       	brne	.+14     	; 0x13ea0 <FMenuIdle+0x3a4>
			    IsMessage09=False;
   13e92:	10 92 81 02 	sts	0x0281, r1
				procMessage09();
   13e96:	0e 94 57 45 	call	0x8aae	; 0x8aae <procMessage09>
				stMenuIdle=miRunViewFreeMessage;
   13e9a:	83 e1       	ldi	r24, 0x13	; 19
   13e9c:	80 93 8a 03 	sts	0x038A, r24
			   }
			}

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
   13ea0:	80 91 8a 03 	lds	r24, 0x038A
   13ea4:	81 30       	cpi	r24, 0x01	; 1
   13ea6:	69 f4       	brne	.+26     	; 0x13ec2 <FMenuIdle+0x3c6>
   13ea8:	80 91 76 02 	lds	r24, 0x0276
   13eac:	81 30       	cpi	r24, 0x01	; 1
   13eae:	49 f4       	brne	.+18     	; 0x13ec2 <FMenuIdle+0x3c6>
		    IsRFIDDetected=False;
   13eb0:	10 92 76 02 	sts	0x0276, r1
		    system_beep(2);           
   13eb4:	82 e0       	ldi	r24, 0x02	; 2
   13eb6:	90 e0       	ldi	r25, 0x00	; 0
   13eb8:	0e 94 c5 14 	call	0x298a	; 0x298a <system_beep>
			stMenuIdle=miRunLocalAccount;
   13ebc:	8e e0       	ldi	r24, 0x0E	; 14
   13ebe:	80 93 8a 03 	sts	0x038A, r24
		}
        //Print Spooling
		if (IsMessage81==True){
   13ec2:	10 91 84 02 	lds	r17, 0x0284
   13ec6:	11 30       	cpi	r17, 0x01	; 1
   13ec8:	41 f4       	brne	.+16     	; 0x13eda <FMenuIdle+0x3de>
		    IsMessage81=False;
   13eca:	10 92 84 02 	sts	0x0284, r1
			//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
			cmdPrint=procMessage81();
   13ece:	0e 94 e5 48 	call	0x91ca	; 0x91ca <procMessage81>
   13ed2:	80 93 93 02 	sts	0x0293, r24
			IsFreePrinting=True;
   13ed6:	10 93 86 02 	sts	0x0286, r17
         }

    //SystemService
      systemGenerateReport();
   13eda:	0e 94 7a 6d 	call	0xdaf4	; 0xdaf4 <systemGenerateReport>
      systemPrinting();
   13ede:	0e 94 21 88 	call	0x11042	; 0x11042 <systemPrinting>
	  systemEDC();
	  systemConfigProtocol();
   13ee2:	0e 94 e1 62 	call	0xc5c2	; 0xc5c2 <systemConfigProtocol>
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}
   13ee6:	1f 91       	pop	r17
   13ee8:	08 95       	ret

00013eea <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x06);
}

void lcd_command(unsigned char __chr){
	_LCD_PORT = __chr & 0xF0;
   13eea:	98 2f       	mov	r25, r24
   13eec:	90 7f       	andi	r25, 0xF0	; 240
   13eee:	95 bb       	out	0x15, r25	; 21
	cbi(_LCD_PORT, _LCD_RS);
   13ef0:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   13ef2:	a9 9a       	sbi	0x15, 1	; 21
   13ef4:	a9 e9       	ldi	r26, 0x99	; 153
   13ef6:	b9 e3       	ldi	r27, 0x39	; 57
   13ef8:	11 97       	sbiw	r26, 0x01	; 1
   13efa:	f1 f7       	brne	.-4      	; 0x13ef8 <lcd_command+0xe>
   13efc:	00 c0       	rjmp	.+0      	; 0x13efe <lcd_command+0x14>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   13efe:	a9 98       	cbi	0x15, 1	; 21
   13f00:	e9 e9       	ldi	r30, 0x99	; 153
   13f02:	f9 e3       	ldi	r31, 0x39	; 57
   13f04:	31 97       	sbiw	r30, 0x01	; 1
   13f06:	f1 f7       	brne	.-4      	; 0x13f04 <lcd_command+0x1a>
   13f08:	00 c0       	rjmp	.+0      	; 0x13f0a <lcd_command+0x20>
	_LCD_BUSY;

	_LCD_PORT = (__chr & 0x0F) << 4;
   13f0a:	28 2f       	mov	r18, r24
   13f0c:	30 e0       	ldi	r19, 0x00	; 0
   13f0e:	94 e0       	ldi	r25, 0x04	; 4
   13f10:	22 0f       	add	r18, r18
   13f12:	33 1f       	adc	r19, r19
   13f14:	9a 95       	dec	r25
   13f16:	e1 f7       	brne	.-8      	; 0x13f10 <lcd_command+0x26>
   13f18:	25 bb       	out	0x15, r18	; 21
	cbi(_LCD_PORT, _LCD_RS);
   13f1a:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   13f1c:	a9 9a       	sbi	0x15, 1	; 21
   13f1e:	a9 e9       	ldi	r26, 0x99	; 153
   13f20:	b9 e3       	ldi	r27, 0x39	; 57
   13f22:	11 97       	sbiw	r26, 0x01	; 1
   13f24:	f1 f7       	brne	.-4      	; 0x13f22 <lcd_command+0x38>
   13f26:	00 c0       	rjmp	.+0      	; 0x13f28 <lcd_command+0x3e>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   13f28:	a9 98       	cbi	0x15, 1	; 21
   13f2a:	e9 e9       	ldi	r30, 0x99	; 153
   13f2c:	f9 e3       	ldi	r31, 0x39	; 57
   13f2e:	31 97       	sbiw	r30, 0x01	; 1
   13f30:	f1 f7       	brne	.-4      	; 0x13f2e <lcd_command+0x44>
   13f32:	00 c0       	rjmp	.+0      	; 0x13f34 <lcd_command+0x4a>
   13f34:	a9 e9       	ldi	r26, 0x99	; 153
   13f36:	b9 e3       	ldi	r27, 0x39	; 57
   13f38:	11 97       	sbiw	r26, 0x01	; 1
   13f3a:	f1 f7       	brne	.-4      	; 0x13f38 <lcd_command+0x4e>
   13f3c:	00 c0       	rjmp	.+0      	; 0x13f3e <lcd_command+0x54>
	_LCD_BUSY;
	_LCD_BUSY;
	if (__chr==0x01) _delay_ms(50);
   13f3e:	81 30       	cpi	r24, 0x01	; 1
   13f40:	49 f4       	brne	.+18     	; 0x13f54 <lcd_command+0x6a>
   13f42:	8f ef       	ldi	r24, 0xFF	; 255
   13f44:	9f e3       	ldi	r25, 0x3F	; 63
   13f46:	a2 e0       	ldi	r26, 0x02	; 2
   13f48:	81 50       	subi	r24, 0x01	; 1
   13f4a:	90 40       	sbci	r25, 0x00	; 0
   13f4c:	a0 40       	sbci	r26, 0x00	; 0
   13f4e:	e1 f7       	brne	.-8      	; 0x13f48 <lcd_command+0x5e>
   13f50:	00 c0       	rjmp	.+0      	; 0x13f52 <lcd_command+0x68>
   13f52:	00 00       	nop
   13f54:	08 95       	ret

00013f56 <lcd_init>:
   13f56:	8f ef       	ldi	r24, 0xFF	; 255
   13f58:	97 ed       	ldi	r25, 0xD7	; 215
   13f5a:	01 97       	sbiw	r24, 0x01	; 1
   13f5c:	f1 f7       	brne	.-4      	; 0x13f5a <lcd_init+0x4>
   13f5e:	00 c0       	rjmp	.+0      	; 0x13f60 <lcd_init+0xa>
   13f60:	00 00       	nop

#define _LCD_BUSY	_delay_ms(4);

void lcd_init(void){
	_delay_ms(15);
	_LCD_PORT = 0x00;
   13f62:	15 ba       	out	0x15, r1	; 21
	_LCD_DDR |= (1 << _LCD_D7) | (1 << _LCD_D6) | (1 << _LCD_D5) | (1 << _LCD_D4);
   13f64:	84 b3       	in	r24, 0x14	; 20
   13f66:	80 6f       	ori	r24, 0xF0	; 240
   13f68:	84 bb       	out	0x14, r24	; 20
	_LCD_DDR |= (1 << _LCD_E) | (1 << _LCD_RW) | (1 << _LCD_RS);
   13f6a:	84 b3       	in	r24, 0x14	; 20
   13f6c:	8e 60       	ori	r24, 0x0E	; 14
   13f6e:	84 bb       	out	0x14, r24	; 20

	_LCD_PORT = 0x30;
   13f70:	80 e3       	ldi	r24, 0x30	; 48
   13f72:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   13f74:	a9 9a       	sbi	0x15, 1	; 21
   13f76:	e9 e9       	ldi	r30, 0x99	; 153
   13f78:	f9 e3       	ldi	r31, 0x39	; 57
   13f7a:	31 97       	sbiw	r30, 0x01	; 1
   13f7c:	f1 f7       	brne	.-4      	; 0x13f7a <lcd_init+0x24>
   13f7e:	00 c0       	rjmp	.+0      	; 0x13f80 <lcd_init+0x2a>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   13f80:	a9 98       	cbi	0x15, 1	; 21
   13f82:	e9 e9       	ldi	r30, 0x99	; 153
   13f84:	f9 e3       	ldi	r31, 0x39	; 57
   13f86:	31 97       	sbiw	r30, 0x01	; 1
   13f88:	f1 f7       	brne	.-4      	; 0x13f86 <lcd_init+0x30>
   13f8a:	00 c0       	rjmp	.+0      	; 0x13f8c <lcd_init+0x36>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   13f8c:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   13f8e:	a9 9a       	sbi	0x15, 1	; 21
   13f90:	e9 e9       	ldi	r30, 0x99	; 153
   13f92:	f9 e3       	ldi	r31, 0x39	; 57
   13f94:	31 97       	sbiw	r30, 0x01	; 1
   13f96:	f1 f7       	brne	.-4      	; 0x13f94 <lcd_init+0x3e>
   13f98:	00 c0       	rjmp	.+0      	; 0x13f9a <lcd_init+0x44>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   13f9a:	a9 98       	cbi	0x15, 1	; 21
   13f9c:	e9 e9       	ldi	r30, 0x99	; 153
   13f9e:	f9 e3       	ldi	r31, 0x39	; 57
   13fa0:	31 97       	sbiw	r30, 0x01	; 1
   13fa2:	f1 f7       	brne	.-4      	; 0x13fa0 <lcd_init+0x4a>
   13fa4:	00 c0       	rjmp	.+0      	; 0x13fa6 <lcd_init+0x50>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   13fa6:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   13fa8:	a9 9a       	sbi	0x15, 1	; 21
   13faa:	89 e9       	ldi	r24, 0x99	; 153
   13fac:	99 e3       	ldi	r25, 0x39	; 57
   13fae:	01 97       	sbiw	r24, 0x01	; 1
   13fb0:	f1 f7       	brne	.-4      	; 0x13fae <lcd_init+0x58>
   13fb2:	00 c0       	rjmp	.+0      	; 0x13fb4 <lcd_init+0x5e>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   13fb4:	a9 98       	cbi	0x15, 1	; 21
   13fb6:	e9 e9       	ldi	r30, 0x99	; 153
   13fb8:	f9 e3       	ldi	r31, 0x39	; 57
   13fba:	31 97       	sbiw	r30, 0x01	; 1
   13fbc:	f1 f7       	brne	.-4      	; 0x13fba <lcd_init+0x64>
   13fbe:	00 c0       	rjmp	.+0      	; 0x13fc0 <lcd_init+0x6a>
	_LCD_BUSY;

	_LCD_PORT = 0x20;
   13fc0:	80 e2       	ldi	r24, 0x20	; 32
   13fc2:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   13fc4:	a9 9a       	sbi	0x15, 1	; 21
   13fc6:	89 e9       	ldi	r24, 0x99	; 153
   13fc8:	99 e3       	ldi	r25, 0x39	; 57
   13fca:	01 97       	sbiw	r24, 0x01	; 1
   13fcc:	f1 f7       	brne	.-4      	; 0x13fca <lcd_init+0x74>
   13fce:	00 c0       	rjmp	.+0      	; 0x13fd0 <lcd_init+0x7a>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   13fd0:	a9 98       	cbi	0x15, 1	; 21
   13fd2:	e9 e9       	ldi	r30, 0x99	; 153
   13fd4:	f9 e3       	ldi	r31, 0x39	; 57
   13fd6:	31 97       	sbiw	r30, 0x01	; 1
   13fd8:	f1 f7       	brne	.-4      	; 0x13fd6 <lcd_init+0x80>
   13fda:	00 c0       	rjmp	.+0      	; 0x13fdc <lcd_init+0x86>
	_LCD_BUSY;

	_LIGHT_PORT = 0x01;
   13fdc:	81 e0       	ldi	r24, 0x01	; 1
   13fde:	80 93 65 00 	sts	0x0065, r24
	_LIGHT_DDR |= (1 << _LIGHT_PIN);
   13fe2:	e4 e6       	ldi	r30, 0x64	; 100
   13fe4:	f0 e0       	ldi	r31, 0x00	; 0
   13fe6:	80 81       	ld	r24, Z
   13fe8:	82 60       	ori	r24, 0x02	; 2
   13fea:	80 83       	st	Z, r24

	lcd_command(0x28);
   13fec:	88 e2       	ldi	r24, 0x28	; 40
   13fee:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
	lcd_command(0x0c);
   13ff2:	8c e0       	ldi	r24, 0x0C	; 12
   13ff4:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
	lcd_command(0x06);
   13ff8:	86 e0       	ldi	r24, 0x06	; 6
   13ffa:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
}
   13ffe:	08 95       	ret

00014000 <_lcd>:
	if (__chr==0x01) _delay_ms(50);

}

void _lcd(unsigned char __chr){
	_LCD_PORT =((__chr & 0xF0));
   14000:	98 2f       	mov	r25, r24
   14002:	90 7f       	andi	r25, 0xF0	; 240
   14004:	95 bb       	out	0x15, r25	; 21
	sbi(_LCD_PORT, _LCD_RS);
   14006:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14008:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   1400a:	a9 98       	cbi	0x15, 1	; 21

	_LCD_PORT = (((__chr & 0x0F) << 4));
   1400c:	90 e0       	ldi	r25, 0x00	; 0
   1400e:	24 e0       	ldi	r18, 0x04	; 4
   14010:	88 0f       	add	r24, r24
   14012:	99 1f       	adc	r25, r25
   14014:	2a 95       	dec	r18
   14016:	e1 f7       	brne	.-8      	; 0x14010 <_lcd+0x10>
   14018:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_RS);
   1401a:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   1401c:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   1401e:	a9 98       	cbi	0x15, 1	; 21
   14020:	89 e9       	ldi	r24, 0x99	; 153
   14022:	99 e3       	ldi	r25, 0x39	; 57
   14024:	01 97       	sbiw	r24, 0x01	; 1
   14026:	f1 f7       	brne	.-4      	; 0x14024 <_lcd+0x24>
   14028:	00 c0       	rjmp	.+0      	; 0x1402a <_lcd+0x2a>
   1402a:	86 e6       	ldi	r24, 0x66	; 102
   1402c:	9e e0       	ldi	r25, 0x0E	; 14
   1402e:	01 97       	sbiw	r24, 0x01	; 1
   14030:	f1 f7       	brne	.-4      	; 0x1402e <_lcd+0x2e>
   14032:	00 00       	nop
	_LCD_BUSY;
	_delay_ms(1);
}
   14034:	08 95       	ret

00014036 <lcd_string>:
     lcd_printf(2,1,PSTR("                    "));
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
   14036:	ef 92       	push	r14
   14038:	ff 92       	push	r15
   1403a:	cf 93       	push	r28
   1403c:	df 93       	push	r29
   1403e:	e8 2e       	mov	r14, r24
   14040:	e7 01       	movw	r28, r14
   14042:	7e 01       	movw	r14, r28
   14044:	f9 2e       	mov	r15, r25
   14046:	e7 01       	movw	r28, r14
	while(*__string)
   14048:	02 c0       	rjmp	.+4      	; 0x1404e <lcd_string+0x18>
		_lcd(*__string++);
   1404a:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
	while(*__string)
   1404e:	89 91       	ld	r24, Y+
   14050:	88 23       	and	r24, r24
   14052:	d9 f7       	brne	.-10     	; 0x1404a <lcd_string+0x14>
		_lcd(*__string++);
}
   14054:	df 91       	pop	r29
   14056:	cf 91       	pop	r28
   14058:	ff 90       	pop	r15
   1405a:	ef 90       	pop	r14
   1405c:	08 95       	ret

0001405e <lcd_xy>:

void lcd_xy(unsigned char __x, unsigned char __y){
   1405e:	98 2f       	mov	r25, r24
   14060:	86 2f       	mov	r24, r22
	switch(__x){
   14062:	92 30       	cpi	r25, 0x02	; 2
   14064:	61 f0       	breq	.+24     	; 0x1407e <lcd_xy+0x20>
   14066:	93 30       	cpi	r25, 0x03	; 3
   14068:	18 f4       	brcc	.+6      	; 0x14070 <lcd_xy+0x12>
   1406a:	91 30       	cpi	r25, 0x01	; 1
   1406c:	89 f4       	brne	.+34     	; 0x14090 <lcd_xy+0x32>
   1406e:	05 c0       	rjmp	.+10     	; 0x1407a <lcd_xy+0x1c>
   14070:	93 30       	cpi	r25, 0x03	; 3
   14072:	39 f0       	breq	.+14     	; 0x14082 <lcd_xy+0x24>
   14074:	94 30       	cpi	r25, 0x04	; 4
   14076:	61 f4       	brne	.+24     	; 0x14090 <lcd_xy+0x32>
   14078:	08 c0       	rjmp	.+16     	; 0x1408a <lcd_xy+0x2c>
		case 1:
			lcd_command(0x80 + __y - 1);
   1407a:	81 58       	subi	r24, 0x81	; 129
   1407c:	03 c0       	rjmp	.+6      	; 0x14084 <lcd_xy+0x26>
			break;
		case 2:
			lcd_command(0xC0 + __y - 1);
   1407e:	81 54       	subi	r24, 0x41	; 65
   14080:	01 c0       	rjmp	.+2      	; 0x14084 <lcd_xy+0x26>
			break;
		case 3:
			lcd_command(0x94 + __y - 1);
   14082:	8d 56       	subi	r24, 0x6D	; 109
   14084:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
			break;
   14088:	08 95       	ret
		case 4:
			lcd_command(0xD4 + __y - 1);
   1408a:	8d 52       	subi	r24, 0x2D	; 45
   1408c:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
   14090:	08 95       	ret

00014092 <ClearMem>:
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   14092:	40 e0       	ldi	r20, 0x00	; 0
   14094:	05 c0       	rjmp	.+10     	; 0x140a0 <ClearMem+0xe>
          string[i]=0;
   14096:	28 0f       	add	r18, r24
   14098:	39 1f       	adc	r19, r25
   1409a:	f9 01       	movw	r30, r18
   1409c:	10 82       	st	Z, r1
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   1409e:	4f 5f       	subi	r20, 0xFF	; 255
   140a0:	24 2f       	mov	r18, r20
   140a2:	30 e0       	ldi	r19, 0x00	; 0
   140a4:	fc 01       	movw	r30, r24
   140a6:	01 90       	ld	r0, Z+
   140a8:	00 20       	and	r0, r0
   140aa:	e9 f7       	brne	.-6      	; 0x140a6 <ClearMem+0x14>
   140ac:	31 97       	sbiw	r30, 0x01	; 1
   140ae:	e8 1b       	sub	r30, r24
   140b0:	f9 0b       	sbc	r31, r25
   140b2:	2e 17       	cp	r18, r30
   140b4:	3f 07       	cpc	r19, r31
   140b6:	78 f3       	brcs	.-34     	; 0x14096 <ClearMem+0x4>
          string[i]=0;
	 }     
}
   140b8:	08 95       	ret

000140ba <lcd_print>:

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
   140ba:	cf 92       	push	r12
   140bc:	df 92       	push	r13
   140be:	ef 92       	push	r14
   140c0:	ff 92       	push	r15
   140c2:	0f 93       	push	r16
   140c4:	1f 93       	push	r17
   140c6:	df 93       	push	r29
   140c8:	cf 93       	push	r28
   140ca:	0f 92       	push	r0
   140cc:	cd b7       	in	r28, 0x3d	; 61
   140ce:	de b7       	in	r29, 0x3e	; 62
   140d0:	f6 2e       	mov	r15, r22
   140d2:	e4 2e       	mov	r14, r20
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
   140d4:	59 83       	std	Y+1, r21	; 0x01
   140d6:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   140da:	59 81       	ldd	r21, Y+1	; 0x01
   140dc:	0e 2d       	mov	r16, r14
   140de:	15 2f       	mov	r17, r21
   140e0:	34 e1       	ldi	r19, 0x14	; 20
   140e2:	c3 2e       	mov	r12, r19
   140e4:	d1 2c       	mov	r13, r1
   140e6:	cf 18       	sub	r12, r15
   140e8:	d1 08       	sbc	r13, r1
   140ea:	02 c0       	rjmp	.+4      	; 0x140f0 <lcd_print+0x36>
		_lcd(*__string);__string++;
   140ec:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
   140f0:	20 2f       	mov	r18, r16
   140f2:	2e 19       	sub	r18, r14

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   140f4:	f8 01       	movw	r30, r16
   140f6:	81 91       	ld	r24, Z+
   140f8:	8f 01       	movw	r16, r30
   140fa:	88 23       	and	r24, r24
   140fc:	21 f0       	breq	.+8      	; 0x14106 <lcd_print+0x4c>
   140fe:	30 e0       	ldi	r19, 0x00	; 0
   14100:	c2 16       	cp	r12, r18
   14102:	d3 06       	cpc	r13, r19
   14104:	9c f7       	brge	.-26     	; 0x140ec <lcd_print+0x32>
		_lcd(*__string);__string++;
		iPos++;
		}    
}
   14106:	0f 90       	pop	r0
   14108:	cf 91       	pop	r28
   1410a:	df 91       	pop	r29
   1410c:	1f 91       	pop	r17
   1410e:	0f 91       	pop	r16
   14110:	ff 90       	pop	r15
   14112:	ef 90       	pop	r14
   14114:	df 90       	pop	r13
   14116:	cf 90       	pop	r12
   14118:	08 95       	ret

0001411a <lcd_printf>:

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
   1411a:	cf 92       	push	r12
   1411c:	df 92       	push	r13
   1411e:	ef 92       	push	r14
   14120:	ff 92       	push	r15
   14122:	0f 93       	push	r16
   14124:	1f 93       	push	r17
   14126:	df 93       	push	r29
   14128:	cf 93       	push	r28
   1412a:	0f 92       	push	r0
   1412c:	cd b7       	in	r28, 0x3d	; 61
   1412e:	de b7       	in	r29, 0x3e	; 62
   14130:	f6 2e       	mov	r15, r22
   14132:	e4 2e       	mov	r14, r20
    char iPos=0;
	lcd_xy(__x, __y);
   14134:	59 83       	std	Y+1, r21	; 0x01
   14136:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   1413a:	59 81       	ldd	r21, Y+1	; 0x01
   1413c:	4e 2d       	mov	r20, r14
   1413e:	6a 01       	movw	r12, r20
   14140:	04 e1       	ldi	r16, 0x14	; 20
   14142:	10 e0       	ldi	r17, 0x00	; 0
   14144:	0f 19       	sub	r16, r15
   14146:	11 09       	sbc	r17, r1
   14148:	05 c0       	rjmp	.+10     	; 0x14154 <lcd_printf+0x3a>
		_lcd(pgm_read_byte(&(*__string)));
   1414a:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
		__string++;
   1414e:	08 94       	sec
   14150:	c1 1c       	adc	r12, r1
   14152:	d1 1c       	adc	r13, r1
   14154:	2c 2d       	mov	r18, r12
   14156:	2e 19       	sub	r18, r14

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
    char iPos=0;
	lcd_xy(__x, __y);
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14158:	f6 01       	movw	r30, r12
   1415a:	84 91       	lpm	r24, Z+
   1415c:	88 23       	and	r24, r24
   1415e:	21 f0       	breq	.+8      	; 0x14168 <lcd_printf+0x4e>
   14160:	30 e0       	ldi	r19, 0x00	; 0
   14162:	02 17       	cp	r16, r18
   14164:	13 07       	cpc	r17, r19
   14166:	8c f7       	brge	.-30     	; 0x1414a <lcd_printf+0x30>
		_lcd(pgm_read_byte(&(*__string)));
		__string++;
		iPos++;
		}
}
   14168:	0f 90       	pop	r0
   1416a:	cf 91       	pop	r28
   1416c:	df 91       	pop	r29
   1416e:	1f 91       	pop	r17
   14170:	0f 91       	pop	r16
   14172:	ff 90       	pop	r15
   14174:	ef 90       	pop	r14
   14176:	df 90       	pop	r13
   14178:	cf 90       	pop	r12
   1417a:	08 95       	ret

0001417c <lcd_clear>:
	_LCD_BUSY;
	_delay_ms(1);
}

void lcd_clear(){
     lcd_printf(1,1,PSTR("                    "));
   1417c:	81 e0       	ldi	r24, 0x01	; 1
   1417e:	61 e0       	ldi	r22, 0x01	; 1
   14180:	4d e1       	ldi	r20, 0x1D	; 29
   14182:	55 e2       	ldi	r21, 0x25	; 37
   14184:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
     lcd_printf(2,1,PSTR("                    "));
   14188:	82 e0       	ldi	r24, 0x02	; 2
   1418a:	61 e0       	ldi	r22, 0x01	; 1
   1418c:	48 e0       	ldi	r20, 0x08	; 8
   1418e:	55 e2       	ldi	r21, 0x25	; 37
   14190:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
     lcd_printf(3,1,PSTR("                    "));
   14194:	83 e0       	ldi	r24, 0x03	; 3
   14196:	61 e0       	ldi	r22, 0x01	; 1
   14198:	43 ef       	ldi	r20, 0xF3	; 243
   1419a:	54 e2       	ldi	r21, 0x24	; 36
   1419c:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
     lcd_printf(4,1,PSTR("                    "));
   141a0:	84 e0       	ldi	r24, 0x04	; 4
   141a2:	61 e0       	ldi	r22, 0x01	; 1
   141a4:	4e ed       	ldi	r20, 0xDE	; 222
   141a6:	54 e2       	ldi	r21, 0x24	; 36
   141a8:	0e 94 8d a0 	call	0x1411a	; 0x1411a <lcd_printf>
}
   141ac:	08 95       	ret

000141ae <lcd_put>:
		__string++;
		iPos++;
		}
}

void lcd_put(unsigned char __x, unsigned char __y, unsigned char __chr){
   141ae:	df 93       	push	r29
   141b0:	cf 93       	push	r28
   141b2:	0f 92       	push	r0
   141b4:	cd b7       	in	r28, 0x3d	; 61
   141b6:	de b7       	in	r29, 0x3e	; 62
	lcd_xy(__x, __y);
   141b8:	49 83       	std	Y+1, r20	; 0x01
   141ba:	0e 94 2f a0 	call	0x1405e	; 0x1405e <lcd_xy>
	_lcd(__chr);
   141be:	49 81       	ldd	r20, Y+1	; 0x01
   141c0:	84 2f       	mov	r24, r20
   141c2:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
}
   141c6:	0f 90       	pop	r0
   141c8:	cf 91       	pop	r28
   141ca:	df 91       	pop	r29
   141cc:	08 95       	ret

000141ce <lcd_cgram>:

void lcd_cgram(unsigned char location, char *ptr){
   141ce:	ef 92       	push	r14
   141d0:	ff 92       	push	r15
   141d2:	1f 93       	push	r17
   141d4:	df 93       	push	r29
   141d6:	cf 93       	push	r28
   141d8:	00 d0       	rcall	.+0      	; 0x141da <lcd_cgram+0xc>
   141da:	cd b7       	in	r28, 0x3d	; 61
   141dc:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
    if(location < 8){
   141de:	88 30       	cpi	r24, 0x08	; 8
   141e0:	a8 f4       	brcc	.+42     	; 0x1420c <lcd_cgram+0x3e>
		lcd_command(0x40 + (location * 8));
   141e2:	88 0f       	add	r24, r24
   141e4:	88 0f       	add	r24, r24
   141e6:	88 0f       	add	r24, r24
   141e8:	80 5c       	subi	r24, 0xC0	; 192
   141ea:	69 83       	std	Y+1, r22	; 0x01
   141ec:	7a 83       	std	Y+2, r23	; 0x02
   141ee:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
   141f2:	69 81       	ldd	r22, Y+1	; 0x01
   141f4:	7a 81       	ldd	r23, Y+2	; 0x02
   141f6:	46 2f       	mov	r20, r22
   141f8:	57 2f       	mov	r21, r23
   141fa:	7a 01       	movw	r14, r20
   141fc:	18 e0       	ldi	r17, 0x08	; 8
		for(i = 0; i < 8; i++)
			_lcd(ptr[i]);
   141fe:	f7 01       	movw	r30, r14
   14200:	81 91       	ld	r24, Z+
   14202:	7f 01       	movw	r14, r30
   14204:	0e 94 00 a0 	call	0x14000	; 0x14000 <_lcd>
   14208:	11 50       	subi	r17, 0x01	; 1

void lcd_cgram(unsigned char location, char *ptr){
	unsigned char i;
    if(location < 8){
		lcd_command(0x40 + (location * 8));
		for(i = 0; i < 8; i++)
   1420a:	c9 f7       	brne	.-14     	; 0x141fe <lcd_cgram+0x30>
			_lcd(ptr[i]);
	}
}
   1420c:	0f 90       	pop	r0
   1420e:	0f 90       	pop	r0
   14210:	cf 91       	pop	r28
   14212:	df 91       	pop	r29
   14214:	1f 91       	pop	r17
   14216:	ff 90       	pop	r15
   14218:	ef 90       	pop	r14
   1421a:	08 95       	ret

0001421c <_key_hit>:
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   1421c:	df 93       	push	r29
   1421e:	cf 93       	push	r28
   14220:	00 d0       	rcall	.+0      	; 0x14222 <_key_hit+0x6>
   14222:	00 d0       	rcall	.+0      	; 0x14224 <_key_hit+0x8>
   14224:	cd b7       	in	r28, 0x3d	; 61
   14226:	de b7       	in	r29, 0x3e	; 62
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};
   14228:	8f ee       	ldi	r24, 0xEF	; 239
   1422a:	89 83       	std	Y+1, r24	; 0x01
   1422c:	8f ed       	ldi	r24, 0xDF	; 223
   1422e:	8a 83       	std	Y+2, r24	; 0x02
   14230:	8f eb       	ldi	r24, 0xBF	; 191
   14232:	8b 83       	std	Y+3, r24	; 0x03
   14234:	8f e7       	ldi	r24, 0x7F	; 127
   14236:	8c 83       	std	Y+4, r24	; 0x04
   14238:	fe 01       	movw	r30, r28
   1423a:	31 96       	adiw	r30, 0x01	; 1
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   1423c:	9e 01       	movw	r18, r28
   1423e:	2b 5f       	subi	r18, 0xFB	; 251
   14240:	3f 4f       	sbci	r19, 0xFF	; 255
   14242:	86 e6       	ldi	r24, 0x66	; 102
   14244:	9e e0       	ldi	r25, 0x0E	; 14
   14246:	01 97       	sbiw	r24, 0x01	; 1
   14248:	f1 f7       	brne	.-4      	; 0x14246 <_key_hit+0x2a>
   1424a:	00 00       	nop
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
		_delay_ms(1);
		_KEY_PORT = outmap[i];
   1424c:	91 91       	ld	r25, Z+
   1424e:	90 93 62 00 	sts	0x0062, r25
   14252:	a6 e6       	ldi	r26, 0x66	; 102
   14254:	be e0       	ldi	r27, 0x0E	; 14
   14256:	11 97       	sbiw	r26, 0x01	; 1
   14258:	f1 f7       	brne	.-4      	; 0x14256 <_key_hit+0x3a>
   1425a:	00 00       	nop
		_delay_ms(1);
		keyhit = _KEY_MATRIX;
   1425c:	80 b1       	in	r24, 0x00	; 0
		if (keyhit!=outmap[i]) 
   1425e:	89 17       	cp	r24, r25
   14260:	19 f4       	brne	.+6      	; 0x14268 <_key_hit+0x4c>

char _key_hit(void){
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
   14262:	e2 17       	cp	r30, r18
   14264:	f3 07       	cpc	r31, r19
   14266:	69 f7       	brne	.-38     	; 0x14242 <_key_hit+0x26>
		keyhit = _KEY_MATRIX;
		if (keyhit!=outmap[i]) 
		    break;
	}
	return keyhit;
}
   14268:	0f 90       	pop	r0
   1426a:	0f 90       	pop	r0
   1426c:	0f 90       	pop	r0
   1426e:	0f 90       	pop	r0
   14270:	cf 91       	pop	r28
   14272:	df 91       	pop	r29
   14274:	08 95       	ret

00014276 <_key_crr>:

char _key_crr(char __key){
	if(	__key != _KEY_1 && __key != _KEY_2 &&
   14276:	8e 3e       	cpi	r24, 0xEE	; 238
   14278:	f9 f0       	breq	.+62     	; 0x142b8 <_key_crr+0x42>
   1427a:	8e 3d       	cpi	r24, 0xDE	; 222
   1427c:	e9 f0       	breq	.+58     	; 0x142b8 <_key_crr+0x42>
   1427e:	8e 3b       	cpi	r24, 0xBE	; 190
   14280:	d9 f0       	breq	.+54     	; 0x142b8 <_key_crr+0x42>
		__key != _KEY_3 && __key != _KEY_4 &&
   14282:	8d 3e       	cpi	r24, 0xED	; 237
   14284:	c9 f0       	breq	.+50     	; 0x142b8 <_key_crr+0x42>
   14286:	8d 3d       	cpi	r24, 0xDD	; 221
   14288:	b9 f0       	breq	.+46     	; 0x142b8 <_key_crr+0x42>
		__key != _KEY_5 && __key != _KEY_6 &&
   1428a:	8d 3b       	cpi	r24, 0xBD	; 189
   1428c:	a9 f0       	breq	.+42     	; 0x142b8 <_key_crr+0x42>
   1428e:	8b 3e       	cpi	r24, 0xEB	; 235
   14290:	99 f0       	breq	.+38     	; 0x142b8 <_key_crr+0x42>
		__key != _KEY_7 && __key != _KEY_8 &&
   14292:	8b 3d       	cpi	r24, 0xDB	; 219
   14294:	89 f0       	breq	.+34     	; 0x142b8 <_key_crr+0x42>
   14296:	8b 3b       	cpi	r24, 0xBB	; 187
   14298:	79 f0       	breq	.+30     	; 0x142b8 <_key_crr+0x42>
		__key != _KEY_9 && __key != _KEY_0 &&
   1429a:	87 3d       	cpi	r24, 0xD7	; 215
   1429c:	69 f0       	breq	.+26     	; 0x142b8 <_key_crr+0x42>
   1429e:	87 3e       	cpi	r24, 0xE7	; 231
   142a0:	59 f0       	breq	.+22     	; 0x142b8 <_key_crr+0x42>
		__key != _KEY_CANCEL && __key != _KEY_ENTER &&
   142a2:	87 3b       	cpi	r24, 0xB7	; 183
   142a4:	49 f0       	breq	.+18     	; 0x142b8 <_key_crr+0x42>
   142a6:	8e 37       	cpi	r24, 0x7E	; 126
   142a8:	39 f0       	breq	.+14     	; 0x142b8 <_key_crr+0x42>
		__key != _KEY_TIKET && __key != _KEY_MENU &&
   142aa:	8d 37       	cpi	r24, 0x7D	; 125
   142ac:	29 f0       	breq	.+10     	; 0x142b8 <_key_crr+0x42>
   142ae:	8b 37       	cpi	r24, 0x7B	; 123
   142b0:	19 f0       	breq	.+6      	; 0x142b8 <_key_crr+0x42>
		__key != _KEY_SHIFT && __key != _KEY_CLEAR)
   142b2:	87 37       	cpi	r24, 0x77	; 119
   142b4:	09 f0       	breq	.+2      	; 0x142b8 <_key_crr+0x42>
		return _KEY_NULL;
   142b6:	80 e0       	ldi	r24, 0x00	; 0
	return __key;
}
   142b8:	08 95       	ret

000142ba <_key_btn>:

char _key_btn(char __key){
   142ba:	87 57       	subi	r24, 0x77	; 119
   142bc:	88 37       	cpi	r24, 0x78	; 120
   142be:	30 f4       	brcc	.+12     	; 0x142cc <_key_btn+0x12>
   142c0:	e8 2f       	mov	r30, r24
   142c2:	f0 e0       	ldi	r31, 0x00	; 0
   142c4:	e2 57       	subi	r30, 0x72	; 114
   142c6:	fe 4f       	sbci	r31, 0xFE	; 254
   142c8:	80 81       	ld	r24, Z
   142ca:	08 95       	ret
   142cc:	80 e0       	ldi	r24, 0x00	; 0
			__keychar = 0x00;
			break;

	}
	return __keychar;
}
   142ce:	08 95       	ret

000142d0 <_key_scan>:





char _key_scan(char __select){
   142d0:	1f 93       	push	r17
   142d2:	18 2f       	mov	r17, r24
	char	__key = 0;

	if(__select==_PAD_SINGLE || __select==_PAD_MULTI){
   142d4:	81 50       	subi	r24, 0x01	; 1
   142d6:	82 30       	cpi	r24, 0x02	; 2
   142d8:	08 f0       	brcs	.+2      	; 0x142dc <_key_scan+0xc>
   142da:	64 c0       	rjmp	.+200    	; 0x143a4 <_key_scan+0xd4>
		__key = _key_hit();
   142dc:	0e 94 0e a1 	call	0x1421c	; 0x1421c <_key_hit>
		__key = _key_crr(__key);
   142e0:	0e 94 3b a1 	call	0x14276	; 0x14276 <_key_crr>

		if(__key!=_KEY_NULL){
   142e4:	88 23       	and	r24, r24
   142e6:	09 f4       	brne	.+2      	; 0x142ea <_key_scan+0x1a>
   142e8:	5e c0       	rjmp	.+188    	; 0x143a6 <_key_scan+0xd6>
			_LIGHT_SET;
   142ea:	21 e0       	ldi	r18, 0x01	; 1
   142ec:	20 93 8c 03 	sts	0x038C, r18
   142f0:	10 92 8d 03 	sts	0x038D, r1
   142f4:	90 91 65 00 	lds	r25, 0x0065
   142f8:	9d 7f       	andi	r25, 0xFD	; 253
   142fa:	90 93 65 00 	sts	0x0065, r25
			if(__sec_par)
   142fe:	90 91 97 03 	lds	r25, 0x0397
   14302:	99 23       	and	r25, r25
   14304:	31 f0       	breq	.+12     	; 0x14312 <_key_scan+0x42>
				_SEC_ON;
   14306:	20 93 92 03 	sts	0x0392, r18
   1430a:	10 92 94 03 	sts	0x0394, r1
   1430e:	10 92 93 03 	sts	0x0393, r1

			if(_IS1st){
   14312:	90 91 8e 03 	lds	r25, 0x038E
   14316:	99 23       	and	r25, r25
   14318:	71 f4       	brne	.+28     	; 0x14336 <_key_scan+0x66>
				if(	__key == _KEY_CANCEL || __key == _KEY_ENTER)
   1431a:	87 3e       	cpi	r24, 0xE7	; 231
   1431c:	11 f0       	breq	.+4      	; 0x14322 <_key_scan+0x52>
   1431e:	87 3b       	cpi	r24, 0xB7	; 183
   14320:	31 f4       	brne	.+12     	; 0x1432e <_key_scan+0x5e>
					if(__lock_num)
   14322:	90 91 8b 03 	lds	r25, 0x038B
   14326:	99 23       	and	r25, r25
   14328:	11 f0       	breq	.+4      	; 0x1432e <_key_scan+0x5e>
						__lock_num = 0;
   1432a:	10 92 8b 03 	sts	0x038B, r1
				_PAD_2nd;
   1432e:	91 e0       	ldi	r25, 0x01	; 1
   14330:	90 93 8e 03 	sts	0x038E, r25
   14334:	30 c0       	rjmp	.+96     	; 0x14396 <_key_scan+0xc6>
				_delay_ms(5);
				return __key;
			}
			if(_IS2nd){
   14336:	91 30       	cpi	r25, 0x01	; 1
   14338:	b1 f5       	brne	.+108    	; 0x143a6 <_key_scan+0xd6>
				if(__select==_PAD_MULTI){
   1433a:	12 30       	cpi	r17, 0x02	; 2
   1433c:	21 f5       	brne	.+72     	; 0x14386 <_key_scan+0xb6>
					if(	__key==_KEY_0 || __key==_KEY_1 || __key==_KEY_2 || __key==_KEY_3||
   1433e:	87 3d       	cpi	r24, 0xD7	; 215
   14340:	91 f0       	breq	.+36     	; 0x14366 <_key_scan+0x96>
   14342:	8e 3e       	cpi	r24, 0xEE	; 238
   14344:	81 f0       	breq	.+32     	; 0x14366 <_key_scan+0x96>
   14346:	8e 3d       	cpi	r24, 0xDE	; 222
   14348:	71 f0       	breq	.+28     	; 0x14366 <_key_scan+0x96>
   1434a:	8e 3b       	cpi	r24, 0xBE	; 190
   1434c:	61 f0       	breq	.+24     	; 0x14366 <_key_scan+0x96>
   1434e:	8d 3e       	cpi	r24, 0xED	; 237
   14350:	51 f0       	breq	.+20     	; 0x14366 <_key_scan+0x96>
						__key==_KEY_4 || __key==_KEY_5 || __key==_KEY_6 ||
   14352:	8d 3d       	cpi	r24, 0xDD	; 221
   14354:	41 f0       	breq	.+16     	; 0x14366 <_key_scan+0x96>
   14356:	8d 3b       	cpi	r24, 0xBD	; 189
   14358:	31 f0       	breq	.+12     	; 0x14366 <_key_scan+0x96>
   1435a:	8b 3e       	cpi	r24, 0xEB	; 235
   1435c:	21 f0       	breq	.+8      	; 0x14366 <_key_scan+0x96>
						__key==_KEY_7 || __key==_KEY_8 || __key==_KEY_9){
   1435e:	8b 3d       	cpi	r24, 0xDB	; 219
   14360:	11 f0       	breq	.+4      	; 0x14366 <_key_scan+0x96>
   14362:	8b 3b       	cpi	r24, 0xBB	; 187
   14364:	81 f4       	brne	.+32     	; 0x14386 <_key_scan+0xb6>
						if(__lock_num){
   14366:	80 91 8b 03 	lds	r24, 0x038B
   1436a:	88 23       	and	r24, r24
   1436c:	49 f0       	breq	.+18     	; 0x14380 <_key_scan+0xb0>
							_SHIFT_SET;
   1436e:	81 e0       	ldi	r24, 0x01	; 1
   14370:	80 93 8f 03 	sts	0x038F, r24
   14374:	10 92 90 03 	sts	0x0390, r1
							CURSOR_HIDE;
   14378:	8c e0       	ldi	r24, 0x0C	; 12
   1437a:	0e 94 75 9f 	call	0x13eea	; 0x13eea <lcd_command>
   1437e:	03 c0       	rjmp	.+6      	; 0x14386 <_key_scan+0xb6>
						}
						else
							__lock_num = 1;
   14380:	81 e0       	ldi	r24, 0x01	; 1
   14382:	80 93 8b 03 	sts	0x038B, r24
					}
				}
				do{
					__key = _key_hit();
   14386:	0e 94 0e a1 	call	0x1421c	; 0x1421c <_key_hit>
					__key = _key_crr(__key);
   1438a:	0e 94 3b a1 	call	0x14276	; 0x14276 <_key_crr>
				}while(__key!=_KEY_NULL);
   1438e:	88 23       	and	r24, r24
   14390:	d1 f7       	brne	.-12     	; 0x14386 <_key_scan+0xb6>
				_PAD_1st;
   14392:	10 92 8e 03 	sts	0x038E, r1
   14396:	ef ef       	ldi	r30, 0xFF	; 255
   14398:	f7 e4       	ldi	r31, 0x47	; 71
   1439a:	31 97       	sbiw	r30, 0x01	; 1
   1439c:	f1 f7       	brne	.-4      	; 0x1439a <_key_scan+0xca>
   1439e:	00 c0       	rjmp	.+0      	; 0x143a0 <_key_scan+0xd0>
   143a0:	00 00       	nop
				_delay_ms(5);
				return _KEY_NULL;
   143a2:	03 c0       	rjmp	.+6      	; 0x143aa <_key_scan+0xda>




char _key_scan(char __select){
	char	__key = 0;
   143a4:	80 e0       	ldi	r24, 0x00	; 0
				_delay_ms(5);
				return _KEY_NULL;
			}
		}
	}
	_PAD_1st;
   143a6:	10 92 8e 03 	sts	0x038E, r1
	return __key;
}
   143aa:	1f 91       	pop	r17
   143ac:	08 95       	ret

000143ae <_table_alphanum>:
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
	else __retchar = '\0';
   143ae:	6b 5b       	subi	r22, 0xBB	; 187
   143b0:	64 33       	cpi	r22, 0x34	; 52
   143b2:	30 f4       	brcc	.+12     	; 0x143c0 <_table_alphanum+0x12>
   143b4:	a6 2f       	mov	r26, r22
   143b6:	b0 e0       	ldi	r27, 0x00	; 0
   143b8:	aa 5f       	subi	r26, 0xFA	; 250
   143ba:	bd 4f       	sbci	r27, 0xFD	; 253
   143bc:	2c 91       	ld	r18, X
   143be:	01 c0       	rjmp	.+2      	; 0x143c2 <_table_alphanum+0x14>
	}
	_PAD_1st;
	return __key;
}

char _table_alphanum(char __caps, char __key, char __hit){
   143c0:	20 e0       	ldi	r18, 0x00	; 0
		default:
			__key = 0;
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
   143c2:	30 e0       	ldi	r19, 0x00	; 0
   143c4:	f9 01       	movw	r30, r18
   143c6:	e6 55       	subi	r30, 0x56	; 86
   143c8:	fa 4d       	sbci	r31, 0xDA	; 218
   143ca:	e4 91       	lpm	r30, Z+
   143cc:	e4 17       	cp	r30, r20
   143ce:	98 f0       	brcs	.+38     	; 0x143f6 <_table_alphanum+0x48>
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
   143d0:	ec e3       	ldi	r30, 0x3C	; 60
   143d2:	8e 9f       	mul	r24, r30
   143d4:	f0 01       	movw	r30, r0
   143d6:	11 24       	eor	r1, r1
   143d8:	e4 0f       	add	r30, r20
   143da:	f1 1d       	adc	r31, r1
   143dc:	c9 01       	movw	r24, r18
   143de:	88 0f       	add	r24, r24
   143e0:	99 1f       	adc	r25, r25
   143e2:	82 0f       	add	r24, r18
   143e4:	93 1f       	adc	r25, r19
   143e6:	88 0f       	add	r24, r24
   143e8:	99 1f       	adc	r25, r25
   143ea:	e8 0f       	add	r30, r24
   143ec:	f9 1f       	adc	r31, r25
   143ee:	ee 5c       	subi	r30, 0xCE	; 206
   143f0:	fa 4d       	sbci	r31, 0xDA	; 218
   143f2:	84 91       	lpm	r24, Z+
   143f4:	08 95       	ret
	else __retchar = '\0';
   143f6:	80 e0       	ldi	r24, 0x00	; 0

	return __retchar;
}
   143f8:	08 95       	ret

000143fa <_spi_init>:
#include <util/delay.h>
#include <compat/deprecated.h>

#include "SPI.h"
void _spi_init(unsigned char __mode, unsigned char __interrupt){
	if(__mode){
   143fa:	88 23       	and	r24, r24
   143fc:	41 f0       	breq	.+16     	; 0x1440e <_spi_init+0x14>
		_SPI_DDR = (1 << _SPI_MOSI) | (1 << _SPI_SCK);
   143fe:	86 e0       	ldi	r24, 0x06	; 6
   14400:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14402:	66 23       	and	r22, r22
   14404:	11 f0       	breq	.+4      	; 0x1440a <_spi_init+0x10>
			SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14406:	82 ed       	ldi	r24, 0xD2	; 210
   14408:	09 c0       	rjmp	.+18     	; 0x1441c <_spi_init+0x22>
		else
			SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   1440a:	82 e5       	ldi	r24, 0x52	; 82
   1440c:	07 c0       	rjmp	.+14     	; 0x1441c <_spi_init+0x22>
	}
	else{
		_SPI_DDR = (1 << _SPI_MISO);
   1440e:	88 e0       	ldi	r24, 0x08	; 8
   14410:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14412:	66 23       	and	r22, r22
   14414:	11 f0       	breq	.+4      	; 0x1441a <_spi_init+0x20>
			SPCR = (1 << SPIE) | (1 << SPE);
   14416:	80 ec       	ldi	r24, 0xC0	; 192
   14418:	01 c0       	rjmp	.+2      	; 0x1441c <_spi_init+0x22>
		else
			SPCR = (1 << SPE);
   1441a:	80 e4       	ldi	r24, 0x40	; 64
   1441c:	8d b9       	out	0x0d, r24	; 13
   1441e:	08 95       	ret

00014420 <_spi_enable>:
	}
}

void _spi_enable(unsigned char __select){
	if(__select == 0){
   14420:	88 23       	and	r24, r24
   14422:	19 f4       	brne	.+6      	; 0x1442a <_spi_enable+0xa>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14424:	db 9a       	sbi	0x1b, 3	; 27
		sbi(_MMC_PORT, _MMC_PIN);
   14426:	1b 9a       	sbi	0x03, 3	; 3
   14428:	08 95       	ret
	}
	if(__select == 1){
   1442a:	81 30       	cpi	r24, 0x01	; 1
   1442c:	49 f4       	brne	.+18     	; 0x14440 <_spi_enable+0x20>
		sbi(_MMC_PORT, _MMC_PIN);
   1442e:	1b 9a       	sbi	0x03, 3	; 3
   14430:	8f ef       	ldi	r24, 0xFF	; 255
   14432:	97 e4       	ldi	r25, 0x47	; 71
   14434:	01 97       	sbiw	r24, 0x01	; 1
   14436:	f1 f7       	brne	.-4      	; 0x14434 <_spi_enable+0x14>
   14438:	00 c0       	rjmp	.+0      	; 0x1443a <_spi_enable+0x1a>
   1443a:	00 00       	nop
		_delay_ms(5);
		cbi(_SLAVE_PORT, _SLAVE_PIN);
   1443c:	db 98       	cbi	0x1b, 3	; 27
   1443e:	08 95       	ret
	}
	if(__select == 2){
   14440:	82 30       	cpi	r24, 0x02	; 2
   14442:	41 f4       	brne	.+16     	; 0x14454 <_spi_enable+0x34>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14444:	db 9a       	sbi	0x1b, 3	; 27
   14446:	8f ef       	ldi	r24, 0xFF	; 255
   14448:	97 e4       	ldi	r25, 0x47	; 71
   1444a:	01 97       	sbiw	r24, 0x01	; 1
   1444c:	f1 f7       	brne	.-4      	; 0x1444a <_spi_enable+0x2a>
   1444e:	00 c0       	rjmp	.+0      	; 0x14450 <_spi_enable+0x30>
   14450:	00 00       	nop
		_delay_ms(5);
		cbi(_MMC_PORT, _MMC_PIN);
   14452:	1b 98       	cbi	0x03, 3	; 3
   14454:	08 95       	ret

00014456 <_spi>:
	}
}

unsigned char _spi(unsigned char __data){
	SPDR = __data;
   14456:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
   14458:	77 9b       	sbis	0x0e, 7	; 14
   1445a:	fe cf       	rjmp	.-4      	; 0x14458 <_spi+0x2>
	return SPDR;
   1445c:	8f b1       	in	r24, 0x0f	; 15
}
   1445e:	08 95       	ret

00014460 <_rtc>:

unsigned char _rtc(int __addr, int __len, char* __datetime, unsigned char __dir){
	int				__twcr;
	unsigned char	__i = 0;
	
	if(__dir){
   14460:	22 23       	and	r18, r18
   14462:	09 f4       	brne	.+2      	; 0x14466 <_rtc+0x6>
   14464:	48 c0       	rjmp	.+144    	; 0x144f6 <_rtc+0x96>
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14466:	94 ea       	ldi	r25, 0xA4	; 164
   14468:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   1446c:	90 91 74 00 	lds	r25, 0x0074
   14470:	97 ff       	sbrs	r25, 7
   14472:	fc cf       	rjmp	.-8      	; 0x1446c <_rtc+0xc>
		if(TW_STATUS != TW_START)
   14474:	90 91 71 00 	lds	r25, 0x0071
   14478:	98 7f       	andi	r25, 0xF8	; 248
   1447a:	98 30       	cpi	r25, 0x08	; 8
   1447c:	09 f0       	breq	.+2      	; 0x14480 <_rtc+0x20>
   1447e:	ae c0       	rjmp	.+348    	; 0x145dc <_rtc+0x17c>
			return 1;

		TWDR = _DS1307W;
   14480:	90 ed       	ldi	r25, 0xD0	; 208
   14482:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14486:	94 e8       	ldi	r25, 0x84	; 132
   14488:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   1448c:	90 91 74 00 	lds	r25, 0x0074
   14490:	97 ff       	sbrs	r25, 7
   14492:	fc cf       	rjmp	.-8      	; 0x1448c <_rtc+0x2c>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14494:	90 91 71 00 	lds	r25, 0x0071
   14498:	98 7f       	andi	r25, 0xF8	; 248
   1449a:	98 31       	cpi	r25, 0x18	; 24
   1449c:	09 f0       	breq	.+2      	; 0x144a0 <_rtc+0x40>
   1449e:	9e c0       	rjmp	.+316    	; 0x145dc <_rtc+0x17c>
			return 1;

		TWDR = __addr;
   144a0:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   144a4:	84 e8       	ldi	r24, 0x84	; 132
   144a6:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   144aa:	80 91 74 00 	lds	r24, 0x0074
   144ae:	87 ff       	sbrs	r24, 7
   144b0:	fc cf       	rjmp	.-8      	; 0x144aa <_rtc+0x4a>
		if(TW_STATUS != TW_MT_DATA_ACK)
   144b2:	80 91 71 00 	lds	r24, 0x0071
   144b6:	88 7f       	andi	r24, 0xF8	; 248
   144b8:	88 32       	cpi	r24, 0x28	; 40
   144ba:	09 f0       	breq	.+2      	; 0x144be <_rtc+0x5e>
   144bc:	8f c0       	rjmp	.+286    	; 0x145dc <_rtc+0x17c>
   144be:	cb 01       	movw	r24, r22
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
			TWCR = _BV(TWINT) | _BV(TWEN);
   144c0:	34 e8       	ldi	r19, 0x84	; 132
   144c2:	13 c0       	rjmp	.+38     	; 0x144ea <_rtc+0x8a>
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
   144c4:	fa 01       	movw	r30, r20
   144c6:	e2 0f       	add	r30, r18
   144c8:	f1 1d       	adc	r31, r1
   144ca:	20 81       	ld	r18, Z
   144cc:	20 93 73 00 	sts	0x0073, r18
			TWCR = _BV(TWINT) | _BV(TWEN);
   144d0:	30 93 74 00 	sts	0x0074, r19
			_rtc_response;
   144d4:	20 91 74 00 	lds	r18, 0x0074
   144d8:	27 ff       	sbrs	r18, 7
   144da:	fc cf       	rjmp	.-8      	; 0x144d4 <_rtc+0x74>
			if(TW_STATUS == TW_MT_DATA_NACK)
   144dc:	20 91 71 00 	lds	r18, 0x0071
   144e0:	28 7f       	andi	r18, 0xF8	; 248
   144e2:	20 33       	cpi	r18, 0x30	; 48
   144e4:	09 f4       	brne	.+2      	; 0x144e8 <_rtc+0x88>
   144e6:	7a c0       	rjmp	.+244    	; 0x145dc <_rtc+0x17c>
		TWCR = _BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
   144e8:	01 97       	sbiw	r24, 0x01	; 1
   144ea:	26 2f       	mov	r18, r22
   144ec:	28 1b       	sub	r18, r24
   144ee:	18 16       	cp	r1, r24
   144f0:	19 06       	cpc	r1, r25
   144f2:	44 f3       	brlt	.-48     	; 0x144c4 <_rtc+0x64>
   144f4:	6e c0       	rjmp	.+220    	; 0x145d2 <_rtc+0x172>
		}

		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}
	else{
		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   144f6:	94 ea       	ldi	r25, 0xA4	; 164
   144f8:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   144fc:	90 91 74 00 	lds	r25, 0x0074
   14500:	97 ff       	sbrs	r25, 7
   14502:	fc cf       	rjmp	.-8      	; 0x144fc <_rtc+0x9c>
		if(TW_STATUS != TW_START)
   14504:	90 91 71 00 	lds	r25, 0x0071
   14508:	98 7f       	andi	r25, 0xF8	; 248
   1450a:	98 30       	cpi	r25, 0x08	; 8
   1450c:	09 f0       	breq	.+2      	; 0x14510 <_rtc+0xb0>
   1450e:	66 c0       	rjmp	.+204    	; 0x145dc <_rtc+0x17c>
			return 1;

		TWDR = _DS1307W;
   14510:	90 ed       	ldi	r25, 0xD0	; 208
   14512:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14516:	94 e8       	ldi	r25, 0x84	; 132
   14518:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   1451c:	90 91 74 00 	lds	r25, 0x0074
   14520:	97 ff       	sbrs	r25, 7
   14522:	fc cf       	rjmp	.-8      	; 0x1451c <_rtc+0xbc>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14524:	90 91 71 00 	lds	r25, 0x0071
   14528:	98 7f       	andi	r25, 0xF8	; 248
   1452a:	98 31       	cpi	r25, 0x18	; 24
   1452c:	09 f0       	breq	.+2      	; 0x14530 <_rtc+0xd0>
   1452e:	56 c0       	rjmp	.+172    	; 0x145dc <_rtc+0x17c>
			return 1;

		TWDR = __addr;
   14530:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14534:	84 e8       	ldi	r24, 0x84	; 132
   14536:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   1453a:	80 91 74 00 	lds	r24, 0x0074
   1453e:	87 ff       	sbrs	r24, 7
   14540:	fc cf       	rjmp	.-8      	; 0x1453a <_rtc+0xda>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14542:	80 91 71 00 	lds	r24, 0x0071
   14546:	88 7f       	andi	r24, 0xF8	; 248
   14548:	88 32       	cpi	r24, 0x28	; 40
   1454a:	09 f0       	breq	.+2      	; 0x1454e <_rtc+0xee>
   1454c:	47 c0       	rjmp	.+142    	; 0x145dc <_rtc+0x17c>
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   1454e:	84 ea       	ldi	r24, 0xA4	; 164
   14550:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14554:	80 91 74 00 	lds	r24, 0x0074
   14558:	87 ff       	sbrs	r24, 7
   1455a:	fc cf       	rjmp	.-8      	; 0x14554 <_rtc+0xf4>
		if(TW_STATUS != TW_REP_START)
   1455c:	80 91 71 00 	lds	r24, 0x0071
   14560:	88 7f       	andi	r24, 0xF8	; 248
   14562:	80 31       	cpi	r24, 0x10	; 16
   14564:	d9 f5       	brne	.+118    	; 0x145dc <_rtc+0x17c>
			return 1;

		TWDR = _DS1307R;
   14566:	81 ed       	ldi	r24, 0xD1	; 209
   14568:	80 93 73 00 	sts	0x0073, r24
		TWCR =_BV(TWINT) | _BV(TWEN);
   1456c:	84 e8       	ldi	r24, 0x84	; 132
   1456e:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14572:	80 91 74 00 	lds	r24, 0x0074
   14576:	87 ff       	sbrs	r24, 7
   14578:	fc cf       	rjmp	.-8      	; 0x14572 <_rtc+0x112>
		if(TW_STATUS != TW_MR_SLA_ACK)
   1457a:	80 91 71 00 	lds	r24, 0x0071
   1457e:	88 7f       	andi	r24, 0xF8	; 248
   14580:	80 34       	cpi	r24, 0x40	; 64
   14582:	71 f5       	brne	.+92     	; 0x145e0 <_rtc+0x180>
   14584:	20 e0       	ldi	r18, 0x00	; 0
   14586:	84 ec       	ldi	r24, 0xC4	; 196
   14588:	90 e0       	ldi	r25, 0x00	; 0
   1458a:	20 c0       	rjmp	.+64     	; 0x145cc <_rtc+0x16c>
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
			if(__len == 1)
   1458c:	61 30       	cpi	r22, 0x01	; 1
   1458e:	71 05       	cpc	r23, r1
   14590:	11 f4       	brne	.+4      	; 0x14596 <_rtc+0x136>
				__twcr = _BV(TWINT) | _BV(TWEN);
   14592:	84 e8       	ldi	r24, 0x84	; 132
   14594:	90 e0       	ldi	r25, 0x00	; 0
			TWCR = __twcr;
   14596:	80 93 74 00 	sts	0x0074, r24
			_rtc_response;
   1459a:	30 91 74 00 	lds	r19, 0x0074
   1459e:	37 ff       	sbrs	r19, 7
   145a0:	fc cf       	rjmp	.-8      	; 0x1459a <_rtc+0x13a>
			if(TW_STATUS == TW_MR_DATA_NACK)
   145a2:	30 91 71 00 	lds	r19, 0x0071
   145a6:	38 7f       	andi	r19, 0xF8	; 248
   145a8:	38 35       	cpi	r19, 0x58	; 88
   145aa:	11 f4       	brne	.+4      	; 0x145b0 <_rtc+0x150>
				__len = 0;
   145ac:	60 e0       	ldi	r22, 0x00	; 0
   145ae:	70 e0       	ldi	r23, 0x00	; 0
			if(TW_STATUS == TW_MR_DATA_ACK)
   145b0:	30 91 71 00 	lds	r19, 0x0071
   145b4:	38 7f       	andi	r19, 0xF8	; 248
   145b6:	30 35       	cpi	r19, 0x50	; 80
   145b8:	39 f4       	brne	.+14     	; 0x145c8 <_rtc+0x168>
				__datetime[__i++] = TWDR;
   145ba:	30 91 73 00 	lds	r19, 0x0073
   145be:	fa 01       	movw	r30, r20
   145c0:	e2 0f       	add	r30, r18
   145c2:	f1 1d       	adc	r31, r1
   145c4:	30 83       	st	Z, r19
   145c6:	2f 5f       	subi	r18, 0xFF	; 255
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
   145c8:	61 50       	subi	r22, 0x01	; 1
   145ca:	70 40       	sbci	r23, 0x00	; 0
   145cc:	16 16       	cp	r1, r22
   145ce:	17 06       	cpc	r1, r23
   145d0:	ec f2       	brlt	.-70     	; 0x1458c <_rtc+0x12c>
			if(TW_STATUS == TW_MR_DATA_NACK)
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
				__datetime[__i++] = TWDR;
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
   145d2:	84 e9       	ldi	r24, 0x94	; 148
   145d4:	80 93 74 00 	sts	0x0074, r24
	}

    return 0;
   145d8:	80 e0       	ldi	r24, 0x00	; 0
   145da:	08 95       	ret
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_REP_START)
			return 1;
   145dc:	81 e0       	ldi	r24, 0x01	; 1
   145de:	08 95       	ret

		TWDR = _DS1307R;
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;
   145e0:	81 e0       	ldi	r24, 0x01	; 1
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}

    return 0;
}
   145e2:	08 95       	ret

000145e4 <_datetime>:

void _datetime(unsigned char __mode, char* __date, char* __time){
   145e4:	ef 92       	push	r14
   145e6:	ff 92       	push	r15
   145e8:	0f 93       	push	r16
   145ea:	1f 93       	push	r17
   145ec:	df 93       	push	r29
   145ee:	cf 93       	push	r28
   145f0:	cd b7       	in	r28, 0x3d	; 61
   145f2:	de b7       	in	r29, 0x3e	; 62
   145f4:	64 97       	sbiw	r28, 0x14	; 20
   145f6:	0f b6       	in	r0, 0x3f	; 63
   145f8:	f8 94       	cli
   145fa:	de bf       	out	0x3e, r29	; 62
   145fc:	0f be       	out	0x3f, r0	; 63
   145fe:	cd bf       	out	0x3d, r28	; 61
   14600:	28 2f       	mov	r18, r24
   14602:	8b 01       	movw	r16, r22
   14604:	7a 01       	movw	r14, r20
   14606:	ae 01       	movw	r20, r28
   14608:	4f 5f       	subi	r20, 0xFF	; 255
   1460a:	5f 4f       	sbci	r21, 0xFF	; 255
	char	__datetime[20];

	if(__mode){
   1460c:	88 23       	and	r24, r24
   1460e:	99 f1       	breq	.+102    	; 0x14676 <_datetime+0x92>
		__datetime[4] = (((__date[0] - 0x30) & 0x0F) << 4) + ((__date[1] - 0x30) & 0x0F);
   14610:	fb 01       	movw	r30, r22
   14612:	80 81       	ld	r24, Z
   14614:	82 95       	swap	r24
   14616:	80 7f       	andi	r24, 0xF0	; 240
   14618:	91 81       	ldd	r25, Z+1	; 0x01
   1461a:	9f 70       	andi	r25, 0x0F	; 15
   1461c:	89 0f       	add	r24, r25
   1461e:	8d 83       	std	Y+5, r24	; 0x05
		__datetime[5] = (((__date[3] - 0x30) & 0x0F) << 4) + ((__date[4] - 0x30) & 0x0F);
   14620:	83 81       	ldd	r24, Z+3	; 0x03
   14622:	82 95       	swap	r24
   14624:	80 7f       	andi	r24, 0xF0	; 240
   14626:	94 81       	ldd	r25, Z+4	; 0x04
   14628:	9f 70       	andi	r25, 0x0F	; 15
   1462a:	89 0f       	add	r24, r25
   1462c:	8e 83       	std	Y+6, r24	; 0x06
		__datetime[6] = (((__date[6] - 0x30) & 0x0F) << 4) + ((__date[7] - 0x30) & 0x0F);
   1462e:	86 81       	ldd	r24, Z+6	; 0x06
   14630:	82 95       	swap	r24
   14632:	80 7f       	andi	r24, 0xF0	; 240
   14634:	97 81       	ldd	r25, Z+7	; 0x07
   14636:	9f 70       	andi	r25, 0x0F	; 15
   14638:	89 0f       	add	r24, r25
   1463a:	8f 83       	std	Y+7, r24	; 0x07

		__datetime[2] = (((__time[0] - 0x30) & 0x0F) << 4) + ((__time[1] - 0x30) & 0x0F);
   1463c:	f7 01       	movw	r30, r14
   1463e:	80 81       	ld	r24, Z
   14640:	82 95       	swap	r24
   14642:	80 7f       	andi	r24, 0xF0	; 240
   14644:	91 81       	ldd	r25, Z+1	; 0x01
   14646:	9f 70       	andi	r25, 0x0F	; 15
   14648:	89 0f       	add	r24, r25
   1464a:	8b 83       	std	Y+3, r24	; 0x03
		__datetime[1] = (((__time[3] - 0x30) & 0x0F) << 4) + ((__time[4] - 0x30) & 0x0F);
   1464c:	83 81       	ldd	r24, Z+3	; 0x03
   1464e:	82 95       	swap	r24
   14650:	80 7f       	andi	r24, 0xF0	; 240
   14652:	94 81       	ldd	r25, Z+4	; 0x04
   14654:	9f 70       	andi	r25, 0x0F	; 15
   14656:	89 0f       	add	r24, r25
   14658:	8a 83       	std	Y+2, r24	; 0x02
		__datetime[0] = (((__time[6] - 0x30) & 0x0F) << 4) + ((__time[7] - 0x30) & 0x0F);
   1465a:	86 81       	ldd	r24, Z+6	; 0x06
   1465c:	82 95       	swap	r24
   1465e:	80 7f       	andi	r24, 0xF0	; 240
   14660:	97 81       	ldd	r25, Z+7	; 0x07
   14662:	9f 70       	andi	r25, 0x0F	; 15
   14664:	89 0f       	add	r24, r25
   14666:	89 83       	std	Y+1, r24	; 0x01
		_rtc(0, 8, __datetime, __mode);
   14668:	80 e0       	ldi	r24, 0x00	; 0
   1466a:	90 e0       	ldi	r25, 0x00	; 0
   1466c:	68 e0       	ldi	r22, 0x08	; 8
   1466e:	70 e0       	ldi	r23, 0x00	; 0
   14670:	0e 94 30 a2 	call	0x14460	; 0x14460 <_rtc>
   14674:	4a c0       	rjmp	.+148    	; 0x1470a <_datetime+0x126>
	}
	else
		if(_rtc(0, 8, __datetime, __mode) != 1){
   14676:	80 e0       	ldi	r24, 0x00	; 0
   14678:	90 e0       	ldi	r25, 0x00	; 0
   1467a:	68 e0       	ldi	r22, 0x08	; 8
   1467c:	70 e0       	ldi	r23, 0x00	; 0
   1467e:	20 e0       	ldi	r18, 0x00	; 0
   14680:	0e 94 30 a2 	call	0x14460	; 0x14460 <_rtc>
   14684:	81 30       	cpi	r24, 0x01	; 1
   14686:	09 f4       	brne	.+2      	; 0x1468a <_datetime+0xa6>
   14688:	40 c0       	rjmp	.+128    	; 0x1470a <_datetime+0x126>
			__date[0] = (__datetime[4] >> 4) + 0x30;
   1468a:	8d 81       	ldd	r24, Y+5	; 0x05
   1468c:	98 2f       	mov	r25, r24
   1468e:	92 95       	swap	r25
   14690:	9f 70       	andi	r25, 0x0F	; 15
   14692:	90 5d       	subi	r25, 0xD0	; 208
   14694:	f8 01       	movw	r30, r16
   14696:	90 83       	st	Z, r25
			__date[1] = (__datetime[4] & 0x0F) + 0x30;
   14698:	8f 70       	andi	r24, 0x0F	; 15
   1469a:	80 5d       	subi	r24, 0xD0	; 208
   1469c:	81 83       	std	Z+1, r24	; 0x01
			__date[2] = '/';
   1469e:	2f e2       	ldi	r18, 0x2F	; 47
   146a0:	22 83       	std	Z+2, r18	; 0x02
			__date[3] = (__datetime[5] >> 4) + 0x30;
   146a2:	8e 81       	ldd	r24, Y+6	; 0x06
   146a4:	98 2f       	mov	r25, r24
   146a6:	92 95       	swap	r25
   146a8:	9f 70       	andi	r25, 0x0F	; 15
   146aa:	90 5d       	subi	r25, 0xD0	; 208
   146ac:	93 83       	std	Z+3, r25	; 0x03
			__date[4] = (__datetime[5] & 0x0F) + 0x30;
   146ae:	8f 70       	andi	r24, 0x0F	; 15
   146b0:	80 5d       	subi	r24, 0xD0	; 208
   146b2:	84 83       	std	Z+4, r24	; 0x04
			__date[5] = '/';
   146b4:	25 83       	std	Z+5, r18	; 0x05
			__date[6] = (__datetime[6] >> 4) + 0x30;
   146b6:	8f 81       	ldd	r24, Y+7	; 0x07
   146b8:	98 2f       	mov	r25, r24
   146ba:	92 95       	swap	r25
   146bc:	9f 70       	andi	r25, 0x0F	; 15
   146be:	90 5d       	subi	r25, 0xD0	; 208
   146c0:	96 83       	std	Z+6, r25	; 0x06
			__date[7] = (__datetime[6] & 0x0F) + 0x30;
   146c2:	8f 70       	andi	r24, 0x0F	; 15
   146c4:	80 5d       	subi	r24, 0xD0	; 208
   146c6:	87 83       	std	Z+7, r24	; 0x07
			__date[8] = '\0';
   146c8:	10 86       	std	Z+8, r1	; 0x08

			__time[0] = (__datetime[2] >> 4) + 0x30;
   146ca:	8b 81       	ldd	r24, Y+3	; 0x03
   146cc:	98 2f       	mov	r25, r24
   146ce:	92 95       	swap	r25
   146d0:	9f 70       	andi	r25, 0x0F	; 15
   146d2:	90 5d       	subi	r25, 0xD0	; 208
   146d4:	f7 01       	movw	r30, r14
   146d6:	90 83       	st	Z, r25
			__time[1] = (__datetime[2] & 0x0F) + 0x30;
   146d8:	8f 70       	andi	r24, 0x0F	; 15
   146da:	80 5d       	subi	r24, 0xD0	; 208
   146dc:	81 83       	std	Z+1, r24	; 0x01
			__time[2] = ':';
   146de:	2a e3       	ldi	r18, 0x3A	; 58
   146e0:	22 83       	std	Z+2, r18	; 0x02
			__time[3] = (__datetime[1] >> 4) + 0x30;
   146e2:	8a 81       	ldd	r24, Y+2	; 0x02
   146e4:	98 2f       	mov	r25, r24
   146e6:	92 95       	swap	r25
   146e8:	9f 70       	andi	r25, 0x0F	; 15
   146ea:	90 5d       	subi	r25, 0xD0	; 208
   146ec:	93 83       	std	Z+3, r25	; 0x03
			__time[4] = (__datetime[1] & 0x0F) + 0x30;
   146ee:	8f 70       	andi	r24, 0x0F	; 15
   146f0:	80 5d       	subi	r24, 0xD0	; 208
   146f2:	84 83       	std	Z+4, r24	; 0x04
			__time[5] = ':';
   146f4:	25 83       	std	Z+5, r18	; 0x05
			__time[6] = (__datetime[0] >> 4) + 0x30;
   146f6:	89 81       	ldd	r24, Y+1	; 0x01
   146f8:	98 2f       	mov	r25, r24
   146fa:	92 95       	swap	r25
   146fc:	9f 70       	andi	r25, 0x0F	; 15
   146fe:	90 5d       	subi	r25, 0xD0	; 208
   14700:	96 83       	std	Z+6, r25	; 0x06
			__time[7] = (__datetime[0] & 0x0F) + 0x30;
   14702:	8f 70       	andi	r24, 0x0F	; 15
   14704:	80 5d       	subi	r24, 0xD0	; 208
   14706:	87 83       	std	Z+7, r24	; 0x07
			__time[8] = '\0';
   14708:	10 86       	std	Z+8, r1	; 0x08
		}
}
   1470a:	64 96       	adiw	r28, 0x14	; 20
   1470c:	0f b6       	in	r0, 0x3f	; 63
   1470e:	f8 94       	cli
   14710:	de bf       	out	0x3e, r29	; 62
   14712:	0f be       	out	0x3f, r0	; 63
   14714:	cd bf       	out	0x3d, r28	; 61
   14716:	cf 91       	pop	r28
   14718:	df 91       	pop	r29
   1471a:	1f 91       	pop	r17
   1471c:	0f 91       	pop	r16
   1471e:	ff 90       	pop	r15
   14720:	ef 90       	pop	r14
   14722:	08 95       	ret

00014724 <_day>:

unsigned char _day(void){
   14724:	df 93       	push	r29
   14726:	cf 93       	push	r28
   14728:	cd b7       	in	r28, 0x3d	; 61
   1472a:	de b7       	in	r29, 0x3e	; 62
   1472c:	64 97       	sbiw	r28, 0x14	; 20
   1472e:	0f b6       	in	r0, 0x3f	; 63
   14730:	f8 94       	cli
   14732:	de bf       	out	0x3e, r29	; 62
   14734:	0f be       	out	0x3f, r0	; 63
   14736:	cd bf       	out	0x3d, r28	; 61
	char	__datetime[20];

	if(_rtc(0, 8, __datetime, 0) != 1)
   14738:	80 e0       	ldi	r24, 0x00	; 0
   1473a:	90 e0       	ldi	r25, 0x00	; 0
   1473c:	68 e0       	ldi	r22, 0x08	; 8
   1473e:	70 e0       	ldi	r23, 0x00	; 0
   14740:	ae 01       	movw	r20, r28
   14742:	4f 5f       	subi	r20, 0xFF	; 255
   14744:	5f 4f       	sbci	r21, 0xFF	; 255
   14746:	20 e0       	ldi	r18, 0x00	; 0
   14748:	0e 94 30 a2 	call	0x14460	; 0x14460 <_rtc>
   1474c:	81 30       	cpi	r24, 0x01	; 1
   1474e:	19 f0       	breq	.+6      	; 0x14756 <_day+0x32>
		return __datetime[3] & 0x0F;
   14750:	8c 81       	ldd	r24, Y+4	; 0x04
   14752:	8f 70       	andi	r24, 0x0F	; 15
   14754:	01 c0       	rjmp	.+2      	; 0x14758 <_day+0x34>
	return 0;
   14756:	80 e0       	ldi	r24, 0x00	; 0
   14758:	64 96       	adiw	r28, 0x14	; 20
   1475a:	0f b6       	in	r0, 0x3f	; 63
   1475c:	f8 94       	cli
   1475e:	de bf       	out	0x3e, r29	; 62
   14760:	0f be       	out	0x3f, r0	; 63
   14762:	cd bf       	out	0x3d, r28	; 61
   14764:	cf 91       	pop	r28
   14766:	df 91       	pop	r29
   14768:	08 95       	ret

0001476a <uart_baudrate>:
	}

	uart_baudrate(__com, __baudrate);
}

void uart_baudrate(unsigned char __com, unsigned long __baudrate){
   1476a:	1f 93       	push	r17
   1476c:	18 2f       	mov	r17, r24
   1476e:	9a 01       	movw	r18, r20
   14770:	ab 01       	movw	r20, r22
	unsigned long __br;

	__br = (unsigned long)((_CPU_DEFAULT + (__baudrate * 8)) / (__baudrate * 16) - 1);
   14772:	ca 01       	movw	r24, r20
   14774:	b9 01       	movw	r22, r18
   14776:	60 50       	subi	r22, 0x00	; 0
   14778:	70 4e       	sbci	r23, 0xE0	; 224
   1477a:	83 4e       	sbci	r24, 0xE3	; 227
   1477c:	9f 4f       	sbci	r25, 0xFF	; 255
   1477e:	f3 e0       	ldi	r31, 0x03	; 3
   14780:	66 0f       	add	r22, r22
   14782:	77 1f       	adc	r23, r23
   14784:	88 1f       	adc	r24, r24
   14786:	99 1f       	adc	r25, r25
   14788:	fa 95       	dec	r31
   1478a:	d1 f7       	brne	.-12     	; 0x14780 <uart_baudrate+0x16>
   1478c:	e4 e0       	ldi	r30, 0x04	; 4
   1478e:	22 0f       	add	r18, r18
   14790:	33 1f       	adc	r19, r19
   14792:	44 1f       	adc	r20, r20
   14794:	55 1f       	adc	r21, r21
   14796:	ea 95       	dec	r30
   14798:	d1 f7       	brne	.-12     	; 0x1478e <uart_baudrate+0x24>
   1479a:	0e 94 cc a5 	call	0x14b98	; 0x14b98 <__udivmodsi4>
   1479e:	21 50       	subi	r18, 0x01	; 1
   147a0:	30 40       	sbci	r19, 0x00	; 0
   147a2:	40 40       	sbci	r20, 0x00	; 0
   147a4:	50 40       	sbci	r21, 0x00	; 0
   147a6:	bb 27       	eor	r27, r27
   147a8:	a5 2f       	mov	r26, r21
   147aa:	94 2f       	mov	r25, r20
   147ac:	83 2f       	mov	r24, r19

	if(__com){
   147ae:	11 23       	and	r17, r17
   147b0:	29 f0       	breq	.+10     	; 0x147bc <uart_baudrate+0x52>
		UBRR1L = __br;
   147b2:	20 93 99 00 	sts	0x0099, r18
		UBRR1H = __br >> 8;
   147b6:	80 93 98 00 	sts	0x0098, r24
   147ba:	03 c0       	rjmp	.+6      	; 0x147c2 <uart_baudrate+0x58>
	}
	else{
		UBRR0L = __br;
   147bc:	29 b9       	out	0x09, r18	; 9
		UBRR0H = __br >> 8;
   147be:	80 93 90 00 	sts	0x0090, r24
	}
}
   147c2:	1f 91       	pop	r17
   147c4:	08 95       	ret

000147c6 <uart_init>:
#include <string.h>

#include "UART.h"

void uart_init(unsigned char __com, unsigned long __baudrate){
	if(__com){
   147c6:	88 23       	and	r24, r24
   147c8:	39 f0       	breq	.+14     	; 0x147d8 <uart_init+0x12>
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
   147ca:	98 e9       	ldi	r25, 0x98	; 152
   147cc:	90 93 9a 00 	sts	0x009A, r25
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
   147d0:	96 e0       	ldi	r25, 0x06	; 6
   147d2:	90 93 9d 00 	sts	0x009D, r25
   147d6:	05 c0       	rjmp	.+10     	; 0x147e2 <uart_init+0x1c>
	}
	else{
		UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
   147d8:	98 e9       	ldi	r25, 0x98	; 152
   147da:	9a b9       	out	0x0a, r25	; 10
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
   147dc:	96 e0       	ldi	r25, 0x06	; 6
   147de:	90 93 95 00 	sts	0x0095, r25
	}

	uart_baudrate(__com, __baudrate);
   147e2:	0e 94 b5 a3 	call	0x1476a	; 0x1476a <uart_baudrate>
}
   147e6:	08 95       	ret

000147e8 <uart>:
		UBRR0H = __br >> 8;
	}
}

unsigned char uart(unsigned char __com, unsigned char __dir, unsigned char __chr){
	if(__com){
   147e8:	88 23       	and	r24, r24
   147ea:	81 f0       	breq	.+32     	; 0x1480c <uart+0x24>
		if(__dir){
   147ec:	66 23       	and	r22, r22
   147ee:	39 f0       	breq	.+14     	; 0x147fe <uart+0x16>
			loop_until_bit_is_set(UCSR1A, UDRE1);
   147f0:	80 91 9b 00 	lds	r24, 0x009B
   147f4:	85 ff       	sbrs	r24, 5
   147f6:	fc cf       	rjmp	.-8      	; 0x147f0 <uart+0x8>
			UDR1 = __chr;
   147f8:	40 93 9c 00 	sts	0x009C, r20
   147fc:	0c c0       	rjmp	.+24     	; 0x14816 <uart+0x2e>
		}
		else{
			loop_until_bit_is_set(UCSR1A, RXC);
   147fe:	80 91 9b 00 	lds	r24, 0x009B
   14802:	87 ff       	sbrs	r24, 7
   14804:	fc cf       	rjmp	.-8      	; 0x147fe <uart+0x16>
			return UDR1;
   14806:	80 91 9c 00 	lds	r24, 0x009C
   1480a:	08 95       	ret
		}
	}
	else{
		if(__dir){
   1480c:	66 23       	and	r22, r22
   1480e:	29 f0       	breq	.+10     	; 0x1481a <uart+0x32>
			loop_until_bit_is_set(UCSR0A, UDRE0);
   14810:	5d 9b       	sbis	0x0b, 5	; 11
   14812:	fe cf       	rjmp	.-4      	; 0x14810 <uart+0x28>
			UDR0 = __chr;
   14814:	4c b9       	out	0x0c, r20	; 12
			return UDR0;
		}

	}

	return 1;
   14816:	81 e0       	ldi	r24, 0x01	; 1
   14818:	08 95       	ret
		if(__dir){
			loop_until_bit_is_set(UCSR0A, UDRE0);
			UDR0 = __chr;
		}
		else{
			loop_until_bit_is_set(UCSR0A,  RXC);
   1481a:	5f 9b       	sbis	0x0b, 7	; 11
   1481c:	fe cf       	rjmp	.-4      	; 0x1481a <uart+0x32>
			return UDR0;
   1481e:	8c b1       	in	r24, 0x0c	; 12
		}

	}

	return 1;
}
   14820:	08 95       	ret

00014822 <uart_print>:

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
   14822:	0f 93       	push	r16
   14824:	1f 93       	push	r17
   14826:	cf 93       	push	r28
   14828:	df 93       	push	r29
   1482a:	18 2f       	mov	r17, r24
   1482c:	06 2f       	mov	r16, r22
   1482e:	ea 01       	movw	r28, r20
	if(strlen(__str)>0)
   14830:	88 81       	ld	r24, Y
   14832:	88 23       	and	r24, r24
   14834:	41 f0       	breq	.+16     	; 0x14846 <uart_print+0x24>
   14836:	04 c0       	rjmp	.+8      	; 0x14840 <uart_print+0x1e>
		while(*__str)
		     uart(__com, 1, *__str++);
   14838:	81 2f       	mov	r24, r17
   1483a:	61 e0       	ldi	r22, 0x01	; 1
   1483c:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
	return 1;
}

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
	if(strlen(__str)>0)
		while(*__str)
   14840:	49 91       	ld	r20, Y+
   14842:	44 23       	and	r20, r20
   14844:	c9 f7       	brne	.-14     	; 0x14838 <uart_print+0x16>
		     uart(__com, 1, *__str++);

	if(__ret){
   14846:	00 23       	and	r16, r16
   14848:	51 f0       	breq	.+20     	; 0x1485e <uart_print+0x3c>
		uart(__com, 1, 0x0D);
   1484a:	81 2f       	mov	r24, r17
   1484c:	61 e0       	ldi	r22, 0x01	; 1
   1484e:	4d e0       	ldi	r20, 0x0D	; 13
   14850:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		uart(__com, 1, 0x0A);
   14854:	81 2f       	mov	r24, r17
   14856:	61 e0       	ldi	r22, 0x01	; 1
   14858:	4a e0       	ldi	r20, 0x0A	; 10
   1485a:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
   1485e:	8f ef       	ldi	r24, 0xFF	; 255
   14860:	97 e4       	ldi	r25, 0x47	; 71
   14862:	01 97       	sbiw	r24, 0x01	; 1
   14864:	f1 f7       	brne	.-4      	; 0x14862 <uart_print+0x40>
   14866:	00 c0       	rjmp	.+0      	; 0x14868 <uart_print+0x46>
   14868:	00 00       	nop
	}
	_delay_ms(5);
}
   1486a:	df 91       	pop	r29
   1486c:	cf 91       	pop	r28
   1486e:	1f 91       	pop	r17
   14870:	0f 91       	pop	r16
   14872:	08 95       	ret

00014874 <uart_printf>:

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
   14874:	0f 93       	push	r16
   14876:	1f 93       	push	r17
   14878:	cf 93       	push	r28
   1487a:	df 93       	push	r29
   1487c:	18 2f       	mov	r17, r24
   1487e:	06 2f       	mov	r16, r22
   14880:	ea 01       	movw	r28, r20
	while(pgm_read_byte(&(*__str)))
   14882:	07 c0       	rjmp	.+14     	; 0x14892 <uart_printf+0x1e>
		uart(__com, 1, pgm_read_byte(&(*__str++)));
   14884:	21 96       	adiw	r28, 0x01	; 1
   14886:	fa 01       	movw	r30, r20
   14888:	44 91       	lpm	r20, Z+
   1488a:	81 2f       	mov	r24, r17
   1488c:	61 e0       	ldi	r22, 0x01	; 1
   1488e:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
   14892:	ae 01       	movw	r20, r28
	}
	_delay_ms(5);
}

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
	while(pgm_read_byte(&(*__str)))
   14894:	fe 01       	movw	r30, r28
   14896:	84 91       	lpm	r24, Z+
   14898:	88 23       	and	r24, r24
   1489a:	a1 f7       	brne	.-24     	; 0x14884 <uart_printf+0x10>
		uart(__com, 1, pgm_read_byte(&(*__str++)));

	if(__ret){
   1489c:	00 23       	and	r16, r16
   1489e:	51 f0       	breq	.+20     	; 0x148b4 <uart_printf+0x40>
		uart(__com, 1, 0x0D);
   148a0:	81 2f       	mov	r24, r17
   148a2:	61 e0       	ldi	r22, 0x01	; 1
   148a4:	4d e0       	ldi	r20, 0x0D	; 13
   148a6:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
		uart(__com, 1, 0x0A);
   148aa:	81 2f       	mov	r24, r17
   148ac:	61 e0       	ldi	r22, 0x01	; 1
   148ae:	4a e0       	ldi	r20, 0x0A	; 10
   148b0:	0e 94 f4 a3 	call	0x147e8	; 0x147e8 <uart>
   148b4:	8f ef       	ldi	r24, 0xFF	; 255
   148b6:	97 ed       	ldi	r25, 0xD7	; 215
   148b8:	01 97       	sbiw	r24, 0x01	; 1
   148ba:	f1 f7       	brne	.-4      	; 0x148b8 <uart_printf+0x44>
   148bc:	00 c0       	rjmp	.+0      	; 0x148be <uart_printf+0x4a>
   148be:	00 00       	nop
	}
	_delay_ms(15);
}
   148c0:	df 91       	pop	r29
   148c2:	cf 91       	pop	r28
   148c4:	1f 91       	pop	r17
   148c6:	0f 91       	pop	r16
   148c8:	08 95       	ret

000148ca <Int2Str>:

void Int2Str(char* __string, unsigned long __value){
   148ca:	2f 92       	push	r2
   148cc:	3f 92       	push	r3
   148ce:	4f 92       	push	r4
   148d0:	5f 92       	push	r5
   148d2:	6f 92       	push	r6
   148d4:	7f 92       	push	r7
   148d6:	8f 92       	push	r8
   148d8:	9f 92       	push	r9
   148da:	af 92       	push	r10
   148dc:	bf 92       	push	r11
   148de:	cf 92       	push	r12
   148e0:	df 92       	push	r13
   148e2:	ef 92       	push	r14
   148e4:	ff 92       	push	r15
   148e6:	0f 93       	push	r16
   148e8:	1f 93       	push	r17
   148ea:	cf 93       	push	r28
   148ec:	df 93       	push	r29
   148ee:	ec 01       	movw	r28, r24
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
   148f0:	41 15       	cp	r20, r1
   148f2:	51 05       	cpc	r21, r1
   148f4:	61 05       	cpc	r22, r1
   148f6:	71 05       	cpc	r23, r1
   148f8:	a1 f0       	breq	.+40     	; 0x14922 <Int2Str+0x58>
   148fa:	4a 01       	movw	r8, r20
   148fc:	5b 01       	movw	r10, r22
   148fe:	0a e0       	ldi	r16, 0x0A	; 10
   14900:	c1 2c       	mov	r12, r1
   14902:	1a ec       	ldi	r17, 0xCA	; 202
   14904:	d1 2e       	mov	r13, r17
   14906:	1a e9       	ldi	r17, 0x9A	; 154
   14908:	e1 2e       	mov	r14, r17
   1490a:	1b e3       	ldi	r17, 0x3B	; 59
   1490c:	f1 2e       	mov	r15, r17
   1490e:	10 e0       	ldi	r17, 0x00	; 0
   14910:	77 24       	eor	r7, r7
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   14912:	b0 e3       	ldi	r27, 0x30	; 48
   14914:	6b 2e       	mov	r6, r27
		__devider = __devider / 10;
   14916:	aa e0       	ldi	r26, 0x0A	; 10
   14918:	2a 2e       	mov	r2, r26
   1491a:	31 2c       	mov	r3, r1
   1491c:	41 2c       	mov	r4, r1
   1491e:	51 2c       	mov	r5, r1
   14920:	04 c0       	rjmp	.+8      	; 0x1492a <Int2Str+0x60>
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
		__string[0] = '0';
   14922:	80 e3       	ldi	r24, 0x30	; 48
   14924:	88 83       	st	Y, r24
		__string[1] = '\0';
   14926:	19 82       	std	Y+1, r1	; 0x01
		return;
   14928:	2e c0       	rjmp	.+92     	; 0x14986 <Int2Str+0xbc>
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
		if(__num >= __devider){
   1492a:	8c 14       	cp	r8, r12
   1492c:	9d 04       	cpc	r9, r13
   1492e:	ae 04       	cpc	r10, r14
   14930:	bf 04       	cpc	r11, r15
   14932:	88 f0       	brcs	.+34     	; 0x14956 <Int2Str+0x8c>
			__tmp = (int)(__num / __devider);
   14934:	c5 01       	movw	r24, r10
   14936:	b4 01       	movw	r22, r8
   14938:	a7 01       	movw	r20, r14
   1493a:	96 01       	movw	r18, r12
   1493c:	0e 94 cc a5 	call	0x14b98	; 0x14b98 <__udivmodsi4>
			__num = __num % __devider;
   14940:	4b 01       	movw	r8, r22
   14942:	5c 01       	movw	r10, r24
			__string[__i++] = __tmp + 0x30;
   14944:	fe 01       	movw	r30, r28
   14946:	e1 0f       	add	r30, r17
   14948:	f1 1d       	adc	r31, r1
   1494a:	20 5d       	subi	r18, 0xD0	; 208
   1494c:	20 83       	st	Z, r18
   1494e:	1f 5f       	subi	r17, 0xFF	; 255
			if(!__flag)
   14950:	77 20       	and	r7, r7
   14952:	49 f0       	breq	.+18     	; 0x14966 <Int2Str+0x9c>
   14954:	0a c0       	rjmp	.+20     	; 0x1496a <Int2Str+0xa0>
				__flag = 1;
		}
		else
			if(__flag)
   14956:	77 20       	and	r7, r7
   14958:	41 f0       	breq	.+16     	; 0x1496a <Int2Str+0xa0>
				__string[__i++] = 0x30;
   1495a:	fe 01       	movw	r30, r28
   1495c:	e1 0f       	add	r30, r17
   1495e:	f1 1d       	adc	r31, r1
   14960:	60 82       	st	Z, r6
   14962:	1f 5f       	subi	r17, 0xFF	; 255
   14964:	02 c0       	rjmp	.+4      	; 0x1496a <Int2Str+0xa0>
		if(__num >= __devider){
			__tmp = (int)(__num / __devider);
			__num = __num % __devider;
			__string[__i++] = __tmp + 0x30;
			if(!__flag)
				__flag = 1;
   14966:	77 24       	eor	r7, r7
   14968:	73 94       	inc	r7
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   1496a:	01 50       	subi	r16, 0x01	; 1
		__string[1] = '\0';
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
   1496c:	49 f0       	breq	.+18     	; 0x14980 <Int2Str+0xb6>
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
		__devider = __devider / 10;
   1496e:	c7 01       	movw	r24, r14
   14970:	b6 01       	movw	r22, r12
   14972:	a2 01       	movw	r20, r4
   14974:	91 01       	movw	r18, r2
   14976:	0e 94 cc a5 	call	0x14b98	; 0x14b98 <__udivmodsi4>
   1497a:	69 01       	movw	r12, r18
   1497c:	7a 01       	movw	r14, r20
   1497e:	d5 cf       	rjmp	.-86     	; 0x1492a <Int2Str+0x60>
	}
	__string[__i] = '\0';
   14980:	c1 0f       	add	r28, r17
   14982:	d1 1d       	adc	r29, r1
   14984:	18 82       	st	Y, r1
}
   14986:	df 91       	pop	r29
   14988:	cf 91       	pop	r28
   1498a:	1f 91       	pop	r17
   1498c:	0f 91       	pop	r16
   1498e:	ff 90       	pop	r15
   14990:	ef 90       	pop	r14
   14992:	df 90       	pop	r13
   14994:	cf 90       	pop	r12
   14996:	bf 90       	pop	r11
   14998:	af 90       	pop	r10
   1499a:	9f 90       	pop	r9
   1499c:	8f 90       	pop	r8
   1499e:	7f 90       	pop	r7
   149a0:	6f 90       	pop	r6
   149a2:	5f 90       	pop	r5
   149a4:	4f 90       	pop	r4
   149a6:	3f 90       	pop	r3
   149a8:	2f 90       	pop	r2
   149aa:	08 95       	ret

000149ac <Str2Int>:

unsigned long Str2Int(char* __string){
   149ac:	2f 92       	push	r2
   149ae:	3f 92       	push	r3
   149b0:	4f 92       	push	r4
   149b2:	5f 92       	push	r5
   149b4:	6f 92       	push	r6
   149b6:	7f 92       	push	r7
   149b8:	8f 92       	push	r8
   149ba:	9f 92       	push	r9
   149bc:	af 92       	push	r10
   149be:	bf 92       	push	r11
   149c0:	cf 92       	push	r12
   149c2:	df 92       	push	r13
   149c4:	ef 92       	push	r14
   149c6:	ff 92       	push	r15
   149c8:	0f 93       	push	r16
   149ca:	1f 93       	push	r17
   149cc:	cf 93       	push	r28
   149ce:	df 93       	push	r29
	unsigned char	__i, __len;
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);
   149d0:	dc 01       	movw	r26, r24
   149d2:	0d 90       	ld	r0, X+
   149d4:	00 20       	and	r0, r0
   149d6:	e9 f7       	brne	.-6      	; 0x149d2 <Str2Int+0x26>
   149d8:	11 97       	sbiw	r26, 0x01	; 1
   149da:	9a 2e       	mov	r9, r26
   149dc:	98 1a       	sub	r9, r24

	if(__len > 0 && __len < 11){
   149de:	29 2d       	mov	r18, r9
   149e0:	21 50       	subi	r18, 0x01	; 1
   149e2:	2a 30       	cpi	r18, 0x0A	; 10
   149e4:	08 f0       	brcs	.+2      	; 0x149e8 <Str2Int+0x3c>
   149e6:	61 c0       	rjmp	.+194    	; 0x14aaa <Str2Int+0xfe>
   149e8:	3c 01       	movw	r6, r24
   149ea:	fc 01       	movw	r30, r24
		for(__i = 0; __i < __len; __i++)
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
   149ec:	21 91       	ld	r18, Z+
   149ee:	20 53       	subi	r18, 0x30	; 48
   149f0:	2a 30       	cpi	r18, 0x0A	; 10
   149f2:	08 f0       	brcs	.+2      	; 0x149f6 <Str2Int+0x4a>
   149f4:	5a c0       	rjmp	.+180    	; 0x14aaa <Str2Int+0xfe>
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
   149f6:	2e 2f       	mov	r18, r30
   149f8:	28 1b       	sub	r18, r24
   149fa:	29 15       	cp	r18, r9
   149fc:	b8 f3       	brcs	.-18     	; 0x149ec <Str2Int+0x40>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
   149fe:	29 2d       	mov	r18, r9
   14a00:	2a 30       	cpi	r18, 0x0A	; 10
   14a02:	91 f4       	brne	.+36     	; 0x14a28 <Str2Int+0x7c>
			if(__string[0] < 0x30 || __string[0] > 0x32)
   14a04:	fc 01       	movw	r30, r24
   14a06:	20 81       	ld	r18, Z
   14a08:	32 2f       	mov	r19, r18
   14a0a:	30 53       	subi	r19, 0x30	; 48
   14a0c:	33 30       	cpi	r19, 0x03	; 3
   14a0e:	08 f0       	brcs	.+2      	; 0x14a12 <Str2Int+0x66>
   14a10:	4c c0       	rjmp	.+152    	; 0x14aaa <Str2Int+0xfe>
				return 0;
			if(__string[0] == 0x32){
   14a12:	22 33       	cpi	r18, 0x32	; 50
   14a14:	49 f4       	brne	.+18     	; 0x14a28 <Str2Int+0x7c>
		__devider = __devider / 10;
	}
	__string[__i] = '\0';
}

unsigned long Str2Int(char* __string){
   14a16:	31 96       	adiw	r30, 0x01	; 1
   14a18:	81 e0       	ldi	r24, 0x01	; 1
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
   14a1a:	91 91       	ld	r25, Z+
   14a1c:	90 33       	cpi	r25, 0x30	; 48
   14a1e:	09 f0       	breq	.+2      	; 0x14a22 <Str2Int+0x76>
   14a20:	44 c0       	rjmp	.+136    	; 0x14aaa <Str2Int+0xfe>
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
   14a22:	8f 5f       	subi	r24, 0xFF	; 255
   14a24:	8a 30       	cpi	r24, 0x0A	; 10
   14a26:	c9 f7       	brne	.-14     	; 0x14a1a <Str2Int+0x6e>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
   14a28:	91 e0       	ldi	r25, 0x01	; 1
   14a2a:	e9 2e       	mov	r14, r25
   14a2c:	f1 2c       	mov	r15, r1
   14a2e:	01 2d       	mov	r16, r1
   14a30:	11 2d       	mov	r17, r1
   14a32:	aa 24       	eor	r10, r10
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   14a34:	c9 2d       	mov	r28, r9
   14a36:	d0 e0       	ldi	r29, 0x00	; 0
   14a38:	21 97       	sbiw	r28, 0x01	; 1
   14a3a:	0b c0       	rjmp	.+22     	; 0x14a52 <Str2Int+0xa6>
			__multiplier *= 10;
   14a3c:	c8 01       	movw	r24, r16
   14a3e:	b7 01       	movw	r22, r14
   14a40:	2a e0       	ldi	r18, 0x0A	; 10
   14a42:	30 e0       	ldi	r19, 0x00	; 0
   14a44:	40 e0       	ldi	r20, 0x00	; 0
   14a46:	50 e0       	ldi	r21, 0x00	; 0
   14a48:	0e 94 6d a5 	call	0x14ada	; 0x14ada <__mulsi3>
   14a4c:	7b 01       	movw	r14, r22
   14a4e:	8c 01       	movw	r16, r24
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   14a50:	a3 94       	inc	r10
   14a52:	8a 2d       	mov	r24, r10
   14a54:	90 e0       	ldi	r25, 0x00	; 0
   14a56:	8c 17       	cp	r24, r28
   14a58:	9d 07       	cpc	r25, r29
   14a5a:	84 f3       	brlt	.-32     	; 0x14a3c <Str2Int+0x90>
   14a5c:	aa 24       	eor	r10, r10
   14a5e:	bb 24       	eor	r11, r11
   14a60:	65 01       	movw	r12, r10
   14a62:	88 24       	eor	r8, r8
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   14a64:	8a e0       	ldi	r24, 0x0A	; 10
   14a66:	28 2e       	mov	r2, r24
   14a68:	31 2c       	mov	r3, r1
   14a6a:	41 2c       	mov	r4, r1
   14a6c:	51 2c       	mov	r5, r1
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
   14a6e:	f3 01       	movw	r30, r6
   14a70:	21 91       	ld	r18, Z+
   14a72:	3f 01       	movw	r6, r30
   14a74:	30 e0       	ldi	r19, 0x00	; 0
   14a76:	20 53       	subi	r18, 0x30	; 48
   14a78:	30 40       	sbci	r19, 0x00	; 0
   14a7a:	44 27       	eor	r20, r20
   14a7c:	37 fd       	sbrc	r19, 7
   14a7e:	40 95       	com	r20
   14a80:	54 2f       	mov	r21, r20
   14a82:	c8 01       	movw	r24, r16
   14a84:	b7 01       	movw	r22, r14
   14a86:	0e 94 6d a5 	call	0x14ada	; 0x14ada <__mulsi3>
   14a8a:	a6 0e       	add	r10, r22
   14a8c:	b7 1e       	adc	r11, r23
   14a8e:	c8 1e       	adc	r12, r24
   14a90:	d9 1e       	adc	r13, r25
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   14a92:	83 94       	inc	r8
   14a94:	c8 01       	movw	r24, r16
   14a96:	b7 01       	movw	r22, r14
   14a98:	a2 01       	movw	r20, r4
   14a9a:	91 01       	movw	r18, r2
   14a9c:	0e 94 cc a5 	call	0x14b98	; 0x14b98 <__udivmodsi4>
   14aa0:	79 01       	movw	r14, r18
   14aa2:	8a 01       	movw	r16, r20
   14aa4:	89 14       	cp	r8, r9
   14aa6:	18 f3       	brcs	.-58     	; 0x14a6e <Str2Int+0xc2>
   14aa8:	03 c0       	rjmp	.+6      	; 0x14ab0 <Str2Int+0x104>
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
   14aaa:	aa 24       	eor	r10, r10
   14aac:	bb 24       	eor	r11, r11
   14aae:	65 01       	movw	r12, r10
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
	}
	return __retval;
}
   14ab0:	b5 01       	movw	r22, r10
   14ab2:	c6 01       	movw	r24, r12
   14ab4:	df 91       	pop	r29
   14ab6:	cf 91       	pop	r28
   14ab8:	1f 91       	pop	r17
   14aba:	0f 91       	pop	r16
   14abc:	ff 90       	pop	r15
   14abe:	ef 90       	pop	r14
   14ac0:	df 90       	pop	r13
   14ac2:	cf 90       	pop	r12
   14ac4:	bf 90       	pop	r11
   14ac6:	af 90       	pop	r10
   14ac8:	9f 90       	pop	r9
   14aca:	8f 90       	pop	r8
   14acc:	7f 90       	pop	r7
   14ace:	6f 90       	pop	r6
   14ad0:	5f 90       	pop	r5
   14ad2:	4f 90       	pop	r4
   14ad4:	3f 90       	pop	r3
   14ad6:	2f 90       	pop	r2
   14ad8:	08 95       	ret

00014ada <__mulsi3>:
   14ada:	62 9f       	mul	r22, r18
   14adc:	d0 01       	movw	r26, r0
   14ade:	73 9f       	mul	r23, r19
   14ae0:	f0 01       	movw	r30, r0
   14ae2:	82 9f       	mul	r24, r18
   14ae4:	e0 0d       	add	r30, r0
   14ae6:	f1 1d       	adc	r31, r1
   14ae8:	64 9f       	mul	r22, r20
   14aea:	e0 0d       	add	r30, r0
   14aec:	f1 1d       	adc	r31, r1
   14aee:	92 9f       	mul	r25, r18
   14af0:	f0 0d       	add	r31, r0
   14af2:	83 9f       	mul	r24, r19
   14af4:	f0 0d       	add	r31, r0
   14af6:	74 9f       	mul	r23, r20
   14af8:	f0 0d       	add	r31, r0
   14afa:	65 9f       	mul	r22, r21
   14afc:	f0 0d       	add	r31, r0
   14afe:	99 27       	eor	r25, r25
   14b00:	72 9f       	mul	r23, r18
   14b02:	b0 0d       	add	r27, r0
   14b04:	e1 1d       	adc	r30, r1
   14b06:	f9 1f       	adc	r31, r25
   14b08:	63 9f       	mul	r22, r19
   14b0a:	b0 0d       	add	r27, r0
   14b0c:	e1 1d       	adc	r30, r1
   14b0e:	f9 1f       	adc	r31, r25
   14b10:	bd 01       	movw	r22, r26
   14b12:	cf 01       	movw	r24, r30
   14b14:	11 24       	eor	r1, r1
   14b16:	08 95       	ret

00014b18 <__udivmodqi4>:
   14b18:	99 1b       	sub	r25, r25
   14b1a:	79 e0       	ldi	r23, 0x09	; 9
   14b1c:	04 c0       	rjmp	.+8      	; 0x14b26 <__udivmodqi4_ep>

00014b1e <__udivmodqi4_loop>:
   14b1e:	99 1f       	adc	r25, r25
   14b20:	96 17       	cp	r25, r22
   14b22:	08 f0       	brcs	.+2      	; 0x14b26 <__udivmodqi4_ep>
   14b24:	96 1b       	sub	r25, r22

00014b26 <__udivmodqi4_ep>:
   14b26:	88 1f       	adc	r24, r24
   14b28:	7a 95       	dec	r23
   14b2a:	c9 f7       	brne	.-14     	; 0x14b1e <__udivmodqi4_loop>
   14b2c:	80 95       	com	r24
   14b2e:	08 95       	ret

00014b30 <__divmodqi4>:
   14b30:	87 fb       	bst	r24, 7
   14b32:	08 2e       	mov	r0, r24
   14b34:	06 26       	eor	r0, r22
   14b36:	87 fd       	sbrc	r24, 7
   14b38:	81 95       	neg	r24
   14b3a:	67 fd       	sbrc	r22, 7
   14b3c:	61 95       	neg	r22
   14b3e:	ec df       	rcall	.-40     	; 0x14b18 <__udivmodqi4>
   14b40:	0e f4       	brtc	.+2      	; 0x14b44 <__divmodqi4_1>
   14b42:	91 95       	neg	r25

00014b44 <__divmodqi4_1>:
   14b44:	07 fc       	sbrc	r0, 7
   14b46:	81 95       	neg	r24

00014b48 <__divmodqi4_exit>:
   14b48:	08 95       	ret

00014b4a <__udivmodhi4>:
   14b4a:	aa 1b       	sub	r26, r26
   14b4c:	bb 1b       	sub	r27, r27
   14b4e:	51 e1       	ldi	r21, 0x11	; 17
   14b50:	07 c0       	rjmp	.+14     	; 0x14b60 <__udivmodhi4_ep>

00014b52 <__udivmodhi4_loop>:
   14b52:	aa 1f       	adc	r26, r26
   14b54:	bb 1f       	adc	r27, r27
   14b56:	a6 17       	cp	r26, r22
   14b58:	b7 07       	cpc	r27, r23
   14b5a:	10 f0       	brcs	.+4      	; 0x14b60 <__udivmodhi4_ep>
   14b5c:	a6 1b       	sub	r26, r22
   14b5e:	b7 0b       	sbc	r27, r23

00014b60 <__udivmodhi4_ep>:
   14b60:	88 1f       	adc	r24, r24
   14b62:	99 1f       	adc	r25, r25
   14b64:	5a 95       	dec	r21
   14b66:	a9 f7       	brne	.-22     	; 0x14b52 <__udivmodhi4_loop>
   14b68:	80 95       	com	r24
   14b6a:	90 95       	com	r25
   14b6c:	bc 01       	movw	r22, r24
   14b6e:	cd 01       	movw	r24, r26
   14b70:	08 95       	ret

00014b72 <__divmodhi4>:
   14b72:	97 fb       	bst	r25, 7
   14b74:	09 2e       	mov	r0, r25
   14b76:	07 26       	eor	r0, r23
   14b78:	0a d0       	rcall	.+20     	; 0x14b8e <__divmodhi4_neg1>
   14b7a:	77 fd       	sbrc	r23, 7
   14b7c:	04 d0       	rcall	.+8      	; 0x14b86 <__divmodhi4_neg2>
   14b7e:	e5 df       	rcall	.-54     	; 0x14b4a <__udivmodhi4>
   14b80:	06 d0       	rcall	.+12     	; 0x14b8e <__divmodhi4_neg1>
   14b82:	00 20       	and	r0, r0
   14b84:	1a f4       	brpl	.+6      	; 0x14b8c <__divmodhi4_exit>

00014b86 <__divmodhi4_neg2>:
   14b86:	70 95       	com	r23
   14b88:	61 95       	neg	r22
   14b8a:	7f 4f       	sbci	r23, 0xFF	; 255

00014b8c <__divmodhi4_exit>:
   14b8c:	08 95       	ret

00014b8e <__divmodhi4_neg1>:
   14b8e:	f6 f7       	brtc	.-4      	; 0x14b8c <__divmodhi4_exit>
   14b90:	90 95       	com	r25
   14b92:	81 95       	neg	r24
   14b94:	9f 4f       	sbci	r25, 0xFF	; 255
   14b96:	08 95       	ret

00014b98 <__udivmodsi4>:
   14b98:	a1 e2       	ldi	r26, 0x21	; 33
   14b9a:	1a 2e       	mov	r1, r26
   14b9c:	aa 1b       	sub	r26, r26
   14b9e:	bb 1b       	sub	r27, r27
   14ba0:	fd 01       	movw	r30, r26
   14ba2:	0d c0       	rjmp	.+26     	; 0x14bbe <__udivmodsi4_ep>

00014ba4 <__udivmodsi4_loop>:
   14ba4:	aa 1f       	adc	r26, r26
   14ba6:	bb 1f       	adc	r27, r27
   14ba8:	ee 1f       	adc	r30, r30
   14baa:	ff 1f       	adc	r31, r31
   14bac:	a2 17       	cp	r26, r18
   14bae:	b3 07       	cpc	r27, r19
   14bb0:	e4 07       	cpc	r30, r20
   14bb2:	f5 07       	cpc	r31, r21
   14bb4:	20 f0       	brcs	.+8      	; 0x14bbe <__udivmodsi4_ep>
   14bb6:	a2 1b       	sub	r26, r18
   14bb8:	b3 0b       	sbc	r27, r19
   14bba:	e4 0b       	sbc	r30, r20
   14bbc:	f5 0b       	sbc	r31, r21

00014bbe <__udivmodsi4_ep>:
   14bbe:	66 1f       	adc	r22, r22
   14bc0:	77 1f       	adc	r23, r23
   14bc2:	88 1f       	adc	r24, r24
   14bc4:	99 1f       	adc	r25, r25
   14bc6:	1a 94       	dec	r1
   14bc8:	69 f7       	brne	.-38     	; 0x14ba4 <__udivmodsi4_loop>
   14bca:	60 95       	com	r22
   14bcc:	70 95       	com	r23
   14bce:	80 95       	com	r24
   14bd0:	90 95       	com	r25
   14bd2:	9b 01       	movw	r18, r22
   14bd4:	ac 01       	movw	r20, r24
   14bd6:	bd 01       	movw	r22, r26
   14bd8:	cf 01       	movw	r24, r30
   14bda:	08 95       	ret

00014bdc <atoi>:
   14bdc:	fc 01       	movw	r30, r24
   14bde:	88 27       	eor	r24, r24
   14be0:	99 27       	eor	r25, r25
   14be2:	e8 94       	clt
   14be4:	21 91       	ld	r18, Z+
   14be6:	20 32       	cpi	r18, 0x20	; 32
   14be8:	e9 f3       	breq	.-6      	; 0x14be4 <atoi+0x8>
   14bea:	29 30       	cpi	r18, 0x09	; 9
   14bec:	10 f0       	brcs	.+4      	; 0x14bf2 <atoi+0x16>
   14bee:	2e 30       	cpi	r18, 0x0E	; 14
   14bf0:	c8 f3       	brcs	.-14     	; 0x14be4 <atoi+0x8>
   14bf2:	2b 32       	cpi	r18, 0x2B	; 43
   14bf4:	41 f0       	breq	.+16     	; 0x14c06 <atoi+0x2a>
   14bf6:	2d 32       	cpi	r18, 0x2D	; 45
   14bf8:	39 f4       	brne	.+14     	; 0x14c08 <atoi+0x2c>
   14bfa:	68 94       	set
   14bfc:	04 c0       	rjmp	.+8      	; 0x14c06 <atoi+0x2a>
   14bfe:	0e 94 1c a6 	call	0x14c38	; 0x14c38 <__mulhi_const_10>
   14c02:	82 0f       	add	r24, r18
   14c04:	91 1d       	adc	r25, r1
   14c06:	21 91       	ld	r18, Z+
   14c08:	20 53       	subi	r18, 0x30	; 48
   14c0a:	2a 30       	cpi	r18, 0x0A	; 10
   14c0c:	c0 f3       	brcs	.-16     	; 0x14bfe <atoi+0x22>
   14c0e:	1e f4       	brtc	.+6      	; 0x14c16 <atoi+0x3a>
   14c10:	90 95       	com	r25
   14c12:	81 95       	neg	r24
   14c14:	9f 4f       	sbci	r25, 0xFF	; 255
   14c16:	08 95       	ret

00014c18 <strcpy_P>:
   14c18:	fb 01       	movw	r30, r22
   14c1a:	dc 01       	movw	r26, r24
   14c1c:	05 90       	lpm	r0, Z+
   14c1e:	0d 92       	st	X+, r0
   14c20:	00 20       	and	r0, r0
   14c22:	e1 f7       	brne	.-8      	; 0x14c1c <strcpy_P+0x4>
   14c24:	08 95       	ret

00014c26 <strcmp>:
   14c26:	fb 01       	movw	r30, r22
   14c28:	dc 01       	movw	r26, r24
   14c2a:	8d 91       	ld	r24, X+
   14c2c:	01 90       	ld	r0, Z+
   14c2e:	80 19       	sub	r24, r0
   14c30:	01 10       	cpse	r0, r1
   14c32:	d9 f3       	breq	.-10     	; 0x14c2a <strcmp+0x4>
   14c34:	99 0b       	sbc	r25, r25
   14c36:	08 95       	ret

00014c38 <__mulhi_const_10>:
   14c38:	7a e0       	ldi	r23, 0x0A	; 10
   14c3a:	97 9f       	mul	r25, r23
   14c3c:	90 2d       	mov	r25, r0
   14c3e:	87 9f       	mul	r24, r23
   14c40:	80 2d       	mov	r24, r0
   14c42:	91 0d       	add	r25, r1
   14c44:	11 24       	eor	r1, r1
   14c46:	08 95       	ret

00014c48 <sprintf_P>:
   14c48:	0f 93       	push	r16
   14c4a:	1f 93       	push	r17
   14c4c:	df 93       	push	r29
   14c4e:	cf 93       	push	r28
   14c50:	cd b7       	in	r28, 0x3d	; 61
   14c52:	de b7       	in	r29, 0x3e	; 62
   14c54:	2e 97       	sbiw	r28, 0x0e	; 14
   14c56:	0f b6       	in	r0, 0x3f	; 63
   14c58:	f8 94       	cli
   14c5a:	de bf       	out	0x3e, r29	; 62
   14c5c:	0f be       	out	0x3f, r0	; 63
   14c5e:	cd bf       	out	0x3d, r28	; 61
   14c60:	0d 89       	ldd	r16, Y+21	; 0x15
   14c62:	1e 89       	ldd	r17, Y+22	; 0x16
   14c64:	8e e0       	ldi	r24, 0x0E	; 14
   14c66:	8c 83       	std	Y+4, r24	; 0x04
   14c68:	1a 83       	std	Y+2, r17	; 0x02
   14c6a:	09 83       	std	Y+1, r16	; 0x01
   14c6c:	8f ef       	ldi	r24, 0xFF	; 255
   14c6e:	9f e7       	ldi	r25, 0x7F	; 127
   14c70:	9e 83       	std	Y+6, r25	; 0x06
   14c72:	8d 83       	std	Y+5, r24	; 0x05
   14c74:	9e 01       	movw	r18, r28
   14c76:	27 5e       	subi	r18, 0xE7	; 231
   14c78:	3f 4f       	sbci	r19, 0xFF	; 255
   14c7a:	ce 01       	movw	r24, r28
   14c7c:	01 96       	adiw	r24, 0x01	; 1
   14c7e:	6f 89       	ldd	r22, Y+23	; 0x17
   14c80:	78 8d       	ldd	r23, Y+24	; 0x18
   14c82:	a9 01       	movw	r20, r18
   14c84:	0e 94 54 a6 	call	0x14ca8	; 0x14ca8 <vfprintf>
   14c88:	ef 81       	ldd	r30, Y+7	; 0x07
   14c8a:	f8 85       	ldd	r31, Y+8	; 0x08
   14c8c:	e0 0f       	add	r30, r16
   14c8e:	f1 1f       	adc	r31, r17
   14c90:	10 82       	st	Z, r1
   14c92:	2e 96       	adiw	r28, 0x0e	; 14
   14c94:	0f b6       	in	r0, 0x3f	; 63
   14c96:	f8 94       	cli
   14c98:	de bf       	out	0x3e, r29	; 62
   14c9a:	0f be       	out	0x3f, r0	; 63
   14c9c:	cd bf       	out	0x3d, r28	; 61
   14c9e:	cf 91       	pop	r28
   14ca0:	df 91       	pop	r29
   14ca2:	1f 91       	pop	r17
   14ca4:	0f 91       	pop	r16
   14ca6:	08 95       	ret

00014ca8 <vfprintf>:
   14ca8:	2f 92       	push	r2
   14caa:	3f 92       	push	r3
   14cac:	4f 92       	push	r4
   14cae:	5f 92       	push	r5
   14cb0:	6f 92       	push	r6
   14cb2:	7f 92       	push	r7
   14cb4:	8f 92       	push	r8
   14cb6:	9f 92       	push	r9
   14cb8:	af 92       	push	r10
   14cba:	bf 92       	push	r11
   14cbc:	cf 92       	push	r12
   14cbe:	df 92       	push	r13
   14cc0:	ef 92       	push	r14
   14cc2:	ff 92       	push	r15
   14cc4:	0f 93       	push	r16
   14cc6:	1f 93       	push	r17
   14cc8:	df 93       	push	r29
   14cca:	cf 93       	push	r28
   14ccc:	cd b7       	in	r28, 0x3d	; 61
   14cce:	de b7       	in	r29, 0x3e	; 62
   14cd0:	2c 97       	sbiw	r28, 0x0c	; 12
   14cd2:	0f b6       	in	r0, 0x3f	; 63
   14cd4:	f8 94       	cli
   14cd6:	de bf       	out	0x3e, r29	; 62
   14cd8:	0f be       	out	0x3f, r0	; 63
   14cda:	cd bf       	out	0x3d, r28	; 61
   14cdc:	6c 01       	movw	r12, r24
   14cde:	1b 01       	movw	r2, r22
   14ce0:	8a 01       	movw	r16, r20
   14ce2:	fc 01       	movw	r30, r24
   14ce4:	17 82       	std	Z+7, r1	; 0x07
   14ce6:	16 82       	std	Z+6, r1	; 0x06
   14ce8:	83 81       	ldd	r24, Z+3	; 0x03
   14cea:	81 ff       	sbrs	r24, 1
   14cec:	d1 c1       	rjmp	.+930    	; 0x15090 <vfprintf+0x3e8>
   14cee:	2e 01       	movw	r4, r28
   14cf0:	08 94       	sec
   14cf2:	41 1c       	adc	r4, r1
   14cf4:	51 1c       	adc	r5, r1
   14cf6:	f6 01       	movw	r30, r12
   14cf8:	93 81       	ldd	r25, Z+3	; 0x03
   14cfa:	f1 01       	movw	r30, r2
   14cfc:	93 fd       	sbrc	r25, 3
   14cfe:	85 91       	lpm	r24, Z+
   14d00:	93 ff       	sbrs	r25, 3
   14d02:	81 91       	ld	r24, Z+
   14d04:	1f 01       	movw	r2, r30
   14d06:	88 23       	and	r24, r24
   14d08:	09 f4       	brne	.+2      	; 0x14d0c <vfprintf+0x64>
   14d0a:	be c1       	rjmp	.+892    	; 0x15088 <vfprintf+0x3e0>
   14d0c:	85 32       	cpi	r24, 0x25	; 37
   14d0e:	39 f4       	brne	.+14     	; 0x14d1e <vfprintf+0x76>
   14d10:	93 fd       	sbrc	r25, 3
   14d12:	85 91       	lpm	r24, Z+
   14d14:	93 ff       	sbrs	r25, 3
   14d16:	81 91       	ld	r24, Z+
   14d18:	1f 01       	movw	r2, r30
   14d1a:	85 32       	cpi	r24, 0x25	; 37
   14d1c:	29 f4       	brne	.+10     	; 0x14d28 <vfprintf+0x80>
   14d1e:	90 e0       	ldi	r25, 0x00	; 0
   14d20:	b6 01       	movw	r22, r12
   14d22:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   14d26:	e7 cf       	rjmp	.-50     	; 0x14cf6 <vfprintf+0x4e>
   14d28:	ee 24       	eor	r14, r14
   14d2a:	ff 24       	eor	r15, r15
   14d2c:	20 e0       	ldi	r18, 0x00	; 0
   14d2e:	20 32       	cpi	r18, 0x20	; 32
   14d30:	b0 f4       	brcc	.+44     	; 0x14d5e <vfprintf+0xb6>
   14d32:	8b 32       	cpi	r24, 0x2B	; 43
   14d34:	69 f0       	breq	.+26     	; 0x14d50 <vfprintf+0xa8>
   14d36:	8c 32       	cpi	r24, 0x2C	; 44
   14d38:	28 f4       	brcc	.+10     	; 0x14d44 <vfprintf+0x9c>
   14d3a:	80 32       	cpi	r24, 0x20	; 32
   14d3c:	51 f0       	breq	.+20     	; 0x14d52 <vfprintf+0xaa>
   14d3e:	83 32       	cpi	r24, 0x23	; 35
   14d40:	71 f4       	brne	.+28     	; 0x14d5e <vfprintf+0xb6>
   14d42:	0b c0       	rjmp	.+22     	; 0x14d5a <vfprintf+0xb2>
   14d44:	8d 32       	cpi	r24, 0x2D	; 45
   14d46:	39 f0       	breq	.+14     	; 0x14d56 <vfprintf+0xae>
   14d48:	80 33       	cpi	r24, 0x30	; 48
   14d4a:	49 f4       	brne	.+18     	; 0x14d5e <vfprintf+0xb6>
   14d4c:	21 60       	ori	r18, 0x01	; 1
   14d4e:	2c c0       	rjmp	.+88     	; 0x14da8 <vfprintf+0x100>
   14d50:	22 60       	ori	r18, 0x02	; 2
   14d52:	24 60       	ori	r18, 0x04	; 4
   14d54:	29 c0       	rjmp	.+82     	; 0x14da8 <vfprintf+0x100>
   14d56:	28 60       	ori	r18, 0x08	; 8
   14d58:	27 c0       	rjmp	.+78     	; 0x14da8 <vfprintf+0x100>
   14d5a:	20 61       	ori	r18, 0x10	; 16
   14d5c:	25 c0       	rjmp	.+74     	; 0x14da8 <vfprintf+0x100>
   14d5e:	27 fd       	sbrc	r18, 7
   14d60:	2c c0       	rjmp	.+88     	; 0x14dba <vfprintf+0x112>
   14d62:	38 2f       	mov	r19, r24
   14d64:	30 53       	subi	r19, 0x30	; 48
   14d66:	3a 30       	cpi	r19, 0x0A	; 10
   14d68:	98 f4       	brcc	.+38     	; 0x14d90 <vfprintf+0xe8>
   14d6a:	26 ff       	sbrs	r18, 6
   14d6c:	08 c0       	rjmp	.+16     	; 0x14d7e <vfprintf+0xd6>
   14d6e:	8e 2d       	mov	r24, r14
   14d70:	88 0f       	add	r24, r24
   14d72:	e8 2e       	mov	r14, r24
   14d74:	ee 0c       	add	r14, r14
   14d76:	ee 0c       	add	r14, r14
   14d78:	e8 0e       	add	r14, r24
   14d7a:	e3 0e       	add	r14, r19
   14d7c:	15 c0       	rjmp	.+42     	; 0x14da8 <vfprintf+0x100>
   14d7e:	8f 2d       	mov	r24, r15
   14d80:	88 0f       	add	r24, r24
   14d82:	f8 2e       	mov	r15, r24
   14d84:	ff 0c       	add	r15, r15
   14d86:	ff 0c       	add	r15, r15
   14d88:	f8 0e       	add	r15, r24
   14d8a:	f3 0e       	add	r15, r19
   14d8c:	20 62       	ori	r18, 0x20	; 32
   14d8e:	0c c0       	rjmp	.+24     	; 0x14da8 <vfprintf+0x100>
   14d90:	8e 32       	cpi	r24, 0x2E	; 46
   14d92:	21 f4       	brne	.+8      	; 0x14d9c <vfprintf+0xf4>
   14d94:	26 fd       	sbrc	r18, 6
   14d96:	78 c1       	rjmp	.+752    	; 0x15088 <vfprintf+0x3e0>
   14d98:	20 64       	ori	r18, 0x40	; 64
   14d9a:	06 c0       	rjmp	.+12     	; 0x14da8 <vfprintf+0x100>
   14d9c:	8c 36       	cpi	r24, 0x6C	; 108
   14d9e:	11 f4       	brne	.+4      	; 0x14da4 <vfprintf+0xfc>
   14da0:	20 68       	ori	r18, 0x80	; 128
   14da2:	02 c0       	rjmp	.+4      	; 0x14da8 <vfprintf+0x100>
   14da4:	88 36       	cpi	r24, 0x68	; 104
   14da6:	49 f4       	brne	.+18     	; 0x14dba <vfprintf+0x112>
   14da8:	f1 01       	movw	r30, r2
   14daa:	93 fd       	sbrc	r25, 3
   14dac:	85 91       	lpm	r24, Z+
   14dae:	93 ff       	sbrs	r25, 3
   14db0:	81 91       	ld	r24, Z+
   14db2:	1f 01       	movw	r2, r30
   14db4:	88 23       	and	r24, r24
   14db6:	09 f0       	breq	.+2      	; 0x14dba <vfprintf+0x112>
   14db8:	ba cf       	rjmp	.-140    	; 0x14d2e <vfprintf+0x86>
   14dba:	98 2f       	mov	r25, r24
   14dbc:	95 54       	subi	r25, 0x45	; 69
   14dbe:	93 30       	cpi	r25, 0x03	; 3
   14dc0:	18 f0       	brcs	.+6      	; 0x14dc8 <vfprintf+0x120>
   14dc2:	90 52       	subi	r25, 0x20	; 32
   14dc4:	93 30       	cpi	r25, 0x03	; 3
   14dc6:	28 f4       	brcc	.+10     	; 0x14dd2 <vfprintf+0x12a>
   14dc8:	0c 5f       	subi	r16, 0xFC	; 252
   14dca:	1f 4f       	sbci	r17, 0xFF	; 255
   14dcc:	ff e3       	ldi	r31, 0x3F	; 63
   14dce:	f9 83       	std	Y+1, r31	; 0x01
   14dd0:	0d c0       	rjmp	.+26     	; 0x14dec <vfprintf+0x144>
   14dd2:	83 36       	cpi	r24, 0x63	; 99
   14dd4:	31 f0       	breq	.+12     	; 0x14de2 <vfprintf+0x13a>
   14dd6:	83 37       	cpi	r24, 0x73	; 115
   14dd8:	71 f0       	breq	.+28     	; 0x14df6 <vfprintf+0x14e>
   14dda:	83 35       	cpi	r24, 0x53	; 83
   14ddc:	09 f0       	breq	.+2      	; 0x14de0 <vfprintf+0x138>
   14dde:	60 c0       	rjmp	.+192    	; 0x14ea0 <vfprintf+0x1f8>
   14de0:	22 c0       	rjmp	.+68     	; 0x14e26 <vfprintf+0x17e>
   14de2:	f8 01       	movw	r30, r16
   14de4:	80 81       	ld	r24, Z
   14de6:	89 83       	std	Y+1, r24	; 0x01
   14de8:	0e 5f       	subi	r16, 0xFE	; 254
   14dea:	1f 4f       	sbci	r17, 0xFF	; 255
   14dec:	42 01       	movw	r8, r4
   14dee:	71 e0       	ldi	r23, 0x01	; 1
   14df0:	a7 2e       	mov	r10, r23
   14df2:	b1 2c       	mov	r11, r1
   14df4:	16 c0       	rjmp	.+44     	; 0x14e22 <vfprintf+0x17a>
   14df6:	62 e0       	ldi	r22, 0x02	; 2
   14df8:	66 2e       	mov	r6, r22
   14dfa:	71 2c       	mov	r7, r1
   14dfc:	60 0e       	add	r6, r16
   14dfe:	71 1e       	adc	r7, r17
   14e00:	f8 01       	movw	r30, r16
   14e02:	80 80       	ld	r8, Z
   14e04:	91 80       	ldd	r9, Z+1	; 0x01
   14e06:	26 ff       	sbrs	r18, 6
   14e08:	03 c0       	rjmp	.+6      	; 0x14e10 <vfprintf+0x168>
   14e0a:	6e 2d       	mov	r22, r14
   14e0c:	70 e0       	ldi	r23, 0x00	; 0
   14e0e:	02 c0       	rjmp	.+4      	; 0x14e14 <vfprintf+0x16c>
   14e10:	6f ef       	ldi	r22, 0xFF	; 255
   14e12:	7f ef       	ldi	r23, 0xFF	; 255
   14e14:	c4 01       	movw	r24, r8
   14e16:	2c 87       	std	Y+12, r18	; 0x0c
   14e18:	0e 94 9e a8 	call	0x1513c	; 0x1513c <strnlen>
   14e1c:	5c 01       	movw	r10, r24
   14e1e:	83 01       	movw	r16, r6
   14e20:	2c 85       	ldd	r18, Y+12	; 0x0c
   14e22:	2f 77       	andi	r18, 0x7F	; 127
   14e24:	17 c0       	rjmp	.+46     	; 0x14e54 <vfprintf+0x1ac>
   14e26:	52 e0       	ldi	r21, 0x02	; 2
   14e28:	65 2e       	mov	r6, r21
   14e2a:	71 2c       	mov	r7, r1
   14e2c:	60 0e       	add	r6, r16
   14e2e:	71 1e       	adc	r7, r17
   14e30:	f8 01       	movw	r30, r16
   14e32:	80 80       	ld	r8, Z
   14e34:	91 80       	ldd	r9, Z+1	; 0x01
   14e36:	26 ff       	sbrs	r18, 6
   14e38:	03 c0       	rjmp	.+6      	; 0x14e40 <vfprintf+0x198>
   14e3a:	6e 2d       	mov	r22, r14
   14e3c:	70 e0       	ldi	r23, 0x00	; 0
   14e3e:	02 c0       	rjmp	.+4      	; 0x14e44 <vfprintf+0x19c>
   14e40:	6f ef       	ldi	r22, 0xFF	; 255
   14e42:	7f ef       	ldi	r23, 0xFF	; 255
   14e44:	c4 01       	movw	r24, r8
   14e46:	2c 87       	std	Y+12, r18	; 0x0c
   14e48:	0e 94 93 a8 	call	0x15126	; 0x15126 <strnlen_P>
   14e4c:	5c 01       	movw	r10, r24
   14e4e:	2c 85       	ldd	r18, Y+12	; 0x0c
   14e50:	20 68       	ori	r18, 0x80	; 128
   14e52:	83 01       	movw	r16, r6
   14e54:	23 fd       	sbrc	r18, 3
   14e56:	20 c0       	rjmp	.+64     	; 0x14e98 <vfprintf+0x1f0>
   14e58:	08 c0       	rjmp	.+16     	; 0x14e6a <vfprintf+0x1c2>
   14e5a:	80 e2       	ldi	r24, 0x20	; 32
   14e5c:	90 e0       	ldi	r25, 0x00	; 0
   14e5e:	b6 01       	movw	r22, r12
   14e60:	2c 87       	std	Y+12, r18	; 0x0c
   14e62:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   14e66:	fa 94       	dec	r15
   14e68:	2c 85       	ldd	r18, Y+12	; 0x0c
   14e6a:	8f 2d       	mov	r24, r15
   14e6c:	90 e0       	ldi	r25, 0x00	; 0
   14e6e:	a8 16       	cp	r10, r24
   14e70:	b9 06       	cpc	r11, r25
   14e72:	98 f3       	brcs	.-26     	; 0x14e5a <vfprintf+0x1b2>
   14e74:	11 c0       	rjmp	.+34     	; 0x14e98 <vfprintf+0x1f0>
   14e76:	f4 01       	movw	r30, r8
   14e78:	27 fd       	sbrc	r18, 7
   14e7a:	85 91       	lpm	r24, Z+
   14e7c:	27 ff       	sbrs	r18, 7
   14e7e:	81 91       	ld	r24, Z+
   14e80:	4f 01       	movw	r8, r30
   14e82:	90 e0       	ldi	r25, 0x00	; 0
   14e84:	b6 01       	movw	r22, r12
   14e86:	2c 87       	std	Y+12, r18	; 0x0c
   14e88:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   14e8c:	2c 85       	ldd	r18, Y+12	; 0x0c
   14e8e:	f1 10       	cpse	r15, r1
   14e90:	fa 94       	dec	r15
   14e92:	08 94       	sec
   14e94:	a1 08       	sbc	r10, r1
   14e96:	b1 08       	sbc	r11, r1
   14e98:	a1 14       	cp	r10, r1
   14e9a:	b1 04       	cpc	r11, r1
   14e9c:	61 f7       	brne	.-40     	; 0x14e76 <vfprintf+0x1ce>
   14e9e:	f1 c0       	rjmp	.+482    	; 0x15082 <vfprintf+0x3da>
   14ea0:	84 36       	cpi	r24, 0x64	; 100
   14ea2:	11 f0       	breq	.+4      	; 0x14ea8 <vfprintf+0x200>
   14ea4:	89 36       	cpi	r24, 0x69	; 105
   14ea6:	49 f5       	brne	.+82     	; 0x14efa <vfprintf+0x252>
   14ea8:	27 ff       	sbrs	r18, 7
   14eaa:	08 c0       	rjmp	.+16     	; 0x14ebc <vfprintf+0x214>
   14eac:	f8 01       	movw	r30, r16
   14eae:	60 81       	ld	r22, Z
   14eb0:	71 81       	ldd	r23, Z+1	; 0x01
   14eb2:	82 81       	ldd	r24, Z+2	; 0x02
   14eb4:	93 81       	ldd	r25, Z+3	; 0x03
   14eb6:	0c 5f       	subi	r16, 0xFC	; 252
   14eb8:	1f 4f       	sbci	r17, 0xFF	; 255
   14eba:	09 c0       	rjmp	.+18     	; 0x14ece <vfprintf+0x226>
   14ebc:	f8 01       	movw	r30, r16
   14ebe:	60 81       	ld	r22, Z
   14ec0:	71 81       	ldd	r23, Z+1	; 0x01
   14ec2:	88 27       	eor	r24, r24
   14ec4:	77 fd       	sbrc	r23, 7
   14ec6:	80 95       	com	r24
   14ec8:	98 2f       	mov	r25, r24
   14eca:	0e 5f       	subi	r16, 0xFE	; 254
   14ecc:	1f 4f       	sbci	r17, 0xFF	; 255
   14ece:	4f e6       	ldi	r20, 0x6F	; 111
   14ed0:	b4 2e       	mov	r11, r20
   14ed2:	b2 22       	and	r11, r18
   14ed4:	97 ff       	sbrs	r25, 7
   14ed6:	09 c0       	rjmp	.+18     	; 0x14eea <vfprintf+0x242>
   14ed8:	90 95       	com	r25
   14eda:	80 95       	com	r24
   14edc:	70 95       	com	r23
   14ede:	61 95       	neg	r22
   14ee0:	7f 4f       	sbci	r23, 0xFF	; 255
   14ee2:	8f 4f       	sbci	r24, 0xFF	; 255
   14ee4:	9f 4f       	sbci	r25, 0xFF	; 255
   14ee6:	f0 e8       	ldi	r31, 0x80	; 128
   14ee8:	bf 2a       	or	r11, r31
   14eea:	a2 01       	movw	r20, r4
   14eec:	2a e0       	ldi	r18, 0x0A	; 10
   14eee:	30 e0       	ldi	r19, 0x00	; 0
   14ef0:	0e 94 d5 a8 	call	0x151aa	; 0x151aa <__ultoa_invert>
   14ef4:	78 2e       	mov	r7, r24
   14ef6:	74 18       	sub	r7, r4
   14ef8:	45 c0       	rjmp	.+138    	; 0x14f84 <vfprintf+0x2dc>
   14efa:	85 37       	cpi	r24, 0x75	; 117
   14efc:	31 f4       	brne	.+12     	; 0x14f0a <vfprintf+0x262>
   14efe:	3f ee       	ldi	r19, 0xEF	; 239
   14f00:	b3 2e       	mov	r11, r19
   14f02:	b2 22       	and	r11, r18
   14f04:	2a e0       	ldi	r18, 0x0A	; 10
   14f06:	30 e0       	ldi	r19, 0x00	; 0
   14f08:	25 c0       	rjmp	.+74     	; 0x14f54 <vfprintf+0x2ac>
   14f0a:	99 ef       	ldi	r25, 0xF9	; 249
   14f0c:	b9 2e       	mov	r11, r25
   14f0e:	b2 22       	and	r11, r18
   14f10:	8f 36       	cpi	r24, 0x6F	; 111
   14f12:	c1 f0       	breq	.+48     	; 0x14f44 <vfprintf+0x29c>
   14f14:	80 37       	cpi	r24, 0x70	; 112
   14f16:	20 f4       	brcc	.+8      	; 0x14f20 <vfprintf+0x278>
   14f18:	88 35       	cpi	r24, 0x58	; 88
   14f1a:	09 f0       	breq	.+2      	; 0x14f1e <vfprintf+0x276>
   14f1c:	b5 c0       	rjmp	.+362    	; 0x15088 <vfprintf+0x3e0>
   14f1e:	0d c0       	rjmp	.+26     	; 0x14f3a <vfprintf+0x292>
   14f20:	80 37       	cpi	r24, 0x70	; 112
   14f22:	21 f0       	breq	.+8      	; 0x14f2c <vfprintf+0x284>
   14f24:	88 37       	cpi	r24, 0x78	; 120
   14f26:	09 f0       	breq	.+2      	; 0x14f2a <vfprintf+0x282>
   14f28:	af c0       	rjmp	.+350    	; 0x15088 <vfprintf+0x3e0>
   14f2a:	02 c0       	rjmp	.+4      	; 0x14f30 <vfprintf+0x288>
   14f2c:	20 e1       	ldi	r18, 0x10	; 16
   14f2e:	b2 2a       	or	r11, r18
   14f30:	b4 fe       	sbrs	r11, 4
   14f32:	0b c0       	rjmp	.+22     	; 0x14f4a <vfprintf+0x2a2>
   14f34:	84 e0       	ldi	r24, 0x04	; 4
   14f36:	b8 2a       	or	r11, r24
   14f38:	08 c0       	rjmp	.+16     	; 0x14f4a <vfprintf+0x2a2>
   14f3a:	b4 fe       	sbrs	r11, 4
   14f3c:	09 c0       	rjmp	.+18     	; 0x14f50 <vfprintf+0x2a8>
   14f3e:	e6 e0       	ldi	r30, 0x06	; 6
   14f40:	be 2a       	or	r11, r30
   14f42:	06 c0       	rjmp	.+12     	; 0x14f50 <vfprintf+0x2a8>
   14f44:	28 e0       	ldi	r18, 0x08	; 8
   14f46:	30 e0       	ldi	r19, 0x00	; 0
   14f48:	05 c0       	rjmp	.+10     	; 0x14f54 <vfprintf+0x2ac>
   14f4a:	20 e1       	ldi	r18, 0x10	; 16
   14f4c:	30 e0       	ldi	r19, 0x00	; 0
   14f4e:	02 c0       	rjmp	.+4      	; 0x14f54 <vfprintf+0x2ac>
   14f50:	20 e1       	ldi	r18, 0x10	; 16
   14f52:	32 e0       	ldi	r19, 0x02	; 2
   14f54:	b7 fe       	sbrs	r11, 7
   14f56:	08 c0       	rjmp	.+16     	; 0x14f68 <vfprintf+0x2c0>
   14f58:	f8 01       	movw	r30, r16
   14f5a:	60 81       	ld	r22, Z
   14f5c:	71 81       	ldd	r23, Z+1	; 0x01
   14f5e:	82 81       	ldd	r24, Z+2	; 0x02
   14f60:	93 81       	ldd	r25, Z+3	; 0x03
   14f62:	0c 5f       	subi	r16, 0xFC	; 252
   14f64:	1f 4f       	sbci	r17, 0xFF	; 255
   14f66:	07 c0       	rjmp	.+14     	; 0x14f76 <vfprintf+0x2ce>
   14f68:	f8 01       	movw	r30, r16
   14f6a:	60 81       	ld	r22, Z
   14f6c:	71 81       	ldd	r23, Z+1	; 0x01
   14f6e:	80 e0       	ldi	r24, 0x00	; 0
   14f70:	90 e0       	ldi	r25, 0x00	; 0
   14f72:	0e 5f       	subi	r16, 0xFE	; 254
   14f74:	1f 4f       	sbci	r17, 0xFF	; 255
   14f76:	a2 01       	movw	r20, r4
   14f78:	0e 94 d5 a8 	call	0x151aa	; 0x151aa <__ultoa_invert>
   14f7c:	78 2e       	mov	r7, r24
   14f7e:	74 18       	sub	r7, r4
   14f80:	ff e7       	ldi	r31, 0x7F	; 127
   14f82:	bf 22       	and	r11, r31
   14f84:	b6 fe       	sbrs	r11, 6
   14f86:	0b c0       	rjmp	.+22     	; 0x14f9e <vfprintf+0x2f6>
   14f88:	2e ef       	ldi	r18, 0xFE	; 254
   14f8a:	b2 22       	and	r11, r18
   14f8c:	7e 14       	cp	r7, r14
   14f8e:	38 f4       	brcc	.+14     	; 0x14f9e <vfprintf+0x2f6>
   14f90:	b4 fe       	sbrs	r11, 4
   14f92:	07 c0       	rjmp	.+14     	; 0x14fa2 <vfprintf+0x2fa>
   14f94:	b2 fc       	sbrc	r11, 2
   14f96:	05 c0       	rjmp	.+10     	; 0x14fa2 <vfprintf+0x2fa>
   14f98:	8f ee       	ldi	r24, 0xEF	; 239
   14f9a:	b8 22       	and	r11, r24
   14f9c:	02 c0       	rjmp	.+4      	; 0x14fa2 <vfprintf+0x2fa>
   14f9e:	a7 2c       	mov	r10, r7
   14fa0:	01 c0       	rjmp	.+2      	; 0x14fa4 <vfprintf+0x2fc>
   14fa2:	ae 2c       	mov	r10, r14
   14fa4:	8b 2d       	mov	r24, r11
   14fa6:	90 e0       	ldi	r25, 0x00	; 0
   14fa8:	b4 fe       	sbrs	r11, 4
   14faa:	0d c0       	rjmp	.+26     	; 0x14fc6 <vfprintf+0x31e>
   14fac:	fe 01       	movw	r30, r28
   14fae:	e7 0d       	add	r30, r7
   14fb0:	f1 1d       	adc	r31, r1
   14fb2:	20 81       	ld	r18, Z
   14fb4:	20 33       	cpi	r18, 0x30	; 48
   14fb6:	19 f4       	brne	.+6      	; 0x14fbe <vfprintf+0x316>
   14fb8:	e9 ee       	ldi	r30, 0xE9	; 233
   14fba:	be 22       	and	r11, r30
   14fbc:	09 c0       	rjmp	.+18     	; 0x14fd0 <vfprintf+0x328>
   14fbe:	a3 94       	inc	r10
   14fc0:	b2 fe       	sbrs	r11, 2
   14fc2:	06 c0       	rjmp	.+12     	; 0x14fd0 <vfprintf+0x328>
   14fc4:	04 c0       	rjmp	.+8      	; 0x14fce <vfprintf+0x326>
   14fc6:	86 78       	andi	r24, 0x86	; 134
   14fc8:	90 70       	andi	r25, 0x00	; 0
   14fca:	00 97       	sbiw	r24, 0x00	; 0
   14fcc:	09 f0       	breq	.+2      	; 0x14fd0 <vfprintf+0x328>
   14fce:	a3 94       	inc	r10
   14fd0:	8b 2c       	mov	r8, r11
   14fd2:	99 24       	eor	r9, r9
   14fd4:	b3 fc       	sbrc	r11, 3
   14fd6:	14 c0       	rjmp	.+40     	; 0x15000 <vfprintf+0x358>
   14fd8:	b0 fe       	sbrs	r11, 0
   14fda:	0f c0       	rjmp	.+30     	; 0x14ffa <vfprintf+0x352>
   14fdc:	af 14       	cp	r10, r15
   14fde:	28 f4       	brcc	.+10     	; 0x14fea <vfprintf+0x342>
   14fe0:	e7 2c       	mov	r14, r7
   14fe2:	ef 0c       	add	r14, r15
   14fe4:	ea 18       	sub	r14, r10
   14fe6:	af 2c       	mov	r10, r15
   14fe8:	08 c0       	rjmp	.+16     	; 0x14ffa <vfprintf+0x352>
   14fea:	e7 2c       	mov	r14, r7
   14fec:	06 c0       	rjmp	.+12     	; 0x14ffa <vfprintf+0x352>
   14fee:	80 e2       	ldi	r24, 0x20	; 32
   14ff0:	90 e0       	ldi	r25, 0x00	; 0
   14ff2:	b6 01       	movw	r22, r12
   14ff4:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   14ff8:	a3 94       	inc	r10
   14ffa:	af 14       	cp	r10, r15
   14ffc:	c0 f3       	brcs	.-16     	; 0x14fee <vfprintf+0x346>
   14ffe:	04 c0       	rjmp	.+8      	; 0x15008 <vfprintf+0x360>
   15000:	af 14       	cp	r10, r15
   15002:	10 f4       	brcc	.+4      	; 0x15008 <vfprintf+0x360>
   15004:	fa 18       	sub	r15, r10
   15006:	01 c0       	rjmp	.+2      	; 0x1500a <vfprintf+0x362>
   15008:	ff 24       	eor	r15, r15
   1500a:	84 fe       	sbrs	r8, 4
   1500c:	0f c0       	rjmp	.+30     	; 0x1502c <vfprintf+0x384>
   1500e:	80 e3       	ldi	r24, 0x30	; 48
   15010:	90 e0       	ldi	r25, 0x00	; 0
   15012:	b6 01       	movw	r22, r12
   15014:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   15018:	82 fe       	sbrs	r8, 2
   1501a:	1f c0       	rjmp	.+62     	; 0x1505a <vfprintf+0x3b2>
   1501c:	81 fe       	sbrs	r8, 1
   1501e:	03 c0       	rjmp	.+6      	; 0x15026 <vfprintf+0x37e>
   15020:	88 e5       	ldi	r24, 0x58	; 88
   15022:	90 e0       	ldi	r25, 0x00	; 0
   15024:	10 c0       	rjmp	.+32     	; 0x15046 <vfprintf+0x39e>
   15026:	88 e7       	ldi	r24, 0x78	; 120
   15028:	90 e0       	ldi	r25, 0x00	; 0
   1502a:	0d c0       	rjmp	.+26     	; 0x15046 <vfprintf+0x39e>
   1502c:	c4 01       	movw	r24, r8
   1502e:	86 78       	andi	r24, 0x86	; 134
   15030:	90 70       	andi	r25, 0x00	; 0
   15032:	00 97       	sbiw	r24, 0x00	; 0
   15034:	91 f0       	breq	.+36     	; 0x1505a <vfprintf+0x3b2>
   15036:	81 fc       	sbrc	r8, 1
   15038:	02 c0       	rjmp	.+4      	; 0x1503e <vfprintf+0x396>
   1503a:	80 e2       	ldi	r24, 0x20	; 32
   1503c:	01 c0       	rjmp	.+2      	; 0x15040 <vfprintf+0x398>
   1503e:	8b e2       	ldi	r24, 0x2B	; 43
   15040:	b7 fc       	sbrc	r11, 7
   15042:	8d e2       	ldi	r24, 0x2D	; 45
   15044:	90 e0       	ldi	r25, 0x00	; 0
   15046:	b6 01       	movw	r22, r12
   15048:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   1504c:	06 c0       	rjmp	.+12     	; 0x1505a <vfprintf+0x3b2>
   1504e:	80 e3       	ldi	r24, 0x30	; 48
   15050:	90 e0       	ldi	r25, 0x00	; 0
   15052:	b6 01       	movw	r22, r12
   15054:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   15058:	ea 94       	dec	r14
   1505a:	7e 14       	cp	r7, r14
   1505c:	c0 f3       	brcs	.-16     	; 0x1504e <vfprintf+0x3a6>
   1505e:	7a 94       	dec	r7
   15060:	f2 01       	movw	r30, r4
   15062:	e7 0d       	add	r30, r7
   15064:	f1 1d       	adc	r31, r1
   15066:	80 81       	ld	r24, Z
   15068:	90 e0       	ldi	r25, 0x00	; 0
   1506a:	b6 01       	movw	r22, r12
   1506c:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   15070:	77 20       	and	r7, r7
   15072:	a9 f7       	brne	.-22     	; 0x1505e <vfprintf+0x3b6>
   15074:	06 c0       	rjmp	.+12     	; 0x15082 <vfprintf+0x3da>
   15076:	80 e2       	ldi	r24, 0x20	; 32
   15078:	90 e0       	ldi	r25, 0x00	; 0
   1507a:	b6 01       	movw	r22, r12
   1507c:	0e 94 a9 a8 	call	0x15152	; 0x15152 <fputc>
   15080:	fa 94       	dec	r15
   15082:	ff 20       	and	r15, r15
   15084:	c1 f7       	brne	.-16     	; 0x15076 <vfprintf+0x3ce>
   15086:	37 ce       	rjmp	.-914    	; 0x14cf6 <vfprintf+0x4e>
   15088:	f6 01       	movw	r30, r12
   1508a:	26 81       	ldd	r18, Z+6	; 0x06
   1508c:	37 81       	ldd	r19, Z+7	; 0x07
   1508e:	02 c0       	rjmp	.+4      	; 0x15094 <vfprintf+0x3ec>
   15090:	2f ef       	ldi	r18, 0xFF	; 255
   15092:	3f ef       	ldi	r19, 0xFF	; 255
   15094:	c9 01       	movw	r24, r18
   15096:	2c 96       	adiw	r28, 0x0c	; 12
   15098:	0f b6       	in	r0, 0x3f	; 63
   1509a:	f8 94       	cli
   1509c:	de bf       	out	0x3e, r29	; 62
   1509e:	0f be       	out	0x3f, r0	; 63
   150a0:	cd bf       	out	0x3d, r28	; 61
   150a2:	cf 91       	pop	r28
   150a4:	df 91       	pop	r29
   150a6:	1f 91       	pop	r17
   150a8:	0f 91       	pop	r16
   150aa:	ff 90       	pop	r15
   150ac:	ef 90       	pop	r14
   150ae:	df 90       	pop	r13
   150b0:	cf 90       	pop	r12
   150b2:	bf 90       	pop	r11
   150b4:	af 90       	pop	r10
   150b6:	9f 90       	pop	r9
   150b8:	8f 90       	pop	r8
   150ba:	7f 90       	pop	r7
   150bc:	6f 90       	pop	r6
   150be:	5f 90       	pop	r5
   150c0:	4f 90       	pop	r4
   150c2:	3f 90       	pop	r3
   150c4:	2f 90       	pop	r2
   150c6:	08 95       	ret

000150c8 <__eerd_block_m128>:
   150c8:	dc 01       	movw	r26, r24
   150ca:	cb 01       	movw	r24, r22

000150cc <__eerd_blraw_m128>:
   150cc:	fc 01       	movw	r30, r24
   150ce:	e1 99       	sbic	0x1c, 1	; 28
   150d0:	fe cf       	rjmp	.-4      	; 0x150ce <__eerd_blraw_m128+0x2>
   150d2:	06 c0       	rjmp	.+12     	; 0x150e0 <__eerd_blraw_m128+0x14>
   150d4:	ff bb       	out	0x1f, r31	; 31
   150d6:	ee bb       	out	0x1e, r30	; 30
   150d8:	e0 9a       	sbi	0x1c, 0	; 28
   150da:	31 96       	adiw	r30, 0x01	; 1
   150dc:	0d b2       	in	r0, 0x1d	; 29
   150de:	0d 92       	st	X+, r0
   150e0:	41 50       	subi	r20, 0x01	; 1
   150e2:	50 40       	sbci	r21, 0x00	; 0
   150e4:	b8 f7       	brcc	.-18     	; 0x150d4 <__eerd_blraw_m128+0x8>
   150e6:	08 95       	ret

000150e8 <__eerd_byte_m128>:
   150e8:	e1 99       	sbic	0x1c, 1	; 28
   150ea:	fe cf       	rjmp	.-4      	; 0x150e8 <__eerd_byte_m128>
   150ec:	9f bb       	out	0x1f, r25	; 31
   150ee:	8e bb       	out	0x1e, r24	; 30
   150f0:	e0 9a       	sbi	0x1c, 0	; 28
   150f2:	99 27       	eor	r25, r25
   150f4:	8d b3       	in	r24, 0x1d	; 29
   150f6:	08 95       	ret

000150f8 <__eewr_block_m128>:
   150f8:	dc 01       	movw	r26, r24
   150fa:	cb 01       	movw	r24, r22
   150fc:	03 c0       	rjmp	.+6      	; 0x15104 <__eewr_block_m128+0xc>
   150fe:	2d 91       	ld	r18, X+
   15100:	0e 94 87 a8 	call	0x1510e	; 0x1510e <__eewr_r18_m128>
   15104:	41 50       	subi	r20, 0x01	; 1
   15106:	50 40       	sbci	r21, 0x00	; 0
   15108:	d0 f7       	brcc	.-12     	; 0x150fe <__eewr_block_m128+0x6>
   1510a:	08 95       	ret

0001510c <__eewr_byte_m128>:
   1510c:	26 2f       	mov	r18, r22

0001510e <__eewr_r18_m128>:
   1510e:	e1 99       	sbic	0x1c, 1	; 28
   15110:	fe cf       	rjmp	.-4      	; 0x1510e <__eewr_r18_m128>
   15112:	9f bb       	out	0x1f, r25	; 31
   15114:	8e bb       	out	0x1e, r24	; 30
   15116:	2d bb       	out	0x1d, r18	; 29
   15118:	0f b6       	in	r0, 0x3f	; 63
   1511a:	f8 94       	cli
   1511c:	e2 9a       	sbi	0x1c, 2	; 28
   1511e:	e1 9a       	sbi	0x1c, 1	; 28
   15120:	0f be       	out	0x3f, r0	; 63
   15122:	01 96       	adiw	r24, 0x01	; 1
   15124:	08 95       	ret

00015126 <strnlen_P>:
   15126:	fc 01       	movw	r30, r24
   15128:	05 90       	lpm	r0, Z+
   1512a:	61 50       	subi	r22, 0x01	; 1
   1512c:	70 40       	sbci	r23, 0x00	; 0
   1512e:	01 10       	cpse	r0, r1
   15130:	d8 f7       	brcc	.-10     	; 0x15128 <strnlen_P+0x2>
   15132:	80 95       	com	r24
   15134:	90 95       	com	r25
   15136:	8e 0f       	add	r24, r30
   15138:	9f 1f       	adc	r25, r31
   1513a:	08 95       	ret

0001513c <strnlen>:
   1513c:	fc 01       	movw	r30, r24
   1513e:	61 50       	subi	r22, 0x01	; 1
   15140:	70 40       	sbci	r23, 0x00	; 0
   15142:	01 90       	ld	r0, Z+
   15144:	01 10       	cpse	r0, r1
   15146:	d8 f7       	brcc	.-10     	; 0x1513e <strnlen+0x2>
   15148:	80 95       	com	r24
   1514a:	90 95       	com	r25
   1514c:	8e 0f       	add	r24, r30
   1514e:	9f 1f       	adc	r25, r31
   15150:	08 95       	ret

00015152 <fputc>:
   15152:	0f 93       	push	r16
   15154:	1f 93       	push	r17
   15156:	cf 93       	push	r28
   15158:	df 93       	push	r29
   1515a:	8c 01       	movw	r16, r24
   1515c:	eb 01       	movw	r28, r22
   1515e:	8b 81       	ldd	r24, Y+3	; 0x03
   15160:	81 ff       	sbrs	r24, 1
   15162:	1b c0       	rjmp	.+54     	; 0x1519a <fputc+0x48>
   15164:	82 ff       	sbrs	r24, 2
   15166:	0d c0       	rjmp	.+26     	; 0x15182 <fputc+0x30>
   15168:	2e 81       	ldd	r18, Y+6	; 0x06
   1516a:	3f 81       	ldd	r19, Y+7	; 0x07
   1516c:	8c 81       	ldd	r24, Y+4	; 0x04
   1516e:	9d 81       	ldd	r25, Y+5	; 0x05
   15170:	28 17       	cp	r18, r24
   15172:	39 07       	cpc	r19, r25
   15174:	64 f4       	brge	.+24     	; 0x1518e <fputc+0x3c>
   15176:	e8 81       	ld	r30, Y
   15178:	f9 81       	ldd	r31, Y+1	; 0x01
   1517a:	01 93       	st	Z+, r16
   1517c:	f9 83       	std	Y+1, r31	; 0x01
   1517e:	e8 83       	st	Y, r30
   15180:	06 c0       	rjmp	.+12     	; 0x1518e <fputc+0x3c>
   15182:	e8 85       	ldd	r30, Y+8	; 0x08
   15184:	f9 85       	ldd	r31, Y+9	; 0x09
   15186:	80 2f       	mov	r24, r16
   15188:	09 95       	icall
   1518a:	00 97       	sbiw	r24, 0x00	; 0
   1518c:	31 f4       	brne	.+12     	; 0x1519a <fputc+0x48>
   1518e:	8e 81       	ldd	r24, Y+6	; 0x06
   15190:	9f 81       	ldd	r25, Y+7	; 0x07
   15192:	01 96       	adiw	r24, 0x01	; 1
   15194:	9f 83       	std	Y+7, r25	; 0x07
   15196:	8e 83       	std	Y+6, r24	; 0x06
   15198:	02 c0       	rjmp	.+4      	; 0x1519e <fputc+0x4c>
   1519a:	0f ef       	ldi	r16, 0xFF	; 255
   1519c:	1f ef       	ldi	r17, 0xFF	; 255
   1519e:	c8 01       	movw	r24, r16
   151a0:	df 91       	pop	r29
   151a2:	cf 91       	pop	r28
   151a4:	1f 91       	pop	r17
   151a6:	0f 91       	pop	r16
   151a8:	08 95       	ret

000151aa <__ultoa_invert>:
   151aa:	fa 01       	movw	r30, r20
   151ac:	aa 27       	eor	r26, r26
   151ae:	28 30       	cpi	r18, 0x08	; 8
   151b0:	51 f1       	breq	.+84     	; 0x15206 <__ultoa_invert+0x5c>
   151b2:	20 31       	cpi	r18, 0x10	; 16
   151b4:	81 f1       	breq	.+96     	; 0x15216 <__ultoa_invert+0x6c>
   151b6:	e8 94       	clt
   151b8:	6f 93       	push	r22
   151ba:	6e 7f       	andi	r22, 0xFE	; 254
   151bc:	6e 5f       	subi	r22, 0xFE	; 254
   151be:	7f 4f       	sbci	r23, 0xFF	; 255
   151c0:	8f 4f       	sbci	r24, 0xFF	; 255
   151c2:	9f 4f       	sbci	r25, 0xFF	; 255
   151c4:	af 4f       	sbci	r26, 0xFF	; 255
   151c6:	b1 e0       	ldi	r27, 0x01	; 1
   151c8:	3e d0       	rcall	.+124    	; 0x15246 <__ultoa_invert+0x9c>
   151ca:	b4 e0       	ldi	r27, 0x04	; 4
   151cc:	3c d0       	rcall	.+120    	; 0x15246 <__ultoa_invert+0x9c>
   151ce:	67 0f       	add	r22, r23
   151d0:	78 1f       	adc	r23, r24
   151d2:	89 1f       	adc	r24, r25
   151d4:	9a 1f       	adc	r25, r26
   151d6:	a1 1d       	adc	r26, r1
   151d8:	68 0f       	add	r22, r24
   151da:	79 1f       	adc	r23, r25
   151dc:	8a 1f       	adc	r24, r26
   151de:	91 1d       	adc	r25, r1
   151e0:	a1 1d       	adc	r26, r1
   151e2:	6a 0f       	add	r22, r26
   151e4:	71 1d       	adc	r23, r1
   151e6:	81 1d       	adc	r24, r1
   151e8:	91 1d       	adc	r25, r1
   151ea:	a1 1d       	adc	r26, r1
   151ec:	20 d0       	rcall	.+64     	; 0x1522e <__ultoa_invert+0x84>
   151ee:	09 f4       	brne	.+2      	; 0x151f2 <__ultoa_invert+0x48>
   151f0:	68 94       	set
   151f2:	3f 91       	pop	r19
   151f4:	2a e0       	ldi	r18, 0x0A	; 10
   151f6:	26 9f       	mul	r18, r22
   151f8:	11 24       	eor	r1, r1
   151fa:	30 19       	sub	r19, r0
   151fc:	30 5d       	subi	r19, 0xD0	; 208
   151fe:	31 93       	st	Z+, r19
   15200:	de f6       	brtc	.-74     	; 0x151b8 <__ultoa_invert+0xe>
   15202:	cf 01       	movw	r24, r30
   15204:	08 95       	ret
   15206:	46 2f       	mov	r20, r22
   15208:	47 70       	andi	r20, 0x07	; 7
   1520a:	40 5d       	subi	r20, 0xD0	; 208
   1520c:	41 93       	st	Z+, r20
   1520e:	b3 e0       	ldi	r27, 0x03	; 3
   15210:	0f d0       	rcall	.+30     	; 0x15230 <__ultoa_invert+0x86>
   15212:	c9 f7       	brne	.-14     	; 0x15206 <__ultoa_invert+0x5c>
   15214:	f6 cf       	rjmp	.-20     	; 0x15202 <__ultoa_invert+0x58>
   15216:	46 2f       	mov	r20, r22
   15218:	4f 70       	andi	r20, 0x0F	; 15
   1521a:	40 5d       	subi	r20, 0xD0	; 208
   1521c:	4a 33       	cpi	r20, 0x3A	; 58
   1521e:	18 f0       	brcs	.+6      	; 0x15226 <__ultoa_invert+0x7c>
   15220:	49 5d       	subi	r20, 0xD9	; 217
   15222:	31 fd       	sbrc	r19, 1
   15224:	40 52       	subi	r20, 0x20	; 32
   15226:	41 93       	st	Z+, r20
   15228:	02 d0       	rcall	.+4      	; 0x1522e <__ultoa_invert+0x84>
   1522a:	a9 f7       	brne	.-22     	; 0x15216 <__ultoa_invert+0x6c>
   1522c:	ea cf       	rjmp	.-44     	; 0x15202 <__ultoa_invert+0x58>
   1522e:	b4 e0       	ldi	r27, 0x04	; 4
   15230:	a6 95       	lsr	r26
   15232:	97 95       	ror	r25
   15234:	87 95       	ror	r24
   15236:	77 95       	ror	r23
   15238:	67 95       	ror	r22
   1523a:	ba 95       	dec	r27
   1523c:	c9 f7       	brne	.-14     	; 0x15230 <__ultoa_invert+0x86>
   1523e:	00 97       	sbiw	r24, 0x00	; 0
   15240:	61 05       	cpc	r22, r1
   15242:	71 05       	cpc	r23, r1
   15244:	08 95       	ret
   15246:	9b 01       	movw	r18, r22
   15248:	ac 01       	movw	r20, r24
   1524a:	0a 2e       	mov	r0, r26
   1524c:	06 94       	lsr	r0
   1524e:	57 95       	ror	r21
   15250:	47 95       	ror	r20
   15252:	37 95       	ror	r19
   15254:	27 95       	ror	r18
   15256:	ba 95       	dec	r27
   15258:	c9 f7       	brne	.-14     	; 0x1524c <__ultoa_invert+0xa2>
   1525a:	62 0f       	add	r22, r18
   1525c:	73 1f       	adc	r23, r19
   1525e:	84 1f       	adc	r24, r20
   15260:	95 1f       	adc	r25, r21
   15262:	a0 1d       	adc	r26, r0
   15264:	08 95       	ret

00015266 <_exit>:
   15266:	f8 94       	cli

00015268 <__stop_program>:
   15268:	ff cf       	rjmp	.-2      	; 0x15268 <__stop_program>
