
master4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00015e0c  00015ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00015e0c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b5d  0080015c  0080015c  00015f1c  2**0
                  ALLOC
  3 .eeprom       0000085d  00810000  00810000  00015f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  00016779  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00002591  00000000  00000000  00016859  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010588  00000000  00000000  00018dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b20  00000000  00000000  00029372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c5be  00000000  00000000  00029e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011b0  00000000  00000000  00036450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005347  00000000  00000000  00037600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c1d  00000000  00000000  0003c947  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00043564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__ctors_end>
       4:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
       8:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
       c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      10:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      14:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      18:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      1c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      20:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      24:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      28:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      2c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      30:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__vector_12>
      34:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      38:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      3c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      40:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      44:	0c 94 0c 68 	jmp	0xd018	; 0xd018 <__vector_17>
      48:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__vector_18>
      4c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      50:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      54:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      58:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      5c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      60:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      64:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      68:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      6c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      70:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      74:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      78:	0c 94 8f 40 	jmp	0x811e	; 0x811e <__vector_30>
      7c:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      80:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      84:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      88:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__bad_interrupt>
      8c:	63 14       	cp	r6, r3
      8e:	61 14       	cp	r6, r1
      90:	65 14       	cp	r6, r5
      92:	67 14       	cp	r6, r7
      94:	69 14       	cp	r6, r9
      96:	6b 14       	cp	r6, r11
      98:	6d 14       	cp	r6, r13
      9a:	6f 14       	cp	r6, r15
      9c:	71 14       	cp	r7, r1
      9e:	73 14       	cp	r7, r3
      a0:	75 14       	cp	r7, r5
      a2:	77 14       	cp	r7, r7
      a4:	79 14       	cp	r7, r9
      a6:	87 14       	cp	r8, r7
      a8:	7b 14       	cp	r7, r11
      aa:	87 14       	cp	r8, r7
      ac:	7d 14       	cp	r7, r13
      ae:	7f 14       	cp	r7, r15
      b0:	87 14       	cp	r8, r7
      b2:	81 14       	cp	r8, r1
      b4:	83 14       	cp	r8, r3
      b6:	85 14       	cp	r8, r5
      b8:	87 14       	cp	r8, r7
      ba:	87 14       	cp	r8, r7
      bc:	7b 14       	cp	r7, r11
      be:	6d 14       	cp	r6, r13
      c0:	87 14       	cp	r8, r7
      c2:	6f 14       	cp	r6, r15
      c4:	73 14       	cp	r7, r3
      c6:	77 14       	cp	r7, r7
      c8:	3d 74       	andi	r19, 0x4D	; 77
      ca:	59 74       	andi	r21, 0x49	; 73
      cc:	62 75       	andi	r22, 0x52	; 82
      ce:	91 75       	andi	r25, 0x51	; 81
      d0:	ba 75       	andi	r27, 0x5A	; 90
      d2:	2d 76       	andi	r18, 0x6D	; 109
      d4:	3c 76       	andi	r19, 0x6C	; 108
      d6:	43 76       	andi	r20, 0x63	; 99
      d8:	7f 76       	andi	r23, 0x6F	; 111
      da:	a6 76       	andi	r26, 0x66	; 102
      dc:	e9 76       	andi	r30, 0x69	; 105
      de:	f3 76       	andi	r31, 0x63	; 99
      e0:	b2 76       	andi	r27, 0x62	; 98
      e2:	f9 76       	andi	r31, 0x69	; 105
      e4:	11 77       	andi	r17, 0x71	; 113
      e6:	08 77       	andi	r16, 0x78	; 120
      e8:	0d 77       	andi	r16, 0x7D	; 125
      ea:	6d 74       	andi	r22, 0x4D	; 77
      ec:	fc 74       	andi	r31, 0x4C	; 76
      ee:	1e 75       	andi	r17, 0x5E	; 94
      f0:	2a 75       	andi	r18, 0x5A	; 90
      f2:	3c 75       	andi	r19, 0x5C	; 92
      f4:	4d 75       	andi	r20, 0x5D	; 93
      f6:	5c 75       	andi	r21, 0x5C	; 92
      f8:	5c 75       	andi	r21, 0x5C	; 92
      fa:	8c 79       	andi	r24, 0x9C	; 156
      fc:	92 79       	andi	r25, 0x92	; 146
      fe:	96 79       	andi	r25, 0x96	; 150
     100:	ad 79       	andi	r26, 0x9D	; 157
     102:	c7 79       	andi	r28, 0x97	; 151
     104:	cb 79       	andi	r28, 0x9B	; 155
     106:	f6 79       	andi	r31, 0x96	; 150
     108:	10 7a       	andi	r17, 0xA0	; 160
     10a:	16 7a       	andi	r17, 0xA6	; 166
     10c:	1e 7a       	andi	r17, 0xAE	; 174
     10e:	21 7a       	andi	r18, 0xA1	; 161
     110:	24 7a       	andi	r18, 0xA4	; 164
     112:	27 7a       	andi	r18, 0xA7	; 167
     114:	2a 7a       	andi	r18, 0xAA	; 170
     116:	2d 7a       	andi	r18, 0xAD	; 173
     118:	31 7a       	andi	r19, 0xA1	; 161
     11a:	34 7a       	andi	r19, 0xA4	; 164
     11c:	37 7a       	andi	r19, 0xA7	; 167
     11e:	3f 7a       	andi	r19, 0xAF	; 175
     120:	c9 80       	ldd	r12, Y+1	; 0x01
     122:	26 81       	ldd	r18, Z+6	; 0x06
     124:	35 81       	ldd	r19, Z+5	; 0x05
     126:	83 81       	ldd	r24, Z+3	; 0x03
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	9e 81       	ldd	r25, Y+6	; 0x06
     12c:	c1 81       	ldd	r28, Z+1	; 0x01
     12e:	7a 82       	std	Y+2, r7	; 0x02
     130:	84 82       	std	Z+4, r8	; 0x04
     132:	54 89       	ldd	r21, Z+20	; 0x14
     134:	e1 82       	std	Z+1, r14	; 0x01
     136:	e9 83       	std	Y+1, r30	; 0x01
     138:	35 84       	ldd	r3, Z+13	; 0x0d
     13a:	7b 84       	ldd	r7, Y+11	; 0x0b
     13c:	f3 84       	ldd	r15, Z+11	; 0x0b
     13e:	84 85       	ldd	r24, Z+12	; 0x0c
     140:	a7 85       	ldd	r26, Z+15	; 0x0f
     142:	6d 86       	std	Y+13, r6	; 0x0d
     144:	97 86       	std	Z+15, r9	; 0x0f
     146:	50 87       	std	Z+8, r21	; 0x08
     148:	69 87       	std	Y+9, r22	; 0x09
     14a:	68 88       	ldd	r6, Y+16	; 0x10
     14c:	e1 87       	std	Z+9, r30	; 0x09
     14e:	23 88       	ldd	r2, Z+19	; 0x13
     150:	02 89       	ldd	r16, Z+18	; 0x12
     152:	39 89       	ldd	r19, Y+17	; 0x11
     154:	54 89       	ldd	r21, Z+20	; 0x14
     156:	6e 88       	ldd	r6, Y+22	; 0x16
     158:	f1 88       	ldd	r15, Z+17	; 0x11
     15a:	31 89       	ldd	r19, Z+17	; 0x11
     15c:	3e 89       	ldd	r19, Y+22	; 0x16
     15e:	45 89       	ldd	r20, Z+21	; 0x15
     160:	90 89       	ldd	r25, Z+16	; 0x10
     162:	94 89       	ldd	r25, Z+20	; 0x14
     164:	b0 89       	ldd	r27, Z+16	; 0x10
     166:	86 8d       	ldd	r24, Z+30	; 0x1e
     168:	86 8d       	ldd	r24, Z+30	; 0x1e
     16a:	86 8d       	ldd	r24, Z+30	; 0x1e
     16c:	86 8d       	ldd	r24, Z+30	; 0x1e
     16e:	f9 89       	ldd	r31, Y+17	; 0x11
     170:	86 8d       	ldd	r24, Z+30	; 0x1e
     172:	19 8a       	std	Y+17, r1	; 0x11
     174:	86 8d       	ldd	r24, Z+30	; 0x1e
     176:	36 8a       	std	Z+22, r3	; 0x16
     178:	b3 8a       	std	Z+19, r11	; 0x13
     17a:	0c 8b       	std	Y+20, r16	; 0x14
     17c:	2f 8b       	std	Y+23, r18	; 0x17
     17e:	dc 89       	ldd	r29, Y+20	; 0x14
     180:	86 8d       	ldd	r24, Z+30	; 0x1e
     182:	c6 8a       	std	Z+22, r12	; 0x16
     184:	47 8b       	std	Z+23, r20	; 0x17
     186:	7f 8b       	std	Y+23, r23	; 0x17
     188:	97 8b       	std	Z+23, r25	; 0x17
     18a:	d3 8b       	std	Z+19, r29	; 0x13
     18c:	e3 8b       	std	Z+19, r30	; 0x13
     18e:	f2 8c       	ldd	r15, Z+26	; 0x1a
     190:	02 8d       	ldd	r16, Z+26	; 0x1a
     192:	49 8d       	ldd	r20, Y+25	; 0x19
     194:	68 8d       	ldd	r22, Y+24	; 0x18
     196:	7a 8d       	ldd	r23, Y+26	; 0x1a
     198:	80 8d       	ldd	r24, Z+24	; 0x18
     19a:	82 8d       	ldd	r24, Z+26	; 0x1a
     19c:	ba 93       	st	-Y, r27
     19e:	d2 93       	st	-Z, r29
     1a0:	e4 93       	.word	0x93e4	; ????
     1a2:	19 94       	eijmp
     1a4:	48 94       	ses
     1a6:	5e 94 99 94 	call	0x152932	; 0x152932 <__data_load_end+0x13caca>
     1aa:	d1 94       	neg	r13
     1ac:	13 95       	inc	r17
     1ae:	1b 95       	.word	0x951b	; ????
     1b0:	3a 96       	adiw	r30, 0x0a	; 10
     1b2:	46 96       	adiw	r24, 0x16	; 22
     1b4:	76 96       	adiw	r30, 0x16	; 22
     1b6:	b3 96       	adiw	r30, 0x23	; 35
     1b8:	cc 96       	adiw	r24, 0x3c	; 60
     1ba:	e6 96       	adiw	r28, 0x36	; 54
     1bc:	26 97       	sbiw	r28, 0x06	; 6
     1be:	2e 94 eb 94 	call	0x929d6	; 0x929d6 <__data_load_end+0x7cb6e>
     1c2:	8f 96       	adiw	r24, 0x2f	; 47
     1c4:	b7 94       	ror	r11
     1c6:	33 95       	inc	r19
     1c8:	80 95       	com	r24
     1ca:	9c 95 b6 95 	jmp	0x652b6c	; 0x652b6c <__data_load_end+0x63cd04>
     1ce:	02 96       	adiw	r24, 0x02	; 2
     1d0:	20 96       	adiw	r28, 0x00	; 0
     1d2:	60 97       	sbiw	r28, 0x10	; 16
     1d4:	76 97       	sbiw	r30, 0x16	; 22
     1d6:	81 97       	sbiw	r24, 0x21	; 33
     1d8:	b8 97       	sbiw	r30, 0x28	; 40
     1da:	e7 97       	sbiw	r28, 0x37	; 55
     1dc:	2c 98       	cbi	0x05, 4	; 5
     1de:	4a 98       	cbi	0x09, 2	; 9
     1e0:	68 98       	cbi	0x0d, 0	; 13
     1e2:	a2 98       	cbi	0x14, 2	; 20
     1e4:	05 99       	sbic	0x00, 5	; 0
     1e6:	36 9d       	mul	r19, r6
     1e8:	cd 97       	sbiw	r24, 0x3d	; 61
     1ea:	5f 9d       	mul	r21, r15
     1ec:	4b 9e       	mul	r4, r27
     1ee:	09 9e       	mul	r0, r25
     1f0:	32 9e       	mul	r3, r18
     1f2:	81 9e       	mul	r8, r17
     1f4:	65 9e       	mul	r6, r21
     1f6:	98 9e       	mul	r9, r24
     1f8:	b2 9e       	mul	r11, r18
     1fa:	c4 9e       	mul	r12, r20
     1fc:	79 9d       	mul	r23, r9
     1fe:	d2 9d       	mul	r29, r2
     200:	ef 9d       	mul	r30, r15
     202:	19 99       	sbic	0x03, 1	; 3
     204:	38 99       	sbic	0x07, 0	; 7
     206:	5e 99       	sbic	0x0b, 6	; 11
     208:	6b 99       	sbic	0x0d, 3	; 13
     20a:	8e 99       	sbic	0x11, 6	; 17
     20c:	a3 99       	sbic	0x14, 3	; 20
     20e:	cd 99       	sbic	0x19, 5	; 25
     210:	e2 99       	sbic	0x1c, 2	; 28
     212:	0c 9a       	sbi	0x01, 4	; 1
     214:	2c 9a       	sbi	0x05, 4	; 5
     216:	5d 9a       	sbi	0x0b, 5	; 11
     218:	6a 9a       	sbi	0x0d, 2	; 13
     21a:	c5 9a       	sbi	0x18, 5	; 24
     21c:	3e 9b       	sbis	0x07, 6	; 7
     21e:	54 9b       	sbis	0x0a, 4	; 10
     220:	31 9c       	mul	r3, r1
     222:	31 9c       	mul	r3, r1
     224:	6a 9b       	sbis	0x0d, 2	; 13
     226:	80 9b       	sbis	0x10, 0	; 16
     228:	88 9b       	sbis	0x11, 0	; 17
     22a:	a5 9b       	sbis	0x14, 5	; 20
     22c:	bc 9b       	sbis	0x17, 4	; 23
     22e:	c7 9b       	sbis	0x18, 7	; 24
     230:	dc 9b       	sbis	0x1b, 4	; 27
     232:	f1 9b       	sbis	0x1e, 1	; 30
     234:	0f 9c       	mul	r0, r15
     236:	34 9c       	mul	r3, r4
     238:	49 9c       	mul	r4, r9
     23a:	5e 9c       	mul	r5, r14
     23c:	73 9c       	mul	r7, r3
     23e:	88 9c       	mul	r8, r8
     240:	9d 9c       	mul	r9, r13
     242:	b2 9c       	mul	r11, r2
     244:	c7 9c       	mul	r12, r7
     246:	d4 9c       	mul	r13, r4
     248:	e9 9c       	mul	r14, r9
     24a:	0a 9d       	mul	r16, r10
     24c:	1c a3       	std	Y+36, r17	; 0x24
     24e:	1f a3       	std	Y+39, r17	; 0x27
     250:	bf a3       	std	Y+39, r27	; 0x27
     252:	ce a3       	std	Y+38, r28	; 0x26
     254:	ff a3       	std	Y+39, r31	; 0x27
     256:	0d a4       	ldd	r0, Y+45	; 0x2d
     258:	39 a4       	ldd	r3, Y+41	; 0x29
     25a:	de a3       	std	Y+38, r29	; 0x26
     25c:	eb a3       	std	Y+35, r30	; 0x23
     25e:	f5 a3       	std	Z+37, r31	; 0x25
     260:	43 a4       	ldd	r4, Z+43	; 0x2b
     262:	50 a4       	ldd	r5, Z+40	; 0x28
     264:	5b a4       	ldd	r5, Y+43	; 0x2b
     266:	5e a4       	ldd	r5, Y+46	; 0x2e
     268:	61 a4       	ldd	r6, Z+41	; 0x29
     26a:	64 a4       	ldd	r6, Z+44	; 0x2c
     26c:	67 a4       	ldd	r6, Z+47	; 0x2f
     26e:	6a a4       	ldd	r6, Y+42	; 0x2a
     270:	6d a4       	ldd	r6, Y+45	; 0x2d
     272:	70 a4       	ldd	r7, Z+40	; 0x28
     274:	92 a4       	ldd	r9, Z+42	; 0x2a
     276:	80 a4       	ldd	r8, Z+40	; 0x28
     278:	73 a4       	ldd	r7, Z+43	; 0x2b
     27a:	8b a4       	ldd	r8, Y+43	; 0x2b
     27c:	a9 a3       	std	Y+33, r26	; 0x21

0000027e <__c.2991>:
     27e:	49 6e 69 74 69 61 6c 69 7a 65 2e 2e 2e 20 00        Initialize... .

0000028d <__c.2961>:
     28d:	57 61 74 63 68 44 6f 67 00                          WatchDog.

00000296 <__c.2959>:
     296:	42 72 6f 77 6e 4f 75 74 00                          BrownOut.

0000029f <__c.2957>:
     29f:	45 78 74 65 72 6e 61 6c 00                          External.

000002a8 <__c.2952>:
     2a8:	50 6f 77 65 72 4f 6e 00                             PowerOn.

000002b0 <__prodloc>:
     2b0:	01 06 02 06 01 0d 02 0d 01 14 02 14                 ............

000002bc <__prntloc>:
     2bc:	01 08 02 08 03 08 04 08 01 13 02 13                 ............

000002c8 <__prntlmt>:
     2c8:	05 03 04 02 0f 0f                                   ......

000002ce <__prntstr>:
     2ce:	01 01 00 00 00 00                                   ......

000002d4 <__hostloc>:
     2d4:	01 0a 02 0a 03 0a                                   ......

000002da <MaxKeyHit>:
     2da:	02 04 03 03 03 03 03 04 03 04                       ..........

000002e4 <strDispenserName1>:
     2e4:	4e 2f 41 00                                         N/A.

000002e8 <strDispenserName2>:
     2e8:	47 69 6c 62 61 72 63 6f 00                          Gilbarco.

000002f1 <strDispenserName3>:
     2f1:	57 61 79 6e 65 20 44 41 52 54 00                    Wayne DART.

000002fc <strDispenserName4>:
     2fc:	54 61 74 73 75 6e 6f 00                             Tatsuno.

00000304 <strDispenserName5>:
     304:	4c 47 00                                            LG.

00000307 <DefListDispenserName>:
     307:	e4 02 e8 02 f1 02 fc 02 04 03                       ..........

00000311 <__c.9976>:
     311:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     321:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     331:	20 20 20 20 20 20 20 20 00                                  .

0000033a <__c.9974>:
     33a:	20 20 20 20 20 20 53 65 6d 6f 67 61 20 53 65 6c           Semoga Sel
     34a:	61 6d 61 74 20 53 61 6d 70 61 69 20 54 75 6a 75     amat Sampai Tuju
     35a:	61 6e 20 20 20 20 20 20 00                          an      .

00000363 <__c.9972>:
     363:	20 20 20 20 20 20 20 20 20 20 20 20 53 65 6c 61                 Sela
     373:	6d 61 74 20 20 4a 61 6c 61 6e 20 20 20 20 20 20     mat  Jalan      
     383:	20 20 20 20 20 20 20 20 00                                  .

0000038c <__c.9970>:
     38c:	20 20 20 20 20 20 20 20 20 20 20 20 20 54 65 72                  Ter
     39c:	69 6d 61 20 4b 61 73 69 68 20 20 20 20 20 20 20     ima Kasih       
     3ac:	20 20 20 20 20 20 20 20 00                                  .

000003b5 <__c.9968>:
     3b5:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3c5:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3d5:	20 20 20 20 20 20 20 20 00                                  .

000003de <__c.9966>:
     3de:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3ee:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3fe:	20 20 20 20 20 20 20 20 00                                  .

00000407 <__c.9964>:
     407:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     417:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     427:	20 20 20 20 20 20 20 20 00                                  .

00000430 <__c.9962>:
     430:	20 20 20 20 20 20 20 20 20 20 20 20 4a 61 6b 61                 Jaka
     440:	72 74 61 20 53 65 6c 61 74 61 6e 20 20 20 20 20     rta Selatan     
     450:	20 20 20 20 20 20 20 20 00                                  .

00000459 <__c.9960>:
     459:	20 20 20 20 20 20 20 20 4a 4c 2e 20 52 53 20 46             JL. RS F
     469:	61 74 6d 61 77 61 74 69 20 4e 6f 2e 35 35 20 20     atmawati No.55  
     479:	20 20 20 20 20 20 20 20 00                                  .

00000482 <__c.9958>:
     482:	20 20 20 20 50 54 2e 20 48 41 4e 49 4e 44 4f 20         PT. HANINDO 
     492:	41 55 54 4f 4d 41 54 49 4f 4e 20 53 4f 4c 55 54     AUTOMATION SOLUT
     4a2:	49 4f 4e 53 20 20 20 20 00                          IONS    .

000004ab <__c.9956>:
     4ab:	30 30 30 30 30 30 00                                000000.

000004b2 <__c.9954>:
     4b2:	42 52 49 00                                         BRI.

000004b6 <__c.9952>:
     4b6:	42 4e 49 00                                         BNI.

000004ba <__c.9950>:
     4ba:	4d 61 6e 64 69 72 69 00                             Mandiri.

000004c2 <__c.9948>:
     4c2:	42 43 41 00                                         BCA.

000004c6 <__c.9946>:
     4c6:	44 69 65 73 65 6c 20 20 00                          Diesel  .

000004cf <__c.9944>:
     4cf:	42 69 6f 53 6f 6c 72 20 00                          BioSolr .

000004d8 <__c.9942>:
     4d8:	53 6f 6c 61 72 20 20 20 00                          Solar   .

000004e1 <__c.9940>:
     4e1:	50 72 65 6d 69 75 6d 20 00                          Premium .

000004ea <__c.9938>:
     4ea:	50 65 72 74 61 6d 61 78 00                          Pertamax.

000004f3 <__c.9936>:
     4f3:	50 65 72 74 2b 20 20 20 00                          Pert+   .

000004fc <__c.9934>:
     4fc:	36 35 30 30 00                                      6500.

00000501 <__c.9932>:
     501:	34 35 30 30 00                                      4500.

00000506 <__c.9930>:
     506:	36 35 30 30 00                                      6500.

0000050b <__c.9928>:
     50b:	34 35 30 30 00                                      4500.

00000510 <__c.9926>:
     510:	37 32 35 30 00                                      7250.

00000515 <__c.9924>:
     515:	36 35 30 30 00                                      6500.

0000051a <__c.9922>:
     51a:	20 20 00                                              .

0000051d <__c.9826>:
     51d:	25 64 00                                            %d.

00000520 <__c.9824>:
     520:	54 25 2e 32 64 25 2e 32 64 25 73 25 73 25 73 25     T%.2d%.2d%s%s%s%
     530:	73 25 73 25 73 3a 00                                s%s%s:.

00000537 <__c.9775>:
     537:	32 30 25 73 2f 25 73 2f 25 73 20 25 73 3a 25 73     20%s/%s/%s %s:%s
     547:	3a 25 73 00                                         :%s.

0000054b <__c.9747>:
     54b:	25 73 00                                            %s.

0000054e <__c.9738>:
     54e:	25 73 00                                            %s.

00000551 <__c.9687>:
     551:	25 63 25 2e 32 64 3a 00                             %c%.2d:.

00000559 <__c.9666>:
     559:	43 54 53 52 50 00                                   CTSRP.

0000055f <__c.9642>:
     55f:	3a 00                                               :.

00000561 <__c.9488>:
     561:	4e 2f 41 00                                         N/A.

00000565 <__c.9468>:
     565:	25 73 00                                            %s.

00000568 <__c.9463>:
	...

00000569 <__c.9336>:
     569:	25 64 2e 25 73 25 73 25 73 00                       %d.%s%s%s.

00000573 <__c.9334>:
     573:	25 64 2e 25 73 25 73 25 73 25 73 25 73 00           %d.%s%s%s%s%s.

00000581 <__c.9326>:
     581:	54 4f 54 41 4c 20 25 73 25 73 00                    TOTAL %s%s.

0000058c <__c.9324>:
     58c:	54 4f 54 41 4c 20 25 73 25 73 25 73 25 73 00        TOTAL %s%s%s%s.

0000059b <__c.9320>:
     59b:	25 73 25 73 00                                      %s%s.

000005a0 <__c.9318>:
     5a0:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

000005a9 <__c.9316>:
     5a9:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5b9:	20 20 20 20 20 20 20 20 20 20 20 20 20 00                        .

000005c7 <__c.9314>:
     5c7:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5d7:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

000005e5 <__c.9312>:
     5e5:	41 77 61 6c 20 3a 25 73 25 73 00                    Awal :%s%s.

000005f0 <__c.9310>:
     5f0:	41 77 61 6c 20 3a 25 73 25 73 25 73 25 73 00        Awal :%s%s%s%s.

000005ff <__c.9308>:
     5ff:	41 6b 68 69 72 3a 25 73 25 73 00                    Akhir:%s%s.

0000060a <__c.9306>:
     60a:	41 6b 68 69 72 3a 25 73 25 73 25 73 25 73 00        Akhir:%s%s%s%s.

00000619 <__c.9304>:
     619:	50 25 64 2e 25 64 20 2d 20 25 73 20 00              P%d.%d - %s .

00000626 <__c.9302>:
     626:	50 25 64 2e 25 64 20 2d 20 25 73 20 25 73 20 25     P%d.%d - %s %s %
     636:	73 00                                               s.

00000638 <__c.9300>:
     638:	48 61 72 67 61 3a 20 52 70 2e 25 73 00              Harga: Rp.%s.

00000645 <__c.9296>:
     645:	4e 2f 41 00                                         N/A.

00000649 <__c.9292>:
     649:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     659:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 20 20 20 20     OLUME(L)        
     669:	20 20 20 20 20 20 00                                      .

00000670 <__c.9290>:
     670:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     680:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 52 55 50 49     OLUME(L)    RUPI
     690:	41 48 28 52 50 29 00                                AH(RP).

00000697 <__c.9286>:
     697:	41 6b 68 69 72 20 53 68 69 66 74 20 3a 20 25 73     Akhir Shift : %s
     6a7:	20 00                                                .

000006a9 <__c.9284>:
     6a9:	41 77 61 6c 20 20 53 68 69 66 74 20 3a 20 25 73     Awal  Shift : %s
     6b9:	20 00                                                .

000006bb <__c.9282>:
     6bb:	54 65 72 6d 69 6e 61 6c 20 49 44 20 3a 20 25 2e     Terminal ID : %.
     6cb:	32 64 20 20 20 20 20 20 20 20 20 20 20 20 20 20     2d              
     6db:	20 20 20 20 20 00                                        .

000006e1 <__c.9280>:
     6e1:	20 20 20 20 20 20 20 20 4c 61 70 6f 72 61 6e 20             Laporan 
     6f1:	54 75 74 75 70 20 53 68 69 66 74 3a 20 25 73 20     Tutup Shift: %s 
     701:	20 20 20 20 20 00                                        .

00000707 <__c.9277>:
     707:	25 64 00                                            %d.

0000070a <__c.9219>:
     70a:	25 73 00                                            %s.

0000070d <__c.9214>:
     70d:	30 00                                               0.

0000070f <__c.9212>:
     70f:	30 00                                               0.

00000711 <__c.9048>:
     711:	25 73 00                                            %s.

00000714 <__c.9046>:
     714:	25 73 00                                            %s.

00000717 <__c.9044>:
     717:	25 73 00                                            %s.

0000071a <__c.9042>:
     71a:	25 73 00                                            %s.

0000071d <__c.9040>:
     71d:	25 73 00                                            %s.

00000720 <__c.8844>:
     720:	25 73 00                                            %s.

00000723 <__c.8756>:
     723:	30 30 30 30 30 30 30 30 00                          00000000.

0000072c <__c.8675>:
     72c:	4f 70 65 72 61 74 6f 72 3a 20 25 73 00              Operator: %s.

00000739 <__c.8670>:
     739:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     749:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     759:	2d 00                                               -.

0000075b <__c.8661>:
     75b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     76b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     77b:	20 20 20 00                                            .

0000077f <__c.8659>:
     77f:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     78f:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     79f:	20 20 20 00                                            .

000007a3 <__c.8501>:
     7a3:	20 20 20 20 20 4f 70 65 72 61 74 6f 72 3a 20 25          Operator: %
     7b3:	73 00                                               s.

000007b5 <__c.8496>:
     7b5:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     7c5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7d5:	2d 2d 00                                            --.

000007d8 <__c.8493>:
     7d8:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 41          Surcharge A
     7e8:	6d 74 3a 20 25 73 00                                mt: %s.

000007ef <__c.8490>:
     7ef:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 44          Surcharge D
     7ff:	73 63 3a 20 25 73 00                                sc: %s.

00000806 <__c.8487>:
     806:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     816:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     826:	2d 2d 00                                            --.

00000829 <__c.8484>:
     829:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     839:	41 20 3a 20 52 70 2e 25 73 00                       A : Rp.%s.

00000843 <__c.8481>:
     843:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     853:	56 20 3a 20 25 73 20 4c 00                          V : %s L.

0000085c <__c.8478>:
     85c:	20 20 20 20 20 54 6f 74 61 6c 20 52 65 64 65 65          Total Redee
     86c:	6d 20 3a 20 25 73 00                                m : %s.

00000873 <__c.8475>:
     873:	20 20 20 20 20 45 78 70 69 72 79 20 20 20 20 20          Expiry     
     883:	20 20 3a 20 25 73 00                                  : %s.

0000088a <__c.8472>:
     88a:	20 20 20 20 20 43 75 72 72 20 50 6f 69 6e 74 73          Curr Points
     89a:	20 20 3a 20 25 73 00                                  : %s.

000008a1 <__c.8469>:
     8a1:	20 20 20 20 20 50 72 65 76 20 50 6f 69 6e 74 73          Prev Points
     8b1:	20 20 3a 20 25 73 00                                  : %s.

000008b8 <__c.8466>:
     8b8:	20 20 20 20 20 47 61 69 6e 20 50 6f 69 6e 74 73          Gain Points
     8c8:	20 20 3a 20 25 73 00                                  : %s.

000008cf <__c.8463>:
     8cf:	20 20 20 20 20 43 6f 72 70 20 4e 61 6d 65 20 20          Corp Name  
     8df:	20 20 3a 20 25 73 00                                  : %s.

000008e6 <__c.8460>:
     8e6:	20 20 20 20 20 43 6f 72 70 20 49 44 20 20 20 20          Corp ID    
     8f6:	20 20 3a 20 25 73 00                                  : %s.

000008fd <__c.8457>:
     8fd:	20 20 20 20 20 43 61 72 64 20 48 6f 6c 64 65 72          Card Holder
     90d:	20 20 3a 20 25 73 20 00                               : %s .

00000915 <__c.8454>:
     915:	20 20 20 20 20 43 61 72 64 20 49 44 20 20 20 20          Card ID    
     925:	20 20 3a 20 25 73 00                                  : %s.

0000092c <__c.8451>:
     92c:	20 20 20 20 20 20 20 20 20 4c 4f 59 41 4c 54 59              LOYALTY
     93c:	20 49 4e 46 4f 52 4d 41 54 49 4f 4e 20 20 20 20      INFORMATION    
     94c:	20 20 00                                              .

0000094f <__c.8448>:
     94f:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     95f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     96f:	2d 2d 00                                            --.

00000972 <__c.8445>:
     972:	20 20 20 20 2e 25 73 00                                 .%s.

0000097a <__c.8441>:
     97a:	20 20 20 20 54 61 6e 64 61 20 54 61 6e 67 61 6e         Tanda Tangan
     98a:	20 20 28 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f       (_____________
     99a:	5f 29 00                                            _).

0000099d <__c.8436>:
     99d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9ad:	20 20 20 20 20 20 00                                      .

000009b4 <__c.8433>:
     9b4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9c4:	20 20 20 20 20 20 00                                      .

000009cb <__c.8430>:
     9cb:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9db:	20 00                                                .

000009dd <__c.8428>:
     9dd:	20 20 00                                              .

000009e0 <__c.8426>:
     9e0:	20 20 20 20 41 70 70 72 20 43 6f 64 65 3a 20 25         Appr Code: %
     9f0:	73 00                                               s.

000009f2 <__c.8424>:
     9f2:	25 73 20 20 00                                      %s  .

000009f7 <__c.8422>:
     9f7:	20 20 20 20 4e 61 6d 61 20 20 20 20 20 3a 20 25         Nama     : %
     a07:	73 00                                               s.

00000a09 <__c.8419>:
     a09:	20 20 20 20 20 20 20 20 20 20 2a 2a 2a 20 50 55               *** PU
     a19:	4d 50 20 54 45 53 54 20 2a 2a 2a 20 20 20 20 20     MP TEST ***     
     a29:	20 20 00                                              .

00000a2c <__c.8417>:
     a2c:	20 20 20 20 56 6f 75 63 68 65 72 20 4e 6f 3a 20         Voucher No: 
     a3c:	25 73 00                                            %s.

00000a3f <__c.8415>:
     a3f:	20 20 20 20 4b 61 72 74 75 20 49 44 20 3a 20 25         Kartu ID : %
     a4f:	73 00                                               s.

00000a51 <__c.8412>:
     a51:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     a61:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a71:	2d 2d 00                                            --.

00000a74 <__c.8409>:
     a74:	20 20 20 20 20 20 4f 64 6f 6d 65 74 65 72 20 20           Odometer  
     a84:	20 20 3a 20 25 73 00                                  : %s.

00000a8b <__c.8406>:
     a8b:	20 20 20 20 20 20 4e 6f 2e 50 6f 6c 69 73 69 20           No.Polisi 
     a9b:	20 20 3a 20 25 73 00                                  : %s.

00000aa2 <__c.8403>:
	...

00000aa3 <__c.8401>:
     aa3:	20 20 20 20 20 20 4a 6d 6c 20 52 75 70 69 61 68           Jml Rupiah
     ab3:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000abd <__c.8398>:
     abd:	20 20 20 20 20 20 4a 6d 6c 20 4c 69 74 65 72 20           Jml Liter 
     acd:	20 20 3a 20 25 73 20 4c 00                            : %s L.

00000ad6 <__c.8395>:
	...

00000ad7 <__c.8393>:
     ad7:	20 20 20 20 20 20 48 61 72 67 61 2f 4c 20 20 20           Harga/L   
     ae7:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000af1 <__c.8390>:
     af1:	20 20 20 20 20 20 50 72 6f 64 75 6b 20 20 20 20           Produk    
     b01:	20 20 3a 20 25 73 00                                  : %s.

00000b08 <__c.8387>:
     b08:	20 20 20 20 20 20 50 75 6c 61 75 2f 50 6f 6d 70           Pulau/Pomp
     b18:	61 20 3a 20 5b 25 73 5d 2d 25 73 00                 a : [%s]-%s.

00000b24 <__c.8384>:
     b24:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     b34:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     b44:	2d 2d 00                                            --.

00000b47 <__c.8381>:
     b47:	20 20 20 20 20 20 57 61 6b 74 75 3a 20 25 73 20           Waktu: %s 
     b57:	25 73 20 00                                         %s .

00000b5b <__c.8377>:
     b5b:	20 20 20 20 20 20 53 68 69 66 74 3a 20 25 73 20           Shift: %s 
     b6b:	20 4e 6f 2e 54 72 61 6e 73 3a 20 25 73 20 00         No.Trans: %s .

00000b7a <__c.8360>:
     b7a:	20 00                                                .

00000b7c <__c.8358>:
     b7c:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     b8c:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     b9c:	20 20 20 00                                            .

00000ba0 <__c.7929>:
     ba0:	45 72 72 6f 72 20 4e 6f 20 43 6f 6e 6e 65 63 74     Error No Connect
     bb0:	69 6f 6e 00                                         ion.

00000bb4 <__c.7923>:
     bb4:	50 72 6f 73 65 73 00                                Proses.

00000bbb <__c.7921>:
     bbb:	53 65 6e 64 20 52 65 71 75 65 73 74 00              Send Request.

00000bc8 <__c.7916>:
     bc8:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     bd8:	6e 74 65 72 00                                      nter.

00000bdd <__c.7914>:
     bdd:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     bed:	6e 74 65 72 00                                      nter.

00000bf2 <__c.7911>:
     bf2:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c02:	74 65 72 20 00                                      ter .

00000c07 <__c.7909>:
     c07:	4f 64 6f 6d 65 74 65 72 3a 5f 20 00                 Odometer:_ .

00000c13 <__c.7907>:
     c13:	50 6c 61 74 20 4e 6f 3a 20 25 73 20 00              Plat No: %s .

00000c20 <__c.7904>:
     c20:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     c30:	6e 74 65 72 00                                      nter.

00000c35 <__c.7902>:
     c35:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     c45:	6e 74 65 72 00                                      nter.

00000c4a <__c.7899>:
     c4a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c5a:	74 65 72 20 00                                      ter .

00000c5f <__c.7897>:
     c5f:	5f 00                                               _.

00000c61 <__c.7895>:
     c61:	49 6e 70 75 74 20 50 6c 61 74 20 4e 6f 3a 20 00     Input Plat No: .

00000c71 <__c.7819>:
     c71:	23 29 53 61 76 65 00                                #)Save.

00000c78 <__c.7817>:
     c78:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c85 <__c.7815>:
     c85:	25 64 00                                            %d.

00000c88 <__c.7803>:
     c88:	25 64 00                                            %d.

00000c8b <__c.7795>:
     c8b:	23 29 53 61 76 65 00                                #)Save.

00000c92 <__c.7793>:
     c92:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c9f <__c.7791>:
     c9f:	33 29 4e 6f 74 69 66 20 3a 20 20 20 20 20 2a 29     3)Notif :     *)
     caf:	45 78 69 74 00                                      Exit.

00000cb4 <__c.7789>:
     cb4:	32 29 44 2f 54 20 20 20 3a 00                       2)D/T   :.

00000cbe <__c.7787>:
     cbe:	31 29 4d 6f 6e 65 79 20 3a 00                       1)Money :.

00000cc8 <__c.7734>:
     cc8:	25 2e 32 64 00                                      %.2d.

00000ccd <__c.7732>:
     ccd:	25 64 00                                            %d.

00000cd0 <__c.7715>:
     cd0:	25 2e 32 64 00                                      %.2d.

00000cd5 <__c.7713>:
     cd5:	25 64 00                                            %d.

00000cd8 <__c.7705>:
     cd8:	34 29 43 75 74 20 3a 20 20 2a 29 45 78 69 74 00     4)Cut :  *)Exit.

00000ce8 <__c.7703>:
     ce8:	33 29 4c 6f 67 6f 3a 20 20 23 29 53 61 76 65 00     3)Logo:  #)Save.

00000cf8 <__c.7701>:
     cf8:	32 29 53 69 7a 65 3a 20 20 36 29 53 70 61 63 65     2)Size:  6)Space
     d08:	20 3a 00                                             :.

00000d0b <__c.7699>:
     d0b:	31 29 54 79 70 65 3a 20 20 35 29 53 63 72 6f 6c     1)Type:  5)Scrol
     d1b:	6c 3a 00                                            l:.

00000d1e <__c.7635>:
     d1e:	2a 29 43 61 6e 63 65 6c 20 20 20 20 20 20 23 29     *)Cancel      #)
     d2e:	53 61 76 65 00                                      Save.

00000d33 <__c.7633>:
     d33:	54 49 4d 45 20 3a 20 00                             TIME : .

00000d3b <__c.7631>:
     d3b:	44 41 54 45 20 3a 20 00                             DATE : .

00000d43 <__c.7581>:
     d43:	25 64 00                                            %d.

00000d46 <__c.7570>:
     d46:	25 64 00                                            %d.

00000d49 <__c.7562>:
     d49:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 23 29     *)Exit        #)
     d59:	53 61 76 65 00                                      Save.

00000d5e <__c.7560>:
     d5e:	32 29 4e 32 3a 20 20 34 29 4e 34 3a 20 20 36 29     2)N2:  4)N4:  6)
     d6e:	4e 36 3a 00                                         N6:.

00000d72 <__c.7558>:
     d72:	31 29 4e 31 3a 20 20 33 29 4e 33 3a 20 20 35 29     1)N1:  3)N3:  5)
     d82:	4e 35 3a 00                                         N5:.

00000d86 <__c.7556>:
     d86:	50 72 6f 64 75 63 74 20 46 49 50 25 2e 32 64 00     Product FIP%.2d.

00000d96 <__c.7472>:
     d96:	43 6f 6d 70 6c 65 74 65 64 00                       Completed.

00000da0 <__c.7470>:
     da0:	43 61 6e 63 65 6c 20 20 20 20 20 00                 Cancel     .

00000dac <__c.7467>:
     dac:	49 64 5b 25 64 5d 3d 25 2e 32 64 20 20 00           Id[%d]=%.2d  .

00000dba <__c.7464>:
     dba:	53 61 76 69 6e 67 2e 2e 00                          Saving...

00000dc3 <__c.7462>:
     dc3:	2d 50 75 6d 70 49 44 2d 00                          -PumpID-.

00000dcc <__c.7458>:
     dcc:	20 20 20 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 20         Not Allowed 
     ddc:	20 20 20 20 00                                          .

00000de1 <__c.7456>:
     de1:	20 20 44 75 70 6c 69 63 61 74 65 20 50 75 6d 70       Duplicate Pump
     df1:	49 44 20 20 00                                      ID  .

00000df6 <__c.7454>:
     df6:	20 20 20 20 20 20 57 61 72 6e 69 6e 67 21 20 20           Warning!  
     e06:	20 20 20 20 00                                          .

00000e0b <__c.7442>:
     e0b:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e1b:	2e 32 64 00                                         .2d.

00000e1f <__c.7436>:
     e1f:	23 29 53 61 76 65 00                                #)Save.

00000e26 <__c.7434>:
     e26:	2a 29 42 61 63 6b 00                                *)Back.

00000e2d <__c.7429>:
     e2d:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e3d:	2e 32 64 00                                         .2d.

00000e41 <__c.7380>:
     e41:	25 2e 32 64 00                                      %.2d.

00000e46 <__c.7374>:
     e46:	25 2e 32 64 00                                      %.2d.

00000e4b <__c.7372>:
     e4b:	34 29 34 3a 20 20 20 38 29 38 3a 20 20 20 2a 29     4)4:   8)8:   *)
     e5b:	45 78 69 74 00                                      Exit.

00000e60 <__c.7370>:
     e60:	33 29 33 3a 20 20 20 37 29 37 3a 20 20 20 23 29     3)3:   7)7:   #)
     e70:	53 61 76 65 00                                      Save.

00000e75 <__c.7368>:
     e75:	32 29 32 3a 20 20 20 36 29 36 3a 00                 2)2:   6)6:.

00000e81 <__c.7366>:
     e81:	31 29 31 3a 20 20 20 35 29 35 3a 00                 1)1:   5)5:.

00000e8d <__c.7332>:
     e8d:	5b 2a 5d 45 78 69 74 20 20 5b 23 5d 43 68 61 6e     [*]Exit  [#]Chan
     e9d:	67 65 20 00                                         ge .

00000ea1 <__c.7330>:
     ea1:	25 64 2e 25 73 00                                   %d.%s.

00000ea7 <__c.7325>:
     ea7:	2d 44 69 73 70 65 6e 73 65 72 20 42 72 61 6e 64     -Dispenser Brand
     eb7:	2d 00                                               -.

00000eb9 <__c.7309>:
     eb9:	2a 29 45 78 69 74 00                                *)Exit.

00000ec0 <__c.7307>:
     ec0:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00000eca <__c.7305>:
     eca:	31 29 49 44 00                                      1)ID.

00000ecf <__c.7290>:
     ecf:	2a 29 45 78 69 74 00                                *)Exit.

00000ed6 <__c.7285>:
     ed6:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ee6:	2e 32 64 20 00                                      .2d .

00000eeb <__c.7276>:
     eeb:	25 2e 32 64 00                                      %.2d.

00000ef0 <__c.7075>:
     ef0:	5b 2a 5d 45 78 69 74 00                             [*]Exit.

00000ef8 <__c.7073>:
     ef8:	36 2e 41 63 74 3a 25 64 00                          6.Act:%d.

00000f01 <__c.7071>:
     f01:	35 2e 44 6c 79 3a 25 64 00                          5.Dly:%d.

00000f0a <__c.7069>:
     f0a:	34 2e 54 69 6d 50 6f 6f 6c 3a 25 64 00              4.TimPool:%d.

00000f17 <__c.7067>:
     f17:	33 2e 54 72 79 53 65 6e 64 3a 25 64 00              3.TrySend:%d.

00000f24 <__c.7065>:
     f24:	32 2e 6e 4e 6f 50 75 6d 70 3a 25 64 00              2.nNoPump:%d.

00000f31 <__c.7063>:
     f31:	31 2e 4d 61 78 50 75 6d 70 3a 25 64 00              1.MaxPump:%d.

00000f3e <__c.7004>:
     f3e:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00000f4b <__c.6999>:
     f4b:	43 4f 4d 25 64 3a 25 64 00                          COM%d:%d.

00000f54 <__c.6997>:
     f54:	20 20 20 20 20 2d 42 61 75 64 72 61 74 65 2d 20          -Baudrate- 
     f64:	20 20 20 20 00                                          .

00000f69 <__c.6992>:
     f69:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 00           [*]Back      .

00000f77 <__c.6990>:
     f77:	33 2e 43 4f 4d 33 3a 34 38 35 00                    3.COM3:485.

00000f82 <__c.6988>:
     f82:	33 2e 43 4f 4d 33 3a 32 33 32 00                    3.COM3:232.

00000f8d <__c.6986>:
     f8d:	33 2e 43 4f 4d 33 3a 54 54 4c 00                    3.COM3:TTL.

00000f98 <__c.6984>:
     f98:	32 2e 42 61 75 64 72 61 74 65 00                    2.Baudrate.

00000fa3 <__c.6982>:
     fa3:	31 2e 4d 6f 64 65 3a 53 74 61 6e 64 61 6c 6f 6e     1.Mode:Standalon
     fb3:	65 00                                               e.

00000fb5 <__c.6980>:
     fb5:	31 2e 4d 6f 64 65 3a 53 6c 61 76 65 00              1.Mode:Slave.

00000fc2 <__c.6978>:
     fc2:	31 2e 4d 6f 64 65 3a 4e 6f 6e 65 00                 1.Mode:None.

00000fce <__c.6931>:
     fce:	49 6e 76 61 6c 69 64 20 4f 6c 64 20 50 61 73 73     Invalid Old Pass
     fde:	77 6f 72 64 00                                      word.

00000fe3 <__c.6929>:
     fe3:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     ff3:	20 20 20 20 00                                          .

00000ff8 <__c.6927>:
     ff8:	49 6e 76 61 6c 69 64 20 4e 65 77 20 50 61 73 73     Invalid New Pass
    1008:	77 6f 72 64 00                                      word.

0000100d <__c.6925>:
    100d:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
    101d:	20 20 20 20 00                                          .

00001022 <__c.6923>:
    1022:	20 20 20 50 61 73 73 77 6f 72 64 20 53 61 76 65        Password Save
    1032:	64 20 20 20 00                                      d   .

00001037 <__c.6921>:
    1037:	20 20 20 20 20 43 6f 6d 70 6c 65 74 65 64 20 20          Completed  
    1047:	20 20 20 20 00                                          .

0000104c <__c.6917>:
    104c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    105c:	6e 74 65 72 00                                      nter.

00001061 <__c.6914>:
    1061:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1071:	6e 74 65 72 00                                      nter.

00001076 <__c.6911>:
    1076:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1086:	6e 74 65 72 00                                      nter.

0000108b <__c.6909>:
    108b:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    109b:	20 20 20 20 00                                          .

000010a0 <__c.6905>:
    10a0:	56 61 6c 69 64 61 74 69 6e 67 2e 2e 00              Validating...

000010ad <__c.6901>:
    10ad:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10bd:	6e 74 65 72 00                                      nter.

000010c2 <__c.6898>:
    10c2:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    10d2:	6e 74 65 72 00                                      nter.

000010d7 <__c.6893>:
    10d7:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10e7:	6e 74 65 72 00                                      nter.

000010ec <__c.6891>:
    10ec:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    10fc:	20 20 20 20 00                                          .

00001101 <__c.6887>:
    1101:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1111:	6e 74 65 72 00                                      nter.

00001116 <__c.6884>:
    1116:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1126:	6e 74 65 72 00                                      nter.

0000112b <__c.6879>:
    112b:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    113b:	6e 74 65 72 00                                      nter.

00001140 <__c.6877>:
    1140:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    1150:	20 20 20 20 00                                          .

00001155 <__c.6873>:
    1155:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1165:	6e 74 65 72 00                                      nter.

0000116a <__c.6871>:
    116a:	4f 6c 64 3a 5f 00                                   Old:_.

00001170 <__c.6869>:
    1170:	2d 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 2d 00     -Administrator-.

00001180 <__c.6867>:
    1180:	2d 53 75 70 65 72 76 69 73 6f 72 2d 00              -Supervisor-.

0000118d <__c.6859>:
    118d:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

0000119a <__c.6857>:
    119a:	32 2e 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 00     2.Administrator.

000011aa <__c.6855>:
    11aa:	31 2e 53 75 70 65 72 76 69 73 6f 72 00              1.Supervisor.

000011b7 <__c.6853>:
    11b7:	2d 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72 64     -Change Password
    11c7:	2d 00                                               -.

000011c9 <__c.6850>:
    11c9:	53 61 76 65 64 20 00                                Saved .

000011d0 <__c.6844>:
    11d0:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11e0:	6e 74 65 72 00                                      nter.

000011e5 <__c.6841>:
    11e5:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    11f5:	6e 74 65 72 00                                      nter.

000011fa <__c.6836>:
    11fa:	5b 2a 5d 4e 6f 20 20 20 20 5b 23 5d 59 65 73 00     [*]No    [#]Yes.

0000120a <__c.6834>:
    120a:	53 61 76 65 3f 00                                   Save?.

00001210 <__c.6832>:
    1210:	4e 65 77 20 4f 70 65 72 61 74 6f 72 3a 00           New Operator:.

0000121e <__c.6830>:
    121e:	25 73 00                                            %s.

00001221 <__c.6826>:
    1221:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1231:	6e 74 65 72 00                                      nter.

00001236 <__c.6824>:
    1236:	4e 65 77 20 3a 5f 20 20 20 20 20 20 20 20 20 20     New :_          
    1246:	20 20 20 20 00                                          .

0000124b <__c.6822>:
    124b:	4e 61 6d 65 3a 00                                   Name:.

00001251 <__c.6820>:
    1251:	25 73 00                                            %s.

00001254 <__c.6811>:
    1254:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1264:	20 00                                                .

00001266 <__c.6809>:
    1266:	32 2e 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72     2.Change Passwor
    1276:	64 00                                               d.

00001278 <__c.6807>:
    1278:	31 2e 43 68 61 6e 67 65 20 4f 70 65 72 61 74 6f     1.Change Operato
    1288:	72 00                                               r.

0000128a <__c.6725>:
    128a:	2a 29 42 61 63 6b 00                                *)Back.

00001291 <__c.6723>:
    1291:	34 2e 53 70 61 72 61 74 6f 72 3a 25 63 20 00        4.Sparator:%c .

000012a0 <__c.6721>:
    12a0:	33 2e 44 65 63 69 6d 61 6c 20 3a 25 63 20 00        3.Decimal :%c .

000012af <__c.6719>:
    12af:	32 2e 54 2e 4d 6f 6e 65 79 20 3a 25 64 20 00        2.T.Money :%d .

000012be <__c.6717>:
    12be:	31 2e 54 2e 56 6f 6c 75 6d 65 3a 25 64 20 00        1.T.Volume:%d .

000012cd <__c.6712>:
    12cd:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4e 65 78 74     [*]Back  [#]Next
	...

000012de <__c.6710>:
    12de:	33 2e 4d 6f 6e 65 79 20 3a 25 64 00                 3.Money :%d.

000012ea <__c.6708>:
    12ea:	32 2e 56 6f 6c 75 6d 65 3a 25 64 00                 2.Volume:%d.

000012f6 <__c.6706>:
    12f6:	31 2e 50 72 69 63 65 20 3a 25 64 00                 1.Price :%d.

00001302 <__c.6689>:
    1302:	34 29 42 72 61 6e 64 20 20 2a 29 45 78 69 74 00     4)Brand  *)Exit.

00001312 <__c.6687>:
    1312:	33 29 4c 61 62 65 6c 20 20 00                       3)Label  .

0000131c <__c.6685>:
    131c:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00001326 <__c.6683>:
    1326:	31 29 49 44 20 20 20 20 20 00                       1)ID     .

00001330 <__c.6643>:
    1330:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1340:	20 20 20 20 00                                          .

00001345 <__c.6641>:
    1345:	4e 65 77 3a 5f 00                                   New:_.

0000134b <__c.6639>:
    134b:	4f 6c 64 3a 25 73 00                                Old:%s.

00001352 <__c.6637>:
    1352:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1362:	20 20 20 20 00                                          .

00001367 <__c.6635>:
    1367:	4e 65 77 3a 5f 00                                   New:_.

0000136d <__c.6633>:
    136d:	45 64 69 74 20 50 72 6f 64 75 63 74 20 4e 61 6d     Edit Product Nam
    137d:	65 20 20 20 00                                      e   .

00001382 <__c.6631>:
    1382:	4f 6c 64 3a 25 73 00                                Old:%s.

00001389 <__c.6628>:
    1389:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 00           *)Back       .

00001397 <__c.6626>:
    1397:	32 29 25 73 00                                      2)%s.

0000139c <__c.6624>:
    139c:	31 29 25 73 00                                      1)%s.

000013a1 <__c.6619>:
    13a1:	2a 29 42 61 63 6b 00                                *)Back.

000013a8 <__c.6614>:
    13a8:	25 64 29 25 73 00                                   %d)%s.

000013ae <__c.6545>:
    13ae:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 20 20 20     *)Back          
    13be:	20 20 20 20 00                                          .

000013c3 <__c.6543>:
    13c3:	33 29 50 75 6d 70 50 6f 6f 6c 69 6e 67 20 20 20     3)PumpPooling   
    13d3:	20 20 20 20 00                                          .

000013d8 <__c.6541>:
    13d8:	32 29 53 79 73 74 65 6d 20 20 20 20 20 20 20 20     2)System        
    13e8:	20 20 20 20 00                                          .

000013ed <__c.6539>:
    13ed:	31 29 4f 70 65 72 61 74 6f 72 20 20 20 20 20 20     1)Operator      
    13fd:	20 20 20 20 00                                          .

00001402 <__c.6536>:
    1402:	34 29 44 61 74 65 74 69 6d 65 20 2a 29 45 78 69     4)Datetime *)Exi
    1412:	74 20 20 20 00                                      t   .

00001417 <__c.6534>:
    1417:	33 29 44 65 63 69 6d 61 6c 20 20 37 29 4e 65 78     3)Decimal  7)Nex
    1427:	74 20 20 20 00                                      t   .

0000142c <__c.6532>:
    142c:	32 29 50 75 6d 70 20 20 20 20 20 36 29 48 6f 73     2)Pump     6)Hos
    143c:	74 20 20 20 00                                      t   .

00001441 <__c.6530>:
    1441:	31 29 50 72 6f 64 75 63 74 20 20 35 29 50 72 69     1)Product  5)Pri
    1451:	6e 74 65 72 00                                      nter.

00001456 <__c.6445>:
    1456:	2e 00                                               ..

00001458 <__c.6443>:
    1458:	25 64 00                                            %d.

0000145b <__c.6441>:
    145b:	20 20 20 00                                            .

0000145f <__c.6439>:
    145f:	2e 00                                               ..

00001461 <__c.6437>:
    1461:	25 64 00                                            %d.

00001464 <__c.6435>:
    1464:	20 20 20 00                                            .

00001468 <__c.6428>:
    1468:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    1478:	78 74 20 20 00                                      xt  .

0000147d <__c.6426>:
    147d:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    148d:	2e 20 20 20 00                                      .   .

00001492 <__c.6424>:
    1492:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014a3 <__c.6422>:
    14a3:	53 65 72 76 65 72 20 49 50 00                       Server IP.

000014ad <__c.6333>:
    14ad:	2e 00                                               ..

000014af <__c.6331>:
    14af:	25 64 00                                            %d.

000014b2 <__c.6329>:
    14b2:	20 20 20 00                                            .

000014b6 <__c.6327>:
    14b6:	2e 00                                               ..

000014b8 <__c.6325>:
    14b8:	25 64 00                                            %d.

000014bb <__c.6323>:
    14bb:	20 20 20 00                                            .

000014bf <__c.6316>:
    14bf:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    14cf:	78 74 20 20 00                                      xt  .

000014d4 <__c.6314>:
    14d4:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    14e4:	2e 20 20 20 00                                      .   .

000014e9 <__c.6312>:
    14e9:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014fa <__c.6310>:
    14fa:	43 6c 69 65 6e 74 20 49 50 00                       Client IP.

00001504 <__c.6268>:
    1504:	25 73 25 73 00                                      %s%s.

00001509 <__c.6264>:
    1509:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

00001516 <__c.6262>:
    1516:	53 61 76 65 20 46 6f 6f 74 65 72 25 64 20 3f 00     Save Footer%d ?.

00001526 <__c.6258>:
    1526:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

00001534 <__c.6256>:
    1534:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

00001542 <__c.6253>:
    1542:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

00001551 <__c.6251>:
    1551:	45 64 69 74 20 46 6f 6f 74 65 72 25 64 20 00        Edit Footer%d .

00001560 <__c.6247>:
    1560:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    1570:	20 20 20 20 00                                          .

00001575 <__c.6245>:
    1575:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1585:	20 20 20 20 00                                          .

0000158a <__c.6243>:
    158a:	32 29 46 6f 6f 74 65 72 32 20 20 34 29 46 6f 6f     2)Footer2  4)Foo
    159a:	74 65 72 34 00                                      ter4.

0000159f <__c.6241>:
    159f:	31 29 46 6f 6f 74 65 72 31 20 20 33 29 46 6f 6f     1)Footer1  3)Foo
    15af:	74 65 72 33 00                                      ter3.

000015b4 <__c.6210>:
    15b4:	25 73 25 73 00                                      %s%s.

000015b9 <__c.6206>:
    15b9:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

000015c6 <__c.6204>:
    15c6:	53 61 76 65 20 48 65 61 64 65 72 25 64 20 3f 00     Save Header%d ?.

000015d6 <__c.6200>:
    15d6:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000015e4 <__c.6198>:
    15e4:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

000015f2 <__c.6195>:
    15f2:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

00001601 <__c.6193>:
    1601:	45 64 69 74 20 48 65 61 64 65 72 25 64 20 00        Edit Header%d .

00001610 <__c.6189>:
    1610:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    1620:	20 20 20 20 00                                          .

00001625 <__c.6187>:
    1625:	33 29 48 65 61 64 65 72 33 20 20 36 29 48 65 61     3)Header3  6)Hea
    1635:	64 65 72 36 00                                      der6.

0000163a <__c.6185>:
    163a:	32 29 48 65 61 64 65 72 32 20 20 35 29 48 65 61     2)Header2  5)Hea
    164a:	64 65 72 35 00                                      der5.

0000164f <__c.6183>:
    164f:	31 29 48 65 61 64 65 72 31 20 20 34 29 48 65 61     1)Header1  4)Hea
    165f:	64 65 72 34 00                                      der4.

00001664 <__c.6140>:
    1664:	2a 29 45 78 69 74 00                                *)Exit.

0000166b <__c.6138>:
    166b:	33 29 50 61 73 73 77 6f 72 64 20 20 20 20 20 20     3)Password      
    167b:	20 20 20 20 00                                          .

00001680 <__c.6136>:
    1680:	32 29 46 6f 6f 74 65 72 20 20 20 20 20 20 20 20     2)Footer        
    1690:	20 20 20 20 00                                          .

00001695 <__c.6134>:
    1695:	31 29 48 65 61 64 65 72 20 20 20 20 20 20 20 20     1)Header        
    16a5:	20 20 20 20 00                                          .

000016aa <__c.6132>:
    16aa:	32 29 46 6f 6f 74 65 72 20 20 20 20 35 29 53 65     2)Footer    5)Se
    16ba:	72 76 65 72 00                                      rver.

000016bf <__c.6130>:
    16bf:	31 29 48 65 61 64 65 72 20 20 20 20 34 29 43 6c     1)Header    4)Cl
    16cf:	69 65 6e 74 00                                      ient.

000016d4 <__c.6076>:
    16d4:	53 61 76 69 6e 67 20 53 68 69 66 74 44 61 74 61     Saving ShiftData
    16e4:	2e 2e 20 00                                         .. .

000016e8 <__c.6071>:
    16e8:	25 73 20 25 73 00                                   %s %s.

000016ee <__c.6069>:
    16ee:	50 72 69 6e 74 69 6e 67 20 54 6f 74 61 6c 69 7a     Printing Totaliz
    16fe:	65 72 00                                            er.

00001701 <__c.6065>:
    1701:	43 61 6e 63 65 6c 00                                Cancel.

00001708 <__c.6060>:
    1708:	45 72 72 6f 72 20 2d 20 4e 6f 20 50 75 6d 70 3a     Error - No Pump:
    1718:	25 64 20 00                                         %d .

0000171c <__c.6055>:
    171c:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

0000172a <__c.6051>:
    172a:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

00001738 <__c.6049>:
    1738:	54 6f 74 61 6c 69 7a 65 72 2e 2e 00                 Totalizer...

00001744 <__c.5977>:
    1744:	2a 29 45 78 69 74 00                                *)Exit.

0000174b <__c.5975>:
    174b:	33 2e 4c 6f 63 6b 20 50 75 6d 70 20 20 00           3.Lock Pump  .

00001759 <__c.5973>:
    1759:	32 2e 43 6c 6f 73 65 20 44 61 79 20 20 00           2.Close Day  .

00001767 <__c.5971>:
    1767:	31 2e 43 6c 6f 73 65 20 53 68 69 66 74 00           1.Close Shift.

00001775 <__c.5929>:
    1775:	34 29 53 65 74 74 69 6e 67 73 20 20 20 2a 29 45     4)Settings   *)E
    1785:	78 69 74 20 00                                      xit .

0000178a <__c.5927>:
    178a:	33 29 43 6c 6f 73 65 44 61 79 20 20 20 20 20 20     3)CloseDay      
    179a:	20 20 20 20 00                                          .

0000179f <__c.5925>:
    179f:	32 29 43 6c 6f 73 65 53 68 69 66 74 20 20 20 20     2)CloseShift    
    17af:	20 20 20 20 00                                          .

000017b4 <__c.5923>:
    17b4:	31 29 52 65 50 72 69 6e 74 20 20 20 20 20 20 20     1)RePrint       
    17c4:	20 20 20 20 00                                          .

000017c9 <__c.5888>:
    17c9:	50 61 73 73 77 6f 72 64 20 52 65 73 74 6f 72 65     Password Restore
    17d9:	64 00                                               d.

000017db <__c.5884>:
    17db:	49 6e 76 61 6c 69 64 20 52 65 73 74 6f 72 65 20     Invalid Restore 
    17eb:	20 00                                                .

000017ed <__c.5881>:
    17ed:	30 30 30 30 30 00                                   00000.

000017f3 <__c.5879>:
    17f3:	31 31 31 31 31 00                                   11111.

000017f9 <__c.5875>:
    17f9:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1809:	6e 74 65 72 00                                      nter.

0000180e <__c.5872>:
    180e:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    181e:	6e 74 65 72 00                                      nter.

00001823 <__c.5865>:
    1823:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1833:	6e 74 65 72 00                                      nter.

00001838 <__c.5863>:
    1838:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    1848:	20 20 20 20 00                                          .

0000184d <__c.5861>:
    184d:	45 6e 74 65 72 20 52 65 73 74 6f 72 65 20 43 6f     Enter Restore Co
    185d:	64 65 20 20 00                                      de  .

00001862 <__c.5859>:
    1862:	4b 65 79 20 53 74 61 6d 70 3a 25 73 20 00           Key Stamp:%s .

00001870 <__c.5855>:
    1870:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    1880:	20 20 20 20 00                                          .

00001885 <__c.5852>:
	...

00001886 <__c.5850>:
    1886:	25 73 00                                            %s.

00001889 <__c.5848>:
    1889:	25 73 00                                            %s.

0000188c <__c.5845>:
    188c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    189c:	6e 74 65 72 00                                      nter.

000018a1 <__c.5842>:
    18a1:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    18b1:	6e 74 65 72 00                                      nter.

000018b6 <__c.5835>:
	...

000018b7 <__c.5833>:
    18b7:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    18c7:	6e 74 65 72 00                                      nter.

000018cc <__c.5831>:
    18cc:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    18dc:	20 20 20 20 00                                          .

000018e1 <__c.5829>:
    18e1:	45 6e 74 65 72 20 47 65 4e 69 55 73 20 43 6f 64     Enter GeNiUs Cod
    18f1:	65 20 20 20 00                                      e   .

000018f6 <__c.5824>:
    18f6:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    1906:	20 20 20 20 00                                          .

0000190b <__c.5821>:
    190b:	52 65 73 65 74 20 43 6f 6d 70 6c 65 74 65 00        Reset Complete.

0000191a <__c.5818>:
    191a:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 00           Please Wait...

00001928 <__c.5816>:
    1928:	52 65 73 65 74 20 45 45 50 52 4f 4d 00              Reset EEPROM.

00001935 <__c.5812>:
    1935:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1945:	6e 74 65 72 00                                      nter.

0000194a <__c.5809>:
    194a:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    195a:	6e 74 65 72 00                                      nter.

0000195f <__c.5802>:
    195f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    196f:	6e 74 65 72 00                                      nter.

00001974 <__c.5800>:
    1974:	52 65 73 65 74 43 6f 64 65 3a 5f 20 20 20 20 20     ResetCode:_     
    1984:	20 20 20 20 00                                          .

00001989 <__c.5798>:
    1989:	53 65 65 64 20 43 6f 64 65 3a 25 73 00              Seed Code:%s.

00001996 <__c.5796>:
    1996:	2d 4d 61 73 74 65 72 20 52 65 73 65 74 2d 00        -Master Reset-.

000019a5 <__c.5794>:
	...

000019a6 <__c.5792>:
    19a6:	32 32 33 34 35 36 37 38 00                          22345678.

000019af <__c.5790>:
    19af:	25 73 00                                            %s.

000019b2 <__c.5781>:
    19b2:	5b 2a 5d 45 78 69 74 20 20 20 20 20 20 20 20 20     [*]Exit         
    19c2:	20 20 20 20 00                                          .

000019c7 <__c.5779>:
    19c7:	32 2e 4d 61 73 74 65 72 20 52 65 73 65 74 20 20     2.Master Reset  
    19d7:	20 20 20 20 00                                          .

000019dc <__c.5777>:
    19dc:	31 2e 52 65 73 74 6f 72 65 20 50 61 73 73 77 6f     1.Restore Passwo
    19ec:	72 64 20 20 00                                      rd  .

000019f1 <__c.5775>:
    19f1:	2d 53 79 73 74 65 6d 20 41 64 6d 69 6e 20 4c 65     -System Admin Le
    1a01:	76 65 6c 2d 00                                      vel-.

00001a06 <__c.5716>:
    1a06:	25 73 25 73 00                                      %s%s.

00001a0b <__c.5688>:
    1a0b:	25 73 00                                            %s.

00001a0e <__c.5655>:
    1a0e:	25 63 00                                            %c.

00001a11 <__c.5653>:
    1a11:	32 30 25 73 00                                      20%s.

00001a16 <__c.5631>:
    1a16:	25 73 00                                            %s.

00001a19 <__c.5583>:
    1a19:	34 32 36 34 36 33 36 00                             4264636.

00001a21 <__c.5580>:
    1a21:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a31:	6e 74 65 72 00                                      nter.

00001a36 <__c.5578>:
    1a36:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1a46:	6e 74 65 72 00                                      nter.

00001a4b <__c.5574>:
    1a4b:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a5b:	6e 74 65 72 00                                      nter.

00001a60 <__c.5572>:
    1a60:	5f 00                                               _.

00001a62 <__c.5570>:
    1a62:	50 41 53 53 57 4f 52 44 3a 00                       PASSWORD:.

00001a6c <__c.5542>:
    1a6c:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001a7a <__c.5471>:
    1a7a:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001a87 <__c.5469>:
    1a87:	4e 6f 20 52 65 70 6c 79 20 20 20 20 00              No Reply    .

00001a94 <__c.5465>:
    1a94:	20 20 20 20 20 20 20 00                                    .

00001a9c <__c.5462>:
    1a9c:	50 6c 65 61 73 65 20 57 61 69 74 00                 Please Wait.

00001aa8 <__c.5459>:
    1aa8:	25 73 00                                            %s.

00001aab <__c.5457>:
    1aab:	50 55 4d 50 20 54 45 53 54 00                       PUMP TEST.

00001ab5 <__c.5454>:
    1ab5:	25 73 00                                            %s.

00001ab8 <__c.5451>:
    1ab8:	25 73 00                                            %s.

00001abb <__c.5449>:
    1abb:	25 73 00                                            %s.

00001abe <__c.5447>:
    1abe:	25 73 00                                            %s.

00001ac1 <__c.5443>:
    1ac1:	25 73 00                                            %s.

00001ac4 <__c.5439>:
    1ac4:	50 72 6f 73 65 73 00                                Proses.

00001acb <__c.5437>:
    1acb:	2d 4d 4f 50 20 56 6f 75 63 68 65 72 2d 00           -MOP Voucher-.

00001ad9 <__c.5434>:
    1ad9:	50 72 6f 73 65 73 00                                Proses.

00001ae0 <__c.5432>:
    1ae0:	49 44 3a 25 73 00                                   ID:%s.

00001ae6 <__c.5428>:
    1ae6:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1af6:	69 74 00                                            it.

00001af9 <__c.5426>:
    1af9:	46 49 50 25 73 00                                   FIP%s.

00001aff <__c.5424>:
    1aff:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001b0e <__c.5415>:
    1b0e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b1e:	6e 74 65 72 00                                      nter.

00001b23 <__c.5413>:
    1b23:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b33:	6e 74 65 72 00                                      nter.

00001b38 <__c.5410>:
    1b38:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b48:	6e 74 65 72 00                                      nter.

00001b4d <__c.5408>:
    1b4d:	53 75 72 63 68 61 72 67 65 3a 20 20 20 5f 25 00     Surcharge:   _%.

00001b5d <__c.5406>:
    1b5d:	25 73 00                                            %s.

00001b60 <__c.5402>:
    1b60:	5b 2a 5d 42 61 63 6b 00                             [*]Back.

00001b68 <__c.5397>:
    1b68:	25 64 2e 25 73 00                                   %d.%s.

00001b6e <__c.5395>:
    1b6e:	53 65 6c 65 63 74 20 42 61 6e 6b 00                 Select Bank.

00001b7a <__c.5390>:
    1b7a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b8a:	6e 74 65 72 00                                      nter.

00001b8f <__c.5388>:
    1b8f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b9f:	6e 74 65 72 00                                      nter.

00001ba4 <__c.5385>:
    1ba4:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1bb4:	6e 74 65 72 00                                      nter.

00001bb9 <__c.5383>:
    1bb9:	5f 00                                               _.

00001bbb <__c.5381>:
    1bbb:	4b 6f 64 65 20 56 6f 75 63 68 65 72 00              Kode Voucher.

00001bc8 <__c.5372>:
    1bc8:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1bd8:	20 20 20 20 00                                          .

00001bdd <__c.5370>:
    1bdd:	32 2e 42 61 6e 6b 20 20 20 20 34 2e 50 75 6d 70     2.Bank    4.Pump
    1bed:	54 65 73 74 00                                      Test.

00001bf2 <__c.5368>:
    1bf2:	31 2e 41 63 63 6f 75 6e 74 20 33 2e 56 6f 75 63     1.Account 3.Vouc
    1c02:	68 65 72 20 00                                      her .

00001c07 <__c.5366>:
    1c07:	20 20 20 53 65 6c 65 63 74 20 50 61 79 6d 65 6e        Select Paymen
    1c17:	74 20 20 20 00                                      t   .

00001c1c <__c.5317>:
    1c1c:	43 52 45 44 49 54 43 41 52 44 00                    CREDITCARD.

00001c27 <__c.5311>:
    1c27:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1c37:	20 20 20 20 00                                          .

00001c3c <__c.5309>:
    1c3c:	32 2e 43 72 65 64 69 74 20 43 61 72 64 20 20 20     2.Credit Card   
    1c4c:	20 20 20 20 00                                          .

00001c51 <__c.5307>:
    1c51:	31 2e 44 65 62 69 74 2f 46 6c 61 73 68 20 43 61     1.Debit/Flash Ca
    1c61:	72 64 20 20 00                                      rd  .

00001c66 <__c.5305>:
    1c66:	53 65 6c 65 63 74 20 43 61 72 64 20 54 79 70 65     Select Card Type
	...

00001c77 <__c.5272>:
    1c77:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001c85 <__c.5270>:
    1c85:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001c93 <__c.5263>:
    1c93:	50 72 65 73 73 20 41 6e 79 20 4b 65 79 00           Press Any Key.

00001ca1 <__c.5261>:
    1ca1:	43 6d 20 56 6f 6c 3a 25 73 00                       Cm Vol:%s.

00001cab <__c.5259>:
    1cab:	43 4d 20 41 6d 74 3a 25 73 00                       CM Amt:%s.

00001cb5 <__c.5257>:
    1cb5:	50 6f 69 6e 74 73 3a 25 73 00                       Points:%s.

00001cbf <__c.5255>:
    1cbf:	25 73 3a 25 73 00                                   %s:%s.

00001cc5 <__c.5248>:
    1cc5:	50 72 6f 73 65 73 00                                Proses.

00001ccc <__c.5246>:
    1ccc:	49 44 3a 25 73 00                                   ID:%s.

00001cd2 <__c.5242>:
    1cd2:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ce2:	69 74 00                                            it.

00001ce5 <__c.5240>:
    1ce5:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cf4 <__c.5237>:
    1cf4:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d04:	69 74 00                                            it.

00001d07 <__c.5235>:
    1d07:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001d16 <__c.5233>:
    1d16:	46 49 50 3a 25 73 00                                FIP:%s.

00001d1d <__c.5227>:
    1d1d:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1d2d:	20 00                                                .

00001d2f <__c.5225>:
    1d2f:	32 2e 4c 6f 79 61 6c 74 79 20 55 70 64 61 74 65     2.Loyalty Update
    1d3f:	20 00                                                .

00001d41 <__c.5223>:
    1d41:	31 2e 45 6e 71 75 69 72 79 20 20 20 20 20 20 20     1.Enquiry       
    1d51:	20 00                                                .

00001d53 <__c.5221>:
    1d53:	20 20 4d 65 6e 75 20 4c 6f 79 61 6c 74 79 20 20       Menu Loyalty  
    1d63:	20 00                                                .

00001d65 <__c.5184>:
    1d65:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001d73 <__c.5182>:
    1d73:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001d81 <__c.5176>:
    1d81:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d91:	69 74 00                                            it.

00001d94 <__c.5174>:
    1d94:	54 61 70 20 53 75 70 65 72 76 69 73 6f 72 20 43     Tap Supervisor C
    1da4:	61 72 64 00                                         ard.

00001da8 <__c.5172>:
    1da8:	52 65 50 72 69 6e 74 20 46 49 50 3a 25 73 20 00     RePrint FIP:%s .

00001db8 <__c.5168>:
    1db8:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    1dc8:	6b 73 69 20 00                                      ksi .

00001dcd <__c.5159>:
    1dcd:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001ddb <__c.5115>:
    1ddb:	25 2e 32 64 00                                      %.2d.

00001de0 <__c.5111>:
    1de0:	2a 29 45 78 69 74 00                                *)Exit.

00001de7 <__c.5109>:
    1de7:	23 29 4f 4b 20 00                                   #)OK .

00001ded <__c.5107>:
    1ded:	20 20 20 20 20 00                                        .

00001df3 <__c.5105>:
    1df3:	46 49 50 3a 5f 00                                   FIP:_.

00001df9 <__c.5100>:
    1df9:	25 64 2e 50 25 73 20 7c 20 25 64 2e 50 25 73 00     %d.P%s | %d.P%s.

00001e09 <__c.5051>:
    1e09:	30 32 25 73 25 73 25 73 25 73 25 73 25 73 25 73     02%s%s%s%s%s%s%s
	...

00001e1a <__c.4908>:
    1e1a:	30 00                                               0.

00001e1c <__c.4839>:
    1e1c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e2c:	20 20 20 20 00                                          .

00001e31 <__c.4834>:
    1e31:	23 25 73 00                                         #%s.

00001e35 <__c.4832>:
    1e35:	25 2e 32 64 00                                      %.2d.

00001e3a <__c.4830>:
    1e3a:	40 46 49 50 3a 00                                   @FIP:.

00001e40 <__c.4828>:
    1e40:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e50:	20 20 20 20 00                                          .

00001e55 <__c.4824>:
    1e55:	50 72 69 6e 74 69 6e 67 20 46 49 50 25 73 20 00     Printing FIP%s .

00001e65 <__c.4800>:
    1e65:	44 3a 25 64 20 43 3a 25 63 20 20 00                 D:%d C:%c  .

00001e71 <__c.4789>:
    1e71:	25 73 20 25 73 00                                   %s %s.

00001e77 <__c.4761>:
    1e77:	4e 6f 20 50 75 6d 70 20 46 6f 75 6e 64 00           No Pump Found.

00001e85 <__c.4759>:
    1e85:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001e92 <__c.4757>:
    1e92:	50 75 6d 70 46 6f 75 6e 64 00                       PumpFound.

00001e9c <__c.4755>:
    1e9c:	43 6f 6e 6e 65 63 74 65 64 20 20 20 20 20 20 20     Connected       
    1eac:	20 20 20 20 00                                          .

00001eb1 <__c.4750>:
    1eb1:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1ec1:	20 20 20 00                                            .

00001ec5 <__c.4748>:
    1ec5:	25 73 00                                            %s.

00001ec8 <__c.4743>:
    1ec8:	53 63 61 6e 20 50 75 6d 70 00                       Scan Pump.

00001ed2 <__c.4738>:
    1ed2:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ee3 <__c.4736>:
    1ee3:	43 6f 6e 6e 65 63 74 00                             Connect.

00001eeb <__c.4734>:
    1eeb:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001efc <__c.4706>:
    1efc:	43 4f 4d 25 64 3a 25 69 20 20 20 20 20 20 20 20     COM%d:%i        
    1f0c:	20 20 20 00                                            .

00001f10 <__c.4704>:
    1f10:	49 6e 69 74 69 61 6c 69 7a 65 20 43 4f 4d 20 2e     Initialize COM .
    1f20:	2e 2e 00                                            ...

00001f23 <__c.4665>:
    1f23:	0a 47 65 4e 69 55 73 20 54 69 63 6b 65 74 20 50     .GeNiUs Ticket P
    1f33:	72 69 6e 74 65 72 20 0a 20 56 65 72 73 69 6f 6e     rinter . Version
    1f43:	3a 25 73 0a 20 4c 61 73 74 20 55 70 64 61 74 65     :%s. Last Update
    1f53:	20 25 73 20 0a 20 48 61 6e 69 6e 64 6f 20 41 75      %s . Hanindo Au
    1f63:	74 6f 6d 61 74 69 6f 6e 20 53 6f 6c 75 74 69 6f     tomation Solutio
    1f73:	6e 73 20 0a 20 77 77 77 2e 68 61 6e 69 6e 64 6f     ns . www.hanindo
    1f83:	67 72 6f 75 70 2e 63 6f 6d 0a 0a 0a 0a 0a 0a 0a     group.com.......
    1f93:	0a 00                                               ..

00001f95 <__c.4663>:
    1f95:	31 34 2f 30 36 2f 32 30 31 33 00                    14/06/2013.

00001fa0 <__c.4661>:
    1fa0:	33 2e 30 30 00                                      3.00.

00001fa5 <__c.4561>:
    1fa5:	20 20 54 69 6d 65 6f 75 74 2e 2e 21 20 00             Timeout..! .

00001fb3 <__c.4557>:
    1fb3:	46 75 65 6c 69 6e 67 20 40 46 49 50 3a 23 25 64     Fueling @FIP:#%d
	...

00001fc4 <__c.4555>:
    1fc4:	54 72 61 6e 73 61 6b 73 69 20 53 65 6c 65 73 61     Transaksi Selesa
    1fd4:	69 00                                               i.

00001fd6 <__c.4551>:
    1fd6:	49 44 3a 20 25 73 00                                ID: %s.

00001fdd <__c.4549>:
    1fdd:	25 73 00                                            %s.

00001fe0 <__c.4547>:
    1fe0:	50 25 73 20 25 73 20 00                             P%s %s .

00001fe8 <__c.4543>:
    1fe8:	46 49 50 20 54 69 64 61 6b 20 53 69 61 70 20 20     FIP Tidak Siap  
    1ff8:	20 20 00                                              .

00001ffb <__c.4540>:
    1ffb:	41 75 74 68 6f 72 69 73 61 73 69 20 42 65 72 68     Authorisasi Berh
    200b:	61 73 69 6c 00                                      asil.

00002010 <__c.4536>:
    2010:	41 75 74 68 6f 72 69 73 61 73 69 20 47 61 67 61     Authorisasi Gaga
    2020:	6c 20 20 20 00                                      l   .

00002025 <__c.4532>:
    2025:	20 20 20 20 20 20 20 00                                    .

0000202d <__c.4529>:
    202d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    203d:	20 20 20 20 00                                          .

00002042 <__c.4527>:
    2042:	4d 6f 68 6f 6e 20 54 75 6e 67 67 75 20 20 20 20     Mohon Tunggu    
    2052:	20 20 20 20 00                                          .

00002057 <__c.4525>:
    2057:	25 73 00                                            %s.

0000205a <__c.4523>:
    205a:	50 25 73 20 25 73 20 00                             P%s %s .

00002062 <__c.4520>:
    2062:	43 61 6e 63 65 6c 20 54 72 61 6e 73 61 63 74 69     Cancel Transacti
    2072:	6f 6e 20 20 00                                      on  .

00002077 <__c.4517>:
    2077:	5b 2a 5d 42 61 63 6b 20 5b 30 5d 45 53 43 20 5b     [*]Back [0]ESC [
    2087:	23 5d 4f 4b 00                                      #]OK.

0000208c <__c.4515>:
    208c:	25 73 20 00                                         %s .

00002090 <__c.4513>:
    2090:	20 46 75 6c 6c 00                                    Full.

00002096 <__c.4511>:
    2096:	25 73 20 20 25 73 20 00                             %s  %s .

0000209e <__c.4509>:
    209e:	49 44 3a 20 25 73 00                                ID: %s.

000020a5 <__c.4507>:
    20a5:	25 73 20 00                                         %s .

000020a9 <__c.4503>:
    20a9:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    20b9:	20 00                                                .

000020bb <__c.4501>:
    20bb:	4f 64 6f 6d 65 74 65 72 3a 5f 20 20 20 20 20 20     Odometer:_      
    20cb:	20 00                                                .

000020cd <__c.4499>:
    20cd:	25 73 20 00                                         %s .

000020d1 <__c.4497>:
    20d1:	20 20 25 73 20 25 73 20 00                            %s %s .

000020da <__c.4495>:
    20da:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 41 6d 6f     Pump Product Amo
    20ea:	75 6e 74 00                                         unt.

000020ee <__c.4493>:
    20ee:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 56 6f 6c     Pump Product Vol
    20fe:	75 6d 65 00                                         ume.

00002102 <__c.4491>:
    2102:	20 20 54 61 6e 6b 00                                  Tank.

00002109 <__c.4489>:
    2109:	20 20 25 73 20 25 73 20 00                            %s %s .

00002112 <__c.4487>:
    2112:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 20 20 46     Pump Product   F
    2122:	75 6c 6c 00                                         ull.

00002126 <__c.4483>:
    2126:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    2136:	20 20 20 20 00                                          .

0000213b <__c.4481>:
    213b:	5b 32 5d 41 6d 6f 75 6e 74 3a 5f 20 20 20 20 20     [2]Amount:_     
    214b:	20 20 20 20 00                                          .

00002150 <__c.4479>:
    2150:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2160:	20 20 20 20 00                                          .

00002165 <__c.4477>:
    2165:	50 25 73 2d 25 73 20 00                             P%s-%s .

0000216d <__c.4475>:
    216d:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    217d:	20 20 20 20 00                                          .

00002182 <__c.4473>:
    2182:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2192:	20 20 20 20 00                                          .

00002197 <__c.4471>:
    2197:	5b 31 5d 56 6f 6c 75 6d 65 3a 5f 20 20 20 20 20     [1]Volume:_     
    21a7:	20 20 20 20 00                                          .

000021ac <__c.4469>:
    21ac:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021b4 <__c.4466>:
    21b4:	41 00                                               A.

000021b6 <__c.4464>:
    21b6:	41 00                                               A.

000021b8 <__c.4462>:
    21b8:	56 00                                               V.

000021ba <__c.4459>:
    21ba:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 4e 65     [*]Back    [#]Ne
    21ca:	78 74 20 20 00                                      xt  .

000021cf <__c.4457>:
    21cf:	5b 32 5d 41 6d 6f 75 6e 74 20 20 20 20 20 20 20     [2]Amount       
    21df:	20 20 20 20 00                                          .

000021e4 <__c.4455>:
    21e4:	5b 31 5d 56 6f 6c 75 6d 65 20 20 20 20 20 20 20     [1]Volume       
    21f4:	20 20 20 20 00                                          .

000021f9 <__c.4453>:
    21f9:	50 25 73 2d 25 73 20 00                             P%s-%s .

00002201 <__c.4450>:
    2201:	25 73 00                                            %s.

00002204 <__c.4447>:
    2204:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    2214:	20 20 20 20 00                                          .

00002219 <__c.4442>:
    2219:	20 20 20 20 20 00                                        .

0000221f <__c.4440>:
    221f:	25 64 2e 25 73 00                                   %d.%s.

00002225 <__c.4438>:
    2225:	25 73 00                                            %s.

00002228 <__c.4436>:
    2228:	50 6f 6d 70 61 2d 25 73 00                          Pompa-%s.

00002231 <__c.4432>:
    2231:	25 2e 32 64 00                                      %.2d.

00002236 <__c.4430>:
    2236:	25 2e 32 64 00                                      %.2d.

0000223b <__c.4426>:
    223b:	5b 2a 5d 42 61 74 61 6c 20 20 20 20 20 20 20 5b     [*]Batal       [
    224b:	23 5d 4f 4b 00                                      #]OK.

00002250 <__c.4424>:
    2250:	25 73 20 25 73 00                                   %s %s.

00002256 <__c.4422>:
    2256:	25 73 00                                            %s.

00002259 <__c.4420>:
    2259:	25 73 00                                            %s.

0000225c <__c.4418>:
    225c:	25 73 00                                            %s.

0000225f <__c.4415>:
    225f:	4b 61 72 74 75 20 54 65 72 62 61 74 61 73 20 20     Kartu Terbatas  
    226f:	20 20 20 20 00                                          .

00002274 <__c.4413>:
    2274:	54 69 64 61 6b 20 54 65 72 64 61 66 74 61 72 20     Tidak Terdaftar 
    2284:	20 20 20 20 00                                          .

00002289 <__c.4410>:
    2289:	44 61 74 61 20 52 65 63 65 69 76 65 64 20 20 20     Data Received   
    2299:	20 20 20 20 00                                          .

0000229e <__c.4406>:
    229e:	54 43 50 2f 49 50 20 45 72 72 6f 72 20 20 20 20     TCP/IP Error    
    22ae:	20 20 20 20 00                                          .

000022b3 <__c.4404>:
    22b3:	53 65 6e 64 69 6e 67 20 46 61 69 6c 65 64 20 20     Sending Failed  
    22c3:	20 20 20 20 00                                          .

000022c8 <__c.4402>:
    22c8:	20 20 20 20 20 20 20 00                                    .

000022d0 <__c.4397>:
    22d0:	50 72 6f 73 65 73 00                                Proses.

000022d7 <__c.4395>:
    22d7:	49 44 3a 25 73 00                                   ID:%s.

000022dd <__c.4393>:
    22dd:	20 20 20 4c 6f 63 61 6c 20 41 63 63 6f 75 6e 74        Local Account
    22ed:	20 20 20 00                                            .

000022f1 <__c.4227>:
    22f1:	25 2e 32 64 00                                      %.2d.

000022f6 <__c.4179>:
    22f6:	46 39 36 38 43 46 46 42 00                          F968CFFB.

000022ff <__c.4177>:
    22ff:	25 73 00                                            %s.

00002302 <__c.4174>:
    2302:	25 73 25 73 25 73 00                                %s%s%s.

00002309 <__c.4172>:
    2309:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

00002312 <__c.4169>:
    2312:	25 73 25 73 00                                      %s%s.

00002317 <__c.4166>:
    2317:	25 73 00                                            %s.

0000231a <__c.4164>:
    231a:	46 30 30 30 30 30 30 30 45 31 32 33 34 35 36 46     F0000000E123456F
    232a:	46 46 46 46 00                                      FFFF.

0000232f <__c.4162>:
    232f:	25 73 25 73 25 64 00                                %s%s%d.

00002336 <__c.4160>:
    2336:	25 73 25 73 25 64 00                                %s%s%d.

0000233d <__c.4157>:
    233d:	25 73 00                                            %s.

00002340 <__c.4154>:
    2340:	25 73 25 73 00                                      %s%s.

00002345 <__c.4152>:
    2345:	25 73 25 73 00                                      %s%s.

0000234a <__c.4150>:
    234a:	25 73 25 73 00                                      %s%s.

0000234f <__c.4147>:
    234f:	25 73 25 73 00                                      %s%s.

00002354 <__c.4144>:
    2354:	25 73 25 73 00                                      %s%s.

00002359 <__c.4141>:
    2359:	25 73 00                                            %s.

0000235c <__c.4136>:
    235c:	25 73 31 00                                         %s1.

00002360 <__c.4133>:
    2360:	25 2e 32 58 00                                      %.2X.

00002365 <__c.4131>:
    2365:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2375:	2e 33 64 00                                         .3d.

00002379 <__c.4129>:
    2379:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2389:	2e 33 64 00                                         .3d.

0000238d <__c.4127>:
    238d:	25 2e 32 64 00                                      %.2d.

00002392 <__c.4125>:
    2392:	25 2e 32 64 00                                      %.2d.

00002397 <__c.4037>:
    2397:	25 73 20 25 73 00                                   %s %s.

0000239d <__c.4035>:
    239d:	33 2e 30 30 00                                      3.00.

000023a2 <__c.4033>:
    23a2:	47 65 4e 69 55 73 00                                GeNiUs.

000023a9 <__c.4019>:
    23a9:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 20     Press any key.. 
    23b9:	20 20 20 20 00                                          .

000023be <__c.4007>:
    23be:	5b 31 5d 53 6c 61 76 65 20 5b 32 5d 53 74 61 6e     [1]Slave [2]Stan
    23ce:	64 61 6c 6f 6e 65 00                                dalone.

000023d5 <__c.3927>:
    23d5:	3e 00                                               >.

000023d7 <__c.3922>:
    23d7:	25 2e 32 64 00                                      %.2d.

000023dc <__c.3920>:
    23dc:	25 2e 32 64 00                                      %.2d.

000023e1 <__c.3918>:
    23e1:	30 00                                               0.

000023e3 <__c.3916>:
    23e3:	31 00                                               1.

000023e5 <__c.3908>:
    23e5:	25 64 00                                            %d.

000023e8 <__c.3903>:
    23e8:	25 2e 32 64 00                                      %.2d.

000023ed <__c.3898>:
    23ed:	25 73 00                                            %s.

000023f0 <__c.3893>:
    23f0:	25 73 00                                            %s.

000023f3 <__c.3888>:
    23f3:	25 73 00                                            %s.

000023f6 <__c.3886>:
    23f6:	3c 00                                               <.

000023f8 <__c.3818>:
    23f8:	3c 4f 4b 3e 00                                      <OK>.

000023fd <__c.3813>:
    23fd:	25 64 00                                            %d.

00002400 <__c.3811>:
    2400:	25 64 00                                            %d.

00002403 <__c.3800>:
    2403:	25 64 00                                            %d.

00002406 <__c.3789>:
    2406:	3c 53 61 76 69 6e 67 3e 00                          <Saving>.

0000240f <__c.3787>:
    240f:	4c 65 6e 67 74 68 3a 25 64 00                       Length:%d.

00002419 <__c.3603>:
    2419:	25 73 00                                            %s.

0000241c <__c.3539>:
    241c:	31 30 00                                            10.

0000241f <__c.3537>:
    241f:	25 73 00                                            %s.

00002422 <__c.3535>:
    2422:	25 73 00                                            %s.

00002425 <__c.3533>:
    2425:	25 73 00                                            %s.

00002428 <__c.3531>:
    2428:	25 73 00                                            %s.

0000242b <__c.3529>:
    242b:	25 73 00                                            %s.

0000242e <__c.3527>:
    242e:	25 2e 32 64 00                                      %.2d.

00002433 <__c.3525>:
    2433:	25 64 00                                            %d.

00002436 <__c.3523>:
    2436:	25 73 00                                            %s.

00002439 <__c.3521>:
    2439:	25 73 00                                            %s.

0000243c <__c.3519>:
    243c:	25 73 00                                            %s.

0000243f <__c.3517>:
    243f:	25 64 00                                            %d.

00002442 <__c.3515>:
    2442:	4e 2f 41 00                                         N/A.

00002446 <__c.3409>:
    2446:	25 64 00                                            %d.

00002449 <__c.3407>:
    2449:	25 73 00                                            %s.

0000244c <__c.3405>:
    244c:	25 73 00                                            %s.

0000244f <__c.3322>:
    244f:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    245f:	6b 73 69 20 00                                      ksi .

00002464 <__c.3319>:
    2464:	54 6f 74 61 6c 69 7a 65 72 41 6c 6c 20 20 20 20     TotalizerAll    
    2474:	20 00                                                .

00002476 <__c.3316>:
    2476:	43 6c 65 61 72 20 44 61 74 61 20 54 6f 74 61 6c     Clear Data Total
    2486:	69 7a 65 72 00                                      izer.

0000248b <__c.3304>:
    248b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

0000249c <__c.3301>:
    249c:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24ac:	20 20 20 20 00                                          .

000024b1 <__c.3298>:
    24b1:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24c1:	20 20 20 20 00                                          .

000024c6 <__c.3296>:
    24c6:	4e 6f 20 52 65 73 70 6f 6e 73 65 2e 2e 20 20 20     No Response..   
    24d6:	20 20 20 20 00                                          .

000024db <__c.3293>:
    24db:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 20 20 20     Please Wait..   
    24eb:	20 20 20 20 00                                          .

000024f0 <__c.3290>:
    24f0:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    2500:	20 20 20 20 00                                          .

00002505 <__c.3287>:
    2505:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    2515:	6b 73 69 20 00                                      ksi .

0000251a <__c.3282>:
    251a:	53 65 64 61 6e 67 50 72 6f 73 65 73 00              SedangProses.

00002527 <__c.3279>:
    2527:	34 33 35 36 41 33 31 41 00                          4356A31A.

00002530 <__c.1762>:
    2530:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2540:	20 20 20 20 00                                          .

00002545 <__c.1760>:
    2545:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2555:	20 20 20 20 00                                          .

0000255a <__c.1758>:
    255a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    256a:	20 20 20 20 00                                          .

0000256f <__c.1756>:
    256f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    257f:	20 20 20 20 00                                          .

00002584 <__alphanum>:
    2584:	30 20 2e 00 00 00 31 2e 2c 3f 21 00 32 61 62 63     0 ....1.,?!.2abc
    2594:	00 00 33 64 65 66 00 00 34 67 68 69 00 00 35 6a     ..3def..4ghi..5j
    25a4:	6b 6c 00 00 36 6d 6e 6f 00 00 37 70 71 72 73 00     kl..6mno..7pqrs.
    25b4:	38 74 75 76 00 00 39 77 78 79 7a 00 30 20 2e 00     8tuv..9wxyz.0 ..
    25c4:	00 00 31 26 40 2b 2d 00 32 41 42 43 00 00 33 44     ..1&@+-.2ABC..3D
    25d4:	45 46 00 00 34 47 48 49 00 00 35 4a 4b 4c 00 00     EF..4GHI..5JKL..
    25e4:	36 4d 4e 4f 00 00 37 50 51 52 53 00 38 54 55 56     6MNO..7PQRS.8TUV
    25f4:	00 00 39 57 58 59 5a 00                             ..9WXYZ.

000025fc <__maxchar>:
    25fc:	02 04 03 03 03 03 03 04 03 04                       ..........

00002606 <__ctors_end>:
    2606:	11 24       	eor	r1, r1
    2608:	1f be       	out	0x3f, r1	; 63
    260a:	cf ef       	ldi	r28, 0xFF	; 255
    260c:	d0 e1       	ldi	r29, 0x10	; 16
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	cd bf       	out	0x3d, r28	; 61

00002612 <__do_copy_data>:
    2612:	11 e0       	ldi	r17, 0x01	; 1
    2614:	a0 e0       	ldi	r26, 0x00	; 0
    2616:	b1 e0       	ldi	r27, 0x01	; 1
    2618:	ec e0       	ldi	r30, 0x0C	; 12
    261a:	fe e5       	ldi	r31, 0x5E	; 94
    261c:	01 e0       	ldi	r16, 0x01	; 1
    261e:	0b bf       	out	0x3b, r16	; 59
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <__do_copy_data+0x14>
    2622:	07 90       	elpm	r0, Z+
    2624:	0d 92       	st	X+, r0
    2626:	ac 35       	cpi	r26, 0x5C	; 92
    2628:	b1 07       	cpc	r27, r17
    262a:	d9 f7       	brne	.-10     	; 0x2622 <__do_copy_data+0x10>

0000262c <__do_clear_bss>:
    262c:	1c e0       	ldi	r17, 0x0C	; 12
    262e:	ac e5       	ldi	r26, 0x5C	; 92
    2630:	b1 e0       	ldi	r27, 0x01	; 1
    2632:	01 c0       	rjmp	.+2      	; 0x2636 <.do_clear_bss_start>

00002634 <.do_clear_bss_loop>:
    2634:	1d 92       	st	X+, r1

00002636 <.do_clear_bss_start>:
    2636:	a9 3b       	cpi	r26, 0xB9	; 185
    2638:	b1 07       	cpc	r27, r17
    263a:	e1 f7       	brne	.-8      	; 0x2634 <.do_clear_bss_loop>
    263c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <main>
    2640:	0c 94 04 af 	jmp	0x15e08	; 0x15e08 <_exit>

00002644 <__bad_interrupt>:
    2644:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002648 <systemOnReset>:


void systemOnReset(){
     char SubMenu,KeyPressed,KeyChar,IsMasterReset=False;

     IsPowerOn=False;
    2648:	10 92 c0 02 	sts	0x02C0, r1
     if (MCUCSR & 1){   // Power-on Reset
    264c:	04 b6       	in	r0, 0x34	; 52
    264e:	00 fe       	sbrs	r0, 0
    2650:	30 c0       	rjmp	.+96     	; 0x26b2 <systemOnReset+0x6a>
         MCUCSR=0;lcd_printf(1,1,PSTR("PowerOn"));//Wiznet Blm Ready
    2652:	14 be       	out	0x34, r1	; 52
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	61 e0       	ldi	r22, 0x01	; 1
    2658:	48 ea       	ldi	r20, 0xA8	; 168
    265a:	52 e0       	ldi	r21, 0x02	; 2
    265c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 IsPowerOn=True;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	80 93 c0 02 	sts	0x02C0, r24
         //Master Reset Detection
		 PORTF = 0xFF; DDRF = 0xF0;
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	80 93 62 00 	sts	0x0062, r24
    266c:	80 ef       	ldi	r24, 0xF0	; 240
    266e:	80 93 61 00 	sts	0x0061, r24
		 KeyPressed=_key_scan(1);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		 KeyChar= _key_btn(KeyPressed);
    2678:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		 if (KeyChar=='5'){
    267c:	85 33       	cpi	r24, 0x35	; 53
    267e:	89 f5       	brne	.+98     	; 0x26e2 <systemOnReset+0x9a>
		     system_beep(2);
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <system_beep>
		     IsMasterReset=True;
			 TCCR1B |= (1 << WGM12);
    2688:	8e b5       	in	r24, 0x2e	; 46
    268a:	88 60       	ori	r24, 0x08	; 8
    268c:	8e bd       	out	0x2e, r24	; 46
			 TIMSK |= (1 << OCIE1A);
    268e:	87 b7       	in	r24, 0x37	; 55
    2690:	80 61       	ori	r24, 0x10	; 16
    2692:	87 bf       	out	0x37, r24	; 55
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2694:	78 94       	sei
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2696:	88 e0       	ldi	r24, 0x08	; 8
    2698:	9d e3       	ldi	r25, 0x3D	; 61
    269a:	9b bd       	out	0x2b, r25	; 43
    269c:	8a bd       	out	0x2a, r24	; 42
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
    269e:	8e b5       	in	r24, 0x2e	; 46
    26a0:	83 60       	ori	r24, 0x03	; 3
    26a2:	8e bd       	out	0x2e, r24	; 46
		     while(IsMasterReset==True){
			       SubMenu=FMenuMaster();
    26a4:	0e 94 1d 74 	call	0xe83a	; 0xe83a <FMenuMaster>
				   if (SubMenu==MENU_DONE){
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	e1 f7       	brne	.-8      	; 0x26a4 <systemOnReset+0x5c>
				       IsMasterReset=False;
					   lcd_clear();
    26ac:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    26b0:	18 c0       	rjmp	.+48     	; 0x26e2 <systemOnReset+0x9a>
				   }
			 }		 
		 }
         }
     else 
     if (MCUCSR & 2){   // External Reset
    26b2:	04 b6       	in	r0, 0x34	; 52
    26b4:	01 fe       	sbrs	r0, 1
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <systemOnReset+0x7c>
         MCUCSR=0;lcd_printf(1,1,PSTR("External"));
    26b8:	14 be       	out	0x34, r1	; 52
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	4f e9       	ldi	r20, 0x9F	; 159
    26c0:	52 e0       	ldi	r21, 0x02	; 2
    26c2:	0d c0       	rjmp	.+26     	; 0x26de <systemOnReset+0x96>
        }
     else 
     if (MCUCSR & 4){   // Brown-Out Reset
    26c4:	04 b6       	in	r0, 0x34	; 52
    26c6:	02 fe       	sbrs	r0, 2
    26c8:	06 c0       	rjmp	.+12     	; 0x26d6 <systemOnReset+0x8e>
         MCUCSR=0;lcd_printf(1,1,PSTR("BrownOut"));
    26ca:	14 be       	out	0x34, r1	; 52
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	46 e9       	ldi	r20, 0x96	; 150
    26d2:	52 e0       	ldi	r21, 0x02	; 2
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <systemOnReset+0x96>
         }
     else		  // Watchdog Reset
        {
         lcd_printf(1,1,PSTR("WatchDog"));
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	61 e0       	ldi	r22, 0x01	; 1
    26da:	4d e8       	ldi	r20, 0x8D	; 141
    26dc:	52 e0       	ldi	r21, 0x02	; 2
    26de:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
        };
     MCUCSR=0;		  
    26e2:	14 be       	out	0x34, r1	; 52
    26e4:	80 ee       	ldi	r24, 0xE0	; 224
    26e6:	9e e2       	ldi	r25, 0x2E	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26e8:	20 e7       	ldi	r18, 0x70	; 112
    26ea:	31 e0       	ldi	r19, 0x01	; 1
    26ec:	f9 01       	movw	r30, r18
    26ee:	31 97       	sbiw	r30, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <systemOnReset+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f4:	d9 f7       	brne	.-10     	; 0x26ec <systemOnReset+0xa4>
	 _delay_ms(1200);
}
    26f6:	08 95       	ret

000026f8 <SystemInit>:


void SystemInit(){
	unsigned int __delay =300;
	lcd_init();
    26f8:	0e 94 42 a5 	call	0x14a84	; 0x14a84 <lcd_init>
	lcd_clear();
    26fc:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	BackLightTrig();
    2700:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <BackLightTrig>
	systemOnReset();
    2704:	0e 94 24 13 	call	0x2648	; 0x2648 <systemOnReset>

	lcd_printf(4, 1, PSTR("Initialize... "));
    2708:	84 e0       	ldi	r24, 0x04	; 4
    270a:	61 e0       	ldi	r22, 0x01	; 1
    270c:	4e e7       	ldi	r20, 0x7E	; 126
    270e:	52 e0       	ldi	r21, 0x02	; 2
    2710:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    2714:	88 eb       	ldi	r24, 0xB8	; 184
    2716:	9b e0       	ldi	r25, 0x0B	; 11
    2718:	20 e7       	ldi	r18, 0x70	; 112
    271a:	31 e0       	ldi	r19, 0x01	; 1
    271c:	f9 01       	movw	r30, r18
    271e:	31 97       	sbiw	r30, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <SystemInit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	d9 f7       	brne	.-10     	; 0x271c <SystemInit+0x24>
	_delay_ms(__delay);
	PORTA = 0XFF;		// Buffer for PORTA
    2726:	9f ef       	ldi	r25, 0xFF	; 255
    2728:	9b bb       	out	0x1b, r25	; 27
	DDRA = 0xFF;		// Pin 3 out (SS _SPI_SLAVE)
    272a:	9a bb       	out	0x1a, r25	; 26
	sbi(PORTA, 3);		// Disable SS _SPI_SLAVE
    272c:	db 9a       	sbi	0x1b, 3	; 27

	//Buzzer PORTB.5
	PORTB = 0xFF;DDRB = 0xFF;
    272e:	98 bb       	out	0x18, r25	; 24
    2730:	97 bb       	out	0x17, r25	; 23
	PORTD = 0b00001101;
    2732:	8d e0       	ldi	r24, 0x0D	; 13
    2734:	82 bb       	out	0x12, r24	; 18
    DDRD =  0b00001001;
    2736:	89 e0       	ldi	r24, 0x09	; 9
    2738:	81 bb       	out	0x11, r24	; 17

	TWBR = 0xFF;
    273a:	90 93 70 00 	sts	0x0070, r25
    //MMC
	PORTE = 0x0E;		// Buffer for PORTE
    273e:	8e e0       	ldi	r24, 0x0E	; 14
    2740:	83 b9       	out	0x03, r24	; 3
	DDRE = 0x0E;		// Pin 3 out (SS _SPI_MMC), pin 2 out (HB)
    2742:	82 b9       	out	0x02, r24	; 2
	sbi(PORTE, 3);		// Disable SS _SPI_MMC
    2744:	1b 9a       	sbi	0x03, 3	; 3
	cbi(PORTE, 2);		// HB on
    2746:	1a 98       	cbi	0x03, 2	; 3

	//Keypad
	PORTF = 0xFF;		// Buffer for PORTF
    2748:	90 93 62 00 	sts	0x0062, r25
	DDRF = 0xF0;		// 4 bit row, 4 bit column
    274c:	80 ef       	ldi	r24, 0xF0	; 240
    274e:	80 93 61 00 	sts	0x0061, r24

  	_spi_init(0,1);//Slave
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	0e 94 dc a7 	call	0x14fb8	; 0x14fb8 <_spi_init>
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    275a:	bb 9a       	sbi	0x17, 3	; 23
    275c:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    275e:	ba 98       	cbi	0x17, 2	; 23
    2760:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    2762:	b9 98       	cbi	0x17, 1	; 23
    2764:	c1 9a       	sbi	0x18, 1	; 24

	TCCR1B |= (1 << WGM12);
    2766:	8e b5       	in	r24, 0x2e	; 46
    2768:	88 60       	ori	r24, 0x08	; 8
    276a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
    276c:	87 b7       	in	r24, 0x37	; 55
    276e:	80 61       	ori	r24, 0x10	; 16
    2770:	87 bf       	out	0x37, r24	; 55
	sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2772:	78 94       	sei
	OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2774:	88 e0       	ldi	r24, 0x08	; 8
    2776:	9d e3       	ldi	r25, 0x3D	; 61
    2778:	9b bd       	out	0x2b, r25	; 43
    277a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11));
    277c:	8e b5       	in	r24, 0x2e	; 46
    277e:	83 60       	ori	r24, 0x03	; 3
    2780:	8e bd       	out	0x2e, r24	; 46

	SendSlaveCommand(SC_SLAVE,ST_NONE);
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
	
	InitComport();
    278a:	0e 94 45 7a 	call	0xf48a	; 0xf48a <InitComport>
	_LIGHT_SET;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	80 93 b3 02 	sts	0x02B3, r24
    2794:	10 92 b4 02 	sts	0x02B4, r1
    2798:	80 91 65 00 	lds	r24, 0x0065
    279c:	8d 7f       	andi	r24, 0xFD	; 253
    279e:	80 93 65 00 	sts	0x0065, r24
	InitPrinter();
    27a2:	0e 94 b5 45 	call	0x8b6a	; 0x8b6a <InitPrinter>
    InitializeConnection();
    27a6:	0e 94 1c 92 	call	0x12438	; 0x12438 <InitializeConnection>
	lcd_clear();
    27aa:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
}
    27ae:	08 95       	ret

000027b0 <main>:

//Master4 =1+20++2+1
void SystemInit();
//Program Utama
int main(){
	SystemInit();
    27b0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <SystemInit>
	while(1){
	//FTestChar();
	//TestUserInput();
    FMenuIdle();
    27b4:	0e 94 0b a3 	call	0x14616	; 0x14616 <FMenuIdle>
    27b8:	fd cf       	rjmp	.-6      	; 0x27b4 <main+0x4>

000027ba <__vector_12>:
	  strDispenserName3,
	  strDispenserName4,
	  strDispenserName5,
};

ISR(TIMER1_COMPA_vect){//Timer Overflow 1ms
    27ba:	1f 92       	push	r1
    27bc:	0f 92       	push	r0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	0f 92       	push	r0
    27c2:	11 24       	eor	r1, r1
    27c4:	2f 93       	push	r18
    27c6:	6f 93       	push	r22
    27c8:	7f 93       	push	r23
    27ca:	8f 93       	push	r24
    27cc:	9f 93       	push	r25
	if(__key_light == 1){
    27ce:	80 91 b3 02 	lds	r24, 0x02B3
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	81 f4       	brne	.+32     	; 0x27f6 <__vector_12+0x3c>
		__key_lgtcnt++;
    27d6:	80 91 b4 02 	lds	r24, 0x02B4
    27da:	8f 5f       	subi	r24, 0xFF	; 255
    27dc:	80 93 b4 02 	sts	0x02B4, r24
		if(__key_lgtcnt == 150){
    27e0:	86 39       	cpi	r24, 0x96	; 150
    27e2:	49 f4       	brne	.+18     	; 0x27f6 <__vector_12+0x3c>
		   __key_light = 0; 
    27e4:	10 92 b3 02 	sts	0x02B3, r1
		   __key_lgtcnt = 0; 
    27e8:	10 92 b4 02 	sts	0x02B4, r1
		   sbi(PORTG, 1);
    27ec:	80 91 65 00 	lds	r24, 0x0065
    27f0:	82 60       	ori	r24, 0x02	; 2
    27f2:	80 93 65 00 	sts	0x0065, r24
		   }
	}

	//Beep
	if (TimBeep>0){
    27f6:	80 91 be 01 	lds	r24, 0x01BE
    27fa:	88 23       	and	r24, r24
    27fc:	31 f0       	breq	.+12     	; 0x280a <__vector_12+0x50>
	    TimBeep--;
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	80 93 be 01 	sts	0x01BE, r24
		DDRB=(DDRB|0b00100000);
    2804:	bd 9a       	sbi	0x17, 5	; 23
	    PORTB=(PORTB&0b11011111);
    2806:	c5 98       	cbi	0x18, 5	; 24
    2808:	05 c0       	rjmp	.+10     	; 0x2814 <__vector_12+0x5a>
	    }
	else{PORTB=(PORTB|~PORTB);
    280a:	98 b3       	in	r25, 0x18	; 24
    280c:	88 b3       	in	r24, 0x18	; 24
    280e:	80 95       	com	r24
    2810:	89 2b       	or	r24, r25
    2812:	88 bb       	out	0x18, r24	; 24
		}
    //LocalAccount
	TimLocAcc++;
    2814:	80 91 bc 01 	lds	r24, 0x01BC
    2818:	8f 5f       	subi	r24, 0xFF	; 255
    281a:	80 93 bc 01 	sts	0x01BC, r24
	//DisplaTicker
    
	TimPressed++;
    281e:	20 91 92 01 	lds	r18, 0x0192
    2822:	2f 5f       	subi	r18, 0xFF	; 255
    2824:	20 93 92 01 	sts	0x0192, r18
	if ((TimPressed%5)==0){
    2828:	82 2f       	mov	r24, r18
    282a:	65 e0       	ldi	r22, 0x05	; 5
    282c:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2830:	99 23       	and	r25, r25
    2832:	71 f4       	brne	.+28     	; 0x2850 <__vector_12+0x96>
	    PORTE = PORTE^0x04;
    2834:	83 b1       	in	r24, 0x03	; 3
    2836:	94 e0       	ldi	r25, 0x04	; 4
    2838:	89 27       	eor	r24, r25
    283a:	83 b9       	out	0x03, r24	; 3
	    TimDisplay++;
    283c:	80 91 93 01 	lds	r24, 0x0193
    2840:	8f 5f       	subi	r24, 0xFF	; 255
    2842:	80 93 93 01 	sts	0x0193, r24
		TimPrintBusy++;
    2846:	80 91 b8 01 	lds	r24, 0x01B8
    284a:	8f 5f       	subi	r24, 0xFF	; 255
    284c:	80 93 b8 01 	sts	0x01B8, r24
		
	}
	TimTicker++;
    2850:	80 91 91 01 	lds	r24, 0x0191
    2854:	8f 5f       	subi	r24, 0xFF	; 255
    2856:	80 93 91 01 	sts	0x0191, r24
	if ((TimTicker%10)==0){
    285a:	6a e0       	ldi	r22, 0x0A	; 10
    285c:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2860:	99 23       	and	r25, r25
    2862:	29 f4       	brne	.+10     	; 0x286e <__vector_12+0xb4>
         TimLocalAccount++;		
    2864:	80 91 94 01 	lds	r24, 0x0194
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	80 93 94 01 	sts	0x0194, r24
	}
	
	if ((TimPressed%PRESSED_DELAY)==0){
    286e:	82 2f       	mov	r24, r18
    2870:	6a e0       	ldi	r22, 0x0A	; 10
    2872:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2876:	99 23       	and	r25, r25
    2878:	29 f4       	brne	.+10     	; 0x2884 <__vector_12+0xca>
	     ProcTimeOut++;
    287a:	80 91 bd 01 	lds	r24, 0x01BD
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	80 93 bd 01 	sts	0x01BD, r24
	}
	TimSend++;
    2884:	80 91 7e 0c 	lds	r24, 0x0C7E
    2888:	8f 5f       	subi	r24, 0xFF	; 255
    288a:	80 93 7e 0c 	sts	0x0C7E, r24
}
    288e:	9f 91       	pop	r25
    2890:	8f 91       	pop	r24
    2892:	7f 91       	pop	r23
    2894:	6f 91       	pop	r22
    2896:	2f 91       	pop	r18
    2898:	0f 90       	pop	r0
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	0f 90       	pop	r0
    289e:	1f 90       	pop	r1
    28a0:	18 95       	reti

000028a2 <RePrintStandalone>:

char RePrintStandalone(char FIPAddr){
     char Result=PS_NONE;

   return Result;
}
    28a2:	86 e1       	ldi	r24, 0x16	; 22
    28a4:	08 95       	ret

000028a6 <PrintUpdatePrintedTransNum>:

	 for(i=0;i<strlen(Length);i++){
         RecPumpData[FIP].zstrTransNum[i]=RecPumpData[FIP].strTransNum[i];
	 }RecPumpData[FIP].zstrTransNum[Length]=0;
*/
}
    28a6:	08 95       	ret

000028a8 <GetPumpStatusLabel>:


char GetPumpStatusLabel(char xPumpStatus){
     char Result;

	 switch(xPumpStatus){
    28a8:	e8 2f       	mov	r30, r24
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	ee 31       	cpi	r30, 0x1E	; 30
    28ae:	f1 05       	cpc	r31, r1
    28b0:	70 f5       	brcc	.+92     	; 0x290e <GetPumpStatusLabel+0x66>
    28b2:	ea 5b       	subi	r30, 0xBA	; 186
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	05 90       	lpm	r0, Z+
    28bc:	f4 91       	lpm	r31, Z+
    28be:	e0 2d       	mov	r30, r0
    28c0:	09 94       	ijmp
    28c2:	81 e3       	ldi	r24, 0x31	; 49
    28c4:	08 95       	ret
    28c6:	85 e4       	ldi	r24, 0x45	; 69
    28c8:	08 95       	ret
    28ca:	82 e3       	ldi	r24, 0x32	; 50
    28cc:	08 95       	ret
	 case PUMP_ST1: 
	      Result='1';
		  break;
	 case PUMP_ST2: 
	 	  Result='2';
		  break;
    28ce:	83 e3       	ldi	r24, 0x33	; 51
    28d0:	08 95       	ret
     case PUMP_ST3:
	 	  Result='3';
		  break;	
    28d2:	84 e3       	ldi	r24, 0x34	; 52
    28d4:	08 95       	ret
	 case PUMP_ST4: 
          Result='4';
		  break;
    28d6:	85 e3       	ldi	r24, 0x35	; 53
    28d8:	08 95       	ret
	 case PUMP_ST5: 
	 	  Result='5';
		  break;
    28da:	89 e6       	ldi	r24, 0x69	; 105
    28dc:	08 95       	ret
	 case PUMP_OFF: 
	 case PW_ONLINE:
	 	  Result='i';
		  break;
    28de:	8e e6       	ldi	r24, 0x6E	; 110
    28e0:	08 95       	ret
     case PW_CALL:
	 case PUMP_CALL: 
	 	  Result='n';
		  break;     
    28e2:	81 e6       	ldi	r24, 0x61	; 97
    28e4:	08 95       	ret
	 case PUMP_AUTH: 
	 	  Result='a';
		  break;
    28e6:	84 e6       	ldi	r24, 0x64	; 100
    28e8:	08 95       	ret
     case PW_AUTHORIZED:
	 case PUMP_BUSY: 
	 	  Result='d';
		  break;
    28ea:	8f e4       	ldi	r24, 0x4F	; 79
    28ec:	08 95       	ret
	 case PUMP_PEOT: 
	 	  Result='O';
		  break;
    28ee:	86 e4       	ldi	r24, 0x46	; 70
    28f0:	08 95       	ret
     case PW_END_DELIVERY:
	 case PUMP_FEOT: 
	 	  Result='F';
		  break;
    28f2:	83 e5       	ldi	r24, 0x53	; 83
    28f4:	08 95       	ret
	 case PUMP_STOP: 
	 	  Result='S';
		  break;
    28f6:	8d e2       	ldi	r24, 0x2D	; 45
    28f8:	08 95       	ret
	 case PUMP_NONE:
	 case PW_DISCONNECT:
	 	  Result='-';
		  break;
    28fa:	80 e5       	ldi	r24, 0x50	; 80
    28fc:	08 95       	ret
     case PS_PRINT_READY:
	      Result='P';
 	      break;
    28fe:	89 e4       	ldi	r24, 0x49	; 73
    2900:	08 95       	ret
     case PS_PRINTED:
	      Result='I';
 	      break;
    2902:	86 e5       	ldi	r24, 0x56	; 86
    2904:	08 95       	ret
     case PS_VOID:
	      Result='V';
	      break;
    2906:	84 e5       	ldi	r24, 0x54	; 84
    2908:	08 95       	ret
     case PS_TOTALIZER:
	      Result='T';
	      break;
    290a:	84 e7       	ldi	r24, 0x74	; 116
    290c:	08 95       	ret
     case PS_FINISH_TOTALIZER:
	      Result='t';
	      break;
    290e:	88 e7       	ldi	r24, 0x78	; 120
	 default:
          Result='x';
		  break;         	 
	 }
  return Result;	 
}
    2910:	08 95       	ret

00002912 <SendPoolingCommand>:
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    2912:	80 93 ad 05 	sts	0x05AD, r24
	 PoolMsg=plMsg;
    2916:	60 93 d9 0b 	sts	0x0BD9, r22
     IsControlPooling=True;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	80 93 84 01 	sts	0x0184, r24
}
    2920:	08 95       	ret

00002922 <ScanEDCFlow>:
	 RemZeroLead(strMsgID);
	 Result=atoi(strMsgID);
  return Result;
}

void ScanEDCFlow(char data){
    2922:	28 2f       	mov	r18, r24


	 //uart(0,1,data);

     //EDC-MSG
     if (data==0x02){
    2924:	82 30       	cpi	r24, 0x02	; 2
    2926:	39 f4       	brne	.+14     	; 0x2936 <ScanEDCFlow+0x14>
	     IsEDCFlow=True;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	80 93 a8 02 	sts	0x02A8, r24
		 nFlow=0;
    292e:	10 92 a7 02 	sts	0x02A7, r1
    2932:	10 92 a6 02 	sts	0x02A6, r1
	 }//FillMessage
     if (IsEDCFlow==True){
    2936:	80 91 a8 02 	lds	r24, 0x02A8
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	69 f4       	brne	.+26     	; 0x2958 <ScanEDCFlow+0x36>
	     rcv_trans[nFlow]=data;
    293e:	80 91 a6 02 	lds	r24, 0x02A6
    2942:	90 91 a7 02 	lds	r25, 0x02A7
    2946:	fc 01       	movw	r30, r24
    2948:	ed 5d       	subi	r30, 0xDD	; 221
    294a:	f6 4f       	sbci	r31, 0xF6	; 246
    294c:	20 83       	st	Z, r18
		 nFlow++;
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	90 93 a7 02 	sts	0x02A7, r25
    2954:	80 93 a6 02 	sts	0x02A6, r24
	 }//CloseMessage
	 if ((data==0x03)||(nFlow>=MSG03_LENGTH)){
    2958:	23 30       	cpi	r18, 0x03	; 3
    295a:	41 f0       	breq	.+16     	; 0x296c <ScanEDCFlow+0x4a>
    295c:	80 91 a6 02 	lds	r24, 0x02A6
    2960:	90 91 a7 02 	lds	r25, 0x02A7
    2964:	8d 34       	cpi	r24, 0x4D	; 77
    2966:	91 05       	cpc	r25, r1
    2968:	08 f4       	brcc	.+2      	; 0x296c <ScanEDCFlow+0x4a>
    296a:	99 c0       	rjmp	.+306    	; 0x2a9e <ScanEDCFlow+0x17c>
	     //for(i=0;i<nFlow;i++){uart(0,1,rcv_trans[i]);}
	     IsEDCFlow=False;
    296c:	10 92 a8 02 	sts	0x02A8, r1
		 EDCMsgCode=((rcv_trans[1]-'0')*10)+(rcv_trans[2]-'0');
    2970:	30 91 25 09 	lds	r19, 0x0925
    2974:	30 51       	subi	r19, 0x10	; 16
    2976:	80 91 24 09 	lds	r24, 0x0924
    297a:	2a e0       	ldi	r18, 0x0A	; 10
    297c:	82 9f       	mul	r24, r18
    297e:	c0 01       	movw	r24, r0
    2980:	11 24       	eor	r1, r1
    2982:	38 0f       	add	r19, r24

		 if (EDCMsgCode==0x03){
    2984:	33 30       	cpi	r19, 0x03	; 3
    2986:	09 f0       	breq	.+2      	; 0x298a <ScanEDCFlow+0x68>
    2988:	65 c0       	rjmp	.+202    	; 0x2a54 <ScanEDCFlow+0x132>
    298a:	e6 e2       	ldi	r30, 0x26	; 38
    298c:	f9 e0       	ldi	r31, 0x09	; 9
    298e:	ad e8       	ldi	r26, 0x8D	; 141
    2990:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2992:	81 91       	ld	r24, Z+
    2994:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2996:	89 e0       	ldi	r24, 0x09	; 9
    2998:	ec 32       	cpi	r30, 0x2C	; 44
    299a:	f8 07       	cpc	r31, r24
    299c:	d1 f7       	brne	.-12     	; 0x2992 <ScanEDCFlow+0x70>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    299e:	10 92 93 0c 	sts	0x0C93, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29a2:	80 81       	ld	r24, Z
    29a4:	80 93 bf 07 	sts	0x07BF, r24
    29a8:	81 81       	ldd	r24, Z+1	; 0x01
    29aa:	80 93 c0 07 	sts	0x07C0, r24
	 }Dest[Length]=0;
    29ae:	10 92 c1 07 	sts	0x07C1, r1
    29b2:	32 96       	adiw	r30, 0x02	; 2
    29b4:	a9 ea       	ldi	r26, 0xA9	; 169
    29b6:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29b8:	81 91       	ld	r24, Z+
    29ba:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29bc:	89 e0       	ldi	r24, 0x09	; 9
    29be:	ed 33       	cpi	r30, 0x3D	; 61
    29c0:	f8 07       	cpc	r31, r24
    29c2:	d1 f7       	brne	.-12     	; 0x29b8 <ScanEDCFlow+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29c4:	10 92 b8 0c 	sts	0x0CB8, r1
    29c8:	af e8       	ldi	r26, 0x8F	; 143
    29ca:	bb e0       	ldi	r27, 0x0B	; 11
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29cc:	81 91       	ld	r24, Z+
    29ce:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29d0:	89 e0       	ldi	r24, 0x09	; 9
    29d2:	e0 35       	cpi	r30, 0x50	; 80
    29d4:	f8 07       	cpc	r31, r24
    29d6:	d1 f7       	brne	.-12     	; 0x29cc <ScanEDCFlow+0xaa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29d8:	10 92 a2 0b 	sts	0x0BA2, r1
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29e0:	f9 01       	movw	r30, r18
    29e2:	ea 50       	subi	r30, 0x0A	; 10
    29e4:	f8 4f       	sbci	r31, 0xF8	; 248
    29e6:	d9 01       	movw	r26, r18
    29e8:	ad 5d       	subi	r26, 0xDD	; 221
    29ea:	b6 4f       	sbci	r27, 0xF6	; 246
    29ec:	9d 96       	adiw	r26, 0x2d	; 45
    29ee:	8c 91       	ld	r24, X
    29f0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29f2:	2f 5f       	subi	r18, 0xFF	; 255
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	26 30       	cpi	r18, 0x06	; 6
    29f8:	31 05       	cpc	r19, r1
    29fa:	91 f7       	brne	.-28     	; 0x29e0 <ScanEDCFlow+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29fc:	10 92 fc 07 	sts	0x07FC, r1
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a04:	f9 01       	movw	r30, r18
    2a06:	e7 5a       	subi	r30, 0xA7	; 167
    2a08:	f8 4f       	sbci	r31, 0xF8	; 248
    2a0a:	d9 01       	movw	r26, r18
    2a0c:	ad 5d       	subi	r26, 0xDD	; 221
    2a0e:	b6 4f       	sbci	r27, 0xF6	; 246
    2a10:	d3 96       	adiw	r26, 0x33	; 51
    2a12:	8c 91       	ld	r24, X
    2a14:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a16:	2f 5f       	subi	r18, 0xFF	; 255
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	2a 30       	cpi	r18, 0x0A	; 10
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	91 f7       	brne	.-28     	; 0x2a04 <ScanEDCFlow+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a20:	10 92 63 07 	sts	0x0763, r1
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a28:	f9 01       	movw	r30, r18
    2a2a:	eb 53       	subi	r30, 0x3B	; 59
    2a2c:	f4 4f       	sbci	r31, 0xF4	; 244
    2a2e:	d9 01       	movw	r26, r18
    2a30:	ad 5d       	subi	r26, 0xDD	; 221
    2a32:	b6 4f       	sbci	r27, 0xF6	; 246
    2a34:	dd 96       	adiw	r26, 0x3d	; 61
    2a36:	8c 91       	ld	r24, X
    2a38:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a3a:	2f 5f       	subi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	2e 30       	cpi	r18, 0x0E	; 14
    2a40:	31 05       	cpc	r19, r1
    2a42:	91 f7       	brne	.-28     	; 0x2a28 <ScanEDCFlow+0x106>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a44:	10 92 d3 0b 	sts	0x0BD3, r1
             StrPosCopy(rcv_trans,strCardType,11,15);
             StrPosCopy(rcv_trans,strCardID,26,19);
             StrPosCopy(rcv_trans,strApprovalCode,45,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,51,10);
             StrPosCopy(rcv_trans,strDateTime,61,14);
		     IsEDCApproved=True;//Sending Message 92
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	80 93 9b 01 	sts	0x019B, r24
			 IsPrintApprovalCode=True;
    2a4e:	80 93 9c 01 	sts	0x019C, r24
    2a52:	08 95       	ret
	    }else
		 if (EDCMsgCode==0x04){
    2a54:	34 30       	cpi	r19, 0x04	; 4
    2a56:	19 f5       	brne	.+70     	; 0x2a9e <ScanEDCFlow+0x17c>
    2a58:	e6 e2       	ldi	r30, 0x26	; 38
    2a5a:	f9 e0       	ldi	r31, 0x09	; 9
    2a5c:	a6 ef       	ldi	r26, 0xF6	; 246
    2a5e:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a60:	81 91       	ld	r24, Z+
    2a62:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a64:	89 e0       	ldi	r24, 0x09	; 9
    2a66:	ec 32       	cpi	r30, 0x2C	; 44
    2a68:	f8 07       	cpc	r31, r24
    2a6a:	d1 f7       	brne	.-12     	; 0x2a60 <ScanEDCFlow+0x13e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a6c:	10 92 fc 07 	sts	0x07FC, r1
    2a70:	a9 e5       	ldi	r26, 0x59	; 89
    2a72:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a74:	81 91       	ld	r24, Z+
    2a76:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a78:	89 e0       	ldi	r24, 0x09	; 9
    2a7a:	e6 33       	cpi	r30, 0x36	; 54
    2a7c:	f8 07       	cpc	r31, r24
    2a7e:	d1 f7       	brne	.-12     	; 0x2a74 <ScanEDCFlow+0x152>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a80:	10 92 63 07 	sts	0x0763, r1
    2a84:	a5 ec       	ldi	r26, 0xC5	; 197
    2a86:	bb e0       	ldi	r27, 0x0B	; 11
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a88:	81 91       	ld	r24, Z+
    2a8a:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a8c:	89 e0       	ldi	r24, 0x09	; 9
    2a8e:	e4 34       	cpi	r30, 0x44	; 68
    2a90:	f8 07       	cpc	r31, r24
    2a92:	d1 f7       	brne	.-12     	; 0x2a88 <ScanEDCFlow+0x166>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a94:	10 92 d3 0b 	sts	0x0BD3, r1
	    }else
		 if (EDCMsgCode==0x04){
             StrPosCopy(rcv_trans,strApprovalCode,3,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,9,10);
             StrPosCopy(rcv_trans,strDateTime,19,14);
			 IsVoidTransaction=True;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 93 9d 01 	sts	0x019D, r24
    2a9e:	08 95       	ret

00002aa0 <ScanHiddenKeyFlow>:
	    }
    }//MSGDetection
}

void ScanHiddenKeyFlow(char KeyIn){
}
    2aa0:	08 95       	ret

00002aa2 <ScanRFIDFlow>:


void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
    2aa2:	98 2f       	mov	r25, r24
    2aa4:	e5 e7       	ldi	r30, 0x75	; 117
    2aa6:	f8 e0       	ldi	r31, 0x08	; 8
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
        strSerialFlow[19-i]=strSerialFlow[18-i];   
    2aa8:	80 81       	ld	r24, Z
    2aaa:	81 83       	std	Z+1, r24	; 0x01
    2aac:	31 97       	sbiw	r30, 0x01	; 1

void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
    2aae:	88 e0       	ldi	r24, 0x08	; 8
    2ab0:	e2 36       	cpi	r30, 0x62	; 98
    2ab2:	f8 07       	cpc	r31, r24
    2ab4:	c9 f7       	brne	.-14     	; 0x2aa8 <ScanRFIDFlow+0x6>
        strSerialFlow[19-i]=strSerialFlow[18-i];   
	 }  strSerialFlow[0]=data;
    2ab6:	9f 01       	movw	r18, r30
    2ab8:	2f 5f       	subi	r18, 0xFF	; 255
    2aba:	3f 4f       	sbci	r19, 0xFF	; 255
    2abc:	91 83       	std	Z+1, r25	; 0x01
	 //Detection
	 if ((strSerialFlow[11]==0x02)&&(strSerialFlow[1]==0x0A)&&(strSerialFlow[0]==0x03)){
    2abe:	84 85       	ldd	r24, Z+12	; 0x0c
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	f9 f4       	brne	.+62     	; 0x2b02 <ScanRFIDFlow+0x60>
    2ac4:	80 91 64 08 	lds	r24, 0x0864
    2ac8:	8a 30       	cpi	r24, 0x0A	; 10
    2aca:	d9 f4       	brne	.+54     	; 0x2b02 <ScanRFIDFlow+0x60>
    2acc:	93 30       	cpi	r25, 0x03	; 3
    2ace:	c9 f4       	brne	.+50     	; 0x2b02 <ScanRFIDFlow+0x60>
    2ad0:	f9 01       	movw	r30, r18
    2ad2:	3a 96       	adiw	r30, 0x0a	; 10
    2ad4:	a7 e5       	ldi	r26, 0x57	; 87
    2ad6:	bc e0       	ldi	r27, 0x0C	; 12
		for(i=0;i<8;i++) strRFID[i]=strSerialFlow[10-i];
    2ad8:	80 81       	ld	r24, Z
    2ada:	8d 93       	st	X+, r24
    2adc:	31 97       	sbiw	r30, 0x01	; 1
    2ade:	88 e0       	ldi	r24, 0x08	; 8
    2ae0:	e5 36       	cpi	r30, 0x65	; 101
    2ae2:	f8 07       	cpc	r31, r24
    2ae4:	c9 f7       	brne	.-14     	; 0x2ad8 <ScanRFIDFlow+0x36>
        strRFID[8]=0;
    2ae6:	10 92 5f 0c 	sts	0x0C5F, r1
	    IsRFIDDetected=True;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	80 93 9a 01 	sts	0x019A, r24
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2af0:	80 93 b3 02 	sts	0x02B3, r24
	 __key_lgtcnt = 0; 
    2af4:	10 92 b4 02 	sts	0x02B4, r1
	 PORTG=PORTG&0b11111101;
    2af8:	80 91 65 00 	lds	r24, 0x0065
    2afc:	8d 7f       	andi	r24, 0xFD	; 253
    2afe:	80 93 65 00 	sts	0x0065, r24
    2b02:	08 95       	ret

00002b04 <__vector_18>:
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
}

ISR(USART0_RX_vect){
    2b04:	1f 92       	push	r1
    2b06:	0f 92       	push	r0
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	0f 92       	push	r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	8f 93       	push	r24
    2b10:	9f 93       	push	r25
	char dataRX0,IsSPI=False;
	dataRX0= UDR0;
    2b12:	9c b1       	in	r25, 0x0c	; 12
	//PrintBusyDetection
	if ((IsBusyIdlePrinting==True)||(IsBusyFreePrinting==True)){
    2b14:	80 91 b4 01 	lds	r24, 0x01B4
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	21 f0       	breq	.+8      	; 0x2b24 <__vector_18+0x20>
    2b1c:	80 91 b6 01 	lds	r24, 0x01B6
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	51 f4       	brne	.+20     	; 0x2b38 <__vector_18+0x34>
	    if (dataRX0==19)IsBusyPrint=True;
    2b24:	93 31       	cpi	r25, 0x13	; 19
    2b26:	21 f4       	brne	.+8      	; 0x2b30 <__vector_18+0x2c>
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	80 93 b5 01 	sts	0x01B5, r24
    2b2e:	04 c0       	rjmp	.+8      	; 0x2b38 <__vector_18+0x34>
		else 
	    if (dataRX0==17)IsBusyPrint=False;	
    2b30:	91 31       	cpi	r25, 0x11	; 17
    2b32:	11 f4       	brne	.+4      	; 0x2b38 <__vector_18+0x34>
    2b34:	10 92 b5 01 	sts	0x01B5, r1
	}
}
    2b38:	9f 91       	pop	r25
    2b3a:	8f 91       	pop	r24
    2b3c:	0f 90       	pop	r0
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	0f 90       	pop	r0
    2b42:	1f 90       	pop	r1
    2b44:	18 95       	reti

00002b46 <ScanCommand>:

char ScanCommand(char *strFlow,char *fCommand){
     char Result;
	 Result=False;
   return Result;
}
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	08 95       	ret

00002b4a <ConfigProtocol>:
	 }
	 uart_printf(1,1,PSTR(">"));
	 //End
}

void ConfigProtocol(char dataIn){
    2b4a:	28 2f       	mov	r18, r24
     static char Conflow[7];
    //Configuration Data Request 
	if ((Conflow[6]=='i')&&(Conflow[5]=='C')&&(Conflow[4]=='o')&&(Conflow[3]=='n')&&(Conflow[2]=='f')&&(Conflow[1]=='?')&&(Conflow[0]==0x0D)&&(dataIn==0x0A)){
    2b4c:	80 91 a4 02 	lds	r24, 0x02A4
    2b50:	89 36       	cpi	r24, 0x69	; 105
    2b52:	e9 f4       	brne	.+58     	; 0x2b8e <ConfigProtocol+0x44>
    2b54:	80 91 a3 02 	lds	r24, 0x02A3
    2b58:	83 34       	cpi	r24, 0x43	; 67
    2b5a:	c9 f4       	brne	.+50     	; 0x2b8e <ConfigProtocol+0x44>
    2b5c:	80 91 a2 02 	lds	r24, 0x02A2
    2b60:	8f 36       	cpi	r24, 0x6F	; 111
    2b62:	a9 f4       	brne	.+42     	; 0x2b8e <ConfigProtocol+0x44>
    2b64:	80 91 a1 02 	lds	r24, 0x02A1
    2b68:	8e 36       	cpi	r24, 0x6E	; 110
    2b6a:	89 f4       	brne	.+34     	; 0x2b8e <ConfigProtocol+0x44>
    2b6c:	80 91 a0 02 	lds	r24, 0x02A0
    2b70:	86 36       	cpi	r24, 0x66	; 102
    2b72:	69 f4       	brne	.+26     	; 0x2b8e <ConfigProtocol+0x44>
    2b74:	80 91 9f 02 	lds	r24, 0x029F
    2b78:	8f 33       	cpi	r24, 0x3F	; 63
    2b7a:	49 f4       	brne	.+18     	; 0x2b8e <ConfigProtocol+0x44>
    2b7c:	80 91 9e 02 	lds	r24, 0x029E
    2b80:	8d 30       	cpi	r24, 0x0D	; 13
    2b82:	29 f4       	brne	.+10     	; 0x2b8e <ConfigProtocol+0x44>
    2b84:	2a 30       	cpi	r18, 0x0A	; 10
    2b86:	19 f4       	brne	.+6      	; 0x2b8e <ConfigProtocol+0x44>
	     //SendConfigParamater();        
		 ConfigCommand=CC_SEND_CONFIG;
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	80 93 b2 01 	sts	0x01B2, r24
	}

	if (IsConfigFlow==True){        
    2b8e:	80 91 85 01 	lds	r24, 0x0185
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	69 f4       	brne	.+26     	; 0x2bb0 <ConfigProtocol+0x66>
	    rcv_trans[char_count]=dataIn;
    2b96:	80 91 89 01 	lds	r24, 0x0189
    2b9a:	90 91 8a 01 	lds	r25, 0x018A
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	ed 5d       	subi	r30, 0xDD	; 221
    2ba2:	f6 4f       	sbci	r31, 0xF6	; 246
    2ba4:	20 83       	st	Z, r18
	    char_count++; 
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	90 93 8a 01 	sts	0x018A, r25
    2bac:	80 93 89 01 	sts	0x0189, r24
	}
	if ((Conflow[0]==0x04)&&(dataIn==0x40)){
    2bb0:	80 91 9e 02 	lds	r24, 0x029E
    2bb4:	84 30       	cpi	r24, 0x04	; 4
    2bb6:	51 f4       	brne	.+20     	; 0x2bcc <ConfigProtocol+0x82>
    2bb8:	20 34       	cpi	r18, 0x40	; 64
    2bba:	e9 f4       	brne	.+58     	; 0x2bf6 <ConfigProtocol+0xac>
	     IsConfigFlow=True;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	80 93 85 01 	sts	0x0185, r24
		 char_count=0;
    2bc2:	10 92 8a 01 	sts	0x018A, r1
    2bc6:	10 92 89 01 	sts	0x0189, r1
    2bca:	15 c0       	rjmp	.+42     	; 0x2bf6 <ConfigProtocol+0xac>
	}
	//SavingData
	if ((Conflow[0]==0x05)&&(dataIn==0x50)){
    2bcc:	85 30       	cpi	r24, 0x05	; 5
    2bce:	99 f4       	brne	.+38     	; 0x2bf6 <ConfigProtocol+0xac>
    2bd0:	20 35       	cpi	r18, 0x50	; 80
    2bd2:	89 f4       	brne	.+34     	; 0x2bf6 <ConfigProtocol+0xac>
	     transLength=char_count;
    2bd4:	80 91 89 01 	lds	r24, 0x0189
    2bd8:	90 91 8a 01 	lds	r25, 0x018A
    2bdc:	90 93 8c 01 	sts	0x018C, r25
    2be0:	80 93 8b 01 	sts	0x018B, r24
		 char_count=0;
    2be4:	10 92 8a 01 	sts	0x018A, r1
    2be8:	10 92 89 01 	sts	0x0189, r1
	     IsConfigFlow=False;
    2bec:	10 92 85 01 	sts	0x0185, r1
		 ConfigCommand=CC_SAVE_CONFIG;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	80 93 b2 01 	sts	0x01B2, r24
		 //SaveConfigParameter();
	}

	//Shifting
	Conflow[6]=Conflow[5];
    2bf6:	80 91 a3 02 	lds	r24, 0x02A3
    2bfa:	80 93 a4 02 	sts	0x02A4, r24
	Conflow[5]=Conflow[4];
    2bfe:	80 91 a2 02 	lds	r24, 0x02A2
    2c02:	80 93 a3 02 	sts	0x02A3, r24
	Conflow[4]=Conflow[3];
    2c06:	80 91 a1 02 	lds	r24, 0x02A1
    2c0a:	80 93 a2 02 	sts	0x02A2, r24
	Conflow[3]=Conflow[2];
    2c0e:	80 91 a0 02 	lds	r24, 0x02A0
    2c12:	80 93 a1 02 	sts	0x02A1, r24
	Conflow[2]=Conflow[1];
    2c16:	80 91 9f 02 	lds	r24, 0x029F
    2c1a:	80 93 a0 02 	sts	0x02A0, r24
	Conflow[1]=Conflow[0];
    2c1e:	80 91 9e 02 	lds	r24, 0x029E
    2c22:	80 93 9f 02 	sts	0x029F, r24
	Conflow[0]=dataIn;
    2c26:	20 93 9e 02 	sts	0x029E, r18

}
    2c2a:	08 95       	ret

00002c2c <system_beep>:
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    2c2c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    2c2e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    2c30:	80 93 be 01 	sts	0x01BE, r24
}
    2c34:	08 95       	ret

00002c36 <systemRestart>:
	 iRestart=0;
	 while(iRestart<100){
	       strRestart[iRestart]=iRestart;
	       iRestart++;	 
	 }
}
    2c36:	08 95       	ret

00002c38 <Low>:

char Low(char X){
     char Result;
	 Result=(0x0F&X);
	 return Result;
}
    2c38:	8f 70       	andi	r24, 0x0F	; 15
    2c3a:	08 95       	ret

00002c3c <High>:
char High(char X){
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
    2c3c:	82 95       	swap	r24
    2c3e:	8f 70       	andi	r24, 0x0F	; 15
    2c40:	08 95       	ret

00002c42 <Str>:
char Str(char H){
    2c42:	98 2f       	mov	r25, r24
unsigned char Conv=0;
        if ((H>=0)&&(H<=9)) Conv='0'+H;
    2c44:	8a 30       	cpi	r24, 0x0A	; 10
    2c46:	10 f4       	brcc	.+4      	; 0x2c4c <Str+0xa>
    2c48:	80 5d       	subi	r24, 0xD0	; 208
    2c4a:	08 95       	ret
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
    2c4c:	8a 50       	subi	r24, 0x0A	; 10
    2c4e:	86 30       	cpi	r24, 0x06	; 6
    2c50:	10 f0       	brcs	.+4      	; 0x2c56 <Str+0x14>
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	08 95       	ret
    2c56:	89 2f       	mov	r24, r25
    2c58:	89 5c       	subi	r24, 0xC9	; 201
        return (Conv);
}
    2c5a:	08 95       	ret

00002c5c <charToHex>:

void charToHex(char X, char *Result){
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	f8 2e       	mov	r15, r24
    2c64:	8b 01       	movw	r16, r22
     Result[0]=Str(High(X));
    2c66:	82 95       	swap	r24
    2c68:	8f 70       	andi	r24, 0x0F	; 15
    2c6a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <Str>
    2c6e:	f8 01       	movw	r30, r16
    2c70:	80 83       	st	Z, r24
	 Result[1]=Str(Low(X));
    2c72:	8f 2d       	mov	r24, r15
    2c74:	8f 70       	andi	r24, 0x0F	; 15
    2c76:	0e 94 21 16 	call	0x2c42	; 0x2c42 <Str>
    2c7a:	f8 01       	movw	r30, r16
    2c7c:	81 83       	std	Z+1, r24	; 0x01
	 Result[2]=0;
    2c7e:	12 82       	std	Z+2, r1	; 0x02
	 
}
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	ff 90       	pop	r15
    2c86:	08 95       	ret

00002c88 <strToInt>:

char strToInt(char *str){
    2c88:	fc 01       	movw	r30, r24
     char Result;
     Result=(((str[0]-'0')*10) +(str[0]-'0'));
    2c8a:	80 81       	ld	r24, Z
    2c8c:	2a e0       	ldi	r18, 0x0A	; 10
    2c8e:	82 9f       	mul	r24, r18
    2c90:	90 01       	movw	r18, r0
    2c92:	11 24       	eor	r1, r1
    2c94:	80 51       	subi	r24, 0x10	; 16
	 return Result;
}
    2c96:	82 0f       	add	r24, r18
    2c98:	08 95       	ret

00002c9a <intToStr>:

void intToStr(char X, char *str){
    2c9a:	58 2f       	mov	r21, r24
    2c9c:	fb 01       	movw	r30, r22
     char R,P,S;
	 R=X/100;
    2c9e:	64 e6       	ldi	r22, 0x64	; 100
    2ca0:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2ca4:	a8 2f       	mov	r26, r24
	 P=(X%100)/10;
    2ca6:	85 2f       	mov	r24, r21
    2ca8:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2cac:	89 2f       	mov	r24, r25
    2cae:	6a e0       	ldi	r22, 0x0A	; 10
    2cb0:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2cb4:	48 2f       	mov	r20, r24
	 S=X-(R*100)-(P*10);
    2cb6:	8c e9       	ldi	r24, 0x9C	; 156
    2cb8:	9f ef       	ldi	r25, 0xFF	; 255
    2cba:	a8 9f       	mul	r26, r24
    2cbc:	80 2d       	mov	r24, r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	85 0f       	add	r24, r21
    2cc2:	26 ef       	ldi	r18, 0xF6	; 246
    2cc4:	3f ef       	ldi	r19, 0xFF	; 255
    2cc6:	42 9f       	mul	r20, r18
    2cc8:	90 2d       	mov	r25, r0
    2cca:	11 24       	eor	r1, r1
    2ccc:	98 0f       	add	r25, r24
	 if (X>=100){
    2cce:	54 36       	cpi	r21, 0x64	; 100
    2cd0:	40 f0       	brcs	.+16     	; 0x2ce2 <intToStr+0x48>
	     str[0]=('0'+R);
    2cd2:	a0 5d       	subi	r26, 0xD0	; 208
    2cd4:	a0 83       	st	Z, r26
	     str[1]=('0'+P);
    2cd6:	40 5d       	subi	r20, 0xD0	; 208
    2cd8:	41 83       	std	Z+1, r20	; 0x01
	     str[2]=('0'+S);
    2cda:	90 5d       	subi	r25, 0xD0	; 208
    2cdc:	92 83       	std	Z+2, r25	; 0x02
	     str[3]=0;
    2cde:	13 82       	std	Z+3, r1	; 0x03
    2ce0:	08 95       	ret
	 if ((X>=10)&&(X>100)){
	     str[0]=('0'+P);
	     str[1]=('0'+S);
	     str[2]=0;
	 }else 
	 if (X<=10){
    2ce2:	5b 30       	cpi	r21, 0x0B	; 11
    2ce4:	18 f4       	brcc	.+6      	; 0x2cec <intToStr+0x52>
	     str[0]=('0'+S);
    2ce6:	90 5d       	subi	r25, 0xD0	; 208
    2ce8:	90 83       	st	Z, r25
	     str[1]=0;
    2cea:	11 82       	std	Z+1, r1	; 0x01
    2cec:	08 95       	ret

00002cee <UpdateClientIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
     sprintf_P(strClientIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
	 */
}
    2cee:	08 95       	ret

00002cf0 <UpdateServerIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
		 sprintf_P(strServerIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
		 */
}
    2cf0:	08 95       	ret

00002cf2 <UpdateIFT_ID>:
void UpdateIFT_ID(){
    /* char IdIFT;
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
	 sprintf_P(strIFT_ID,PSTR("%.2d"),IdIFT);
	 */
}
    2cf2:	08 95       	ret

00002cf4 <UpdateSeqNum>:
/*
     if (SeqNum<100)SeqNum++;
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 
    2cf4:	08 95       	ret

00002cf6 <ViewCardID>:
}




void ViewCardID(){//+12345678 -->12345678
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
    2cfa:	f9 01       	movw	r30, r18
    2cfc:	e1 57       	subi	r30, 0x71	; 113
    2cfe:	f4 4f       	sbci	r31, 0xF4	; 244
    2d00:	d9 01       	movw	r26, r18
    2d02:	a9 5a       	subi	r26, 0xA9	; 169
    2d04:	b3 4f       	sbci	r27, 0xF3	; 243
    2d06:	8c 91       	ld	r24, X
    2d08:	80 83       	st	Z, r24
    2d0a:	2f 5f       	subi	r18, 0xFF	; 255
    2d0c:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
    2d0e:	28 30       	cpi	r18, 0x08	; 8
    2d10:	31 05       	cpc	r19, r1
    2d12:	99 f7       	brne	.-26     	; 0x2cfa <ViewCardID+0x4>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
    2d14:	10 92 97 0b 	sts	0x0B97, r1
}
    2d18:	08 95       	ret

00002d1a <StringCopy>:
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	db 01       	movw	r26, r22
    2d20:	ec 01       	movw	r28, r24
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	07 c0       	rjmp	.+14     	; 0x2d36 <StringCopy+0x1c>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
    2d28:	fd 01       	movw	r30, r26
    2d2a:	e2 0f       	add	r30, r18
    2d2c:	f3 1f       	adc	r31, r19
    2d2e:	89 91       	ld	r24, Y+
    2d30:	80 83       	st	Z, r24
    2d32:	2f 5f       	subi	r18, 0xFF	; 255
    2d34:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d36:	24 17       	cp	r18, r20
    2d38:	b8 f3       	brcs	.-18     	; 0x2d28 <StringCopy+0xe>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
    2d3a:	a4 0f       	add	r26, r20
    2d3c:	b1 1d       	adc	r27, r1
    2d3e:	1c 92       	st	X, r1
}
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret

00002d46 <StringCopyPos>:
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	db 01       	movw	r26, r22
    2d4c:	ec 01       	movw	r28, r24
    2d4e:	c4 0f       	add	r28, r20
    2d50:	d1 1d       	adc	r29, r1
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	07 c0       	rjmp	.+14     	; 0x2d66 <StringCopyPos+0x20>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
    2d58:	fd 01       	movw	r30, r26
    2d5a:	e4 0f       	add	r30, r20
    2d5c:	f5 1f       	adc	r31, r21
    2d5e:	89 91       	ld	r24, Y+
    2d60:	80 83       	st	Z, r24
    2d62:	4f 5f       	subi	r20, 0xFF	; 255
    2d64:	5f 4f       	sbci	r21, 0xFF	; 255
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d66:	42 17       	cp	r20, r18
    2d68:	b8 f3       	brcs	.-18     	; 0x2d58 <StringCopyPos+0x12>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
    2d6a:	a2 0f       	add	r26, r18
    2d6c:	b1 1d       	adc	r27, r1
    2d6e:	1c 92       	st	X, r1
}
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	08 95       	ret

00002d76 <TestLocalAccount>:

void TestLocalAccount(){

}
    2d76:	08 95       	ret

00002d78 <BackLightTrig>:
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 93 b3 02 	sts	0x02B3, r24
	 __key_lgtcnt = 0; 
    2d7e:	10 92 b4 02 	sts	0x02B4, r1
	 PORTG=PORTG&0b11111101;
    2d82:	e5 e6       	ldi	r30, 0x65	; 101
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	8d 7f       	andi	r24, 0xFD	; 253
    2d8a:	80 83       	st	Z, r24
}
    2d8c:	08 95       	ret

00002d8e <GetBaudrate>:
	 }
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    2d8e:	82 30       	cpi	r24, 0x02	; 2
    2d90:	59 f0       	breq	.+22     	; 0x2da8 <GetBaudrate+0x1a>
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	18 f0       	brcs	.+6      	; 0x2d9c <GetBaudrate+0xe>
    2d96:	83 30       	cpi	r24, 0x03	; 3
    2d98:	21 f4       	brne	.+8      	; 0x2da2 <GetBaudrate+0x14>
    2d9a:	09 c0       	rjmp	.+18     	; 0x2dae <GetBaudrate+0x20>
    2d9c:	20 e8       	ldi	r18, 0x80	; 128
    2d9e:	35 e2       	ldi	r19, 0x25	; 37
    2da0:	08 c0       	rjmp	.+16     	; 0x2db2 <GetBaudrate+0x24>
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	05 c0       	rjmp	.+10     	; 0x2db2 <GetBaudrate+0x24>
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3b e4       	ldi	r19, 0x4B	; 75
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <GetBaudrate+0x24>
	 case br9600: 
	      Result=9600;
	      break;
	 case br19200:
	      Result=19200;
	      break;
    2dae:	2b e9       	ldi	r18, 0x9B	; 155
    2db0:	36 e1       	ldi	r19, 0x16	; 22
	 case br5787:
	      Result=5787;
     	  break;	 
	 }
   return Result;
}
    2db2:	c9 01       	movw	r24, r18
    2db4:	08 95       	ret

00002db6 <InitStandalone>:
	      RunInitStandalone=False;
	      break;
	 }
  }
  */
}
    2db6:	08 95       	ret

00002db8 <DisplayQueueFIP>:


void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}
    2db8:	08 95       	ret

00002dba <ShowMessage>:
	 }
}

void ShowMessage(char *Message){//Display Message on Line3
     char i;
}
    2dba:	08 95       	ret

00002dbc <CalcLRC>:

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}
    2dbc:	86 27       	eor	r24, r22
    2dbe:	08 95       	ret

00002dc0 <systemEDC>:
}

void systemEDC(){//EDC Handler
     

}
    2dc0:	08 95       	ret

00002dc2 <GeniusCalc>:


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
     switch(cOption){
    2dc2:	88 23       	and	r24, r24
    2dc4:	19 f0       	breq	.+6      	; 0x2dcc <GeniusCalc+0xa>
    2dc6:	81 30       	cpi	r24, 0x01	; 1
    2dc8:	49 f5       	brne	.+82     	; 0x2e1c <GeniusCalc+0x5a>
    2dca:	11 c0       	rjmp	.+34     	; 0x2dee <GeniusCalc+0x2c>
	 case G_PLUS:                  // 5 + 8 = 1 + 3 = 4
	      valC_H=(valA+valB)/10;   //  
    2dcc:	26 2f       	mov	r18, r22
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	24 0f       	add	r18, r20
    2dd2:	31 1d       	adc	r19, r1
		  valC_L=(valA+valB)%10;   //
	      Result=valC_H+valC_L;
    2dd4:	c9 01       	movw	r24, r18
    2dd6:	6a e0       	ldi	r22, 0x0A	; 10
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    2dde:	48 2f       	mov	r20, r24
    2de0:	c9 01       	movw	r24, r18
    2de2:	6a e0       	ldi	r22, 0x0A	; 10
    2de4:	70 e0       	ldi	r23, 0x00	; 0
    2de6:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    2dea:	46 0f       	add	r20, r22
    2dec:	18 c0       	rjmp	.+48     	; 0x2e1e <GeniusCalc+0x5c>
	      break;
	 case G_MULTY:                 
	      if (valA>0)xValA=valA;
    2dee:	66 23       	and	r22, r22
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <GeniusCalc+0x32>
    2df2:	61 e0       	ldi	r22, 0x01	; 1
		  else xValA=1;
	      if (valB>0)xValB=valB;
    2df4:	44 23       	and	r20, r20
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <GeniusCalc+0x38>
    2df8:	41 e0       	ldi	r20, 0x01	; 1
		  else xValB=1;
	      valC_H=(xValA*xValB)/10;   //  
    2dfa:	46 9f       	mul	r20, r22
    2dfc:	90 01       	movw	r18, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	c9 01       	movw	r24, r18
    2e02:	6a e0       	ldi	r22, 0x0A	; 10
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    2e0a:	46 2f       	mov	r20, r22
		  valC_L=(xValA*xValB)%10;   //
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	6a e0       	ldi	r22, 0x0A	; 10
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    2e16:	64 2f       	mov	r22, r20
    2e18:	48 2f       	mov	r20, r24
    2e1a:	d8 cf       	rjmp	.-80     	; 0x2dcc <GeniusCalc+0xa>
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
	 case G_MINUS:
	      
	      break;
	 }
   return Result;
}
    2e1e:	84 2f       	mov	r24, r20
    2e20:	08 95       	ret

00002e22 <FSubMenuAdmin>:

char FSubMenuAdmin(){
     char Result;
	 Result=MENU_DONE;
   return Result;
}
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	08 95       	ret

00002e26 <CountNoPumpSatus>:
	      break;	 
	 } 
   return Result;
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
    2e26:	ff 92       	push	r15
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e30:	f0 90 5c 01 	lds	r15, 0x015C
    2e34:	ec 01       	movw	r28, r24
    2e36:	00 e0       	ldi	r16, 0x00	; 0
    2e38:	10 e0       	ldi	r17, 0x00	; 0
    2e3a:	09 c0       	rjmp	.+18     	; 0x2e4e <CountNoPumpSatus+0x28>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
    2e3c:	8e e0       	ldi	r24, 0x0E	; 14
    2e3e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    2e42:	98 81       	ld	r25, Y
    2e44:	98 17       	cp	r25, r24
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <CountNoPumpSatus+0x24>
		      Result++;		  
    2e48:	1f 5f       	subi	r17, 0xFF	; 255
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e4a:	0f 5f       	subi	r16, 0xFF	; 255
    2e4c:	21 96       	adiw	r28, 0x01	; 1
    2e4e:	0f 15       	cp	r16, r15
    2e50:	a8 f3       	brcs	.-22     	; 0x2e3c <CountNoPumpSatus+0x16>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    2e52:	81 2f       	mov	r24, r17
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	1f 91       	pop	r17
    2e5a:	0f 91       	pop	r16
    2e5c:	ff 90       	pop	r15
    2e5e:	08 95       	ret

00002e60 <FCloseDay>:
   return Result;
}

char FCloseDay(){

}
    2e60:	08 95       	ret

00002e62 <FLockPump>:
char FLockPump(){

}
    2e62:	08 95       	ret

00002e64 <FMenuSettingPassword>:
char FMenuSettingPassword(){
     char Result;
   //_menu_password();
   Result=MENU_DONE;
   return Result;
}
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	08 95       	ret

00002e68 <menu_product>:
   return Result;
}

void menu_product(){

}
    2e68:	08 95       	ret

00002e6a <IncValue>:
            lcd_print(xPos,yPos,strLabel);
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
    2e6a:	fc 01       	movw	r30, r24
     if ((*Value)<MaxValue){
    2e6c:	80 81       	ld	r24, Z
    2e6e:	84 17       	cp	r24, r20
    2e70:	18 f4       	brcc	.+6      	; 0x2e78 <IncValue+0xe>
	     (*Value)++;
    2e72:	8f 5f       	subi	r24, 0xFF	; 255
    2e74:	80 83       	st	Z, r24
    2e76:	08 95       	ret
	 }else *Value=MinValue;
    2e78:	60 83       	st	Z, r22
    2e7a:	08 95       	ret

00002e7c <DecValue>:
}

void DecValue(char *Value,char MinValue,char MaxValue){
    2e7c:	fc 01       	movw	r30, r24
     if ((*Value)>MinValue){
    2e7e:	80 81       	ld	r24, Z
    2e80:	68 17       	cp	r22, r24
    2e82:	18 f4       	brcc	.+6      	; 0x2e8a <DecValue+0xe>
	     (*Value)--;
    2e84:	81 50       	subi	r24, 0x01	; 1
    2e86:	80 83       	st	Z, r24
    2e88:	08 95       	ret
	 }else *Value=MaxValue;
    2e8a:	40 83       	st	Z, r20
    2e8c:	08 95       	ret

00002e8e <zeroIP>:
		 
		}

	}
}
void zeroIP(unsigned char Val,char *StrResult){
    2e8e:	58 2f       	mov	r21, r24
    2e90:	fb 01       	movw	r30, r22
     unsigned char R,P,S;
	 if (Val>=100){
    2e92:	84 36       	cpi	r24, 0x64	; 100
    2e94:	00 f1       	brcs	.+64     	; 0x2ed6 <zeroIP+0x48>
	    R=(Val/100);
    2e96:	64 e6       	ldi	r22, 0x64	; 100
    2e98:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2e9c:	48 2f       	mov	r20, r24
        P=((Val%100)/10);
    2e9e:	85 2f       	mov	r24, r21
    2ea0:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2ea4:	89 2f       	mov	r24, r25
    2ea6:	6a e0       	ldi	r22, 0x0A	; 10
    2ea8:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
		S=Val-((R*100)+(P*10)); 
        StrResult[0]='0'+R;//+(Val/100);
    2eac:	40 5d       	subi	r20, 0xD0	; 208
    2eae:	40 83       	st	Z, r20
    2eb0:	40 53       	subi	r20, 0x30	; 48
	    StrResult[1]='0'+P;//+((Val%100)/10);
    2eb2:	80 5d       	subi	r24, 0xD0	; 208
    2eb4:	81 83       	std	Z+1, r24	; 0x01
    2eb6:	80 53       	subi	r24, 0x30	; 48
		StrResult[2]='0'+S;//+(Val-((Val/100)*100)-((Val%100)/10));
    2eb8:	50 5d       	subi	r21, 0xD0	; 208
    2eba:	2c e9       	ldi	r18, 0x9C	; 156
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	42 9f       	mul	r20, r18
    2ec0:	40 2d       	mov	r20, r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	45 0f       	add	r20, r21
    2ec6:	26 ef       	ldi	r18, 0xF6	; 246
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	82 9f       	mul	r24, r18
    2ecc:	80 2d       	mov	r24, r0
    2ece:	11 24       	eor	r1, r1
    2ed0:	84 0f       	add	r24, r20
    2ed2:	82 83       	std	Z+2, r24	; 0x02
    2ed4:	10 c0       	rjmp	.+32     	; 0x2ef6 <zeroIP+0x68>
		StrResult[3]=0;
		}else     
	 if ((Val>=10)&&(Val<100)){
    2ed6:	8a 50       	subi	r24, 0x0A	; 10
    2ed8:	8a 35       	cpi	r24, 0x5A	; 90
    2eda:	78 f4       	brcc	.+30     	; 0x2efa <zeroIP+0x6c>
        StrResult[0]='0';
    2edc:	80 e3       	ldi	r24, 0x30	; 48
    2ede:	80 83       	st	Z, r24
	    StrResult[1]=('0'+(Val/10));
    2ee0:	85 2f       	mov	r24, r21
    2ee2:	6a e0       	ldi	r22, 0x0A	; 10
    2ee4:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2ee8:	80 5d       	subi	r24, 0xD0	; 208
    2eea:	81 83       	std	Z+1, r24	; 0x01
		StrResult[2]=('0'+(Val%10));
    2eec:	85 2f       	mov	r24, r21
    2eee:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    2ef2:	90 5d       	subi	r25, 0xD0	; 208
    2ef4:	92 83       	std	Z+2, r25	; 0x02
		StrResult[3]=0;
    2ef6:	13 82       	std	Z+3, r1	; 0x03
    2ef8:	08 95       	ret
		}
     else
	 if (Val<10){
    2efa:	5a 30       	cpi	r21, 0x0A	; 10
    2efc:	30 f4       	brcc	.+12     	; 0x2f0a <zeroIP+0x7c>
	    StrResult[0]='0';
    2efe:	80 e3       	ldi	r24, 0x30	; 48
    2f00:	80 83       	st	Z, r24
		StrResult[1]='0';
    2f02:	81 83       	std	Z+1, r24	; 0x01
	    StrResult[2]='0'+Val;
    2f04:	50 5d       	subi	r21, 0xD0	; 208
    2f06:	52 83       	std	Z+2, r21	; 0x02
	    StrResult[3]=0;
    2f08:	13 82       	std	Z+3, r1	; 0x03
    2f0a:	08 95       	ret

00002f0c <GetLocAccStatus>:


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	29 f0       	breq	.+10     	; 0x2f1a <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    2f10:	82 30       	cpi	r24, 0x02	; 2
    2f12:	19 f0       	breq	.+6      	; 0x2f1a <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    2f14:	83 30       	cpi	r24, 0x03	; 3
    2f16:	09 f0       	breq	.+2      	; 0x2f1a <GetLocAccStatus+0xe>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
	 return Result;
}
    2f1a:	08 95       	ret

00002f1c <FTestRemZero>:
	     RemZeroLead(strTest);  
		 uart_print(0,1,strTest);

	while (1){};
  #endif
}
    2f1c:	08 95       	ret

00002f1e <StrPosCopy>:
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	eb 01       	movw	r28, r22
    2f24:	da 01       	movw	r26, r20
    2f26:	a8 0f       	add	r26, r24
    2f28:	b9 1f       	adc	r27, r25
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	07 c0       	rjmp	.+14     	; 0x2f3e <StrPosCopy+0x20>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2f30:	fe 01       	movw	r30, r28
    2f32:	e4 0f       	add	r30, r20
    2f34:	f5 1f       	adc	r31, r21
    2f36:	8d 91       	ld	r24, X+
    2f38:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f3a:	4f 5f       	subi	r20, 0xFF	; 255
    2f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3e:	42 17       	cp	r20, r18
    2f40:	53 07       	cpc	r21, r19
    2f42:	b0 f3       	brcs	.-20     	; 0x2f30 <StrPosCopy+0x12>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2f44:	c2 0f       	add	r28, r18
    2f46:	d3 1f       	adc	r29, r19
    2f48:	18 82       	st	Y, r1
}
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <StrPosPaste>:
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	8c 01       	movw	r16, r24
    2f5a:	db 01       	movw	r26, r22
    2f5c:	eb 01       	movw	r28, r22
    2f5e:	c4 0f       	add	r28, r20
    2f60:	d5 1f       	adc	r29, r21
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	07 c0       	rjmp	.+14     	; 0x2f76 <StrPosPaste+0x26>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[IdxSource+i]=Source[i];
    2f68:	f8 01       	movw	r30, r16
    2f6a:	e6 0f       	add	r30, r22
    2f6c:	f7 1f       	adc	r31, r23
    2f6e:	80 81       	ld	r24, Z
    2f70:	89 93       	st	Y+, r24
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f72:	6f 5f       	subi	r22, 0xFF	; 255
    2f74:	7f 4f       	sbci	r23, 0xFF	; 255
    2f76:	62 17       	cp	r22, r18
    2f78:	73 07       	cpc	r23, r19
    2f7a:	b0 f3       	brcs	.-20     	; 0x2f68 <StrPosPaste+0x18>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
    2f7c:	a4 0f       	add	r26, r20
    2f7e:	b5 1f       	adc	r27, r21
    2f80:	a2 0f       	add	r26, r18
    2f82:	b3 1f       	adc	r27, r19
    2f84:	1c 92       	st	X, r1
}
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <CharPosCopy>:
char CharPosCopy(char *Source, unsigned int IdxSource){
    2f90:	fb 01       	movw	r30, r22
    2f92:	e8 0f       	add	r30, r24
    2f94:	f9 1f       	adc	r31, r25
     char Result;
     Result=Source[IdxSource];
	 return Result;
}
    2f96:	80 81       	ld	r24, Z
    2f98:	08 95       	ret

00002f9a <procMessage00>:
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
    2f9a:	80 91 23 09 	lds	r24, 0x0923
    2f9e:	81 30       	cpi	r24, 0x01	; 1
    2fa0:	51 f4       	brne	.+20     	; 0x2fb6 <procMessage00+0x1c>
    2fa2:	80 91 8b 01 	lds	r24, 0x018B
    2fa6:	90 91 8c 01 	lds	r25, 0x018C
    2faa:	8f 97       	sbiw	r24, 0x2f	; 47
    2fac:	21 f4       	brne	.+8      	; 0x2fb6 <procMessage00+0x1c>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
    2fae:	80 91 48 09 	lds	r24, 0x0948
    2fb2:	80 53       	subi	r24, 0x30	; 48
    2fb4:	08 95       	ret
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
		 //sprintf(strSend,"R=%d",Result);
		 //uart_print(0,1,strSend);
		 //*/
		 }
     return Result;
}
    2fb8:	08 95       	ret

00002fba <procMessage09>:
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    2fba:	90 91 4a 09 	lds	r25, 0x094A
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fc2:	f9 01       	movw	r30, r18
    2fc4:	e8 56       	subi	r30, 0x68	; 104
    2fc6:	f7 4f       	sbci	r31, 0xF7	; 247
    2fc8:	d9 01       	movw	r26, r18
    2fca:	ad 5d       	subi	r26, 0xDD	; 221
    2fcc:	b6 4f       	sbci	r27, 0xF6	; 246
    2fce:	97 96       	adiw	r26, 0x27	; 39
    2fd0:	8c 91       	ld	r24, X
    2fd2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2fd4:	2f 5f       	subi	r18, 0xFF	; 255
    2fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd8:	24 31       	cpi	r18, 0x14	; 20
    2fda:	31 05       	cpc	r19, r1
    2fdc:	91 f7       	brne	.-28     	; 0x2fc2 <procMessage09+0x8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2fde:	10 92 ac 08 	sts	0x08AC, r1
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fe6:	f9 01       	movw	r30, r18
    2fe8:	e7 55       	subi	r30, 0x57	; 87
    2fea:	f8 4f       	sbci	r31, 0xF8	; 248
    2fec:	d9 01       	movw	r26, r18
    2fee:	ad 5d       	subi	r26, 0xDD	; 221
    2ff0:	b6 4f       	sbci	r27, 0xF6	; 246
    2ff2:	db 96       	adiw	r26, 0x3b	; 59
    2ff4:	8c 91       	ld	r24, X
    2ff6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2ff8:	2f 5f       	subi	r18, 0xFF	; 255
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	24 31       	cpi	r18, 0x14	; 20
    2ffe:	31 05       	cpc	r19, r1
    3000:	91 f7       	brne	.-28     	; 0x2fe6 <procMessage09+0x2c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3002:	10 92 bd 07 	sts	0x07BD, r1
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    300a:	f9 01       	movw	r30, r18
    300c:	ee 5d       	subi	r30, 0xDE	; 222
    300e:	f7 4f       	sbci	r31, 0xF7	; 247
    3010:	d9 01       	movw	r26, r18
    3012:	ae 58       	subi	r26, 0x8E	; 142
    3014:	b6 4f       	sbci	r27, 0xF6	; 246
    3016:	8c 91       	ld	r24, X
    3018:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    301a:	2f 5f       	subi	r18, 0xFF	; 255
    301c:	3f 4f       	sbci	r19, 0xFF	; 255
    301e:	24 31       	cpi	r18, 0x14	; 20
    3020:	31 05       	cpc	r19, r1
    3022:	99 f7       	brne	.-26     	; 0x300a <procMessage09+0x50>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3024:	10 92 36 08 	sts	0x0836, r1
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    302c:	f9 01       	movw	r30, r18
    302e:	e4 52       	subi	r30, 0x24	; 36
    3030:	f4 4f       	sbci	r31, 0xF4	; 244
    3032:	d9 01       	movw	r26, r18
    3034:	aa 57       	subi	r26, 0x7A	; 122
    3036:	b6 4f       	sbci	r27, 0xF6	; 246
    3038:	8c 91       	ld	r24, X
    303a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    303c:	2f 5f       	subi	r18, 0xFF	; 255
    303e:	3f 4f       	sbci	r19, 0xFF	; 255
    3040:	24 31       	cpi	r18, 0x14	; 20
    3042:	31 05       	cpc	r19, r1
    3044:	99 f7       	brne	.-26     	; 0x302c <procMessage09+0x72>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3046:	10 92 f0 0b 	sts	0x0BF0, r1
       StrPosCopy(rcv_trans,strFreeMessageLine1,39,20);
       StrPosCopy(rcv_trans,strFreeMessageLine2,59,20);
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}
    304a:	89 2f       	mov	r24, r25
    304c:	80 53       	subi	r24, 0x30	; 48
    304e:	08 95       	ret

00003050 <procMessage23>:
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}

char procMessage23(){
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3054:	f9 01       	movw	r30, r18
    3056:	e1 57       	subi	r30, 0x71	; 113
    3058:	f4 4f       	sbci	r31, 0xF4	; 244
    305a:	d9 01       	movw	r26, r18
    305c:	ad 5d       	subi	r26, 0xDD	; 221
    305e:	b6 4f       	sbci	r27, 0xF6	; 246
    3060:	95 96       	adiw	r26, 0x25	; 37
    3062:	8c 91       	ld	r24, X
    3064:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3066:	2f 5f       	subi	r18, 0xFF	; 255
    3068:	3f 4f       	sbci	r19, 0xFF	; 255
    306a:	24 31       	cpi	r18, 0x14	; 20
    306c:	31 05       	cpc	r19, r1
    306e:	91 f7       	brne	.-28     	; 0x3054 <procMessage23+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3070:	10 92 a3 0b 	sts	0x0BA3, r1
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3078:	f9 01       	movw	r30, r18
    307a:	e6 5d       	subi	r30, 0xD6	; 214
    307c:	fc 4f       	sbci	r31, 0xFC	; 252
    307e:	d9 01       	movw	r26, r18
    3080:	ad 5d       	subi	r26, 0xDD	; 221
    3082:	b6 4f       	sbci	r27, 0xF6	; 246
    3084:	d9 96       	adiw	r26, 0x39	; 57
    3086:	8c 91       	ld	r24, X
    3088:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    308a:	2f 5f       	subi	r18, 0xFF	; 255
    308c:	3f 4f       	sbci	r19, 0xFF	; 255
    308e:	2e 31       	cpi	r18, 0x1E	; 30
    3090:	31 05       	cpc	r19, r1
    3092:	91 f7       	brne	.-28     	; 0x3078 <procMessage23+0x28>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3094:	10 92 48 03 	sts	0x0348, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3098:	80 91 7a 09 	lds	r24, 0x097A
    309c:	80 93 90 03 	sts	0x0390, r24
	 }Dest[Length]=0;
    30a0:	10 92 91 03 	sts	0x0391, r1
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30a8:	f9 01       	movw	r30, r18
    30aa:	e5 5c       	subi	r30, 0xC5	; 197
    30ac:	f7 4f       	sbci	r31, 0xF7	; 247
    30ae:	d9 01       	movw	r26, r18
    30b0:	a5 58       	subi	r26, 0x85	; 133
    30b2:	b6 4f       	sbci	r27, 0xF6	; 246
    30b4:	8c 91       	ld	r24, X
    30b6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30b8:	2f 5f       	subi	r18, 0xFF	; 255
    30ba:	3f 4f       	sbci	r19, 0xFF	; 255
    30bc:	28 30       	cpi	r18, 0x08	; 8
    30be:	31 05       	cpc	r19, r1
    30c0:	99 f7       	brne	.-26     	; 0x30a8 <procMessage23+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30c2:	10 92 43 08 	sts	0x0843, r1
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30ca:	f9 01       	movw	r30, r18
    30cc:	ec 57       	subi	r30, 0x7C	; 124
    30ce:	fc 4f       	sbci	r31, 0xFC	; 252
    30d0:	d9 01       	movw	r26, r18
    30d2:	ad 57       	subi	r26, 0x7D	; 125
    30d4:	b6 4f       	sbci	r27, 0xF6	; 246
    30d6:	8c 91       	ld	r24, X
    30d8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30da:	2f 5f       	subi	r18, 0xFF	; 255
    30dc:	3f 4f       	sbci	r19, 0xFF	; 255
    30de:	2a 30       	cpi	r18, 0x0A	; 10
    30e0:	31 05       	cpc	r19, r1
    30e2:	99 f7       	brne	.-26     	; 0x30ca <procMessage23+0x7a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30e4:	10 92 8e 03 	sts	0x038E, r1
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30ec:	f9 01       	movw	r30, r18
    30ee:	ed 50       	subi	r30, 0x0D	; 13
    30f0:	f4 4f       	sbci	r31, 0xF4	; 244
    30f2:	d9 01       	movw	r26, r18
    30f4:	a3 57       	subi	r26, 0x73	; 115
    30f6:	b6 4f       	sbci	r27, 0xF6	; 246
    30f8:	8c 91       	ld	r24, X
    30fa:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30fc:	2f 5f       	subi	r18, 0xFF	; 255
    30fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3100:	2a 30       	cpi	r18, 0x0A	; 10
    3102:	31 05       	cpc	r19, r1
    3104:	99 f7       	brne	.-26     	; 0x30ec <procMessage23+0x9c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3106:	10 92 fd 0b 	sts	0x0BFD, r1
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    310e:	f9 01       	movw	r30, r18
    3110:	eb 53       	subi	r30, 0x3B	; 59
    3112:	f4 4f       	sbci	r31, 0xF4	; 244
    3114:	d9 01       	movw	r26, r18
    3116:	a9 56       	subi	r26, 0x69	; 105
    3118:	b6 4f       	sbci	r27, 0xF6	; 246
    311a:	8c 91       	ld	r24, X
    311c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    311e:	2f 5f       	subi	r18, 0xFF	; 255
    3120:	3f 4f       	sbci	r19, 0xFF	; 255
    3122:	23 31       	cpi	r18, 0x13	; 19
    3124:	31 05       	cpc	r19, r1
    3126:	99 f7       	brne	.-26     	; 0x310e <procMessage23+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3128:	10 92 d8 0b 	sts	0x0BD8, r1
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3130:	f9 01       	movw	r30, r18
    3132:	e7 54       	subi	r30, 0x47	; 71
    3134:	f4 4f       	sbci	r31, 0xF4	; 244
    3136:	d9 01       	movw	r26, r18
    3138:	a6 55       	subi	r26, 0x56	; 86
    313a:	b6 4f       	sbci	r27, 0xF6	; 246
    313c:	8c 91       	ld	r24, X
    313e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3140:	2f 5f       	subi	r18, 0xFF	; 255
    3142:	3f 4f       	sbci	r19, 0xFF	; 255
    3144:	27 30       	cpi	r18, 0x07	; 7
    3146:	31 05       	cpc	r19, r1
    3148:	99 f7       	brne	.-26     	; 0x3130 <procMessage23+0xe0>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    314a:	10 92 c0 0b 	sts	0x0BC0, r1
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3152:	f9 01       	movw	r30, r18
    3154:	ef 53       	subi	r30, 0x3F	; 63
    3156:	fd 4f       	sbci	r31, 0xFD	; 253
    3158:	d9 01       	movw	r26, r18
    315a:	af 54       	subi	r26, 0x4F	; 79
    315c:	b6 4f       	sbci	r27, 0xF6	; 246
    315e:	8c 91       	ld	r24, X
    3160:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3162:	2f 5f       	subi	r18, 0xFF	; 255
    3164:	3f 4f       	sbci	r19, 0xFF	; 255
    3166:	24 30       	cpi	r18, 0x04	; 4
    3168:	31 05       	cpc	r19, r1
    316a:	99 f7       	brne	.-26     	; 0x3152 <procMessage23+0x102>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    316c:	10 92 c5 02 	sts	0x02C5, r1
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,106,10);
     StrPosCopy(rcv_trans,strDateTime,116,19);
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	08 95       	ret

00003174 <procMessage81>:
uart_print(0,1,strCardID);
*/	
     return Result;
}

char procMessage81(){// Result: HFCS0000
    3174:	cf 93       	push	r28
    3176:	df 93       	push	r29
     char Result=0,PrintCopy=0;//
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    3178:	80 91 48 09 	lds	r24, 0x0948
    317c:	89 35       	cpi	r24, 0x59	; 89
    317e:	11 f4       	brne	.+4      	; 0x3184 <procMessage81+0x10>
    3180:	90 e8       	ldi	r25, 0x80	; 128
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <procMessage81+0x12>
    3184:	90 e0       	ldi	r25, 0x00	; 0
     //PrintFooter
	 if ((CharPosCopy(rcv_trans,38))=='Y') Result=(Result|(1<<6));
    3186:	80 91 49 09 	lds	r24, 0x0949
    318a:	89 35       	cpi	r24, 0x59	; 89
    318c:	09 f4       	brne	.+2      	; 0x3190 <procMessage81+0x1c>
    318e:	90 64       	ori	r25, 0x40	; 64
	 //PaperCut
     if ((CharPosCopy(rcv_trans,39))=='Y') Result=(Result|(1<<5));
    3190:	80 91 4a 09 	lds	r24, 0x094A
    3194:	89 35       	cpi	r24, 0x59	; 89
    3196:	09 f4       	brne	.+2      	; 0x319a <procMessage81+0x26>
    3198:	90 62       	ori	r25, 0x20	; 32
	 //Scrool
	 Result=(Result|(1<<4));
    319a:	90 61       	ori	r25, 0x10	; 16

	 //Copies
	 PrintCopy=(CharPosCopy(rcv_trans,40)-'0');
    319c:	80 91 4b 09 	lds	r24, 0x094B
    31a0:	80 53       	subi	r24, 0x30	; 48
     if (PrintCopy<=16) Result=Result|PrintCopy;
    31a2:	81 31       	cpi	r24, 0x11	; 17
    31a4:	08 f4       	brcc	.+2      	; 0x31a8 <procMessage81+0x34>
    31a6:	98 2b       	or	r25, r24
	 //Spooling
     StrPosCopy(rcv_trans,PrintBuffer,44,LengthMessage81);
    31a8:	c0 91 8d 01 	lds	r28, 0x018D
    31ac:	d0 91 8e 01 	lds	r29, 0x018E
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	0b c0       	rjmp	.+22     	; 0x31cc <procMessage81+0x58>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31b6:	f9 01       	movw	r30, r18
    31b8:	ee 50       	subi	r30, 0x0E	; 14
    31ba:	fc 4f       	sbci	r31, 0xFC	; 252
    31bc:	d9 01       	movw	r26, r18
    31be:	ad 5d       	subi	r26, 0xDD	; 221
    31c0:	b6 4f       	sbci	r27, 0xF6	; 246
    31c2:	9c 96       	adiw	r26, 0x2c	; 44
    31c4:	8c 91       	ld	r24, X
    31c6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    31c8:	2f 5f       	subi	r18, 0xFF	; 255
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	2c 17       	cp	r18, r28
    31ce:	3d 07       	cpc	r19, r29
    31d0:	90 f3       	brcs	.-28     	; 0x31b6 <procMessage81+0x42>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    31d2:	ce 50       	subi	r28, 0x0E	; 14
    31d4:	dc 4f       	sbci	r29, 0xFC	; 252
    31d6:	18 82       	st	Y, r1
	 //sprintf(lcdteks,"cmdPrint:%d ",Result);
     //uart_print(0,1,lcdteks);

	 //while(1){};
	 return Result;
}
    31d8:	89 2f       	mov	r24, r25
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <FillChar>:
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}

}

void FillChar(char *strMemory, unsigned int Length,char data){
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	06 c0       	rjmp	.+12     	; 0x31f2 <FillChar+0x12>
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    31e6:	fc 01       	movw	r30, r24
    31e8:	e2 0f       	add	r30, r18
    31ea:	f3 1f       	adc	r31, r19
    31ec:	40 83       	st	Z, r20

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    31ee:	2f 5f       	subi	r18, 0xFF	; 255
    31f0:	3f 4f       	sbci	r19, 0xFF	; 255
    31f2:	26 17       	cp	r18, r22
    31f4:	37 07       	cpc	r19, r23
    31f6:	b8 f3       	brcs	.-18     	; 0x31e6 <FillChar+0x6>
	     strMemory[i]=data;
	 }
}
    31f8:	08 95       	ret

000031fa <ProcMessage91>:

void ProcMessage91(){
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31fe:	f9 01       	movw	r30, r18
    3200:	e3 57       	subi	r30, 0x73	; 115
    3202:	f3 4f       	sbci	r31, 0xF3	; 243
    3204:	d9 01       	movw	r26, r18
    3206:	ad 5d       	subi	r26, 0xDD	; 221
    3208:	b6 4f       	sbci	r27, 0xF6	; 246
    320a:	95 96       	adiw	r26, 0x25	; 37
    320c:	8c 91       	ld	r24, X
    320e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3210:	2f 5f       	subi	r18, 0xFF	; 255
    3212:	3f 4f       	sbci	r19, 0xFF	; 255
    3214:	26 30       	cpi	r18, 0x06	; 6
    3216:	31 05       	cpc	r19, r1
    3218:	91 f7       	brne	.-28     	; 0x31fe <ProcMessage91+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    321a:	10 92 93 0c 	sts	0x0C93, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    321e:	80 91 4e 09 	lds	r24, 0x094E
    3222:	80 93 bf 07 	sts	0x07BF, r24
    3226:	80 91 4f 09 	lds	r24, 0x094F
    322a:	80 93 c0 07 	sts	0x07C0, r24
	 }Dest[Length]=0;
    322e:	10 92 c1 07 	sts	0x07C1, r1
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3236:	f9 01       	movw	r30, r18
    3238:	ee 5e       	subi	r30, 0xEE	; 238
    323a:	f7 4f       	sbci	r31, 0xF7	; 247
    323c:	d9 01       	movw	r26, r18
    323e:	ad 5d       	subi	r26, 0xDD	; 221
    3240:	b6 4f       	sbci	r27, 0xF6	; 246
    3242:	9d 96       	adiw	r26, 0x2d	; 45
    3244:	8c 91       	ld	r24, X
    3246:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3248:	2f 5f       	subi	r18, 0xFF	; 255
    324a:	3f 4f       	sbci	r19, 0xFF	; 255
    324c:	2f 30       	cpi	r18, 0x0F	; 15
    324e:	31 05       	cpc	r19, r1
    3250:	91 f7       	brne	.-28     	; 0x3236 <ProcMessage91+0x3c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3252:	10 92 21 08 	sts	0x0821, r1
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    325a:	f9 01       	movw	r30, r18
    325c:	ec 55       	subi	r30, 0x5C	; 92
    325e:	fa 4f       	sbci	r31, 0xFA	; 250
    3260:	d9 01       	movw	r26, r18
    3262:	ad 5d       	subi	r26, 0xDD	; 221
    3264:	b6 4f       	sbci	r27, 0xF6	; 246
    3266:	dc 96       	adiw	r26, 0x3c	; 60
    3268:	8c 91       	ld	r24, X
    326a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    326c:	2f 5f       	subi	r18, 0xFF	; 255
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	26 30       	cpi	r18, 0x06	; 6
    3272:	31 05       	cpc	r19, r1
    3274:	91 f7       	brne	.-28     	; 0x325a <ProcMessage91+0x60>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3276:	10 92 aa 05 	sts	0x05AA, r1
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    327e:	f9 01       	movw	r30, r18
    3280:	e5 58       	subi	r30, 0x85	; 133
    3282:	fc 4f       	sbci	r31, 0xFC	; 252
    3284:	d9 01       	movw	r26, r18
    3286:	ab 59       	subi	r26, 0x9B	; 155
    3288:	b6 4f       	sbci	r27, 0xF6	; 246
    328a:	8c 91       	ld	r24, X
    328c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    328e:	2f 5f       	subi	r18, 0xFF	; 255
    3290:	3f 4f       	sbci	r19, 0xFF	; 255
    3292:	28 30       	cpi	r18, 0x08	; 8
    3294:	31 05       	cpc	r19, r1
    3296:	99 f7       	brne	.-26     	; 0x327e <ProcMessage91+0x84>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3298:	10 92 83 03 	sts	0x0383, r1
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    32a0:	f9 01       	movw	r30, r18
    32a2:	e7 54       	subi	r30, 0x47	; 71
    32a4:	f4 4f       	sbci	r31, 0xF4	; 244
    32a6:	d9 01       	movw	r26, r18
    32a8:	a3 59       	subi	r26, 0x93	; 147
    32aa:	b6 4f       	sbci	r27, 0xF6	; 246
    32ac:	8c 91       	ld	r24, X
    32ae:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    32b0:	2f 5f       	subi	r18, 0xFF	; 255
    32b2:	3f 4f       	sbci	r19, 0xFF	; 255
    32b4:	28 30       	cpi	r18, 0x08	; 8
    32b6:	31 05       	cpc	r19, r1
    32b8:	99 f7       	brne	.-26     	; 0x32a0 <ProcMessage91+0xa6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    32ba:	10 92 c1 0b 	sts	0x0BC1, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    32be:	80 91 75 09 	lds	r24, 0x0975
    32c2:	80 93 90 03 	sts	0x0390, r24
	 }Dest[Length]=0;
    32c6:	10 92 91 03 	sts	0x0391, r1
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    32ce:	f9 01       	movw	r30, r18
    32d0:	ee 5f       	subi	r30, 0xFE	; 254
    32d2:	fc 4f       	sbci	r31, 0xFC	; 252
    32d4:	d9 01       	movw	r26, r18
    32d6:	aa 58       	subi	r26, 0x8A	; 138
    32d8:	b6 4f       	sbci	r27, 0xF6	; 246
    32da:	8c 91       	ld	r24, X
    32dc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    32de:	2f 5f       	subi	r18, 0xFF	; 255
    32e0:	3f 4f       	sbci	r19, 0xFF	; 255
    32e2:	29 30       	cpi	r18, 0x09	; 9
    32e4:	31 05       	cpc	r19, r1
    32e6:	99 f7       	brne	.-26     	; 0x32ce <ProcMessage91+0xd4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    32e8:	10 92 0b 03 	sts	0x030B, r1
     StrPosCopy(rcv_trans,strPrice,60,6);
     StrPosCopy(rcv_trans,strVolume,66,8);
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}
    32ec:	08 95       	ret

000032ee <IdentifyMessage>:
        //sprintf_P(strSerial,PSTR("RFID:%s"),strRFID);
        //uart_print(0,1,strSerial);
	 }
}

void IdentifyMessage(char STX,unsigned int Length){
    32ee:	1f 93       	push	r17
   if (STX==0x01){
    32f0:	81 30       	cpi	r24, 0x01	; 1
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <IdentifyMessage+0x8>
    32f4:	5f c0       	rjmp	.+190    	; 0x33b4 <IdentifyMessage+0xc6>
	    if ((Length==MSG00_LENGTH)||(MsgCode==0)) IsMessage00=True;//47
    32f6:	6f 32       	cpi	r22, 0x2F	; 47
    32f8:	71 05       	cpc	r23, r1
    32fa:	21 f0       	breq	.+8      	; 0x3304 <IdentifyMessage+0x16>
    32fc:	80 91 24 01 	lds	r24, 0x0124
    3300:	88 23       	and	r24, r24
    3302:	21 f4       	brne	.+8      	; 0x330c <IdentifyMessage+0x1e>
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	80 93 a0 01 	sts	0x01A0, r24
    330a:	4a c0       	rjmp	.+148    	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG09_LENGTH)||(MsgCode==9)) IsMessage09=True;//615
    330c:	6c 36       	cpi	r22, 0x6C	; 108
    330e:	71 05       	cpc	r23, r1
    3310:	11 f0       	breq	.+4      	; 0x3316 <IdentifyMessage+0x28>
    3312:	89 30       	cpi	r24, 0x09	; 9
    3314:	21 f4       	brne	.+8      	; 0x331e <IdentifyMessage+0x30>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	80 93 a5 01 	sts	0x01A5, r24
    331c:	41 c0       	rjmp	.+130    	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG11_LENGTH)||(MsgCode==11)) IsMessage11=True;//615
    331e:	92 e0       	ldi	r25, 0x02	; 2
    3320:	67 36       	cpi	r22, 0x67	; 103
    3322:	79 07       	cpc	r23, r25
    3324:	11 f0       	breq	.+4      	; 0x332a <IdentifyMessage+0x3c>
    3326:	8b 30       	cpi	r24, 0x0B	; 11
    3328:	21 f4       	brne	.+8      	; 0x3332 <IdentifyMessage+0x44>
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	80 93 a2 01 	sts	0x01A2, r24
    3330:	37 c0       	rjmp	.+110    	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG23_LENGTH)||(MsgCode==23)) IsMessage23=True;//145
    3332:	61 39       	cpi	r22, 0x91	; 145
    3334:	71 05       	cpc	r23, r1
    3336:	11 f0       	breq	.+4      	; 0x333c <IdentifyMessage+0x4e>
    3338:	87 31       	cpi	r24, 0x17	; 23
    333a:	21 f4       	brne	.+8      	; 0x3344 <IdentifyMessage+0x56>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	80 93 a4 01 	sts	0x01A4, r24
    3342:	2e c0       	rjmp	.+92     	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG57_LENGTH)||(MsgCode==57)) IsMessage57=True;//230
    3344:	66 3e       	cpi	r22, 0xE6	; 230
    3346:	71 05       	cpc	r23, r1
    3348:	11 f0       	breq	.+4      	; 0x334e <IdentifyMessage+0x60>
    334a:	89 33       	cpi	r24, 0x39	; 57
    334c:	21 f4       	brne	.+8      	; 0x3356 <IdentifyMessage+0x68>
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	80 93 a7 01 	sts	0x01A7, r24
    3354:	25 c0       	rjmp	.+74     	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG99_LENGTH)||(MsgCode==99)) IsMessage99=True;//378
    3356:	91 e0       	ldi	r25, 0x01	; 1
    3358:	68 39       	cpi	r22, 0x98	; 152
    335a:	79 07       	cpc	r23, r25
    335c:	11 f0       	breq	.+4      	; 0x3362 <IdentifyMessage+0x74>
    335e:	83 36       	cpi	r24, 0x63	; 99
    3360:	21 f4       	brne	.+8      	; 0x336a <IdentifyMessage+0x7c>
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	80 93 a1 01 	sts	0x01A1, r24
    3368:	1b c0       	rjmp	.+54     	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG81_LENGTH)||(MsgCode==81)) IsMessage81=True;//426
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	66 3b       	cpi	r22, 0xB6	; 182
    336e:	79 07       	cpc	r23, r25
    3370:	11 f0       	breq	.+4      	; 0x3376 <IdentifyMessage+0x88>
    3372:	81 35       	cpi	r24, 0x51	; 81
    3374:	21 f4       	brne	.+8      	; 0x337e <IdentifyMessage+0x90>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	80 93 a8 01 	sts	0x01A8, r24
    337c:	11 c0       	rjmp	.+34     	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG91_LENGTH)||(MsgCode==91)) IsMessage91=True;//426
    337e:	6c 35       	cpi	r22, 0x5C	; 92
    3380:	71 05       	cpc	r23, r1
    3382:	11 f0       	breq	.+4      	; 0x3388 <IdentifyMessage+0x9a>
    3384:	8b 35       	cpi	r24, 0x5B	; 91
    3386:	21 f4       	brne	.+8      	; 0x3390 <IdentifyMessage+0xa2>
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	80 93 a9 01 	sts	0x01A9, r24
    338e:	08 c0       	rjmp	.+16     	; 0x33a0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG21_LENGTH)||(MsgCode==21)) IsMessage21=True;//426
    3390:	66 35       	cpi	r22, 0x56	; 86
    3392:	71 05       	cpc	r23, r1
    3394:	11 f0       	breq	.+4      	; 0x339a <IdentifyMessage+0xac>
    3396:	85 31       	cpi	r24, 0x15	; 21
    3398:	19 f4       	brne	.+6      	; 0x33a0 <IdentifyMessage+0xb2>
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	80 93 a3 01 	sts	0x01A3, r24
        //EDC AdvanZ Respond
		if (IsMessage91==True){
    33a0:	10 91 a9 01 	lds	r17, 0x01A9
    33a4:	11 30       	cpi	r17, 0x01	; 1
    33a6:	31 f4       	brne	.+12     	; 0x33b4 <IdentifyMessage+0xc6>
		    IsMessage91=False;
    33a8:	10 92 a9 01 	sts	0x01A9, r1
		    ProcMessage91();
    33ac:	0e 94 fd 18 	call	0x31fa	; 0x31fa <ProcMessage91>
			IsSendMessageEDC=True;
    33b0:	10 93 99 01 	sts	0x0199, r17
		  }

//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}
    33b4:	1f 91       	pop	r17
    33b6:	08 95       	ret

000033b8 <Tab>:

	  }
     return Result;     
}

void Tab(char *sTab, char nTab){
    33b8:	fc 01       	movw	r30, r24
    33ba:	dc 01       	movw	r26, r24
    33bc:	80 e0       	ldi	r24, 0x00	; 0
     char i;
	 for(i=0;i<nTab;i++){
	     sTab[i]=' ';
    33be:	90 e2       	ldi	r25, 0x20	; 32
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <Tab+0xe>
    33c2:	9d 93       	st	X+, r25
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    33c4:	8f 5f       	subi	r24, 0xFF	; 255
    33c6:	86 17       	cp	r24, r22
    33c8:	e0 f3       	brcs	.-8      	; 0x33c2 <Tab+0xa>
	     sTab[i]=' ';
	 }sTab[nTab]=0;
    33ca:	e6 0f       	add	r30, r22
    33cc:	f1 1d       	adc	r31, r1
    33ce:	10 82       	st	Z, r1
}
    33d0:	08 95       	ret

000033d2 <StrToRaw>:
			  }
		  }
	 }
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
    33d2:	dc 01       	movw	r26, r24
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    33d8:	9c 91       	ld	r25, X
    33da:	90 53       	subi	r25, 0x30	; 48
    33dc:	9a 30       	cpi	r25, 0x0A	; 10
    33de:	08 f0       	brcs	.+2      	; 0x33e2 <StrToRaw+0x10>
    33e0:	90 e0       	ldi	r25, 0x00	; 0
	 char xRaw=0;
	 for (i=0;i<6;i++){
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
    33e2:	11 96       	adiw	r26, 0x01	; 1
    33e4:	8c 91       	ld	r24, X
    33e6:	11 97       	sbiw	r26, 0x01	; 1
    33e8:	80 53       	subi	r24, 0x30	; 48
    33ea:	8a 30       	cpi	r24, 0x0A	; 10
    33ec:	08 f0       	brcs	.+2      	; 0x33f0 <StrToRaw+0x1e>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	fb 01       	movw	r30, r22
    33f2:	e2 0f       	add	r30, r18
    33f4:	f3 1f       	adc	r31, r19
    33f6:	8f 70       	andi	r24, 0x0F	; 15
    33f8:	92 95       	swap	r25
    33fa:	90 7f       	andi	r25, 0xF0	; 240
    33fc:	98 2b       	or	r25, r24
    33fe:	90 83       	st	Z, r25
    3400:	2f 5f       	subi	r18, 0xFF	; 255
    3402:	3f 4f       	sbci	r19, 0xFF	; 255
    3404:	12 96       	adiw	r26, 0x02	; 2
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    3406:	26 30       	cpi	r18, 0x06	; 6
    3408:	31 05       	cpc	r19, r1
    340a:	31 f7       	brne	.-52     	; 0x33d8 <StrToRaw+0x6>
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
	 }	      
}
    340c:	08 95       	ret

0000340e <RawToStr>:
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	eb 01       	movw	r28, r22
    3414:	db 01       	movw	r26, r22
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
    341a:	fc 01       	movw	r30, r24
    341c:	e2 0f       	add	r30, r18
    341e:	f3 1f       	adc	r31, r19
    3420:	e0 81       	ld	r30, Z
    3422:	4e 2f       	mov	r20, r30
    3424:	42 95       	swap	r20
    3426:	4f 70       	andi	r20, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3428:	4a 30       	cpi	r20, 0x0A	; 10
    342a:	10 f0       	brcs	.+4      	; 0x3430 <RawToStr+0x22>
    342c:	40 e3       	ldi	r20, 0x30	; 48
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <RawToStr+0x24>
	    Result='0'+X;
    3430:	40 5d       	subi	r20, 0xD0	; 208
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
    3432:	ef 70       	andi	r30, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3434:	ea 30       	cpi	r30, 0x0A	; 10
    3436:	10 f0       	brcs	.+4      	; 0x343c <RawToStr+0x2e>
    3438:	e0 e3       	ldi	r30, 0x30	; 48
    343a:	01 c0       	rjmp	.+2      	; 0x343e <RawToStr+0x30>
	    Result='0'+X;
    343c:	e0 5d       	subi	r30, 0xD0	; 208
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
    343e:	4c 93       	st	X, r20
          Dest[(2*i)+1]=cB;
    3440:	11 96       	adiw	r26, 0x01	; 1
    3442:	ec 93       	st	X, r30
    3444:	11 97       	sbiw	r26, 0x01	; 1
    3446:	2f 5f       	subi	r18, 0xFF	; 255
    3448:	3f 4f       	sbci	r19, 0xFF	; 255
    344a:	12 96       	adiw	r26, 0x02	; 2
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    344c:	26 30       	cpi	r18, 0x06	; 6
    344e:	31 05       	cpc	r19, r1
    3450:	21 f7       	brne	.-56     	; 0x341a <RawToStr+0xc>
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
          Dest[(2*i)+1]=cB;
	 }Dest[12]=0;
    3452:	1c 86       	std	Y+12, r1	; 0x0c
}
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	08 95       	ret

0000345a <CalcMinus>:
}

char CalcMinus(char A, char B){
     signed char xC;//,xA,xB;
	 char Result;
	 if (A>=B) xC=((A-'0')-(B-'0'));
    345a:	86 17       	cp	r24, r22
    345c:	08 f4       	brcc	.+2      	; 0x3460 <CalcMinus+0x6>
	 else xC=10+((A-'0')-(B-'0'));//
    345e:	86 5f       	subi	r24, 0xF6	; 246
    3460:	86 1b       	sub	r24, r22
	 Result='0'+xC;
  return Result;
}
    3462:	80 5d       	subi	r24, 0xD0	; 208
    3464:	08 95       	ret

00003466 <CalcPlus>:

char CalcPlus(char A, char B){
    3466:	80 56       	subi	r24, 0x60	; 96
    3468:	86 0f       	add	r24, r22
    346a:	6a e0       	ldi	r22, 0x0A	; 10
    346c:	0e 94 6c ab 	call	0x156d8	; 0x156d8 <__divmodqi4>
     signed char xA,xB,xC;
	 char Result;
	 xC=((A-'0')+(B-'0'));
     Result='0'+(xC%10);  
   return Result;
}
    3470:	89 2f       	mov	r24, r25
    3472:	80 5d       	subi	r24, 0xD0	; 208
    3474:	08 95       	ret

00003476 <Chr>:
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3476:	8a 30       	cpi	r24, 0x0A	; 10
    3478:	10 f0       	brcs	.+4      	; 0x347e <Chr+0x8>
    347a:	80 e3       	ldi	r24, 0x30	; 48
    347c:	08 95       	ret
	    Result='0'+X;
    347e:	80 5d       	subi	r24, 0xD0	; 208
	 }
	return Result;
}
    3480:	08 95       	ret

00003482 <Ord>:
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    3482:	80 53       	subi	r24, 0x30	; 48
    3484:	8a 30       	cpi	r24, 0x0A	; 10
    3486:	08 f0       	brcs	.+2      	; 0x348a <Ord+0x8>
    3488:	80 e0       	ldi	r24, 0x00	; 0
	    Result=c-'0';
	 }
	return Result;
}
    348a:	08 95       	ret

0000348c <FTestCalculation>:
		  else
		  if (KeyChar=='*')stTestCalc=tcInitData;
	      break;	 
	 }
*/
}
    348c:	08 95       	ret

0000348e <GetTabSpace>:
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
}

void GetTabSpace(signed char TabLength, char *strTab){
    348e:	48 2f       	mov	r20, r24
    3490:	fb 01       	movw	r30, r22
     char i,nTab;
	 if (TabLength>0){
    3492:	18 16       	cp	r1, r24
    3494:	64 f4       	brge	.+24     	; 0x34ae <GetTabSpace+0x20>
		 nTab=TabLength;//%40;
    3496:	56 2f       	mov	r21, r22
    3498:	db 01       	movw	r26, r22
		 for(i=0;i<nTab;i++){
		     strTab[i]=' ';
    349a:	90 e2       	ldi	r25, 0x20	; 32
    349c:	9d 93       	st	X+, r25

void GetTabSpace(signed char TabLength, char *strTab){
     char i,nTab;
	 if (TabLength>0){
		 nTab=TabLength;//%40;
		 for(i=0;i<nTab;i++){
    349e:	8a 2f       	mov	r24, r26
    34a0:	85 1b       	sub	r24, r21
    34a2:	84 17       	cp	r24, r20
    34a4:	d8 f3       	brcs	.-10     	; 0x349c <GetTabSpace+0xe>
		     strTab[i]=' ';
		 }strTab[nTab]=0;
    34a6:	e4 0f       	add	r30, r20
    34a8:	f1 1d       	adc	r31, r1
    34aa:	10 82       	st	Z, r1
    34ac:	08 95       	ret
     }else{
	 strTab[0]=' ';
    34ae:	80 e2       	ldi	r24, 0x20	; 32
    34b0:	80 83       	st	Z, r24
	 strTab[1]=0;
    34b2:	11 82       	std	Z+1, r1	; 0x01
    34b4:	08 95       	ret

000034b6 <GetBorderValue>:

}

char GetBorderValue(char BoderType){
     char Result=0;
	 switch (BoderType){
    34b6:	86 30       	cpi	r24, 0x06	; 6
    34b8:	51 f1       	breq	.+84     	; 0x350e <GetBorderValue+0x58>
    34ba:	87 30       	cpi	r24, 0x07	; 7
    34bc:	70 f4       	brcc	.+28     	; 0x34da <GetBorderValue+0x24>
    34be:	83 30       	cpi	r24, 0x03	; 3
    34c0:	11 f1       	breq	.+68     	; 0x3506 <GetBorderValue+0x50>
    34c2:	84 30       	cpi	r24, 0x04	; 4
    34c4:	28 f4       	brcc	.+10     	; 0x34d0 <GetBorderValue+0x1a>
    34c6:	81 30       	cpi	r24, 0x01	; 1
    34c8:	c1 f0       	breq	.+48     	; 0x34fa <GetBorderValue+0x44>
    34ca:	82 30       	cpi	r24, 0x02	; 2
    34cc:	c1 f4       	brne	.+48     	; 0x34fe <GetBorderValue+0x48>
    34ce:	19 c0       	rjmp	.+50     	; 0x3502 <GetBorderValue+0x4c>
    34d0:	84 30       	cpi	r24, 0x04	; 4
    34d2:	d9 f0       	breq	.+54     	; 0x350a <GetBorderValue+0x54>
    34d4:	85 30       	cpi	r24, 0x05	; 5
    34d6:	99 f4       	brne	.+38     	; 0x34fe <GetBorderValue+0x48>
    34d8:	22 c0       	rjmp	.+68     	; 0x351e <GetBorderValue+0x68>
    34da:	89 30       	cpi	r24, 0x09	; 9
    34dc:	f1 f0       	breq	.+60     	; 0x351a <GetBorderValue+0x64>
    34de:	8a 30       	cpi	r24, 0x0A	; 10
    34e0:	28 f4       	brcc	.+10     	; 0x34ec <GetBorderValue+0x36>
    34e2:	87 30       	cpi	r24, 0x07	; 7
    34e4:	b1 f0       	breq	.+44     	; 0x3512 <GetBorderValue+0x5c>
    34e6:	88 30       	cpi	r24, 0x08	; 8
    34e8:	51 f4       	brne	.+20     	; 0x34fe <GetBorderValue+0x48>
    34ea:	15 c0       	rjmp	.+42     	; 0x3516 <GetBorderValue+0x60>
    34ec:	8b 30       	cpi	r24, 0x0B	; 11
    34ee:	d9 f0       	breq	.+54     	; 0x3526 <GetBorderValue+0x70>
    34f0:	8b 30       	cpi	r24, 0x0B	; 11
    34f2:	b8 f0       	brcs	.+46     	; 0x3522 <GetBorderValue+0x6c>
    34f4:	8c 30       	cpi	r24, 0x0C	; 12
    34f6:	19 f4       	brne	.+6      	; 0x34fe <GetBorderValue+0x48>
    34f8:	18 c0       	rjmp	.+48     	; 0x352a <GetBorderValue+0x74>
    34fa:	8a ed       	ldi	r24, 0xDA	; 218
    34fc:	08 95       	ret
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	08 95       	ret
    3502:	82 ec       	ldi	r24, 0xC2	; 194
    3504:	08 95       	ret
		case btTopLeft: 
		     Result=0xDA;
			 break;
		case btTopCenter: 
		     Result=0xC2;
			 break;
    3506:	8f eb       	ldi	r24, 0xBF	; 191
    3508:	08 95       	ret
		case btTopRight:
		     Result=0xBF;		 
			 break;
    350a:	83 ec       	ldi	r24, 0xC3	; 195
    350c:	08 95       	ret
		case btMiddleLeft: 
			 Result=0xC3;
			 break;
    350e:	84 eb       	ldi	r24, 0xB4	; 180
    3510:	08 95       	ret
		case btMiddleRight: 
			 Result=0xB4;
			 break;
    3512:	80 ec       	ldi	r24, 0xC0	; 192
    3514:	08 95       	ret
		case btBottomLeft: 
		     Result=0xC0;
			 break;
    3516:	81 ec       	ldi	r24, 0xC1	; 193
    3518:	08 95       	ret
		case btBottomCenter: 
			 Result=0xC1;
			 break;
    351a:	89 ed       	ldi	r24, 0xD9	; 217
    351c:	08 95       	ret
		case btBottomRight: 
			 Result=0xD9;
			 break;
    351e:	85 ec       	ldi	r24, 0xC5	; 197
    3520:	08 95       	ret
        case btMiddleCenter:
		     Result=0xC5;
		     break;
    3522:	83 eb       	ldi	r24, 0xB3	; 179
    3524:	08 95       	ret
		case btVertical: 
			 Result=0xB3;
			 break;
    3526:	84 ec       	ldi	r24, 0xC4	; 196
    3528:	08 95       	ret
		case btHorizontal:
			 Result=0xC4;
			 break;	 
    352a:	8d e0       	ldi	r24, 0x0D	; 13
        case btNewLine:
		     Result=0x0D;
			 break;	 
	 }
   return Result;
}
    352c:	08 95       	ret

0000352e <InserBorder>:

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    352e:	bf 92       	push	r11
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	b8 2e       	mov	r11, r24
    3542:	8b 01       	movw	r16, r22
    3544:	e4 2e       	mov	r14, r20
    3546:	69 01       	movw	r12, r18
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    3548:	f9 01       	movw	r30, r18
    354a:	c0 81       	ld	r28, Z
    354c:	d1 81       	ldd	r29, Z+1	; 0x01
    354e:	0c 0f       	add	r16, r28
    3550:	1d 1f       	adc	r17, r29
    3552:	ff 24       	eor	r15, r15
    3554:	07 c0       	rjmp	.+14     	; 0x3564 <InserBorder+0x36>
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    3556:	8b 2d       	mov	r24, r11
    3558:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <GetBorderValue>
    355c:	f8 01       	movw	r30, r16
    355e:	81 93       	st	Z+, r24
    3560:	8f 01       	movw	r16, r30
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    3562:	f3 94       	inc	r15
    3564:	fe 14       	cp	r15, r14
    3566:	b8 f3       	brcs	.-18     	; 0x3556 <InserBorder+0x28>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    3568:	ce 0d       	add	r28, r14
    356a:	d1 1d       	adc	r29, r1
    356c:	f6 01       	movw	r30, r12
    356e:	d1 83       	std	Z+1, r29	; 0x01
    3570:	c0 83       	st	Z, r28
}
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	ff 90       	pop	r15
    357c:	ef 90       	pop	r14
    357e:	df 90       	pop	r13
    3580:	cf 90       	pop	r12
    3582:	bf 90       	pop	r11
    3584:	08 95       	ret

00003586 <TestUserInput>:
	   //lcd_printf(1,1,PSTR("InputNumber:"));
       //lcd_printf(2,1,PSTR("_         "));
	}
  return Result;
  */
}
    3586:	08 95       	ret

00003588 <GeniusSendPumpStatus>:
   return Result;
}

void GeniusSendPumpStatus(char iPumpID){
     
}
    3588:	08 95       	ret

0000358a <GeniusSendStopPump>:
void GeniusSendStopPump(char iPumpID){
}
    358a:	08 95       	ret

0000358c <GeniusSendResumePump>:
void GeniusSendResumePump(char iPumpID){
}
    358c:	08 95       	ret

0000358e <GeniusSendPumpPreset>:
void GeniusSendPumpPreset(char iPumpID){
}
    358e:	08 95       	ret

00003590 <SetIncomingTransStatus>:
	 sprintf_P(strSend,PSTR("%d"),cSum);
	 uart_print(1,1,strSend);	 
}


void SetIncomingTransStatus(char iPumpID,char xTransStatus){
    3590:	e8 2f       	mov	r30, r24
char iStatus,xMaskA,xMaskB,xMaskC,xPumpID;
	 xPumpID=(iPumpID&0x0F);
    3592:	28 2f       	mov	r18, r24
    3594:	2f 70       	andi	r18, 0x0F	; 15
     iStatus=IncomingTransaction[xPumpID/8];
    3596:	82 2f       	mov	r24, r18
    3598:	86 95       	lsr	r24
    359a:	86 95       	lsr	r24
    359c:	86 95       	lsr	r24
    359e:	a8 2f       	mov	r26, r24
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	a6 52       	subi	r26, 0x26	; 38
    35a4:	b4 4f       	sbci	r27, 0xF4	; 244
    35a6:	4c 91       	ld	r20, X
	 if (xTransStatus==TS_NEW){
    35a8:	62 30       	cpi	r22, 0x02	; 2
    35aa:	59 f4       	brne	.+22     	; 0x35c2 <SetIncomingTransStatus+0x32>
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
    35ac:	27 70       	andi	r18, 0x07	; 7
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <SetIncomingTransStatus+0x28>
    35b4:	88 0f       	add	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	2a 95       	dec	r18
    35ba:	e2 f7       	brpl	.-8      	; 0x35b4 <SetIncomingTransStatus+0x24>
    35bc:	48 2b       	or	r20, r24
		 IncomingTransaction[xPumpID/8]=iStatus;
    35be:	4c 93       	st	X, r20
    35c0:	08 95       	ret
	 }else if (xTransStatus==TS_OLD){
    35c2:	63 30       	cpi	r22, 0x03	; 3
    35c4:	b1 f4       	brne	.+44     	; 0x35f2 <SetIncomingTransStatus+0x62>
		 xMaskA=(0xFE<<(xPumpID%8));
    35c6:	27 70       	andi	r18, 0x07	; 7
    35c8:	8e ef       	ldi	r24, 0xFE	; 254
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	01 c0       	rjmp	.+2      	; 0x35d0 <SetIncomingTransStatus+0x40>
    35ce:	88 0f       	add	r24, r24
    35d0:	2a 95       	dec	r18
    35d2:	ea f7       	brpl	.-6      	; 0x35ce <SetIncomingTransStatus+0x3e>
		 xMaskB=(~xMaskA)>>1;
		 xMaskC=xMaskA|xMaskB;
		 iStatus=iStatus&xMaskC;
		 IncomingTransaction[iPumpID/8]=iStatus;
    35d4:	e6 95       	lsr	r30
    35d6:	e6 95       	lsr	r30
    35d8:	e6 95       	lsr	r30
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	e6 52       	subi	r30, 0x26	; 38
    35de:	f4 4f       	sbci	r31, 0xF4	; 244
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	20 95       	com	r18
    35e6:	30 95       	com	r19
    35e8:	35 95       	asr	r19
    35ea:	27 95       	ror	r18
    35ec:	82 2b       	or	r24, r18
    35ee:	84 23       	and	r24, r20
    35f0:	80 83       	st	Z, r24
    35f2:	08 95       	ret

000035f4 <GetIncomingTransStatus>:
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
    35f4:	8f 70       	andi	r24, 0x0F	; 15
	 Result=TS_NONE;
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
    35f6:	e8 2f       	mov	r30, r24
    35f8:	e6 95       	lsr	r30
    35fa:	e6 95       	lsr	r30
    35fc:	e6 95       	lsr	r30
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	e6 52       	subi	r30, 0x26	; 38
    3602:	f4 4f       	sbci	r31, 0xF4	; 244
    3604:	90 81       	ld	r25, Z
    3606:	29 2f       	mov	r18, r25
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	87 70       	andi	r24, 0x07	; 7
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <GetIncomingTransStatus+0x1e>
    360e:	35 95       	asr	r19
    3610:	27 95       	ror	r18
    3612:	8a 95       	dec	r24
    3614:	e2 f7       	brpl	.-8      	; 0x360e <GetIncomingTransStatus+0x1a>
    3616:	21 30       	cpi	r18, 0x01	; 1
    3618:	31 05       	cpc	r19, r1
    361a:	11 f4       	brne	.+4      	; 0x3620 <GetIncomingTransStatus+0x2c>
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	08 95       	ret
	     Result=TS_NEW;
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
    3620:	23 2b       	or	r18, r19
    3622:	11 f4       	brne	.+4      	; 0x3628 <GetIncomingTransStatus+0x34>
    3624:	83 e0       	ldi	r24, 0x03	; 3
    3626:	08 95       	ret
    3628:	80 e0       	ldi	r24, 0x00	; 0
	     Result=TS_OLD;
	 }
   return Result;
}
    362a:	08 95       	ret

0000362c <ComposeDatetime>:
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}


void ComposeDatetime(char *Result){// 2010/10/01 16:27:44
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	62 97       	sbiw	r28, 0x12	; 18
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3640:	20 91 c0 03 	lds	r18, 0x03C0
    3644:	2f 83       	std	Y+7, r18	; 0x07
    3646:	20 91 c1 03 	lds	r18, 0x03C1
    364a:	28 87       	std	Y+8, r18	; 0x08
	 }Dest[Length]=0;
    364c:	19 86       	std	Y+9, r1	; 0x09
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    364e:	20 91 c3 03 	lds	r18, 0x03C3
    3652:	2c 83       	std	Y+4, r18	; 0x04
    3654:	20 91 c4 03 	lds	r18, 0x03C4
    3658:	2d 83       	std	Y+5, r18	; 0x05
	 }Dest[Length]=0;
    365a:	1e 82       	std	Y+6, r1	; 0x06
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    365c:	20 91 c6 03 	lds	r18, 0x03C6
    3660:	29 83       	std	Y+1, r18	; 0x01
    3662:	20 91 c7 03 	lds	r18, 0x03C7
    3666:	2a 83       	std	Y+2, r18	; 0x02
	 }Dest[Length]=0;
    3668:	1b 82       	std	Y+3, r1	; 0x03
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    366a:	20 91 7a 08 	lds	r18, 0x087A
    366e:	2a 87       	std	Y+10, r18	; 0x0a
    3670:	20 91 7b 08 	lds	r18, 0x087B
    3674:	2b 87       	std	Y+11, r18	; 0x0b
	 }Dest[Length]=0;
    3676:	1c 86       	std	Y+12, r1	; 0x0c
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3678:	20 91 7d 08 	lds	r18, 0x087D
    367c:	2d 87       	std	Y+13, r18	; 0x0d
    367e:	20 91 7e 08 	lds	r18, 0x087E
    3682:	2e 87       	std	Y+14, r18	; 0x0e
	 }Dest[Length]=0;
    3684:	1f 86       	std	Y+15, r1	; 0x0f
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3686:	20 91 80 08 	lds	r18, 0x0880
    368a:	28 8b       	std	Y+16, r18	; 0x10
    368c:	20 91 81 08 	lds	r18, 0x0881
    3690:	29 8b       	std	Y+17, r18	; 0x11
	 }Dest[Length]=0;
    3692:	1a 8a       	std	Y+18, r1	; 0x12
     StrPosCopy(strSystemDate,sYear,6,2);

     StrPosCopy(strSystemTime,sHour,0,2);
     StrPosCopy(strSystemTime,sMinute,3,2);
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
    3694:	2d b7       	in	r18, 0x3d	; 61
    3696:	3e b7       	in	r19, 0x3e	; 62
    3698:	20 51       	subi	r18, 0x10	; 16
    369a:	30 40       	sbci	r19, 0x00	; 0
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	3e bf       	out	0x3e, r19	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	2d bf       	out	0x3d, r18	; 61
    36a6:	ed b7       	in	r30, 0x3d	; 61
    36a8:	fe b7       	in	r31, 0x3e	; 62
    36aa:	31 96       	adiw	r30, 0x01	; 1
    36ac:	ad b7       	in	r26, 0x3d	; 61
    36ae:	be b7       	in	r27, 0x3e	; 62
    36b0:	12 96       	adiw	r26, 0x02	; 2
    36b2:	9c 93       	st	X, r25
    36b4:	8e 93       	st	-X, r24
    36b6:	11 97       	sbiw	r26, 0x01	; 1
    36b8:	87 e3       	ldi	r24, 0x37	; 55
    36ba:	95 e0       	ldi	r25, 0x05	; 5
    36bc:	93 83       	std	Z+3, r25	; 0x03
    36be:	82 83       	std	Z+2, r24	; 0x02
    36c0:	ce 01       	movw	r24, r28
    36c2:	01 96       	adiw	r24, 0x01	; 1
    36c4:	95 83       	std	Z+5, r25	; 0x05
    36c6:	84 83       	std	Z+4, r24	; 0x04
    36c8:	ce 01       	movw	r24, r28
    36ca:	04 96       	adiw	r24, 0x04	; 4
    36cc:	97 83       	std	Z+7, r25	; 0x07
    36ce:	86 83       	std	Z+6, r24	; 0x06
    36d0:	ce 01       	movw	r24, r28
    36d2:	07 96       	adiw	r24, 0x07	; 7
    36d4:	91 87       	std	Z+9, r25	; 0x09
    36d6:	80 87       	std	Z+8, r24	; 0x08
    36d8:	ce 01       	movw	r24, r28
    36da:	0a 96       	adiw	r24, 0x0a	; 10
    36dc:	93 87       	std	Z+11, r25	; 0x0b
    36de:	82 87       	std	Z+10, r24	; 0x0a
    36e0:	ce 01       	movw	r24, r28
    36e2:	0d 96       	adiw	r24, 0x0d	; 13
    36e4:	95 87       	std	Z+13, r25	; 0x0d
    36e6:	84 87       	std	Z+12, r24	; 0x0c
    36e8:	ce 01       	movw	r24, r28
    36ea:	40 96       	adiw	r24, 0x10	; 16
    36ec:	97 87       	std	Z+15, r25	; 0x0f
    36ee:	86 87       	std	Z+14, r24	; 0x0e
    36f0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    36f4:	2d b7       	in	r18, 0x3d	; 61
    36f6:	3e b7       	in	r19, 0x3e	; 62
    36f8:	20 5f       	subi	r18, 0xF0	; 240
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	3e bf       	out	0x3e, r19	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	2d bf       	out	0x3d, r18	; 61
}
    3706:	62 96       	adiw	r28, 0x12	; 18
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	cd bf       	out	0x3d, r28	; 61
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <leadingZero>:
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    3718:	00 d0       	rcall	.+0      	; 0x371a <leadingZero+0x2>
    371a:	00 d0       	rcall	.+0      	; 0x371c <leadingZero+0x4>
    371c:	00 d0       	rcall	.+0      	; 0x371e <leadingZero+0x6>
    371e:	ed b7       	in	r30, 0x3d	; 61
    3720:	fe b7       	in	r31, 0x3e	; 62
    3722:	31 96       	adiw	r30, 0x01	; 1
    3724:	ad b7       	in	r26, 0x3d	; 61
    3726:	be b7       	in	r27, 0x3e	; 62
    3728:	12 96       	adiw	r26, 0x02	; 2
    372a:	7c 93       	st	X, r23
    372c:	6e 93       	st	-X, r22
    372e:	11 97       	sbiw	r26, 0x01	; 1
    3730:	2b ee       	ldi	r18, 0xEB	; 235
    3732:	3e e0       	ldi	r19, 0x0E	; 14
    3734:	33 83       	std	Z+3, r19	; 0x03
    3736:	22 83       	std	Z+2, r18	; 0x02
    3738:	84 83       	std	Z+4, r24	; 0x04
    373a:	15 82       	std	Z+5, r1	; 0x05
    373c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    3740:	8d b7       	in	r24, 0x3d	; 61
    3742:	9e b7       	in	r25, 0x3e	; 62
    3744:	06 96       	adiw	r24, 0x06	; 6
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	9e bf       	out	0x3e, r25	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	8d bf       	out	0x3d, r24	; 61

}
    3750:	08 95       	ret

00003752 <procMessage21>:
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    3752:	af 92       	push	r10
    3754:	bf 92       	push	r11
    3756:	cf 92       	push	r12
    3758:	df 92       	push	r13
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	2b 97       	sbiw	r28, 0x0b	; 11
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	0e e0       	ldi	r16, 0x0E	; 14
    3778:	11 e0       	ldi	r17, 0x01	; 1
    377a:	38 e4       	ldi	r19, 0x48	; 72
    377c:	e3 2e       	mov	r14, r19
    377e:	39 e0       	ldi	r19, 0x09	; 9
    3780:	f3 2e       	mov	r15, r19
    3782:	6e 01       	movw	r12, r28
    3784:	08 94       	sec
    3786:	c1 1c       	adc	r12, r1
    3788:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    378a:	2b e0       	ldi	r18, 0x0B	; 11
    378c:	a2 2e       	mov	r10, r18
    378e:	b1 2c       	mov	r11, r1
    3790:	ac 0e       	add	r10, r28
    3792:	bd 1e       	adc	r11, r29
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    3794:	f6 01       	movw	r30, r12
    3796:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3798:	8d 91       	ld	r24, X+
    379a:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    379c:	ea 15       	cp	r30, r10
    379e:	fb 05       	cpc	r31, r11
    37a0:	d9 f7       	brne	.-10     	; 0x3798 <procMessage21+0x46>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    37a2:	1b 86       	std	Y+11, r1	; 0x0b
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
    37a4:	c6 01       	movw	r24, r12
    37a6:	b8 01       	movw	r22, r16
    37a8:	4b e0       	ldi	r20, 0x0B	; 11
    37aa:	50 e0       	ldi	r21, 0x00	; 0
    37ac:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
    37b0:	05 5f       	subi	r16, 0xF5	; 245
    37b2:	1f 4f       	sbci	r17, 0xFF	; 255
    37b4:	8a e0       	ldi	r24, 0x0A	; 10
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	e8 0e       	add	r14, r24
    37ba:	f9 1e       	adc	r15, r25
}

char procMessage21(){
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
    37bc:	91 e0       	ldi	r25, 0x01	; 1
    37be:	0a 33       	cpi	r16, 0x3A	; 58
    37c0:	19 07       	cpc	r17, r25
    37c2:	41 f7       	brne	.-48     	; 0x3794 <procMessage21+0x42>
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	2b 96       	adiw	r28, 0x0b	; 11
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	ff 90       	pop	r15
    37dc:	ef 90       	pop	r14
    37de:	df 90       	pop	r13
    37e0:	cf 90       	pop	r12
    37e2:	bf 90       	pop	r11
    37e4:	af 90       	pop	r10
    37e6:	08 95       	ret

000037e8 <MasterReset>:
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}

void MasterReset(){
    37e8:	af 92       	push	r10
    37ea:	bf 92       	push	r11
    37ec:	df 92       	push	r13
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	ec 97       	sbiw	r28, 0x3c	; 60
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
     char strEEP[50];
	 char xArray[10];
     //Restore All Stored EEPROM data to the Default
     sprintf_P(strEEP,PSTR("  "));
    380a:	00 d0       	rcall	.+0      	; 0x380c <MasterReset+0x24>
    380c:	00 d0       	rcall	.+0      	; 0x380e <MasterReset+0x26>
    380e:	5b e0       	ldi	r21, 0x0B	; 11
    3810:	e5 2e       	mov	r14, r21
    3812:	f1 2c       	mov	r15, r1
    3814:	ec 0e       	add	r14, r28
    3816:	fd 1e       	adc	r15, r29
    3818:	ed b7       	in	r30, 0x3d	; 61
    381a:	fe b7       	in	r31, 0x3e	; 62
    381c:	f2 82       	std	Z+2, r15	; 0x02
    381e:	e1 82       	std	Z+1, r14	; 0x01
    3820:	8a e1       	ldi	r24, 0x1A	; 26
    3822:	95 e0       	ldi	r25, 0x05	; 5
    3824:	94 83       	std	Z+4, r25	; 0x04
    3826:	83 83       	std	Z+3, r24	; 0x03
    3828:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefOperatorName, sizeof(DefOperatorName));
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	c7 01       	movw	r24, r14
    3836:	65 e1       	ldi	r22, 0x15	; 21
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	43 e1       	ldi	r20, 0x13	; 19
    383c:	50 e0       	ldi	r21, 0x00	; 0
    383e:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=70; 
    3842:	40 ec       	ldi	r20, 0xC0	; 192
    3844:	d4 2e       	mov	r13, r20
    3846:	d9 82       	std	Y+1, r13	; 0x01
    3848:	08 ea       	ldi	r16, 0xA8	; 168
    384a:	0a 83       	std	Y+2, r16	; 0x02
    384c:	10 e1       	ldi	r17, 0x10	; 16
    384e:	1b 83       	std	Y+3, r17	; 0x03
    3850:	86 e4       	ldi	r24, 0x46	; 70
    3852:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefClientIP, 4);
    3854:	5e 01       	movw	r10, r28
    3856:	08 94       	sec
    3858:	a1 1c       	adc	r10, r1
    385a:	b1 1c       	adc	r11, r1
    385c:	c5 01       	movw	r24, r10
    385e:	68 e2       	ldi	r22, 0x28	; 40
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	44 e0       	ldi	r20, 0x04	; 4
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=180; 
    386a:	d9 82       	std	Y+1, r13	; 0x01
    386c:	0a 83       	std	Y+2, r16	; 0x02
    386e:	1b 83       	std	Y+3, r17	; 0x03
    3870:	84 eb       	ldi	r24, 0xB4	; 180
    3872:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefServerIP, 4);
    3874:	c5 01       	movw	r24, r10
    3876:	6c e2       	ldi	r22, 0x2C	; 44
    3878:	70 e0       	ldi	r23, 0x00	; 0
    387a:	44 e0       	ldi	r20, 0x04	; 4
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

     eeprom_write_byte(&DefPrinterType,PT_CUSTOM_TG02);
    3882:	80 e3       	ldi	r24, 0x30	; 48
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 eeprom_write_byte(&DefPrintScrollEnd,7);
    388c:	81 e3       	ldi	r24, 0x31	; 49
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	67 e0       	ldi	r22, 0x07	; 7
    3892:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintScrollSpace,5);
    3896:	82 e3       	ldi	r24, 0x32	; 50
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	65 e0       	ldi	r22, 0x05	; 5
    389c:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintAutoCut,2);
    38a0:	83 e3       	ldi	r24, 0x33	; 51
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	62 e0       	ldi	r22, 0x02	; 2
    38a6:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintLogo,0);
    38aa:	84 e3       	ldi	r24, 0x34	; 52
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	60 e0       	ldi	r22, 0x00	; 0
    38b0:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintSize,3);
    38b4:	85 e3       	ldi	r24, 0x35	; 53
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	63 e0       	ldi	r22, 0x03	; 3
    38ba:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 eeprom_write_byte(&DefConnectionHost,0);
    38be:	8a e3       	ldi	r24, 0x3A	; 58
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefShowDateTime,1);
    38c8:	8b e3       	ldi	r24, 0x3B	; 59
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefNotifScreen,1);
    38d2:	8c e3       	ldi	r24, 0x3C	; 60
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	61 e0       	ldi	r22, 0x01	; 1
    38d8:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 eeprom_write_byte(&DefDecimalPrice,0);
    38dc:	8d e3       	ldi	r24, 0x3D	; 61
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalVolume,3);
    38e6:	8e e3       	ldi	r24, 0x3E	; 62
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	63 e0       	ldi	r22, 0x03	; 3
    38ec:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMoney,0);
    38f0:	8f e3       	ldi	r24, 0x3F	; 63
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	60 e0       	ldi	r22, 0x00	; 0
    38f6:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalVolume,2);
    38fa:	81 e4       	ldi	r24, 0x41	; 65
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	62 e0       	ldi	r22, 0x02	; 2
    3900:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalMoney,0);
    3904:	82 e4       	ldi	r24, 0x42	; 66
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	60 e0       	ldi	r22, 0x00	; 0
    390a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMark,',');
    390e:	83 e4       	ldi	r24, 0x43	; 67
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	6c e2       	ldi	r22, 0x2C	; 44
    3914:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefCurrencyMark,'.');
    3918:	84 e4       	ldi	r24, 0x44	; 68
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	6e e2       	ldi	r22, 0x2E	; 46
    391e:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 xArray[0]=',';	 xArray[1]='.'; 	 xArray[2]=' ';	 xArray[3]='/';  xArray[4]='-'; 
    3922:	8c e2       	ldi	r24, 0x2C	; 44
    3924:	89 83       	std	Y+1, r24	; 0x01
    3926:	8e e2       	ldi	r24, 0x2E	; 46
    3928:	8a 83       	std	Y+2, r24	; 0x02
    392a:	80 e2       	ldi	r24, 0x20	; 32
    392c:	8b 83       	std	Y+3, r24	; 0x03
    392e:	8f e2       	ldi	r24, 0x2F	; 47
    3930:	8c 83       	std	Y+4, r24	; 0x04
    3932:	8d e2       	ldi	r24, 0x2D	; 45
    3934:	8d 83       	std	Y+5, r24	; 0x05
	 eeprom_write_block((const void*) &xArray, (void*) &DefMarkMap, 5);
    3936:	c5 01       	movw	r24, r10
    3938:	65 e4       	ldi	r22, 0x45	; 69
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	45 e0       	ldi	r20, 0x05	; 5
    393e:	50 e0       	ldi	r21, 0x00	; 0
    3940:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; xArray[6]=0;	 	 
    3944:	dd 24       	eor	r13, r13
    3946:	d3 94       	inc	r13
    3948:	d9 82       	std	Y+1, r13	; 0x01
    394a:	12 e0       	ldi	r17, 0x02	; 2
    394c:	1a 83       	std	Y+2, r17	; 0x02
    394e:	1b 82       	std	Y+3, r1	; 0x03
    3950:	1c 82       	std	Y+4, r1	; 0x04
    3952:	1d 82       	std	Y+5, r1	; 0x05
    3954:	1e 82       	std	Y+6, r1	; 0x06
    3956:	1f 82       	std	Y+7, r1	; 0x07
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpMap, 8);
    3958:	c5 01       	movw	r24, r10
    395a:	6a e4       	ldi	r22, 0x4A	; 74
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	48 e0       	ldi	r20, 0x08	; 8
    3960:	50 e0       	ldi	r21, 0x00	; 0
    3962:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpLabel, 8);
    3966:	c5 01       	movw	r24, r10
    3968:	62 e5       	ldi	r22, 0x52	; 82
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	48 e0       	ldi	r20, 0x08	; 8
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; 
    3974:	d9 82       	std	Y+1, r13	; 0x01
    3976:	1a 83       	std	Y+2, r17	; 0x02
    3978:	1b 82       	std	Y+3, r1	; 0x03
    397a:	1c 82       	std	Y+4, r1	; 0x04
    397c:	1d 82       	std	Y+5, r1	; 0x05
    397e:	1e 82       	std	Y+6, r1	; 0x06
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[0], 6);
    3980:	0a e5       	ldi	r16, 0x5A	; 90
    3982:	10 e0       	ldi	r17, 0x00	; 0
    3984:	c5 01       	movw	r24, r10
    3986:	b8 01       	movw	r22, r16
    3988:	46 e0       	ldi	r20, 0x06	; 6
    398a:	50 e0       	ldi	r21, 0x00	; 0
    398c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[1], 6);
    3990:	0a 5f       	subi	r16, 0xFA	; 250
    3992:	1f 4f       	sbci	r17, 0xFF	; 255
    3994:	c5 01       	movw	r24, r10
    3996:	b8 01       	movw	r22, r16
    3998:	46 e0       	ldi	r20, 0x06	; 6
    399a:	50 e0       	ldi	r21, 0x00	; 0
    399c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("6500"));
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <MasterReset+0x1ba>
    39a2:	00 d0       	rcall	.+0      	; 0x39a4 <MasterReset+0x1bc>
    39a4:	ed b7       	in	r30, 0x3d	; 61
    39a6:	fe b7       	in	r31, 0x3e	; 62
    39a8:	f2 82       	std	Z+2, r15	; 0x02
    39aa:	e1 82       	std	Z+1, r14	; 0x01
    39ac:	85 e1       	ldi	r24, 0x15	; 21
    39ae:	95 e0       	ldi	r25, 0x05	; 5
    39b0:	94 83       	std	Z+4, r25	; 0x04
    39b2:	83 83       	std	Z+3, r24	; 0x03
    39b4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[0], sizeof(DefProductPrice[0]));
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	0a e8       	ldi	r16, 0x8A	; 138
    39c2:	10 e0       	ldi	r17, 0x00	; 0
    39c4:	c7 01       	movw	r24, r14
    39c6:	b8 01       	movw	r22, r16
    39c8:	49 e0       	ldi	r20, 0x09	; 9
    39ca:	50 e0       	ldi	r21, 0x00	; 0
    39cc:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("7250"));
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <MasterReset+0x1ea>
    39d2:	00 d0       	rcall	.+0      	; 0x39d4 <MasterReset+0x1ec>
    39d4:	ed b7       	in	r30, 0x3d	; 61
    39d6:	fe b7       	in	r31, 0x3e	; 62
    39d8:	f2 82       	std	Z+2, r15	; 0x02
    39da:	e1 82       	std	Z+1, r14	; 0x01
    39dc:	80 e1       	ldi	r24, 0x10	; 16
    39de:	95 e0       	ldi	r25, 0x05	; 5
    39e0:	94 83       	std	Z+4, r25	; 0x04
    39e2:	83 83       	std	Z+3, r24	; 0x03
    39e4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[1], sizeof(DefProductPrice[1]));
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	07 5f       	subi	r16, 0xF7	; 247
    39f2:	1f 4f       	sbci	r17, 0xFF	; 255
    39f4:	c7 01       	movw	r24, r14
    39f6:	b8 01       	movw	r22, r16
    39f8:	49 e0       	ldi	r20, 0x09	; 9
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("4500"));
    3a00:	00 d0       	rcall	.+0      	; 0x3a02 <MasterReset+0x21a>
    3a02:	00 d0       	rcall	.+0      	; 0x3a04 <MasterReset+0x21c>
    3a04:	ed b7       	in	r30, 0x3d	; 61
    3a06:	fe b7       	in	r31, 0x3e	; 62
    3a08:	f2 82       	std	Z+2, r15	; 0x02
    3a0a:	e1 82       	std	Z+1, r14	; 0x01
    3a0c:	8b e0       	ldi	r24, 0x0B	; 11
    3a0e:	95 e0       	ldi	r25, 0x05	; 5
    3a10:	94 83       	std	Z+4, r25	; 0x04
    3a12:	83 83       	std	Z+3, r24	; 0x03
    3a14:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[2], sizeof(DefProductPrice[2]));
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	07 5f       	subi	r16, 0xF7	; 247
    3a22:	1f 4f       	sbci	r17, 0xFF	; 255
    3a24:	c7 01       	movw	r24, r14
    3a26:	b8 01       	movw	r22, r16
    3a28:	49 e0       	ldi	r20, 0x09	; 9
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <MasterReset+0x24a>
    3a32:	00 d0       	rcall	.+0      	; 0x3a34 <MasterReset+0x24c>
    3a34:	ed b7       	in	r30, 0x3d	; 61
    3a36:	fe b7       	in	r31, 0x3e	; 62
    3a38:	f2 82       	std	Z+2, r15	; 0x02
    3a3a:	e1 82       	std	Z+1, r14	; 0x01
    3a3c:	86 e0       	ldi	r24, 0x06	; 6
    3a3e:	95 e0       	ldi	r25, 0x05	; 5
    3a40:	94 83       	std	Z+4, r25	; 0x04
    3a42:	83 83       	std	Z+3, r24	; 0x03
    3a44:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[3], sizeof(DefProductPrice[3]));
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	07 5f       	subi	r16, 0xF7	; 247
    3a52:	1f 4f       	sbci	r17, 0xFF	; 255
    3a54:	c7 01       	movw	r24, r14
    3a56:	b8 01       	movw	r22, r16
    3a58:	49 e0       	ldi	r20, 0x09	; 9
    3a5a:	50 e0       	ldi	r21, 0x00	; 0
    3a5c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("4500"));
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <MasterReset+0x27a>
    3a62:	00 d0       	rcall	.+0      	; 0x3a64 <MasterReset+0x27c>
    3a64:	ed b7       	in	r30, 0x3d	; 61
    3a66:	fe b7       	in	r31, 0x3e	; 62
    3a68:	f2 82       	std	Z+2, r15	; 0x02
    3a6a:	e1 82       	std	Z+1, r14	; 0x01
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	95 e0       	ldi	r25, 0x05	; 5
    3a70:	94 83       	std	Z+4, r25	; 0x04
    3a72:	83 83       	std	Z+3, r24	; 0x03
    3a74:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[4], sizeof(DefProductPrice[4]));
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	07 5f       	subi	r16, 0xF7	; 247
    3a82:	1f 4f       	sbci	r17, 0xFF	; 255
    3a84:	c7 01       	movw	r24, r14
    3a86:	b8 01       	movw	r22, r16
    3a88:	49 e0       	ldi	r20, 0x09	; 9
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <MasterReset+0x2aa>
    3a92:	00 d0       	rcall	.+0      	; 0x3a94 <MasterReset+0x2ac>
    3a94:	ed b7       	in	r30, 0x3d	; 61
    3a96:	fe b7       	in	r31, 0x3e	; 62
    3a98:	f2 82       	std	Z+2, r15	; 0x02
    3a9a:	e1 82       	std	Z+1, r14	; 0x01
    3a9c:	8c ef       	ldi	r24, 0xFC	; 252
    3a9e:	94 e0       	ldi	r25, 0x04	; 4
    3aa0:	94 83       	std	Z+4, r25	; 0x04
    3aa2:	83 83       	std	Z+3, r24	; 0x03
    3aa4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[5], sizeof(DefProductPrice[5]));
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	07 5f       	subi	r16, 0xF7	; 247
    3ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab4:	c7 01       	movw	r24, r14
    3ab6:	b8 01       	movw	r22, r16
    3ab8:	49 e0       	ldi	r20, 0x09	; 9
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("Pert+   "));
    3ac0:	00 d0       	rcall	.+0      	; 0x3ac2 <MasterReset+0x2da>
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <MasterReset+0x2dc>
    3ac4:	ed b7       	in	r30, 0x3d	; 61
    3ac6:	fe b7       	in	r31, 0x3e	; 62
    3ac8:	f2 82       	std	Z+2, r15	; 0x02
    3aca:	e1 82       	std	Z+1, r14	; 0x01
    3acc:	83 ef       	ldi	r24, 0xF3	; 243
    3ace:	94 e0       	ldi	r25, 0x04	; 4
    3ad0:	94 83       	std	Z+4, r25	; 0x04
    3ad2:	83 83       	std	Z+3, r24	; 0x03
    3ad4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[0], sizeof(DefProductName[0]));
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	00 ec       	ldi	r16, 0xC0	; 192
    3ae2:	10 e0       	ldi	r17, 0x00	; 0
    3ae4:	c7 01       	movw	r24, r14
    3ae6:	b8 01       	movw	r22, r16
    3ae8:	4d e0       	ldi	r20, 0x0D	; 13
    3aea:	50 e0       	ldi	r21, 0x00	; 0
    3aec:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Pertamax"));
    3af0:	00 d0       	rcall	.+0      	; 0x3af2 <MasterReset+0x30a>
    3af2:	00 d0       	rcall	.+0      	; 0x3af4 <MasterReset+0x30c>
    3af4:	ed b7       	in	r30, 0x3d	; 61
    3af6:	fe b7       	in	r31, 0x3e	; 62
    3af8:	f2 82       	std	Z+2, r15	; 0x02
    3afa:	e1 82       	std	Z+1, r14	; 0x01
    3afc:	8a ee       	ldi	r24, 0xEA	; 234
    3afe:	94 e0       	ldi	r25, 0x04	; 4
    3b00:	94 83       	std	Z+4, r25	; 0x04
    3b02:	83 83       	std	Z+3, r24	; 0x03
    3b04:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[1], sizeof(DefProductName[1]));
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	03 5f       	subi	r16, 0xF3	; 243
    3b12:	1f 4f       	sbci	r17, 0xFF	; 255
    3b14:	c7 01       	movw	r24, r14
    3b16:	b8 01       	movw	r22, r16
    3b18:	4d e0       	ldi	r20, 0x0D	; 13
    3b1a:	50 e0       	ldi	r21, 0x00	; 0
    3b1c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Premium "));
    3b20:	00 d0       	rcall	.+0      	; 0x3b22 <MasterReset+0x33a>
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <MasterReset+0x33c>
    3b24:	ed b7       	in	r30, 0x3d	; 61
    3b26:	fe b7       	in	r31, 0x3e	; 62
    3b28:	f2 82       	std	Z+2, r15	; 0x02
    3b2a:	e1 82       	std	Z+1, r14	; 0x01
    3b2c:	81 ee       	ldi	r24, 0xE1	; 225
    3b2e:	94 e0       	ldi	r25, 0x04	; 4
    3b30:	94 83       	std	Z+4, r25	; 0x04
    3b32:	83 83       	std	Z+3, r24	; 0x03
    3b34:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[2], sizeof(DefProductName[2]));
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	03 5f       	subi	r16, 0xF3	; 243
    3b42:	1f 4f       	sbci	r17, 0xFF	; 255
    3b44:	c7 01       	movw	r24, r14
    3b46:	b8 01       	movw	r22, r16
    3b48:	4d e0       	ldi	r20, 0x0D	; 13
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Solar   "));
    3b50:	00 d0       	rcall	.+0      	; 0x3b52 <MasterReset+0x36a>
    3b52:	00 d0       	rcall	.+0      	; 0x3b54 <MasterReset+0x36c>
    3b54:	ed b7       	in	r30, 0x3d	; 61
    3b56:	fe b7       	in	r31, 0x3e	; 62
    3b58:	f2 82       	std	Z+2, r15	; 0x02
    3b5a:	e1 82       	std	Z+1, r14	; 0x01
    3b5c:	88 ed       	ldi	r24, 0xD8	; 216
    3b5e:	94 e0       	ldi	r25, 0x04	; 4
    3b60:	94 83       	std	Z+4, r25	; 0x04
    3b62:	83 83       	std	Z+3, r24	; 0x03
    3b64:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[3], sizeof(DefProductName[3]));
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	03 5f       	subi	r16, 0xF3	; 243
    3b72:	1f 4f       	sbci	r17, 0xFF	; 255
    3b74:	c7 01       	movw	r24, r14
    3b76:	b8 01       	movw	r22, r16
    3b78:	4d e0       	ldi	r20, 0x0D	; 13
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("BioSolr "));
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <MasterReset+0x39a>
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <MasterReset+0x39c>
    3b84:	ed b7       	in	r30, 0x3d	; 61
    3b86:	fe b7       	in	r31, 0x3e	; 62
    3b88:	f2 82       	std	Z+2, r15	; 0x02
    3b8a:	e1 82       	std	Z+1, r14	; 0x01
    3b8c:	8f ec       	ldi	r24, 0xCF	; 207
    3b8e:	94 e0       	ldi	r25, 0x04	; 4
    3b90:	94 83       	std	Z+4, r25	; 0x04
    3b92:	83 83       	std	Z+3, r24	; 0x03
    3b94:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[4], sizeof(DefProductName[4]));
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	03 5f       	subi	r16, 0xF3	; 243
    3ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	b8 01       	movw	r22, r16
    3ba8:	4d e0       	ldi	r20, 0x0D	; 13
    3baa:	50 e0       	ldi	r21, 0x00	; 0
    3bac:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Diesel  "));
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <MasterReset+0x3ca>
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <MasterReset+0x3cc>
    3bb4:	ed b7       	in	r30, 0x3d	; 61
    3bb6:	fe b7       	in	r31, 0x3e	; 62
    3bb8:	f2 82       	std	Z+2, r15	; 0x02
    3bba:	e1 82       	std	Z+1, r14	; 0x01
    3bbc:	86 ec       	ldi	r24, 0xC6	; 198
    3bbe:	94 e0       	ldi	r25, 0x04	; 4
    3bc0:	94 83       	std	Z+4, r25	; 0x04
    3bc2:	83 83       	std	Z+3, r24	; 0x03
    3bc4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[5], sizeof(DefProductName[5]));
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	c7 01       	movw	r24, r14
    3bd2:	61 e0       	ldi	r22, 0x01	; 1
    3bd4:	71 e0       	ldi	r23, 0x01	; 1
    3bd6:	4d e0       	ldi	r20, 0x0D	; 13
    3bd8:	50 e0       	ldi	r21, 0x00	; 0
    3bda:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("BCA"));
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <MasterReset+0x3f8>
    3be0:	00 d0       	rcall	.+0      	; 0x3be2 <MasterReset+0x3fa>
    3be2:	ed b7       	in	r30, 0x3d	; 61
    3be4:	fe b7       	in	r31, 0x3e	; 62
    3be6:	f2 82       	std	Z+2, r15	; 0x02
    3be8:	e1 82       	std	Z+1, r14	; 0x01
    3bea:	82 ec       	ldi	r24, 0xC2	; 194
    3bec:	94 e0       	ldi	r25, 0x04	; 4
    3bee:	94 83       	std	Z+4, r25	; 0x04
    3bf0:	83 83       	std	Z+3, r24	; 0x03
    3bf2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[0], sizeof(DefBankName[0]));
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0e e0       	ldi	r16, 0x0E	; 14
    3c00:	11 e0       	ldi	r17, 0x01	; 1
    3c02:	c7 01       	movw	r24, r14
    3c04:	b8 01       	movw	r22, r16
    3c06:	4b e0       	ldi	r20, 0x0B	; 11
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Mandiri"));
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <MasterReset+0x428>
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <MasterReset+0x42a>
    3c12:	ed b7       	in	r30, 0x3d	; 61
    3c14:	fe b7       	in	r31, 0x3e	; 62
    3c16:	f2 82       	std	Z+2, r15	; 0x02
    3c18:	e1 82       	std	Z+1, r14	; 0x01
    3c1a:	8a eb       	ldi	r24, 0xBA	; 186
    3c1c:	94 e0       	ldi	r25, 0x04	; 4
    3c1e:	94 83       	std	Z+4, r25	; 0x04
    3c20:	83 83       	std	Z+3, r24	; 0x03
    3c22:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[1], sizeof(DefBankName[1]));
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	05 5f       	subi	r16, 0xF5	; 245
    3c30:	1f 4f       	sbci	r17, 0xFF	; 255
    3c32:	c7 01       	movw	r24, r14
    3c34:	b8 01       	movw	r22, r16
    3c36:	4b e0       	ldi	r20, 0x0B	; 11
    3c38:	50 e0       	ldi	r21, 0x00	; 0
    3c3a:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BNI"));
    3c3e:	00 d0       	rcall	.+0      	; 0x3c40 <MasterReset+0x458>
    3c40:	00 d0       	rcall	.+0      	; 0x3c42 <MasterReset+0x45a>
    3c42:	ed b7       	in	r30, 0x3d	; 61
    3c44:	fe b7       	in	r31, 0x3e	; 62
    3c46:	f2 82       	std	Z+2, r15	; 0x02
    3c48:	e1 82       	std	Z+1, r14	; 0x01
    3c4a:	86 eb       	ldi	r24, 0xB6	; 182
    3c4c:	94 e0       	ldi	r25, 0x04	; 4
    3c4e:	94 83       	std	Z+4, r25	; 0x04
    3c50:	83 83       	std	Z+3, r24	; 0x03
    3c52:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[2], sizeof(DefBankName[2]));
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	05 5f       	subi	r16, 0xF5	; 245
    3c60:	1f 4f       	sbci	r17, 0xFF	; 255
    3c62:	c7 01       	movw	r24, r14
    3c64:	b8 01       	movw	r22, r16
    3c66:	4b e0       	ldi	r20, 0x0B	; 11
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BRI"));
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <MasterReset+0x488>
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <MasterReset+0x48a>
    3c72:	ed b7       	in	r30, 0x3d	; 61
    3c74:	fe b7       	in	r31, 0x3e	; 62
    3c76:	f2 82       	std	Z+2, r15	; 0x02
    3c78:	e1 82       	std	Z+1, r14	; 0x01
    3c7a:	82 eb       	ldi	r24, 0xB2	; 178
    3c7c:	94 e0       	ldi	r25, 0x04	; 4
    3c7e:	94 83       	std	Z+4, r25	; 0x04
    3c80:	83 83       	std	Z+3, r24	; 0x03
    3c82:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[3], sizeof(DefBankName[3]));
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	05 5f       	subi	r16, 0xF5	; 245
    3c90:	1f 4f       	sbci	r17, 0xFF	; 255
    3c92:	c7 01       	movw	r24, r14
    3c94:	b8 01       	movw	r22, r16
    3c96:	4b e0       	ldi	r20, 0x0B	; 11
    3c98:	50 e0       	ldi	r21, 0x00	; 0
    3c9a:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 eeprom_write_byte(&DefPrintInitialize,False);
    3c9e:	8a e3       	ldi	r24, 0x3A	; 58
    3ca0:	91 e0       	ldi	r25, 0x01	; 1
    3ca2:	60 e0       	ldi	r22, 0x00	; 0
    3ca4:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefInitIFT,IT_SLAVE);
    3ca8:	8b e3       	ldi	r24, 0x3B	; 59
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	61 e0       	ldi	r22, 0x01	; 1
    3cae:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefDispenserBrand,ST_GILBARCO);//ST_WAYNE_DART;
    3cb2:	8c e3       	ldi	r24, 0x3C	; 60
    3cb4:	91 e0       	ldi	r25, 0x01	; 1
    3cb6:	61 e0       	ldi	r22, 0x01	; 1
    3cb8:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("000000"));
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <MasterReset+0x4d6>
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <MasterReset+0x4d8>
    3cc0:	ed b7       	in	r30, 0x3d	; 61
    3cc2:	fe b7       	in	r31, 0x3e	; 62
    3cc4:	f2 82       	std	Z+2, r15	; 0x02
    3cc6:	e1 82       	std	Z+1, r14	; 0x01
    3cc8:	8b ea       	ldi	r24, 0xAB	; 171
    3cca:	94 e0       	ldi	r25, 0x04	; 4
    3ccc:	94 83       	std	Z+4, r25	; 0x04
    3cce:	83 83       	std	Z+3, r24	; 0x03
    3cd0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefTransactionNumber, sizeof(DefTransactionNumber));
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	c7 01       	movw	r24, r14
    3cde:	6d e3       	ldi	r22, 0x3D	; 61
    3ce0:	71 e0       	ldi	r23, 0x01	; 1
    3ce2:	47 e0       	ldi	r20, 0x07	; 7
    3ce4:	50 e0       	ldi	r21, 0x00	; 0
    3ce6:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

     eeprom_write_byte(&DefShift,1);
    3cea:	84 e4       	ldi	r24, 0x44	; 68
    3cec:	91 e0       	ldi	r25, 0x01	; 1
    3cee:	61 e0       	ldi	r22, 0x01	; 1
    3cf0:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 xArray[0]=br9600;	 xArray[1]=br9600; 	 xArray[2]=br5787;	 xArray[3]=br9600;
    3cf4:	d9 82       	std	Y+1, r13	; 0x01
    3cf6:	da 82       	std	Y+2, r13	; 0x02
    3cf8:	83 e0       	ldi	r24, 0x03	; 3
    3cfa:	8b 83       	std	Y+3, r24	; 0x03
    3cfc:	dc 82       	std	Y+4, r13	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefBaudrate, 4);
    3cfe:	c5 01       	movw	r24, r10
    3d00:	65 e4       	ldi	r22, 0x45	; 69
    3d02:	71 e0       	ldi	r23, 0x01	; 1
    3d04:	44 e0       	ldi	r20, 0x04	; 4
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

     eeprom_write_byte(&DefPoolingPumpMax,MAX_PUMP);
    3d0c:	8a e4       	ldi	r24, 0x4A	; 74
    3d0e:	91 e0       	ldi	r25, 0x01	; 1
    3d10:	64 e0       	ldi	r22, 0x04	; 4
    3d12:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingNoPumpCount,NO_PUMP_COUNT_MAX);
    3d16:	8b e4       	ldi	r24, 0x4B	; 75
    3d18:	91 e0       	ldi	r25, 0x01	; 1
    3d1a:	65 e0       	ldi	r22, 0x05	; 5
    3d1c:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingTryResend,TRY_RESEND);
    3d20:	8c e4       	ldi	r24, 0x4C	; 76
    3d22:	91 e0       	ldi	r25, 0x01	; 1
    3d24:	62 e0       	ldi	r22, 0x02	; 2
    3d26:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingSendTimeout,SEND_TIMEOUT);
    3d2a:	8d e4       	ldi	r24, 0x4D	; 77
    3d2c:	91 e0       	ldi	r25, 0x01	; 1
    3d2e:	65 e0       	ldi	r22, 0x05	; 5
    3d30:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingDelayNextPump,DELAY_NEXT_PUMP);
    3d34:	8e e4       	ldi	r24, 0x4E	; 78
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	65 e0       	ldi	r22, 0x05	; 5
    3d3a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
     eeprom_write_byte(&DefActivePump,ACTIVE_PUMP);
    3d3e:	8f e4       	ldi	r24, 0x4F	; 79
    3d40:	91 e0       	ldi	r25, 0x01	; 1
    3d42:	64 e0       	ldi	r22, 0x04	; 4
    3d44:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
     eeprom_write_byte(&DefSequenceTimeout,SEQUENCE_TIMEOUT);
    3d48:	80 e5       	ldi	r24, 0x50	; 80
    3d4a:	91 e0       	ldi	r25, 0x01	; 1
    3d4c:	6a e0       	ldi	r22, 0x0A	; 10
    3d4e:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

     eeprom_write_byte(&DefPrintMoney,True);
    3d52:	87 ec       	ldi	r24, 0xC7	; 199
    3d54:	93 e0       	ldi	r25, 0x03	; 3
    3d56:	61 e0       	ldi	r22, 0x01	; 1
    3d58:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 eeprom_write_byte(&DefHGMode,HM_232);//HM_TTL,HM_232,HM_485
    3d5c:	88 ec       	ldi	r24, 0xC8	; 200
    3d5e:	93 e0       	ldi	r25, 0x03	; 3
    3d60:	61 e0       	ldi	r22, 0x01	; 1
    3d62:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("    PT. HANINDO AUTOMATION SOLUTIONS    "));
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <MasterReset+0x580>
    3d68:	00 d0       	rcall	.+0      	; 0x3d6a <MasterReset+0x582>
    3d6a:	ed b7       	in	r30, 0x3d	; 61
    3d6c:	fe b7       	in	r31, 0x3e	; 62
    3d6e:	f2 82       	std	Z+2, r15	; 0x02
    3d70:	e1 82       	std	Z+1, r14	; 0x01
    3d72:	82 e8       	ldi	r24, 0x82	; 130
    3d74:	94 e0       	ldi	r25, 0x04	; 4
    3d76:	94 83       	std	Z+4, r25	; 0x04
    3d78:	83 83       	std	Z+3, r24	; 0x03
    3d7a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[0],41);
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0d e2       	ldi	r16, 0x2D	; 45
    3d88:	12 e0       	ldi	r17, 0x02	; 2
    3d8a:	c7 01       	movw	r24, r14
    3d8c:	b8 01       	movw	r22, r16
    3d8e:	49 e2       	ldi	r20, 0x29	; 41
    3d90:	50 e0       	ldi	r21, 0x00	; 0
    3d92:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("        JL. RS Fatmawati No.55          "));
    3d96:	00 d0       	rcall	.+0      	; 0x3d98 <MasterReset+0x5b0>
    3d98:	00 d0       	rcall	.+0      	; 0x3d9a <MasterReset+0x5b2>
    3d9a:	ed b7       	in	r30, 0x3d	; 61
    3d9c:	fe b7       	in	r31, 0x3e	; 62
    3d9e:	f2 82       	std	Z+2, r15	; 0x02
    3da0:	e1 82       	std	Z+1, r14	; 0x01
    3da2:	89 e5       	ldi	r24, 0x59	; 89
    3da4:	94 e0       	ldi	r25, 0x04	; 4
    3da6:	94 83       	std	Z+4, r25	; 0x04
    3da8:	83 83       	std	Z+3, r24	; 0x03
    3daa:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[1],41);
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	07 5d       	subi	r16, 0xD7	; 215
    3db8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dba:	c7 01       	movw	r24, r14
    3dbc:	b8 01       	movw	r22, r16
    3dbe:	49 e2       	ldi	r20, 0x29	; 41
    3dc0:	50 e0       	ldi	r21, 0x00	; 0
    3dc2:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Jakarta Selatan             "));
    3dc6:	00 d0       	rcall	.+0      	; 0x3dc8 <MasterReset+0x5e0>
    3dc8:	00 d0       	rcall	.+0      	; 0x3dca <MasterReset+0x5e2>
    3dca:	ed b7       	in	r30, 0x3d	; 61
    3dcc:	fe b7       	in	r31, 0x3e	; 62
    3dce:	f2 82       	std	Z+2, r15	; 0x02
    3dd0:	e1 82       	std	Z+1, r14	; 0x01
    3dd2:	80 e3       	ldi	r24, 0x30	; 48
    3dd4:	94 e0       	ldi	r25, 0x04	; 4
    3dd6:	94 83       	std	Z+4, r25	; 0x04
    3dd8:	83 83       	std	Z+3, r24	; 0x03
    3dda:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[2],41);
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	c7 01       	movw	r24, r14
    3de8:	6f e7       	ldi	r22, 0x7F	; 127
    3dea:	72 e0       	ldi	r23, 0x02	; 2
    3dec:	49 e2       	ldi	r20, 0x29	; 41
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <MasterReset+0x60e>
    3df6:	00 d0       	rcall	.+0      	; 0x3df8 <MasterReset+0x610>
    3df8:	ed b7       	in	r30, 0x3d	; 61
    3dfa:	fe b7       	in	r31, 0x3e	; 62
    3dfc:	f2 82       	std	Z+2, r15	; 0x02
    3dfe:	e1 82       	std	Z+1, r14	; 0x01
    3e00:	87 e0       	ldi	r24, 0x07	; 7
    3e02:	94 e0       	ldi	r25, 0x04	; 4
    3e04:	94 83       	std	Z+4, r25	; 0x04
    3e06:	83 83       	std	Z+3, r24	; 0x03
    3e08:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[3],41);
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	c7 01       	movw	r24, r14
    3e16:	68 ea       	ldi	r22, 0xA8	; 168
    3e18:	72 e0       	ldi	r23, 0x02	; 2
    3e1a:	49 e2       	ldi	r20, 0x29	; 41
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <MasterReset+0x63c>
    3e24:	00 d0       	rcall	.+0      	; 0x3e26 <MasterReset+0x63e>
    3e26:	ed b7       	in	r30, 0x3d	; 61
    3e28:	fe b7       	in	r31, 0x3e	; 62
    3e2a:	f2 82       	std	Z+2, r15	; 0x02
    3e2c:	e1 82       	std	Z+1, r14	; 0x01
    3e2e:	8e ed       	ldi	r24, 0xDE	; 222
    3e30:	93 e0       	ldi	r25, 0x03	; 3
    3e32:	94 83       	std	Z+4, r25	; 0x04
    3e34:	83 83       	std	Z+3, r24	; 0x03
    3e36:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[4],41);
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	c7 01       	movw	r24, r14
    3e44:	61 ed       	ldi	r22, 0xD1	; 209
    3e46:	72 e0       	ldi	r23, 0x02	; 2
    3e48:	49 e2       	ldi	r20, 0x29	; 41
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3e50:	00 d0       	rcall	.+0      	; 0x3e52 <MasterReset+0x66a>
    3e52:	00 d0       	rcall	.+0      	; 0x3e54 <MasterReset+0x66c>
    3e54:	ed b7       	in	r30, 0x3d	; 61
    3e56:	fe b7       	in	r31, 0x3e	; 62
    3e58:	f2 82       	std	Z+2, r15	; 0x02
    3e5a:	e1 82       	std	Z+1, r14	; 0x01
    3e5c:	85 eb       	ldi	r24, 0xB5	; 181
    3e5e:	93 e0       	ldi	r25, 0x03	; 3
    3e60:	94 83       	std	Z+4, r25	; 0x04
    3e62:	83 83       	std	Z+3, r24	; 0x03
    3e64:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[5],41);
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	c7 01       	movw	r24, r14
    3e72:	6a ef       	ldi	r22, 0xFA	; 250
    3e74:	72 e0       	ldi	r23, 0x02	; 2
    3e76:	49 e2       	ldi	r20, 0x29	; 41
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("             Terima Kasih               "));
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <MasterReset+0x698>
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <MasterReset+0x69a>
    3e82:	ed b7       	in	r30, 0x3d	; 61
    3e84:	fe b7       	in	r31, 0x3e	; 62
    3e86:	f2 82       	std	Z+2, r15	; 0x02
    3e88:	e1 82       	std	Z+1, r14	; 0x01
    3e8a:	8c e8       	ldi	r24, 0x8C	; 140
    3e8c:	93 e0       	ldi	r25, 0x03	; 3
    3e8e:	94 83       	std	Z+4, r25	; 0x04
    3e90:	83 83       	std	Z+3, r24	; 0x03
    3e92:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[6],41);
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	c7 01       	movw	r24, r14
    3ea0:	63 e2       	ldi	r22, 0x23	; 35
    3ea2:	73 e0       	ldi	r23, 0x03	; 3
    3ea4:	49 e2       	ldi	r20, 0x29	; 41
    3ea6:	50 e0       	ldi	r21, 0x00	; 0
    3ea8:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Selamat  Jalan              "));
    3eac:	00 d0       	rcall	.+0      	; 0x3eae <MasterReset+0x6c6>
    3eae:	00 d0       	rcall	.+0      	; 0x3eb0 <MasterReset+0x6c8>
    3eb0:	ed b7       	in	r30, 0x3d	; 61
    3eb2:	fe b7       	in	r31, 0x3e	; 62
    3eb4:	f2 82       	std	Z+2, r15	; 0x02
    3eb6:	e1 82       	std	Z+1, r14	; 0x01
    3eb8:	83 e6       	ldi	r24, 0x63	; 99
    3eba:	93 e0       	ldi	r25, 0x03	; 3
    3ebc:	94 83       	std	Z+4, r25	; 0x04
    3ebe:	83 83       	std	Z+3, r24	; 0x03
    3ec0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[7],41);
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	c7 01       	movw	r24, r14
    3ece:	6c e4       	ldi	r22, 0x4C	; 76
    3ed0:	73 e0       	ldi	r23, 0x03	; 3
    3ed2:	49 e2       	ldi	r20, 0x29	; 41
    3ed4:	50 e0       	ldi	r21, 0x00	; 0
    3ed6:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("      Semoga Selamat Sampai Tujuan      "));
    3eda:	00 d0       	rcall	.+0      	; 0x3edc <MasterReset+0x6f4>
    3edc:	00 d0       	rcall	.+0      	; 0x3ede <MasterReset+0x6f6>
    3ede:	ed b7       	in	r30, 0x3d	; 61
    3ee0:	fe b7       	in	r31, 0x3e	; 62
    3ee2:	f2 82       	std	Z+2, r15	; 0x02
    3ee4:	e1 82       	std	Z+1, r14	; 0x01
    3ee6:	8a e3       	ldi	r24, 0x3A	; 58
    3ee8:	93 e0       	ldi	r25, 0x03	; 3
    3eea:	94 83       	std	Z+4, r25	; 0x04
    3eec:	83 83       	std	Z+3, r24	; 0x03
    3eee:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[8],41);
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0
    3efa:	c7 01       	movw	r24, r14
    3efc:	65 e7       	ldi	r22, 0x75	; 117
    3efe:	73 e0       	ldi	r23, 0x03	; 3
    3f00:	49 e2       	ldi	r20, 0x29	; 41
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3f08:	00 d0       	rcall	.+0      	; 0x3f0a <MasterReset+0x722>
    3f0a:	00 d0       	rcall	.+0      	; 0x3f0c <MasterReset+0x724>
    3f0c:	ed b7       	in	r30, 0x3d	; 61
    3f0e:	fe b7       	in	r31, 0x3e	; 62
    3f10:	f2 82       	std	Z+2, r15	; 0x02
    3f12:	e1 82       	std	Z+1, r14	; 0x01
    3f14:	81 e1       	ldi	r24, 0x11	; 17
    3f16:	93 e0       	ldi	r25, 0x03	; 3
    3f18:	94 83       	std	Z+4, r25	; 0x04
    3f1a:	83 83       	std	Z+3, r24	; 0x03
    3f1c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[9],41);
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	c7 01       	movw	r24, r14
    3f2a:	6e e9       	ldi	r22, 0x9E	; 158
    3f2c:	73 e0       	ldi	r23, 0x03	; 3
    3f2e:	49 e2       	ldi	r20, 0x29	; 41
    3f30:	50 e0       	ldi	r21, 0x00	; 0
    3f32:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	 
	 eeprom_write_byte(&DefIFT_ID,1);
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	61 e0       	ldi	r22, 0x01	; 1
    3f3c:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
}
    3f40:	ec 96       	adiw	r28, 0x3c	; 60
    3f42:	0f b6       	in	r0, 0x3f	; 63
    3f44:	f8 94       	cli
    3f46:	de bf       	out	0x3e, r29	; 62
    3f48:	0f be       	out	0x3f, r0	; 63
    3f4a:	cd bf       	out	0x3d, r28	; 61
    3f4c:	cf 91       	pop	r28
    3f4e:	df 91       	pop	r29
    3f50:	1f 91       	pop	r17
    3f52:	0f 91       	pop	r16
    3f54:	ff 90       	pop	r15
    3f56:	ef 90       	pop	r14
    3f58:	df 90       	pop	r13
    3f5a:	bf 90       	pop	r11
    3f5c:	af 90       	pop	r10
    3f5e:	08 95       	ret

00003f60 <SetDispenser>:
		  }
	      break;
	 }
}

void SetDispenser(char DispType){
    3f60:	ef 92       	push	r14
    3f62:	ff 92       	push	r15
    3f64:	0f 93       	push	r16
    3f66:	1f 93       	push	r17
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	00 d0       	rcall	.+0      	; 0x3f6e <SetDispenser+0xe>
    3f6e:	00 d0       	rcall	.+0      	; 0x3f70 <SetDispenser+0x10>
    3f70:	0f 92       	push	r0
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	18 2f       	mov	r17, r24
     char CurrentDispenser;
	 char i,DecimalSetting[5];
     CurrentDispenser=eeprom_read_byte(&DefDispenserBrand);
    3f78:	8c e3       	ldi	r24, 0x3C	; 60
    3f7a:	91 e0       	ldi	r25, 0x01	; 1
    3f7c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
	 if (CurrentDispenser!=DispType){
    3f80:	81 17       	cp	r24, r17
    3f82:	29 f0       	breq	.+10     	; 0x3f8e <SetDispenser+0x2e>
	     eeprom_write_byte(&DefDispenserBrand,DispType);
    3f84:	8c e3       	ldi	r24, 0x3C	; 60
    3f86:	91 e0       	ldi	r25, 0x01	; 1
    3f88:	61 2f       	mov	r22, r17
    3f8a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 }
     //Apply Setting for Pump respectively
	 switch(DispType){
    3f8e:	11 30       	cpi	r17, 0x01	; 1
    3f90:	19 f0       	breq	.+6      	; 0x3f98 <SetDispenser+0x38>
    3f92:	12 30       	cpi	r17, 0x02	; 2
    3f94:	71 f4       	brne	.+28     	; 0x3fb2 <SetDispenser+0x52>
    3f96:	08 c0       	rjmp	.+16     	; 0x3fa8 <SetDispenser+0x48>
	 case ST_GILBARCO:
          DecimalSetting[0]=0;//Price
    3f98:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=3;//Volume
    3f9a:	83 e0       	ldi	r24, 0x03	; 3
    3f9c:	8a 83       	std	Y+2, r24	; 0x02
		  DecimalSetting[2]=0;//Money
    3f9e:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3fa0:	82 e0       	ldi	r24, 0x02	; 2
    3fa2:	8c 83       	std	Y+4, r24	; 0x04
		  DecimalSetting[4]=0;//TotalMoney 
    3fa4:	1d 82       	std	Y+5, r1	; 0x05
    3fa6:	05 c0       	rjmp	.+10     	; 0x3fb2 <SetDispenser+0x52>
	      break;
	 case ST_WAYNE_DART:
          DecimalSetting[0]=0;//Price
    3fa8:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=2;//Volume
    3faa:	1a 83       	std	Y+2, r17	; 0x02
		  DecimalSetting[2]=0;//Money
    3fac:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3fae:	1c 83       	std	Y+4, r17	; 0x04
		  DecimalSetting[4]=2;//TotalMoney 
    3fb0:	1d 83       	std	Y+5, r17	; 0x05
    3fb2:	0d e3       	ldi	r16, 0x3D	; 61
    3fb4:	10 e0       	ldi	r17, 0x00	; 0
    3fb6:	7e 01       	movw	r14, r28
    3fb8:	08 94       	sec
    3fba:	e1 1c       	adc	r14, r1
    3fbc:	f1 1c       	adc	r15, r1
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
    3fbe:	c8 01       	movw	r24, r16
    3fc0:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    3fc4:	f7 01       	movw	r30, r14
    3fc6:	60 81       	ld	r22, Z
    3fc8:	86 17       	cp	r24, r22
    3fca:	19 f0       	breq	.+6      	; 0x3fd2 <SetDispenser+0x72>
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
    3fcc:	c8 01       	movw	r24, r16
    3fce:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
    3fd2:	0f 5f       	subi	r16, 0xFF	; 255
    3fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd6:	08 94       	sec
    3fd8:	e1 1c       	adc	r14, r1
    3fda:	f1 1c       	adc	r15, r1
		  DecimalSetting[3]=2;//TotalVolume
		  DecimalSetting[4]=2;//TotalMoney 
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
    3fdc:	f0 e0       	ldi	r31, 0x00	; 0
    3fde:	02 34       	cpi	r16, 0x42	; 66
    3fe0:	1f 07       	cpc	r17, r31
    3fe2:	69 f7       	brne	.-38     	; 0x3fbe <SetDispenser+0x5e>
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	1f 91       	pop	r17
    3ff4:	0f 91       	pop	r16
    3ff6:	ff 90       	pop	r15
    3ff8:	ef 90       	pop	r14
    3ffa:	08 95       	ret

00003ffc <InitMemory>:

	 }
}

void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    3ffc:	8a e4       	ldi	r24, 0x4A	; 74
    3ffe:	91 e0       	ldi	r25, 0x01	; 1
    4000:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    4004:	80 93 5c 01 	sts	0x015C, r24
	 ActivePump=eeprom_read_byte(&DefActivePump);
    4008:	8f e4       	ldi	r24, 0x4F	; 79
    400a:	91 e0       	ldi	r25, 0x01	; 1
    400c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    4010:	80 93 5d 01 	sts	0x015D, r24
}
    4014:	08 95       	ret

00004016 <GetFIPAddr>:
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
    4016:	ff 92       	push	r15
    4018:	0f 93       	push	r16
    401a:	1f 93       	push	r17
    401c:	df 93       	push	r29
    401e:	cf 93       	push	r28
    4020:	cd b7       	in	r28, 0x3d	; 61
    4022:	de b7       	in	r29, 0x3e	; 62
    4024:	28 97       	sbiw	r28, 0x08	; 8
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	f8 94       	cli
    402a:	de bf       	out	0x3e, r29	; 62
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	f8 2e       	mov	r15, r24
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4032:	8e 01       	movw	r16, r28
    4034:	0f 5f       	subi	r16, 0xFF	; 255
    4036:	1f 4f       	sbci	r17, 0xFF	; 255
    4038:	c8 01       	movw	r24, r16
    403a:	6a e4       	ldi	r22, 0x4A	; 74
    403c:	70 e0       	ldi	r23, 0x00	; 0
    403e:	48 e0       	ldi	r20, 0x08	; 8
    4040:	50 e0       	ldi	r21, 0x00	; 0
    4042:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    4046:	f8 01       	movw	r30, r16
     for(i=0;i<8;i++){
    4048:	9e 01       	movw	r18, r28
    404a:	27 5f       	subi	r18, 0xF7	; 247
    404c:	3f 4f       	sbci	r19, 0xFF	; 255
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    404e:	9e 2f       	mov	r25, r30
    4050:	90 1b       	sub	r25, r16
     for(i=0;i<8;i++){
	     if (PPumpID[i]==iPumpID){
    4052:	80 81       	ld	r24, Z
    4054:	8f 15       	cp	r24, r15
    4056:	19 f4       	brne	.+6      	; 0x405e <GetFIPAddr+0x48>
		     Result=i+1;
    4058:	89 2f       	mov	r24, r25
    405a:	8f 5f       	subi	r24, 0xFF	; 255
    405c:	05 c0       	rjmp	.+10     	; 0x4068 <GetFIPAddr+0x52>
			 break;
    405e:	31 96       	adiw	r30, 0x01	; 1

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
     for(i=0;i<8;i++){
    4060:	e2 17       	cp	r30, r18
    4062:	f3 07       	cpc	r31, r19
    4064:	a1 f7       	brne	.-24     	; 0x404e <GetFIPAddr+0x38>
    4066:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
   return Result;
}
    4068:	28 96       	adiw	r28, 0x08	; 8
    406a:	0f b6       	in	r0, 0x3f	; 63
    406c:	f8 94       	cli
    406e:	de bf       	out	0x3e, r29	; 62
    4070:	0f be       	out	0x3f, r0	; 63
    4072:	cd bf       	out	0x3d, r28	; 61
    4074:	cf 91       	pop	r28
    4076:	df 91       	pop	r29
    4078:	1f 91       	pop	r17
    407a:	0f 91       	pop	r16
    407c:	ff 90       	pop	r15
    407e:	08 95       	ret

00004080 <UpdateStandaloneStatus>:
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
         lcd_print(4,1,lcdteks);
     	 }
}

void UpdateStandaloneStatus(char xPumpID,char xPumpStatus){//xPumpID: (1-16)&0x0F
    4080:	ff 92       	push	r15
    4082:	0f 93       	push	r16
    4084:	1f 93       	push	r17
    4086:	cf 93       	push	r28
    4088:	df 93       	push	r29
    408a:	18 2f       	mov	r17, r24
    408c:	f6 2e       	mov	r15, r22
char strSend[20],iPumpID; //[xxxxxxxxxPx]
char iAddr;

	 if (xPumpID<16){
    408e:	80 31       	cpi	r24, 0x10	; 16
    4090:	08 f0       	brcs	.+2      	; 0x4094 <UpdateStandaloneStatus+0x14>
    4092:	4a c0       	rjmp	.+148    	; 0x4128 <UpdateStandaloneStatus+0xa8>
	     DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    4094:	8c e3       	ldi	r24, 0x3C	; 60
    4096:	91 e0       	ldi	r25, 0x01	; 1
    4098:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    409c:	80 93 5e 01 	sts	0x015E, r24
	     switch(DispenserBrand){
    40a0:	81 50       	subi	r24, 0x01	; 1
    40a2:	82 30       	cpi	r24, 0x02	; 2
    40a4:	08 f4       	brcc	.+2      	; 0x40a8 <UpdateStandaloneStatus+0x28>
    40a6:	81 2f       	mov	r24, r17
	     case ST_WAYNE_DART:
              iPumpID=xPumpID;
	          break;				   
	     }

		 iAddr=GetFIPAddr(iPumpID);
    40a8:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
		 if (iAddr>0){
    40ac:	88 23       	and	r24, r24
    40ae:	e1 f1       	breq	.+120    	; 0x4128 <UpdateStandaloneStatus+0xa8>
		     iAddr=iAddr-1;
			 if (strPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY)){//iFdiiiiiiiiiiiii
    40b0:	81 50       	subi	r24, 0x01	; 1
    40b2:	c8 2f       	mov	r28, r24
    40b4:	d0 e0       	ldi	r29, 0x00	; 0
    40b6:	80 e1       	ldi	r24, 0x10	; 16
    40b8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    40bc:	8e 01       	movw	r16, r28
    40be:	0e 5f       	subi	r16, 0xFE	; 254
    40c0:	1e 4f       	sbci	r17, 0xFE	; 254
    40c2:	f8 01       	movw	r30, r16
    40c4:	90 81       	ld	r25, Z
    40c6:	98 17       	cp	r25, r24
    40c8:	b1 f0       	breq	.+44     	; 0x40f6 <UpdateStandaloneStatus+0x76>
		         if (xPumpStatus!=PS_PRINT_READY)
    40ca:	f0 e1       	ldi	r31, 0x10	; 16
    40cc:	ff 16       	cp	r15, r31
    40ce:	21 f0       	breq	.+8      	; 0x40d8 <UpdateStandaloneStatus+0x58>
				     CurrentPumpStatus[iAddr]=xPumpStatus;
    40d0:	fe 01       	movw	r30, r28
    40d2:	e1 5a       	subi	r30, 0xA1	; 161
    40d4:	fe 4f       	sbci	r31, 0xFE	; 254
    40d6:	f0 82       	st	Z, r15
			     strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    40d8:	8f 2d       	mov	r24, r15
    40da:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    40de:	8e 01       	movw	r16, r28
    40e0:	0e 5f       	subi	r16, 0xFE	; 254
    40e2:	1e 4f       	sbci	r17, 0xFE	; 254
    40e4:	f8 01       	movw	r30, r16
    40e6:	80 83       	st	Z, r24
                 if (xPumpStatus==PS_FINISH_TOTALIZER)
    40e8:	f5 e1       	ldi	r31, 0x15	; 21
    40ea:	ff 16       	cp	r15, r31
    40ec:	c1 f4       	brne	.+48     	; 0x411e <UpdateStandaloneStatus+0x9e>
				     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    40ee:	c1 5a       	subi	r28, 0xA1	; 161
    40f0:	de 4f       	sbci	r29, 0xFE	; 254
    40f2:	88 81       	ld	r24, Y
    40f4:	10 c0       	rjmp	.+32     	; 0x4116 <UpdateStandaloneStatus+0x96>
    40f6:	fe 01       	movw	r30, r28
    40f8:	e1 5a       	subi	r30, 0xA1	; 161
    40fa:	fe 4f       	sbci	r31, 0xFE	; 254
		     }else if ((strPumpStatus[iAddr]==GetPumpStatusLabel(PS_PRINT_READY))||(xPumpStatus==PUMP_FEOT)||(xPumpStatus==PS_PRINTED)||(xPumpStatus==PS_TOTALIZER)){//P
			     if (xPumpStatus==PS_PRINTED){
    40fc:	81 e1       	ldi	r24, 0x11	; 17
    40fe:	f8 16       	cp	r15, r24
    4100:	11 f4       	brne	.+4      	; 0x4106 <UpdateStandaloneStatus+0x86>
				 //New
				     //if (CurrentPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY))
			             strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    4102:	80 81       	ld	r24, Z
    4104:	08 c0       	rjmp	.+16     	; 0x4116 <UpdateStandaloneStatus+0x96>
					 //    CurrentPumpStatus[iAddr]=PUMP_OFF;
					 //    strPumpStatus[iAddr]=GetPumpStatusLabel(PUMP_OFF);
					 //}

				  }
			     else CurrentPumpStatus[iAddr]=xPumpStatus;			 
    4106:	f0 82       	st	Z, r15
			 if (xPumpStatus==PUMP_FEOT){
    4108:	8b e0       	ldi	r24, 0x0B	; 11
    410a:	f8 16       	cp	r15, r24
    410c:	21 f0       	breq	.+8      	; 0x4116 <UpdateStandaloneStatus+0x96>
			     CurrentPumpStatus[iAddr]=xPumpStatus;
			     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
				 }
             else if (xPumpStatus==PS_TOTALIZER){
    410e:	f4 e1       	ldi	r31, 0x14	; 20
    4110:	ff 16       	cp	r15, r31
    4112:	29 f4       	brne	.+10     	; 0x411e <UpdateStandaloneStatus+0x9e>
			      strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    4114:	84 e1       	ldi	r24, 0x14	; 20
    4116:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    411a:	f8 01       	movw	r30, r16
    411c:	80 83       	st	Z, r24
				 }
		 }		 	     
         strPumpStatus[16]=0;
    411e:	10 92 12 01 	sts	0x0112, r1
	     IsNewPumpStatus=True;		 
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	80 93 01 01 	sts	0x0101, r24
		 }		 
	 }
}
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	1f 91       	pop	r17
    412e:	0f 91       	pop	r16
    4130:	ff 90       	pop	r15
    4132:	08 95       	ret

00004134 <GetPumpID>:
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
}


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
    4134:	1f 93       	push	r17
    4136:	df 93       	push	r29
    4138:	cf 93       	push	r28
    413a:	cd b7       	in	r28, 0x3d	; 61
    413c:	de b7       	in	r29, 0x3e	; 62
    413e:	28 97       	sbiw	r28, 0x08	; 8
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	f8 94       	cli
    4144:	de bf       	out	0x3e, r29	; 62
    4146:	0f be       	out	0x3f, r0	; 63
    4148:	cd bf       	out	0x3d, r28	; 61
    414a:	18 2f       	mov	r17, r24
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    414c:	ce 01       	movw	r24, r28
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	6a e4       	ldi	r22, 0x4A	; 74
    4152:	70 e0       	ldi	r23, 0x00	; 0
    4154:	48 e0       	ldi	r20, 0x08	; 8
    4156:	50 e0       	ldi	r21, 0x00	; 0
    4158:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	 Result=0;
	 if ((FIPAddr>0) && (FIPAddr<8)){
    415c:	81 2f       	mov	r24, r17
    415e:	81 50       	subi	r24, 0x01	; 1
    4160:	87 30       	cpi	r24, 0x07	; 7
    4162:	10 f0       	brcs	.+4      	; 0x4168 <GetPumpID+0x34>
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	04 c0       	rjmp	.+8      	; 0x4170 <GetPumpID+0x3c>
	    Result=PPumpID[FIPAddr-1];
    4168:	fe 01       	movw	r30, r28
    416a:	e1 0f       	add	r30, r17
    416c:	f1 1d       	adc	r31, r1
    416e:	80 81       	ld	r24, Z
	 }
   return Result;
}
    4170:	28 96       	adiw	r28, 0x08	; 8
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	f8 94       	cli
    4176:	de bf       	out	0x3e, r29	; 62
    4178:	0f be       	out	0x3f, r0	; 63
    417a:	cd bf       	out	0x3d, r28	; 61
    417c:	cf 91       	pop	r28
    417e:	df 91       	pop	r29
    4180:	1f 91       	pop	r17
    4182:	08 95       	ret

00004184 <GetTotalizerData>:
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
}



void GetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "0000000"
    4184:	0f 93       	push	r16
    4186:	1f 93       	push	r17
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	00 d0       	rcall	.+0      	; 0x418e <GetTotalizerData+0xa>
    418e:	00 d0       	rcall	.+0      	; 0x4190 <GetTotalizerData+0xc>
    4190:	00 d0       	rcall	.+0      	; 0x4192 <GetTotalizerData+0xe>
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
    4196:	96 2f       	mov	r25, r22
     char rawValue[6],iPumpAddr,iGrade;

	 iPumpAddr=(xPumpAddr&0x0F);
    4198:	4f 70       	andi	r20, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    419a:	21 50       	subi	r18, 0x01	; 1
    419c:	26 30       	cpi	r18, 0x06	; 6
    419e:	08 f4       	brcc	.+2      	; 0x41a2 <GetTotalizerData+0x1e>
    41a0:	52 2f       	mov	r21, r18
	     iGrade=xGradeAddr-1;
     
//TotalVolume[2][16][6][6];
//GetTotalizerData(TVOLUME,TOTALIZER_LAST,PumpNum,xGrade,strLastVolume);
	 if (TType==TVOLUME)eeprom_read_block((void*) &rawValue, (const void*) &(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    41a2:	88 23       	and	r24, r24
    41a4:	d9 f4       	brne	.+54     	; 0x41dc <GetTotalizerData+0x58>
    41a6:	64 e2       	ldi	r22, 0x24	; 36
    41a8:	46 9f       	mul	r20, r22
    41aa:	b0 01       	movw	r22, r0
    41ac:	11 24       	eor	r1, r1
    41ae:	29 2f       	mov	r18, r25
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	80 e2       	ldi	r24, 0x20	; 32
    41b4:	91 e0       	ldi	r25, 0x01	; 1
    41b6:	fc 01       	movw	r30, r24
    41b8:	2e 9f       	mul	r18, r30
    41ba:	c0 01       	movw	r24, r0
    41bc:	2f 9f       	mul	r18, r31
    41be:	90 0d       	add	r25, r0
    41c0:	3e 9f       	mul	r19, r30
    41c2:	90 0d       	add	r25, r0
    41c4:	11 24       	eor	r1, r1
    41c6:	68 0f       	add	r22, r24
    41c8:	79 1f       	adc	r23, r25
    41ca:	86 e0       	ldi	r24, 0x06	; 6
    41cc:	58 9f       	mul	r21, r24
    41ce:	c0 01       	movw	r24, r0
    41d0:	11 24       	eor	r1, r1
    41d2:	68 0f       	add	r22, r24
    41d4:	79 1f       	adc	r23, r25
    41d6:	67 53       	subi	r22, 0x37	; 55
    41d8:	7c 4f       	sbci	r23, 0xFC	; 252
    41da:	1c c0       	rjmp	.+56     	; 0x4214 <GetTotalizerData+0x90>
	 else 
	 if (TType==TMONEY)eeprom_read_block((void*) &rawValue, (const void*) &(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    41dc:	81 30       	cpi	r24, 0x01	; 1
    41de:	01 f5       	brne	.+64     	; 0x4220 <GetTotalizerData+0x9c>
    41e0:	64 e2       	ldi	r22, 0x24	; 36
    41e2:	46 9f       	mul	r20, r22
    41e4:	b0 01       	movw	r22, r0
    41e6:	11 24       	eor	r1, r1
    41e8:	29 2f       	mov	r18, r25
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	80 e2       	ldi	r24, 0x20	; 32
    41ee:	91 e0       	ldi	r25, 0x01	; 1
    41f0:	fc 01       	movw	r30, r24
    41f2:	2e 9f       	mul	r18, r30
    41f4:	c0 01       	movw	r24, r0
    41f6:	2f 9f       	mul	r18, r31
    41f8:	90 0d       	add	r25, r0
    41fa:	3e 9f       	mul	r19, r30
    41fc:	90 0d       	add	r25, r0
    41fe:	11 24       	eor	r1, r1
    4200:	68 0f       	add	r22, r24
    4202:	79 1f       	adc	r23, r25
    4204:	86 e0       	ldi	r24, 0x06	; 6
    4206:	58 9f       	mul	r21, r24
    4208:	c0 01       	movw	r24, r0
    420a:	11 24       	eor	r1, r1
    420c:	68 0f       	add	r22, r24
    420e:	79 1f       	adc	r23, r25
    4210:	67 5f       	subi	r22, 0xF7	; 247
    4212:	79 4f       	sbci	r23, 0xF9	; 249
    4214:	ce 01       	movw	r24, r28
    4216:	01 96       	adiw	r24, 0x01	; 1
    4218:	46 e0       	ldi	r20, 0x06	; 6
    421a:	50 e0       	ldi	r21, 0x00	; 0
    421c:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	 //Convert RawData to String 
	 RawToStr(rawValue,strValue);
    4220:	ce 01       	movw	r24, r28
    4222:	01 96       	adiw	r24, 0x01	; 1
    4224:	b8 01       	movw	r22, r16
    4226:	0e 94 07 1a 	call	0x340e	; 0x340e <RawToStr>
}
    422a:	26 96       	adiw	r28, 0x06	; 6
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	f8 94       	cli
    4230:	de bf       	out	0x3e, r29	; 62
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	cd bf       	out	0x3d, r28	; 61
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	1f 91       	pop	r17
    423c:	0f 91       	pop	r16
    423e:	08 95       	ret

00004240 <SaveToEEPROM>:
     return Result;
}



char SaveToEEPROM(char *Src,char *Dest,unsigned int Length){
    4240:	ef 92       	push	r14
    4242:	ff 92       	push	r15
    4244:	0f 93       	push	r16
    4246:	1f 93       	push	r17
    4248:	df 93       	push	r29
    424a:	cf 93       	push	r28
    424c:	cd b7       	in	r28, 0x3d	; 61
    424e:	de b7       	in	r29, 0x3e	; 62
    4250:	ac 97       	sbiw	r28, 0x2c	; 44
    4252:	0f b6       	in	r0, 0x3f	; 63
    4254:	f8 94       	cli
    4256:	de bf       	out	0x3e, r29	; 62
    4258:	0f be       	out	0x3f, r0	; 63
    425a:	cd bf       	out	0x3d, r28	; 61
    425c:	9a a7       	std	Y+42, r25	; 0x2a
    425e:	89 a7       	std	Y+41, r24	; 0x29
    4260:	7c a7       	std	Y+44, r23	; 0x2c
    4262:	6b a7       	std	Y+43, r22	; 0x2b
    4264:	7a 01       	movw	r14, r20
     char strCompare[40];
	 //Read Previous Data
     eeprom_read_block((void*)&Dest,(const void*)&strCompare, Length);
    4266:	8e 01       	movw	r16, r28
    4268:	05 5d       	subi	r16, 0xD5	; 213
    426a:	1f 4f       	sbci	r17, 0xFF	; 255
    426c:	c8 01       	movw	r24, r16
    426e:	be 01       	movw	r22, r28
    4270:	6f 5f       	subi	r22, 0xFF	; 255
    4272:	7f 4f       	sbci	r23, 0xFF	; 255
    4274:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
     //if 
     eeprom_write_block((const void*)&Src,(void*)&Dest, Length);
    4278:	ce 01       	movw	r24, r28
    427a:	89 96       	adiw	r24, 0x29	; 41
    427c:	b8 01       	movw	r22, r16
    427e:	a7 01       	movw	r20, r14
    4280:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
}
    4284:	ac 96       	adiw	r28, 0x2c	; 44
    4286:	0f b6       	in	r0, 0x3f	; 63
    4288:	f8 94       	cli
    428a:	de bf       	out	0x3e, r29	; 62
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	cd bf       	out	0x3d, r28	; 61
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	1f 91       	pop	r17
    4296:	0f 91       	pop	r16
    4298:	ff 90       	pop	r15
    429a:	ef 90       	pop	r14
    429c:	08 95       	ret

0000429e <SelectMark>:
	      break;
	 }
    return Result;
}

char SelectMark(char InMark){
    429e:	df 92       	push	r13
    42a0:	ef 92       	push	r14
    42a2:	ff 92       	push	r15
    42a4:	0f 93       	push	r16
    42a6:	1f 93       	push	r17
    42a8:	df 93       	push	r29
    42aa:	cf 93       	push	r28
    42ac:	00 d0       	rcall	.+0      	; 0x42ae <SelectMark+0x10>
    42ae:	00 d0       	rcall	.+0      	; 0x42b0 <SelectMark+0x12>
    42b0:	0f 92       	push	r0
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	d8 2e       	mov	r13, r24
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    42b8:	8e 01       	movw	r16, r28
    42ba:	0f 5f       	subi	r16, 0xFF	; 255
    42bc:	1f 4f       	sbci	r17, 0xFF	; 255
    42be:	c8 01       	movw	r24, r16
    42c0:	65 e4       	ldi	r22, 0x45	; 69
    42c2:	70 e0       	ldi	r23, 0x00	; 0
    42c4:	45 e0       	ldi	r20, 0x05	; 5
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    42cc:	ed 2d       	mov	r30, r13
    42ce:	21 e0       	ldi	r18, 0x01	; 1
    42d0:	30 e0       	ldi	r19, 0x00	; 0
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
    42d2:	78 01       	movw	r14, r16
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
    42d4:	d8 01       	movw	r26, r16
    42d6:	8c 91       	ld	r24, X
    42d8:	d8 16       	cp	r13, r24
    42da:	49 f4       	brne	.+18     	; 0x42ee <SelectMark+0x50>
		     Result=PMark[(i+1)%Length];
    42dc:	c9 01       	movw	r24, r18
    42de:	65 e0       	ldi	r22, 0x05	; 5
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    42e6:	f7 01       	movw	r30, r14
    42e8:	e8 0f       	add	r30, r24
    42ea:	f9 1f       	adc	r31, r25
    42ec:	e0 81       	ld	r30, Z
    42ee:	0f 5f       	subi	r16, 0xFF	; 255
    42f0:	1f 4f       	sbci	r17, 0xFF	; 255
    42f2:	2f 5f       	subi	r18, 0xFF	; 255
    42f4:	3f 4f       	sbci	r19, 0xFF	; 255
char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
    42f6:	26 30       	cpi	r18, 0x06	; 6
    42f8:	31 05       	cpc	r19, r1
    42fa:	61 f7       	brne	.-40     	; 0x42d4 <SelectMark+0x36>
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
	 }
     return Result;
}
    42fc:	8e 2f       	mov	r24, r30
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	ff 90       	pop	r15
    4312:	ef 90       	pop	r14
    4314:	df 90       	pop	r13
    4316:	08 95       	ret

00004318 <SumChecksum>:
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
    4318:	ac 01       	movw	r20, r24
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    431a:	dc 01       	movw	r26, r24
    431c:	0d 90       	ld	r0, X+
    431e:	00 20       	and	r0, r0
    4320:	e9 f7       	brne	.-6      	; 0x431c <SumChecksum+0x4>
    4322:	11 97       	sbiw	r26, 0x01	; 1
    4324:	a8 1b       	sub	r26, r24
    4326:	b9 0b       	sbc	r27, r25
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	06 c0       	rjmp	.+12     	; 0x433c <SumChecksum+0x24>
	     SigmaSum=SigmaSum+strChecked[i];
    4330:	e4 0f       	add	r30, r20
    4332:	f5 1f       	adc	r31, r21
    4334:	80 81       	ld	r24, Z
    4336:	28 0f       	add	r18, r24
    4338:	31 1d       	adc	r19, r1
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    433a:	9f 5f       	subi	r25, 0xFF	; 255
    433c:	e9 2f       	mov	r30, r25
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	ea 17       	cp	r30, r26
    4342:	fb 07       	cpc	r31, r27
    4344:	a8 f3       	brcs	.-22     	; 0x4330 <SumChecksum+0x18>
	     SigmaSum=SigmaSum+strChecked[i];
	 }
	 Result=(SigmaSum%255);
    4346:	c9 01       	movw	r24, r18
    4348:	6f ef       	ldi	r22, 0xFF	; 255
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
	 if (Result==0)Result=255;
    4350:	88 23       	and	r24, r24
    4352:	09 f4       	brne	.+2      	; 0x4356 <SumChecksum+0x3e>
    4354:	8f ef       	ldi	r24, 0xFF	; 255
   return Result;
}
    4356:	08 95       	ret

00004358 <IsGeniusCommand>:
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}

char IsGeniusCommand(char GCommand){
    4358:	ff 92       	push	r15
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    4366:	2a 97       	sbiw	r28, 0x0a	; 10
    4368:	0f b6       	in	r0, 0x3f	; 63
    436a:	f8 94       	cli
    436c:	de bf       	out	0x3e, r29	; 62
    436e:	0f be       	out	0x3f, r0	; 63
    4370:	cd bf       	out	0x3d, r28	; 61
    4372:	f8 2e       	mov	r15, r24
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
    4374:	00 d0       	rcall	.+0      	; 0x4376 <IsGeniusCommand+0x1e>
    4376:	00 d0       	rcall	.+0      	; 0x4378 <IsGeniusCommand+0x20>
    4378:	8e 01       	movw	r16, r28
    437a:	0f 5f       	subi	r16, 0xFF	; 255
    437c:	1f 4f       	sbci	r17, 0xFF	; 255
    437e:	ed b7       	in	r30, 0x3d	; 61
    4380:	fe b7       	in	r31, 0x3e	; 62
    4382:	12 83       	std	Z+2, r17	; 0x02
    4384:	01 83       	std	Z+1, r16	; 0x01
    4386:	89 e5       	ldi	r24, 0x59	; 89
    4388:	95 e0       	ldi	r25, 0x05	; 5
    438a:	94 83       	std	Z+4, r25	; 0x04
    438c:	83 83       	std	Z+3, r24	; 0x03
    438e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 for(i=0;i<strlen(CommandList);i++){
    4392:	d8 01       	movw	r26, r16
    4394:	0d 90       	ld	r0, X+
    4396:	00 20       	and	r0, r0
    4398:	e9 f7       	brne	.-6      	; 0x4394 <IsGeniusCommand+0x3c>
    439a:	11 97       	sbiw	r26, 0x01	; 1
    439c:	a0 1b       	sub	r26, r16
    439e:	b1 0b       	sbc	r27, r17
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
    43a8:	0f 90       	pop	r0
	    if (CommandList[i]==GCommand){
    43aa:	98 01       	movw	r18, r16
    43ac:	08 c0       	rjmp	.+16     	; 0x43be <IsGeniusCommand+0x66>
    43ae:	e2 0f       	add	r30, r18
    43b0:	f3 1f       	adc	r31, r19
    43b2:	80 81       	ld	r24, Z
    43b4:	8f 15       	cp	r24, r15
    43b6:	11 f4       	brne	.+4      	; 0x43bc <IsGeniusCommand+0x64>
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	07 c0       	rjmp	.+14     	; 0x43ca <IsGeniusCommand+0x72>

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
    43bc:	9f 5f       	subi	r25, 0xFF	; 255
    43be:	e9 2f       	mov	r30, r25
    43c0:	f0 e0       	ldi	r31, 0x00	; 0
    43c2:	ea 17       	cp	r30, r26
    43c4:	fb 07       	cpc	r31, r27
    43c6:	98 f3       	brcs	.-26     	; 0x43ae <IsGeniusCommand+0x56>
    43c8:	80 e0       	ldi	r24, 0x00	; 0
		    Result=True;
			break;
			}
	 }
   return Result;	 
}
    43ca:	2a 96       	adiw	r28, 0x0a	; 10
    43cc:	0f b6       	in	r0, 0x3f	; 63
    43ce:	f8 94       	cli
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	cd bf       	out	0x3d, r28	; 61
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	1f 91       	pop	r17
    43dc:	0f 91       	pop	r16
    43de:	ff 90       	pop	r15
    43e0:	08 95       	ret

000043e2 <Pos>:
  */
}
		

//Genius Protocol Version:1.0 AKR
int Pos(char *Substr, char *String){//1245:4645
    43e2:	0f 93       	push	r16
    43e4:	1f 93       	push	r17
    43e6:	cf 93       	push	r28
    43e8:	df 93       	push	r29
    43ea:	ac 01       	movw	r20, r24
    char i,j,CountMatch;
	char Length,subLen,PosFound;

	Length=strlen(String);
    43ec:	fb 01       	movw	r30, r22
    43ee:	01 90       	ld	r0, Z+
    43f0:	00 20       	and	r0, r0
    43f2:	e9 f7       	brne	.-6      	; 0x43ee <Pos+0xc>
    43f4:	31 97       	sbiw	r30, 0x01	; 1
    43f6:	1e 2f       	mov	r17, r30
    43f8:	16 1b       	sub	r17, r22
	subLen=strlen(Substr);
    43fa:	fc 01       	movw	r30, r24
    43fc:	01 90       	ld	r0, Z+
    43fe:	00 20       	and	r0, r0
    4400:	e9 f7       	brne	.-6      	; 0x43fc <Pos+0x1a>
    4402:	31 97       	sbiw	r30, 0x01	; 1
    4404:	0e 2f       	mov	r16, r30
    4406:	08 1b       	sub	r16, r24
    4408:	db 01       	movw	r26, r22
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	18 c0       	rjmp	.+48     	; 0x443e <Pos+0x5c>
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
    440e:	9c 91       	ld	r25, X
    4410:	fa 01       	movw	r30, r20
    4412:	80 81       	ld	r24, Z
    4414:	98 17       	cp	r25, r24
    4416:	89 f4       	brne	.+34     	; 0x443a <Pos+0x58>
    4418:	ed 01       	movw	r28, r26
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	09 c0       	rjmp	.+18     	; 0x4432 <Pos+0x50>
		    CountMatch=0;
			for(j=0;j<subLen;j++){
			    //notFound
			    if (Substr[j]==String[i+j]){
    4420:	fa 01       	movw	r30, r20
    4422:	e2 0f       	add	r30, r18
    4424:	f3 1f       	adc	r31, r19
    4426:	90 81       	ld	r25, Z
    4428:	89 91       	ld	r24, Y+
    442a:	2f 5f       	subi	r18, 0xFF	; 255
    442c:	3f 4f       	sbci	r19, 0xFF	; 255
    442e:	98 17       	cp	r25, r24
    4430:	21 f4       	brne	.+8      	; 0x443a <Pos+0x58>
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
		    CountMatch=0;
			for(j=0;j<subLen;j++){
    4432:	20 17       	cp	r18, r16
    4434:	a8 f3       	brcs	.-22     	; 0x4420 <Pos+0x3e>
    4436:	86 2f       	mov	r24, r22
    4438:	05 c0       	rjmp	.+10     	; 0x4444 <Pos+0x62>
	char Length,subLen,PosFound;

	Length=strlen(String);
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
    443a:	6f 5f       	subi	r22, 0xFF	; 255
    443c:	11 96       	adiw	r26, 0x01	; 1
    443e:	61 17       	cp	r22, r17
    4440:	30 f3       	brcs	.-52     	; 0x440e <Pos+0x2c>
    4442:	81 2f       	mov	r24, r17
			    break;  
			}
		}
	}
  return  PosFound;
}
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	08 95       	ret

00004450 <CreateReport>:
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    4450:	7f 92       	push	r7
    4452:	8f 92       	push	r8
    4454:	9f 92       	push	r9
    4456:	af 92       	push	r10
    4458:	bf 92       	push	r11
    445a:	cf 92       	push	r12
    445c:	df 92       	push	r13
    445e:	ef 92       	push	r14
    4460:	ff 92       	push	r15
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	5c 01       	movw	r10, r24
    446c:	6b 01       	movw	r12, r22
    446e:	4a 01       	movw	r8, r20
     unsigned int iPos,PosResult,Length;
	 char i,strSend[20];
	 Length=strlen(strData);
    4470:	ec 01       	movw	r28, r24
    4472:	09 90       	ld	r0, Y+
    4474:	00 20       	and	r0, r0
    4476:	e9 f7       	brne	.-6      	; 0x4472 <CreateReport+0x22>
    4478:	21 97       	sbiw	r28, 0x01	; 1
    447a:	c8 1b       	sub	r28, r24
    447c:	d9 0b       	sbc	r29, r25
    447e:	c9 32       	cpi	r28, 0x29	; 41
    4480:	d1 05       	cpc	r29, r1
    4482:	10 f0       	brcs	.+4      	; 0x4488 <CreateReport+0x38>
    4484:	c8 e2       	ldi	r28, 0x28	; 40
    4486:	d0 e0       	ldi	r29, 0x00	; 0
	 if (Length>BORDER_LENGTH)Length=BORDER_LENGTH;
     
	 iPos=*Pos;
    4488:	f4 01       	movw	r30, r8
    448a:	00 81       	ld	r16, Z
    448c:	11 81       	ldd	r17, Z+1	; 0x01
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    448e:	76 01       	movw	r14, r12
    4490:	e0 0e       	add	r14, r16
    4492:	f1 1e       	adc	r15, r17
    4494:	8a e0       	ldi	r24, 0x0A	; 10
    4496:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <GetBorderValue>
    449a:	78 2e       	mov	r7, r24
    449c:	f7 01       	movw	r30, r14
    449e:	80 83       	st	Z, r24
     iPos++;
    44a0:	98 01       	movw	r18, r16
    44a2:	2f 5f       	subi	r18, 0xFF	; 255
    44a4:	3f 4f       	sbci	r19, 0xFF	; 255
    44a6:	d7 01       	movw	r26, r14
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	07 c0       	rjmp	.+14     	; 0x44ba <CreateReport+0x6a>

	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
    44ac:	ea 0d       	add	r30, r10
    44ae:	fb 1d       	adc	r31, r11
    44b0:	80 81       	ld	r24, Z
    44b2:	8c 93       	st	X, r24
		  iPos++;
    44b4:	2f 5f       	subi	r18, 0xFF	; 255
    44b6:	3f 4f       	sbci	r19, 0xFF	; 255
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    44b8:	9f 5f       	subi	r25, 0xFF	; 255
    44ba:	e9 2f       	mov	r30, r25
    44bc:	f0 e0       	ldi	r31, 0x00	; 0
    44be:	11 96       	adiw	r26, 0x01	; 1
    44c0:	ec 17       	cp	r30, r28
    44c2:	fd 07       	cpc	r31, r29
    44c4:	98 f3       	brcs	.-26     	; 0x44ac <CreateReport+0x5c>
    44c6:	62 2f       	mov	r22, r18
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
    44c8:	c8 32       	cpi	r28, 0x28	; 40
    44ca:	d1 05       	cpc	r29, r1
    44cc:	91 f0       	breq	.+36     	; 0x44f2 <CreateReport+0xa2>
    44ce:	f6 01       	movw	r30, r12
    44d0:	e2 0f       	add	r30, r18
    44d2:	f3 1f       	adc	r31, r19
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    44d4:	48 e2       	ldi	r20, 0x28	; 40
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	4c 1b       	sub	r20, r28
    44da:	5d 0b       	sbc	r21, r29
	          strPrnBuffer[iPos]=' ';
    44dc:	70 e2       	ldi	r23, 0x20	; 32
    44de:	03 c0       	rjmp	.+6      	; 0x44e6 <CreateReport+0x96>
    44e0:	71 93       	st	Z+, r23
		      iPos++;
    44e2:	2f 5f       	subi	r18, 0xFF	; 255
    44e4:	3f 4f       	sbci	r19, 0xFF	; 255
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    44e6:	82 2f       	mov	r24, r18
    44e8:	86 1b       	sub	r24, r22
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	84 17       	cp	r24, r20
    44ee:	95 07       	cpc	r25, r21
    44f0:	b8 f3       	brcs	.-18     	; 0x44e0 <CreateReport+0x90>
	          strPrnBuffer[iPos]=' ';
		      iPos++;
	     }	    
	 }
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    44f2:	f6 01       	movw	r30, r12
    44f4:	e2 0f       	add	r30, r18
    44f6:	f3 1f       	adc	r31, r19
    44f8:	70 82       	st	Z, r7
     iPos++;
    44fa:	c9 01       	movw	r24, r18
    44fc:	01 96       	adiw	r24, 0x01	; 1
     //PosResult=*Pos+Length;
	 strPrnBuffer[iPos]=0x0D; 
    44fe:	c8 0e       	add	r12, r24
    4500:	d9 1e       	adc	r13, r25
    4502:	2d e0       	ldi	r18, 0x0D	; 13
    4504:	f6 01       	movw	r30, r12
    4506:	20 83       	st	Z, r18
	 iPos++;

   //*Pos=PosResult+1;
   *Pos=iPos;
    4508:	01 96       	adiw	r24, 0x01	; 1
    450a:	f4 01       	movw	r30, r8
    450c:	91 83       	std	Z+1, r25	; 0x01
    450e:	80 83       	st	Z, r24
    //sprintf_P(strSend,PSTR("Pos:%d"),*Pos);
	//uart_print(0,1,strSend);
}
    4510:	df 91       	pop	r29
    4512:	cf 91       	pop	r28
    4514:	1f 91       	pop	r17
    4516:	0f 91       	pop	r16
    4518:	ff 90       	pop	r15
    451a:	ef 90       	pop	r14
    451c:	df 90       	pop	r13
    451e:	cf 90       	pop	r12
    4520:	bf 90       	pop	r11
    4522:	af 90       	pop	r10
    4524:	9f 90       	pop	r9
    4526:	8f 90       	pop	r8
    4528:	7f 90       	pop	r7
    452a:	08 95       	ret

0000452c <AddList>:

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
void AddList(char GradeId, char *strList){
    452c:	38 2f       	mov	r19, r24
    452e:	ab 01       	movw	r20, r22
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
    4530:	81 50       	subi	r24, 0x01	; 1
    4532:	86 30       	cpi	r24, 0x06	; 6
    4534:	68 f5       	brcc	.+90     	; 0x4590 <AddList+0x64>
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
    4536:	fb 01       	movw	r30, r22
    4538:	01 90       	ld	r0, Z+
    453a:	00 20       	and	r0, r0
    453c:	e9 f7       	brne	.-6      	; 0x4538 <AddList+0xc>
    453e:	31 97       	sbiw	r30, 0x01	; 1
    4540:	e6 1b       	sub	r30, r22
    4542:	f7 0b       	sbc	r31, r23
    4544:	7e 2f       	mov	r23, r30
	     if (Length>0){
    4546:	ee 23       	and	r30, r30
    4548:	11 f4       	brne	.+4      	; 0x454e <AddList+0x22>
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	14 c0       	rjmp	.+40     	; 0x4576 <AddList+0x4a>
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	90 e0       	ldi	r25, 0x00	; 0
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    4552:	63 2f       	mov	r22, r19
    4554:	60 5d       	subi	r22, 0xD0	; 208
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4556:	fa 01       	movw	r30, r20
    4558:	e8 0f       	add	r30, r24
    455a:	f9 1f       	adc	r31, r25
    455c:	e0 81       	ld	r30, Z
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    455e:	3a 30       	cpi	r19, 0x0A	; 10
    4560:	10 f0       	brcs	.+4      	; 0x4566 <AddList+0x3a>
    4562:	20 e3       	ldi	r18, 0x30	; 48
    4564:	01 c0       	rjmp	.+2      	; 0x4568 <AddList+0x3c>
	    Result='0'+X;
    4566:	26 2f       	mov	r18, r22
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4568:	e2 17       	cp	r30, r18
    456a:	91 f0       	breq	.+36     	; 0x4590 <AddList+0x64>
    456c:	28 2f       	mov	r18, r24
    456e:	2f 5f       	subi	r18, 0xFF	; 255
    4570:	01 96       	adiw	r24, 0x01	; 1
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
    4572:	87 17       	cp	r24, r23
    4574:	80 f3       	brcs	.-32     	; 0x4556 <AddList+0x2a>
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    4576:	62 2f       	mov	r22, r18
    4578:	70 e0       	ldi	r23, 0x00	; 0
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    457a:	3a 30       	cpi	r19, 0x0A	; 10
    457c:	10 f0       	brcs	.+4      	; 0x4582 <AddList+0x56>
    457e:	80 e3       	ldi	r24, 0x30	; 48
    4580:	02 c0       	rjmp	.+4      	; 0x4586 <AddList+0x5a>
	    Result='0'+X;
    4582:	83 2f       	mov	r24, r19
    4584:	80 5d       	subi	r24, 0xD0	; 208
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    4586:	fa 01       	movw	r30, r20
    4588:	e6 0f       	add	r30, r22
    458a:	f7 1f       	adc	r31, r23
    458c:	80 83       	st	Z, r24
		     strList[iPos+1]=0;
    458e:	11 82       	std	Z+1, r1	; 0x01
    4590:	08 95       	ret

00004592 <ClearList>:
	 AddSpaceLag(strProductName,10);
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
    4592:	dc 01       	movw	r26, r24
    4594:	0d 90       	ld	r0, X+
    4596:	00 20       	and	r0, r0
    4598:	e9 f7       	brne	.-6      	; 0x4594 <ClearList+0x2>
    459a:	11 97       	sbiw	r26, 0x01	; 1
    459c:	a8 1b       	sub	r26, r24
    459e:	b9 0b       	sbc	r27, r25
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	06 c0       	rjmp	.+12     	; 0x45b2 <ClearList+0x20>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    45a6:	fc 01       	movw	r30, r24
    45a8:	e2 0f       	add	r30, r18
    45aa:	f3 1f       	adc	r31, r19
    45ac:	10 82       	st	Z, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    45ae:	2f 5f       	subi	r18, 0xFF	; 255
    45b0:	3f 4f       	sbci	r19, 0xFF	; 255
    45b2:	2a 17       	cp	r18, r26
    45b4:	3b 07       	cpc	r19, r27
    45b6:	b8 f3       	brcs	.-18     	; 0x45a6 <ClearList+0x14>
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
    45b8:	08 95       	ret

000045ba <CalcSegmen>:
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    45ba:	6f 92       	push	r6
    45bc:	7f 92       	push	r7
    45be:	8f 92       	push	r8
    45c0:	9f 92       	push	r9
    45c2:	bf 92       	push	r11
    45c4:	cf 92       	push	r12
    45c6:	df 92       	push	r13
    45c8:	ef 92       	push	r14
    45ca:	ff 92       	push	r15
    45cc:	0f 93       	push	r16
    45ce:	1f 93       	push	r17
    45d0:	df 93       	push	r29
    45d2:	cf 93       	push	r28
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	64 97       	sbiw	r28, 0x14	; 20
    45da:	0f b6       	in	r0, 0x3f	; 63
    45dc:	f8 94       	cli
    45de:	de bf       	out	0x3e, r29	; 62
    45e0:	0f be       	out	0x3f, r0	; 63
    45e2:	cd bf       	out	0x3d, r28	; 61
    45e4:	7c 01       	movw	r14, r24
    45e6:	6a 01       	movw	r12, r20
    45e8:	bb 24       	eor	r11, r11
    45ea:	30 e0       	ldi	r19, 0x00	; 0

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    45ec:	06 2f       	mov	r16, r22
    45ee:	10 e0       	ldi	r17, 0x00	; 0
    45f0:	00 53       	subi	r16, 0x30	; 48
    45f2:	10 40       	sbci	r17, 0x00	; 0
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
    45f4:	3e 01       	movw	r6, r28
    45f6:	08 94       	sec
    45f8:	61 1c       	adc	r6, r1
    45fa:	71 1c       	adc	r7, r1
		 tmpResult[i+1]=0;
    45fc:	62 e0       	ldi	r22, 0x02	; 2
    45fe:	86 2e       	mov	r8, r22
    4600:	91 2c       	mov	r9, r1
    4602:	8c 0e       	add	r8, r28
    4604:	9d 1e       	adc	r9, r29
    4606:	24 c0       	rjmp	.+72     	; 0x4650 <CalcSegmen+0x96>

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    4608:	11 97       	sbiw	r26, 0x01	; 1
    460a:	a4 1b       	sub	r26, r20
    460c:	b5 0b       	sbc	r27, r21
    460e:	ae 0d       	add	r26, r14
    4610:	bf 1d       	adc	r27, r15
    4612:	8c 91       	ld	r24, X
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	c0 97       	sbiw	r24, 0x30	; 48
    4618:	bc 01       	movw	r22, r24
    461a:	60 9f       	mul	r22, r16
    461c:	c0 01       	movw	r24, r0
    461e:	61 9f       	mul	r22, r17
    4620:	90 0d       	add	r25, r0
    4622:	70 9f       	mul	r23, r16
    4624:	90 0d       	add	r25, r0
    4626:	11 24       	eor	r1, r1
    4628:	23 2f       	mov	r18, r19
    462a:	28 0f       	add	r18, r24
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    462c:	82 2f       	mov	r24, r18
    462e:	6a e0       	ldi	r22, 0x0A	; 10
    4630:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    4634:	38 2f       	mov	r19, r24
	     tmpResult[i]='0'+xRes;	 
    4636:	f3 01       	movw	r30, r6
    4638:	e4 0f       	add	r30, r20
    463a:	f5 1f       	adc	r31, r21
    463c:	82 2f       	mov	r24, r18
    463e:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    4642:	90 5d       	subi	r25, 0xD0	; 208
    4644:	90 83       	st	Z, r25
		 tmpResult[i+1]=0;
    4646:	48 0d       	add	r20, r8
    4648:	59 1d       	adc	r21, r9
    464a:	fa 01       	movw	r30, r20
    464c:	10 82       	st	Z, r1
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    464e:	b3 94       	inc	r11
    4650:	4b 2d       	mov	r20, r11
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	d7 01       	movw	r26, r14
    4656:	0d 90       	ld	r0, X+
    4658:	00 20       	and	r0, r0
    465a:	e9 f7       	brne	.-6      	; 0x4656 <CalcSegmen+0x9c>
    465c:	11 97       	sbiw	r26, 0x01	; 1
    465e:	ae 19       	sub	r26, r14
    4660:	bf 09       	sbc	r27, r15
    4662:	4a 17       	cp	r20, r26
    4664:	5b 07       	cpc	r21, r27
    4666:	80 f2       	brcs	.-96     	; 0x4608 <CalcSegmen+0x4e>
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
		 tmpResult[i+1]=0;
	 }
	 if (xResNext>0){
    4668:	33 23       	and	r19, r19
    466a:	89 f0       	breq	.+34     	; 0x468e <CalcSegmen+0xd4>
	     lenR=strlen(tmpResult);
    466c:	fe 01       	movw	r30, r28
    466e:	31 96       	adiw	r30, 0x01	; 1
    4670:	df 01       	movw	r26, r30
    4672:	0d 90       	ld	r0, X+
    4674:	00 20       	and	r0, r0
    4676:	e9 f7       	brne	.-6      	; 0x4672 <CalcSegmen+0xb8>
    4678:	11 97       	sbiw	r26, 0x01	; 1
	     tmpResult[lenR]='0'+xResNext;
    467a:	ae 1b       	sub	r26, r30
    467c:	b0 e0       	ldi	r27, 0x00	; 0
    467e:	ea 0f       	add	r30, r26
    4680:	fb 1f       	adc	r31, r27
    4682:	30 5d       	subi	r19, 0xD0	; 208
    4684:	30 83       	st	Z, r19
		 tmpResult[lenR+1]=0;	 
    4686:	ac 0f       	add	r26, r28
    4688:	bd 1f       	adc	r27, r29
    468a:	12 96       	adiw	r26, 0x02	; 2
    468c:	1c 92       	st	X, r1
	 }
	 lenR=strlen(tmpResult);
    468e:	de 01       	movw	r26, r28
    4690:	11 96       	adiw	r26, 0x01	; 1
    4692:	fd 01       	movw	r30, r26
    4694:	01 90       	ld	r0, Z+
    4696:	00 20       	and	r0, r0
    4698:	e9 f7       	brne	.-6      	; 0x4694 <CalcSegmen+0xda>
    469a:	31 97       	sbiw	r30, 0x01	; 1
    469c:	9e 2f       	mov	r25, r30
    469e:	9a 1b       	sub	r25, r26
    46a0:	a9 0f       	add	r26, r25
    46a2:	b1 1d       	adc	r27, r1
    46a4:	f6 01       	movw	r30, r12
    46a6:	02 c0       	rjmp	.+4      	; 0x46ac <CalcSegmen+0xf2>
	 for (i=0;i<lenR;i++){
	     strResult[i]=tmpResult[lenR-1-i];
    46a8:	8c 91       	ld	r24, X
    46aa:	81 93       	st	Z+, r24
    46ac:	11 97       	sbiw	r26, 0x01	; 1
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    46ae:	ac 17       	cp	r26, r28
    46b0:	bd 07       	cpc	r27, r29
    46b2:	d1 f7       	brne	.-12     	; 0x46a8 <CalcSegmen+0xee>
	     strResult[i]=tmpResult[lenR-1-i];
	 }
	 strResult[lenR]=0;
    46b4:	c9 0e       	add	r12, r25
    46b6:	d1 1c       	adc	r13, r1
    46b8:	f6 01       	movw	r30, r12
    46ba:	10 82       	st	Z, r1
}
    46bc:	64 96       	adiw	r28, 0x14	; 20
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	f8 94       	cli
    46c2:	de bf       	out	0x3e, r29	; 62
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	cd bf       	out	0x3d, r28	; 61
    46c8:	cf 91       	pop	r28
    46ca:	df 91       	pop	r29
    46cc:	1f 91       	pop	r17
    46ce:	0f 91       	pop	r16
    46d0:	ff 90       	pop	r15
    46d2:	ef 90       	pop	r14
    46d4:	df 90       	pop	r13
    46d6:	cf 90       	pop	r12
    46d8:	bf 90       	pop	r11
    46da:	9f 90       	pop	r9
    46dc:	8f 90       	pop	r8
    46de:	7f 90       	pop	r7
    46e0:	6f 90       	pop	r6
    46e2:	08 95       	ret

000046e4 <GetMinusPos>:
	      break;	 
	 }
*/
}

char GetMinusPos(char *strNumber){
    46e4:	ac 01       	movw	r20, r24
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    46e6:	dc 01       	movw	r26, r24
    46e8:	0d 90       	ld	r0, X+
    46ea:	00 20       	and	r0, r0
    46ec:	e9 f7       	brne	.-6      	; 0x46e8 <GetMinusPos+0x4>
    46ee:	11 97       	sbiw	r26, 0x01	; 1
    46f0:	a8 1b       	sub	r26, r24
    46f2:	b9 0b       	sbc	r27, r25
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	0a c0       	rjmp	.+20     	; 0x470c <GetMinusPos+0x28>
	     if (strNumber[i]=='-'){
    46f8:	e4 0f       	add	r30, r20
    46fa:	f5 1f       	adc	r31, r21
    46fc:	80 81       	ld	r24, Z
    46fe:	92 2f       	mov	r25, r18
    4700:	9f 5f       	subi	r25, 0xFF	; 255
    4702:	8d 32       	cpi	r24, 0x2D	; 45
    4704:	11 f4       	brne	.+4      	; 0x470a <GetMinusPos+0x26>
		     Result=i+1;
    4706:	89 2f       	mov	r24, r25
    4708:	08 95       	ret
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    470a:	29 2f       	mov	r18, r25
    470c:	e2 2f       	mov	r30, r18
    470e:	f0 e0       	ldi	r31, 0x00	; 0
    4710:	ea 17       	cp	r30, r26
    4712:	fb 07       	cpc	r31, r27
    4714:	88 f3       	brcs	.-30     	; 0x46f8 <GetMinusPos+0x14>
    4716:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
  return Result;     
}
    4718:	08 95       	ret

0000471a <IsMinus>:

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
	 if (GetMinusPos(strNumber)>0){
    471a:	0e 94 72 23 	call	0x46e4	; 0x46e4 <GetMinusPos>
    471e:	81 11       	cpse	r24, r1
    4720:	81 e0       	ldi	r24, 0x01	; 1
	     Result=True;
	 }     
  return Result;
}
    4722:	08 95       	ret

00004724 <RemoveMinus>:

void RemoveMinus(char *strNumber){
    4724:	cf 93       	push	r28
    4726:	df 93       	push	r29
    4728:	ec 01       	movw	r28, r24
     char MinPos,Length;

     if (IsMinus(strNumber)==True){
    472a:	0e 94 8d 23 	call	0x471a	; 0x471a <IsMinus>
    472e:	81 30       	cpi	r24, 0x01	; 1
    4730:	19 f5       	brne	.+70     	; 0x4778 <RemoveMinus+0x54>
	     MinPos=GetMinusPos(strNumber);
    4732:	ce 01       	movw	r24, r28
    4734:	0e 94 72 23 	call	0x46e4	; 0x46e4 <GetMinusPos>
		 Length=strlen(strNumber);
    4738:	de 01       	movw	r26, r28
    473a:	0d 90       	ld	r0, X+
    473c:	00 20       	and	r0, r0
    473e:	e9 f7       	brne	.-6      	; 0x473a <RemoveMinus+0x16>
    4740:	11 97       	sbiw	r26, 0x01	; 1
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
    4742:	ac 1b       	sub	r26, r28
    4744:	b0 e0       	ldi	r27, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	a8 1b       	sub	r26, r24
    474a:	b9 0b       	sbc	r27, r25
    474c:	ae 01       	movw	r20, r28
    474e:	48 0f       	add	r20, r24
    4750:	59 1f       	adc	r21, r25
    4752:	20 e0       	ldi	r18, 0x00	; 0
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	0a c0       	rjmp	.+20     	; 0x476c <RemoveMinus+0x48>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4758:	be 01       	movw	r22, r28
    475a:	62 0f       	add	r22, r18
    475c:	73 1f       	adc	r23, r19
    475e:	fa 01       	movw	r30, r20
    4760:	81 91       	ld	r24, Z+
    4762:	af 01       	movw	r20, r30
    4764:	fb 01       	movw	r30, r22
    4766:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4768:	2f 5f       	subi	r18, 0xFF	; 255
    476a:	3f 4f       	sbci	r19, 0xFF	; 255
    476c:	2a 17       	cp	r18, r26
    476e:	3b 07       	cpc	r19, r27
    4770:	98 f3       	brcs	.-26     	; 0x4758 <RemoveMinus+0x34>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4772:	ac 0f       	add	r26, r28
    4774:	bd 1f       	adc	r27, r29
    4776:	1c 92       	st	X, r1
     if (IsMinus(strNumber)==True){
	     MinPos=GetMinusPos(strNumber);
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}
    4778:	df 91       	pop	r29
    477a:	cf 91       	pop	r28
    477c:	08 95       	ret

0000477e <IsMoreThan>:
	    Result=c-'0';
	 }
	return Result;
}

char IsMoreThan(char *strA, char *strB){
    477e:	ac 01       	movw	r20, r24
    4780:	27 2f       	mov	r18, r23
     char i,LengthA,LengthB,Result=False;
	 char strSend[20];	 
     //Check Length
	 LengthA=strlen(strA);
    4782:	fc 01       	movw	r30, r24
    4784:	01 90       	ld	r0, Z+
    4786:	00 20       	and	r0, r0
    4788:	e9 f7       	brne	.-6      	; 0x4784 <IsMoreThan+0x6>
    478a:	31 97       	sbiw	r30, 0x01	; 1
    478c:	7e 2f       	mov	r23, r30
    478e:	78 1b       	sub	r23, r24
	 LengthB=strlen(strB);
    4790:	a6 2f       	mov	r26, r22
    4792:	b2 2f       	mov	r27, r18
    4794:	fd 01       	movw	r30, r26
    4796:	01 90       	ld	r0, Z+
    4798:	00 20       	and	r0, r0
    479a:	e9 f7       	brne	.-6      	; 0x4796 <IsMoreThan+0x18>
    479c:	31 97       	sbiw	r30, 0x01	; 1
    479e:	e6 1b       	sub	r30, r22
	 Result=False;
	 if (LengthA>LengthB)Result=True;
    47a0:	e7 17       	cp	r30, r23
    47a2:	48 f1       	brcs	.+82     	; 0x47f6 <IsMoreThan+0x78>
	 else 
	 if (LengthA==LengthB){          //456755 
    47a4:	7e 17       	cp	r23, r30
    47a6:	49 f5       	brne	.+82     	; 0x47fa <IsMoreThan+0x7c>
    47a8:	86 2f       	mov	r24, r22
    47aa:	92 2f       	mov	r25, r18
    47ac:	9c 01       	movw	r18, r24
    47ae:	d9 01       	movw	r26, r18
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	1d c0       	rjmp	.+58     	; 0x47f0 <IsMoreThan+0x72>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    47b6:	fa 01       	movw	r30, r20
    47b8:	e2 0f       	add	r30, r18
    47ba:	f3 1f       	adc	r31, r19
    47bc:	e0 81       	ld	r30, Z
    47be:	e0 53       	subi	r30, 0x30	; 48
    47c0:	ea 30       	cpi	r30, 0x0A	; 10
    47c2:	10 f0       	brcs	.+4      	; 0x47c8 <IsMoreThan+0x4a>
    47c4:	60 e0       	ldi	r22, 0x00	; 0
    47c6:	01 c0       	rjmp	.+2      	; 0x47ca <IsMoreThan+0x4c>
    47c8:	6e 2f       	mov	r22, r30
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
    47ca:	8c 91       	ld	r24, X
    47cc:	80 53       	subi	r24, 0x30	; 48
    47ce:	8a 30       	cpi	r24, 0x0A	; 10
    47d0:	10 f0       	brcs	.+4      	; 0x47d6 <IsMoreThan+0x58>
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	01 c0       	rjmp	.+2      	; 0x47d8 <IsMoreThan+0x5a>
    47d6:	98 2f       	mov	r25, r24
    47d8:	96 17       	cp	r25, r22
    47da:	68 f0       	brcs	.+26     	; 0x47f6 <IsMoreThan+0x78>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    47dc:	ea 30       	cpi	r30, 0x0A	; 10
    47de:	08 f0       	brcs	.+2      	; 0x47e2 <IsMoreThan+0x64>
    47e0:	e0 e0       	ldi	r30, 0x00	; 0
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
			     Result=True;
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
    47e2:	8a 30       	cpi	r24, 0x0A	; 10
    47e4:	10 f4       	brcc	.+4      	; 0x47ea <IsMoreThan+0x6c>
    47e6:	e8 17       	cp	r30, r24
    47e8:	40 f0       	brcs	.+16     	; 0x47fa <IsMoreThan+0x7c>
    47ea:	2f 5f       	subi	r18, 0xFF	; 255
    47ec:	3f 4f       	sbci	r19, 0xFF	; 255
    47ee:	11 96       	adiw	r26, 0x01	; 1
	 LengthB=strlen(strB);
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
    47f0:	27 17       	cp	r18, r23
    47f2:	08 f3       	brcs	.-62     	; 0x47b6 <IsMoreThan+0x38>
    47f4:	02 c0       	rjmp	.+4      	; 0x47fa <IsMoreThan+0x7c>
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	08 95       	ret
    47fa:	80 e0       	ldi	r24, 0x00	; 0
				 break;
			 }			 		 
		 }
	 }
  return Result;
}
    47fc:	08 95       	ret

000047fe <IsZerroAll>:
   return Result;
}

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
    47fe:	fc 01       	movw	r30, r24
    4800:	01 90       	ld	r0, Z+
    4802:	00 20       	and	r0, r0
    4804:	e9 f7       	brne	.-6      	; 0x4800 <IsZerroAll+0x2>
    4806:	31 97       	sbiw	r30, 0x01	; 1
    4808:	e8 1b       	sub	r30, r24
    480a:	dc 01       	movw	r26, r24
    480c:	ae 0f       	add	r26, r30
    480e:	b1 1d       	adc	r27, r1
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	06 c0       	rjmp	.+12     	; 0x4822 <IsZerroAll+0x24>
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
	     if (strZerro[Length-i]=='0')nZerro++;
    4816:	8c 91       	ld	r24, X
    4818:	80 33       	cpi	r24, 0x30	; 48
    481a:	09 f4       	brne	.+2      	; 0x481e <IsZerroAll+0x20>
    481c:	2f 5f       	subi	r18, 0xFF	; 255
char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
    481e:	9f 5f       	subi	r25, 0xFF	; 255
    4820:	11 97       	sbiw	r26, 0x01	; 1
    4822:	9e 17       	cp	r25, r30
    4824:	c0 f3       	brcs	.-16     	; 0x4816 <IsZerroAll+0x18>
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	2e 17       	cp	r18, r30
    482a:	09 f4       	brne	.+2      	; 0x482e <IsZerroAll+0x30>
    482c:	81 e0       	ldi	r24, 0x01	; 1
	     if (strZerro[Length-i]=='0')nZerro++;
	 }if (nZerro==Length) Result=True;
  return Result;
}
    482e:	08 95       	ret

00004830 <PstrCopy>:
void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
    4830:	cf 93       	push	r28
    4832:	df 93       	push	r29
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	08 c0       	rjmp	.+16     	; 0x4848 <PstrCopy+0x18>
     char i=0;
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
    4838:	fb 01       	movw	r30, r22
    483a:	ec 0f       	add	r30, r28
    483c:	fd 1f       	adc	r31, r29
    483e:	e4 91       	lpm	r30, Z+
    4840:	c8 0f       	add	r28, r24
    4842:	d9 1f       	adc	r29, r25
    4844:	e8 83       	st	Y, r30
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    4846:	2f 5f       	subi	r18, 0xFF	; 255
    4848:	c2 2f       	mov	r28, r18
    484a:	d0 e0       	ldi	r29, 0x00	; 0
    484c:	fb 01       	movw	r30, r22
    484e:	01 90       	ld	r0, Z+
    4850:	00 20       	and	r0, r0
    4852:	e9 f7       	brne	.-6      	; 0x484e <PstrCopy+0x1e>
    4854:	31 97       	sbiw	r30, 0x01	; 1
    4856:	e6 1b       	sub	r30, r22
    4858:	f7 0b       	sbc	r31, r23
    485a:	ce 17       	cp	r28, r30
    485c:	df 07       	cpc	r29, r31
    485e:	60 f3       	brcs	.-40     	; 0x4838 <PstrCopy+0x8>
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}
    4860:	df 91       	pop	r29
    4862:	cf 91       	pop	r28
    4864:	08 95       	ret

00004866 <SpaceOnly>:
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}

char SpaceOnly(char *string){
    4866:	ac 01       	movw	r20, r24
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    4868:	dc 01       	movw	r26, r24
    486a:	0d 90       	ld	r0, X+
    486c:	00 20       	and	r0, r0
    486e:	e9 f7       	brne	.-6      	; 0x486a <SpaceOnly+0x4>
    4870:	11 97       	sbiw	r26, 0x01	; 1
    4872:	a8 1b       	sub	r26, r24
    4874:	b9 0b       	sbc	r27, r25
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	09 c0       	rjmp	.+18     	; 0x4890 <SpaceOnly+0x2a>
	    if(string[i]!=' ') nChar++;
    487e:	fa 01       	movw	r30, r20
    4880:	e2 0f       	add	r30, r18
    4882:	f3 1f       	adc	r31, r19
    4884:	80 81       	ld	r24, Z
    4886:	80 32       	cpi	r24, 0x20	; 32
    4888:	09 f0       	breq	.+2      	; 0x488c <SpaceOnly+0x26>
    488a:	9f 5f       	subi	r25, 0xFF	; 255
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    488c:	2f 5f       	subi	r18, 0xFF	; 255
    488e:	3f 4f       	sbci	r19, 0xFF	; 255
    4890:	2a 17       	cp	r18, r26
    4892:	3b 07       	cpc	r19, r27
    4894:	a0 f3       	brcs	.-24     	; 0x487e <SpaceOnly+0x18>
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	99 23       	and	r25, r25
    489a:	09 f4       	brne	.+2      	; 0x489e <SpaceOnly+0x38>
    489c:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 if (nChar>0) Result=False;
	 else Result=True;

	 return Result;
}
    489e:	08 95       	ret

000048a0 <RemDecimal>:
	 }
}



void RemDecimal(char *strDecimal){//4500.00-->4500
    48a0:	cf 93       	push	r28
    48a2:	df 93       	push	r29
    48a4:	ec 01       	movw	r28, r24
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    48a6:	83 e4       	ldi	r24, 0x43	; 67
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    48ae:	38 2f       	mov	r19, r24
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	08 c0       	rjmp	.+16     	; 0x48c4 <RemDecimal+0x24>

     for(i=0;i<strlen(strDecimal);i++){
	     if (strDecimal[i]==DecPointMark)
    48b4:	fe 01       	movw	r30, r28
    48b6:	e8 0f       	add	r30, r24
    48b8:	f9 1f       	adc	r31, r25
    48ba:	80 81       	ld	r24, Z
    48bc:	83 17       	cp	r24, r19
    48be:	09 f4       	brne	.+2      	; 0x48c2 <RemDecimal+0x22>
		     strDecimal[i]=0;
    48c0:	10 82       	st	Z, r1

void RemDecimal(char *strDecimal){//4500.00-->4500
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 

     for(i=0;i<strlen(strDecimal);i++){
    48c2:	2f 5f       	subi	r18, 0xFF	; 255
    48c4:	82 2f       	mov	r24, r18
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	fe 01       	movw	r30, r28
    48ca:	01 90       	ld	r0, Z+
    48cc:	00 20       	and	r0, r0
    48ce:	e9 f7       	brne	.-6      	; 0x48ca <RemDecimal+0x2a>
    48d0:	31 97       	sbiw	r30, 0x01	; 1
    48d2:	ec 1b       	sub	r30, r28
    48d4:	fd 0b       	sbc	r31, r29
    48d6:	8e 17       	cp	r24, r30
    48d8:	9f 07       	cpc	r25, r31
    48da:	60 f3       	brcs	.-40     	; 0x48b4 <RemDecimal+0x14>
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}
    48dc:	df 91       	pop	r29
    48de:	cf 91       	pop	r28
    48e0:	08 95       	ret

000048e2 <GetProductPrice>:
          stGenerateReport=grScanAction;
	      break;
	 }
}
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
    48e2:	cf 92       	push	r12
    48e4:	df 92       	push	r13
    48e6:	ef 92       	push	r14
    48e8:	ff 92       	push	r15
    48ea:	0f 93       	push	r16
    48ec:	1f 93       	push	r17
    48ee:	df 93       	push	r29
    48f0:	cf 93       	push	r28
    48f2:	cd b7       	in	r28, 0x3d	; 61
    48f4:	de b7       	in	r29, 0x3e	; 62
    48f6:	67 97       	sbiw	r28, 0x17	; 23
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	f8 94       	cli
    48fc:	de bf       	out	0x3e, r29	; 62
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	cd bf       	out	0x3d, r28	; 61
    4902:	7c 01       	movw	r14, r24
    4904:	d6 2e       	mov	r13, r22
    4906:	c4 2e       	mov	r12, r20
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
    4908:	00 d0       	rcall	.+0      	; 0x490a <GetProductPrice+0x28>
    490a:	00 d0       	rcall	.+0      	; 0x490c <GetProductPrice+0x2a>
    490c:	ad b7       	in	r26, 0x3d	; 61
    490e:	be b7       	in	r27, 0x3e	; 62
    4910:	12 96       	adiw	r26, 0x02	; 2
    4912:	9c 93       	st	X, r25
    4914:	8e 93       	st	-X, r24
    4916:	11 97       	sbiw	r26, 0x01	; 1
    4918:	88 e6       	ldi	r24, 0x68	; 104
    491a:	95 e0       	ldi	r25, 0x05	; 5
    491c:	14 96       	adiw	r26, 0x04	; 4
    491e:	9c 93       	st	X, r25
    4920:	8e 93       	st	-X, r24
    4922:	13 97       	sbiw	r26, 0x03	; 3
    4924:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	8e 01       	movw	r16, r28
    4932:	09 5f       	subi	r16, 0xF9	; 249
    4934:	1f 4f       	sbci	r17, 0xFF	; 255
    4936:	c8 01       	movw	r24, r16
    4938:	6a e4       	ldi	r22, 0x4A	; 74
    493a:	70 e0       	ldi	r23, 0x00	; 0
    493c:	48 e0       	ldi	r20, 0x08	; 8
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    4944:	f8 01       	movw	r30, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
    4946:	9e 01       	movw	r18, r28
    4948:	21 5f       	subi	r18, 0xF1	; 241
    494a:	3f 4f       	sbci	r19, 0xFF	; 255
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    494c:	9e 2f       	mov	r25, r30
    494e:	90 1b       	sub	r25, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
	     if (PPumpID[i]==xPumpID){
    4950:	80 81       	ld	r24, Z
    4952:	8d 15       	cp	r24, r13
    4954:	11 f4       	brne	.+4      	; 0x495a <GetProductPrice+0x78>
    4956:	89 2f       	mov	r24, r25
    4958:	05 c0       	rjmp	.+10     	; 0x4964 <GetProductPrice+0x82>
    495a:	31 96       	adiw	r30, 0x01	; 1
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
	 for(i=0;i<8;i++){
    495c:	e2 17       	cp	r30, r18
    495e:	f3 07       	cpc	r31, r19
    4960:	a9 f7       	brne	.-22     	; 0x494c <GetProductPrice+0x6a>
    4962:	80 e0       	ldi	r24, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
		     iPumpID=i;
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
    4964:	b5 e0       	ldi	r27, 0x05	; 5
    4966:	bc 15       	cp	r27, r12
    4968:	e8 f1       	brcs	.+122    	; 0x49e4 <GetProductPrice+0x102>
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
    496a:	66 e0       	ldi	r22, 0x06	; 6
    496c:	86 9f       	mul	r24, r22
    496e:	b0 01       	movw	r22, r0
    4970:	11 24       	eor	r1, r1
    4972:	66 5a       	subi	r22, 0xA6	; 166
    4974:	7f 4f       	sbci	r23, 0xFF	; 255
    4976:	ce 01       	movw	r24, r28
    4978:	01 96       	adiw	r24, 0x01	; 1
    497a:	46 e0       	ldi	r20, 0x06	; 6
    497c:	50 e0       	ldi	r21, 0x00	; 0
    497e:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
         xProductID=PProdID[xNozzle-1];
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    4982:	8e 01       	movw	r16, r28
    4984:	01 5f       	subi	r16, 0xF1	; 241
    4986:	1f 4f       	sbci	r17, 0xFF	; 255
    4988:	fe 01       	movw	r30, r28
    498a:	ec 0d       	add	r30, r12
    498c:	f1 1d       	adc	r31, r1
    498e:	60 81       	ld	r22, Z
    4990:	89 e0       	ldi	r24, 0x09	; 9
    4992:	68 9f       	mul	r22, r24
    4994:	b0 01       	movw	r22, r0
    4996:	11 24       	eor	r1, r1
    4998:	6f 57       	subi	r22, 0x7F	; 127
    499a:	7f 4f       	sbci	r23, 0xFF	; 255
    499c:	c8 01       	movw	r24, r16
    499e:	49 e0       	ldi	r20, 0x09	; 9
    49a0:	50 e0       	ldi	r21, 0x00	; 0
    49a2:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		 RemDecimal(strPrice);
    49a6:	c8 01       	movw	r24, r16
    49a8:	0e 94 50 24 	call	0x48a0	; 0x48a0 <RemDecimal>
		 sprintf_P(sPrice,PSTR("%s"),strPrice);
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <GetProductPrice+0xcc>
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <GetProductPrice+0xce>
    49b0:	00 d0       	rcall	.+0      	; 0x49b2 <GetProductPrice+0xd0>
    49b2:	ed b7       	in	r30, 0x3d	; 61
    49b4:	fe b7       	in	r31, 0x3e	; 62
    49b6:	31 96       	adiw	r30, 0x01	; 1
    49b8:	ad b7       	in	r26, 0x3d	; 61
    49ba:	be b7       	in	r27, 0x3e	; 62
    49bc:	12 96       	adiw	r26, 0x02	; 2
    49be:	fc 92       	st	X, r15
    49c0:	ee 92       	st	-X, r14
    49c2:	11 97       	sbiw	r26, 0x01	; 1
    49c4:	85 e6       	ldi	r24, 0x65	; 101
    49c6:	95 e0       	ldi	r25, 0x05	; 5
    49c8:	93 83       	std	Z+3, r25	; 0x03
    49ca:	82 83       	std	Z+2, r24	; 0x02
    49cc:	15 83       	std	Z+5, r17	; 0x05
    49ce:	04 83       	std	Z+4, r16	; 0x04
    49d0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    49d4:	ed b7       	in	r30, 0x3d	; 61
    49d6:	fe b7       	in	r31, 0x3e	; 62
    49d8:	36 96       	adiw	r30, 0x06	; 6
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	f8 94       	cli
    49de:	fe bf       	out	0x3e, r31	; 62
    49e0:	0f be       	out	0x3f, r0	; 63
    49e2:	ed bf       	out	0x3d, r30	; 61
	 }    
	 //Clear Decimal

}
    49e4:	67 96       	adiw	r28, 0x17	; 23
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	f8 94       	cli
    49ea:	de bf       	out	0x3e, r29	; 62
    49ec:	0f be       	out	0x3f, r0	; 63
    49ee:	cd bf       	out	0x3d, r28	; 61
    49f0:	cf 91       	pop	r28
    49f2:	df 91       	pop	r29
    49f4:	1f 91       	pop	r17
    49f6:	0f 91       	pop	r16
    49f8:	ff 90       	pop	r15
    49fa:	ef 90       	pop	r14
    49fc:	df 90       	pop	r13
    49fe:	cf 90       	pop	r12
    4a00:	08 95       	ret

00004a02 <FormatDate>:
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    4a02:	df 93       	push	r29
    4a04:	cf 93       	push	r28
    4a06:	cd b7       	in	r28, 0x3d	; 61
    4a08:	de b7       	in	r29, 0x3e	; 62
    4a0a:	2b 97       	sbiw	r28, 0x0b	; 11
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	f8 94       	cli
    4a10:	de bf       	out	0x3e, r29	; 62
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	cd bf       	out	0x3d, r28	; 61
    4a16:	98 2f       	mov	r25, r24
    4a18:	9b 01       	movw	r18, r22
     char i,sDate[11];

     sDate[0]=Date[8];
    4a1a:	fb 01       	movw	r30, r22
    4a1c:	80 85       	ldd	r24, Z+8	; 0x08
    4a1e:	89 83       	std	Y+1, r24	; 0x01
	 sDate[1]=Date[9];
    4a20:	81 85       	ldd	r24, Z+9	; 0x09
    4a22:	8a 83       	std	Y+2, r24	; 0x02
     sDate[2]=Date[7];
    4a24:	87 81       	ldd	r24, Z+7	; 0x07
    4a26:	8b 83       	std	Y+3, r24	; 0x03
	 sDate[3]=Date[5];
    4a28:	85 81       	ldd	r24, Z+5	; 0x05
    4a2a:	8c 83       	std	Y+4, r24	; 0x04
     sDate[4]=Date[6];
    4a2c:	86 81       	ldd	r24, Z+6	; 0x06
    4a2e:	8d 83       	std	Y+5, r24	; 0x05
	 sDate[5]=Date[4];
    4a30:	84 81       	ldd	r24, Z+4	; 0x04
    4a32:	8e 83       	std	Y+6, r24	; 0x06
	 switch(FmtYear){
    4a34:	99 23       	and	r25, r25
    4a36:	19 f0       	breq	.+6      	; 0x4a3e <FormatDate+0x3c>
    4a38:	91 30       	cpi	r25, 0x01	; 1
    4a3a:	59 f4       	brne	.+22     	; 0x4a52 <FormatDate+0x50>
    4a3c:	0f c0       	rjmp	.+30     	; 0x4a5c <FormatDate+0x5a>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
    4a3e:	fb 01       	movw	r30, r22
    4a40:	80 81       	ld	r24, Z
    4a42:	8f 83       	std	Y+7, r24	; 0x07
    4a44:	81 81       	ldd	r24, Z+1	; 0x01
    4a46:	88 87       	std	Y+8, r24	; 0x08
    4a48:	82 81       	ldd	r24, Z+2	; 0x02
    4a4a:	89 87       	std	Y+9, r24	; 0x09
    4a4c:	83 81       	ldd	r24, Z+3	; 0x03
    4a4e:	8a 87       	std	Y+10, r24	; 0x0a
          sDate[10]=0;
    4a50:	1b 86       	std	Y+11, r1	; 0x0b
    4a52:	90 e0       	ldi	r25, 0x00	; 0
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
          sDate[8]=0;
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4a54:	ae 01       	movw	r20, r28
    4a56:	4f 5f       	subi	r20, 0xFF	; 255
    4a58:	5f 4f       	sbci	r21, 0xFF	; 255
    4a5a:	0f c0       	rjmp	.+30     	; 0x4a7a <FormatDate+0x78>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
          sDate[10]=0;
	      break;
	 case DATE_SHORT_YEAR:
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
    4a5c:	fb 01       	movw	r30, r22
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	8f 83       	std	Y+7, r24	; 0x07
    4a62:	83 81       	ldd	r24, Z+3	; 0x03
    4a64:	88 87       	std	Y+8, r24	; 0x08
          sDate[8]=0;
    4a66:	19 86       	std	Y+9, r1	; 0x09
    4a68:	f4 cf       	rjmp	.-24     	; 0x4a52 <FormatDate+0x50>
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4a6a:	f9 01       	movw	r30, r18
    4a6c:	ea 0f       	add	r30, r26
    4a6e:	fb 1f       	adc	r31, r27
    4a70:	a4 0f       	add	r26, r20
    4a72:	b5 1f       	adc	r27, r21
    4a74:	8c 91       	ld	r24, X
    4a76:	80 83       	st	Z, r24
    4a78:	9f 5f       	subi	r25, 0xFF	; 255
    4a7a:	a9 2f       	mov	r26, r25
    4a7c:	b0 e0       	ldi	r27, 0x00	; 0
    4a7e:	fa 01       	movw	r30, r20
    4a80:	01 90       	ld	r0, Z+
    4a82:	00 20       	and	r0, r0
    4a84:	e9 f7       	brne	.-6      	; 0x4a80 <FormatDate+0x7e>
    4a86:	31 97       	sbiw	r30, 0x01	; 1
    4a88:	e4 1b       	sub	r30, r20
    4a8a:	f5 0b       	sbc	r31, r21
    4a8c:	ae 17       	cp	r26, r30
    4a8e:	bf 07       	cpc	r27, r31
    4a90:	60 f3       	brcs	.-40     	; 0x4a6a <FormatDate+0x68>
}
    4a92:	2b 96       	adiw	r28, 0x0b	; 11
    4a94:	0f b6       	in	r0, 0x3f	; 63
    4a96:	f8 94       	cli
    4a98:	de bf       	out	0x3e, r29	; 62
    4a9a:	0f be       	out	0x3f, r0	; 63
    4a9c:	cd bf       	out	0x3d, r28	; 61
    4a9e:	cf 91       	pop	r28
    4aa0:	df 91       	pop	r29
    4aa2:	08 95       	ret

00004aa4 <RemZeroLead>:

	while (1){};
  #endif
}

void RemZeroLead(char *Zeroed){//Remove Zero Character 00001004 000050000 0 
    4aa4:	cf 93       	push	r28
    4aa6:	df 93       	push	r29
    4aa8:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
    4aaa:	fc 01       	movw	r30, r24
    4aac:	01 90       	ld	r0, Z+
    4aae:	00 20       	and	r0, r0
    4ab0:	e9 f7       	brne	.-6      	; 0x4aac <RemZeroLead+0x8>
    4ab2:	31 97       	sbiw	r30, 0x01	; 1
    4ab4:	e8 1b       	sub	r30, r24
  if ((Length>1)&&(Zeroed[0]=='0')){
    4ab6:	e2 30       	cpi	r30, 0x02	; 2
    4ab8:	d0 f1       	brcs	.+116    	; 0x4b2e <RemZeroLead+0x8a>
    4aba:	88 81       	ld	r24, Y
    4abc:	80 33       	cpi	r24, 0x30	; 48
    4abe:	b9 f5       	brne	.+110    	; 0x4b2e <RemZeroLead+0x8a>
    4ac0:	4c 2f       	mov	r20, r28
    4ac2:	de 01       	movw	r26, r28
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
    4ac6:	8c 91       	ld	r24, X
    4ac8:	80 33       	cpi	r24, 0x30	; 48
    4aca:	69 f4       	brne	.+26     	; 0x4ae6 <RemZeroLead+0x42>
    4acc:	11 96       	adiw	r26, 0x01	; 1
    4ace:	8c 91       	ld	r24, X
    4ad0:	11 97       	sbiw	r26, 0x01	; 1
    4ad2:	80 33       	cpi	r24, 0x30	; 48
    4ad4:	11 f4       	brne	.+4      	; 0x4ada <RemZeroLead+0x36>
    4ad6:	9f 5f       	subi	r25, 0xFF	; 255
    4ad8:	06 c0       	rjmp	.+12     	; 0x4ae6 <RemZeroLead+0x42>
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    4ada:	8e 32       	cpi	r24, 0x2E	; 46
    4adc:	11 f0       	breq	.+4      	; 0x4ae2 <RemZeroLead+0x3e>
    4ade:	8c 32       	cpi	r24, 0x2C	; 44
    4ae0:	41 f4       	brne	.+16     	; 0x4af2 <RemZeroLead+0x4e>
    4ae2:	91 50       	subi	r25, 0x01	; 1
    4ae4:	06 c0       	rjmp	.+12     	; 0x4af2 <RemZeroLead+0x4e>
    4ae6:	11 96       	adiw	r26, 0x01	; 1
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
    4ae8:	8a 2f       	mov	r24, r26
    4aea:	84 1b       	sub	r24, r20
    4aec:	8e 17       	cp	r24, r30
    4aee:	58 f3       	brcs	.-42     	; 0x4ac6 <RemZeroLead+0x22>
    4af0:	01 c0       	rjmp	.+2      	; 0x4af4 <RemZeroLead+0x50>
		         IsFound=True;
			     break;			  
			     }
	      }

		  if (IsFound==True)ZeroPos++;
    4af2:	9f 5f       	subi	r25, 0xFF	; 255
		  if (ZeroPos>=Length)ZeroPos=Length-1;
    4af4:	9e 17       	cp	r25, r30
    4af6:	10 f0       	brcs	.+4      	; 0x4afc <RemZeroLead+0x58>
    4af8:	9e 2f       	mov	r25, r30
    4afa:	91 50       	subi	r25, 0x01	; 1
    4afc:	40 e0       	ldi	r20, 0x00	; 0
          for(i=0;i<(Length-ZeroPos);i++){
    4afe:	89 2f       	mov	r24, r25
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	2e 2f       	mov	r18, r30
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	28 1b       	sub	r18, r24
    4b08:	39 0b       	sbc	r19, r25
	          Zeroed[i]=Zeroed[i+ZeroPos];
    4b0a:	be 01       	movw	r22, r28
    4b0c:	68 0f       	add	r22, r24
    4b0e:	79 1f       	adc	r23, r25
    4b10:	09 c0       	rjmp	.+18     	; 0x4b24 <RemZeroLead+0x80>
    4b12:	fe 01       	movw	r30, r28
    4b14:	ea 0f       	add	r30, r26
    4b16:	fb 1f       	adc	r31, r27
    4b18:	a6 0f       	add	r26, r22
    4b1a:	b7 1f       	adc	r27, r23
    4b1c:	8c 91       	ld	r24, X
    4b1e:	80 83       	st	Z, r24
		      Zeroed[i+1]=0;
    4b20:	11 82       	std	Z+1, r1	; 0x01
			     }
	      }

		  if (IsFound==True)ZeroPos++;
		  if (ZeroPos>=Length)ZeroPos=Length-1;
          for(i=0;i<(Length-ZeroPos);i++){
    4b22:	4f 5f       	subi	r20, 0xFF	; 255
    4b24:	a4 2f       	mov	r26, r20
    4b26:	b0 e0       	ldi	r27, 0x00	; 0
    4b28:	a2 17       	cp	r26, r18
    4b2a:	b3 07       	cpc	r27, r19
    4b2c:	94 f3       	brlt	.-28     	; 0x4b12 <RemZeroLead+0x6e>
	          Zeroed[i]=Zeroed[i+ZeroPos];
		      Zeroed[i+1]=0;
	   }//Zeroed[Length-ZeroPos]=0;
	 }     
   }
}
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	08 95       	ret

00004b34 <RemSpaceLead>:
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
    4b34:	cf 93       	push	r28
    4b36:	df 93       	push	r29
    4b38:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	01 90       	ld	r0, Z+
    4b3e:	00 20       	and	r0, r0
    4b40:	e9 f7       	brne	.-6      	; 0x4b3c <RemSpaceLead+0x8>
    4b42:	31 97       	sbiw	r30, 0x01	; 1
    4b44:	6e 2f       	mov	r22, r30
    4b46:	68 1b       	sub	r22, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
    4b48:	62 30       	cpi	r22, 0x02	; 2
    4b4a:	e0 f1       	brcs	.+120    	; 0x4bc4 <RemSpaceLead+0x90>
    4b4c:	88 81       	ld	r24, Y
    4b4e:	80 32       	cpi	r24, 0x20	; 32
    4b50:	c9 f5       	brne	.+114    	; 0x4bc4 <RemSpaceLead+0x90>
    4b52:	4c 2f       	mov	r20, r28
    4b54:	fe 01       	movw	r30, r28
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
    4b5a:	80 81       	ld	r24, Z
    4b5c:	80 32       	cpi	r24, 0x20	; 32
    4b5e:	41 f4       	brne	.+16     	; 0x4b70 <RemSpaceLead+0x3c>
    4b60:	81 81       	ldd	r24, Z+1	; 0x01
    4b62:	80 32       	cpi	r24, 0x20	; 32
    4b64:	21 f4       	brne	.+8      	; 0x4b6e <RemSpaceLead+0x3a>
    4b66:	22 23       	and	r18, r18
    4b68:	19 f4       	brne	.+6      	; 0x4b70 <RemSpaceLead+0x3c>
    4b6a:	9f 5f       	subi	r25, 0xFF	; 255
    4b6c:	01 c0       	rjmp	.+2      	; 0x4b70 <RemSpaceLead+0x3c>
    4b6e:	21 e0       	ldi	r18, 0x01	; 1
    4b70:	31 96       	adiw	r30, 0x01	; 1

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
    4b72:	8e 2f       	mov	r24, r30
    4b74:	84 1b       	sub	r24, r20
    4b76:	86 17       	cp	r24, r22
    4b78:	80 f3       	brcs	.-32     	; 0x4b5a <RemSpaceLead+0x26>
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
    4b7a:	39 2f       	mov	r19, r25
    4b7c:	3f 5f       	subi	r19, 0xFF	; 255
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
    4b80:	43 2f       	mov	r20, r19
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	09 c0       	rjmp	.+18     	; 0x4b98 <RemSpaceLead+0x64>
    4b86:	fe 01       	movw	r30, r28
    4b88:	e8 0f       	add	r30, r24
    4b8a:	f9 1f       	adc	r31, r25
    4b8c:	df 01       	movw	r26, r30
    4b8e:	a4 0f       	add	r26, r20
    4b90:	b5 1f       	adc	r27, r21
    4b92:	8c 91       	ld	r24, X
    4b94:	80 83       	st	Z, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    4b96:	2f 5f       	subi	r18, 0xFF	; 255
    4b98:	82 2f       	mov	r24, r18
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	01 90       	ld	r0, Z+
    4ba0:	00 20       	and	r0, r0
    4ba2:	e9 f7       	brne	.-6      	; 0x4b9e <RemSpaceLead+0x6a>
    4ba4:	31 97       	sbiw	r30, 0x01	; 1
    4ba6:	ec 1b       	sub	r30, r28
    4ba8:	fd 0b       	sbc	r31, r29
    4baa:	8e 17       	cp	r24, r30
    4bac:	9f 07       	cpc	r25, r31
    4bae:	58 f3       	brcs	.-42     	; 0x4b86 <RemSpaceLead+0x52>
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4bb0:	86 2f       	mov	r24, r22
    4bb2:	83 1b       	sub	r24, r19
    4bb4:	05 c0       	rjmp	.+10     	; 0x4bc0 <RemSpaceLead+0x8c>
		     Zeroed[i]=0;
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	e8 0f       	add	r30, r24
    4bba:	f1 1d       	adc	r31, r1
    4bbc:	10 82       	st	Z, r1
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4bbe:	8f 5f       	subi	r24, 0xFF	; 255
    4bc0:	86 17       	cp	r24, r22
    4bc2:	c8 f3       	brcs	.-14     	; 0x4bb6 <RemSpaceLead+0x82>
		     Zeroed[i]=0;
		 }
     }
}
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	08 95       	ret

00004bca <RemSpaceLag>:
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    4bca:	0f 93       	push	r16
    4bcc:	1f 93       	push	r17
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	0d 90       	ld	r0, X+
    4bd8:	00 20       	and	r0, r0
    4bda:	e9 f7       	brne	.-6      	; 0x4bd6 <RemSpaceLag+0xc>
    4bdc:	11 97       	sbiw	r26, 0x01	; 1
    4bde:	a8 1b       	sub	r26, r24
    4be0:	b0 e0       	ldi	r27, 0x00	; 0
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	30 e0       	ldi	r19, 0x00	; 0
     for(i=0;i<(Length-1);i++){
    4be6:	6a 2f       	mov	r22, r26
    4be8:	70 e0       	ldi	r23, 0x00	; 0
    4bea:	8b 01       	movw	r16, r22
    4bec:	01 50       	subi	r16, 0x01	; 1
    4bee:	10 40       	sbci	r17, 0x00	; 0
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
		      Spaced[Length-i-1]=0;
    4bf0:	a1 50       	subi	r26, 0x01	; 1
    4bf2:	16 c0       	rjmp	.+44     	; 0x4c20 <RemSpaceLag+0x56>
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
    4bf4:	ab 01       	movw	r20, r22
    4bf6:	48 1b       	sub	r20, r24
    4bf8:	59 0b       	sbc	r21, r25
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e4 0f       	add	r30, r20
    4bfe:	f5 1f       	adc	r31, r21
    4c00:	32 97       	sbiw	r30, 0x02	; 2
    4c02:	80 81       	ld	r24, Z
    4c04:	80 32       	cpi	r24, 0x20	; 32
    4c06:	89 f4       	brne	.+34     	; 0x4c2a <RemSpaceLag+0x60>
    4c08:	fa 01       	movw	r30, r20
    4c0a:	31 97       	sbiw	r30, 0x01	; 1
    4c0c:	ec 0f       	add	r30, r28
    4c0e:	fd 1f       	adc	r31, r29
    4c10:	2f 5f       	subi	r18, 0xFF	; 255
    4c12:	3f 4f       	sbci	r19, 0xFF	; 255
    4c14:	80 81       	ld	r24, Z
    4c16:	80 32       	cpi	r24, 0x20	; 32
    4c18:	41 f4       	brne	.+16     	; 0x4c2a <RemSpaceLag+0x60>
		      Spaced[Length-i-1]=0;
    4c1a:	10 82       	st	Z, r1
    4c1c:	ba 2f       	mov	r27, r26
    4c1e:	b2 1b       	sub	r27, r18
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    4c20:	82 2f       	mov	r24, r18
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	80 17       	cp	r24, r16
    4c26:	91 07       	cpc	r25, r17
    4c28:	2c f3       	brlt	.-54     	; 0x4bf4 <RemSpaceLag+0x2a>
		      Spaced[Length-i-1]=0;
			  PosSpaced=Length-i-2;
			  }
         else break;
	 }
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	eb 0f       	add	r30, r27
    4c2e:	f1 1d       	adc	r31, r1
    4c30:	80 81       	ld	r24, Z
    4c32:	80 32       	cpi	r24, 0x20	; 32
    4c34:	09 f4       	brne	.+2      	; 0x4c38 <RemSpaceLag+0x6e>
    4c36:	10 82       	st	Z, r1
	 if (Spaced[0]==' ')Spaced[0]=0;
    4c38:	88 81       	ld	r24, Y
    4c3a:	80 32       	cpi	r24, 0x20	; 32
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <RemSpaceLag+0x76>
    4c3e:	18 82       	st	Y, r1
	 Spaced[strlen(Spaced)]=0;
    4c40:	fe 01       	movw	r30, r28
    4c42:	01 90       	ld	r0, Z+
    4c44:	00 20       	and	r0, r0
    4c46:	e9 f7       	brne	.-6      	; 0x4c42 <RemSpaceLag+0x78>
    4c48:	31 97       	sbiw	r30, 0x01	; 1
    4c4a:	ec 1b       	sub	r30, r28
    4c4c:	fd 0b       	sbc	r31, r29
    4c4e:	ec 0f       	add	r30, r28
    4c50:	fd 1f       	adc	r31, r29
    4c52:	10 82       	st	Z, r1
}
    4c54:	df 91       	pop	r29
    4c56:	cf 91       	pop	r28
    4c58:	1f 91       	pop	r17
    4c5a:	0f 91       	pop	r16
    4c5c:	08 95       	ret

00004c5e <procMessage57>:
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}

char procMessage57(){
    4c5e:	1f 93       	push	r17
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    4c60:	10 91 5c 09 	lds	r17, 0x095C
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4c68:	f9 01       	movw	r30, r18
    4c6a:	ed 5d       	subi	r30, 0xDD	; 221
    4c6c:	f6 4f       	sbci	r31, 0xF6	; 246
    4c6e:	d9 01       	movw	r26, r18
    4c70:	a1 57       	subi	r26, 0x71	; 113
    4c72:	b4 4f       	sbci	r27, 0xF4	; 244
    4c74:	95 96       	adiw	r26, 0x25	; 37
    4c76:	8c 91       	ld	r24, X
    4c78:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4c7a:	2f 5f       	subi	r18, 0xFF	; 255
    4c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c7e:	24 31       	cpi	r18, 0x14	; 20
    4c80:	31 05       	cpc	r19, r1
    4c82:	91 f7       	brne	.-28     	; 0x4c68 <procMessage57+0xa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4c84:	10 92 37 09 	sts	0x0937, r1
	 
	     //Card Status
		 Result=(CharPosCopy(rcv_trans,57)-'0')+1;
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
    4c88:	8f e8       	ldi	r24, 0x8F	; 143
    4c8a:	9b e0       	ldi	r25, 0x0B	; 11
    4c8c:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <RemSpaceLead>
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4c94:	f9 01       	movw	r30, r18
    4c96:	e6 5d       	subi	r30, 0xD6	; 214
    4c98:	fc 4f       	sbci	r31, 0xFC	; 252
    4c9a:	d9 01       	movw	r26, r18
    4c9c:	ad 5d       	subi	r26, 0xDD	; 221
    4c9e:	b6 4f       	sbci	r27, 0xF6	; 246
    4ca0:	dc 96       	adiw	r26, 0x3c	; 60
    4ca2:	8c 91       	ld	r24, X
    4ca4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4ca6:	2f 5f       	subi	r18, 0xFF	; 255
    4ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    4caa:	28 32       	cpi	r18, 0x28	; 40
    4cac:	31 05       	cpc	r19, r1
    4cae:	91 f7       	brne	.-28     	; 0x4c94 <procMessage57+0x36>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4cb0:	10 92 52 03 	sts	0x0352, r1
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
    4cb4:	8a e2       	ldi	r24, 0x2A	; 42
    4cb6:	93 e0       	ldi	r25, 0x03	; 3
    4cb8:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4cc0:	f9 01       	movw	r30, r18
    4cc2:	ef 59       	subi	r30, 0x9F	; 159
    4cc4:	fc 4f       	sbci	r31, 0xFC	; 252
    4cc6:	d9 01       	movw	r26, r18
    4cc8:	a5 54       	subi	r26, 0x45	; 69
    4cca:	b6 4f       	sbci	r27, 0xF6	; 246
    4ccc:	8c 91       	ld	r24, X
    4cce:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4cd0:	2f 5f       	subi	r18, 0xFF	; 255
    4cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd4:	29 31       	cpi	r18, 0x19	; 25
    4cd6:	31 05       	cpc	r19, r1
    4cd8:	99 f7       	brne	.-26     	; 0x4cc0 <procMessage57+0x62>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4cda:	10 92 7a 03 	sts	0x037A, r1
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
		 //BalanceTypePrint
		 StrPosCopy(rcv_trans,strBalanceTypePrint,154-2,25);
		 RemSpaceLag(strBalanceTypePrint);
    4cde:	81 e6       	ldi	r24, 0x61	; 97
    4ce0:	93 e0       	ldi	r25, 0x03	; 3
    4ce2:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4ce6:	80 91 d4 09 	lds	r24, 0x09D4
    4cea:	80 93 eb 02 	sts	0x02EB, r24
	 }Dest[Length]=0;
    4cee:	10 92 ec 02 	sts	0x02EC, r1
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4cf6:	f9 01       	movw	r30, r18
    4cf8:	e2 50       	subi	r30, 0x02	; 2
    4cfa:	f4 4f       	sbci	r31, 0xF4	; 244
    4cfc:	d9 01       	movw	r26, r18
    4cfe:	ab 52       	subi	r26, 0x2B	; 43
    4d00:	b6 4f       	sbci	r27, 0xF6	; 246
    4d02:	8c 91       	ld	r24, X
    4d04:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d06:	2f 5f       	subi	r18, 0xFF	; 255
    4d08:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0a:	2d 30       	cpi	r18, 0x0D	; 13
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	99 f7       	brne	.-26     	; 0x4cf6 <procMessage57+0x98>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d10:	10 92 0b 0c 	sts	0x0C0B, r1
		 RemSpaceLag(strBalanceTypePrint);
         //BalanceTypeCode
		 StrPosCopy(rcv_trans,strBalanceCode,177,1);
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
    4d14:	8e ef       	ldi	r24, 0xFE	; 254
    4d16:	9b e0       	ldi	r25, 0x0B	; 11
    4d18:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <RemSpaceLead>
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4d20:	f9 01       	movw	r30, r18
    4d22:	e0 50       	subi	r30, 0x00	; 0
    4d24:	f7 4f       	sbci	r31, 0xF7	; 247
    4d26:	d9 01       	movw	r26, r18
    4d28:	ae 51       	subi	r26, 0x1E	; 30
    4d2a:	b6 4f       	sbci	r27, 0xF6	; 246
    4d2c:	8c 91       	ld	r24, X
    4d2e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d30:	2f 5f       	subi	r18, 0xFF	; 255
    4d32:	3f 4f       	sbci	r19, 0xFF	; 255
    4d34:	2a 30       	cpi	r18, 0x0A	; 10
    4d36:	31 05       	cpc	r19, r1
    4d38:	99 f7       	brne	.-26     	; 0x4d20 <procMessage57+0xc2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d3a:	10 92 0a 09 	sts	0x090A, r1
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
    4d40:	99 e0       	ldi	r25, 0x09	; 9
    4d42:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4d4a:	f9 01       	movw	r30, r18
    4d4c:	e1 58       	subi	r30, 0x81	; 129
    4d4e:	f8 4f       	sbci	r31, 0xF8	; 248
    4d50:	d9 01       	movw	r26, r18
    4d52:	a4 51       	subi	r26, 0x14	; 20
    4d54:	b6 4f       	sbci	r27, 0xF6	; 246
    4d56:	8c 91       	ld	r24, X
    4d58:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d5a:	2f 5f       	subi	r18, 0xFF	; 255
    4d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5e:	24 31       	cpi	r18, 0x14	; 20
    4d60:	31 05       	cpc	r19, r1
    4d62:	99 f7       	brne	.-26     	; 0x4d4a <procMessage57+0xec>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d64:	10 92 93 07 	sts	0x0793, r1
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
		 //CompName
		 StrPosCopy(rcv_trans,strCompName,203-2,20);
		 RemSpaceLag(strCompName);
    4d68:	8f e7       	ldi	r24, 0x7F	; 127
    4d6a:	97 e0       	ldi	r25, 0x07	; 7
    4d6c:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		 uart_print(0,1,strCompName);
		 
uart_print(0,1,strCardID);
*/	
     return Result;
}
    4d70:	81 2f       	mov	r24, r17
    4d72:	8f 52       	subi	r24, 0x2F	; 47
    4d74:	1f 91       	pop	r17
    4d76:	08 95       	ret

00004d78 <clearString>:
	     break;
	}
  return Result;
}

void clearString(char *str){
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	06 c0       	rjmp	.+12     	; 0x4d8a <clearString+0x12>
     int i;
	 for(i=0;i<strlen(str);i++){
	    str[i]=0;
    4d7e:	fc 01       	movw	r30, r24
    4d80:	e2 0f       	add	r30, r18
    4d82:	f3 1f       	adc	r31, r19
    4d84:	10 82       	st	Z, r1
  return Result;
}

void clearString(char *str){
     int i;
	 for(i=0;i<strlen(str);i++){
    4d86:	2f 5f       	subi	r18, 0xFF	; 255
    4d88:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	01 90       	ld	r0, Z+
    4d8e:	00 20       	and	r0, r0
    4d90:	e9 f7       	brne	.-6      	; 0x4d8c <clearString+0x14>
    4d92:	31 97       	sbiw	r30, 0x01	; 1
    4d94:	e8 1b       	sub	r30, r24
    4d96:	f9 0b       	sbc	r31, r25
    4d98:	2e 17       	cp	r18, r30
    4d9a:	3f 07       	cpc	r19, r31
    4d9c:	80 f3       	brcs	.-32     	; 0x4d7e <clearString+0x6>
	    str[i]=0;
	 }
}
    4d9e:	08 95       	ret

00004da0 <AddZeroLead>:
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    4da0:	bf 92       	push	r11
    4da2:	cf 92       	push	r12
    4da4:	df 92       	push	r13
    4da6:	ef 92       	push	r14
    4da8:	ff 92       	push	r15
    4daa:	0f 93       	push	r16
    4dac:	1f 93       	push	r17
    4dae:	df 93       	push	r29
    4db0:	cf 93       	push	r28
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
    4db6:	6e 97       	sbiw	r28, 0x1e	; 30
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61
    4dc2:	8c 01       	movw	r16, r24
     char i,Length,strAdded[30];
     Length=strlen(String);
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	01 90       	ld	r0, Z+
    4dc8:	00 20       	and	r0, r0
    4dca:	e9 f7       	brne	.-6      	; 0x4dc6 <AddZeroLead+0x26>
    4dcc:	31 97       	sbiw	r30, 0x01	; 1
    4dce:	2e 2f       	mov	r18, r30
    4dd0:	28 1b       	sub	r18, r24

	 if (Size>Length){
    4dd2:	26 17       	cp	r18, r22
    4dd4:	e0 f5       	brcc	.+120    	; 0x4e4e <AddZeroLead+0xae>
    4dd6:	7e 01       	movw	r14, r28
    4dd8:	08 94       	sec
    4dda:	e1 1c       	adc	r14, r1
    4ddc:	f1 1c       	adc	r15, r1
    4dde:	f7 01       	movw	r30, r14
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    4de0:	be 2c       	mov	r11, r14
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
    4de2:	90 e3       	ldi	r25, 0x30	; 48
    4de4:	01 c0       	rjmp	.+2      	; 0x4de8 <AddZeroLead+0x48>
    4de6:	91 93       	st	Z+, r25
void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    4de8:	8e 2f       	mov	r24, r30
    4dea:	8b 19       	sub	r24, r11
    4dec:	86 17       	cp	r24, r22
    4dee:	d8 f3       	brcs	.-10     	; 0x4de6 <AddZeroLead+0x46>
	         strAdded[i]='0';
	     }strAdded[Size]=0;
    4df0:	46 2f       	mov	r20, r22
    4df2:	50 e0       	ldi	r21, 0x00	; 0
    4df4:	ce 01       	movw	r24, r28
    4df6:	01 96       	adiw	r24, 0x01	; 1
    4df8:	fc 01       	movw	r30, r24
    4dfa:	e4 0f       	add	r30, r20
    4dfc:	f5 1f       	adc	r31, r21
    4dfe:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4e00:	76 2f       	mov	r23, r22
    4e02:	72 1b       	sub	r23, r18
    4e04:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	24 1b       	sub	r18, r20
    4e0a:	35 0b       	sbc	r19, r21
    4e0c:	0c c0       	rjmp	.+24     	; 0x4e26 <AddZeroLead+0x86>
    4e0e:	e7 2f       	mov	r30, r23
    4e10:	f0 e0       	ldi	r31, 0x00	; 0
    4e12:	d6 01       	movw	r26, r12
    4e14:	ae 0f       	add	r26, r30
    4e16:	bf 1f       	adc	r27, r31
    4e18:	e0 0f       	add	r30, r16
    4e1a:	f1 1f       	adc	r31, r17
    4e1c:	e2 0f       	add	r30, r18
    4e1e:	f3 1f       	adc	r31, r19
    4e20:	80 81       	ld	r24, Z
    4e22:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4e24:	7f 5f       	subi	r23, 0xFF	; 255
    4e26:	76 17       	cp	r23, r22
    4e28:	90 f3       	brcs	.-28     	; 0x4e0e <AddZeroLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    4e2a:	4c 0d       	add	r20, r12
    4e2c:	5d 1d       	adc	r21, r13
    4e2e:	da 01       	movw	r26, r20
    4e30:	1c 92       	st	X, r1
    4e32:	f8 01       	movw	r30, r16
    4e34:	04 c0       	rjmp	.+8      	; 0x4e3e <AddZeroLead+0x9e>
	     //Zeroed
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    4e36:	d7 01       	movw	r26, r14
    4e38:	8d 91       	ld	r24, X+
    4e3a:	7d 01       	movw	r14, r26
    4e3c:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Zeroed
         for(i=0;i<Size;i++){
    4e3e:	8e 2d       	mov	r24, r14
    4e40:	8b 19       	sub	r24, r11
    4e42:	86 17       	cp	r24, r22
    4e44:	c0 f3       	brcs	.-16     	; 0x4e36 <AddZeroLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    4e46:	06 0f       	add	r16, r22
    4e48:	11 1d       	adc	r17, r1
    4e4a:	f8 01       	movw	r30, r16
    4e4c:	10 82       	st	Z, r1
	 }
}
    4e4e:	6e 96       	adiw	r28, 0x1e	; 30
    4e50:	0f b6       	in	r0, 0x3f	; 63
    4e52:	f8 94       	cli
    4e54:	de bf       	out	0x3e, r29	; 62
    4e56:	0f be       	out	0x3f, r0	; 63
    4e58:	cd bf       	out	0x3d, r28	; 61
    4e5a:	cf 91       	pop	r28
    4e5c:	df 91       	pop	r29
    4e5e:	1f 91       	pop	r17
    4e60:	0f 91       	pop	r16
    4e62:	ff 90       	pop	r15
    4e64:	ef 90       	pop	r14
    4e66:	df 90       	pop	r13
    4e68:	cf 90       	pop	r12
    4e6a:	bf 90       	pop	r11
    4e6c:	08 95       	ret

00004e6e <GetTotalizerMoney>:
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
void GetTotalizerMoney(char iPumpID,char iGrade, char *Result){
    4e6e:	0f 93       	push	r16
    4e70:	1f 93       	push	r17
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	18 2f       	mov	r17, r24
    4e78:	06 2f       	mov	r16, r22
    4e7a:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,13); 
    4e7c:	ca 01       	movw	r24, r20
    4e7e:	6d e0       	ldi	r22, 0x0D	; 13
    4e80:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    4e84:	81 2f       	mov	r24, r17
    4e86:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
    4e8a:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    4e8c:	88 23       	and	r24, r24
    4e8e:	39 f0       	breq	.+14     	; 0x4e9e <GetTotalizerMoney+0x30>
	    FIPAddr=FIPAddr-1;
	    GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    4e90:	41 50       	subi	r20, 0x01	; 1
    4e92:	81 e0       	ldi	r24, 0x01	; 1
    4e94:	61 e0       	ldi	r22, 0x01	; 1
    4e96:	20 2f       	mov	r18, r16
    4e98:	8e 01       	movw	r16, r28
    4e9a:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}
    4e9e:	df 91       	pop	r29
    4ea0:	cf 91       	pop	r28
    4ea2:	1f 91       	pop	r17
    4ea4:	0f 91       	pop	r16
    4ea6:	08 95       	ret

00004ea8 <GetTotalizerVolume>:
     AddZeroLead(Result,10);
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}

void GetTotalizerVolume(char iPumpID,char iGrade,char *Result){
    4ea8:	0f 93       	push	r16
    4eaa:	1f 93       	push	r17
    4eac:	cf 93       	push	r28
    4eae:	df 93       	push	r29
    4eb0:	18 2f       	mov	r17, r24
    4eb2:	06 2f       	mov	r16, r22
    4eb4:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,11);
    4eb6:	ca 01       	movw	r24, r20
    4eb8:	6b e0       	ldi	r22, 0x0B	; 11
    4eba:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    4ebe:	81 2f       	mov	r24, r17
    4ec0:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
    4ec4:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    4ec6:	88 23       	and	r24, r24
    4ec8:	39 f0       	breq	.+14     	; 0x4ed8 <GetTotalizerVolume+0x30>
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    4eca:	41 50       	subi	r20, 0x01	; 1
    4ecc:	80 e0       	ldi	r24, 0x00	; 0
    4ece:	61 e0       	ldi	r22, 0x01	; 1
    4ed0:	20 2f       	mov	r18, r16
    4ed2:	8e 01       	movw	r16, r28
    4ed4:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
    4ed8:	df 91       	pop	r29
    4eda:	cf 91       	pop	r28
    4edc:	1f 91       	pop	r17
    4ede:	0f 91       	pop	r16
    4ee0:	08 95       	ret

00004ee2 <GetTransactionMoney>:
void GetTransactionVolume(char iPumpID,char *Result){
     AddZeroLead(Result,10);
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
void GetTransactionMoney(char iPumpID,char *Result){
    4ee2:	ef 92       	push	r14
    4ee4:	ff 92       	push	r15
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	08 2f       	mov	r16, r24
    4eec:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    4eee:	cb 01       	movw	r24, r22
    4ef0:	6a e0       	ldi	r22, 0x0A	; 10
    4ef2:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
    4ef6:	00 d0       	rcall	.+0      	; 0x4ef8 <GetTransactionMoney+0x16>
    4ef8:	00 d0       	rcall	.+0      	; 0x4efa <GetTransactionMoney+0x18>
    4efa:	00 d0       	rcall	.+0      	; 0x4efc <GetTransactionMoney+0x1a>
    4efc:	ed b7       	in	r30, 0x3d	; 61
    4efe:	fe b7       	in	r31, 0x3e	; 62
    4f00:	31 96       	adiw	r30, 0x01	; 1
    4f02:	ad b7       	in	r26, 0x3d	; 61
    4f04:	be b7       	in	r27, 0x3e	; 62
    4f06:	12 96       	adiw	r26, 0x02	; 2
    4f08:	fc 92       	st	X, r15
    4f0a:	ee 92       	st	-X, r14
    4f0c:	11 97       	sbiw	r26, 0x01	; 1
    4f0e:	8b e4       	ldi	r24, 0x4B	; 75
    4f10:	95 e0       	ldi	r25, 0x05	; 5
    4f12:	93 83       	std	Z+3, r25	; 0x03
    4f14:	82 83       	std	Z+2, r24	; 0x02
    4f16:	10 e0       	ldi	r17, 0x00	; 0
    4f18:	0f 70       	andi	r16, 0x0F	; 15
    4f1a:	10 70       	andi	r17, 0x00	; 0
    4f1c:	85 e3       	ldi	r24, 0x35	; 53
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	9c 01       	movw	r18, r24
    4f22:	02 9f       	mul	r16, r18
    4f24:	c0 01       	movw	r24, r0
    4f26:	03 9f       	mul	r16, r19
    4f28:	90 0d       	add	r25, r0
    4f2a:	12 9f       	mul	r17, r18
    4f2c:	90 0d       	add	r25, r0
    4f2e:	11 24       	eor	r1, r1
    4f30:	86 52       	subi	r24, 0x26	; 38
    4f32:	9a 4f       	sbci	r25, 0xFA	; 250
    4f34:	95 83       	std	Z+5, r25	; 0x05
    4f36:	84 83       	std	Z+4, r24	; 0x04
    4f38:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    4f3c:	8d b7       	in	r24, 0x3d	; 61
    4f3e:	9e b7       	in	r25, 0x3e	; 62
    4f40:	06 96       	adiw	r24, 0x06	; 6
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	9e bf       	out	0x3e, r25	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}
    4f4c:	1f 91       	pop	r17
    4f4e:	0f 91       	pop	r16
    4f50:	ff 90       	pop	r15
    4f52:	ef 90       	pop	r14
    4f54:	08 95       	ret

00004f56 <GetTransactionVolume>:
     }
*/
     FormatDecimal(Result,CurrentDecimal);
}

void GetTransactionVolume(char iPumpID,char *Result){
    4f56:	ef 92       	push	r14
    4f58:	ff 92       	push	r15
    4f5a:	0f 93       	push	r16
    4f5c:	1f 93       	push	r17
    4f5e:	08 2f       	mov	r16, r24
    4f60:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    4f62:	cb 01       	movw	r24, r22
    4f64:	6a e0       	ldi	r22, 0x0A	; 10
    4f66:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
    4f6a:	00 d0       	rcall	.+0      	; 0x4f6c <GetTransactionVolume+0x16>
    4f6c:	00 d0       	rcall	.+0      	; 0x4f6e <GetTransactionVolume+0x18>
    4f6e:	00 d0       	rcall	.+0      	; 0x4f70 <GetTransactionVolume+0x1a>
    4f70:	ed b7       	in	r30, 0x3d	; 61
    4f72:	fe b7       	in	r31, 0x3e	; 62
    4f74:	31 96       	adiw	r30, 0x01	; 1
    4f76:	ad b7       	in	r26, 0x3d	; 61
    4f78:	be b7       	in	r27, 0x3e	; 62
    4f7a:	12 96       	adiw	r26, 0x02	; 2
    4f7c:	fc 92       	st	X, r15
    4f7e:	ee 92       	st	-X, r14
    4f80:	11 97       	sbiw	r26, 0x01	; 1
    4f82:	8e e4       	ldi	r24, 0x4E	; 78
    4f84:	95 e0       	ldi	r25, 0x05	; 5
    4f86:	93 83       	std	Z+3, r25	; 0x03
    4f88:	82 83       	std	Z+2, r24	; 0x02
    4f8a:	10 e0       	ldi	r17, 0x00	; 0
    4f8c:	0f 70       	andi	r16, 0x0F	; 15
    4f8e:	10 70       	andi	r17, 0x00	; 0
    4f90:	85 e3       	ldi	r24, 0x35	; 53
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	9c 01       	movw	r18, r24
    4f96:	02 9f       	mul	r16, r18
    4f98:	c0 01       	movw	r24, r0
    4f9a:	03 9f       	mul	r16, r19
    4f9c:	90 0d       	add	r25, r0
    4f9e:	12 9f       	mul	r17, r18
    4fa0:	90 0d       	add	r25, r0
    4fa2:	11 24       	eor	r1, r1
    4fa4:	8f 52       	subi	r24, 0x2F	; 47
    4fa6:	9a 4f       	sbci	r25, 0xFA	; 250
    4fa8:	95 83       	std	Z+5, r25	; 0x05
    4faa:	84 83       	std	Z+4, r24	; 0x04
    4fac:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    4fb0:	8d b7       	in	r24, 0x3d	; 61
    4fb2:	9e b7       	in	r25, 0x3e	; 62
    4fb4:	06 96       	adiw	r24, 0x06	; 6
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	9e bf       	out	0x3e, r25	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
    4fc0:	1f 91       	pop	r17
    4fc2:	0f 91       	pop	r16
    4fc4:	ff 90       	pop	r15
    4fc6:	ef 90       	pop	r14
    4fc8:	08 95       	ret

00004fca <SetTotalizerData>:
			  }
		  }
	 }
}

void SetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "00000000"
    4fca:	af 92       	push	r10
    4fcc:	bf 92       	push	r11
    4fce:	cf 92       	push	r12
    4fd0:	df 92       	push	r13
    4fd2:	ef 92       	push	r14
    4fd4:	ff 92       	push	r15
    4fd6:	0f 93       	push	r16
    4fd8:	1f 93       	push	r17
    4fda:	df 93       	push	r29
    4fdc:	cf 93       	push	r28
    4fde:	cd b7       	in	r28, 0x3d	; 61
    4fe0:	de b7       	in	r29, 0x3e	; 62
    4fe2:	65 97       	sbiw	r28, 0x15	; 21
    4fe4:	0f b6       	in	r0, 0x3f	; 63
    4fe6:	f8 94       	cli
    4fe8:	de bf       	out	0x3e, r29	; 62
    4fea:	0f be       	out	0x3f, r0	; 63
    4fec:	cd bf       	out	0x3d, r28	; 61
    4fee:	d8 2e       	mov	r13, r24
    4ff0:	c6 2e       	mov	r12, r22
    4ff2:	b4 2e       	mov	r11, r20
    4ff4:	a2 2e       	mov	r10, r18
     char rawValue[6],iPumpAddr,iGrade;
	 char strPValue[15];
	 char Idx;
	 char strSend[30];
	 //Convert String to RawData
	 if (strlen(strValue)<=12){
    4ff6:	d8 01       	movw	r26, r16
    4ff8:	0d 90       	ld	r0, X+
    4ffa:	00 20       	and	r0, r0
    4ffc:	e9 f7       	brne	.-6      	; 0x4ff8 <SetTotalizerData+0x2e>
    4ffe:	11 97       	sbiw	r26, 0x01	; 1
    5000:	a0 1b       	sub	r26, r16
    5002:	b1 0b       	sbc	r27, r17
    5004:	77 e0       	ldi	r23, 0x07	; 7
    5006:	e7 2e       	mov	r14, r23
    5008:	f1 2c       	mov	r15, r1
    500a:	ec 0e       	add	r14, r28
    500c:	fd 1e       	adc	r15, r29
    500e:	ad 30       	cpi	r26, 0x0D	; 13
    5010:	b1 05       	cpc	r27, r1
    5012:	58 f5       	brcc	.+86     	; 0x506a <SetTotalizerData+0xa0>
	     sprintf_P(strPValue,PSTR("%s"),strValue);
    5014:	00 d0       	rcall	.+0      	; 0x5016 <SetTotalizerData+0x4c>
    5016:	00 d0       	rcall	.+0      	; 0x5018 <SetTotalizerData+0x4e>
    5018:	00 d0       	rcall	.+0      	; 0x501a <SetTotalizerData+0x50>
    501a:	ed b7       	in	r30, 0x3d	; 61
    501c:	fe b7       	in	r31, 0x3e	; 62
    501e:	31 96       	adiw	r30, 0x01	; 1
    5020:	ad b7       	in	r26, 0x3d	; 61
    5022:	be b7       	in	r27, 0x3e	; 62
    5024:	12 96       	adiw	r26, 0x02	; 2
    5026:	fc 92       	st	X, r15
    5028:	ee 92       	st	-X, r14
    502a:	11 97       	sbiw	r26, 0x01	; 1
    502c:	80 e2       	ldi	r24, 0x20	; 32
    502e:	97 e0       	ldi	r25, 0x07	; 7
    5030:	93 83       	std	Z+3, r25	; 0x03
    5032:	82 83       	std	Z+2, r24	; 0x02
    5034:	15 83       	std	Z+5, r17	; 0x05
    5036:	04 83       	std	Z+4, r16	; 0x04
    5038:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 if (strlen(strPValue)<12)AddZeroLead(strPValue,12);
    503c:	f7 01       	movw	r30, r14
    503e:	01 90       	ld	r0, Z+
    5040:	00 20       	and	r0, r0
    5042:	e9 f7       	brne	.-6      	; 0x503e <SetTotalizerData+0x74>
    5044:	31 97       	sbiw	r30, 0x01	; 1
    5046:	ee 19       	sub	r30, r14
    5048:	ff 09       	sbc	r31, r15
    504a:	4d b7       	in	r20, 0x3d	; 61
    504c:	5e b7       	in	r21, 0x3e	; 62
    504e:	4a 5f       	subi	r20, 0xFA	; 250
    5050:	5f 4f       	sbci	r21, 0xFF	; 255
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	f8 94       	cli
    5056:	5e bf       	out	0x3e, r21	; 62
    5058:	0f be       	out	0x3f, r0	; 63
    505a:	4d bf       	out	0x3d, r20	; 61
    505c:	3c 97       	sbiw	r30, 0x0c	; 12
    505e:	a0 f4       	brcc	.+40     	; 0x5088 <SetTotalizerData+0xbe>
    5060:	c7 01       	movw	r24, r14
    5062:	6c e0       	ldi	r22, 0x0C	; 12
    5064:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
    5068:	0f c0       	rjmp	.+30     	; 0x5088 <SetTotalizerData+0xbe>
    506a:	8a 2f       	mov	r24, r26
    506c:	8c 50       	subi	r24, 0x0C	; 12
    506e:	f8 01       	movw	r30, r16
    5070:	e8 0f       	add	r30, r24
    5072:	f1 1d       	adc	r31, r1
    5074:	d7 01       	movw	r26, r14
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    5076:	9e 01       	movw	r18, r28
    5078:	2d 5e       	subi	r18, 0xED	; 237
    507a:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    507c:	81 91       	ld	r24, Z+
    507e:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    5080:	a2 17       	cp	r26, r18
    5082:	b3 07       	cpc	r27, r19
    5084:	d9 f7       	brne	.-10     	; 0x507c <SetTotalizerData+0xb2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    5086:	1b 8a       	std	Y+19, r1	; 0x13
	 else {//Lebih dari 8: 0123456789
	     Idx=strlen(strValue)-12;
	     StrPosCopy(strValue,strPValue,Idx,12);
	 }

	 iPumpAddr=(xPumpAddr&0x0F);
    5088:	0b 2d       	mov	r16, r11
    508a:	0f 70       	andi	r16, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    508c:	1a 2d       	mov	r17, r10
    508e:	11 50       	subi	r17, 0x01	; 1
    5090:	16 30       	cpi	r17, 0x06	; 6
    5092:	08 f0       	brcs	.+2      	; 0x5096 <SetTotalizerData+0xcc>
    5094:	10 e0       	ldi	r17, 0x00	; 0
	     iGrade=xGradeAddr-1;
	 StrToRaw(strPValue,rawValue);
    5096:	ce 01       	movw	r24, r28
    5098:	07 96       	adiw	r24, 0x07	; 7
    509a:	7e 01       	movw	r14, r28
    509c:	08 94       	sec
    509e:	e1 1c       	adc	r14, r1
    50a0:	f1 1c       	adc	r15, r1
    50a2:	b7 01       	movw	r22, r14
    50a4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <StrToRaw>

	 if (TType==TVOLUME)eeprom_write_block((const void*)&rawValue,(void*)&(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    50a8:	dd 20       	and	r13, r13
    50aa:	d9 f4       	brne	.+54     	; 0x50e2 <SetTotalizerData+0x118>
    50ac:	64 e2       	ldi	r22, 0x24	; 36
    50ae:	06 9f       	mul	r16, r22
    50b0:	b0 01       	movw	r22, r0
    50b2:	11 24       	eor	r1, r1
    50b4:	2c 2d       	mov	r18, r12
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	80 e2       	ldi	r24, 0x20	; 32
    50ba:	91 e0       	ldi	r25, 0x01	; 1
    50bc:	dc 01       	movw	r26, r24
    50be:	2a 9f       	mul	r18, r26
    50c0:	c0 01       	movw	r24, r0
    50c2:	2b 9f       	mul	r18, r27
    50c4:	90 0d       	add	r25, r0
    50c6:	3a 9f       	mul	r19, r26
    50c8:	90 0d       	add	r25, r0
    50ca:	11 24       	eor	r1, r1
    50cc:	68 0f       	add	r22, r24
    50ce:	79 1f       	adc	r23, r25
    50d0:	86 e0       	ldi	r24, 0x06	; 6
    50d2:	18 9f       	mul	r17, r24
    50d4:	c0 01       	movw	r24, r0
    50d6:	11 24       	eor	r1, r1
    50d8:	68 0f       	add	r22, r24
    50da:	79 1f       	adc	r23, r25
    50dc:	67 53       	subi	r22, 0x37	; 55
    50de:	7c 4f       	sbci	r23, 0xFC	; 252
    50e0:	1d c0       	rjmp	.+58     	; 0x511c <SetTotalizerData+0x152>
	 else 
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    50e2:	b1 e0       	ldi	r27, 0x01	; 1
    50e4:	db 16       	cp	r13, r27
    50e6:	f9 f4       	brne	.+62     	; 0x5126 <SetTotalizerData+0x15c>
    50e8:	64 e2       	ldi	r22, 0x24	; 36
    50ea:	06 9f       	mul	r16, r22
    50ec:	b0 01       	movw	r22, r0
    50ee:	11 24       	eor	r1, r1
    50f0:	2c 2d       	mov	r18, r12
    50f2:	30 e0       	ldi	r19, 0x00	; 0
    50f4:	80 e2       	ldi	r24, 0x20	; 32
    50f6:	91 e0       	ldi	r25, 0x01	; 1
    50f8:	ac 01       	movw	r20, r24
    50fa:	24 9f       	mul	r18, r20
    50fc:	c0 01       	movw	r24, r0
    50fe:	25 9f       	mul	r18, r21
    5100:	90 0d       	add	r25, r0
    5102:	34 9f       	mul	r19, r20
    5104:	90 0d       	add	r25, r0
    5106:	11 24       	eor	r1, r1
    5108:	68 0f       	add	r22, r24
    510a:	79 1f       	adc	r23, r25
    510c:	86 e0       	ldi	r24, 0x06	; 6
    510e:	18 9f       	mul	r17, r24
    5110:	c0 01       	movw	r24, r0
    5112:	11 24       	eor	r1, r1
    5114:	68 0f       	add	r22, r24
    5116:	79 1f       	adc	r23, r25
    5118:	67 5f       	subi	r22, 0xF7	; 247
    511a:	79 4f       	sbci	r23, 0xF9	; 249
    511c:	c7 01       	movw	r24, r14
    511e:	46 e0       	ldi	r20, 0x06	; 6
    5120:	50 e0       	ldi	r21, 0x00	; 0
    5122:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
}
    5126:	65 96       	adiw	r28, 0x15	; 21
    5128:	0f b6       	in	r0, 0x3f	; 63
    512a:	f8 94       	cli
    512c:	de bf       	out	0x3e, r29	; 62
    512e:	0f be       	out	0x3f, r0	; 63
    5130:	cd bf       	out	0x3d, r28	; 61
    5132:	cf 91       	pop	r28
    5134:	df 91       	pop	r29
    5136:	1f 91       	pop	r17
    5138:	0f 91       	pop	r16
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	df 90       	pop	r13
    5140:	cf 90       	pop	r12
    5142:	bf 90       	pop	r11
    5144:	af 90       	pop	r10
    5146:	08 95       	ret

00005148 <SaveTotalizerCurrentToLast>:
	 }Dest[12]=0;
}

//SetTotalizerData(TVOLUME,TOTALIZER_NOW,1,1,strVolume)

void SaveTotalizerCurrentToLast(){
    5148:	4f 92       	push	r4
    514a:	5f 92       	push	r5
    514c:	7f 92       	push	r7
    514e:	8f 92       	push	r8
    5150:	9f 92       	push	r9
    5152:	af 92       	push	r10
    5154:	bf 92       	push	r11
    5156:	cf 92       	push	r12
    5158:	df 92       	push	r13
    515a:	ef 92       	push	r14
    515c:	ff 92       	push	r15
    515e:	0f 93       	push	r16
    5160:	1f 93       	push	r17
    5162:	df 93       	push	r29
    5164:	cf 93       	push	r28
    5166:	cd b7       	in	r28, 0x3d	; 61
    5168:	de b7       	in	r29, 0x3e	; 62
    516a:	2f 97       	sbiw	r28, 0x0f	; 15
    516c:	0f b6       	in	r0, 0x3f	; 63
    516e:	f8 94       	cli
    5170:	de bf       	out	0x3e, r29	; 62
    5172:	0f be       	out	0x3f, r0	; 63
    5174:	cd bf       	out	0x3d, r28	; 61
    5176:	77 24       	eor	r7, r7
    5178:	73 94       	inc	r7
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    517a:	4e 01       	movw	r8, r28
    517c:	08 94       	sec
    517e:	81 1c       	adc	r8, r1
    5180:	91 1c       	adc	r9, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5182:	e0 e1       	ldi	r30, 0x10	; 16
    5184:	4e 2e       	mov	r4, r30
    5186:	51 2c       	mov	r5, r1
    5188:	4c 0e       	add	r4, r28
    518a:	5d 1e       	adc	r5, r29
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    518c:	87 2d       	mov	r24, r7
    518e:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
		  if (FIPAddr>0){
    5192:	88 23       	and	r24, r24
    5194:	91 f1       	breq	.+100    	; 0x51fa <SaveTotalizerCurrentToLast+0xb2>
		      FIPAddr=FIPAddr-1;
    5196:	a8 2e       	mov	r10, r24
    5198:	aa 94       	dec	r10
    519a:	bb 24       	eor	r11, r11
    519c:	b3 94       	inc	r11
    519e:	2a c0       	rjmp	.+84     	; 0x51f4 <SaveTotalizerCurrentToLast+0xac>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    51a0:	f7 01       	movw	r30, r14
    51a2:	11 92       	st	Z+, r1
    51a4:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    51a6:	e4 15       	cp	r30, r4
    51a8:	f5 05       	cpc	r31, r5
    51aa:	d1 f7       	brne	.-12     	; 0x51a0 <SaveTotalizerCurrentToLast+0x58>
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    51ac:	80 e0       	ldi	r24, 0x00	; 0
    51ae:	61 e0       	ldi	r22, 0x01	; 1
    51b0:	4a 2d       	mov	r20, r10
    51b2:	2b 2d       	mov	r18, r11
    51b4:	84 01       	movw	r16, r8
    51b6:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    51ba:	80 e0       	ldi	r24, 0x00	; 0
    51bc:	60 e0       	ldi	r22, 0x00	; 0
    51be:	4a 2d       	mov	r20, r10
    51c0:	2b 2d       	mov	r18, r11
    51c2:	0e 94 e5 27 	call	0x4fca	; 0x4fca <SetTotalizerData>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    51c6:	f6 01       	movw	r30, r12
    51c8:	11 92       	st	Z+, r1
    51ca:	6f 01       	movw	r12, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    51cc:	ee 15       	cp	r30, r14
    51ce:	ff 05       	cpc	r31, r15
    51d0:	d1 f7       	brne	.-12     	; 0x51c6 <SaveTotalizerCurrentToLast+0x7e>
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    51d2:	81 e0       	ldi	r24, 0x01	; 1
    51d4:	61 e0       	ldi	r22, 0x01	; 1
    51d6:	4a 2d       	mov	r20, r10
    51d8:	2b 2d       	mov	r18, r11
    51da:	84 01       	movw	r16, r8
    51dc:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    51e0:	81 e0       	ldi	r24, 0x01	; 1
    51e2:	60 e0       	ldi	r22, 0x00	; 0
    51e4:	4a 2d       	mov	r20, r10
    51e6:	2b 2d       	mov	r18, r11
    51e8:	0e 94 e5 27 	call	0x4fca	; 0x4fca <SetTotalizerData>
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    51ec:	b3 94       	inc	r11
    51ee:	f7 e0       	ldi	r31, 0x07	; 7
    51f0:	bf 16       	cp	r11, r31
    51f2:	19 f0       	breq	.+6      	; 0x51fa <SaveTotalizerCurrentToLast+0xb2>
    51f4:	64 01       	movw	r12, r8
    51f6:	74 01       	movw	r14, r8
    51f8:	d3 cf       	rjmp	.-90     	; 0x51a0 <SaveTotalizerCurrentToLast+0x58>
void SaveTotalizerCurrentToLast(){
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    51fa:	73 94       	inc	r7
    51fc:	81 e1       	ldi	r24, 0x11	; 17
    51fe:	78 16       	cp	r7, r24
    5200:	29 f6       	brne	.-118    	; 0x518c <SaveTotalizerCurrentToLast+0x44>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    5202:	2f 96       	adiw	r28, 0x0f	; 15
    5204:	0f b6       	in	r0, 0x3f	; 63
    5206:	f8 94       	cli
    5208:	de bf       	out	0x3e, r29	; 62
    520a:	0f be       	out	0x3f, r0	; 63
    520c:	cd bf       	out	0x3d, r28	; 61
    520e:	cf 91       	pop	r28
    5210:	df 91       	pop	r29
    5212:	1f 91       	pop	r17
    5214:	0f 91       	pop	r16
    5216:	ff 90       	pop	r15
    5218:	ef 90       	pop	r14
    521a:	df 90       	pop	r13
    521c:	cf 90       	pop	r12
    521e:	bf 90       	pop	r11
    5220:	af 90       	pop	r10
    5222:	9f 90       	pop	r9
    5224:	8f 90       	pop	r8
    5226:	7f 90       	pop	r7
    5228:	5f 90       	pop	r5
    522a:	4f 90       	pop	r4
    522c:	08 95       	ret

0000522e <ResetTotalizer>:
}

//-------------------Totalizer-----------------------------------------
//TAddr{TOTALIZER_LAST,TOTALIZER_NOW}
//TType:{TNONE,TVOLUME,TMONEY};
void ResetTotalizer(char TAddr){//Clear All TotalizerData;
    522e:	af 92       	push	r10
    5230:	bf 92       	push	r11
    5232:	cf 92       	push	r12
    5234:	df 92       	push	r13
    5236:	ef 92       	push	r14
    5238:	ff 92       	push	r15
    523a:	0f 93       	push	r16
    523c:	1f 93       	push	r17
    523e:	df 93       	push	r29
    5240:	cf 93       	push	r28
    5242:	cd b7       	in	r28, 0x3d	; 61
    5244:	de b7       	in	r29, 0x3e	; 62
    5246:	29 97       	sbiw	r28, 0x09	; 9
    5248:	0f b6       	in	r0, 0x3f	; 63
    524a:	f8 94       	cli
    524c:	de bf       	out	0x3e, r29	; 62
    524e:	0f be       	out	0x3f, r0	; 63
    5250:	cd bf       	out	0x3d, r28	; 61
    5252:	a8 2e       	mov	r10, r24
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
    5254:	00 d0       	rcall	.+0      	; 0x5256 <ResetTotalizer+0x28>
    5256:	00 d0       	rcall	.+0      	; 0x5258 <ResetTotalizer+0x2a>
    5258:	6e 01       	movw	r12, r28
    525a:	08 94       	sec
    525c:	c1 1c       	adc	r12, r1
    525e:	d1 1c       	adc	r13, r1
    5260:	ed b7       	in	r30, 0x3d	; 61
    5262:	fe b7       	in	r31, 0x3e	; 62
    5264:	d2 82       	std	Z+2, r13	; 0x02
    5266:	c1 82       	std	Z+1, r12	; 0x01
    5268:	83 e2       	ldi	r24, 0x23	; 35
    526a:	97 e0       	ldi	r25, 0x07	; 7
    526c:	94 83       	std	Z+4, r25	; 0x04
    526e:	83 83       	std	Z+3, r24	; 0x03
    5270:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    5274:	ee 24       	eor	r14, r14
    5276:	e3 94       	inc	r14
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
    527e:	0f 90       	pop	r0
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    5280:	8e 2d       	mov	r24, r14
    5282:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
		  if (FIPAddr>0){
    5286:	88 23       	and	r24, r24
    5288:	a9 f0       	breq	.+42     	; 0x52b4 <ResetTotalizer+0x86>
		      FIPAddr=FIPAddr-1;
    528a:	b8 2e       	mov	r11, r24
    528c:	ba 94       	dec	r11
    528e:	ff 24       	eor	r15, r15
    5290:	f3 94       	inc	r15
			  for(iGrade=1;iGrade<=6;iGrade++){
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	6a 2d       	mov	r22, r10
    5296:	4b 2d       	mov	r20, r11
    5298:	2f 2d       	mov	r18, r15
    529a:	86 01       	movw	r16, r12
    529c:	0e 94 e5 27 	call	0x4fca	; 0x4fca <SetTotalizerData>
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	6a 2d       	mov	r22, r10
    52a4:	4b 2d       	mov	r20, r11
    52a6:	2f 2d       	mov	r18, r15
    52a8:	0e 94 e5 27 	call	0x4fca	; 0x4fca <SetTotalizerData>
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    52ac:	f3 94       	inc	r15
    52ae:	f7 e0       	ldi	r31, 0x07	; 7
    52b0:	ff 16       	cp	r15, r31
    52b2:	79 f7       	brne	.-34     	; 0x5292 <ResetTotalizer+0x64>
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
    52b4:	e3 94       	inc	r14
    52b6:	81 e1       	ldi	r24, 0x11	; 17
    52b8:	e8 16       	cp	r14, r24
    52ba:	11 f7       	brne	.-60     	; 0x5280 <ResetTotalizer+0x52>
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    52bc:	29 96       	adiw	r28, 0x09	; 9
    52be:	0f b6       	in	r0, 0x3f	; 63
    52c0:	f8 94       	cli
    52c2:	de bf       	out	0x3e, r29	; 62
    52c4:	0f be       	out	0x3f, r0	; 63
    52c6:	cd bf       	out	0x3d, r28	; 61
    52c8:	cf 91       	pop	r28
    52ca:	df 91       	pop	r29
    52cc:	1f 91       	pop	r17
    52ce:	0f 91       	pop	r16
    52d0:	ff 90       	pop	r15
    52d2:	ef 90       	pop	r14
    52d4:	df 90       	pop	r13
    52d6:	cf 90       	pop	r12
    52d8:	bf 90       	pop	r11
    52da:	af 90       	pop	r10
    52dc:	08 95       	ret

000052de <AddZeroLag>:
	         String[i]=strAdded[i];
	     }String[Size]=0;
	 }
}

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
    52de:	cf 93       	push	r28
    52e0:	df 93       	push	r29
    52e2:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    52e4:	dc 01       	movw	r26, r24
    52e6:	0d 90       	ld	r0, X+
    52e8:	00 20       	and	r0, r0
    52ea:	e9 f7       	brne	.-6      	; 0x52e6 <AddZeroLag+0x8>
    52ec:	11 97       	sbiw	r26, 0x01	; 1
    52ee:	a8 1b       	sub	r26, r24
    52f0:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    52f2:	a6 17       	cp	r26, r22
    52f4:	60 f4       	brcc	.+24     	; 0x530e <AddZeroLag+0x30>
    52f6:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]='0';
    52f8:	90 e3       	ldi	r25, 0x30	; 48
    52fa:	fe 01       	movw	r30, r28
    52fc:	e8 0f       	add	r30, r24
    52fe:	f1 1d       	adc	r31, r1
    5300:	90 83       	st	Z, r25

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    5302:	8f 5f       	subi	r24, 0xFF	; 255
    5304:	86 17       	cp	r24, r22
    5306:	c8 f3       	brcs	.-14     	; 0x52fa <AddZeroLag+0x1c>
	    String[i]='0';
	 }String[Size]=0;
    5308:	c6 0f       	add	r28, r22
    530a:	d1 1d       	adc	r29, r1
    530c:	18 82       	st	Y, r1
  }
}
    530e:	df 91       	pop	r29
    5310:	cf 91       	pop	r28
    5312:	08 95       	ret

00005314 <StrCalc>:
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    5314:	3f 92       	push	r3
    5316:	4f 92       	push	r4
    5318:	5f 92       	push	r5
    531a:	6f 92       	push	r6
    531c:	7f 92       	push	r7
    531e:	8f 92       	push	r8
    5320:	9f 92       	push	r9
    5322:	af 92       	push	r10
    5324:	bf 92       	push	r11
    5326:	cf 92       	push	r12
    5328:	df 92       	push	r13
    532a:	ef 92       	push	r14
    532c:	ff 92       	push	r15
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	df 93       	push	r29
    5334:	cf 93       	push	r28
    5336:	cd b7       	in	r28, 0x3d	; 61
    5338:	de b7       	in	r29, 0x3e	; 62
    533a:	c8 55       	subi	r28, 0x58	; 88
    533c:	d0 40       	sbci	r29, 0x00	; 0
    533e:	0f b6       	in	r0, 0x3f	; 63
    5340:	f8 94       	cli
    5342:	de bf       	out	0x3e, r29	; 62
    5344:	0f be       	out	0x3f, r0	; 63
    5346:	cd bf       	out	0x3d, r28	; 61
    5348:	68 2e       	mov	r6, r24
    534a:	67 96       	adiw	r28, 0x17	; 23
    534c:	7f af       	std	Y+63, r23	; 0x3f
    534e:	6e af       	std	Y+62, r22	; 0x3e
    5350:	67 97       	sbiw	r28, 0x17	; 23
    5352:	69 96       	adiw	r28, 0x19	; 25
    5354:	5f af       	std	Y+63, r21	; 0x3f
    5356:	4e af       	std	Y+62, r20	; 0x3e
    5358:	69 97       	sbiw	r28, 0x19	; 25
    535a:	59 01       	movw	r10, r18
    535c:	fe 01       	movw	r30, r28
    535e:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5360:	ce 01       	movw	r24, r28
    5362:	45 96       	adiw	r24, 0x15	; 21
	     strMemory[i]=data;
    5364:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5366:	e8 17       	cp	r30, r24
    5368:	f9 07       	cpc	r31, r25
    536a:	e1 f7       	brne	.-8      	; 0x5364 <StrCalc+0x50>
	     strMemory[i]=data;
    536c:	ce 01       	movw	r24, r28
    536e:	89 96       	adiw	r24, 0x29	; 41
    5370:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5372:	e8 17       	cp	r30, r24
    5374:	f9 07       	cpc	r31, r25
    5376:	e1 f7       	brne	.-8      	; 0x5370 <StrCalc+0x5c>
    5378:	fe 01       	movw	r30, r28
    537a:	fd 96       	adiw	r30, 0x3d	; 61
	     strMemory[i]=data;
    537c:	cf 01       	movw	r24, r30
    537e:	44 96       	adiw	r24, 0x14	; 20
    5380:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5382:	e8 17       	cp	r30, r24
    5384:	f9 07       	cpc	r31, r25
    5386:	e1 f7       	brne	.-8      	; 0x5380 <StrCalc+0x6c>
	 FillChar(tmpB,sizeof(tmpB),0);
	 FillChar(Result,sizeof(Result),0);
                                            // -5    -5     5    5
	                                        // -6 -   6 -  -6 -  6 -
                                            // -5+6   
	 sprintf_P(tmpA,PSTR("%s"),strA);       // 
    5388:	00 d0       	rcall	.+0      	; 0x538a <StrCalc+0x76>
    538a:	00 d0       	rcall	.+0      	; 0x538c <StrCalc+0x78>
    538c:	00 d0       	rcall	.+0      	; 0x538e <StrCalc+0x7a>
    538e:	ed b7       	in	r30, 0x3d	; 61
    5390:	fe b7       	in	r31, 0x3e	; 62
    5392:	31 96       	adiw	r30, 0x01	; 1
    5394:	8e 01       	movw	r16, r28
    5396:	0f 5f       	subi	r16, 0xFF	; 255
    5398:	1f 4f       	sbci	r17, 0xFF	; 255
    539a:	ad b7       	in	r26, 0x3d	; 61
    539c:	be b7       	in	r27, 0x3e	; 62
    539e:	12 96       	adiw	r26, 0x02	; 2
    53a0:	1c 93       	st	X, r17
    53a2:	0e 93       	st	-X, r16
    53a4:	11 97       	sbiw	r26, 0x01	; 1
    53a6:	8d e1       	ldi	r24, 0x1D	; 29
    53a8:	97 e0       	ldi	r25, 0x07	; 7
    53aa:	93 83       	std	Z+3, r25	; 0x03
    53ac:	82 83       	std	Z+2, r24	; 0x02
    53ae:	67 96       	adiw	r28, 0x17	; 23
    53b0:	2e ad       	ldd	r18, Y+62	; 0x3e
    53b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    53b4:	67 97       	sbiw	r28, 0x17	; 23
    53b6:	35 83       	std	Z+5, r19	; 0x05
    53b8:	24 83       	std	Z+4, r18	; 0x04
    53ba:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 sprintf_P(tmpB,PSTR("%s"),strB);  
    53be:	ed b7       	in	r30, 0x3d	; 61
    53c0:	fe b7       	in	r31, 0x3e	; 62
    53c2:	31 96       	adiw	r30, 0x01	; 1
    53c4:	ce 01       	movw	r24, r28
    53c6:	45 96       	adiw	r24, 0x15	; 21
    53c8:	ad b7       	in	r26, 0x3d	; 61
    53ca:	be b7       	in	r27, 0x3e	; 62
    53cc:	12 96       	adiw	r26, 0x02	; 2
    53ce:	9c 93       	st	X, r25
    53d0:	8e 93       	st	-X, r24
    53d2:	11 97       	sbiw	r26, 0x01	; 1
    53d4:	8a e1       	ldi	r24, 0x1A	; 26
    53d6:	97 e0       	ldi	r25, 0x07	; 7
    53d8:	93 83       	std	Z+3, r25	; 0x03
    53da:	82 83       	std	Z+2, r24	; 0x02
    53dc:	69 96       	adiw	r28, 0x19	; 25
    53de:	2e ad       	ldd	r18, Y+62	; 0x3e
    53e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    53e2:	69 97       	sbiw	r28, 0x19	; 25
    53e4:	35 83       	std	Z+5, r19	; 0x05
    53e6:	24 83       	std	Z+4, r18	; 0x04
    53e8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

     if (IsMinus(tmpA)==True){
    53ec:	8d b7       	in	r24, 0x3d	; 61
    53ee:	9e b7       	in	r25, 0x3e	; 62
    53f0:	06 96       	adiw	r24, 0x06	; 6
    53f2:	0f b6       	in	r0, 0x3f	; 63
    53f4:	f8 94       	cli
    53f6:	9e bf       	out	0x3e, r25	; 62
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	8d bf       	out	0x3d, r24	; 61
    53fc:	c8 01       	movw	r24, r16
    53fe:	0e 94 8d 23 	call	0x471a	; 0x471a <IsMinus>
    5402:	81 30       	cpi	r24, 0x01	; 1
    5404:	21 f0       	breq	.+8      	; 0x540e <StrCalc+0xfa>
    5406:	65 96       	adiw	r28, 0x15	; 21
    5408:	1f ae       	std	Y+63, r1	; 0x3f
    540a:	65 97       	sbiw	r28, 0x15	; 21
    540c:	07 c0       	rjmp	.+14     	; 0x541c <StrCalc+0x108>
	     RemoveMinus(tmpA);
    540e:	c8 01       	movw	r24, r16
    5410:	0e 94 92 23 	call	0x4724	; 0x4724 <RemoveMinus>
    5414:	91 e0       	ldi	r25, 0x01	; 1
    5416:	65 96       	adiw	r28, 0x15	; 21
    5418:	9f af       	std	Y+63, r25	; 0x3f
    541a:	65 97       	sbiw	r28, 0x15	; 21
		 IsMinA=True;
	 }
     if (IsMinus(tmpB)==True){
    541c:	8e 01       	movw	r16, r28
    541e:	0b 5e       	subi	r16, 0xEB	; 235
    5420:	1f 4f       	sbci	r17, 0xFF	; 255
    5422:	c8 01       	movw	r24, r16
    5424:	0e 94 8d 23 	call	0x471a	; 0x471a <IsMinus>
    5428:	81 30       	cpi	r24, 0x01	; 1
    542a:	21 f0       	breq	.+8      	; 0x5434 <StrCalc+0x120>
    542c:	64 96       	adiw	r28, 0x14	; 20
    542e:	1f ae       	std	Y+63, r1	; 0x3f
    5430:	64 97       	sbiw	r28, 0x14	; 20
    5432:	07 c0       	rjmp	.+14     	; 0x5442 <StrCalc+0x12e>
	     RemoveMinus(tmpB);
    5434:	c8 01       	movw	r24, r16
    5436:	0e 94 92 23 	call	0x4724	; 0x4724 <RemoveMinus>
    543a:	a1 e0       	ldi	r26, 0x01	; 1
    543c:	64 96       	adiw	r28, 0x14	; 20
    543e:	af af       	std	Y+63, r26	; 0x3f
    5440:	64 97       	sbiw	r28, 0x14	; 20
		 IsMinB=True;
	 }    	

     lenA=strlen(tmpA);
    5442:	fe 01       	movw	r30, r28
    5444:	31 96       	adiw	r30, 0x01	; 1
    5446:	df 01       	movw	r26, r30
    5448:	0d 90       	ld	r0, X+
    544a:	00 20       	and	r0, r0
    544c:	e9 f7       	brne	.-6      	; 0x5448 <StrCalc+0x134>
    544e:	cd 01       	movw	r24, r26
    5450:	01 97       	sbiw	r24, 0x01	; 1
    5452:	8e 1b       	sub	r24, r30
    5454:	9f 0b       	sbc	r25, r31
     lenB=strlen(tmpB);
    5456:	de 01       	movw	r26, r28
    5458:	55 96       	adiw	r26, 0x15	; 21
    545a:	fd 01       	movw	r30, r26
    545c:	01 90       	ld	r0, Z+
    545e:	00 20       	and	r0, r0
    5460:	e9 f7       	brne	.-6      	; 0x545c <StrCalc+0x148>
    5462:	31 97       	sbiw	r30, 0x01	; 1
     /*
	 sprintf_P(strSend,PSTR("A:%s"),strA);	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);	 uart_print(0,1,strSend);
     */

     AddZeroLead(tmpA,FixLen+1);
    5464:	1e 2f       	mov	r17, r30
    5466:	1a 1b       	sub	r17, r26
    5468:	18 17       	cp	r17, r24
    546a:	08 f4       	brcc	.+2      	; 0x546e <StrCalc+0x15a>
    546c:	18 2f       	mov	r17, r24
    546e:	1f 5f       	subi	r17, 0xFF	; 255
    5470:	7e 01       	movw	r14, r28
    5472:	08 94       	sec
    5474:	e1 1c       	adc	r14, r1
    5476:	f1 1c       	adc	r15, r1
    5478:	c7 01       	movw	r24, r14
    547a:	61 2f       	mov	r22, r17
    547c:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
     AddZeroLead(tmpB,FixLen+1);
    5480:	05 e1       	ldi	r16, 0x15	; 21
    5482:	c0 2e       	mov	r12, r16
    5484:	d1 2c       	mov	r13, r1
    5486:	cc 0e       	add	r12, r28
    5488:	dd 1e       	adc	r13, r29
    548a:	c6 01       	movw	r24, r12
    548c:	61 2f       	mov	r22, r17
    548e:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);
	 uart_print(0,1,strSend);
	 */

     lenA=strlen(tmpA);
    5492:	f7 01       	movw	r30, r14
    5494:	01 90       	ld	r0, Z+
    5496:	00 20       	and	r0, r0
    5498:	e9 f7       	brne	.-6      	; 0x5494 <StrCalc+0x180>
    549a:	31 97       	sbiw	r30, 0x01	; 1
    549c:	7e 2e       	mov	r7, r30
    549e:	7e 18       	sub	r7, r14
     lenB=strlen(tmpB);
    54a0:	f6 01       	movw	r30, r12
    54a2:	01 90       	ld	r0, Z+
    54a4:	00 20       	and	r0, r0
    54a6:	e9 f7       	brne	.-6      	; 0x54a2 <StrCalc+0x18e>
    54a8:	31 97       	sbiw	r30, 0x01	; 1
    54aa:	9e 2e       	mov	r9, r30
    54ac:	9c 18       	sub	r9, r12
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
    54ae:	c6 01       	movw	r24, r12
    54b0:	b7 01       	movw	r22, r14
    54b2:	0e 94 bf 23 	call	0x477e	; 0x477e <IsMoreThan>
    54b6:	81 30       	cpi	r24, 0x01	; 1
    54b8:	11 f0       	breq	.+4      	; 0x54be <StrCalc+0x1aa>
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	42 c0       	rjmp	.+132    	; 0x5542 <StrCalc+0x22e>
	     IsSwap=True;
         sprintf_P(tmpC,PSTR("%s"),tmpA);
    54be:	00 d0       	rcall	.+0      	; 0x54c0 <StrCalc+0x1ac>
    54c0:	00 d0       	rcall	.+0      	; 0x54c2 <StrCalc+0x1ae>
    54c2:	00 d0       	rcall	.+0      	; 0x54c4 <StrCalc+0x1b0>
    54c4:	ed b7       	in	r30, 0x3d	; 61
    54c6:	fe b7       	in	r31, 0x3e	; 62
    54c8:	31 96       	adiw	r30, 0x01	; 1
    54ca:	8e 01       	movw	r16, r28
    54cc:	07 5d       	subi	r16, 0xD7	; 215
    54ce:	1f 4f       	sbci	r17, 0xFF	; 255
    54d0:	ad b7       	in	r26, 0x3d	; 61
    54d2:	be b7       	in	r27, 0x3e	; 62
    54d4:	12 96       	adiw	r26, 0x02	; 2
    54d6:	1c 93       	st	X, r17
    54d8:	0e 93       	st	-X, r16
    54da:	11 97       	sbiw	r26, 0x01	; 1
    54dc:	87 e1       	ldi	r24, 0x17	; 23
    54de:	97 e0       	ldi	r25, 0x07	; 7
    54e0:	93 83       	std	Z+3, r25	; 0x03
    54e2:	82 83       	std	Z+2, r24	; 0x02
    54e4:	f5 82       	std	Z+5, r15	; 0x05
    54e6:	e4 82       	std	Z+4, r14	; 0x04
    54e8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
    54ec:	ed b7       	in	r30, 0x3d	; 61
    54ee:	fe b7       	in	r31, 0x3e	; 62
    54f0:	31 96       	adiw	r30, 0x01	; 1
    54f2:	ad b7       	in	r26, 0x3d	; 61
    54f4:	be b7       	in	r27, 0x3e	; 62
    54f6:	12 96       	adiw	r26, 0x02	; 2
    54f8:	fc 92       	st	X, r15
    54fa:	ee 92       	st	-X, r14
    54fc:	11 97       	sbiw	r26, 0x01	; 1
    54fe:	84 e1       	ldi	r24, 0x14	; 20
    5500:	97 e0       	ldi	r25, 0x07	; 7
    5502:	93 83       	std	Z+3, r25	; 0x03
    5504:	82 83       	std	Z+2, r24	; 0x02
    5506:	d5 82       	std	Z+5, r13	; 0x05
    5508:	c4 82       	std	Z+4, r12	; 0x04
    550a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
    550e:	ed b7       	in	r30, 0x3d	; 61
    5510:	fe b7       	in	r31, 0x3e	; 62
    5512:	31 96       	adiw	r30, 0x01	; 1
    5514:	ad b7       	in	r26, 0x3d	; 61
    5516:	be b7       	in	r27, 0x3e	; 62
    5518:	12 96       	adiw	r26, 0x02	; 2
    551a:	dc 92       	st	X, r13
    551c:	ce 92       	st	-X, r12
    551e:	11 97       	sbiw	r26, 0x01	; 1
    5520:	81 e1       	ldi	r24, 0x11	; 17
    5522:	97 e0       	ldi	r25, 0x07	; 7
    5524:	93 83       	std	Z+3, r25	; 0x03
    5526:	82 83       	std	Z+2, r24	; 0x02
    5528:	15 83       	std	Z+5, r17	; 0x05
    552a:	04 83       	std	Z+4, r16	; 0x04
    552c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	ed b7       	in	r30, 0x3d	; 61
    5534:	fe b7       	in	r31, 0x3e	; 62
    5536:	36 96       	adiw	r30, 0x06	; 6
    5538:	0f b6       	in	r0, 0x3f	; 63
    553a:	f8 94       	cli
    553c:	fe bf       	out	0x3e, r31	; 62
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	ed bf       	out	0x3d, r30	; 61
	 }
    
	if (TOperation==TMINUS){
    5542:	66 20       	and	r6, r6
    5544:	39 f5       	brne	.+78     	; 0x5594 <StrCalc+0x280>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    5546:	81 30       	cpi	r24, 0x01	; 1
    5548:	99 f4       	brne	.+38     	; 0x5570 <StrCalc+0x25c>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    554a:	65 96       	adiw	r28, 0x15	; 21
    554c:	ff ad       	ldd	r31, Y+63	; 0x3f
    554e:	65 97       	sbiw	r28, 0x15	; 21
    5550:	f1 30       	cpi	r31, 0x01	; 1
    5552:	39 f4       	brne	.+14     	; 0x5562 <StrCalc+0x24e>
    5554:	64 96       	adiw	r28, 0x14	; 20
    5556:	2f ad       	ldd	r18, Y+63	; 0x3f
    5558:	64 97       	sbiw	r28, 0x14	; 20
    555a:	21 30       	cpi	r18, 0x01	; 1
    555c:	09 f0       	breq	.+2      	; 0x5560 <StrCalc+0x24c>
    555e:	9e c1       	rjmp	.+828    	; 0x589c <StrCalc+0x588>
    5560:	42 c0       	rjmp	.+132    	; 0x55e6 <StrCalc+0x2d2>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    5562:	64 96       	adiw	r28, 0x14	; 20
    5564:	3f ad       	ldd	r19, Y+63	; 0x3f
    5566:	64 97       	sbiw	r28, 0x14	; 20
    5568:	31 30       	cpi	r19, 0x01	; 1
    556a:	09 f0       	breq	.+2      	; 0x556e <StrCalc+0x25a>
    556c:	8e c1       	rjmp	.+796    	; 0x588a <StrCalc+0x576>
    556e:	92 c1       	rjmp	.+804    	; 0x5894 <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    5570:	65 96       	adiw	r28, 0x15	; 21
    5572:	8f ad       	ldd	r24, Y+63	; 0x3f
    5574:	65 97       	sbiw	r28, 0x15	; 21
    5576:	81 30       	cpi	r24, 0x01	; 1
    5578:	39 f4       	brne	.+14     	; 0x5588 <StrCalc+0x274>
    557a:	64 96       	adiw	r28, 0x14	; 20
    557c:	9f ad       	ldd	r25, Y+63	; 0x3f
    557e:	64 97       	sbiw	r28, 0x14	; 20
    5580:	91 30       	cpi	r25, 0x01	; 1
    5582:	09 f0       	breq	.+2      	; 0x5586 <StrCalc+0x272>
    5584:	8b c1       	rjmp	.+790    	; 0x589c <StrCalc+0x588>
    5586:	81 c1       	rjmp	.+770    	; 0x588a <StrCalc+0x576>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    5588:	64 96       	adiw	r28, 0x14	; 20
    558a:	af ad       	ldd	r26, Y+63	; 0x3f
    558c:	64 97       	sbiw	r28, 0x14	; 20
    558e:	a1 30       	cpi	r26, 0x01	; 1
    5590:	51 f5       	brne	.+84     	; 0x55e6 <StrCalc+0x2d2>
    5592:	80 c1       	rjmp	.+768    	; 0x5894 <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
		}
	 }else
	if (TOperation==TPLUS){
    5594:	b1 e0       	ldi	r27, 0x01	; 1
    5596:	6b 16       	cp	r6, r27
    5598:	31 f5       	brne	.+76     	; 0x55e6 <StrCalc+0x2d2>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    559a:	81 30       	cpi	r24, 0x01	; 1
    559c:	91 f4       	brne	.+36     	; 0x55c2 <StrCalc+0x2ae>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    559e:	65 96       	adiw	r28, 0x15	; 21
    55a0:	ef ad       	ldd	r30, Y+63	; 0x3f
    55a2:	65 97       	sbiw	r28, 0x15	; 21
    55a4:	e1 30       	cpi	r30, 0x01	; 1
    55a6:	31 f4       	brne	.+12     	; 0x55b4 <StrCalc+0x2a0>
    55a8:	64 96       	adiw	r28, 0x14	; 20
    55aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    55ac:	64 97       	sbiw	r28, 0x14	; 20
    55ae:	f1 30       	cpi	r31, 0x01	; 1
    55b0:	d1 f4       	brne	.+52     	; 0x55e6 <StrCalc+0x2d2>
    55b2:	74 c1       	rjmp	.+744    	; 0x589c <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    55b4:	64 96       	adiw	r28, 0x14	; 20
    55b6:	2f ad       	ldd	r18, Y+63	; 0x3f
    55b8:	64 97       	sbiw	r28, 0x14	; 20
    55ba:	21 30       	cpi	r18, 0x01	; 1
    55bc:	09 f0       	breq	.+2      	; 0x55c0 <StrCalc+0x2ac>
    55be:	6a c1       	rjmp	.+724    	; 0x5894 <StrCalc+0x580>
    55c0:	64 c1       	rjmp	.+712    	; 0x588a <StrCalc+0x576>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    55c2:	65 96       	adiw	r28, 0x15	; 21
    55c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    55c6:	65 97       	sbiw	r28, 0x15	; 21
    55c8:	31 30       	cpi	r19, 0x01	; 1
    55ca:	39 f4       	brne	.+14     	; 0x55da <StrCalc+0x2c6>
    55cc:	64 96       	adiw	r28, 0x14	; 20
    55ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    55d0:	64 97       	sbiw	r28, 0x14	; 20
    55d2:	81 30       	cpi	r24, 0x01	; 1
    55d4:	09 f0       	breq	.+2      	; 0x55d8 <StrCalc+0x2c4>
    55d6:	59 c1       	rjmp	.+690    	; 0x588a <StrCalc+0x576>
    55d8:	61 c1       	rjmp	.+706    	; 0x589c <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    55da:	64 96       	adiw	r28, 0x14	; 20
    55dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    55de:	64 97       	sbiw	r28, 0x14	; 20
    55e0:	91 30       	cpi	r25, 0x01	; 1
    55e2:	09 f0       	breq	.+2      	; 0x55e6 <StrCalc+0x2d2>
    55e4:	57 c1       	rjmp	.+686    	; 0x5894 <StrCalc+0x580>
   // A: 100000
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
    55e6:	62 96       	adiw	r28, 0x12	; 18
    55e8:	1f ae       	std	Y+63, r1	; 0x3f
    55ea:	62 97       	sbiw	r28, 0x12	; 18
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    55ec:	e7 2c       	mov	r14, r7
    55ee:	ff 24       	eor	r15, r15
    55f0:	67 01       	movw	r12, r14
    55f2:	08 94       	sec
    55f4:	c1 08       	sbc	r12, r1
    55f6:	d1 08       	sbc	r13, r1
    55f8:	ae 01       	movw	r20, r28
    55fa:	43 5c       	subi	r20, 0xC3	; 195
    55fc:	5f 4f       	sbci	r21, 0xFF	; 255
    55fe:	4c 0d       	add	r20, r12
    5600:	5d 1d       	adc	r21, r13
    5602:	ce 01       	movw	r24, r28
    5604:	01 96       	adiw	r24, 0x01	; 1
    5606:	8c 01       	movw	r16, r24
    5608:	0c 0d       	add	r16, r12
    560a:	1d 1d       	adc	r17, r13
    560c:	be 01       	movw	r22, r28
    560e:	69 0d       	add	r22, r9
    5610:	71 1d       	adc	r23, r1
    5612:	6c 5e       	subi	r22, 0xEC	; 236
    5614:	7f 4f       	sbci	r23, 0xFF	; 255
    5616:	99 24       	eor	r9, r9
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    5618:	2c 01       	movw	r4, r24
    561a:	b9 e3       	ldi	r27, 0x39	; 57
    561c:	8b 2e       	mov	r8, r27
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    561e:	9a e0       	ldi	r25, 0x0A	; 10
    5620:	52 c0       	rjmp	.+164    	; 0x56c6 <StrCalc+0x3b2>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5622:	d8 01       	movw	r26, r16
    5624:	8c 91       	ld	r24, X
    5626:	80 53       	subi	r24, 0x30	; 48
    5628:	8a 30       	cpi	r24, 0x0A	; 10
    562a:	10 f0       	brcs	.+4      	; 0x5630 <StrCalc+0x31c>
    562c:	20 e0       	ldi	r18, 0x00	; 0
    562e:	01 c0       	rjmp	.+2      	; 0x5632 <StrCalc+0x31e>
    5630:	28 2f       	mov	r18, r24
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
    5632:	fb 01       	movw	r30, r22
    5634:	30 81       	ld	r19, Z
    5636:	30 53       	subi	r19, 0x30	; 48
    5638:	3a 30       	cpi	r19, 0x0A	; 10
    563a:	10 f4       	brcc	.+4      	; 0x5640 <StrCalc+0x32c>
    563c:	23 17       	cp	r18, r19
    563e:	40 f0       	brcs	.+16     	; 0x5650 <StrCalc+0x33c>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5640:	8a 30       	cpi	r24, 0x0A	; 10
    5642:	08 f0       	brcs	.+2      	; 0x5646 <StrCalc+0x332>
    5644:	80 e0       	ldi	r24, 0x00	; 0

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    5646:	3a 30       	cpi	r19, 0x0A	; 10
    5648:	08 f0       	brcs	.+2      	; 0x564c <StrCalc+0x338>
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	83 1b       	sub	r24, r19
    564e:	2d c0       	rjmp	.+90     	; 0x56aa <StrCalc+0x396>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5650:	8a 30       	cpi	r24, 0x0A	; 10
    5652:	10 f4       	brcc	.+4      	; 0x5658 <StrCalc+0x344>
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
    5654:	83 17       	cp	r24, r19
    5656:	80 f5       	brcc	.+96     	; 0x56b8 <StrCalc+0x3a4>
    5658:	29 2d       	mov	r18, r9
    565a:	0a c0       	rjmp	.+20     	; 0x5670 <StrCalc+0x35c>
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    565c:	f6 01       	movw	r30, r12
    565e:	e2 1b       	sub	r30, r18
    5660:	f1 09       	sbc	r31, r1
    5662:	d2 01       	movw	r26, r4
    5664:	ae 0f       	add	r26, r30
    5666:	bf 1f       	adc	r27, r31
    5668:	8c 91       	ld	r24, X
    566a:	80 33       	cpi	r24, 0x30	; 48
    566c:	29 f4       	brne	.+10     	; 0x5678 <StrCalc+0x364>
    566e:	8c 92       	st	X, r8
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    5670:	2f 5f       	subi	r18, 0xFF	; 255
    5672:	27 15       	cp	r18, r7
    5674:	98 f3       	brcs	.-26     	; 0x565c <StrCalc+0x348>
    5676:	10 c0       	rjmp	.+32     	; 0x5698 <StrCalc+0x384>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5678:	28 2f       	mov	r18, r24
    567a:	20 53       	subi	r18, 0x30	; 48
    567c:	2a 30       	cpi	r18, 0x0A	; 10
    567e:	08 f0       	brcs	.+2      	; 0x5682 <StrCalc+0x36e>
    5680:	20 e0       	ldi	r18, 0x00	; 0
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    5682:	82 2f       	mov	r24, r18
    5684:	81 50       	subi	r24, 0x01	; 1
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    5686:	8a 30       	cpi	r24, 0x0A	; 10
    5688:	10 f0       	brcs	.+4      	; 0x568e <StrCalc+0x37a>
    568a:	80 e3       	ldi	r24, 0x30	; 48
    568c:	02 c0       	rjmp	.+4      	; 0x5692 <StrCalc+0x37e>
	    Result='0'+X;
    568e:	82 2f       	mov	r24, r18
    5690:	81 5d       	subi	r24, 0xD1	; 209
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    5692:	e4 0d       	add	r30, r4
    5694:	f5 1d       	adc	r31, r5
    5696:	80 83       	st	Z, r24
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5698:	f8 01       	movw	r30, r16
    569a:	20 81       	ld	r18, Z
    569c:	20 53       	subi	r18, 0x30	; 48
    569e:	2a 30       	cpi	r18, 0x0A	; 10
    56a0:	08 f0       	brcs	.+2      	; 0x56a4 <StrCalc+0x390>
    56a2:	20 e0       	ldi	r18, 0x00	; 0
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    56a4:	89 2f       	mov	r24, r25
    56a6:	83 1b       	sub	r24, r19
    56a8:	82 0f       	add	r24, r18
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    56aa:	8a 30       	cpi	r24, 0x0A	; 10
    56ac:	10 f0       	brcs	.+4      	; 0x56b2 <StrCalc+0x39e>
    56ae:	80 e3       	ldi	r24, 0x30	; 48
    56b0:	01 c0       	rjmp	.+2      	; 0x56b4 <StrCalc+0x3a0>
	    Result='0'+X;
    56b2:	80 5d       	subi	r24, 0xD0	; 208
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    56b4:	da 01       	movw	r26, r20
    56b6:	8c 93       	st	X, r24
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
    56b8:	93 94       	inc	r9
    56ba:	41 50       	subi	r20, 0x01	; 1
    56bc:	50 40       	sbci	r21, 0x00	; 0
    56be:	01 50       	subi	r16, 0x01	; 1
    56c0:	10 40       	sbci	r17, 0x00	; 0
    56c2:	61 50       	subi	r22, 0x01	; 1
    56c4:	70 40       	sbci	r23, 0x00	; 0
    56c6:	97 14       	cp	r9, r7
    56c8:	08 f4       	brcc	.+2      	; 0x56cc <StrCalc+0x3b8>
    56ca:	ab cf       	rjmp	.-170    	; 0x5622 <StrCalc+0x30e>
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }
		 }Result[lenA]=0;		    
    56cc:	8e 01       	movw	r16, r28
    56ce:	03 5c       	subi	r16, 0xC3	; 195
    56d0:	1f 4f       	sbci	r17, 0xFF	; 255
    56d2:	e0 0e       	add	r14, r16
    56d4:	f1 1e       	adc	r15, r17
    56d6:	f7 01       	movw	r30, r14
    56d8:	10 82       	st	Z, r1
       RemZeroLead(Result);
    56da:	c8 01       	movw	r24, r16
    56dc:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
    56e0:	f8 01       	movw	r30, r16
    56e2:	01 90       	ld	r0, Z+
    56e4:	00 20       	and	r0, r0
    56e6:	e9 f7       	brne	.-6      	; 0x56e2 <StrCalc+0x3ce>
    56e8:	31 97       	sbiw	r30, 0x01	; 1
    56ea:	3e 2f       	mov	r19, r30
    56ec:	30 1b       	sub	r19, r16
    56ee:	d8 01       	movw	r26, r16
    56f0:	20 e0       	ldi	r18, 0x00	; 0
    56f2:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    56f4:	4d e2       	ldi	r20, 0x2D	; 45
    56f6:	13 c0       	rjmp	.+38     	; 0x571e <StrCalc+0x40a>
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    56f8:	22 23       	and	r18, r18
    56fa:	51 f4       	brne	.+20     	; 0x5710 <StrCalc+0x3fc>
    56fc:	62 96       	adiw	r28, 0x12	; 18
    56fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    5700:	62 97       	sbiw	r28, 0x12	; 18
    5702:	f1 30       	cpi	r31, 0x01	; 1
    5704:	29 f4       	brne	.+10     	; 0x5710 <StrCalc+0x3fc>
			     strC[iPos]='-';
    5706:	f5 01       	movw	r30, r10
    5708:	e9 0f       	add	r30, r25
    570a:	f1 1d       	adc	r31, r1
    570c:	40 83       	st	Z, r20
				 iPos++;
    570e:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[i];
    5710:	f5 01       	movw	r30, r10
    5712:	e9 0f       	add	r30, r25
    5714:	f1 1d       	adc	r31, r1
    5716:	8d 91       	ld	r24, X+
    5718:	80 83       	st	Z, r24
			 iPos++;
    571a:	9f 5f       	subi	r25, 0xFF	; 255
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    571c:	2f 5f       	subi	r18, 0xFF	; 255
    571e:	23 17       	cp	r18, r19
    5720:	58 f3       	brcs	.-42     	; 0x56f8 <StrCalc+0x3e4>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[i];
			 iPos++;
		 }strC[iPos]=0;
    5722:	f5 01       	movw	r30, r10
    5724:	e9 0f       	add	r30, r25
    5726:	f1 1d       	adc	r31, r1
    5728:	10 82       	st	Z, r1
    572a:	a0 c0       	rjmp	.+320    	; 0x586c <StrCalc+0x558>
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
    572c:	ad e3       	ldi	r26, 0x3D	; 61
    572e:	ea 2e       	mov	r14, r26
    5730:	f1 2c       	mov	r15, r1
    5732:	ec 0e       	add	r14, r28
    5734:	fd 1e       	adc	r15, r29
    5736:	ae 01       	movw	r20, r28
    5738:	49 0d       	add	r20, r9
    573a:	51 1d       	adc	r21, r1
    573c:	4c 5e       	subi	r20, 0xEC	; 236
    573e:	5f 4f       	sbci	r21, 0xFF	; 255
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    5740:	07 2d       	mov	r16, r7
    5742:	10 e0       	ldi	r17, 0x00	; 0
    5744:	48 01       	movw	r8, r16
    5746:	08 94       	sec
    5748:	81 08       	sbc	r8, r1
    574a:	91 08       	sbc	r9, r1
    574c:	ce 01       	movw	r24, r28
    574e:	01 96       	adiw	r24, 0x01	; 1
    5750:	6c 01       	movw	r12, r24
    5752:	c8 0c       	add	r12, r8
    5754:	d9 1c       	adc	r13, r9
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	20 e0       	ldi	r18, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    575a:	2c 01       	movw	r4, r24
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    575c:	f0 e3       	ldi	r31, 0x30	; 48
    575e:	3f 2e       	mov	r3, r31
    5760:	47 c0       	rjmp	.+142    	; 0x57f0 <StrCalc+0x4dc>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5762:	d6 01       	movw	r26, r12
    5764:	9c 91       	ld	r25, X
    5766:	90 53       	subi	r25, 0x30	; 48
    5768:	9a 30       	cpi	r25, 0x0A	; 10
    576a:	08 f0       	brcs	.+2      	; 0x576e <StrCalc+0x45a>
    576c:	90 e0       	ldi	r25, 0x00	; 0
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
    576e:	fa 01       	movw	r30, r20
    5770:	80 81       	ld	r24, Z
    5772:	80 53       	subi	r24, 0x30	; 48
    5774:	8a 30       	cpi	r24, 0x0A	; 10
    5776:	08 f0       	brcs	.+2      	; 0x577a <StrCalc+0x466>
    5778:	80 e0       	ldi	r24, 0x00	; 0
    577a:	89 0f       	add	r24, r25
			 if (newC<10){
    577c:	8a 30       	cpi	r24, 0x0A	; 10
    577e:	18 f4       	brcc	.+6      	; 0x5786 <StrCalc+0x472>
			     Result[i]=Chr(newC);
    5780:	80 5d       	subi	r24, 0xD0	; 208
    5782:	d7 01       	movw	r26, r14
    5784:	28 c0       	rjmp	.+80     	; 0x57d6 <StrCalc+0x4c2>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5786:	6a e0       	ldi	r22, 0x0A	; 10
    5788:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    578c:	9a 30       	cpi	r25, 0x0A	; 10
    578e:	10 f0       	brcs	.+4      	; 0x5794 <StrCalc+0x480>
    5790:	90 e3       	ldi	r25, 0x30	; 48
    5792:	01 c0       	rjmp	.+2      	; 0x5796 <StrCalc+0x482>
	    Result='0'+X;
    5794:	90 5d       	subi	r25, 0xD0	; 208
			 if (newC<10){
			     Result[i]=Chr(newC);
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5796:	f7 01       	movw	r30, r14
    5798:	90 83       	st	Z, r25
    579a:	83 2f       	mov	r24, r19
    579c:	0e c0       	rjmp	.+28     	; 0x57ba <StrCalc+0x4a6>
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    579e:	d4 01       	movw	r26, r8
    57a0:	a8 1b       	sub	r26, r24
    57a2:	b1 09       	sbc	r27, r1
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    57a4:	f2 01       	movw	r30, r4
    57a6:	ea 0f       	add	r30, r26
    57a8:	fb 1f       	adc	r31, r27
    57aa:	90 81       	ld	r25, Z
    57ac:	90 53       	subi	r25, 0x30	; 48
    57ae:	9a 30       	cpi	r25, 0x0A	; 10
    57b0:	08 f0       	brcs	.+2      	; 0x57b4 <StrCalc+0x4a0>
    57b2:	79 c0       	rjmp	.+242    	; 0x58a6 <StrCalc+0x592>
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    57b4:	99 30       	cpi	r25, 0x09	; 9
    57b6:	29 f4       	brne	.+10     	; 0x57c2 <StrCalc+0x4ae>
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    57b8:	30 82       	st	Z, r3
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    57ba:	8f 5f       	subi	r24, 0xFF	; 255
    57bc:	87 15       	cp	r24, r7
    57be:	78 f3       	brcs	.-34     	; 0x579e <StrCalc+0x48a>
    57c0:	0d c0       	rjmp	.+26     	; 0x57dc <StrCalc+0x4c8>
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    57c2:	89 2f       	mov	r24, r25
    57c4:	8f 5f       	subi	r24, 0xFF	; 255
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    57c6:	8a 30       	cpi	r24, 0x0A	; 10
    57c8:	10 f0       	brcs	.+4      	; 0x57ce <StrCalc+0x4ba>
    57ca:	80 e3       	ldi	r24, 0x30	; 48
    57cc:	02 c0       	rjmp	.+4      	; 0x57d2 <StrCalc+0x4be>
	    Result='0'+X;
    57ce:	89 2f       	mov	r24, r25
    57d0:	8f 5c       	subi	r24, 0xCF	; 207
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    57d2:	a4 0d       	add	r26, r4
    57d4:	b5 1d       	adc	r27, r5
    57d6:	8c 93       	st	X, r24
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	01 c0       	rjmp	.+2      	; 0x57de <StrCalc+0x4ca>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    57dc:	21 e0       	ldi	r18, 0x01	; 1
		 }strC[iPos]=0;
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
    57de:	3f 5f       	subi	r19, 0xFF	; 255
    57e0:	08 94       	sec
    57e2:	e1 1c       	adc	r14, r1
    57e4:	f1 1c       	adc	r15, r1
    57e6:	41 50       	subi	r20, 0x01	; 1
    57e8:	50 40       	sbci	r21, 0x00	; 0
    57ea:	08 94       	sec
    57ec:	c1 08       	sbc	r12, r1
    57ee:	d1 08       	sbc	r13, r1
    57f0:	37 15       	cp	r19, r7
    57f2:	08 f4       	brcc	.+2      	; 0x57f6 <StrCalc+0x4e2>
    57f4:	b6 cf       	rjmp	.-148    	; 0x5762 <StrCalc+0x44e>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    57f6:	20 5d       	subi	r18, 0xD0	; 208
				 }//EndFor j                
			   }//End else
			 }//EndFor

		  //Result[lenA]==Chr(zMin); ???
		  Result[lenA]=Chr(zMin);
    57f8:	de 01       	movw	r26, r28
    57fa:	dd 96       	adiw	r26, 0x3d	; 61
    57fc:	fd 01       	movw	r30, r26
    57fe:	e0 0f       	add	r30, r16
    5800:	f1 1f       	adc	r31, r17
    5802:	20 83       	st	Z, r18
		  Result[lenA+1]=0;
    5804:	0c 0f       	add	r16, r28
    5806:	1d 1f       	adc	r17, r29
    5808:	f8 01       	movw	r30, r16
    580a:	16 ae       	std	Z+62, r1	; 0x3e
		 FixLen=strlen(Result);
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
    580c:	fd 01       	movw	r30, r26
    580e:	01 90       	ld	r0, Z+
    5810:	00 20       	and	r0, r0
    5812:	e9 f7       	brne	.-6      	; 0x580e <StrCalc+0x4fa>
    5814:	31 97       	sbiw	r30, 0x01	; 1
    5816:	5e 2f       	mov	r21, r30
    5818:	5a 1b       	sub	r21, r26
    581a:	25 2f       	mov	r18, r21
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	21 50       	subi	r18, 0x01	; 1
    5820:	30 40       	sbci	r19, 0x00	; 0
    5822:	2a 0f       	add	r18, r26
    5824:	3b 1f       	adc	r19, r27
    5826:	40 e0       	ldi	r20, 0x00	; 0
    5828:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    582a:	6d e2       	ldi	r22, 0x2D	; 45
    582c:	16 c0       	rjmp	.+44     	; 0x585a <StrCalc+0x546>
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    582e:	44 23       	and	r20, r20
    5830:	51 f4       	brne	.+20     	; 0x5846 <StrCalc+0x532>
    5832:	63 96       	adiw	r28, 0x13	; 19
    5834:	ff ad       	ldd	r31, Y+63	; 0x3f
    5836:	63 97       	sbiw	r28, 0x13	; 19
    5838:	f1 30       	cpi	r31, 0x01	; 1
    583a:	29 f4       	brne	.+10     	; 0x5846 <StrCalc+0x532>
			     strC[iPos]='-';
    583c:	f5 01       	movw	r30, r10
    583e:	e9 0f       	add	r30, r25
    5840:	f1 1d       	adc	r31, r1
    5842:	60 83       	st	Z, r22
				 iPos++;
    5844:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[FixLen-i-1];
    5846:	f5 01       	movw	r30, r10
    5848:	e9 0f       	add	r30, r25
    584a:	f1 1d       	adc	r31, r1
    584c:	d9 01       	movw	r26, r18
    584e:	8c 91       	ld	r24, X
    5850:	80 83       	st	Z, r24
			 iPos++;
    5852:	9f 5f       	subi	r25, 0xFF	; 255
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    5854:	4f 5f       	subi	r20, 0xFF	; 255
    5856:	21 50       	subi	r18, 0x01	; 1
    5858:	30 40       	sbci	r19, 0x00	; 0
    585a:	45 17       	cp	r20, r21
    585c:	40 f3       	brcs	.-48     	; 0x582e <StrCalc+0x51a>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[FixLen-i-1];
			 iPos++;
		 }strC[iPos]=0;
    585e:	f5 01       	movw	r30, r10
    5860:	e9 0f       	add	r30, r25
    5862:	f1 1d       	adc	r31, r1
    5864:	10 82       	st	Z, r1

       RemZeroLead(strC);
    5866:	c5 01       	movw	r24, r10
    5868:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
  //    sprintf_P(strSend,PSTR("C':%s"),strC);
//	 uart_print(0,1,strSend);

	 }//EndIf 

	 if (TOperation==TMULTIPLY){
    586c:	b2 e0       	ldi	r27, 0x02	; 2
    586e:	6b 16       	cp	r6, r27
    5870:	e1 f4       	brne	.+56     	; 0x58aa <StrCalc+0x596>
		 valA=atol(strA);
		 valB=atol(strB);
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
    5872:	67 96       	adiw	r28, 0x17	; 23
    5874:	8e ad       	ldd	r24, Y+62	; 0x3e
    5876:	9f ad       	ldd	r25, Y+63	; 0x3f
    5878:	67 97       	sbiw	r28, 0x17	; 23
    587a:	69 96       	adiw	r28, 0x19	; 25
    587c:	6e ad       	ldd	r22, Y+62	; 0x3e
    587e:	7f ad       	ldd	r23, Y+63	; 0x3f
    5880:	69 97       	sbiw	r28, 0x19	; 25
    5882:	a5 01       	movw	r20, r10
    5884:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <CalcMultiply>
    5888:	10 c0       	rjmp	.+32     	; 0x58aa <StrCalc+0x596>
	 }
}
    588a:	e1 e0       	ldi	r30, 0x01	; 1
    588c:	62 96       	adiw	r28, 0x12	; 18
    588e:	ef af       	std	Y+63, r30	; 0x3f
    5890:	62 97       	sbiw	r28, 0x12	; 18
    5892:	ac ce       	rjmp	.-680    	; 0x55ec <StrCalc+0x2d8>
    5894:	63 96       	adiw	r28, 0x13	; 19
    5896:	1f ae       	std	Y+63, r1	; 0x3f
    5898:	63 97       	sbiw	r28, 0x13	; 19
    589a:	48 cf       	rjmp	.-368    	; 0x572c <StrCalc+0x418>
    589c:	f1 e0       	ldi	r31, 0x01	; 1
    589e:	63 96       	adiw	r28, 0x13	; 19
    58a0:	ff af       	std	Y+63, r31	; 0x3f
    58a2:	63 97       	sbiw	r28, 0x13	; 19
    58a4:	43 cf       	rjmp	.-378    	; 0x572c <StrCalc+0x418>
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	8c cf       	rjmp	.-232    	; 0x57c2 <StrCalc+0x4ae>
    58aa:	c8 5a       	subi	r28, 0xA8	; 168
    58ac:	df 4f       	sbci	r29, 0xFF	; 255
    58ae:	0f b6       	in	r0, 0x3f	; 63
    58b0:	f8 94       	cli
    58b2:	de bf       	out	0x3e, r29	; 62
    58b4:	0f be       	out	0x3f, r0	; 63
    58b6:	cd bf       	out	0x3d, r28	; 61
    58b8:	cf 91       	pop	r28
    58ba:	df 91       	pop	r29
    58bc:	1f 91       	pop	r17
    58be:	0f 91       	pop	r16
    58c0:	ff 90       	pop	r15
    58c2:	ef 90       	pop	r14
    58c4:	df 90       	pop	r13
    58c6:	cf 90       	pop	r12
    58c8:	bf 90       	pop	r11
    58ca:	af 90       	pop	r10
    58cc:	9f 90       	pop	r9
    58ce:	8f 90       	pop	r8
    58d0:	7f 90       	pop	r7
    58d2:	6f 90       	pop	r6
    58d4:	5f 90       	pop	r5
    58d6:	4f 90       	pop	r4
    58d8:	3f 90       	pop	r3
    58da:	08 95       	ret

000058dc <CalcMultiply>:
	 }
	 strResult[lenR]=0;
}


void CalcMultiply(char *strA,char *strB,char *strC){
    58dc:	4f 92       	push	r4
    58de:	5f 92       	push	r5
    58e0:	6f 92       	push	r6
    58e2:	7f 92       	push	r7
    58e4:	8f 92       	push	r8
    58e6:	9f 92       	push	r9
    58e8:	af 92       	push	r10
    58ea:	bf 92       	push	r11
    58ec:	cf 92       	push	r12
    58ee:	df 92       	push	r13
    58f0:	ef 92       	push	r14
    58f2:	ff 92       	push	r15
    58f4:	0f 93       	push	r16
    58f6:	1f 93       	push	r17
    58f8:	df 93       	push	r29
    58fa:	cf 93       	push	r28
    58fc:	cd b7       	in	r28, 0x3d	; 61
    58fe:	de b7       	in	r29, 0x3e	; 62
    5900:	a8 97       	sbiw	r28, 0x28	; 40
    5902:	0f b6       	in	r0, 0x3f	; 63
    5904:	f8 94       	cli
    5906:	de bf       	out	0x3e, r29	; 62
    5908:	0f be       	out	0x3f, r0	; 63
    590a:	cd bf       	out	0x3d, r28	; 61
    590c:	3c 01       	movw	r6, r24
    590e:	6b 01       	movw	r12, r22
    5910:	2a 01       	movw	r4, r20
	 
	 */
	 char i,lenB;
	 char prevSeg[20],currSeg[20];

     RemZeroLead(strA);
    5912:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
     RemZeroLead(strB);
    5916:	c6 01       	movw	r24, r12
    5918:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
	 lenB=strlen(strB);
    591c:	d6 01       	movw	r26, r12
    591e:	0d 90       	ld	r0, X+
    5920:	00 20       	and	r0, r0
    5922:	e9 f7       	brne	.-6      	; 0x591e <CalcMultiply+0x42>
    5924:	11 97       	sbiw	r26, 0x01	; 1
    5926:	8a 2e       	mov	r8, r26
    5928:	8c 18       	sub	r8, r12
	 sprintf_P(prevSeg,PSTR("0"));
    592a:	00 d0       	rcall	.+0      	; 0x592c <CalcMultiply+0x50>
    592c:	00 d0       	rcall	.+0      	; 0x592e <CalcMultiply+0x52>
    592e:	8e 01       	movw	r16, r28
    5930:	0f 5f       	subi	r16, 0xFF	; 255
    5932:	1f 4f       	sbci	r17, 0xFF	; 255
    5934:	ad b7       	in	r26, 0x3d	; 61
    5936:	be b7       	in	r27, 0x3e	; 62
    5938:	12 96       	adiw	r26, 0x02	; 2
    593a:	1c 93       	st	X, r17
    593c:	0e 93       	st	-X, r16
    593e:	11 97       	sbiw	r26, 0x01	; 1
    5940:	8f e0       	ldi	r24, 0x0F	; 15
    5942:	97 e0       	ldi	r25, 0x07	; 7
    5944:	14 96       	adiw	r26, 0x04	; 4
    5946:	9c 93       	st	X, r25
    5948:	8e 93       	st	-X, r24
    594a:	13 97       	sbiw	r26, 0x03	; 3
    594c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 sprintf_P(currSeg,PSTR("0"));
    5950:	85 e1       	ldi	r24, 0x15	; 21
    5952:	e8 2e       	mov	r14, r24
    5954:	f1 2c       	mov	r15, r1
    5956:	ec 0e       	add	r14, r28
    5958:	fd 1e       	adc	r15, r29
    595a:	ed b7       	in	r30, 0x3d	; 61
    595c:	fe b7       	in	r31, 0x3e	; 62
    595e:	f2 82       	std	Z+2, r15	; 0x02
    5960:	e1 82       	std	Z+1, r14	; 0x01
    5962:	8d e0       	ldi	r24, 0x0D	; 13
    5964:	97 e0       	ldi	r25, 0x07	; 7
    5966:	94 83       	std	Z+4, r25	; 0x04
    5968:	83 83       	std	Z+3, r24	; 0x03
    596a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    596e:	bb 24       	eor	r11, r11
    5970:	0f 90       	pop	r0
    5972:	0f 90       	pop	r0
    5974:	0f 90       	pop	r0
    5976:	0f 90       	pop	r0
    5978:	a0 2e       	mov	r10, r16
    597a:	91 2e       	mov	r9, r17

	 for(i=0;i<strlen(strB);i++){
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    597c:	08 2d       	mov	r16, r8
    597e:	10 e0       	ldi	r17, 0x00	; 0
    5980:	01 50       	subi	r16, 0x01	; 1
    5982:	10 40       	sbci	r17, 0x00	; 0
    5984:	1f c0       	rjmp	.+62     	; 0x59c4 <CalcMultiply+0xe8>
    5986:	f8 01       	movw	r30, r16
    5988:	e8 1b       	sub	r30, r24
    598a:	f9 0b       	sbc	r31, r25
    598c:	ec 0d       	add	r30, r12
    598e:	fd 1d       	adc	r31, r13
    5990:	c3 01       	movw	r24, r6
    5992:	60 81       	ld	r22, Z
    5994:	a7 01       	movw	r20, r14
    5996:	0e 94 dd 22 	call	0x45ba	; 0x45ba <CalcSegmen>
         AddZeroLag(currSeg,strlen(currSeg)+i);
    599a:	f7 01       	movw	r30, r14
    599c:	01 90       	ld	r0, Z+
    599e:	00 20       	and	r0, r0
    59a0:	e9 f7       	brne	.-6      	; 0x599c <CalcMultiply+0xc0>
    59a2:	31 97       	sbiw	r30, 0x01	; 1
    59a4:	ee 19       	sub	r30, r14
    59a6:	ff 09       	sbc	r31, r15
    59a8:	6b 2d       	mov	r22, r11
    59aa:	6e 0f       	add	r22, r30
    59ac:	c7 01       	movw	r24, r14
    59ae:	0e 94 6f 29 	call	0x52de	; 0x52de <AddZeroLag>
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	6a 2d       	mov	r22, r10
    59b6:	79 2d       	mov	r23, r9
    59b8:	a7 01       	movw	r20, r14
    59ba:	2a 2d       	mov	r18, r10
    59bc:	39 2d       	mov	r19, r9
    59be:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    59c2:	b3 94       	inc	r11
    59c4:	f6 01       	movw	r30, r12
    59c6:	01 90       	ld	r0, Z+
    59c8:	00 20       	and	r0, r0
    59ca:	e9 f7       	brne	.-6      	; 0x59c6 <CalcMultiply+0xea>
    59cc:	31 97       	sbiw	r30, 0x01	; 1
    59ce:	ec 19       	sub	r30, r12
    59d0:	fd 09       	sbc	r31, r13
    59d2:	8b 2d       	mov	r24, r11
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	8e 17       	cp	r24, r30
    59d8:	9f 07       	cpc	r25, r31
    59da:	a8 f2       	brcs	.-86     	; 0x5986 <CalcMultiply+0xaa>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
         AddZeroLag(currSeg,strlen(currSeg)+i);
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
    59dc:	00 d0       	rcall	.+0      	; 0x59de <CalcMultiply+0x102>
    59de:	00 d0       	rcall	.+0      	; 0x59e0 <CalcMultiply+0x104>
    59e0:	00 d0       	rcall	.+0      	; 0x59e2 <CalcMultiply+0x106>
    59e2:	ed b7       	in	r30, 0x3d	; 61
    59e4:	fe b7       	in	r31, 0x3e	; 62
    59e6:	31 96       	adiw	r30, 0x01	; 1
    59e8:	ad b7       	in	r26, 0x3d	; 61
    59ea:	be b7       	in	r27, 0x3e	; 62
    59ec:	12 96       	adiw	r26, 0x02	; 2
    59ee:	5c 92       	st	X, r5
    59f0:	4e 92       	st	-X, r4
    59f2:	11 97       	sbiw	r26, 0x01	; 1
    59f4:	8a e0       	ldi	r24, 0x0A	; 10
    59f6:	97 e0       	ldi	r25, 0x07	; 7
    59f8:	93 83       	std	Z+3, r25	; 0x03
    59fa:	82 83       	std	Z+2, r24	; 0x02
    59fc:	a4 82       	std	Z+4, r10	; 0x04
    59fe:	95 82       	std	Z+5, r9	; 0x05
    5a00:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    5a04:	ed b7       	in	r30, 0x3d	; 61
    5a06:	fe b7       	in	r31, 0x3e	; 62
    5a08:	36 96       	adiw	r30, 0x06	; 6
    5a0a:	0f b6       	in	r0, 0x3f	; 63
    5a0c:	f8 94       	cli
    5a0e:	fe bf       	out	0x3e, r31	; 62
    5a10:	0f be       	out	0x3f, r0	; 63
    5a12:	ed bf       	out	0x3d, r30	; 61
}
    5a14:	a8 96       	adiw	r28, 0x28	; 40
    5a16:	0f b6       	in	r0, 0x3f	; 63
    5a18:	f8 94       	cli
    5a1a:	de bf       	out	0x3e, r29	; 62
    5a1c:	0f be       	out	0x3f, r0	; 63
    5a1e:	cd bf       	out	0x3d, r28	; 61
    5a20:	cf 91       	pop	r28
    5a22:	df 91       	pop	r29
    5a24:	1f 91       	pop	r17
    5a26:	0f 91       	pop	r16
    5a28:	ff 90       	pop	r15
    5a2a:	ef 90       	pop	r14
    5a2c:	df 90       	pop	r13
    5a2e:	cf 90       	pop	r12
    5a30:	bf 90       	pop	r11
    5a32:	af 90       	pop	r10
    5a34:	9f 90       	pop	r9
    5a36:	8f 90       	pop	r8
    5a38:	7f 90       	pop	r7
    5a3a:	6f 90       	pop	r6
    5a3c:	5f 90       	pop	r5
    5a3e:	4f 90       	pop	r4
    5a40:	08 95       	ret

00005a42 <NormalizeOverflow>:
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}

void NormalizeOverflow(char *strOverflowed){
    5a42:	cf 92       	push	r12
    5a44:	df 92       	push	r13
    5a46:	ef 92       	push	r14
    5a48:	ff 92       	push	r15
    5a4a:	0f 93       	push	r16
    5a4c:	1f 93       	push	r17
    5a4e:	df 93       	push	r29
    5a50:	cf 93       	push	r28
    5a52:	cd b7       	in	r28, 0x3d	; 61
    5a54:	de b7       	in	r29, 0x3e	; 62
    5a56:	64 97       	sbiw	r28, 0x14	; 20
    5a58:	0f b6       	in	r0, 0x3f	; 63
    5a5a:	f8 94       	cli
    5a5c:	de bf       	out	0x3e, r29	; 62
    5a5e:	0f be       	out	0x3f, r0	; 63
    5a60:	cd bf       	out	0x3d, r28	; 61
    5a62:	d8 2e       	mov	r13, r24
    5a64:	c9 2e       	mov	r12, r25
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
    5a66:	a8 2f       	mov	r26, r24
    5a68:	b9 2f       	mov	r27, r25
    5a6a:	fd 01       	movw	r30, r26
    5a6c:	01 90       	ld	r0, Z+
    5a6e:	00 20       	and	r0, r0
    5a70:	e9 f7       	brne	.-6      	; 0x5a6c <NormalizeOverflow+0x2a>
    5a72:	31 97       	sbiw	r30, 0x01	; 1
    5a74:	4e 2f       	mov	r20, r30
    5a76:	48 1b       	sub	r20, r24
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	7e 01       	movw	r14, r28
    5a7e:	08 94       	sec
    5a80:	e1 1c       	adc	r14, r1
    5a82:	f1 1c       	adc	r15, r1
    5a84:	04 2f       	mov	r16, r20
    5a86:	10 e0       	ldi	r17, 0x00	; 0
    5a88:	0e c0       	rjmp	.+28     	; 0x5aa6 <NormalizeOverflow+0x64>
     for(i=0;i<Length;i++){//123456
	     strMaxValue[i]='0'+((Length-i)/Length);
    5a8a:	f7 01       	movw	r30, r14
    5a8c:	e2 0f       	add	r30, r18
    5a8e:	f3 1f       	adc	r31, r19
    5a90:	c8 01       	movw	r24, r16
    5a92:	82 1b       	sub	r24, r18
    5a94:	93 0b       	sbc	r25, r19
    5a96:	64 2f       	mov	r22, r20
    5a98:	70 e0       	ldi	r23, 0x00	; 0
    5a9a:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    5a9e:	60 5d       	subi	r22, 0xD0	; 208
    5aa0:	60 83       	st	Z, r22
    5aa2:	2f 5f       	subi	r18, 0xFF	; 255
    5aa4:	3f 4f       	sbci	r19, 0xFF	; 255

void NormalizeOverflow(char *strOverflowed){
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
     for(i=0;i<Length;i++){//123456
    5aa6:	24 17       	cp	r18, r20
    5aa8:	80 f3       	brcs	.-32     	; 0x5a8a <NormalizeOverflow+0x48>
	     strMaxValue[i]='0'+((Length-i)/Length);
	 }strMaxValue[Length]=0;
    5aaa:	0e 0d       	add	r16, r14
    5aac:	1f 1d       	adc	r17, r15
    5aae:	f8 01       	movw	r30, r16
    5ab0:	10 82       	st	Z, r1
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
    5ab2:	81 e0       	ldi	r24, 0x01	; 1
    5ab4:	b7 01       	movw	r22, r14
    5ab6:	4d 2d       	mov	r20, r13
    5ab8:	5c 2d       	mov	r21, r12
    5aba:	2d 2d       	mov	r18, r13
    5abc:	3c 2d       	mov	r19, r12
    5abe:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>
}
    5ac2:	64 96       	adiw	r28, 0x14	; 20
    5ac4:	0f b6       	in	r0, 0x3f	; 63
    5ac6:	f8 94       	cli
    5ac8:	de bf       	out	0x3e, r29	; 62
    5aca:	0f be       	out	0x3f, r0	; 63
    5acc:	cd bf       	out	0x3d, r28	; 61
    5ace:	cf 91       	pop	r28
    5ad0:	df 91       	pop	r29
    5ad2:	1f 91       	pop	r17
    5ad4:	0f 91       	pop	r16
    5ad6:	ff 90       	pop	r15
    5ad8:	ef 90       	pop	r14
    5ada:	df 90       	pop	r13
    5adc:	cf 90       	pop	r12
    5ade:	08 95       	ret

00005ae0 <AddSpaceLead>:
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5ae0:	bf 92       	push	r11
    5ae2:	cf 92       	push	r12
    5ae4:	df 92       	push	r13
    5ae6:	ef 92       	push	r14
    5ae8:	ff 92       	push	r15
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	df 93       	push	r29
    5af0:	cf 93       	push	r28
    5af2:	cd b7       	in	r28, 0x3d	; 61
    5af4:	de b7       	in	r29, 0x3e	; 62
    5af6:	e2 97       	sbiw	r28, 0x32	; 50
    5af8:	0f b6       	in	r0, 0x3f	; 63
    5afa:	f8 94       	cli
    5afc:	de bf       	out	0x3e, r29	; 62
    5afe:	0f be       	out	0x3f, r0	; 63
    5b00:	cd bf       	out	0x3d, r28	; 61
    5b02:	8c 01       	movw	r16, r24
     char i,Length,strAdded[50];
     Length=strlen(String);
    5b04:	fc 01       	movw	r30, r24
    5b06:	01 90       	ld	r0, Z+
    5b08:	00 20       	and	r0, r0
    5b0a:	e9 f7       	brne	.-6      	; 0x5b06 <AddSpaceLead+0x26>
    5b0c:	31 97       	sbiw	r30, 0x01	; 1
    5b0e:	2e 2f       	mov	r18, r30
    5b10:	28 1b       	sub	r18, r24

	 if (Size>Length){
    5b12:	26 17       	cp	r18, r22
    5b14:	e0 f5       	brcc	.+120    	; 0x5b8e <AddSpaceLead+0xae>
    5b16:	7e 01       	movw	r14, r28
    5b18:	08 94       	sec
    5b1a:	e1 1c       	adc	r14, r1
    5b1c:	f1 1c       	adc	r15, r1
    5b1e:	f7 01       	movw	r30, r14
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5b20:	be 2c       	mov	r11, r14
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
    5b22:	90 e2       	ldi	r25, 0x20	; 32
    5b24:	01 c0       	rjmp	.+2      	; 0x5b28 <AddSpaceLead+0x48>
    5b26:	91 93       	st	Z+, r25
void AddSpaceLead(char *String,unsigned char Size){//
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    5b28:	8e 2f       	mov	r24, r30
    5b2a:	8b 19       	sub	r24, r11
    5b2c:	86 17       	cp	r24, r22
    5b2e:	d8 f3       	brcs	.-10     	; 0x5b26 <AddSpaceLead+0x46>
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
    5b30:	46 2f       	mov	r20, r22
    5b32:	50 e0       	ldi	r21, 0x00	; 0
    5b34:	ce 01       	movw	r24, r28
    5b36:	01 96       	adiw	r24, 0x01	; 1
    5b38:	fc 01       	movw	r30, r24
    5b3a:	e4 0f       	add	r30, r20
    5b3c:	f5 1f       	adc	r31, r21
    5b3e:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5b40:	76 2f       	mov	r23, r22
    5b42:	72 1b       	sub	r23, r18
    5b44:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	24 1b       	sub	r18, r20
    5b4a:	35 0b       	sbc	r19, r21
    5b4c:	0c c0       	rjmp	.+24     	; 0x5b66 <AddSpaceLead+0x86>
    5b4e:	e7 2f       	mov	r30, r23
    5b50:	f0 e0       	ldi	r31, 0x00	; 0
    5b52:	d6 01       	movw	r26, r12
    5b54:	ae 0f       	add	r26, r30
    5b56:	bf 1f       	adc	r27, r31
    5b58:	e0 0f       	add	r30, r16
    5b5a:	f1 1f       	adc	r31, r17
    5b5c:	e2 0f       	add	r30, r18
    5b5e:	f3 1f       	adc	r31, r19
    5b60:	80 81       	ld	r24, Z
    5b62:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5b64:	7f 5f       	subi	r23, 0xFF	; 255
    5b66:	76 17       	cp	r23, r22
    5b68:	90 f3       	brcs	.-28     	; 0x5b4e <AddSpaceLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    5b6a:	4c 0d       	add	r20, r12
    5b6c:	5d 1d       	adc	r21, r13
    5b6e:	da 01       	movw	r26, r20
    5b70:	1c 92       	st	X, r1
    5b72:	f8 01       	movw	r30, r16
    5b74:	04 c0       	rjmp	.+8      	; 0x5b7e <AddSpaceLead+0x9e>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    5b76:	d7 01       	movw	r26, r14
    5b78:	8d 91       	ld	r24, X+
    5b7a:	7d 01       	movw	r14, r26
    5b7c:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    5b7e:	8e 2d       	mov	r24, r14
    5b80:	8b 19       	sub	r24, r11
    5b82:	86 17       	cp	r24, r22
    5b84:	c0 f3       	brcs	.-16     	; 0x5b76 <AddSpaceLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    5b86:	06 0f       	add	r16, r22
    5b88:	11 1d       	adc	r17, r1
    5b8a:	f8 01       	movw	r30, r16
    5b8c:	10 82       	st	Z, r1
	 }
}
    5b8e:	e2 96       	adiw	r28, 0x32	; 50
    5b90:	0f b6       	in	r0, 0x3f	; 63
    5b92:	f8 94       	cli
    5b94:	de bf       	out	0x3e, r29	; 62
    5b96:	0f be       	out	0x3f, r0	; 63
    5b98:	cd bf       	out	0x3d, r28	; 61
    5b9a:	cf 91       	pop	r28
    5b9c:	df 91       	pop	r29
    5b9e:	1f 91       	pop	r17
    5ba0:	0f 91       	pop	r16
    5ba2:	ff 90       	pop	r15
    5ba4:	ef 90       	pop	r14
    5ba6:	df 90       	pop	r13
    5ba8:	cf 90       	pop	r12
    5baa:	bf 90       	pop	r11
    5bac:	08 95       	ret

00005bae <AddSpaceLag>:
	 }
}



void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
    5bae:	cf 93       	push	r28
    5bb0:	df 93       	push	r29
    5bb2:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    5bb4:	dc 01       	movw	r26, r24
    5bb6:	0d 90       	ld	r0, X+
    5bb8:	00 20       	and	r0, r0
    5bba:	e9 f7       	brne	.-6      	; 0x5bb6 <AddSpaceLag+0x8>
    5bbc:	11 97       	sbiw	r26, 0x01	; 1
    5bbe:	a8 1b       	sub	r26, r24
    5bc0:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    5bc2:	a6 17       	cp	r26, r22
    5bc4:	60 f4       	brcc	.+24     	; 0x5bde <AddSpaceLag+0x30>
    5bc6:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=' ';
    5bc8:	90 e2       	ldi	r25, 0x20	; 32
    5bca:	fe 01       	movw	r30, r28
    5bcc:	e8 0f       	add	r30, r24
    5bce:	f1 1d       	adc	r31, r1
    5bd0:	90 83       	st	Z, r25

void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    5bd2:	8f 5f       	subi	r24, 0xFF	; 255
    5bd4:	86 17       	cp	r24, r22
    5bd6:	c8 f3       	brcs	.-14     	; 0x5bca <AddSpaceLag+0x1c>
	    String[i]=' ';
	 }String[Size]=0;
    5bd8:	c6 0f       	add	r28, r22
    5bda:	d1 1d       	adc	r29, r1
    5bdc:	18 82       	st	Y, r1
  }
}
    5bde:	df 91       	pop	r29
    5be0:	cf 91       	pop	r28
    5be2:	08 95       	ret

00005be4 <GetProductName>:
	 }    
	 //Clear Decimal

}

void GetProductName(char GradeId,char *strProductName){
    5be4:	0f 93       	push	r16
    5be6:	1f 93       	push	r17
    5be8:	df 93       	push	r29
    5bea:	cf 93       	push	r28
    5bec:	cd b7       	in	r28, 0x3d	; 61
    5bee:	de b7       	in	r29, 0x3e	; 62
    5bf0:	2c 97       	sbiw	r28, 0x0c	; 12
    5bf2:	0f b6       	in	r0, 0x3f	; 63
    5bf4:	f8 94       	cli
    5bf6:	de bf       	out	0x3e, r29	; 62
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	cd bf       	out	0x3d, r28	; 61
    5bfc:	48 2f       	mov	r20, r24
    5bfe:	8b 01       	movw	r16, r22
    5c00:	fe 01       	movw	r30, r28
    5c02:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5c04:	9e 01       	movw	r18, r28
    5c06:	23 5f       	subi	r18, 0xF3	; 243
    5c08:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    5c0a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5c0c:	e2 17       	cp	r30, r18
    5c0e:	f3 07       	cpc	r31, r19
    5c10:	e1 f7       	brne	.-8      	; 0x5c0a <GetProductName+0x26>
    5c12:	ce 01       	movw	r24, r28
    5c14:	01 96       	adiw	r24, 0x01	; 1

void GetProductName(char GradeId,char *strProductName){
char SProductName[12],i,Length;
     FillChar(SProductName,sizeof(SProductName),0); 
	 //eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
	 if (GradeId>0) eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
    5c16:	44 23       	and	r20, r20
    5c18:	59 f0       	breq	.+22     	; 0x5c30 <GetProductName+0x4c>
    5c1a:	6d e0       	ldi	r22, 0x0D	; 13
    5c1c:	46 9f       	mul	r20, r22
    5c1e:	b0 01       	movw	r22, r0
    5c20:	11 24       	eor	r1, r1
    5c22:	6d 54       	subi	r22, 0x4D	; 77
    5c24:	7f 4f       	sbci	r23, 0xFF	; 255
    5c26:	4a e0       	ldi	r20, 0x0A	; 10
    5c28:	50 e0       	ldi	r21, 0x00	; 0
    5c2a:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    5c2e:	14 c0       	rjmp	.+40     	; 0x5c58 <GetProductName+0x74>
	 else sprintf_P(SProductName,PSTR("N/A"));
    5c30:	00 d0       	rcall	.+0      	; 0x5c32 <GetProductName+0x4e>
    5c32:	00 d0       	rcall	.+0      	; 0x5c34 <GetProductName+0x50>
    5c34:	ad b7       	in	r26, 0x3d	; 61
    5c36:	be b7       	in	r27, 0x3e	; 62
    5c38:	12 96       	adiw	r26, 0x02	; 2
    5c3a:	9c 93       	st	X, r25
    5c3c:	8e 93       	st	-X, r24
    5c3e:	11 97       	sbiw	r26, 0x01	; 1
    5c40:	81 e6       	ldi	r24, 0x61	; 97
    5c42:	95 e0       	ldi	r25, 0x05	; 5
    5c44:	14 96       	adiw	r26, 0x04	; 4
    5c46:	9c 93       	st	X, r25
    5c48:	8e 93       	st	-X, r24
    5c4a:	13 97       	sbiw	r26, 0x03	; 3
    5c4c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    5c50:	0f 90       	pop	r0
    5c52:	0f 90       	pop	r0
    5c54:	0f 90       	pop	r0
    5c56:	0f 90       	pop	r0

     Length=strlen(SProductName);
    5c58:	de 01       	movw	r26, r28
    5c5a:	11 96       	adiw	r26, 0x01	; 1
    5c5c:	fd 01       	movw	r30, r26
    5c5e:	01 90       	ld	r0, Z+
    5c60:	00 20       	and	r0, r0
    5c62:	e9 f7       	brne	.-6      	; 0x5c5e <GetProductName+0x7a>
    5c64:	31 97       	sbiw	r30, 0x01	; 1
    5c66:	ea 1b       	sub	r30, r26
    5c68:	eb 30       	cpi	r30, 0x0B	; 11
    5c6a:	08 f0       	brcs	.+2      	; 0x5c6e <GetProductName+0x8a>
    5c6c:	ea e0       	ldi	r30, 0x0A	; 10
    5c6e:	ae 01       	movw	r20, r28
    5c70:	4f 5f       	subi	r20, 0xFF	; 255
    5c72:	5f 4f       	sbci	r21, 0xFF	; 255
    5c74:	98 01       	movw	r18, r16
    5c76:	ba 01       	movw	r22, r20
    5c78:	06 c0       	rjmp	.+12     	; 0x5c86 <GetProductName+0xa2>
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
	     strProductName[i]=SProductName[i];
    5c7a:	db 01       	movw	r26, r22
    5c7c:	8d 91       	ld	r24, X+
    5c7e:	bd 01       	movw	r22, r26
    5c80:	d9 01       	movw	r26, r18
    5c82:	8d 93       	st	X+, r24
    5c84:	9d 01       	movw	r18, r26
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    5c86:	86 2f       	mov	r24, r22
    5c88:	84 1b       	sub	r24, r20
    5c8a:	8e 17       	cp	r24, r30
    5c8c:	b0 f3       	brcs	.-20     	; 0x5c7a <GetProductName+0x96>
	     strProductName[i]=SProductName[i];
	 }strProductName[Length]=0;
    5c8e:	c8 01       	movw	r24, r16
    5c90:	8e 0f       	add	r24, r30
    5c92:	91 1d       	adc	r25, r1
    5c94:	fc 01       	movw	r30, r24
    5c96:	10 82       	st	Z, r1

	 AddSpaceLag(strProductName,10);
    5c98:	c8 01       	movw	r24, r16
    5c9a:	6a e0       	ldi	r22, 0x0A	; 10
    5c9c:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
}
    5ca0:	2c 96       	adiw	r28, 0x0c	; 12
    5ca2:	0f b6       	in	r0, 0x3f	; 63
    5ca4:	f8 94       	cli
    5ca6:	de bf       	out	0x3e, r29	; 62
    5ca8:	0f be       	out	0x3f, r0	; 63
    5caa:	cd bf       	out	0x3d, r28	; 61
    5cac:	cf 91       	pop	r28
    5cae:	df 91       	pop	r29
    5cb0:	1f 91       	pop	r17
    5cb2:	0f 91       	pop	r16
    5cb4:	08 95       	ret

00005cb6 <GeniusSendLastTransaction>:
}
void GeniusSendPumpPreset(char iPumpID){
}


void GeniusSendLastTransaction(char iPumpID){
    5cb6:	2f 92       	push	r2
    5cb8:	3f 92       	push	r3
    5cba:	4f 92       	push	r4
    5cbc:	5f 92       	push	r5
    5cbe:	6f 92       	push	r6
    5cc0:	7f 92       	push	r7
    5cc2:	8f 92       	push	r8
    5cc4:	9f 92       	push	r9
    5cc6:	af 92       	push	r10
    5cc8:	bf 92       	push	r11
    5cca:	cf 92       	push	r12
    5ccc:	df 92       	push	r13
    5cce:	ef 92       	push	r14
    5cd0:	ff 92       	push	r15
    5cd2:	0f 93       	push	r16
    5cd4:	1f 93       	push	r17
    5cd6:	df 93       	push	r29
    5cd8:	cf 93       	push	r28
    5cda:	cd b7       	in	r28, 0x3d	; 61
    5cdc:	de b7       	in	r29, 0x3e	; 62
    5cde:	c0 5b       	subi	r28, 0xB0	; 176
    5ce0:	d0 40       	sbci	r29, 0x00	; 0
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	f8 94       	cli
    5ce6:	de bf       	out	0x3e, r29	; 62
    5ce8:	0f be       	out	0x3f, r0	; 63
    5cea:	cd bf       	out	0x3d, r28	; 61
    5cec:	e8 2e       	mov	r14, r24
    5cee:	fe 01       	movw	r30, r28
    5cf0:	37 96       	adiw	r30, 0x07	; 7

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cf2:	ce 01       	movw	r24, r28
    5cf4:	46 96       	adiw	r24, 0x16	; 22
	     strMemory[i]=data;
    5cf6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cf8:	e8 17       	cp	r30, r24
    5cfa:	f9 07       	cpc	r31, r25
    5cfc:	e1 f7       	brne	.-8      	; 0x5cf6 <GeniusSendLastTransaction+0x40>
	     strMemory[i]=data;
    5cfe:	ce 01       	movw	r24, r28
    5d00:	85 96       	adiw	r24, 0x25	; 37
    5d02:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5d04:	e8 17       	cp	r30, r24
    5d06:	f9 07       	cpc	r31, r25
    5d08:	e1 f7       	brne	.-8      	; 0x5d02 <GeniusSendLastTransaction+0x4c>
	     strMemory[i]=data;
    5d0a:	ce 01       	movw	r24, r28
    5d0c:	c4 96       	adiw	r24, 0x34	; 52
    5d0e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5d10:	e8 17       	cp	r30, r24
    5d12:	f9 07       	cpc	r31, r25
    5d14:	e1 f7       	brne	.-8      	; 0x5d0e <GeniusSendLastTransaction+0x58>
	     strMemory[i]=data;
    5d16:	cf 01       	movw	r24, r30
    5d18:	3f 01       	movw	r6, r30
    5d1a:	0f 96       	adiw	r24, 0x0f	; 15
    5d1c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5d1e:	e8 17       	cp	r30, r24
    5d20:	f9 07       	cpc	r31, r25
    5d22:	e1 f7       	brne	.-8      	; 0x5d1c <GeniusSendLastTransaction+0x66>
	 FillChar(STotalVolume,sizeof(STotalVolume),0);
	 FillChar(STotalMoney,sizeof(STotalMoney),0);
	      

	 //Generate
	 FIPAddr=GetFIPAddr(iPumpID);
    5d24:	8e 2d       	mov	r24, r14
    5d26:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);
    5d2a:	96 e0       	ldi	r25, 0x06	; 6
    5d2c:	89 9f       	mul	r24, r25
    5d2e:	b0 01       	movw	r22, r0
    5d30:	11 24       	eor	r1, r1
    5d32:	6c 5a       	subi	r22, 0xAC	; 172
    5d34:	7f 4f       	sbci	r23, 0xFF	; 255
    5d36:	8e 01       	movw	r16, r28
    5d38:	0f 5f       	subi	r16, 0xFF	; 255
    5d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d3c:	c8 01       	movw	r24, r16
    5d3e:	46 e0       	ldi	r20, 0x06	; 6
    5d40:	50 e0       	ldi	r21, 0x00	; 0
    5d42:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	 iNozzle=RecPumpData[iPumpID&0x0F].Grade;
    5d46:	2e 2c       	mov	r2, r14
    5d48:	33 24       	eor	r3, r3
    5d4a:	91 01       	movw	r18, r2
    5d4c:	2f 70       	andi	r18, 0x0F	; 15
    5d4e:	30 70       	andi	r19, 0x00	; 0
    5d50:	85 e3       	ldi	r24, 0x35	; 53
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	28 9f       	mul	r18, r24
    5d56:	f0 01       	movw	r30, r0
    5d58:	29 9f       	mul	r18, r25
    5d5a:	f0 0d       	add	r31, r0
    5d5c:	38 9f       	mul	r19, r24
    5d5e:	f0 0d       	add	r31, r0
    5d60:	11 24       	eor	r1, r1
    5d62:	e2 55       	subi	r30, 0x52	; 82
    5d64:	fa 4f       	sbci	r31, 0xFA	; 250
    5d66:	f0 80       	ld	r15, Z
	 iProdID=PProductID[iNozzle];
    5d68:	4f 2c       	mov	r4, r15
    5d6a:	55 24       	eor	r5, r5

	 GetProductName(iProdID,strProduct);
    5d6c:	04 0d       	add	r16, r4
    5d6e:	15 1d       	adc	r17, r5
    5d70:	d8 01       	movw	r26, r16
    5d72:	8c 91       	ld	r24, X
    5d74:	64 e6       	ldi	r22, 0x64	; 100
    5d76:	77 e0       	ldi	r23, 0x07	; 7
    5d78:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <GetProductName>
	 GetTransactionVolume(iPumpID,SVolume);
    5d7c:	47 e0       	ldi	r20, 0x07	; 7
    5d7e:	84 2e       	mov	r8, r20
    5d80:	91 2c       	mov	r9, r1
    5d82:	8c 0e       	add	r8, r28
    5d84:	9d 1e       	adc	r9, r29
    5d86:	8e 2d       	mov	r24, r14
    5d88:	b4 01       	movw	r22, r8
    5d8a:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <GetTransactionVolume>
	 GetTransactionMoney(iPumpID,SMoney);
    5d8e:	36 e1       	ldi	r19, 0x16	; 22
    5d90:	a3 2e       	mov	r10, r19
    5d92:	b1 2c       	mov	r11, r1
    5d94:	ac 0e       	add	r10, r28
    5d96:	bd 1e       	adc	r11, r29
    5d98:	8e 2d       	mov	r24, r14
    5d9a:	b5 01       	movw	r22, r10
    5d9c:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <GetTransactionMoney>
	 GetTotalizerVolume(iPumpID,iNozzle,STotalVolume);
    5da0:	25 e2       	ldi	r18, 0x25	; 37
    5da2:	c2 2e       	mov	r12, r18
    5da4:	d1 2c       	mov	r13, r1
    5da6:	cc 0e       	add	r12, r28
    5da8:	dd 1e       	adc	r13, r29
    5daa:	8e 2d       	mov	r24, r14
    5dac:	6f 2d       	mov	r22, r15
    5dae:	a6 01       	movw	r20, r12
    5db0:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <GetTotalizerVolume>
	 GetTotalizerMoney(iPumpID,iNozzle,STotalMoney);
    5db4:	8e 2d       	mov	r24, r14
    5db6:	6f 2d       	mov	r22, r15
    5db8:	a3 01       	movw	r20, r6
    5dba:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <GetTotalizerMoney>
	 
     ComposeDatetime(SDatetime);
    5dbe:	93 e4       	ldi	r25, 0x43	; 67
    5dc0:	e9 2e       	mov	r14, r25
    5dc2:	f1 2c       	mov	r15, r1
    5dc4:	ec 0e       	add	r14, r28
    5dc6:	fd 1e       	adc	r15, r29
    5dc8:	c7 01       	movw	r24, r14
    5dca:	0e 94 16 1b 	call	0x362c	; 0x362c <ComposeDatetime>

	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
    5dce:	ed b7       	in	r30, 0x3d	; 61
    5dd0:	fe b7       	in	r31, 0x3e	; 62
    5dd2:	74 97       	sbiw	r30, 0x14	; 20
    5dd4:	0f b6       	in	r0, 0x3f	; 63
    5dd6:	f8 94       	cli
    5dd8:	fe bf       	out	0x3e, r31	; 62
    5dda:	0f be       	out	0x3f, r0	; 63
    5ddc:	ed bf       	out	0x3d, r30	; 61
    5dde:	31 96       	adiw	r30, 0x01	; 1
    5de0:	8e 01       	movw	r16, r28
    5de2:	09 5a       	subi	r16, 0xA9	; 169
    5de4:	1f 4f       	sbci	r17, 0xFF	; 255
    5de6:	ad b7       	in	r26, 0x3d	; 61
    5de8:	be b7       	in	r27, 0x3e	; 62
    5dea:	12 96       	adiw	r26, 0x02	; 2
    5dec:	1c 93       	st	X, r17
    5dee:	0e 93       	st	-X, r16
    5df0:	11 97       	sbiw	r26, 0x01	; 1
    5df2:	80 e2       	ldi	r24, 0x20	; 32
    5df4:	95 e0       	ldi	r25, 0x05	; 5
    5df6:	93 83       	std	Z+3, r25	; 0x03
    5df8:	82 83       	std	Z+2, r24	; 0x02
    5dfa:	35 82       	std	Z+5, r3	; 0x05
    5dfc:	24 82       	std	Z+4, r2	; 0x04
    5dfe:	57 82       	std	Z+7, r5	; 0x07
    5e00:	46 82       	std	Z+6, r4	; 0x06
    5e02:	84 e6       	ldi	r24, 0x64	; 100
    5e04:	97 e0       	ldi	r25, 0x07	; 7
    5e06:	91 87       	std	Z+9, r25	; 0x09
    5e08:	80 87       	std	Z+8, r24	; 0x08
    5e0a:	f3 86       	std	Z+11, r15	; 0x0b
    5e0c:	e2 86       	std	Z+10, r14	; 0x0a
    5e0e:	95 86       	std	Z+13, r9	; 0x0d
    5e10:	84 86       	std	Z+12, r8	; 0x0c
    5e12:	b7 86       	std	Z+15, r11	; 0x0f
    5e14:	a6 86       	std	Z+14, r10	; 0x0e
    5e16:	d1 8a       	std	Z+17, r13	; 0x11
    5e18:	c0 8a       	std	Z+16, r12	; 0x10
    5e1a:	62 8a       	std	Z+18, r6	; 0x12
    5e1c:	73 8a       	std	Z+19, r7	; 0x13
    5e1e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 cSum=SumChecksum(strSend);
    5e22:	ad b7       	in	r26, 0x3d	; 61
    5e24:	be b7       	in	r27, 0x3e	; 62
    5e26:	54 96       	adiw	r26, 0x14	; 20
    5e28:	0f b6       	in	r0, 0x3f	; 63
    5e2a:	f8 94       	cli
    5e2c:	be bf       	out	0x3e, r27	; 62
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	ad bf       	out	0x3d, r26	; 61
    5e32:	c8 01       	movw	r24, r16
    5e34:	0e 94 8c 21 	call	0x4318	; 0x4318 <SumChecksum>
    5e38:	e8 2e       	mov	r14, r24
	 uart_print(1,0,strSend);
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	60 e0       	ldi	r22, 0x00	; 0
    5e3e:	a8 01       	movw	r20, r16
    5e40:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
    5e44:	f8 01       	movw	r30, r16

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5e46:	c8 01       	movw	r24, r16
    5e48:	f9 2e       	mov	r15, r25
    5e4a:	ce 01       	movw	r24, r28
    5e4c:	8f 54       	subi	r24, 0x4F	; 79
    5e4e:	9f 4f       	sbci	r25, 0xFF	; 255
	     strMemory[i]=data;
    5e50:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5e52:	e8 17       	cp	r30, r24
    5e54:	f9 07       	cpc	r31, r25
    5e56:	e1 f7       	brne	.-8      	; 0x5e50 <GeniusSendLastTransaction+0x19a>
	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
	 cSum=SumChecksum(strSend);
	 uart_print(1,0,strSend);
	 FillChar(strSend,sizeof(strSend),0);      
	 sprintf_P(strSend,PSTR("%d"),cSum);
    5e58:	00 d0       	rcall	.+0      	; 0x5e5a <GeniusSendLastTransaction+0x1a4>
    5e5a:	00 d0       	rcall	.+0      	; 0x5e5c <GeniusSendLastTransaction+0x1a6>
    5e5c:	00 d0       	rcall	.+0      	; 0x5e5e <GeniusSendLastTransaction+0x1a8>
    5e5e:	ed b7       	in	r30, 0x3d	; 61
    5e60:	fe b7       	in	r31, 0x3e	; 62
    5e62:	31 96       	adiw	r30, 0x01	; 1
    5e64:	ad b7       	in	r26, 0x3d	; 61
    5e66:	be b7       	in	r27, 0x3e	; 62
    5e68:	11 96       	adiw	r26, 0x01	; 1
    5e6a:	0c 93       	st	X, r16
    5e6c:	11 97       	sbiw	r26, 0x01	; 1
    5e6e:	12 96       	adiw	r26, 0x02	; 2
    5e70:	fc 92       	st	X, r15
    5e72:	8d e1       	ldi	r24, 0x1D	; 29
    5e74:	95 e0       	ldi	r25, 0x05	; 5
    5e76:	93 83       	std	Z+3, r25	; 0x03
    5e78:	82 83       	std	Z+2, r24	; 0x02
    5e7a:	e4 82       	std	Z+4, r14	; 0x04
    5e7c:	15 82       	std	Z+5, r1	; 0x05
    5e7e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(1,1,strSend);	 
    5e82:	ed b7       	in	r30, 0x3d	; 61
    5e84:	fe b7       	in	r31, 0x3e	; 62
    5e86:	36 96       	adiw	r30, 0x06	; 6
    5e88:	0f b6       	in	r0, 0x3f	; 63
    5e8a:	f8 94       	cli
    5e8c:	fe bf       	out	0x3e, r31	; 62
    5e8e:	0f be       	out	0x3f, r0	; 63
    5e90:	ed bf       	out	0x3d, r30	; 61
    5e92:	81 e0       	ldi	r24, 0x01	; 1
    5e94:	61 e0       	ldi	r22, 0x01	; 1
    5e96:	40 2f       	mov	r20, r16
    5e98:	5f 2d       	mov	r21, r15
    5e9a:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
}
    5e9e:	c0 55       	subi	r28, 0x50	; 80
    5ea0:	df 4f       	sbci	r29, 0xFF	; 255
    5ea2:	0f b6       	in	r0, 0x3f	; 63
    5ea4:	f8 94       	cli
    5ea6:	de bf       	out	0x3e, r29	; 62
    5ea8:	0f be       	out	0x3f, r0	; 63
    5eaa:	cd bf       	out	0x3d, r28	; 61
    5eac:	cf 91       	pop	r28
    5eae:	df 91       	pop	r29
    5eb0:	1f 91       	pop	r17
    5eb2:	0f 91       	pop	r16
    5eb4:	ff 90       	pop	r15
    5eb6:	ef 90       	pop	r14
    5eb8:	df 90       	pop	r13
    5eba:	cf 90       	pop	r12
    5ebc:	bf 90       	pop	r11
    5ebe:	af 90       	pop	r10
    5ec0:	9f 90       	pop	r9
    5ec2:	8f 90       	pop	r8
    5ec4:	7f 90       	pop	r7
    5ec6:	6f 90       	pop	r6
    5ec8:	5f 90       	pop	r5
    5eca:	4f 90       	pop	r4
    5ecc:	3f 90       	pop	r3
    5ece:	2f 90       	pop	r2
    5ed0:	08 95       	ret

00005ed2 <systemGeniusProtocol>:
	     Result=TS_OLD;
	 }
   return Result;
}

void systemGeniusProtocol(){
    5ed2:	1f 93       	push	r17
static char stGeniusProtocol=gpInitScan;
static char iPumpID;
	 
	 switch(stGeniusProtocol){
    5ed4:	80 91 c1 01 	lds	r24, 0x01C1
    5ed8:	83 30       	cpi	r24, 0x03	; 3
    5eda:	61 f1       	breq	.+88     	; 0x5f34 <systemGeniusProtocol+0x62>
    5edc:	84 30       	cpi	r24, 0x04	; 4
    5ede:	28 f4       	brcc	.+10     	; 0x5eea <systemGeniusProtocol+0x18>
    5ee0:	81 30       	cpi	r24, 0x01	; 1
    5ee2:	81 f0       	breq	.+32     	; 0x5f04 <systemGeniusProtocol+0x32>
    5ee4:	82 30       	cpi	r24, 0x02	; 2
    5ee6:	c0 f4       	brcc	.+48     	; 0x5f18 <systemGeniusProtocol+0x46>
    5ee8:	09 c0       	rjmp	.+18     	; 0x5efc <systemGeniusProtocol+0x2a>
    5eea:	85 30       	cpi	r24, 0x05	; 5
    5eec:	09 f4       	brne	.+2      	; 0x5ef0 <systemGeniusProtocol+0x1e>
    5eee:	43 c0       	rjmp	.+134    	; 0x5f76 <systemGeniusProtocol+0xa4>
    5ef0:	85 30       	cpi	r24, 0x05	; 5
    5ef2:	a0 f1       	brcs	.+104    	; 0x5f5c <systemGeniusProtocol+0x8a>
    5ef4:	86 30       	cpi	r24, 0x06	; 6
    5ef6:	09 f0       	breq	.+2      	; 0x5efa <systemGeniusProtocol+0x28>
    5ef8:	52 c0       	rjmp	.+164    	; 0x5f9e <systemGeniusProtocol+0xcc>
    5efa:	43 c0       	rjmp	.+134    	; 0x5f82 <systemGeniusProtocol+0xb0>
	 case gpInitScan:
	      iPumpID=1;
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	80 93 c0 01 	sts	0x01C0, r24
    5f02:	4b c0       	rjmp	.+150    	; 0x5f9a <systemGeniusProtocol+0xc8>
          stGeniusProtocol=gpScanNewTransaction;
	      break;
	 case gpScanNewTransaction:
	      if (GetIncomingTransStatus(PumpID)==TS_NEW){
    5f04:	80 91 bf 01 	lds	r24, 0x01BF
    5f08:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <GetIncomingTransStatus>
    5f0c:	82 30       	cpi	r24, 0x02	; 2
    5f0e:	09 f0       	breq	.+2      	; 0x5f12 <systemGeniusProtocol+0x40>
    5f10:	46 c0       	rjmp	.+140    	; 0x5f9e <systemGeniusProtocol+0xcc>
		      IsTotalizerReceived=False;
    5f12:	10 92 b1 01 	sts	0x01B1, r1
    5f16:	41 c0       	rjmp	.+130    	; 0x5f9a <systemGeniusProtocol+0xc8>
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
    5f18:	90 91 c0 01 	lds	r25, 0x01C0
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    5f1c:	85 e0       	ldi	r24, 0x05	; 5
    5f1e:	80 93 ad 05 	sts	0x05AD, r24
	 PoolMsg=plMsg;
    5f22:	90 93 d9 0b 	sts	0x0BD9, r25
     IsControlPooling=True;
    5f26:	81 e0       	ldi	r24, 0x01	; 1
    5f28:	80 93 84 01 	sts	0x0184, r24
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
		  TimSend=0;
    5f2c:	10 92 7e 0c 	sts	0x0C7E, r1
		  stGeniusProtocol=gpWaitRequestedTotalizer;
    5f30:	83 e0       	ldi	r24, 0x03	; 3
    5f32:	33 c0       	rjmp	.+102    	; 0x5f9a <systemGeniusProtocol+0xc8>
	      break;
     case gpWaitRequestedTotalizer:
	      if ((IsTotalizerReceived==True)&&(AcknoledgePump==iPumpID)){
    5f34:	80 91 b1 01 	lds	r24, 0x01B1
    5f38:	81 30       	cpi	r24, 0x01	; 1
    5f3a:	59 f4       	brne	.+22     	; 0x5f52 <systemGeniusProtocol+0x80>
    5f3c:	90 91 f2 0b 	lds	r25, 0x0BF2
    5f40:	80 91 c0 01 	lds	r24, 0x01C0
    5f44:	98 17       	cp	r25, r24
    5f46:	29 f4       	brne	.+10     	; 0x5f52 <systemGeniusProtocol+0x80>
		      IsTotalizerReceived=False;
    5f48:	10 92 b1 01 	sts	0x01B1, r1
			  stGeniusProtocol=gpSendTransactionData;
    5f4c:	84 e0       	ldi	r24, 0x04	; 4
    5f4e:	80 93 c1 01 	sts	0x01C1, r24
		  }
	      if (TimSend>TIM_SEND*2)stGeniusProtocol=gpNextPumpScan;
    5f52:	80 91 7e 0c 	lds	r24, 0x0C7E
    5f56:	85 31       	cpi	r24, 0x15	; 21
    5f58:	10 f1       	brcs	.+68     	; 0x5f9e <systemGeniusProtocol+0xcc>
    5f5a:	11 c0       	rjmp	.+34     	; 0x5f7e <systemGeniusProtocol+0xac>
	      break;
     case gpSendTransactionData:
          GeniusSendLastTransaction(iPumpID);
    5f5c:	80 91 c0 01 	lds	r24, 0x01C0
    5f60:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <GeniusSendLastTransaction>
		  SetIncomingTransStatus(iPumpID,TS_OLD);
    5f64:	80 91 c0 01 	lds	r24, 0x01C0
    5f68:	63 e0       	ldi	r22, 0x03	; 3
    5f6a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <SetIncomingTransStatus>
		  
		  TimSend=0;
    5f6e:	10 92 7e 0c 	sts	0x0C7E, r1
          stGeniusProtocol=gpDelayNextPumpScan;
    5f72:	85 e0       	ldi	r24, 0x05	; 5
    5f74:	12 c0       	rjmp	.+36     	; 0x5f9a <systemGeniusProtocol+0xc8>
	      break;
     case gpDelayNextPumpScan:
          if (TimSend>1)stGeniusProtocol=gpNextPumpScan;
    5f76:	80 91 7e 0c 	lds	r24, 0x0C7E
    5f7a:	82 30       	cpi	r24, 0x02	; 2
    5f7c:	80 f0       	brcs	.+32     	; 0x5f9e <systemGeniusProtocol+0xcc>
    5f7e:	86 e0       	ldi	r24, 0x06	; 6
    5f80:	0c c0       	rjmp	.+24     	; 0x5f9a <systemGeniusProtocol+0xc8>
	      break;
     case gpNextPumpScan:
          if (iPumpID<=eeprom_read_byte(&DefPoolingPumpMax)){
    5f82:	10 91 c0 01 	lds	r17, 0x01C0
    5f86:	8a e4       	ldi	r24, 0x4A	; 74
    5f88:	91 e0       	ldi	r25, 0x01	; 1
    5f8a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    5f8e:	81 17       	cp	r24, r17
    5f90:	30 f0       	brcs	.+12     	; 0x5f9e <systemGeniusProtocol+0xcc>
		      iPumpID++;
    5f92:	1f 5f       	subi	r17, 0xFF	; 255
    5f94:	10 93 c0 01 	sts	0x01C0, r17
              stGeniusProtocol=gpScanNewTransaction;
    5f98:	81 e0       	ldi	r24, 0x01	; 1
    5f9a:	80 93 c1 01 	sts	0x01C1, r24
		  }
	      break;
	 }
}
    5f9e:	1f 91       	pop	r17
    5fa0:	08 95       	ret

00005fa2 <StrAlignCenter>:
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
}

void StrAlignCenter(char *Source, unsigned int Length){
    5fa2:	ef 92       	push	r14
    5fa4:	ff 92       	push	r15
    5fa6:	0f 93       	push	r16
    5fa8:	1f 93       	push	r17
    5faa:	18 2f       	mov	r17, r24
    5fac:	09 2f       	mov	r16, r25
    5fae:	7b 01       	movw	r14, r22
char nAddedSpace,srcLength;
     RemSpaceLag(Source);
    5fb0:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
	 RemSpaceLead(Source);
    5fb4:	81 2f       	mov	r24, r17
    5fb6:	90 2f       	mov	r25, r16
    5fb8:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <RemSpaceLead>
	 srcLength=strlen(Source);
    5fbc:	a1 2f       	mov	r26, r17
    5fbe:	b0 2f       	mov	r27, r16
    5fc0:	fd 01       	movw	r30, r26
    5fc2:	01 90       	ld	r0, Z+
    5fc4:	00 20       	and	r0, r0
    5fc6:	e9 f7       	brne	.-6      	; 0x5fc2 <StrAlignCenter+0x20>
    5fc8:	31 97       	sbiw	r30, 0x01	; 1
    5fca:	e1 1b       	sub	r30, r17
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
    5fcc:	c7 01       	movw	r24, r14
    5fce:	8e 1b       	sub	r24, r30
    5fd0:	91 09       	sbc	r25, r1
    5fd2:	96 95       	lsr	r25
    5fd4:	87 95       	ror	r24
    5fd6:	e8 0f       	add	r30, r24
    5fd8:	81 2f       	mov	r24, r17
    5fda:	90 2f       	mov	r25, r16
    5fdc:	6e 2f       	mov	r22, r30
    5fde:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <AddSpaceLead>
	 AddSpaceLag(Source,Length);
    5fe2:	81 2f       	mov	r24, r17
    5fe4:	90 2f       	mov	r25, r16
    5fe6:	6e 2d       	mov	r22, r14
    5fe8:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
}
    5fec:	1f 91       	pop	r17
    5fee:	0f 91       	pop	r16
    5ff0:	ff 90       	pop	r15
    5ff2:	ef 90       	pop	r14
    5ff4:	08 95       	ret

00005ff6 <AddCharLead>:
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    5ff6:	bf 92       	push	r11
    5ff8:	cf 92       	push	r12
    5ffa:	df 92       	push	r13
    5ffc:	ef 92       	push	r14
    5ffe:	ff 92       	push	r15
    6000:	0f 93       	push	r16
    6002:	1f 93       	push	r17
    6004:	df 93       	push	r29
    6006:	cf 93       	push	r28
    6008:	cd b7       	in	r28, 0x3d	; 61
    600a:	de b7       	in	r29, 0x3e	; 62
    600c:	6e 97       	sbiw	r28, 0x1e	; 30
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	cd bf       	out	0x3d, r28	; 61
    6018:	8c 01       	movw	r16, r24
    601a:	e4 2e       	mov	r14, r20
     char i,Length,strAdded[30];
     Length=strlen(String);
    601c:	fc 01       	movw	r30, r24
    601e:	01 90       	ld	r0, Z+
    6020:	00 20       	and	r0, r0
    6022:	e9 f7       	brne	.-6      	; 0x601e <AddCharLead+0x28>
    6024:	31 97       	sbiw	r30, 0x01	; 1
    6026:	2e 2f       	mov	r18, r30
    6028:	28 1b       	sub	r18, r24

	 if (Size>Length){
    602a:	24 17       	cp	r18, r20
    602c:	d0 f5       	brcc	.+116    	; 0x60a2 <AddCharLead+0xac>
    602e:	ae 01       	movw	r20, r28
    6030:	4f 5f       	subi	r20, 0xFF	; 255
    6032:	5f 4f       	sbci	r21, 0xFF	; 255
    6034:	fa 01       	movw	r30, r20
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    6036:	b4 2e       	mov	r11, r20
    6038:	01 c0       	rjmp	.+2      	; 0x603c <AddCharLead+0x46>
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
    603a:	61 93       	st	Z+, r22
void AddCharLead(char *String,char CharAdded,unsigned char Size){//
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    603c:	8e 2f       	mov	r24, r30
    603e:	8b 19       	sub	r24, r11
    6040:	8e 15       	cp	r24, r14
    6042:	d8 f3       	brcs	.-10     	; 0x603a <AddCharLead+0x44>
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
    6044:	6e 2d       	mov	r22, r14
    6046:	70 e0       	ldi	r23, 0x00	; 0
    6048:	ce 01       	movw	r24, r28
    604a:	01 96       	adiw	r24, 0x01	; 1
    604c:	fc 01       	movw	r30, r24
    604e:	e6 0f       	add	r30, r22
    6050:	f7 1f       	adc	r31, r23
    6052:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    6054:	fe 2c       	mov	r15, r14
    6056:	f2 1a       	sub	r15, r18
    6058:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    605a:	30 e0       	ldi	r19, 0x00	; 0
    605c:	26 1b       	sub	r18, r22
    605e:	37 0b       	sbc	r19, r23
    6060:	0c c0       	rjmp	.+24     	; 0x607a <AddCharLead+0x84>
    6062:	ef 2d       	mov	r30, r15
    6064:	f0 e0       	ldi	r31, 0x00	; 0
    6066:	d6 01       	movw	r26, r12
    6068:	ae 0f       	add	r26, r30
    606a:	bf 1f       	adc	r27, r31
    606c:	e0 0f       	add	r30, r16
    606e:	f1 1f       	adc	r31, r17
    6070:	e2 0f       	add	r30, r18
    6072:	f3 1f       	adc	r31, r19
    6074:	80 81       	ld	r24, Z
    6076:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    6078:	f3 94       	inc	r15
    607a:	fe 14       	cp	r15, r14
    607c:	90 f3       	brcs	.-28     	; 0x6062 <AddCharLead+0x6c>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    607e:	6c 0d       	add	r22, r12
    6080:	7d 1d       	adc	r23, r13
    6082:	db 01       	movw	r26, r22
    6084:	1c 92       	st	X, r1
    6086:	f8 01       	movw	r30, r16
    6088:	04 c0       	rjmp	.+8      	; 0x6092 <AddCharLead+0x9c>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    608a:	da 01       	movw	r26, r20
    608c:	8d 91       	ld	r24, X+
    608e:	ad 01       	movw	r20, r26
    6090:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    6092:	84 2f       	mov	r24, r20
    6094:	8b 19       	sub	r24, r11
    6096:	8e 15       	cp	r24, r14
    6098:	c0 f3       	brcs	.-16     	; 0x608a <AddCharLead+0x94>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    609a:	0e 0d       	add	r16, r14
    609c:	11 1d       	adc	r17, r1
    609e:	f8 01       	movw	r30, r16
    60a0:	10 82       	st	Z, r1
	 }
}
    60a2:	6e 96       	adiw	r28, 0x1e	; 30
    60a4:	0f b6       	in	r0, 0x3f	; 63
    60a6:	f8 94       	cli
    60a8:	de bf       	out	0x3e, r29	; 62
    60aa:	0f be       	out	0x3f, r0	; 63
    60ac:	cd bf       	out	0x3d, r28	; 61
    60ae:	cf 91       	pop	r28
    60b0:	df 91       	pop	r29
    60b2:	1f 91       	pop	r17
    60b4:	0f 91       	pop	r16
    60b6:	ff 90       	pop	r15
    60b8:	ef 90       	pop	r14
    60ba:	df 90       	pop	r13
    60bc:	cf 90       	pop	r12
    60be:	bf 90       	pop	r11
    60c0:	08 95       	ret

000060c2 <AddCharLag>:
    }
return Result;
}

//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
    60c2:	cf 93       	push	r28
    60c4:	df 93       	push	r29
    60c6:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    60c8:	dc 01       	movw	r26, r24
    60ca:	0d 90       	ld	r0, X+
    60cc:	00 20       	and	r0, r0
    60ce:	e9 f7       	brne	.-6      	; 0x60ca <AddCharLag+0x8>
    60d0:	11 97       	sbiw	r26, 0x01	; 1
    60d2:	a8 1b       	sub	r26, r24
    60d4:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    60d6:	a4 17       	cp	r26, r20
    60d8:	58 f4       	brcc	.+22     	; 0x60f0 <AddCharLag+0x2e>
    60da:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=CharAdded;
    60dc:	fe 01       	movw	r30, r28
    60de:	e8 0f       	add	r30, r24
    60e0:	f1 1d       	adc	r31, r1
    60e2:	60 83       	st	Z, r22
//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    60e4:	8f 5f       	subi	r24, 0xFF	; 255
    60e6:	84 17       	cp	r24, r20
    60e8:	c8 f3       	brcs	.-14     	; 0x60dc <AddCharLag+0x1a>
	    String[i]=CharAdded;
	 }String[Size]=0;
    60ea:	c4 0f       	add	r28, r20
    60ec:	d1 1d       	adc	r29, r1
    60ee:	18 82       	st	Y, r1
  }

}
    60f0:	df 91       	pop	r29
    60f2:	cf 91       	pop	r28
    60f4:	08 95       	ret

000060f6 <CountTotalizerSatus>:
		      Result++;		  
		  }	 
	 }
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
    60f6:	cf 92       	push	r12
    60f8:	df 92       	push	r13
    60fa:	ef 92       	push	r14
    60fc:	ff 92       	push	r15
    60fe:	0f 93       	push	r16
    6100:	1f 93       	push	r17
    6102:	cf 93       	push	r28
    6104:	df 93       	push	r29
    6106:	7c 01       	movw	r14, r24
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    6108:	dc 01       	movw	r26, r24
    610a:	0d 90       	ld	r0, X+
    610c:	00 20       	and	r0, r0
    610e:	e9 f7       	brne	.-6      	; 0x610a <CountTotalizerSatus+0x14>
    6110:	8d 01       	movw	r16, r26
    6112:	01 50       	subi	r16, 0x01	; 1
    6114:	10 40       	sbci	r17, 0x00	; 0
    6116:	08 1b       	sub	r16, r24
    6118:	19 0b       	sbc	r17, r25
    611a:	cc 24       	eor	r12, r12
    611c:	dd 24       	eor	r13, r13
    611e:	0a c0       	rjmp	.+20     	; 0x6134 <CountTotalizerSatus+0x3e>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
    6120:	84 e1       	ldi	r24, 0x14	; 20
    6122:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    6126:	ce 0d       	add	r28, r14
    6128:	df 1d       	adc	r29, r15
    612a:	98 81       	ld	r25, Y
    612c:	98 17       	cp	r25, r24
    612e:	09 f4       	brne	.+2      	; 0x6132 <CountTotalizerSatus+0x3c>
		      Result++;		  
    6130:	d3 94       	inc	r13
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    6132:	c3 94       	inc	r12
    6134:	cc 2d       	mov	r28, r12
    6136:	d0 e0       	ldi	r29, 0x00	; 0
    6138:	c0 17       	cp	r28, r16
    613a:	d1 07       	cpc	r29, r17
    613c:	88 f3       	brcs	.-30     	; 0x6120 <CountTotalizerSatus+0x2a>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    613e:	8d 2d       	mov	r24, r13
    6140:	df 91       	pop	r29
    6142:	cf 91       	pop	r28
    6144:	1f 91       	pop	r17
    6146:	0f 91       	pop	r16
    6148:	ff 90       	pop	r15
    614a:	ef 90       	pop	r14
    614c:	df 90       	pop	r13
    614e:	cf 90       	pop	r12
    6150:	08 95       	ret

00006152 <RemoveChar>:
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}

void RemoveChar(char *strSource, char cRem){
    6152:	1f 93       	push	r17
    6154:	df 93       	push	r29
    6156:	cf 93       	push	r28
    6158:	cd b7       	in	r28, 0x3d	; 61
    615a:	de b7       	in	r29, 0x3e	; 62
    615c:	64 97       	sbiw	r28, 0x14	; 20
    615e:	0f b6       	in	r0, 0x3f	; 63
    6160:	f8 94       	cli
    6162:	de bf       	out	0x3e, r29	; 62
    6164:	0f be       	out	0x3f, r0	; 63
    6166:	cd bf       	out	0x3d, r28	; 61
    6168:	16 2f       	mov	r17, r22
    616a:	50 e0       	ldi	r21, 0x00	; 0
    616c:	40 e0       	ldi	r20, 0x00	; 0
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
    616e:	be 01       	movw	r22, r28
    6170:	6f 5f       	subi	r22, 0xFF	; 255
    6172:	7f 4f       	sbci	r23, 0xFF	; 255
    6174:	0c c0       	rjmp	.+24     	; 0x618e <RemoveChar+0x3c>

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
    6176:	28 0f       	add	r18, r24
    6178:	39 1f       	adc	r19, r25
    617a:	d9 01       	movw	r26, r18
    617c:	2c 91       	ld	r18, X
    617e:	21 17       	cp	r18, r17
    6180:	29 f0       	breq	.+10     	; 0x618c <RemoveChar+0x3a>
		     sTemp[iAdd]=strSource[i];
    6182:	fb 01       	movw	r30, r22
    6184:	e4 0f       	add	r30, r20
    6186:	f1 1d       	adc	r31, r1
    6188:	20 83       	st	Z, r18
			 iAdd++;
    618a:	4f 5f       	subi	r20, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    618c:	5f 5f       	subi	r21, 0xFF	; 255
    618e:	25 2f       	mov	r18, r21
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	fc 01       	movw	r30, r24
    6194:	01 90       	ld	r0, Z+
    6196:	00 20       	and	r0, r0
    6198:	e9 f7       	brne	.-6      	; 0x6194 <RemoveChar+0x42>
    619a:	31 97       	sbiw	r30, 0x01	; 1
    619c:	e8 1b       	sub	r30, r24
    619e:	f9 0b       	sbc	r31, r25
    61a0:	2e 17       	cp	r18, r30
    61a2:	3f 07       	cpc	r19, r31
    61a4:	40 f3       	brcs	.-48     	; 0x6176 <RemoveChar+0x24>
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
			 iAdd++;
          }
	 }sTemp[iAdd]=0;
    61a6:	9e 01       	movw	r18, r28
    61a8:	2f 5f       	subi	r18, 0xFF	; 255
    61aa:	3f 4f       	sbci	r19, 0xFF	; 255
    61ac:	f9 01       	movw	r30, r18
    61ae:	e4 0f       	add	r30, r20
    61b0:	f1 1d       	adc	r31, r1
    61b2:	10 82       	st	Z, r1
	 sprintf_P(strSource,PSTR("%s"),sTemp);
    61b4:	00 d0       	rcall	.+0      	; 0x61b6 <RemoveChar+0x64>
    61b6:	00 d0       	rcall	.+0      	; 0x61b8 <RemoveChar+0x66>
    61b8:	00 d0       	rcall	.+0      	; 0x61ba <RemoveChar+0x68>
    61ba:	ed b7       	in	r30, 0x3d	; 61
    61bc:	fe b7       	in	r31, 0x3e	; 62
    61be:	31 96       	adiw	r30, 0x01	; 1
    61c0:	ad b7       	in	r26, 0x3d	; 61
    61c2:	be b7       	in	r27, 0x3e	; 62
    61c4:	12 96       	adiw	r26, 0x02	; 2
    61c6:	9c 93       	st	X, r25
    61c8:	8e 93       	st	-X, r24
    61ca:	11 97       	sbiw	r26, 0x01	; 1
    61cc:	8b e0       	ldi	r24, 0x0B	; 11
    61ce:	9a e1       	ldi	r25, 0x1A	; 26
    61d0:	93 83       	std	Z+3, r25	; 0x03
    61d2:	82 83       	std	Z+2, r24	; 0x02
    61d4:	35 83       	std	Z+5, r19	; 0x05
    61d6:	24 83       	std	Z+4, r18	; 0x04
    61d8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    61dc:	ed b7       	in	r30, 0x3d	; 61
    61de:	fe b7       	in	r31, 0x3e	; 62
    61e0:	36 96       	adiw	r30, 0x06	; 6
    61e2:	0f b6       	in	r0, 0x3f	; 63
    61e4:	f8 94       	cli
    61e6:	fe bf       	out	0x3e, r31	; 62
    61e8:	0f be       	out	0x3f, r0	; 63
    61ea:	ed bf       	out	0x3d, r30	; 61
}
    61ec:	64 96       	adiw	r28, 0x14	; 20
    61ee:	0f b6       	in	r0, 0x3f	; 63
    61f0:	f8 94       	cli
    61f2:	de bf       	out	0x3e, r29	; 62
    61f4:	0f be       	out	0x3f, r0	; 63
    61f6:	cd bf       	out	0x3d, r28	; 61
    61f8:	cf 91       	pop	r28
    61fa:	df 91       	pop	r29
    61fc:	1f 91       	pop	r17
    61fe:	08 95       	ret

00006200 <WrapCode>:
	      break;
	 }
   return Result;
}

void WrapCode(char *strRawCode){
    6200:	8f 92       	push	r8
    6202:	9f 92       	push	r9
    6204:	bf 92       	push	r11
    6206:	cf 92       	push	r12
    6208:	df 92       	push	r13
    620a:	ef 92       	push	r14
    620c:	ff 92       	push	r15
    620e:	0f 93       	push	r16
    6210:	1f 93       	push	r17
    6212:	df 93       	push	r29
    6214:	cf 93       	push	r28
    6216:	cd b7       	in	r28, 0x3d	; 61
    6218:	de b7       	in	r29, 0x3e	; 62
    621a:	2f 97       	sbiw	r28, 0x0f	; 15
    621c:	0f b6       	in	r0, 0x3f	; 63
    621e:	f8 94       	cli
    6220:	de bf       	out	0x3e, r29	; 62
    6222:	0f be       	out	0x3f, r0	; 63
    6224:	cd bf       	out	0x3d, r28	; 61
    6226:	6c 01       	movw	r12, r24
    6228:	bb 24       	eor	r11, r11
    622a:	40 e0       	ldi	r20, 0x00	; 0
    622c:	4e 01       	movw	r8, r28
    622e:	08 94       	sec
    6230:	81 1c       	adc	r8, r1
    6232:	91 1c       	adc	r9, r1
    6234:	12 c0       	rjmp	.+36     	; 0x625a <WrapCode+0x5a>
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
    6236:	86 01       	movw	r16, r12
    6238:	0e 0d       	add	r16, r14
    623a:	1f 1d       	adc	r17, r15
    623c:	d8 01       	movw	r26, r16
    623e:	6c 91       	ld	r22, X
    6240:	60 53       	subi	r22, 0x30	; 48
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <GeniusCalc>
    6248:	e8 0c       	add	r14, r8
    624a:	f9 1c       	adc	r15, r9
    624c:	80 5d       	subi	r24, 0xD0	; 208
    624e:	f7 01       	movw	r30, r14
    6250:	80 83       	st	Z, r24
		  seedKey=strRawCode[i]-'0';
    6252:	d8 01       	movw	r26, r16
    6254:	4c 91       	ld	r20, X
    6256:	40 53       	subi	r20, 0x30	; 48
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    6258:	b3 94       	inc	r11
    625a:	eb 2c       	mov	r14, r11
    625c:	ff 24       	eor	r15, r15
    625e:	d6 01       	movw	r26, r12
    6260:	0d 90       	ld	r0, X+
    6262:	00 20       	and	r0, r0
    6264:	e9 f7       	brne	.-6      	; 0x6260 <WrapCode+0x60>
    6266:	11 97       	sbiw	r26, 0x01	; 1
    6268:	ac 19       	sub	r26, r12
    626a:	bd 09       	sbc	r27, r13
    626c:	ea 16       	cp	r14, r26
    626e:	fb 06       	cpc	r15, r27
    6270:	10 f3       	brcs	.-60     	; 0x6236 <WrapCode+0x36>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
    6272:	a8 0d       	add	r26, r8
    6274:	b9 1d       	adc	r27, r9
    6276:	1c 92       	st	X, r1
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
    6278:	00 d0       	rcall	.+0      	; 0x627a <WrapCode+0x7a>
    627a:	00 d0       	rcall	.+0      	; 0x627c <WrapCode+0x7c>
    627c:	00 d0       	rcall	.+0      	; 0x627e <WrapCode+0x7e>
    627e:	ed b7       	in	r30, 0x3d	; 61
    6280:	fe b7       	in	r31, 0x3e	; 62
    6282:	31 96       	adiw	r30, 0x01	; 1
    6284:	ad b7       	in	r26, 0x3d	; 61
    6286:	be b7       	in	r27, 0x3e	; 62
    6288:	12 96       	adiw	r26, 0x02	; 2
    628a:	dc 92       	st	X, r13
    628c:	ce 92       	st	-X, r12
    628e:	11 97       	sbiw	r26, 0x01	; 1
    6290:	86 e1       	ldi	r24, 0x16	; 22
    6292:	9a e1       	ldi	r25, 0x1A	; 26
    6294:	93 83       	std	Z+3, r25	; 0x03
    6296:	82 83       	std	Z+2, r24	; 0x02
    6298:	95 82       	std	Z+5, r9	; 0x05
    629a:	84 82       	std	Z+4, r8	; 0x04
    629c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    62a0:	ed b7       	in	r30, 0x3d	; 61
    62a2:	fe b7       	in	r31, 0x3e	; 62
    62a4:	36 96       	adiw	r30, 0x06	; 6
    62a6:	0f b6       	in	r0, 0x3f	; 63
    62a8:	f8 94       	cli
    62aa:	fe bf       	out	0x3e, r31	; 62
    62ac:	0f be       	out	0x3f, r0	; 63
    62ae:	ed bf       	out	0x3d, r30	; 61
}
    62b0:	2f 96       	adiw	r28, 0x0f	; 15
    62b2:	0f b6       	in	r0, 0x3f	; 63
    62b4:	f8 94       	cli
    62b6:	de bf       	out	0x3e, r29	; 62
    62b8:	0f be       	out	0x3f, r0	; 63
    62ba:	cd bf       	out	0x3d, r28	; 61
    62bc:	cf 91       	pop	r28
    62be:	df 91       	pop	r29
    62c0:	1f 91       	pop	r17
    62c2:	0f 91       	pop	r16
    62c4:	ff 90       	pop	r15
    62c6:	ef 90       	pop	r14
    62c8:	df 90       	pop	r13
    62ca:	cf 90       	pop	r12
    62cc:	bf 90       	pop	r11
    62ce:	9f 90       	pop	r9
    62d0:	8f 90       	pop	r8
    62d2:	08 95       	ret

000062d4 <GenerateKeyStamp>:


   return Result;
}

void GenerateKeyStamp(char *sTime, char *sGCode, char *strKeyStamp){//
    62d4:	8f 92       	push	r8
    62d6:	9f 92       	push	r9
    62d8:	af 92       	push	r10
    62da:	bf 92       	push	r11
    62dc:	df 92       	push	r13
    62de:	ef 92       	push	r14
    62e0:	ff 92       	push	r15
    62e2:	0f 93       	push	r16
    62e4:	1f 93       	push	r17
    62e6:	df 93       	push	r29
    62e8:	cf 93       	push	r28
    62ea:	cd b7       	in	r28, 0x3d	; 61
    62ec:	de b7       	in	r29, 0x3e	; 62
    62ee:	2d 97       	sbiw	r28, 0x0d	; 13
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	f8 94       	cli
    62f4:	de bf       	out	0x3e, r29	; 62
    62f6:	0f be       	out	0x3f, r0	; 63
    62f8:	cd bf       	out	0x3d, r28	; 61
    62fa:	9c 01       	movw	r18, r24
    62fc:	7b 01       	movw	r14, r22
    62fe:	5a 01       	movw	r10, r20
	             65585577
	 */
     char seedIdx,sSeed[10],sAdd[3],i;
     
	 seedIdx=(sTime[5]-'0')%8; 
	 sAdd[0]=sGCode[seedIdx];
    6300:	dc 01       	movw	r26, r24
    6302:	15 96       	adiw	r26, 0x05	; 5
    6304:	8c 91       	ld	r24, X
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	c0 97       	sbiw	r24, 0x30	; 48
    630a:	68 e0       	ldi	r22, 0x08	; 8
    630c:	70 e0       	ldi	r23, 0x00	; 0
    630e:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    6312:	f7 01       	movw	r30, r14
    6314:	e8 0f       	add	r30, r24
    6316:	f1 1d       	adc	r31, r1
    6318:	80 81       	ld	r24, Z
    631a:	89 83       	std	Y+1, r24	; 0x01
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
    631c:	f9 01       	movw	r30, r18
    631e:	86 81       	ldd	r24, Z+6	; 0x06
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	c0 97       	sbiw	r24, 0x30	; 48
    6324:	68 e0       	ldi	r22, 0x08	; 8
    6326:	70 e0       	ldi	r23, 0x00	; 0
    6328:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    632c:	f7 01       	movw	r30, r14
    632e:	e8 0f       	add	r30, r24
    6330:	f1 1d       	adc	r31, r1
    6332:	80 81       	ld	r24, Z
    6334:	8a 83       	std	Y+2, r24	; 0x02
	 sAdd[2]=0;
    6336:	1b 82       	std	Y+3, r1	; 0x03

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
    6338:	8d b7       	in	r24, 0x3d	; 61
    633a:	9e b7       	in	r25, 0x3e	; 62
    633c:	08 97       	sbiw	r24, 0x08	; 8
    633e:	0f b6       	in	r0, 0x3f	; 63
    6340:	f8 94       	cli
    6342:	9e bf       	out	0x3e, r25	; 62
    6344:	0f be       	out	0x3f, r0	; 63
    6346:	8d bf       	out	0x3d, r24	; 61
    6348:	ed b7       	in	r30, 0x3d	; 61
    634a:	fe b7       	in	r31, 0x3e	; 62
    634c:	31 96       	adiw	r30, 0x01	; 1
    634e:	8e 01       	movw	r16, r28
    6350:	0c 5f       	subi	r16, 0xFC	; 252
    6352:	1f 4f       	sbci	r17, 0xFF	; 255
    6354:	ad b7       	in	r26, 0x3d	; 61
    6356:	be b7       	in	r27, 0x3e	; 62
    6358:	12 96       	adiw	r26, 0x02	; 2
    635a:	1c 93       	st	X, r17
    635c:	0e 93       	st	-X, r16
    635e:	11 97       	sbiw	r26, 0x01	; 1
    6360:	86 e0       	ldi	r24, 0x06	; 6
    6362:	9a e1       	ldi	r25, 0x1A	; 26
    6364:	93 83       	std	Z+3, r25	; 0x03
    6366:	82 83       	std	Z+2, r24	; 0x02
    6368:	35 83       	std	Z+5, r19	; 0x05
    636a:	24 83       	std	Z+4, r18	; 0x04
    636c:	ce 01       	movw	r24, r28
    636e:	01 96       	adiw	r24, 0x01	; 1
    6370:	97 83       	std	Z+7, r25	; 0x07
    6372:	86 83       	std	Z+6, r24	; 0x06
    6374:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    6378:	dd 24       	eor	r13, r13
    637a:	ed b7       	in	r30, 0x3d	; 61
    637c:	fe b7       	in	r31, 0x3e	; 62
    637e:	38 96       	adiw	r30, 0x08	; 8
    6380:	0f b6       	in	r0, 0x3f	; 63
    6382:	f8 94       	cli
    6384:	fe bf       	out	0x3e, r31	; 62
    6386:	0f be       	out	0x3f, r0	; 63
    6388:	ed bf       	out	0x3d, r30	; 61
     for(i=0;i<strlen(sGCode);i++){
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    638a:	48 01       	movw	r8, r16
    638c:	13 c0       	rjmp	.+38     	; 0x63b4 <GenerateKeyStamp+0xe0>
    638e:	f4 01       	movw	r30, r8
    6390:	e0 0f       	add	r30, r16
    6392:	f1 1f       	adc	r31, r17
    6394:	60 81       	ld	r22, Z
    6396:	60 53       	subi	r22, 0x30	; 48
    6398:	f7 01       	movw	r30, r14
    639a:	e0 0f       	add	r30, r16
    639c:	f1 1f       	adc	r31, r17
    639e:	40 81       	ld	r20, Z
    63a0:	40 53       	subi	r20, 0x30	; 48
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <GeniusCalc>
    63a8:	0a 0d       	add	r16, r10
    63aa:	1b 1d       	adc	r17, r11
    63ac:	80 5d       	subi	r24, 0xD0	; 208
    63ae:	d8 01       	movw	r26, r16
    63b0:	8c 93       	st	X, r24
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    63b2:	d3 94       	inc	r13
    63b4:	0d 2d       	mov	r16, r13
    63b6:	10 e0       	ldi	r17, 0x00	; 0
    63b8:	d7 01       	movw	r26, r14
    63ba:	0d 90       	ld	r0, X+
    63bc:	00 20       	and	r0, r0
    63be:	e9 f7       	brne	.-6      	; 0x63ba <GenerateKeyStamp+0xe6>
    63c0:	11 97       	sbiw	r26, 0x01	; 1
    63c2:	ae 19       	sub	r26, r14
    63c4:	bf 09       	sbc	r27, r15
    63c6:	0a 17       	cp	r16, r26
    63c8:	1b 07       	cpc	r17, r27
    63ca:	08 f3       	brcs	.-62     	; 0x638e <GenerateKeyStamp+0xba>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
    63cc:	aa 0d       	add	r26, r10
    63ce:	bb 1d       	adc	r27, r11
    63d0:	1c 92       	st	X, r1
     WrapCode(strKeyStamp);
    63d2:	c5 01       	movw	r24, r10
    63d4:	0e 94 00 31 	call	0x6200	; 0x6200 <WrapCode>
}
    63d8:	2d 96       	adiw	r28, 0x0d	; 13
    63da:	0f b6       	in	r0, 0x3f	; 63
    63dc:	f8 94       	cli
    63de:	de bf       	out	0x3e, r29	; 62
    63e0:	0f be       	out	0x3f, r0	; 63
    63e2:	cd bf       	out	0x3d, r28	; 61
    63e4:	cf 91       	pop	r28
    63e6:	df 91       	pop	r29
    63e8:	1f 91       	pop	r17
    63ea:	0f 91       	pop	r16
    63ec:	ff 90       	pop	r15
    63ee:	ef 90       	pop	r14
    63f0:	df 90       	pop	r13
    63f2:	bf 90       	pop	r11
    63f4:	af 90       	pop	r10
    63f6:	9f 90       	pop	r9
    63f8:	8f 90       	pop	r8
    63fa:	08 95       	ret

000063fc <GenerateGeniusCode>:
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
}

void GenerateGeniusCode(char *srcDate, char cSeed, char *strDestCode){
    63fc:	af 92       	push	r10
    63fe:	bf 92       	push	r11
    6400:	cf 92       	push	r12
    6402:	df 92       	push	r13
    6404:	ef 92       	push	r14
    6406:	ff 92       	push	r15
    6408:	0f 93       	push	r16
    640a:	1f 93       	push	r17
    640c:	df 93       	push	r29
    640e:	cf 93       	push	r28
    6410:	cd b7       	in	r28, 0x3d	; 61
    6412:	de b7       	in	r29, 0x3e	; 62
    6414:	28 97       	sbiw	r28, 0x08	; 8
    6416:	0f b6       	in	r0, 0x3f	; 63
    6418:	f8 94       	cli
    641a:	de bf       	out	0x3e, r29	; 62
    641c:	0f be       	out	0x3f, r0	; 63
    641e:	cd bf       	out	0x3d, r28	; 61
    6420:	6c 01       	movw	r12, r24
    6422:	f6 2e       	mov	r15, r22
    6424:	5a 01       	movw	r10, r20
	    sprintf_P(strSend,PSTR("Date[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif
    

	 StrPosCopy(srcDate,AddYear,strlen(srcDate)-2,2);
    6426:	fc 01       	movw	r30, r24
    6428:	01 90       	ld	r0, Z+
    642a:	00 20       	and	r0, r0
    642c:	e9 f7       	brne	.-6      	; 0x6428 <GenerateGeniusCode+0x2c>
    642e:	e8 1b       	sub	r30, r24
    6430:	f9 0b       	sbc	r31, r25
    6432:	33 97       	sbiw	r30, 0x03	; 3
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    6434:	e8 0f       	add	r30, r24
    6436:	f9 1f       	adc	r31, r25
    6438:	80 81       	ld	r24, Z
    643a:	89 83       	std	Y+1, r24	; 0x01
    643c:	81 81       	ldd	r24, Z+1	; 0x01
    643e:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    6440:	1b 82       	std	Y+3, r1	; 0x03
    #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("Year:[%s]"),AddYear);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(SYear,PSTR("20%s"),AddYear);
    6442:	00 d0       	rcall	.+0      	; 0x6444 <GenerateGeniusCode+0x48>
    6444:	00 d0       	rcall	.+0      	; 0x6446 <GenerateGeniusCode+0x4a>
    6446:	00 d0       	rcall	.+0      	; 0x6448 <GenerateGeniusCode+0x4c>
    6448:	ed b7       	in	r30, 0x3d	; 61
    644a:	fe b7       	in	r31, 0x3e	; 62
    644c:	31 96       	adiw	r30, 0x01	; 1
    644e:	8e 01       	movw	r16, r28
    6450:	0c 5f       	subi	r16, 0xFC	; 252
    6452:	1f 4f       	sbci	r17, 0xFF	; 255
    6454:	ad b7       	in	r26, 0x3d	; 61
    6456:	be b7       	in	r27, 0x3e	; 62
    6458:	12 96       	adiw	r26, 0x02	; 2
    645a:	1c 93       	st	X, r17
    645c:	0e 93       	st	-X, r16
    645e:	11 97       	sbiw	r26, 0x01	; 1
    6460:	81 e1       	ldi	r24, 0x11	; 17
    6462:	9a e1       	ldi	r25, 0x1A	; 26
    6464:	93 83       	std	Z+3, r25	; 0x03
    6466:	82 83       	std	Z+2, r24	; 0x02
    6468:	ce 01       	movw	r24, r28
    646a:	01 96       	adiw	r24, 0x01	; 1
    646c:	95 83       	std	Z+5, r25	; 0x05
    646e:	84 83       	std	Z+4, r24	; 0x04
    6470:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 StrPosPaste(SYear,srcDate,strlen(srcDate)-2,strlen(SYear));
    6474:	d6 01       	movw	r26, r12
    6476:	0d 90       	ld	r0, X+
    6478:	00 20       	and	r0, r0
    647a:	e9 f7       	brne	.-6      	; 0x6476 <GenerateGeniusCode+0x7a>
    647c:	ac 19       	sub	r26, r12
    647e:	bd 09       	sbc	r27, r13
    6480:	f8 01       	movw	r30, r16
    6482:	01 90       	ld	r0, Z+
    6484:	00 20       	and	r0, r0
    6486:	e9 f7       	brne	.-6      	; 0x6482 <GenerateGeniusCode+0x86>
    6488:	31 97       	sbiw	r30, 0x01	; 1
    648a:	e0 1b       	sub	r30, r16
    648c:	f1 0b       	sbc	r31, r17
    648e:	8d b7       	in	r24, 0x3d	; 61
    6490:	9e b7       	in	r25, 0x3e	; 62
    6492:	06 96       	adiw	r24, 0x06	; 6
    6494:	0f b6       	in	r0, 0x3f	; 63
    6496:	f8 94       	cli
    6498:	9e bf       	out	0x3e, r25	; 62
    649a:	0f be       	out	0x3f, r0	; 63
    649c:	8d bf       	out	0x3d, r24	; 61
    649e:	13 97       	sbiw	r26, 0x03	; 3
    64a0:	c8 01       	movw	r24, r16
    64a2:	b6 01       	movw	r22, r12
    64a4:	ad 01       	movw	r20, r26
    64a6:	9f 01       	movw	r18, r30
    64a8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <StrPosPaste>
	 #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("NewDate[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
    64ac:	00 d0       	rcall	.+0      	; 0x64ae <GenerateGeniusCode+0xb2>
    64ae:	00 d0       	rcall	.+0      	; 0x64b0 <GenerateGeniusCode+0xb4>
    64b0:	00 d0       	rcall	.+0      	; 0x64b2 <GenerateGeniusCode+0xb6>
    64b2:	ed b7       	in	r30, 0x3d	; 61
    64b4:	fe b7       	in	r31, 0x3e	; 62
    64b6:	31 96       	adiw	r30, 0x01	; 1
    64b8:	ad b7       	in	r26, 0x3d	; 61
    64ba:	be b7       	in	r27, 0x3e	; 62
    64bc:	12 96       	adiw	r26, 0x02	; 2
    64be:	bc 92       	st	X, r11
    64c0:	ae 92       	st	-X, r10
    64c2:	11 97       	sbiw	r26, 0x01	; 1
    64c4:	8e e0       	ldi	r24, 0x0E	; 14
    64c6:	9a e1       	ldi	r25, 0x1A	; 26
    64c8:	93 83       	std	Z+3, r25	; 0x03
    64ca:	82 83       	std	Z+2, r24	; 0x02
    64cc:	f4 82       	std	Z+4, r15	; 0x04
    64ce:	15 82       	std	Z+5, r1	; 0x05
    64d0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    64d4:	ee 24       	eor	r14, r14
    64d6:	e3 94       	inc	r14
    64d8:	ed b7       	in	r30, 0x3d	; 61
    64da:	fe b7       	in	r31, 0x3e	; 62
    64dc:	36 96       	adiw	r30, 0x06	; 6
    64de:	0f b6       	in	r0, 0x3f	; 63
    64e0:	f8 94       	cli
    64e2:	fe bf       	out	0x3e, r31	; 62
    64e4:	0f be       	out	0x3f, r0	; 63
    64e6:	ed bf       	out	0x3d, r30	; 61
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    64e8:	f0 ed       	ldi	r31, 0xD0	; 208
    64ea:	ff 0e       	add	r15, r31
    64ec:	0f c0       	rjmp	.+30     	; 0x650c <GenerateGeniusCode+0x110>
    64ee:	f6 01       	movw	r30, r12
    64f0:	e0 0f       	add	r30, r16
    64f2:	f1 1f       	adc	r31, r17
    64f4:	40 81       	ld	r20, Z
    64f6:	40 53       	subi	r20, 0x30	; 48
    64f8:	80 e0       	ldi	r24, 0x00	; 0
    64fa:	6f 2d       	mov	r22, r15
    64fc:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <GeniusCalc>
    6500:	0a 0d       	add	r16, r10
    6502:	1b 1d       	adc	r17, r11
    6504:	80 5d       	subi	r24, 0xD0	; 208
    6506:	d8 01       	movw	r26, r16
    6508:	8c 93       	st	X, r24
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    650a:	e3 94       	inc	r14
    650c:	0e 2d       	mov	r16, r14
    650e:	10 e0       	ldi	r17, 0x00	; 0
    6510:	d6 01       	movw	r26, r12
    6512:	0d 90       	ld	r0, X+
    6514:	00 20       	and	r0, r0
    6516:	e9 f7       	brne	.-6      	; 0x6512 <GenerateGeniusCode+0x116>
    6518:	11 97       	sbiw	r26, 0x01	; 1
    651a:	ac 19       	sub	r26, r12
    651c:	bd 09       	sbc	r27, r13
    651e:	0a 17       	cp	r16, r26
    6520:	1b 07       	cpc	r17, r27
    6522:	28 f3       	brcs	.-54     	; 0x64ee <GenerateGeniusCode+0xf2>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
	 }strDestCode[strlen(srcDate)]=0;
    6524:	aa 0d       	add	r26, r10
    6526:	bb 1d       	adc	r27, r11
    6528:	1c 92       	st	X, r1
	 #ifdef DEBUG_GENIUS_CODE
       sprintf_P(strSend,PSTR("1st:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif

	 WrapCode(strDestCode);
    652a:	c5 01       	movw	r24, r10
    652c:	0e 94 00 31 	call	0x6200	; 0x6200 <WrapCode>
	 #ifdef DEBUG_GENIUS_CODE
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}
    6530:	28 96       	adiw	r28, 0x08	; 8
    6532:	0f b6       	in	r0, 0x3f	; 63
    6534:	f8 94       	cli
    6536:	de bf       	out	0x3e, r29	; 62
    6538:	0f be       	out	0x3f, r0	; 63
    653a:	cd bf       	out	0x3d, r28	; 61
    653c:	cf 91       	pop	r28
    653e:	df 91       	pop	r29
    6540:	1f 91       	pop	r17
    6542:	0f 91       	pop	r16
    6544:	ff 90       	pop	r15
    6546:	ef 90       	pop	r14
    6548:	df 90       	pop	r13
    654a:	cf 90       	pop	r12
    654c:	bf 90       	pop	r11
    654e:	af 90       	pop	r10
    6550:	08 95       	ret

00006552 <GeneratePrintInit>:





void GeneratePrintInit(){//Create Initialize Print 
    6552:	cf 92       	push	r12
    6554:	df 92       	push	r13
    6556:	ef 92       	push	r14
    6558:	ff 92       	push	r15
    655a:	0f 93       	push	r16
    655c:	1f 93       	push	r17
    655e:	df 93       	push	r29
    6560:	cf 93       	push	r28
    6562:	cd b7       	in	r28, 0x3d	; 61
    6564:	de b7       	in	r29, 0x3e	; 62
    6566:	62 97       	sbiw	r28, 0x12	; 18
    6568:	0f b6       	in	r0, 0x3f	; 63
    656a:	f8 94       	cli
    656c:	de bf       	out	0x3e, r29	; 62
    656e:	0f be       	out	0x3f, r0	; 63
    6570:	cd bf       	out	0x3d, r28	; 61
     char strVernum[6],strVerdate[12];
	 sprintf_P(strVernum,PSTR(VERSION_NUM));
    6572:	00 d0       	rcall	.+0      	; 0x6574 <GeneratePrintInit+0x22>
    6574:	00 d0       	rcall	.+0      	; 0x6576 <GeneratePrintInit+0x24>
    6576:	6e 01       	movw	r12, r28
    6578:	08 94       	sec
    657a:	c1 1c       	adc	r12, r1
    657c:	d1 1c       	adc	r13, r1
    657e:	ad b7       	in	r26, 0x3d	; 61
    6580:	be b7       	in	r27, 0x3e	; 62
    6582:	12 96       	adiw	r26, 0x02	; 2
    6584:	dc 92       	st	X, r13
    6586:	ce 92       	st	-X, r12
    6588:	11 97       	sbiw	r26, 0x01	; 1
    658a:	80 ea       	ldi	r24, 0xA0	; 160
    658c:	9f e1       	ldi	r25, 0x1F	; 31
    658e:	14 96       	adiw	r26, 0x04	; 4
    6590:	9c 93       	st	X, r25
    6592:	8e 93       	st	-X, r24
    6594:	13 97       	sbiw	r26, 0x03	; 3
    6596:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 sprintf_P(strVerdate,PSTR(VERSION_DATE));
    659a:	67 e0       	ldi	r22, 0x07	; 7
    659c:	e6 2e       	mov	r14, r22
    659e:	f1 2c       	mov	r15, r1
    65a0:	ec 0e       	add	r14, r28
    65a2:	fd 1e       	adc	r15, r29
    65a4:	ed b7       	in	r30, 0x3d	; 61
    65a6:	fe b7       	in	r31, 0x3e	; 62
    65a8:	f2 82       	std	Z+2, r15	; 0x02
    65aa:	e1 82       	std	Z+1, r14	; 0x01
    65ac:	85 e9       	ldi	r24, 0x95	; 149
    65ae:	9f e1       	ldi	r25, 0x1F	; 31
    65b0:	94 83       	std	Z+4, r25	; 0x04
    65b2:	83 83       	std	Z+3, r24	; 0x03
    65b4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
     sprintf_P(PrintBuffer,PSTR("\nGeNiUs Ticket Printer \n Version:%s\n Last Update %s \n Hanindo Automation Solutions \n www.hanindogroup.com\n\n\n\n\n\n\n\n"),strVernum,strVerdate);
    65b8:	00 d0       	rcall	.+0      	; 0x65ba <GeneratePrintInit+0x68>
    65ba:	00 d0       	rcall	.+0      	; 0x65bc <GeneratePrintInit+0x6a>
    65bc:	ed b7       	in	r30, 0x3d	; 61
    65be:	fe b7       	in	r31, 0x3e	; 62
    65c0:	31 96       	adiw	r30, 0x01	; 1
    65c2:	02 ef       	ldi	r16, 0xF2	; 242
    65c4:	13 e0       	ldi	r17, 0x03	; 3
    65c6:	ad b7       	in	r26, 0x3d	; 61
    65c8:	be b7       	in	r27, 0x3e	; 62
    65ca:	12 96       	adiw	r26, 0x02	; 2
    65cc:	1c 93       	st	X, r17
    65ce:	0e 93       	st	-X, r16
    65d0:	11 97       	sbiw	r26, 0x01	; 1
    65d2:	83 e2       	ldi	r24, 0x23	; 35
    65d4:	9f e1       	ldi	r25, 0x1F	; 31
    65d6:	93 83       	std	Z+3, r25	; 0x03
    65d8:	82 83       	std	Z+2, r24	; 0x02
    65da:	d5 82       	std	Z+5, r13	; 0x05
    65dc:	c4 82       	std	Z+4, r12	; 0x04
    65de:	f7 82       	std	Z+7, r15	; 0x07
    65e0:	e6 82       	std	Z+6, r14	; 0x06
    65e2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(0,1,PrintBuffer);
    65e6:	ed b7       	in	r30, 0x3d	; 61
    65e8:	fe b7       	in	r31, 0x3e	; 62
    65ea:	38 96       	adiw	r30, 0x08	; 8
    65ec:	0f b6       	in	r0, 0x3f	; 63
    65ee:	f8 94       	cli
    65f0:	fe bf       	out	0x3e, r31	; 62
    65f2:	0f be       	out	0x3f, r0	; 63
    65f4:	ed bf       	out	0x3d, r30	; 61
    65f6:	80 e0       	ldi	r24, 0x00	; 0
    65f8:	61 e0       	ldi	r22, 0x01	; 1
    65fa:	a8 01       	movw	r20, r16
    65fc:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
	 LengthMessage81=strlen(PrintBuffer);
    6600:	f8 01       	movw	r30, r16
    6602:	01 90       	ld	r0, Z+
    6604:	00 20       	and	r0, r0
    6606:	e9 f7       	brne	.-6      	; 0x6602 <GeneratePrintInit+0xb0>
    6608:	31 97       	sbiw	r30, 0x01	; 1
    660a:	e0 1b       	sub	r30, r16
    660c:	f1 0b       	sbc	r31, r17
    660e:	f0 93 8e 01 	sts	0x018E, r31
    6612:	e0 93 8d 01 	sts	0x018D, r30
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    6616:	80 e3       	ldi	r24, 0x30	; 48
    6618:	80 93 b7 01 	sts	0x01B7, r24
	 IsFreePrinting=True;
    661c:	81 e0       	ldi	r24, 0x01	; 1
    661e:	80 93 aa 01 	sts	0x01AA, r24
}
    6622:	62 96       	adiw	r28, 0x12	; 18
    6624:	0f b6       	in	r0, 0x3f	; 63
    6626:	f8 94       	cli
    6628:	de bf       	out	0x3e, r29	; 62
    662a:	0f be       	out	0x3f, r0	; 63
    662c:	cd bf       	out	0x3d, r28	; 61
    662e:	cf 91       	pop	r28
    6630:	df 91       	pop	r29
    6632:	1f 91       	pop	r17
    6634:	0f 91       	pop	r16
    6636:	ff 90       	pop	r15
    6638:	ef 90       	pop	r14
    663a:	df 90       	pop	r13
    663c:	cf 90       	pop	r12
    663e:	08 95       	ret

00006640 <FormatCurrency>:
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}


void FormatCurrency(char *strCurrency){// 5000000.00 5,000,000.00
    6640:	9f 92       	push	r9
    6642:	af 92       	push	r10
    6644:	bf 92       	push	r11
    6646:	cf 92       	push	r12
    6648:	df 92       	push	r13
    664a:	ef 92       	push	r14
    664c:	ff 92       	push	r15
    664e:	0f 93       	push	r16
    6650:	1f 93       	push	r17
    6652:	df 93       	push	r29
    6654:	cf 93       	push	r28
    6656:	cd b7       	in	r28, 0x3d	; 61
    6658:	de b7       	in	r29, 0x3e	; 62
    665a:	64 97       	sbiw	r28, 0x14	; 20
    665c:	0f b6       	in	r0, 0x3f	; 63
    665e:	f8 94       	cli
    6660:	de bf       	out	0x3e, r29	; 62
    6662:	0f be       	out	0x3f, r0	; 63
    6664:	cd bf       	out	0x3d, r28	; 61
    6666:	6c 01       	movw	r12, r24
     char i,dotPos=0,iPos=0,Length=0,nComa=0;//cPos=0,;
	 char fmtCurrency[20];
	 char CurrencyMark,DecimalMark;

	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
    6668:	84 e4       	ldi	r24, 0x44	; 68
    666a:	90 e0       	ldi	r25, 0x00	; 0
    666c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    6670:	98 2e       	mov	r9, r24
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);
    6672:	83 e4       	ldi	r24, 0x43	; 67
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>

	 Length=strlen(strCurrency);//123,456
    667a:	f6 01       	movw	r30, r12
    667c:	01 90       	ld	r0, Z+
    667e:	00 20       	and	r0, r0
    6680:	e9 f7       	brne	.-6      	; 0x667c <FormatCurrency+0x3c>
    6682:	31 97       	sbiw	r30, 0x01	; 1
    6684:	ee 2e       	mov	r14, r30
    6686:	ec 18       	sub	r14, r12
    6688:	fe 01       	movw	r30, r28
    668a:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    668c:	9e 01       	movw	r18, r28
    668e:	2b 5e       	subi	r18, 0xEB	; 235
    6690:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    6692:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6694:	e2 17       	cp	r30, r18
    6696:	f3 07       	cpc	r31, r19
    6698:	e1 f7       	brne	.-8      	; 0x6692 <FormatCurrency+0x52>
    669a:	f6 01       	movw	r30, r12
    669c:	fe 2c       	mov	r15, r14
    669e:	30 e0       	ldi	r19, 0x00	; 0
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	09 c0       	rjmp	.+18     	; 0x66b6 <FormatCurrency+0x76>
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
    66a4:	20 81       	ld	r18, Z
    66a6:	28 17       	cp	r18, r24
    66a8:	09 f4       	brne	.+2      	; 0x66ac <FormatCurrency+0x6c>
    66aa:	f9 2e       	mov	r15, r25
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
    66ac:	29 15       	cp	r18, r9
    66ae:	09 f4       	brne	.+2      	; 0x66b2 <FormatCurrency+0x72>
    66b0:	3f 5f       	subi	r19, 0xFF	; 255
	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    66b2:	9f 5f       	subi	r25, 0xFF	; 255
    66b4:	31 96       	adiw	r30, 0x01	; 1
    66b6:	9e 15       	cp	r25, r14
    66b8:	a8 f3       	brcs	.-22     	; 0x66a4 <FormatCurrency+0x64>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
    66ba:	33 23       	and	r19, r19
    66bc:	09 f0       	breq	.+2      	; 0x66c0 <FormatCurrency+0x80>
    66be:	5e c0       	rjmp	.+188    	; 0x677c <FormatCurrency+0x13c>
    66c0:	83 e0       	ldi	r24, 0x03	; 3
    66c2:	8f 15       	cp	r24, r15
    66c4:	08 f0       	brcs	.+2      	; 0x66c8 <FormatCurrency+0x88>
    66c6:	5a c0       	rjmp	.+180    	; 0x677c <FormatCurrency+0x13c>
    66c8:	40 e0       	ldi	r20, 0x00	; 0
    66ca:	20 e0       	ldi	r18, 0x00	; 0
    66cc:	30 e0       	ldi	r19, 0x00	; 0
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    66ce:	af 2c       	mov	r10, r15
    66d0:	bb 24       	eor	r11, r11
		        fmtCurrency[iPos]=CurrencyMark;
    66d2:	8e 01       	movw	r16, r28
    66d4:	0f 5f       	subi	r16, 0xFF	; 255
    66d6:	1f 4f       	sbci	r17, 0xFF	; 255
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    66d8:	c5 01       	movw	r24, r10
    66da:	82 1b       	sub	r24, r18
    66dc:	93 0b       	sbc	r25, r19
    66de:	63 e0       	ldi	r22, 0x03	; 3
    66e0:	70 e0       	ldi	r23, 0x00	; 0
    66e2:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    66e6:	89 2b       	or	r24, r25
    66e8:	49 f4       	brne	.+18     	; 0x66fc <FormatCurrency+0xbc>
    66ea:	2f 15       	cp	r18, r15
    66ec:	38 f4       	brcc	.+14     	; 0x66fc <FormatCurrency+0xbc>
    66ee:	22 23       	and	r18, r18
    66f0:	29 f0       	breq	.+10     	; 0x66fc <FormatCurrency+0xbc>
		        fmtCurrency[iPos]=CurrencyMark;
    66f2:	f8 01       	movw	r30, r16
    66f4:	e4 0f       	add	r30, r20
    66f6:	f1 1d       	adc	r31, r1
    66f8:	90 82       	st	Z, r9
		        iPos++;
    66fa:	4f 5f       	subi	r20, 0xFF	; 255
		        }
		        fmtCurrency[iPos]=strCurrency[i];
    66fc:	d8 01       	movw	r26, r16
    66fe:	a4 0f       	add	r26, r20
    6700:	b1 1d       	adc	r27, r1
    6702:	f6 01       	movw	r30, r12
    6704:	e2 0f       	add	r30, r18
    6706:	f3 1f       	adc	r31, r19
    6708:	80 81       	ld	r24, Z
    670a:	8c 93       	st	X, r24
			    iPos++;
    670c:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    670e:	f8 01       	movw	r30, r16
    6710:	e4 0f       	add	r30, r20
    6712:	f1 1d       	adc	r31, r1
    6714:	10 82       	st	Z, r1
    6716:	2f 5f       	subi	r18, 0xFF	; 255
    6718:	3f 4f       	sbci	r19, 0xFF	; 255
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
    671a:	2f 15       	cp	r18, r15
    671c:	e8 f2       	brcs	.-70     	; 0x66d8 <FormatCurrency+0x98>
    671e:	9f 2d       	mov	r25, r15
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
    6720:	9e 01       	movw	r18, r28
    6722:	2f 5f       	subi	r18, 0xFF	; 255
    6724:	3f 4f       	sbci	r19, 0xFF	; 255
    6726:	0e c0       	rjmp	.+28     	; 0x6744 <FormatCurrency+0x104>
    6728:	d9 01       	movw	r26, r18
    672a:	a4 0f       	add	r26, r20
    672c:	b1 1d       	adc	r27, r1
    672e:	f6 01       	movw	r30, r12
    6730:	e9 0f       	add	r30, r25
    6732:	f1 1d       	adc	r31, r1
    6734:	80 81       	ld	r24, Z
    6736:	8c 93       	st	X, r24
			    iPos++;
    6738:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    673a:	f9 01       	movw	r30, r18
    673c:	e4 0f       	add	r30, r20
    673e:	f1 1d       	adc	r31, r1
    6740:	10 82       	st	Z, r1
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
    6742:	9f 5f       	subi	r25, 0xFF	; 255
    6744:	9e 15       	cp	r25, r14
    6746:	80 f3       	brcs	.-32     	; 0x6728 <FormatCurrency+0xe8>
    6748:	90 e0       	ldi	r25, 0x00	; 0
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    674a:	9e 01       	movw	r18, r28
    674c:	2f 5f       	subi	r18, 0xFF	; 255
    674e:	3f 4f       	sbci	r19, 0xFF	; 255
    6750:	09 c0       	rjmp	.+18     	; 0x6764 <FormatCurrency+0x124>
	          strCurrency[i]=fmtCurrency[i];
    6752:	f6 01       	movw	r30, r12
    6754:	ea 0f       	add	r30, r26
    6756:	fb 1f       	adc	r31, r27
    6758:	a2 0f       	add	r26, r18
    675a:	b3 1f       	adc	r27, r19
    675c:	8c 91       	ld	r24, X
    675e:	80 83       	st	Z, r24
			  strCurrency[i+1]=0;
    6760:	11 82       	std	Z+1, r1	; 0x01
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    6762:	9f 5f       	subi	r25, 0xFF	; 255
    6764:	a9 2f       	mov	r26, r25
    6766:	b0 e0       	ldi	r27, 0x00	; 0
    6768:	f9 01       	movw	r30, r18
    676a:	01 90       	ld	r0, Z+
    676c:	00 20       	and	r0, r0
    676e:	e9 f7       	brne	.-6      	; 0x676a <FormatCurrency+0x12a>
    6770:	31 97       	sbiw	r30, 0x01	; 1
    6772:	e2 1b       	sub	r30, r18
    6774:	f3 0b       	sbc	r31, r19
    6776:	ae 17       	cp	r26, r30
    6778:	bf 07       	cpc	r27, r31
    677a:	58 f3       	brcs	.-42     	; 0x6752 <FormatCurrency+0x112>
	          strCurrency[i]=fmtCurrency[i];
			  strCurrency[i+1]=0;
	      }
     }      
}
    677c:	64 96       	adiw	r28, 0x14	; 20
    677e:	0f b6       	in	r0, 0x3f	; 63
    6780:	f8 94       	cli
    6782:	de bf       	out	0x3e, r29	; 62
    6784:	0f be       	out	0x3f, r0	; 63
    6786:	cd bf       	out	0x3d, r28	; 61
    6788:	cf 91       	pop	r28
    678a:	df 91       	pop	r29
    678c:	1f 91       	pop	r17
    678e:	0f 91       	pop	r16
    6790:	ff 90       	pop	r15
    6792:	ef 90       	pop	r14
    6794:	df 90       	pop	r13
    6796:	cf 90       	pop	r12
    6798:	bf 90       	pop	r11
    679a:	af 90       	pop	r10
    679c:	9f 90       	pop	r9
    679e:	08 95       	ret

000067a0 <FormatDecimal>:

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    67a0:	ef 92       	push	r14
    67a2:	ff 92       	push	r15
    67a4:	0f 93       	push	r16
    67a6:	1f 93       	push	r17
    67a8:	df 93       	push	r29
    67aa:	cf 93       	push	r28
    67ac:	cd b7       	in	r28, 0x3d	; 61
    67ae:	de b7       	in	r29, 0x3e	; 62
    67b0:	64 97       	sbiw	r28, 0x14	; 20
    67b2:	0f b6       	in	r0, 0x3f	; 63
    67b4:	f8 94       	cli
    67b6:	de bf       	out	0x3e, r29	; 62
    67b8:	0f be       	out	0x3f, r0	; 63
    67ba:	cd bf       	out	0x3d, r28	; 61
    67bc:	8c 01       	movw	r16, r24
    67be:	f6 2e       	mov	r15, r22
     char i,iPos,CommaPos,Length=0;                 //1->0,01 
	 char strDecimalFormated[20];
	 char DecPointMark;
     if (DecimalCfg>0){    
    67c0:	66 23       	and	r22, r22
    67c2:	09 f4       	brne	.+2      	; 0x67c6 <FormatDecimal+0x26>
    67c4:	55 c0       	rjmp	.+170    	; 0x6870 <FormatDecimal+0xd0>
		 DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    67c6:	83 e4       	ldi	r24, 0x43	; 67
    67c8:	90 e0       	ldi	r25, 0x00	; 0
    67ca:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    67ce:	e8 2e       	mov	r14, r24
		 Length=strlen(strRawData);
    67d0:	f8 01       	movw	r30, r16
    67d2:	01 90       	ld	r0, Z+
    67d4:	00 20       	and	r0, r0
    67d6:	e9 f7       	brne	.-6      	; 0x67d2 <FormatDecimal+0x32>
    67d8:	31 97       	sbiw	r30, 0x01	; 1
    67da:	3e 2f       	mov	r19, r30
    67dc:	30 1b       	sub	r19, r16

		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
    67de:	f3 16       	cp	r15, r19
    67e0:	c0 f5       	brcc	.+112    	; 0x6852 <FormatDecimal+0xb2>
    67e2:	83 2f       	mov	r24, r19
    67e4:	8f 19       	sub	r24, r15
    67e6:	f8 2e       	mov	r15, r24
    67e8:	b8 01       	movw	r22, r16
    67ea:	d8 01       	movw	r26, r16
    67ec:	20 e0       	ldi	r18, 0x00	; 0
    67ee:	90 e0       	ldi	r25, 0x00	; 0

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
				 strDecimalFormated[iPos]=DecPointMark;
    67f0:	ae 01       	movw	r20, r28
    67f2:	4f 5f       	subi	r20, 0xFF	; 255
    67f4:	5f 4f       	sbci	r21, 0xFF	; 255
    67f6:	0e c0       	rjmp	.+28     	; 0x6814 <FormatDecimal+0x74>
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
    67f8:	2f 15       	cp	r18, r15
    67fa:	29 f4       	brne	.+10     	; 0x6806 <FormatDecimal+0x66>
				 strDecimalFormated[iPos]=DecPointMark;
    67fc:	fa 01       	movw	r30, r20
    67fe:	e9 0f       	add	r30, r25
    6800:	f1 1d       	adc	r31, r1
    6802:	e0 82       	st	Z, r14
				 iPos++;
    6804:	9f 5f       	subi	r25, 0xFF	; 255
			}
			strDecimalFormated[iPos]=strRawData[i];
    6806:	fa 01       	movw	r30, r20
    6808:	e9 0f       	add	r30, r25
    680a:	f1 1d       	adc	r31, r1
    680c:	8d 91       	ld	r24, X+
    680e:	80 83       	st	Z, r24
			//strDecimalFormated[iPos+1]=0;
			iPos++;
    6810:	9f 5f       	subi	r25, 0xFF	; 255
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    6812:	2f 5f       	subi	r18, 0xFF	; 255
    6814:	23 17       	cp	r18, r19
    6816:	80 f3       	brcs	.-32     	; 0x67f8 <FormatDecimal+0x58>
				 iPos++;
			}
			strDecimalFormated[iPos]=strRawData[i];
			//strDecimalFormated[iPos+1]=0;
			iPos++;
		 }strDecimalFormated[iPos]=0;
    6818:	9e 01       	movw	r18, r28
    681a:	2f 5f       	subi	r18, 0xFF	; 255
    681c:	3f 4f       	sbci	r19, 0xFF	; 255
    681e:	f9 01       	movw	r30, r18
    6820:	e9 0f       	add	r30, r25
    6822:	f1 1d       	adc	r31, r1
    6824:	10 82       	st	Z, r1
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
    6826:	f9 01       	movw	r30, r18
    6828:	01 90       	ld	r0, Z+
    682a:	00 20       	and	r0, r0
    682c:	e9 f7       	brne	.-6      	; 0x6828 <FormatDecimal+0x88>
    682e:	31 97       	sbiw	r30, 0x01	; 1
    6830:	9e 2f       	mov	r25, r30
    6832:	92 1b       	sub	r25, r18
    6834:	d9 01       	movw	r26, r18
    6836:	04 c0       	rjmp	.+8      	; 0x6840 <FormatDecimal+0xa0>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
    6838:	8d 91       	ld	r24, X+
    683a:	fb 01       	movw	r30, r22
    683c:	81 93       	st	Z+, r24
    683e:	bf 01       	movw	r22, r30
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    6840:	8a 2f       	mov	r24, r26
    6842:	82 1b       	sub	r24, r18
    6844:	89 17       	cp	r24, r25
    6846:	c0 f3       	brcs	.-16     	; 0x6838 <FormatDecimal+0x98>
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
    6848:	09 0f       	add	r16, r25
    684a:	11 1d       	adc	r17, r1
    684c:	f8 01       	movw	r30, r16
    684e:	10 82       	st	Z, r1
    6850:	0f c0       	rjmp	.+30     	; 0x6870 <FormatDecimal+0xd0>
		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
		 else CommaPos=1;


		 if (Length<=DecimalCfg){// 123 -> 0123
			 AddZeroLead(strRawData,(DecimalCfg+1));
    6852:	f3 94       	inc	r15
    6854:	c8 01       	movw	r24, r16
    6856:	6f 2d       	mov	r22, r15
    6858:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <AddZeroLead>
			 //AddZeroLead(strRawData,(DecimalCfg+2));
			 Length=strlen(strRawData);
    685c:	f8 01       	movw	r30, r16
    685e:	01 90       	ld	r0, Z+
    6860:	00 20       	and	r0, r0
    6862:	e9 f7       	brne	.-6      	; 0x685e <FormatDecimal+0xbe>
    6864:	31 97       	sbiw	r30, 0x01	; 1
    6866:	3e 2f       	mov	r19, r30
    6868:	30 1b       	sub	r19, r16
    686a:	ff 24       	eor	r15, r15
    686c:	f3 94       	inc	r15
    686e:	bc cf       	rjmp	.-136    	; 0x67e8 <FormatDecimal+0x48>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}
    6870:	64 96       	adiw	r28, 0x14	; 20
    6872:	0f b6       	in	r0, 0x3f	; 63
    6874:	f8 94       	cli
    6876:	de bf       	out	0x3e, r29	; 62
    6878:	0f be       	out	0x3f, r0	; 63
    687a:	cd bf       	out	0x3d, r28	; 61
    687c:	cf 91       	pop	r28
    687e:	df 91       	pop	r29
    6880:	1f 91       	pop	r17
    6882:	0f 91       	pop	r16
    6884:	ff 90       	pop	r15
    6886:	ef 90       	pop	r14
    6888:	08 95       	ret

0000688a <NormalizeDecimal>:
	 Result=(SigmaSum%255);
	 if (Result==0)Result=255;
   return Result;
}

void NormalizeDecimal(char CurrentDecimal, char NewDecimal, char *Result){// 01234567,89
    688a:	68 2f       	mov	r22, r24
    688c:	ca 01       	movw	r24, r20
		 StrPosCopy(Result,SResult,DeltaDec,Length-DeltaDec);
		 	           
	 
     }
*/
     FormatDecimal(Result,CurrentDecimal);
    688e:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <FormatDecimal>
}
    6892:	08 95       	ret

00006894 <FormatTotalizerVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatTotalizerVolume(char *strRawVolume){//96->0,96 
    6894:	0f 93       	push	r16
    6896:	1f 93       	push	r17
    6898:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
    689a:	81 e4       	ldi	r24, 0x41	; 65
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    68a2:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    68a4:	c8 01       	movw	r24, r16
    68a6:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <FormatDecimal>
}
    68aa:	1f 91       	pop	r17
    68ac:	0f 91       	pop	r16
    68ae:	08 95       	ret

000068b0 <FormatTotalizerMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}

void FormatTotalizerMoney(char *strRawMoney){
    68b0:	0f 93       	push	r16
    68b2:	1f 93       	push	r17
    68b4:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
    68b6:	82 e4       	ldi	r24, 0x42	; 66
    68b8:	90 e0       	ldi	r25, 0x00	; 0
    68ba:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    68be:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    68c0:	c8 01       	movw	r24, r16
    68c2:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <FormatDecimal>
}
    68c6:	1f 91       	pop	r17
    68c8:	0f 91       	pop	r16
    68ca:	08 95       	ret

000068cc <FormatVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatVolume(char *strRawVolume){//96->0,96 
    68cc:	0f 93       	push	r16
    68ce:	1f 93       	push	r17
    68d0:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
    68d2:	8e e3       	ldi	r24, 0x3E	; 62
    68d4:	90 e0       	ldi	r25, 0x00	; 0
    68d6:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    68da:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    68dc:	c8 01       	movw	r24, r16
    68de:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <FormatDecimal>
}
    68e2:	1f 91       	pop	r17
    68e4:	0f 91       	pop	r16
    68e6:	08 95       	ret

000068e8 <FormatMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
	 FormatDecimal(strRawPrice,DecCfg);
}

void FormatMoney(char *strRawMoney){
    68e8:	0f 93       	push	r16
    68ea:	1f 93       	push	r17
    68ec:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
    68ee:	8f e3       	ldi	r24, 0x3F	; 63
    68f0:	90 e0       	ldi	r25, 0x00	; 0
    68f2:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    68f6:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    68f8:	c8 01       	movw	r24, r16
    68fa:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <FormatDecimal>
}
    68fe:	1f 91       	pop	r17
    6900:	0f 91       	pop	r16
    6902:	08 95       	ret

00006904 <FormatPrice>:
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}

void FormatPrice(char *strRawPrice){
    6904:	0f 93       	push	r16
    6906:	1f 93       	push	r17
    6908:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
    690a:	8d e3       	ldi	r24, 0x3D	; 61
    690c:	90 e0       	ldi	r25, 0x00	; 0
    690e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    6912:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawPrice,DecCfg);
    6914:	c8 01       	movw	r24, r16
    6916:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <FormatDecimal>
}
    691a:	1f 91       	pop	r17
    691c:	0f 91       	pop	r16
    691e:	08 95       	ret

00006920 <systemGenerateReport>:
	 }
}

//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
//			cmdPrint=procMessage81();
void systemGenerateReport(){
    6920:	2f 92       	push	r2
    6922:	3f 92       	push	r3
    6924:	4f 92       	push	r4
    6926:	5f 92       	push	r5
    6928:	6f 92       	push	r6
    692a:	7f 92       	push	r7
    692c:	8f 92       	push	r8
    692e:	9f 92       	push	r9
    6930:	af 92       	push	r10
    6932:	bf 92       	push	r11
    6934:	cf 92       	push	r12
    6936:	df 92       	push	r13
    6938:	ef 92       	push	r14
    693a:	ff 92       	push	r15
    693c:	0f 93       	push	r16
    693e:	1f 93       	push	r17
    6940:	df 93       	push	r29
    6942:	cf 93       	push	r28
    6944:	cd b7       	in	r28, 0x3d	; 61
    6946:	de b7       	in	r29, 0x3e	; 62
    6948:	cb 5f       	subi	r28, 0xFB	; 251
    694a:	d0 40       	sbci	r29, 0x00	; 0
    694c:	0f b6       	in	r0, 0x3f	; 63
    694e:	f8 94       	cli
    6950:	de bf       	out	0x3e, r29	; 62
    6952:	0f be       	out	0x3f, r0	; 63
    6954:	cd bf       	out	0x3d, r28	; 61
	   char strTabSpace[20],strTabSpace2[20];
	   char iTotal;//,PadLength;
	   char sPrice[10],strProductPrice[20];
	   char FIPAddr;

     switch(stGenerateReport){
    6956:	10 91 ea 01 	lds	r17, 0x01EA
    695a:	16 30       	cpi	r17, 0x06	; 6
    695c:	09 f4       	brne	.+2      	; 0x6960 <systemGenerateReport+0x40>
    695e:	4d c2       	rjmp	.+1178   	; 0x6dfa <systemGenerateReport+0x4da>
    6960:	17 30       	cpi	r17, 0x07	; 7
    6962:	98 f4       	brcc	.+38     	; 0x698a <systemGenerateReport+0x6a>
    6964:	12 30       	cpi	r17, 0x02	; 2
    6966:	09 f4       	brne	.+2      	; 0x696a <systemGenerateReport+0x4a>
    6968:	a3 c0       	rjmp	.+326    	; 0x6ab0 <systemGenerateReport+0x190>
    696a:	13 30       	cpi	r17, 0x03	; 3
    696c:	38 f4       	brcc	.+14     	; 0x697c <systemGenerateReport+0x5c>
    696e:	11 23       	and	r17, r17
    6970:	31 f1       	breq	.+76     	; 0x69be <systemGenerateReport+0x9e>
    6972:	11 30       	cpi	r17, 0x01	; 1
    6974:	11 f0       	breq	.+4      	; 0x697a <systemGenerateReport+0x5a>
    6976:	0c 94 c7 3e 	jmp	0x7d8e	; 0x7d8e <systemGenerateReport+0x146e>
    697a:	2d c0       	rjmp	.+90     	; 0x69d6 <systemGenerateReport+0xb6>
    697c:	14 30       	cpi	r17, 0x04	; 4
    697e:	09 f4       	brne	.+2      	; 0x6982 <systemGenerateReport+0x62>
    6980:	bb c1       	rjmp	.+886    	; 0x6cf8 <systemGenerateReport+0x3d8>
    6982:	15 30       	cpi	r17, 0x05	; 5
    6984:	08 f0       	brcs	.+2      	; 0x6988 <systemGenerateReport+0x68>
    6986:	9a c6       	rjmp	.+3380   	; 0x76bc <systemGenerateReport+0xd9c>
    6988:	ae c1       	rjmp	.+860    	; 0x6ce6 <systemGenerateReport+0x3c6>
    698a:	19 30       	cpi	r17, 0x09	; 9
    698c:	09 f4       	brne	.+2      	; 0x6990 <systemGenerateReport+0x70>
    698e:	96 c6       	rjmp	.+3372   	; 0x76bc <systemGenerateReport+0xd9c>
    6990:	1a 30       	cpi	r17, 0x0A	; 10
    6992:	40 f4       	brcc	.+16     	; 0x69a4 <systemGenerateReport+0x84>
    6994:	17 30       	cpi	r17, 0x07	; 7
    6996:	09 f4       	brne	.+2      	; 0x699a <systemGenerateReport+0x7a>
    6998:	92 c2       	rjmp	.+1316   	; 0x6ebe <systemGenerateReport+0x59e>
    699a:	18 30       	cpi	r17, 0x08	; 8
    699c:	11 f0       	breq	.+4      	; 0x69a2 <systemGenerateReport+0x82>
    699e:	0c 94 c7 3e 	jmp	0x7d8e	; 0x7d8e <systemGenerateReport+0x146e>
    69a2:	9a c2       	rjmp	.+1332   	; 0x6ed8 <systemGenerateReport+0x5b8>
    69a4:	1b 30       	cpi	r17, 0x0B	; 11
    69a6:	11 f4       	brne	.+4      	; 0x69ac <systemGenerateReport+0x8c>
    69a8:	0c 94 ba 3e 	jmp	0x7d74	; 0x7d74 <systemGenerateReport+0x1454>
    69ac:	1b 30       	cpi	r17, 0x0B	; 11
    69ae:	08 f4       	brcc	.+2      	; 0x69b2 <systemGenerateReport+0x92>
    69b0:	8c c6       	rjmp	.+3352   	; 0x76ca <systemGenerateReport+0xdaa>
    69b2:	1c 30       	cpi	r17, 0x0C	; 12
    69b4:	11 f0       	breq	.+4      	; 0x69ba <systemGenerateReport+0x9a>
    69b6:	0c 94 c7 3e 	jmp	0x7d8e	; 0x7d8e <systemGenerateReport+0x146e>
    69ba:	0c 94 c2 3e 	jmp	0x7d84	; 0x7d84 <systemGenerateReport+0x1464>
	 case grScanAction://Wait for Complete incoming Totalizer data	      
		  if (IsGenerateReport==True){
    69be:	80 91 86 01 	lds	r24, 0x0186
    69c2:	81 30       	cpi	r24, 0x01	; 1
    69c4:	11 f0       	breq	.+4      	; 0x69ca <systemGenerateReport+0xaa>
    69c6:	0c 94 c7 3e 	jmp	0x7d8e	; 0x7d8e <systemGenerateReport+0x146e>
		      IsGenerateReport=False;
    69ca:	10 92 86 01 	sts	0x0186, r1
			  IsFinishPrintingTotalizer=False;
    69ce:	10 92 87 01 	sts	0x0187, r1
    69d2:	0c 94 bf 3e 	jmp	0x7d7e	; 0x7d7e <systemGenerateReport+0x145e>
			  stGenerateReport=grInitData;
		  }
	      break;
	 case grInitData:
	      xPump=1;
    69d6:	10 93 e9 01 	sts	0x01E9, r17
		  xNozzle=1;
    69da:	10 93 e8 01 	sts	0x01E8, r17
		  RepPos=0;
    69de:	10 92 d9 01 	sts	0x01D9, r1
    69e2:	10 92 d8 01 	sts	0x01D8, r1
    69e6:	e2 ef       	ldi	r30, 0xF2	; 242
    69e8:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    69ea:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69ec:	85 e0       	ldi	r24, 0x05	; 5
    69ee:	e3 38       	cpi	r30, 0x83	; 131
    69f0:	f8 07       	cpc	r31, r24
    69f2:	d9 f7       	brne	.-10     	; 0x69ea <systemGenerateReport+0xca>
    69f4:	fe 01       	movw	r30, r28
    69f6:	eb 55       	subi	r30, 0x5B	; 91
    69f8:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    69fa:	ce 01       	movw	r24, r28
    69fc:	8b 50       	subi	r24, 0x0B	; 11
    69fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6a00:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a02:	e8 17       	cp	r30, r24
    6a04:	f9 07       	cpc	r31, r25
    6a06:	e1 f7       	brne	.-8      	; 0x6a00 <systemGenerateReport+0xe0>
    6a08:	fe 01       	movw	r30, r28
    6a0a:	f7 96       	adiw	r30, 0x37	; 55
	     strMemory[i]=data;
    6a0c:	cf 01       	movw	r24, r30
    6a0e:	0f 96       	adiw	r24, 0x0f	; 15
    6a10:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a12:	e8 17       	cp	r30, r24
    6a14:	f9 07       	cpc	r31, r25
    6a16:	e1 f7       	brne	.-8      	; 0x6a10 <systemGenerateReport+0xf0>
    6a18:	fe 01       	movw	r30, r28
    6a1a:	ea 5b       	subi	r30, 0xBA	; 186
    6a1c:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6a1e:	cf 01       	movw	r24, r30
    6a20:	0f 96       	adiw	r24, 0x0f	; 15
    6a22:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a24:	e8 17       	cp	r30, r24
    6a26:	f9 07       	cpc	r31, r25
    6a28:	e1 f7       	brne	.-8      	; 0x6a22 <systemGenerateReport+0x102>
    6a2a:	ed ef       	ldi	r30, 0xFD	; 253
    6a2c:	f7 e0       	ldi	r31, 0x07	; 7
	     strMemory[i]=data;
    6a2e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a30:	98 e0       	ldi	r25, 0x08	; 8
    6a32:	e1 31       	cpi	r30, 0x11	; 17
    6a34:	f9 07       	cpc	r31, r25
    6a36:	d9 f7       	brne	.-10     	; 0x6a2e <systemGenerateReport+0x10e>
    6a38:	ee ea       	ldi	r30, 0xAE	; 174
    6a3a:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
    6a3c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a3e:	a8 e0       	ldi	r26, 0x08	; 8
    6a40:	e2 3c       	cpi	r30, 0xC2	; 194
    6a42:	fa 07       	cpc	r31, r26
    6a44:	d9 f7       	brne	.-10     	; 0x6a3c <systemGenerateReport+0x11c>
    6a46:	e3 e3       	ldi	r30, 0x33	; 51
    6a48:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    6a4a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a4c:	bc e0       	ldi	r27, 0x0C	; 12
    6a4e:	e2 34       	cpi	r30, 0x42	; 66
    6a50:	fb 07       	cpc	r31, r27
    6a52:	d9 f7       	brne	.-10     	; 0x6a4a <systemGenerateReport+0x12a>
    6a54:	eb e0       	ldi	r30, 0x0B	; 11
    6a56:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6a58:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a5a:	89 e0       	ldi	r24, 0x09	; 9
    6a5c:	ea 31       	cpi	r30, 0x1A	; 26
    6a5e:	f8 07       	cpc	r31, r24
    6a60:	d9 f7       	brne	.-10     	; 0x6a58 <systemGenerateReport+0x138>
		  FillChar(strTotalMoney,sizeof(strTotalMoney),0);


		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
		  sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    6a62:	84 e4       	ldi	r24, 0x44	; 68
    6a64:	91 e0       	ldi	r25, 0x01	; 1
    6a66:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    6a6a:	00 d0       	rcall	.+0      	; 0x6a6c <systemGenerateReport+0x14c>
    6a6c:	00 d0       	rcall	.+0      	; 0x6a6e <systemGenerateReport+0x14e>
    6a6e:	00 d0       	rcall	.+0      	; 0x6a70 <systemGenerateReport+0x150>
    6a70:	ed b7       	in	r30, 0x3d	; 61
    6a72:	fe b7       	in	r31, 0x3e	; 62
    6a74:	31 96       	adiw	r30, 0x01	; 1
    6a76:	2e e6       	ldi	r18, 0x6E	; 110
    6a78:	3c e0       	ldi	r19, 0x0C	; 12
    6a7a:	ad b7       	in	r26, 0x3d	; 61
    6a7c:	be b7       	in	r27, 0x3e	; 62
    6a7e:	12 96       	adiw	r26, 0x02	; 2
    6a80:	3c 93       	st	X, r19
    6a82:	2e 93       	st	-X, r18
    6a84:	11 97       	sbiw	r26, 0x01	; 1
    6a86:	27 e0       	ldi	r18, 0x07	; 7
    6a88:	37 e0       	ldi	r19, 0x07	; 7
    6a8a:	33 83       	std	Z+3, r19	; 0x03
    6a8c:	22 83       	std	Z+2, r18	; 0x02
    6a8e:	84 83       	std	Z+4, r24	; 0x04
    6a90:	15 82       	std	Z+5, r1	; 0x05
    6a92:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

          stGenerateReport=grCreateReportHeader;
    6a96:	82 e0       	ldi	r24, 0x02	; 2
    6a98:	80 93 ea 01 	sts	0x01EA, r24
    6a9c:	ed b7       	in	r30, 0x3d	; 61
    6a9e:	fe b7       	in	r31, 0x3e	; 62
    6aa0:	36 96       	adiw	r30, 0x06	; 6
    6aa2:	0f b6       	in	r0, 0x3f	; 63
    6aa4:	f8 94       	cli
    6aa6:	fe bf       	out	0x3e, r31	; 62
    6aa8:	0f be       	out	0x3f, r0	; 63
    6aaa:	ed bf       	out	0x3d, r30	; 61
    6aac:	0c 94 c7 3e 	jmp	0x7d8e	; 0x7d8e <systemGenerateReport+0x146e>
	      break;
	 case grCreateReportHeader://Border: btTopLeft,btTopCenter,btTopRight,btMiddleLeft,btMiddleCenter,btMiddleRight,btBottomLeft,btBottomCenter,btBottomRight,btVertical,btHorizontal
		  eeprom_read_block((void*) &LastShiftDateTime, (const void*) &DefLastShiftDateTime, sizeof(DefLastShiftDateTime));
    6ab0:	45 e5       	ldi	r20, 0x55	; 85
    6ab2:	e4 2e       	mov	r14, r20
    6ab4:	f1 2c       	mov	r15, r1
    6ab6:	ec 0e       	add	r14, r28
    6ab8:	fd 1e       	adc	r15, r29
    6aba:	c7 01       	movw	r24, r14
    6abc:	69 e4       	ldi	r22, 0x49	; 73
    6abe:	78 e0       	ldi	r23, 0x08	; 8
    6ac0:	44 e1       	ldi	r20, 0x14	; 20
    6ac2:	50 e0       	ldi	r21, 0x00	; 0
    6ac4:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
          
		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6ac8:	81 e0       	ldi	r24, 0x01	; 1
    6aca:	62 ef       	ldi	r22, 0xF2	; 242
    6acc:	73 e0       	ldi	r23, 0x03	; 3
    6ace:	41 e0       	ldi	r20, 0x01	; 1
    6ad0:	28 ed       	ldi	r18, 0xD8	; 216
    6ad2:	31 e0       	ldi	r19, 0x01	; 1
    6ad4:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6ad8:	8b e0       	ldi	r24, 0x0B	; 11
    6ada:	62 ef       	ldi	r22, 0xF2	; 242
    6adc:	73 e0       	ldi	r23, 0x03	; 3
    6ade:	48 e2       	ldi	r20, 0x28	; 40
    6ae0:	28 ed       	ldi	r18, 0xD8	; 216
    6ae2:	31 e0       	ldi	r19, 0x01	; 1
    6ae4:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6ae8:	83 e0       	ldi	r24, 0x03	; 3
    6aea:	62 ef       	ldi	r22, 0xF2	; 242
    6aec:	73 e0       	ldi	r23, 0x03	; 3
    6aee:	41 e0       	ldi	r20, 0x01	; 1
    6af0:	28 ed       	ldi	r18, 0xD8	; 216
    6af2:	31 e0       	ldi	r19, 0x01	; 1
    6af4:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6af8:	8c e0       	ldi	r24, 0x0C	; 12
    6afa:	62 ef       	ldi	r22, 0xF2	; 242
    6afc:	73 e0       	ldi	r23, 0x03	; 3
    6afe:	41 e0       	ldi	r20, 0x01	; 1
    6b00:	28 ed       	ldi	r18, 0xD8	; 216
    6b02:	31 e0       	ldi	r19, 0x01	; 1
    6b04:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
	      sprintf_P(strReport,PSTR("        Laporan Tutup Shift: %s      "),strShift);CreateReport(strReport,PrintBuffer,&RepPos);
    6b08:	00 d0       	rcall	.+0      	; 0x6b0a <systemGenerateReport+0x1ea>
    6b0a:	00 d0       	rcall	.+0      	; 0x6b0c <systemGenerateReport+0x1ec>
    6b0c:	00 d0       	rcall	.+0      	; 0x6b0e <systemGenerateReport+0x1ee>
    6b0e:	ed b7       	in	r30, 0x3d	; 61
    6b10:	fe b7       	in	r31, 0x3e	; 62
    6b12:	31 96       	adiw	r30, 0x01	; 1
    6b14:	8e 01       	movw	r16, r28
    6b16:	0b 55       	subi	r16, 0x5B	; 91
    6b18:	1f 4f       	sbci	r17, 0xFF	; 255
    6b1a:	ad b7       	in	r26, 0x3d	; 61
    6b1c:	be b7       	in	r27, 0x3e	; 62
    6b1e:	12 96       	adiw	r26, 0x02	; 2
    6b20:	1c 93       	st	X, r17
    6b22:	0e 93       	st	-X, r16
    6b24:	11 97       	sbiw	r26, 0x01	; 1
    6b26:	81 ee       	ldi	r24, 0xE1	; 225
    6b28:	96 e0       	ldi	r25, 0x06	; 6
    6b2a:	93 83       	std	Z+3, r25	; 0x03
    6b2c:	82 83       	std	Z+2, r24	; 0x02
    6b2e:	8e e6       	ldi	r24, 0x6E	; 110
    6b30:	9c e0       	ldi	r25, 0x0C	; 12
    6b32:	95 83       	std	Z+5, r25	; 0x05
    6b34:	84 83       	std	Z+4, r24	; 0x04
    6b36:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    6b3a:	ed b7       	in	r30, 0x3d	; 61
    6b3c:	fe b7       	in	r31, 0x3e	; 62
    6b3e:	36 96       	adiw	r30, 0x06	; 6
    6b40:	0f b6       	in	r0, 0x3f	; 63
    6b42:	f8 94       	cli
    6b44:	fe bf       	out	0x3e, r31	; 62
    6b46:	0f be       	out	0x3f, r0	; 63
    6b48:	ed bf       	out	0x3d, r30	; 61
    6b4a:	c8 01       	movw	r24, r16
    6b4c:	62 ef       	ldi	r22, 0xF2	; 242
    6b4e:	73 e0       	ldi	r23, 0x03	; 3
    6b50:	48 ed       	ldi	r20, 0xD8	; 216
    6b52:	51 e0       	ldi	r21, 0x01	; 1
    6b54:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>
		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     
    6b58:	84 e0       	ldi	r24, 0x04	; 4
    6b5a:	62 ef       	ldi	r22, 0xF2	; 242
    6b5c:	73 e0       	ldi	r23, 0x03	; 3
    6b5e:	41 e0       	ldi	r20, 0x01	; 1
    6b60:	28 ed       	ldi	r18, 0xD8	; 216
    6b62:	31 e0       	ldi	r19, 0x01	; 1
    6b64:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6b68:	8b e0       	ldi	r24, 0x0B	; 11
    6b6a:	62 ef       	ldi	r22, 0xF2	; 242
    6b6c:	73 e0       	ldi	r23, 0x03	; 3
    6b6e:	48 e2       	ldi	r20, 0x28	; 40
    6b70:	28 ed       	ldi	r18, 0xD8	; 216
    6b72:	31 e0       	ldi	r19, 0x01	; 1
    6b74:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6b78:	86 e0       	ldi	r24, 0x06	; 6
    6b7a:	62 ef       	ldi	r22, 0xF2	; 242
    6b7c:	73 e0       	ldi	r23, 0x03	; 3
    6b7e:	41 e0       	ldi	r20, 0x01	; 1
    6b80:	28 ed       	ldi	r18, 0xD8	; 216
    6b82:	31 e0       	ldi	r19, 0x01	; 1
    6b84:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6b88:	8c e0       	ldi	r24, 0x0C	; 12
    6b8a:	62 ef       	ldi	r22, 0xF2	; 242
    6b8c:	73 e0       	ldi	r23, 0x03	; 3
    6b8e:	41 e0       	ldi	r20, 0x01	; 1
    6b90:	28 ed       	ldi	r18, 0xD8	; 216
    6b92:	31 e0       	ldi	r19, 0x01	; 1
    6b94:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
	      sprintf_P(strReport,PSTR("Terminal ID : %.2d                   "),eeprom_read_byte(&DefIFT_ID));CreateReport(strReport,PrintBuffer,&RepPos);
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    6ba0:	00 d0       	rcall	.+0      	; 0x6ba2 <systemGenerateReport+0x282>
    6ba2:	00 d0       	rcall	.+0      	; 0x6ba4 <systemGenerateReport+0x284>
    6ba4:	00 d0       	rcall	.+0      	; 0x6ba6 <systemGenerateReport+0x286>
    6ba6:	ed b7       	in	r30, 0x3d	; 61
    6ba8:	fe b7       	in	r31, 0x3e	; 62
    6baa:	31 96       	adiw	r30, 0x01	; 1
    6bac:	ad b7       	in	r26, 0x3d	; 61
    6bae:	be b7       	in	r27, 0x3e	; 62
    6bb0:	12 96       	adiw	r26, 0x02	; 2
    6bb2:	1c 93       	st	X, r17
    6bb4:	0e 93       	st	-X, r16
    6bb6:	11 97       	sbiw	r26, 0x01	; 1
    6bb8:	2b eb       	ldi	r18, 0xBB	; 187
    6bba:	36 e0       	ldi	r19, 0x06	; 6
    6bbc:	33 83       	std	Z+3, r19	; 0x03
    6bbe:	22 83       	std	Z+2, r18	; 0x02
    6bc0:	84 83       	std	Z+4, r24	; 0x04
    6bc2:	15 82       	std	Z+5, r1	; 0x05
    6bc4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    6bc8:	ed b7       	in	r30, 0x3d	; 61
    6bca:	fe b7       	in	r31, 0x3e	; 62
    6bcc:	36 96       	adiw	r30, 0x06	; 6
    6bce:	0f b6       	in	r0, 0x3f	; 63
    6bd0:	f8 94       	cli
    6bd2:	fe bf       	out	0x3e, r31	; 62
    6bd4:	0f be       	out	0x3f, r0	; 63
    6bd6:	ed bf       	out	0x3d, r30	; 61
    6bd8:	c8 01       	movw	r24, r16
    6bda:	62 ef       	ldi	r22, 0xF2	; 242
    6bdc:	73 e0       	ldi	r23, 0x03	; 3
    6bde:	48 ed       	ldi	r20, 0xD8	; 216
    6be0:	51 e0       	ldi	r21, 0x01	; 1
    6be2:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>
	      sprintf_P(strReport,PSTR("Awal  Shift : %s "),LastShiftDateTime);             CreateReport(strReport,PrintBuffer,&RepPos);
    6be6:	00 d0       	rcall	.+0      	; 0x6be8 <systemGenerateReport+0x2c8>
    6be8:	00 d0       	rcall	.+0      	; 0x6bea <systemGenerateReport+0x2ca>
    6bea:	00 d0       	rcall	.+0      	; 0x6bec <systemGenerateReport+0x2cc>
    6bec:	ed b7       	in	r30, 0x3d	; 61
    6bee:	fe b7       	in	r31, 0x3e	; 62
    6bf0:	31 96       	adiw	r30, 0x01	; 1
    6bf2:	ad b7       	in	r26, 0x3d	; 61
    6bf4:	be b7       	in	r27, 0x3e	; 62
    6bf6:	12 96       	adiw	r26, 0x02	; 2
    6bf8:	1c 93       	st	X, r17
    6bfa:	0e 93       	st	-X, r16
    6bfc:	11 97       	sbiw	r26, 0x01	; 1
    6bfe:	89 ea       	ldi	r24, 0xA9	; 169
    6c00:	96 e0       	ldi	r25, 0x06	; 6
    6c02:	93 83       	std	Z+3, r25	; 0x03
    6c04:	82 83       	std	Z+2, r24	; 0x02
    6c06:	f5 82       	std	Z+5, r15	; 0x05
    6c08:	e4 82       	std	Z+4, r14	; 0x04
    6c0a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    6c0e:	ed b7       	in	r30, 0x3d	; 61
    6c10:	fe b7       	in	r31, 0x3e	; 62
    6c12:	36 96       	adiw	r30, 0x06	; 6
    6c14:	0f b6       	in	r0, 0x3f	; 63
    6c16:	f8 94       	cli
    6c18:	fe bf       	out	0x3e, r31	; 62
    6c1a:	0f be       	out	0x3f, r0	; 63
    6c1c:	ed bf       	out	0x3d, r30	; 61
    6c1e:	c8 01       	movw	r24, r16
    6c20:	62 ef       	ldi	r22, 0xF2	; 242
    6c22:	73 e0       	ldi	r23, 0x03	; 3
    6c24:	48 ed       	ldi	r20, 0xD8	; 216
    6c26:	51 e0       	ldi	r21, 0x01	; 1
    6c28:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>
	      sprintf_P(strReport,PSTR("Akhir Shift : %s "),CurrentShiftDateTime);      CreateReport(strReport,PrintBuffer,&RepPos);
    6c2c:	00 d0       	rcall	.+0      	; 0x6c2e <systemGenerateReport+0x30e>
    6c2e:	00 d0       	rcall	.+0      	; 0x6c30 <systemGenerateReport+0x310>
    6c30:	00 d0       	rcall	.+0      	; 0x6c32 <systemGenerateReport+0x312>
    6c32:	ed b7       	in	r30, 0x3d	; 61
    6c34:	fe b7       	in	r31, 0x3e	; 62
    6c36:	31 96       	adiw	r30, 0x01	; 1
    6c38:	ad b7       	in	r26, 0x3d	; 61
    6c3a:	be b7       	in	r27, 0x3e	; 62
    6c3c:	12 96       	adiw	r26, 0x02	; 2
    6c3e:	1c 93       	st	X, r17
    6c40:	0e 93       	st	-X, r16
    6c42:	11 97       	sbiw	r26, 0x01	; 1
    6c44:	87 e9       	ldi	r24, 0x97	; 151
    6c46:	96 e0       	ldi	r25, 0x06	; 6
    6c48:	93 83       	std	Z+3, r25	; 0x03
    6c4a:	82 83       	std	Z+2, r24	; 0x02
    6c4c:	84 e9       	ldi	r24, 0x94	; 148
    6c4e:	97 e0       	ldi	r25, 0x07	; 7
    6c50:	95 83       	std	Z+5, r25	; 0x05
    6c52:	84 83       	std	Z+4, r24	; 0x04
    6c54:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    6c58:	ed b7       	in	r30, 0x3d	; 61
    6c5a:	fe b7       	in	r31, 0x3e	; 62
    6c5c:	36 96       	adiw	r30, 0x06	; 6
    6c5e:	0f b6       	in	r0, 0x3f	; 63
    6c60:	f8 94       	cli
    6c62:	fe bf       	out	0x3e, r31	; 62
    6c64:	0f be       	out	0x3f, r0	; 63
    6c66:	ed bf       	out	0x3d, r30	; 61
    6c68:	c8 01       	movw	r24, r16
    6c6a:	62 ef       	ldi	r22, 0xF2	; 242
    6c6c:	73 e0       	ldi	r23, 0x03	; 3
    6c6e:	48 ed       	ldi	r20, 0xD8	; 216
    6c70:	51 e0       	ldi	r21, 0x01	; 1
    6c72:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>
	      //sprintf_P(strReport,PSTR("Transaksi   : %s "),DeltaTransaction);      CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6c76:	87 e0       	ldi	r24, 0x07	; 7
    6c78:	62 ef       	ldi	r22, 0xF2	; 242
    6c7a:	73 e0       	ldi	r23, 0x03	; 3
    6c7c:	41 e0       	ldi	r20, 0x01	; 1
    6c7e:	28 ed       	ldi	r18, 0xD8	; 216
    6c80:	31 e0       	ldi	r19, 0x01	; 1
    6c82:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6c86:	8b e0       	ldi	r24, 0x0B	; 11
    6c88:	62 ef       	ldi	r22, 0xF2	; 242
    6c8a:	73 e0       	ldi	r23, 0x03	; 3
    6c8c:	48 e2       	ldi	r20, 0x28	; 40
    6c8e:	28 ed       	ldi	r18, 0xD8	; 216
    6c90:	31 e0       	ldi	r19, 0x01	; 1
    6c92:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6c96:	89 e0       	ldi	r24, 0x09	; 9
    6c98:	62 ef       	ldi	r22, 0xF2	; 242
    6c9a:	73 e0       	ldi	r23, 0x03	; 3
    6c9c:	41 e0       	ldi	r20, 0x01	; 1
    6c9e:	28 ed       	ldi	r18, 0xD8	; 216
    6ca0:	31 e0       	ldi	r19, 0x01	; 1
    6ca2:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6ca6:	8c e0       	ldi	r24, 0x0C	; 12
    6ca8:	62 ef       	ldi	r22, 0xF2	; 242
    6caa:	73 e0       	ldi	r23, 0x03	; 3
    6cac:	41 e0       	ldi	r20, 0x01	; 1
    6cae:	28 ed       	ldi	r18, 0xD8	; 216
    6cb0:	31 e0       	ldi	r19, 0x01	; 1
    6cb2:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
		  /*
	      if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
          */
		  ClearList(GradeList);
    6cb6:	8a ed       	ldi	r24, 0xDA	; 218
    6cb8:	91 e0       	ldi	r25, 0x01	; 1
    6cba:	0e 94 c9 22 	call	0x4592	; 0x4592 <ClearList>
		  cmdPrint=0b10000000;//PrintHeader
    6cbe:	80 e8       	ldi	r24, 0x80	; 128
    6cc0:	80 93 b7 01 	sts	0x01B7, r24
		  LengthMessage81=RepPos+1;
    6cc4:	80 91 d8 01 	lds	r24, 0x01D8
    6cc8:	90 91 d9 01 	lds	r25, 0x01D9
    6ccc:	01 96       	adiw	r24, 0x01	; 1
    6cce:	90 93 8e 01 	sts	0x018E, r25
    6cd2:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    6cd6:	81 e0       	ldi	r24, 0x01	; 1
    6cd8:	80 93 aa 01 	sts	0x01AA, r24
          IsBusyFreePrinting=True;
    6cdc:	80 93 b6 01 	sts	0x01B6, r24
		  		  
          stGenerateReport=grWaitPrinted1;
    6ce0:	83 e0       	ldi	r24, 0x03	; 3
    6ce2:	0c 94 bf 3e 	jmp	0x7d7e	; 0x7d7e <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted1:
          if (IsBusyFreePrinting==False)
    6ce6:	80 91 b6 01 	lds	r24, 0x01B6
    6cea:	88 23       	and	r24, r24
    6cec:	11 f0       	breq	.+4      	; 0x6cf2 <systemGenerateReport+0x3d2>
    6cee:	0c 94 c7 3e 	jmp	0x7d8e	; 0x7d8e <systemGenerateReport+0x146e>
		      stGenerateReport=grGenerateLabel;//grGenerateReportData;//grFinishGenerateReport;
    6cf2:	84 e0       	ldi	r24, 0x04	; 4
    6cf4:	0c 94 bf 3e 	jmp	0x7d7e	; 0x7d7e <systemGenerateReport+0x145e>
	      break;
     case grGenerateLabel:
          RepPos=0;
    6cf8:	10 92 d9 01 	sts	0x01D9, r1
    6cfc:	10 92 d8 01 	sts	0x01D8, r1
          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    6d00:	81 e0       	ldi	r24, 0x01	; 1
    6d02:	62 ef       	ldi	r22, 0xF2	; 242
    6d04:	73 e0       	ldi	r23, 0x03	; 3
    6d06:	41 e0       	ldi	r20, 0x01	; 1
    6d08:	28 ed       	ldi	r18, 0xD8	; 216
    6d0a:	31 e0       	ldi	r19, 0x01	; 1
    6d0c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6d10:	8b e0       	ldi	r24, 0x0B	; 11
    6d12:	62 ef       	ldi	r22, 0xF2	; 242
    6d14:	73 e0       	ldi	r23, 0x03	; 3
    6d16:	48 e2       	ldi	r20, 0x28	; 40
    6d18:	28 ed       	ldi	r18, 0xD8	; 216
    6d1a:	31 e0       	ldi	r19, 0x01	; 1
    6d1c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6d20:	83 e0       	ldi	r24, 0x03	; 3
    6d22:	62 ef       	ldi	r22, 0xF2	; 242
    6d24:	73 e0       	ldi	r23, 0x03	; 3
    6d26:	41 e0       	ldi	r20, 0x01	; 1
    6d28:	28 ed       	ldi	r18, 0xD8	; 216
    6d2a:	31 e0       	ldi	r19, 0x01	; 1
    6d2c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6d30:	8c e0       	ldi	r24, 0x0C	; 12
    6d32:	62 ef       	ldi	r22, 0xF2	; 242
    6d34:	73 e0       	ldi	r23, 0x03	; 3
    6d36:	41 e0       	ldi	r20, 0x01	; 1
    6d38:	28 ed       	ldi	r18, 0xD8	; 216
    6d3a:	31 e0       	ldi	r19, 0x01	; 1
    6d3c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
	      if (eeprom_read_byte(&DefPrintMoney)==True)
    6d40:	87 ec       	ldi	r24, 0xC7	; 199
    6d42:	93 e0       	ldi	r25, 0x03	; 3
    6d44:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    6d48:	35 ea       	ldi	r19, 0xA5	; 165
    6d4a:	c3 2e       	mov	r12, r19
    6d4c:	d1 2c       	mov	r13, r1
    6d4e:	cc 0e       	add	r12, r28
    6d50:	dd 1e       	adc	r13, r29
    6d52:	81 30       	cpi	r24, 0x01	; 1
    6d54:	79 f4       	brne	.+30     	; 0x6d74 <systemGenerateReport+0x454>
		       sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
    6d56:	00 d0       	rcall	.+0      	; 0x6d58 <systemGenerateReport+0x438>
    6d58:	00 d0       	rcall	.+0      	; 0x6d5a <systemGenerateReport+0x43a>
    6d5a:	ad b7       	in	r26, 0x3d	; 61
    6d5c:	be b7       	in	r27, 0x3e	; 62
    6d5e:	12 96       	adiw	r26, 0x02	; 2
    6d60:	dc 92       	st	X, r13
    6d62:	ce 92       	st	-X, r12
    6d64:	11 97       	sbiw	r26, 0x01	; 1
    6d66:	80 e7       	ldi	r24, 0x70	; 112
    6d68:	96 e0       	ldi	r25, 0x06	; 6
    6d6a:	14 96       	adiw	r26, 0x04	; 4
    6d6c:	9c 93       	st	X, r25
    6d6e:	8e 93       	st	-X, r24
    6d70:	13 97       	sbiw	r26, 0x03	; 3
    6d72:	0a c0       	rjmp	.+20     	; 0x6d88 <systemGenerateReport+0x468>
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
    6d74:	00 d0       	rcall	.+0      	; 0x6d76 <systemGenerateReport+0x456>
    6d76:	00 d0       	rcall	.+0      	; 0x6d78 <systemGenerateReport+0x458>
    6d78:	ed b7       	in	r30, 0x3d	; 61
    6d7a:	fe b7       	in	r31, 0x3e	; 62
    6d7c:	d2 82       	std	Z+2, r13	; 0x02
    6d7e:	c1 82       	std	Z+1, r12	; 0x01
    6d80:	89 e4       	ldi	r24, 0x49	; 73
    6d82:	96 e0       	ldi	r25, 0x06	; 6
    6d84:	94 83       	std	Z+4, r25	; 0x04
    6d86:	83 83       	std	Z+3, r24	; 0x03
    6d88:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    6d8c:	0f 90       	pop	r0
    6d8e:	0f 90       	pop	r0
    6d90:	0f 90       	pop	r0
    6d92:	0f 90       	pop	r0
    6d94:	ce 01       	movw	r24, r28
    6d96:	8b 55       	subi	r24, 0x5B	; 91
    6d98:	9f 4f       	sbci	r25, 0xFF	; 255
    6d9a:	62 ef       	ldi	r22, 0xF2	; 242
    6d9c:	73 e0       	ldi	r23, 0x03	; 3
    6d9e:	48 ed       	ldi	r20, 0xD8	; 216
    6da0:	51 e0       	ldi	r21, 0x01	; 1
    6da2:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
    6da6:	87 e0       	ldi	r24, 0x07	; 7
    6da8:	62 ef       	ldi	r22, 0xF2	; 242
    6daa:	73 e0       	ldi	r23, 0x03	; 3
    6dac:	41 e0       	ldi	r20, 0x01	; 1
    6dae:	28 ed       	ldi	r18, 0xD8	; 216
    6db0:	31 e0       	ldi	r19, 0x01	; 1
    6db2:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6db6:	8b e0       	ldi	r24, 0x0B	; 11
    6db8:	62 ef       	ldi	r22, 0xF2	; 242
    6dba:	73 e0       	ldi	r23, 0x03	; 3
    6dbc:	48 e2       	ldi	r20, 0x28	; 40
    6dbe:	28 ed       	ldi	r18, 0xD8	; 216
    6dc0:	31 e0       	ldi	r19, 0x01	; 1
    6dc2:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    6dc6:	89 e0       	ldi	r24, 0x09	; 9
    6dc8:	62 ef       	ldi	r22, 0xF2	; 242
    6dca:	73 e0       	ldi	r23, 0x03	; 3
    6dcc:	41 e0       	ldi	r20, 0x01	; 1
    6dce:	28 ed       	ldi	r18, 0xD8	; 216
    6dd0:	31 e0       	ldi	r19, 0x01	; 1
    6dd2:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
          
		  cmdPrint=0b00000000;
    6dd6:	10 92 b7 01 	sts	0x01B7, r1
		  LengthMessage81=RepPos+1;
    6dda:	80 91 d8 01 	lds	r24, 0x01D8
    6dde:	90 91 d9 01 	lds	r25, 0x01D9
    6de2:	01 96       	adiw	r24, 0x01	; 1
    6de4:	90 93 8e 01 	sts	0x018E, r25
    6de8:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    6dec:	81 e0       	ldi	r24, 0x01	; 1
    6dee:	80 93 aa 01 	sts	0x01AA, r24
	      IsBusyFreePrinting=True;
    6df2:	80 93 b6 01 	sts	0x01B6, r24

		  stGenerateReport=grWaitLabelPrinted;
    6df6:	85 e0       	ldi	r24, 0x05	; 5
    6df8:	c2 c7       	rjmp	.+3972   	; 0x7d7e <systemGenerateReport+0x145e>
          if (IsBusyFreePrinting==False)
		      stGenerateReport=grGenerateReportData;//grFinishGenerateReport;
	      break;
     case grGenerateReportData:
	      //Generate: PumpNum, Nozzle, Product
	      if ((xPump>=1)&&(xPump<=8)){
    6dfa:	80 91 e9 01 	lds	r24, 0x01E9
    6dfe:	81 50       	subi	r24, 0x01	; 1
    6e00:	88 30       	cpi	r24, 0x08	; 8
    6e02:	08 f0       	brcs	.+2      	; 0x6e06 <systemGenerateReport+0x4e6>
    6e04:	c4 c7       	rjmp	.+3976   	; 0x7d8e <systemGenerateReport+0x146e>
		      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    6e06:	ce 01       	movw	r24, r28
    6e08:	07 96       	adiw	r24, 0x07	; 7
    6e0a:	6a e4       	ldi	r22, 0x4A	; 74
    6e0c:	70 e0       	ldi	r23, 0x00	; 0
    6e0e:	48 e0       	ldi	r20, 0x08	; 8
    6e10:	50 e0       	ldi	r21, 0x00	; 0
    6e12:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
			  PumpNum=PPumpID[xPump-1];
    6e16:	90 91 e9 01 	lds	r25, 0x01E9
    6e1a:	fe 01       	movw	r30, r28
    6e1c:	e9 0f       	add	r30, r25
    6e1e:	f1 1d       	adc	r31, r1
    6e20:	86 81       	ldd	r24, Z+6	; 0x06
    6e22:	80 93 e6 01 	sts	0x01E6, r24
			  if (PumpNum>0){
    6e26:	88 23       	and	r24, r24
    6e28:	09 f4       	brne	.+2      	; 0x6e2c <systemGenerateReport+0x50c>
    6e2a:	47 c0       	rjmp	.+142    	; 0x6eba <systemGenerateReport+0x59a>
				  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    6e2c:	91 9f       	mul	r25, r17
    6e2e:	b0 01       	movw	r22, r0
    6e30:	11 24       	eor	r1, r1
    6e32:	6c 5a       	subi	r22, 0xAC	; 172
    6e34:	7f 4f       	sbci	r23, 0xFF	; 255
    6e36:	ce 01       	movw	r24, r28
    6e38:	01 96       	adiw	r24, 0x01	; 1
    6e3a:	46 e0       	ldi	r20, 0x06	; 6
    6e3c:	50 e0       	ldi	r21, 0x00	; 0
    6e3e:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
				  xGrade=PProductID[xNozzle-1];
    6e42:	80 91 e8 01 	lds	r24, 0x01E8
    6e46:	fe 01       	movw	r30, r28
    6e48:	e8 0f       	add	r30, r24
    6e4a:	f1 1d       	adc	r31, r1
    6e4c:	80 81       	ld	r24, Z
    6e4e:	80 93 e7 01 	sts	0x01E7, r24
    6e52:	24 e6       	ldi	r18, 0x64	; 100
    6e54:	a2 2e       	mov	r10, r18
    6e56:	27 e0       	ldi	r18, 0x07	; 7
    6e58:	b2 2e       	mov	r11, r18

				  if (xGrade>0){
    6e5a:	88 23       	and	r24, r24
    6e5c:	91 f0       	breq	.+36     	; 0x6e82 <systemGenerateReport+0x562>
				      GetProductName(xGrade,strProduct);
    6e5e:	b5 01       	movw	r22, r10
    6e60:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <GetProductName>
                      GradeUsed=xGrade;
    6e64:	80 91 e7 01 	lds	r24, 0x01E7
    6e68:	80 93 e4 01 	sts	0x01E4, r24
					  xGrade=xNozzle;//
    6e6c:	80 91 e8 01 	lds	r24, 0x01E8
    6e70:	80 93 e7 01 	sts	0x01E7, r24
					  PumpNozzle=xNozzle;
    6e74:	80 93 e5 01 	sts	0x01E5, r24
					  xNozzle++;
    6e78:	8f 5f       	subi	r24, 0xFF	; 255
    6e7a:	80 93 e8 01 	sts	0x01E8, r24
					  stGenerateReport=grCreateReportTotalizer;
    6e7e:	88 e0       	ldi	r24, 0x08	; 8
    6e80:	7e c7       	rjmp	.+3836   	; 0x7d7e <systemGenerateReport+0x145e>
				  }
				  else{sprintf_P(strProduct,PSTR("N/A"));			  
    6e82:	00 d0       	rcall	.+0      	; 0x6e84 <systemGenerateReport+0x564>
    6e84:	00 d0       	rcall	.+0      	; 0x6e86 <systemGenerateReport+0x566>
    6e86:	ad b7       	in	r26, 0x3d	; 61
    6e88:	be b7       	in	r27, 0x3e	; 62
    6e8a:	12 96       	adiw	r26, 0x02	; 2
    6e8c:	bc 92       	st	X, r11
    6e8e:	ae 92       	st	-X, r10
    6e90:	11 97       	sbiw	r26, 0x01	; 1
    6e92:	85 e4       	ldi	r24, 0x45	; 69
    6e94:	96 e0       	ldi	r25, 0x06	; 6
    6e96:	14 96       	adiw	r26, 0x04	; 4
    6e98:	9c 93       	st	X, r25
    6e9a:	8e 93       	st	-X, r24
    6e9c:	13 97       	sbiw	r26, 0x03	; 3
    6e9e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
					   xNozzle++;
    6ea2:	80 91 e8 01 	lds	r24, 0x01E8
    6ea6:	8f 5f       	subi	r24, 0xFF	; 255
    6ea8:	80 93 e8 01 	sts	0x01E8, r24
					   if (xNozzle>6)stGenerateReport=grNextPump;
    6eac:	0f 90       	pop	r0
    6eae:	0f 90       	pop	r0
    6eb0:	0f 90       	pop	r0
    6eb2:	0f 90       	pop	r0
    6eb4:	87 30       	cpi	r24, 0x07	; 7
    6eb6:	08 f4       	brcc	.+2      	; 0x6eba <systemGenerateReport+0x59a>
    6eb8:	6a c7       	rjmp	.+3796   	; 0x7d8e <systemGenerateReport+0x146e>
					  }
				}else stGenerateReport=grNextPump;
    6eba:	87 e0       	ldi	r24, 0x07	; 7
    6ebc:	60 c7       	rjmp	.+3776   	; 0x7d7e <systemGenerateReport+0x145e>
			  }
	      break;
     case grNextPump:
	      xNozzle=1;
    6ebe:	81 e0       	ldi	r24, 0x01	; 1
    6ec0:	80 93 e8 01 	sts	0x01E8, r24
	      xPump++;
    6ec4:	80 91 e9 01 	lds	r24, 0x01E9
    6ec8:	8f 5f       	subi	r24, 0xFF	; 255
    6eca:	80 93 e9 01 	sts	0x01E9, r24
	      if (xPump>8)stGenerateReport=grCreateReportFooter;
    6ece:	89 30       	cpi	r24, 0x09	; 9
    6ed0:	08 f4       	brcc	.+2      	; 0x6ed4 <systemGenerateReport+0x5b4>
    6ed2:	f9 c3       	rjmp	.+2034   	; 0x76c6 <systemGenerateReport+0xda6>
    6ed4:	8a e0       	ldi	r24, 0x0A	; 10
    6ed6:	53 c7       	rjmp	.+3750   	; 0x7d7e <systemGenerateReport+0x145e>
		  else stGenerateReport=grGenerateReportData;
	      break;
     case grCreateReportTotalizer:

          RepPos=0;
    6ed8:	10 92 d9 01 	sts	0x01D9, r1
    6edc:	10 92 d8 01 	sts	0x01D8, r1
    6ee0:	e2 ef       	ldi	r30, 0xF2	; 242
    6ee2:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    6ee4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6ee6:	b5 e0       	ldi	r27, 0x05	; 5
    6ee8:	e3 38       	cpi	r30, 0x83	; 131
    6eea:	fb 07       	cpc	r31, r27
    6eec:	d9 f7       	brne	.-10     	; 0x6ee4 <systemGenerateReport+0x5c4>
    6eee:	fe 01       	movw	r30, r28
    6ef0:	eb 55       	subi	r30, 0x5B	; 91
    6ef2:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6ef4:	ce 01       	movw	r24, r28
    6ef6:	8b 50       	subi	r24, 0x0B	; 11
    6ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    6efa:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6efc:	e8 17       	cp	r30, r24
    6efe:	f9 07       	cpc	r31, r25
    6f00:	e1 f7       	brne	.-8      	; 0x6efa <systemGenerateReport+0x5da>
    6f02:	e3 e3       	ldi	r30, 0x33	; 51
    6f04:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    6f06:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f08:	8c e0       	ldi	r24, 0x0C	; 12
    6f0a:	e2 34       	cpi	r30, 0x42	; 66
    6f0c:	f8 07       	cpc	r31, r24
    6f0e:	d9 f7       	brne	.-10     	; 0x6f06 <systemGenerateReport+0x5e6>
    6f10:	eb e0       	ldi	r30, 0x0B	; 11
    6f12:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6f14:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f16:	99 e0       	ldi	r25, 0x09	; 9
    6f18:	ea 31       	cpi	r30, 0x1A	; 26
    6f1a:	f9 07       	cpc	r31, r25
    6f1c:	d9 f7       	brne	.-10     	; 0x6f14 <systemGenerateReport+0x5f4>
    6f1e:	fe 01       	movw	r30, r28
    6f20:	79 96       	adiw	r30, 0x19	; 25
	     strMemory[i]=data;
    6f22:	ce 01       	movw	r24, r28
    6f24:	88 96       	adiw	r24, 0x28	; 40
    6f26:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f28:	e8 17       	cp	r30, r24
    6f2a:	f9 07       	cpc	r31, r25
    6f2c:	e1 f7       	brne	.-8      	; 0x6f26 <systemGenerateReport+0x606>
	     strMemory[i]=data;
    6f2e:	ce 01       	movw	r24, r28
    6f30:	c7 96       	adiw	r24, 0x37	; 55
    6f32:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f34:	e8 17       	cp	r30, r24
    6f36:	f9 07       	cpc	r31, r25
    6f38:	e1 f7       	brne	.-8      	; 0x6f32 <systemGenerateReport+0x612>
	     strMemory[i]=data;
    6f3a:	cf 01       	movw	r24, r30
    6f3c:	0f 96       	adiw	r24, 0x0f	; 15
    6f3e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f40:	e8 17       	cp	r30, r24
    6f42:	f9 07       	cpc	r31, r25
    6f44:	e1 f7       	brne	.-8      	; 0x6f3e <systemGenerateReport+0x61e>
    6f46:	fe 01       	movw	r30, r28
    6f48:	ea 5b       	subi	r30, 0xBA	; 186
    6f4a:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6f4c:	cf 01       	movw	r24, r30
    6f4e:	ee 2e       	mov	r14, r30
    6f50:	d9 2e       	mov	r13, r25
    6f52:	0f 96       	adiw	r24, 0x0f	; 15
    6f54:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f56:	e8 17       	cp	r30, r24
    6f58:	f9 07       	cpc	r31, r25
    6f5a:	e1 f7       	brne	.-8      	; 0x6f54 <systemGenerateReport+0x634>
		  FillChar(strLastMoney,sizeof(strLastMoney),0);

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

          FIPAddr=GetFIPAddr(PumpNum); 
    6f5c:	80 91 e6 01 	lds	r24, 0x01E6
    6f60:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
		  if (FIPAddr>0){
    6f64:	88 23       	and	r24, r24
    6f66:	49 f1       	breq	.+82     	; 0x6fba <systemGenerateReport+0x69a>
		      FIPAddr=FIPAddr-1;		  
    6f68:	f8 2e       	mov	r15, r24
    6f6a:	fa 94       	dec	r15
			  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    6f6c:	80 e0       	ldi	r24, 0x00	; 0
    6f6e:	60 e0       	ldi	r22, 0x00	; 0
    6f70:	4f 2d       	mov	r20, r15
    6f72:	20 91 e5 01 	lds	r18, 0x01E5
    6f76:	8e 01       	movw	r16, r28
    6f78:	07 5e       	subi	r16, 0xE7	; 231
    6f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    6f7c:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    6f80:	81 e0       	ldi	r24, 0x01	; 1
    6f82:	60 e0       	ldi	r22, 0x00	; 0
    6f84:	4f 2d       	mov	r20, r15
    6f86:	20 91 e5 01 	lds	r18, 0x01E5
    6f8a:	8e 01       	movw	r16, r28
    6f8c:	08 5d       	subi	r16, 0xD8	; 216
    6f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f90:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>

			  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    6f94:	80 e0       	ldi	r24, 0x00	; 0
    6f96:	61 e0       	ldi	r22, 0x01	; 1
    6f98:	4f 2d       	mov	r20, r15
    6f9a:	20 91 e5 01 	lds	r18, 0x01E5
    6f9e:	8e 01       	movw	r16, r28
    6fa0:	09 5c       	subi	r16, 0xC9	; 201
    6fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    6fa4:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    6fa8:	81 e0       	ldi	r24, 0x01	; 1
    6faa:	61 e0       	ldi	r22, 0x01	; 1
    6fac:	4f 2d       	mov	r20, r15
    6fae:	20 91 e5 01 	lds	r18, 0x01E5
    6fb2:	0e 2d       	mov	r16, r14
    6fb4:	1d 2d       	mov	r17, r13
    6fb6:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
		  }

		  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    6fba:	80 e0       	ldi	r24, 0x00	; 0
    6fbc:	be 01       	movw	r22, r28
    6fbe:	69 5c       	subi	r22, 0xC9	; 201
    6fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    6fc2:	ae 01       	movw	r20, r28
    6fc4:	47 5e       	subi	r20, 0xE7	; 231
    6fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fc8:	2b e0       	ldi	r18, 0x0B	; 11
    6fca:	39 e0       	ldi	r19, 0x09	; 9
    6fcc:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>

		  if (IsMinus(strDeltaVolume)==True)
    6fd0:	8b e0       	ldi	r24, 0x0B	; 11
    6fd2:	99 e0       	ldi	r25, 0x09	; 9
    6fd4:	0e 94 8d 23 	call	0x471a	; 0x471a <IsMinus>
    6fd8:	81 30       	cpi	r24, 0x01	; 1
    6fda:	21 f4       	brne	.+8      	; 0x6fe4 <systemGenerateReport+0x6c4>
		      NormalizeOverflow(strDeltaVolume);
    6fdc:	8b e0       	ldi	r24, 0x0B	; 11
    6fde:	99 e0       	ldi	r25, 0x09	; 9
    6fe0:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <NormalizeOverflow>

		  //Calculate Wayne Estimated Total Money
		  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    6fe4:	8c e3       	ldi	r24, 0x3C	; 60
    6fe6:	91 e0       	ldi	r25, 0x01	; 1
    6fe8:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    6fec:	82 30       	cpi	r24, 0x02	; 2
    6fee:	79 f4       	brne	.+30     	; 0x700e <systemGenerateReport+0x6ee>
              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    6ff0:	8e 01       	movw	r16, r28
    6ff2:	01 5f       	subi	r16, 0xF1	; 241
    6ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    6ff6:	c8 01       	movw	r24, r16
    6ff8:	60 91 e6 01 	lds	r22, 0x01E6
    6ffc:	40 91 e5 01 	lds	r20, 0x01E5
    7000:	0e 94 71 24 	call	0x48e2	; 0x48e2 <GetProductPrice>
			  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    7004:	82 e0       	ldi	r24, 0x02	; 2
    7006:	b8 01       	movw	r22, r16
    7008:	4b e0       	ldi	r20, 0x0B	; 11
    700a:	59 e0       	ldi	r21, 0x09	; 9
    700c:	07 c0       	rjmp	.+14     	; 0x701c <systemGenerateReport+0x6fc>
			  
		  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    700e:	80 e0       	ldi	r24, 0x00	; 0
    7010:	be 01       	movw	r22, r28
    7012:	6a 5b       	subi	r22, 0xBA	; 186
    7014:	7f 4f       	sbci	r23, 0xFF	; 255
    7016:	ae 01       	movw	r20, r28
    7018:	48 5d       	subi	r20, 0xD8	; 216
    701a:	5f 4f       	sbci	r21, 0xFF	; 255
    701c:	23 e3       	ldi	r18, 0x33	; 51
    701e:	3c e0       	ldi	r19, 0x0C	; 12
    7020:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>

		  if (IsMinus(strDeltaMoney)==True)
    7024:	83 e3       	ldi	r24, 0x33	; 51
    7026:	9c e0       	ldi	r25, 0x0C	; 12
    7028:	0e 94 8d 23 	call	0x471a	; 0x471a <IsMinus>
    702c:	81 30       	cpi	r24, 0x01	; 1
    702e:	21 f4       	brne	.+8      	; 0x7038 <systemGenerateReport+0x718>
		      NormalizeOverflow(strDeltaMoney);
    7030:	83 e3       	ldi	r24, 0x33	; 51
    7032:	9c e0       	ldi	r25, 0x0C	; 12
    7034:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <NormalizeOverflow>

		  AddList(GradeUsed,GradeList);
    7038:	80 91 e4 01 	lds	r24, 0x01E4
    703c:	6a ed       	ldi	r22, 0xDA	; 218
    703e:	71 e0       	ldi	r23, 0x01	; 1
    7040:	0e 94 96 22 	call	0x452c	; 0x452c <AddList>
		  
		  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    7044:	81 e0       	ldi	r24, 0x01	; 1
    7046:	6d ef       	ldi	r22, 0xFD	; 253
    7048:	77 e0       	ldi	r23, 0x07	; 7
    704a:	4b e0       	ldi	r20, 0x0B	; 11
    704c:	59 e0       	ldi	r21, 0x09	; 9
    704e:	9b 01       	movw	r18, r22
    7050:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>
		  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    7054:	81 e0       	ldi	r24, 0x01	; 1
    7056:	6e ea       	ldi	r22, 0xAE	; 174
    7058:	78 e0       	ldi	r23, 0x08	; 8
    705a:	43 e3       	ldi	r20, 0x33	; 51
    705c:	5c e0       	ldi	r21, 0x0C	; 12
    705e:	9b 01       	movw	r18, r22
    7060:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>


		  RemZeroLead(strDeltaMoney);
    7064:	83 e3       	ldi	r24, 0x33	; 51
    7066:	9c e0       	ldi	r25, 0x0C	; 12
    7068:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		  RemZeroLead(strCurrentMoney);
    706c:	96 e4       	ldi	r25, 0x46	; 70
    706e:	c9 2e       	mov	r12, r25
    7070:	d1 2c       	mov	r13, r1
    7072:	cc 0e       	add	r12, r28
    7074:	dd 1e       	adc	r13, r29
    7076:	c6 01       	movw	r24, r12
    7078:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		  RemZeroLead(strLastMoney);
    707c:	88 e2       	ldi	r24, 0x28	; 40
    707e:	e8 2e       	mov	r14, r24
    7080:	f1 2c       	mov	r15, r1
    7082:	ec 0e       	add	r14, r28
    7084:	fd 1e       	adc	r15, r29
    7086:	c7 01       	movw	r24, r14
    7088:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>

          RemZeroLead(strDeltaVolume);
    708c:	8b e0       	ldi	r24, 0x0B	; 11
    708e:	99 e0       	ldi	r25, 0x09	; 9
    7090:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
          RemZeroLead(strCurrentVolume);
    7094:	07 e3       	ldi	r16, 0x37	; 55
    7096:	a0 2e       	mov	r10, r16
    7098:	b1 2c       	mov	r11, r1
    709a:	ac 0e       	add	r10, r28
    709c:	bd 1e       	adc	r11, r29
    709e:	c5 01       	movw	r24, r10
    70a0:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
          RemZeroLead(strLastVolume);
    70a4:	8e 01       	movw	r16, r28
    70a6:	07 5e       	subi	r16, 0xE7	; 231
    70a8:	1f 4f       	sbci	r17, 0xFF	; 255
    70aa:	c8 01       	movw	r24, r16
    70ac:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>

		  FormatTotalizerMoney(strDeltaMoney);
    70b0:	83 e3       	ldi	r24, 0x33	; 51
    70b2:	9c e0       	ldi	r25, 0x0C	; 12
    70b4:	0e 94 58 34 	call	0x68b0	; 0x68b0 <FormatTotalizerMoney>
		  FormatTotalizerMoney(strCurrentMoney);
    70b8:	c6 01       	movw	r24, r12
    70ba:	0e 94 58 34 	call	0x68b0	; 0x68b0 <FormatTotalizerMoney>
		  FormatTotalizerMoney(strLastMoney);
    70be:	c7 01       	movw	r24, r14
    70c0:	0e 94 58 34 	call	0x68b0	; 0x68b0 <FormatTotalizerMoney>

		  FormatTotalizerVolume(strDeltaVolume);
    70c4:	8b e0       	ldi	r24, 0x0B	; 11
    70c6:	99 e0       	ldi	r25, 0x09	; 9
    70c8:	0e 94 4a 34 	call	0x6894	; 0x6894 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strLastVolume);
    70cc:	c8 01       	movw	r24, r16
    70ce:	0e 94 4a 34 	call	0x6894	; 0x6894 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strCurrentVolume); 
    70d2:	c5 01       	movw	r24, r10
    70d4:	0e 94 4a 34 	call	0x6894	; 0x6894 <FormatTotalizerVolume>

          FormatCurrency(strDeltaMoney);
    70d8:	83 e3       	ldi	r24, 0x33	; 51
    70da:	9c e0       	ldi	r25, 0x0C	; 12
    70dc:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
		  FormatCurrency(strCurrentMoney);
    70e0:	c6 01       	movw	r24, r12
    70e2:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
		  FormatCurrency(strLastMoney);
    70e6:	c7 01       	movw	r24, r14
    70e8:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>

		  FormatCurrency(strDeltaVolume);		  
    70ec:	8b e0       	ldi	r24, 0x0B	; 11
    70ee:	99 e0       	ldi	r25, 0x09	; 9
    70f0:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
		  FormatCurrency(strLastVolume);
    70f4:	c8 01       	movw	r24, r16
    70f6:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
          FormatCurrency(strCurrentVolume);
    70fa:	c5 01       	movw	r24, r10
    70fc:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>


          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    7100:	81 e0       	ldi	r24, 0x01	; 1
    7102:	62 ef       	ldi	r22, 0xF2	; 242
    7104:	73 e0       	ldi	r23, 0x03	; 3
    7106:	41 e0       	ldi	r20, 0x01	; 1
    7108:	28 ed       	ldi	r18, 0xD8	; 216
    710a:	31 e0       	ldi	r19, 0x01	; 1
    710c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7110:	8b e0       	ldi	r24, 0x0B	; 11
    7112:	62 ef       	ldi	r22, 0xF2	; 242
    7114:	73 e0       	ldi	r23, 0x03	; 3
    7116:	48 e2       	ldi	r20, 0x28	; 40
    7118:	28 ed       	ldi	r18, 0xD8	; 216
    711a:	31 e0       	ldi	r19, 0x01	; 1
    711c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7120:	83 e0       	ldi	r24, 0x03	; 3
    7122:	62 ef       	ldi	r22, 0xF2	; 242
    7124:	73 e0       	ldi	r23, 0x03	; 3
    7126:	41 e0       	ldi	r20, 0x01	; 1
    7128:	28 ed       	ldi	r18, 0xD8	; 216
    712a:	31 e0       	ldi	r19, 0x01	; 1
    712c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7130:	8c e0       	ldi	r24, 0x0C	; 12
    7132:	62 ef       	ldi	r22, 0xF2	; 242
    7134:	73 e0       	ldi	r23, 0x03	; 3
    7136:	41 e0       	ldi	r20, 0x01	; 1
    7138:	28 ed       	ldi	r18, 0xD8	; 216
    713a:	31 e0       	ldi	r19, 0x01	; 1
    713c:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
          if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    7140:	8c e3       	ldi	r24, 0x3C	; 60
    7142:	91 e0       	ldi	r25, 0x01	; 1
    7144:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    7148:	15 ea       	ldi	r17, 0xA5	; 165
    714a:	c1 2e       	mov	r12, r17
    714c:	d1 2c       	mov	r13, r1
    714e:	cc 0e       	add	r12, r28
    7150:	dd 1e       	adc	r13, r29
    7152:	b4 e6       	ldi	r27, 0x64	; 100
    7154:	ab 2e       	mov	r10, r27
    7156:	b7 e0       	ldi	r27, 0x07	; 7
    7158:	bb 2e       	mov	r11, r27
    715a:	82 30       	cpi	r24, 0x02	; 2
    715c:	09 f0       	breq	.+2      	; 0x7160 <systemGenerateReport+0x840>
    715e:	6a c0       	rjmp	.+212    	; 0x7234 <systemGenerateReport+0x914>
		      GetProductPrice(sPrice,PumpNum,PumpNozzle);
    7160:	af e0       	ldi	r26, 0x0F	; 15
    7162:	ea 2e       	mov	r14, r26
    7164:	f1 2c       	mov	r15, r1
    7166:	ec 0e       	add	r14, r28
    7168:	fd 1e       	adc	r15, r29
    716a:	c7 01       	movw	r24, r14
    716c:	60 91 e6 01 	lds	r22, 0x01E6
    7170:	40 91 e5 01 	lds	r20, 0x01E5
    7174:	0e 94 71 24 	call	0x48e2	; 0x48e2 <GetProductPrice>
			  sprintf_P(strProductPrice,PSTR("Harga: Rp.%s"),sPrice);
    7178:	00 d0       	rcall	.+0      	; 0x717a <systemGenerateReport+0x85a>
    717a:	00 d0       	rcall	.+0      	; 0x717c <systemGenerateReport+0x85c>
    717c:	00 d0       	rcall	.+0      	; 0x717e <systemGenerateReport+0x85e>
    717e:	ed b7       	in	r30, 0x3d	; 61
    7180:	fe b7       	in	r31, 0x3e	; 62
    7182:	31 96       	adiw	r30, 0x01	; 1
    7184:	8e 01       	movw	r16, r28
    7186:	0f 56       	subi	r16, 0x6F	; 111
    7188:	1f 4f       	sbci	r17, 0xFF	; 255
    718a:	ad b7       	in	r26, 0x3d	; 61
    718c:	be b7       	in	r27, 0x3e	; 62
    718e:	12 96       	adiw	r26, 0x02	; 2
    7190:	1c 93       	st	X, r17
    7192:	0e 93       	st	-X, r16
    7194:	11 97       	sbiw	r26, 0x01	; 1
    7196:	88 e3       	ldi	r24, 0x38	; 56
    7198:	96 e0       	ldi	r25, 0x06	; 6
    719a:	93 83       	std	Z+3, r25	; 0x03
    719c:	82 83       	std	Z+2, r24	; 0x02
    719e:	f5 82       	std	Z+5, r15	; 0x05
    71a0:	e4 82       	std	Z+4, r14	; 0x04
    71a2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

		      GetTabSpace(((17+10-strlen(strProduct))-strlen(strProductPrice)),strTabSpace2);
    71a6:	d5 01       	movw	r26, r10
    71a8:	0d 90       	ld	r0, X+
    71aa:	00 20       	and	r0, r0
    71ac:	e9 f7       	brne	.-6      	; 0x71a8 <systemGenerateReport+0x888>
    71ae:	11 97       	sbiw	r26, 0x01	; 1
    71b0:	aa 19       	sub	r26, r10
    71b2:	bb 09       	sbc	r27, r11
    71b4:	f8 01       	movw	r30, r16
    71b6:	01 90       	ld	r0, Z+
    71b8:	00 20       	and	r0, r0
    71ba:	e9 f7       	brne	.-6      	; 0x71b6 <systemGenerateReport+0x896>
    71bc:	31 97       	sbiw	r30, 0x01	; 1
    71be:	8d b7       	in	r24, 0x3d	; 61
    71c0:	9e b7       	in	r25, 0x3e	; 62
    71c2:	06 96       	adiw	r24, 0x06	; 6
    71c4:	0f b6       	in	r0, 0x3f	; 63
    71c6:	f8 94       	cli
    71c8:	9e bf       	out	0x3e, r25	; 62
    71ca:	0f be       	out	0x3f, r0	; 63
    71cc:	8d bf       	out	0x3d, r24	; 61
    71ce:	80 2f       	mov	r24, r16
    71d0:	8e 1b       	sub	r24, r30
    71d2:	8a 1b       	sub	r24, r26
    71d4:	fd e7       	ldi	r31, 0x7D	; 125
    71d6:	ef 2e       	mov	r14, r31
    71d8:	f1 2c       	mov	r15, r1
    71da:	ec 0e       	add	r14, r28
    71dc:	fd 1e       	adc	r15, r29
    71de:	85 5e       	subi	r24, 0xE5	; 229
    71e0:	b7 01       	movw	r22, r14
    71e2:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
		      sprintf_P(strReport,PSTR("P%d.%d - %s %s %s"),PumpNum,PumpNozzle,strProduct,strTabSpace2,strProductPrice);
    71e6:	ad b7       	in	r26, 0x3d	; 61
    71e8:	be b7       	in	r27, 0x3e	; 62
    71ea:	1e 97       	sbiw	r26, 0x0e	; 14
    71ec:	0f b6       	in	r0, 0x3f	; 63
    71ee:	f8 94       	cli
    71f0:	be bf       	out	0x3e, r27	; 62
    71f2:	0f be       	out	0x3f, r0	; 63
    71f4:	ad bf       	out	0x3d, r26	; 61
    71f6:	ed b7       	in	r30, 0x3d	; 61
    71f8:	fe b7       	in	r31, 0x3e	; 62
    71fa:	31 96       	adiw	r30, 0x01	; 1
    71fc:	12 96       	adiw	r26, 0x02	; 2
    71fe:	dc 92       	st	X, r13
    7200:	ce 92       	st	-X, r12
    7202:	11 97       	sbiw	r26, 0x01	; 1
    7204:	86 e2       	ldi	r24, 0x26	; 38
    7206:	96 e0       	ldi	r25, 0x06	; 6
    7208:	93 83       	std	Z+3, r25	; 0x03
    720a:	82 83       	std	Z+2, r24	; 0x02
    720c:	80 91 e6 01 	lds	r24, 0x01E6
    7210:	84 83       	std	Z+4, r24	; 0x04
    7212:	15 82       	std	Z+5, r1	; 0x05
    7214:	80 91 e5 01 	lds	r24, 0x01E5
    7218:	86 83       	std	Z+6, r24	; 0x06
    721a:	17 82       	std	Z+7, r1	; 0x07
    721c:	b1 86       	std	Z+9, r11	; 0x09
    721e:	a0 86       	std	Z+8, r10	; 0x08
    7220:	f3 86       	std	Z+11, r15	; 0x0b
    7222:	e2 86       	std	Z+10, r14	; 0x0a
    7224:	15 87       	std	Z+13, r17	; 0x0d
    7226:	04 87       	std	Z+12, r16	; 0x0c
    7228:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    722c:	ed b7       	in	r30, 0x3d	; 61
    722e:	fe b7       	in	r31, 0x3e	; 62
    7230:	3e 96       	adiw	r30, 0x0e	; 14
    7232:	24 c0       	rjmp	.+72     	; 0x727c <systemGenerateReport+0x95c>
		  }
		  else sprintf_P(strReport,PSTR("P%d.%d - %s "),PumpNum,PumpNozzle,strProduct);
    7234:	8d b7       	in	r24, 0x3d	; 61
    7236:	9e b7       	in	r25, 0x3e	; 62
    7238:	0a 97       	sbiw	r24, 0x0a	; 10
    723a:	0f b6       	in	r0, 0x3f	; 63
    723c:	f8 94       	cli
    723e:	9e bf       	out	0x3e, r25	; 62
    7240:	0f be       	out	0x3f, r0	; 63
    7242:	8d bf       	out	0x3d, r24	; 61
    7244:	ed b7       	in	r30, 0x3d	; 61
    7246:	fe b7       	in	r31, 0x3e	; 62
    7248:	31 96       	adiw	r30, 0x01	; 1
    724a:	ad b7       	in	r26, 0x3d	; 61
    724c:	be b7       	in	r27, 0x3e	; 62
    724e:	12 96       	adiw	r26, 0x02	; 2
    7250:	dc 92       	st	X, r13
    7252:	ce 92       	st	-X, r12
    7254:	11 97       	sbiw	r26, 0x01	; 1
    7256:	89 e1       	ldi	r24, 0x19	; 25
    7258:	96 e0       	ldi	r25, 0x06	; 6
    725a:	93 83       	std	Z+3, r25	; 0x03
    725c:	82 83       	std	Z+2, r24	; 0x02
    725e:	80 91 e6 01 	lds	r24, 0x01E6
    7262:	84 83       	std	Z+4, r24	; 0x04
    7264:	15 82       	std	Z+5, r1	; 0x05
    7266:	80 91 e5 01 	lds	r24, 0x01E5
    726a:	86 83       	std	Z+6, r24	; 0x06
    726c:	17 82       	std	Z+7, r1	; 0x07
    726e:	b1 86       	std	Z+9, r11	; 0x09
    7270:	a0 86       	std	Z+8, r10	; 0x08
    7272:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7276:	ed b7       	in	r30, 0x3d	; 61
    7278:	fe b7       	in	r31, 0x3e	; 62
    727a:	3a 96       	adiw	r30, 0x0a	; 10
    727c:	0f b6       	in	r0, 0x3f	; 63
    727e:	f8 94       	cli
    7280:	fe bf       	out	0x3e, r31	; 62
    7282:	0f be       	out	0x3f, r0	; 63
    7284:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    7286:	e5 ea       	ldi	r30, 0xA5	; 165
    7288:	8e 2e       	mov	r8, r30
    728a:	91 2c       	mov	r9, r1
    728c:	8c 0e       	add	r8, r28
    728e:	9d 1e       	adc	r9, r29
    7290:	c4 01       	movw	r24, r8
    7292:	62 ef       	ldi	r22, 0xF2	; 242
    7294:	73 e0       	ldi	r23, 0x03	; 3
    7296:	48 ed       	ldi	r20, 0xD8	; 216
    7298:	51 e0       	ldi	r21, 0x01	; 1
    729a:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>
          InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    729e:	84 e0       	ldi	r24, 0x04	; 4
    72a0:	62 ef       	ldi	r22, 0xF2	; 242
    72a2:	73 e0       	ldi	r23, 0x03	; 3
    72a4:	41 e0       	ldi	r20, 0x01	; 1
    72a6:	28 ed       	ldi	r18, 0xD8	; 216
    72a8:	31 e0       	ldi	r19, 0x01	; 1
    72aa:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    72ae:	8b e0       	ldi	r24, 0x0B	; 11
    72b0:	62 ef       	ldi	r22, 0xF2	; 242
    72b2:	73 e0       	ldi	r23, 0x03	; 3
    72b4:	48 e2       	ldi	r20, 0x28	; 40
    72b6:	28 ed       	ldi	r18, 0xD8	; 216
    72b8:	31 e0       	ldi	r19, 0x01	; 1
    72ba:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    72be:	86 e0       	ldi	r24, 0x06	; 6
    72c0:	62 ef       	ldi	r22, 0xF2	; 242
    72c2:	73 e0       	ldi	r23, 0x03	; 3
    72c4:	41 e0       	ldi	r20, 0x01	; 1
    72c6:	28 ed       	ldi	r18, 0xD8	; 216
    72c8:	31 e0       	ldi	r19, 0x01	; 1
    72ca:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    72ce:	8c e0       	ldi	r24, 0x0C	; 12
    72d0:	62 ef       	ldi	r22, 0xF2	; 242
    72d2:	73 e0       	ldi	r23, 0x03	; 3
    72d4:	41 e0       	ldi	r20, 0x01	; 1
    72d6:	28 ed       	ldi	r18, 0xD8	; 216
    72d8:	31 e0       	ldi	r19, 0x01	; 1
    72da:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>

		  GetTabSpace((17-strlen(strCurrentVolume)),strTabSpace);
    72de:	77 e3       	ldi	r23, 0x37	; 55
    72e0:	e7 2e       	mov	r14, r23
    72e2:	f1 2c       	mov	r15, r1
    72e4:	ec 0e       	add	r14, r28
    72e6:	fd 1e       	adc	r15, r29
    72e8:	f7 01       	movw	r30, r14
    72ea:	01 90       	ld	r0, Z+
    72ec:	00 20       	and	r0, r0
    72ee:	e9 f7       	brne	.-6      	; 0x72ea <systemGenerateReport+0x9ca>
    72f0:	8e 2d       	mov	r24, r14
    72f2:	8e 1b       	sub	r24, r30
    72f4:	69 e6       	ldi	r22, 0x69	; 105
    72f6:	c6 2e       	mov	r12, r22
    72f8:	d1 2c       	mov	r13, r1
    72fa:	cc 0e       	add	r12, r28
    72fc:	dd 1e       	adc	r13, r29
    72fe:	8e 5e       	subi	r24, 0xEE	; 238
    7300:	b6 01       	movw	r22, r12
    7302:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
		  GetTabSpace((15-strlen(strCurrentMoney)),strTabSpace2);
    7306:	8e 01       	movw	r16, r28
    7308:	0a 5b       	subi	r16, 0xBA	; 186
    730a:	1f 4f       	sbci	r17, 0xFF	; 255
    730c:	f8 01       	movw	r30, r16
    730e:	01 90       	ld	r0, Z+
    7310:	00 20       	and	r0, r0
    7312:	e9 f7       	brne	.-6      	; 0x730e <systemGenerateReport+0x9ee>
    7314:	80 2f       	mov	r24, r16
    7316:	8e 1b       	sub	r24, r30
    7318:	5d e7       	ldi	r21, 0x7D	; 125
    731a:	a5 2e       	mov	r10, r21
    731c:	b1 2c       	mov	r11, r1
    731e:	ac 0e       	add	r10, r28
    7320:	bd 1e       	adc	r11, r29
    7322:	80 5f       	subi	r24, 0xF0	; 240
    7324:	b5 01       	movw	r22, r10
    7326:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True) sprintf_P(strReport,PSTR("Akhir:%s%s%s%s"),strTabSpace,strCurrentVolume,strTabSpace2,strCurrentMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    732a:	87 ec       	ldi	r24, 0xC7	; 199
    732c:	93 e0       	ldi	r25, 0x03	; 3
    732e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    7332:	81 30       	cpi	r24, 0x01	; 1
    7334:	19 f5       	brne	.+70     	; 0x737c <systemGenerateReport+0xa5c>
    7336:	8d b7       	in	r24, 0x3d	; 61
    7338:	9e b7       	in	r25, 0x3e	; 62
    733a:	0c 97       	sbiw	r24, 0x0c	; 12
    733c:	0f b6       	in	r0, 0x3f	; 63
    733e:	f8 94       	cli
    7340:	9e bf       	out	0x3e, r25	; 62
    7342:	0f be       	out	0x3f, r0	; 63
    7344:	8d bf       	out	0x3d, r24	; 61
    7346:	ed b7       	in	r30, 0x3d	; 61
    7348:	fe b7       	in	r31, 0x3e	; 62
    734a:	31 96       	adiw	r30, 0x01	; 1
    734c:	ad b7       	in	r26, 0x3d	; 61
    734e:	be b7       	in	r27, 0x3e	; 62
    7350:	12 96       	adiw	r26, 0x02	; 2
    7352:	9c 92       	st	X, r9
    7354:	8e 92       	st	-X, r8
    7356:	11 97       	sbiw	r26, 0x01	; 1
    7358:	8a e0       	ldi	r24, 0x0A	; 10
    735a:	96 e0       	ldi	r25, 0x06	; 6
    735c:	93 83       	std	Z+3, r25	; 0x03
    735e:	82 83       	std	Z+2, r24	; 0x02
    7360:	d5 82       	std	Z+5, r13	; 0x05
    7362:	c4 82       	std	Z+4, r12	; 0x04
    7364:	f7 82       	std	Z+7, r15	; 0x07
    7366:	e6 82       	std	Z+6, r14	; 0x06
    7368:	b1 86       	std	Z+9, r11	; 0x09
    736a:	a0 86       	std	Z+8, r10	; 0x08
    736c:	13 87       	std	Z+11, r17	; 0x0b
    736e:	02 87       	std	Z+10, r16	; 0x0a
    7370:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7374:	ed b7       	in	r30, 0x3d	; 61
    7376:	fe b7       	in	r31, 0x3e	; 62
    7378:	3c 96       	adiw	r30, 0x0c	; 12
    737a:	1e c0       	rjmp	.+60     	; 0x73b8 <systemGenerateReport+0xa98>
		  else sprintf_P(strReport,PSTR("Akhir:%s%s"),strTabSpace,strCurrentVolume);
    737c:	8d b7       	in	r24, 0x3d	; 61
    737e:	9e b7       	in	r25, 0x3e	; 62
    7380:	08 97       	sbiw	r24, 0x08	; 8
    7382:	0f b6       	in	r0, 0x3f	; 63
    7384:	f8 94       	cli
    7386:	9e bf       	out	0x3e, r25	; 62
    7388:	0f be       	out	0x3f, r0	; 63
    738a:	8d bf       	out	0x3d, r24	; 61
    738c:	ed b7       	in	r30, 0x3d	; 61
    738e:	fe b7       	in	r31, 0x3e	; 62
    7390:	31 96       	adiw	r30, 0x01	; 1
    7392:	ad b7       	in	r26, 0x3d	; 61
    7394:	be b7       	in	r27, 0x3e	; 62
    7396:	12 96       	adiw	r26, 0x02	; 2
    7398:	9c 92       	st	X, r9
    739a:	8e 92       	st	-X, r8
    739c:	11 97       	sbiw	r26, 0x01	; 1
    739e:	8f ef       	ldi	r24, 0xFF	; 255
    73a0:	95 e0       	ldi	r25, 0x05	; 5
    73a2:	93 83       	std	Z+3, r25	; 0x03
    73a4:	82 83       	std	Z+2, r24	; 0x02
    73a6:	d5 82       	std	Z+5, r13	; 0x05
    73a8:	c4 82       	std	Z+4, r12	; 0x04
    73aa:	f7 82       	std	Z+7, r15	; 0x07
    73ac:	e6 82       	std	Z+6, r14	; 0x06
    73ae:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    73b2:	ed b7       	in	r30, 0x3d	; 61
    73b4:	fe b7       	in	r31, 0x3e	; 62
    73b6:	38 96       	adiw	r30, 0x08	; 8
    73b8:	0f b6       	in	r0, 0x3f	; 63
    73ba:	f8 94       	cli
    73bc:	fe bf       	out	0x3e, r31	; 62
    73be:	0f be       	out	0x3f, r0	; 63
    73c0:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    73c2:	45 ea       	ldi	r20, 0xA5	; 165
    73c4:	a4 2e       	mov	r10, r20
    73c6:	b1 2c       	mov	r11, r1
    73c8:	ac 0e       	add	r10, r28
    73ca:	bd 1e       	adc	r11, r29
    73cc:	c5 01       	movw	r24, r10
    73ce:	62 ef       	ldi	r22, 0xF2	; 242
    73d0:	73 e0       	ldi	r23, 0x03	; 3
    73d2:	48 ed       	ldi	r20, 0xD8	; 216
    73d4:	51 e0       	ldi	r21, 0x01	; 1
    73d6:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>

		  GetTabSpace((17-strlen(strLastVolume)),strTabSpace);
    73da:	39 e1       	ldi	r19, 0x19	; 25
    73dc:	e3 2e       	mov	r14, r19
    73de:	f1 2c       	mov	r15, r1
    73e0:	ec 0e       	add	r14, r28
    73e2:	fd 1e       	adc	r15, r29
    73e4:	f7 01       	movw	r30, r14
    73e6:	01 90       	ld	r0, Z+
    73e8:	00 20       	and	r0, r0
    73ea:	e9 f7       	brne	.-6      	; 0x73e6 <systemGenerateReport+0xac6>
    73ec:	8e 2d       	mov	r24, r14
    73ee:	8e 1b       	sub	r24, r30
    73f0:	29 e6       	ldi	r18, 0x69	; 105
    73f2:	c2 2e       	mov	r12, r18
    73f4:	d1 2c       	mov	r13, r1
    73f6:	cc 0e       	add	r12, r28
    73f8:	dd 1e       	adc	r13, r29
    73fa:	8e 5e       	subi	r24, 0xEE	; 238
    73fc:	b6 01       	movw	r22, r12
    73fe:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
		  GetTabSpace((15-strlen(strLastMoney)),strTabSpace2);
    7402:	8e 01       	movw	r16, r28
    7404:	08 5d       	subi	r16, 0xD8	; 216
    7406:	1f 4f       	sbci	r17, 0xFF	; 255
    7408:	f8 01       	movw	r30, r16
    740a:	01 90       	ld	r0, Z+
    740c:	00 20       	and	r0, r0
    740e:	e9 f7       	brne	.-6      	; 0x740a <systemGenerateReport+0xaea>
    7410:	80 2f       	mov	r24, r16
    7412:	8e 1b       	sub	r24, r30
    7414:	9d e7       	ldi	r25, 0x7D	; 125
    7416:	89 2e       	mov	r8, r25
    7418:	91 2c       	mov	r9, r1
    741a:	8c 0e       	add	r8, r28
    741c:	9d 1e       	adc	r9, r29
    741e:	80 5f       	subi	r24, 0xF0	; 240
    7420:	b4 01       	movw	r22, r8
    7422:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("Awal :%s%s%s%s"),strTabSpace,strLastVolume,strTabSpace2,strLastMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7426:	87 ec       	ldi	r24, 0xC7	; 199
    7428:	93 e0       	ldi	r25, 0x03	; 3
    742a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    742e:	81 30       	cpi	r24, 0x01	; 1
    7430:	19 f5       	brne	.+70     	; 0x7478 <systemGenerateReport+0xb58>
    7432:	8d b7       	in	r24, 0x3d	; 61
    7434:	9e b7       	in	r25, 0x3e	; 62
    7436:	0c 97       	sbiw	r24, 0x0c	; 12
    7438:	0f b6       	in	r0, 0x3f	; 63
    743a:	f8 94       	cli
    743c:	9e bf       	out	0x3e, r25	; 62
    743e:	0f be       	out	0x3f, r0	; 63
    7440:	8d bf       	out	0x3d, r24	; 61
    7442:	ed b7       	in	r30, 0x3d	; 61
    7444:	fe b7       	in	r31, 0x3e	; 62
    7446:	31 96       	adiw	r30, 0x01	; 1
    7448:	ad b7       	in	r26, 0x3d	; 61
    744a:	be b7       	in	r27, 0x3e	; 62
    744c:	12 96       	adiw	r26, 0x02	; 2
    744e:	bc 92       	st	X, r11
    7450:	ae 92       	st	-X, r10
    7452:	11 97       	sbiw	r26, 0x01	; 1
    7454:	80 ef       	ldi	r24, 0xF0	; 240
    7456:	95 e0       	ldi	r25, 0x05	; 5
    7458:	93 83       	std	Z+3, r25	; 0x03
    745a:	82 83       	std	Z+2, r24	; 0x02
    745c:	d5 82       	std	Z+5, r13	; 0x05
    745e:	c4 82       	std	Z+4, r12	; 0x04
    7460:	f7 82       	std	Z+7, r15	; 0x07
    7462:	e6 82       	std	Z+6, r14	; 0x06
    7464:	91 86       	std	Z+9, r9	; 0x09
    7466:	80 86       	std	Z+8, r8	; 0x08
    7468:	13 87       	std	Z+11, r17	; 0x0b
    746a:	02 87       	std	Z+10, r16	; 0x0a
    746c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7470:	ed b7       	in	r30, 0x3d	; 61
    7472:	fe b7       	in	r31, 0x3e	; 62
    7474:	3c 96       	adiw	r30, 0x0c	; 12
    7476:	1e c0       	rjmp	.+60     	; 0x74b4 <systemGenerateReport+0xb94>
		  else sprintf_P(strReport,PSTR("Awal :%s%s"),strTabSpace,strLastVolume);
    7478:	8d b7       	in	r24, 0x3d	; 61
    747a:	9e b7       	in	r25, 0x3e	; 62
    747c:	08 97       	sbiw	r24, 0x08	; 8
    747e:	0f b6       	in	r0, 0x3f	; 63
    7480:	f8 94       	cli
    7482:	9e bf       	out	0x3e, r25	; 62
    7484:	0f be       	out	0x3f, r0	; 63
    7486:	8d bf       	out	0x3d, r24	; 61
    7488:	ed b7       	in	r30, 0x3d	; 61
    748a:	fe b7       	in	r31, 0x3e	; 62
    748c:	31 96       	adiw	r30, 0x01	; 1
    748e:	ad b7       	in	r26, 0x3d	; 61
    7490:	be b7       	in	r27, 0x3e	; 62
    7492:	12 96       	adiw	r26, 0x02	; 2
    7494:	bc 92       	st	X, r11
    7496:	ae 92       	st	-X, r10
    7498:	11 97       	sbiw	r26, 0x01	; 1
    749a:	85 ee       	ldi	r24, 0xE5	; 229
    749c:	95 e0       	ldi	r25, 0x05	; 5
    749e:	93 83       	std	Z+3, r25	; 0x03
    74a0:	82 83       	std	Z+2, r24	; 0x02
    74a2:	d5 82       	std	Z+5, r13	; 0x05
    74a4:	c4 82       	std	Z+4, r12	; 0x04
    74a6:	f7 82       	std	Z+7, r15	; 0x07
    74a8:	e6 82       	std	Z+6, r14	; 0x06
    74aa:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    74ae:	ed b7       	in	r30, 0x3d	; 61
    74b0:	fe b7       	in	r31, 0x3e	; 62
    74b2:	38 96       	adiw	r30, 0x08	; 8
    74b4:	0f b6       	in	r0, 0x3f	; 63
    74b6:	f8 94       	cli
    74b8:	fe bf       	out	0x3e, r31	; 62
    74ba:	0f be       	out	0x3f, r0	; 63
    74bc:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    74be:	8e 01       	movw	r16, r28
    74c0:	0b 55       	subi	r16, 0x5B	; 91
    74c2:	1f 4f       	sbci	r17, 0xFF	; 255
    74c4:	c8 01       	movw	r24, r16
    74c6:	62 ef       	ldi	r22, 0xF2	; 242
    74c8:	73 e0       	ldi	r23, 0x03	; 3
    74ca:	48 ed       	ldi	r20, 0xD8	; 216
    74cc:	51 e0       	ldi	r21, 0x01	; 1
    74ce:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>

		  GetTabSpace(12,strTabSpace);
    74d2:	b9 e6       	ldi	r27, 0x69	; 105
    74d4:	eb 2e       	mov	r14, r27
    74d6:	f1 2c       	mov	r15, r1
    74d8:	ec 0e       	add	r14, r28
    74da:	fd 1e       	adc	r15, r29
    74dc:	8c e0       	ldi	r24, 0x0C	; 12
    74de:	b7 01       	movw	r22, r14
    74e0:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
          //PrintMoney
          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s-----------   -------------"),strTabSpace);//CreateReport(strReport,PrintBuffer,&RepPos);
    74e4:	87 ec       	ldi	r24, 0xC7	; 199
    74e6:	93 e0       	ldi	r25, 0x03	; 3
    74e8:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    74ec:	81 30       	cpi	r24, 0x01	; 1
    74ee:	79 f4       	brne	.+30     	; 0x750e <systemGenerateReport+0xbee>
    74f0:	00 d0       	rcall	.+0      	; 0x74f2 <systemGenerateReport+0xbd2>
    74f2:	00 d0       	rcall	.+0      	; 0x74f4 <systemGenerateReport+0xbd4>
    74f4:	00 d0       	rcall	.+0      	; 0x74f6 <systemGenerateReport+0xbd6>
    74f6:	ed b7       	in	r30, 0x3d	; 61
    74f8:	fe b7       	in	r31, 0x3e	; 62
    74fa:	31 96       	adiw	r30, 0x01	; 1
    74fc:	ad b7       	in	r26, 0x3d	; 61
    74fe:	be b7       	in	r27, 0x3e	; 62
    7500:	12 96       	adiw	r26, 0x02	; 2
    7502:	1c 93       	st	X, r17
    7504:	0e 93       	st	-X, r16
    7506:	11 97       	sbiw	r26, 0x01	; 1
    7508:	87 ec       	ldi	r24, 0xC7	; 199
    750a:	95 e0       	ldi	r25, 0x05	; 5
    750c:	0e c0       	rjmp	.+28     	; 0x752a <systemGenerateReport+0xc0a>
		  else sprintf_P(strReport,PSTR("%s-----------                "),strTabSpace);CreateReport(strReport,PrintBuffer,&RepPos);
    750e:	00 d0       	rcall	.+0      	; 0x7510 <systemGenerateReport+0xbf0>
    7510:	00 d0       	rcall	.+0      	; 0x7512 <systemGenerateReport+0xbf2>
    7512:	00 d0       	rcall	.+0      	; 0x7514 <systemGenerateReport+0xbf4>
    7514:	ed b7       	in	r30, 0x3d	; 61
    7516:	fe b7       	in	r31, 0x3e	; 62
    7518:	31 96       	adiw	r30, 0x01	; 1
    751a:	ad b7       	in	r26, 0x3d	; 61
    751c:	be b7       	in	r27, 0x3e	; 62
    751e:	12 96       	adiw	r26, 0x02	; 2
    7520:	1c 93       	st	X, r17
    7522:	0e 93       	st	-X, r16
    7524:	11 97       	sbiw	r26, 0x01	; 1
    7526:	89 ea       	ldi	r24, 0xA9	; 169
    7528:	95 e0       	ldi	r25, 0x05	; 5
    752a:	93 83       	std	Z+3, r25	; 0x03
    752c:	82 83       	std	Z+2, r24	; 0x02
    752e:	f5 82       	std	Z+5, r15	; 0x05
    7530:	e4 82       	std	Z+4, r14	; 0x04
    7532:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7536:	ed b7       	in	r30, 0x3d	; 61
    7538:	fe b7       	in	r31, 0x3e	; 62
    753a:	36 96       	adiw	r30, 0x06	; 6
    753c:	0f b6       	in	r0, 0x3f	; 63
    753e:	f8 94       	cli
    7540:	fe bf       	out	0x3e, r31	; 62
    7542:	0f be       	out	0x3f, r0	; 63
    7544:	ed bf       	out	0x3d, r30	; 61
    7546:	a5 ea       	ldi	r26, 0xA5	; 165
    7548:	ea 2e       	mov	r14, r26
    754a:	f1 2c       	mov	r15, r1
    754c:	ec 0e       	add	r14, r28
    754e:	fd 1e       	adc	r15, r29
    7550:	c7 01       	movw	r24, r14
    7552:	62 ef       	ldi	r22, 0xF2	; 242
    7554:	73 e0       	ldi	r23, 0x03	; 3
    7556:	48 ed       	ldi	r20, 0xD8	; 216
    7558:	51 e0       	ldi	r21, 0x01	; 1
    755a:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>

		  GetTabSpace((23-strlen(strDeltaVolume)),strTabSpace);
    755e:	fb e0       	ldi	r31, 0x0B	; 11
    7560:	cf 2e       	mov	r12, r31
    7562:	f9 e0       	ldi	r31, 0x09	; 9
    7564:	df 2e       	mov	r13, r31
    7566:	f6 01       	movw	r30, r12
    7568:	01 90       	ld	r0, Z+
    756a:	00 20       	and	r0, r0
    756c:	e9 f7       	brne	.-6      	; 0x7568 <systemGenerateReport+0xc48>
    756e:	31 97       	sbiw	r30, 0x01	; 1
    7570:	ec 19       	sub	r30, r12
    7572:	fd 09       	sbc	r31, r13
    7574:	8e 01       	movw	r16, r28
    7576:	07 59       	subi	r16, 0x97	; 151
    7578:	1f 4f       	sbci	r17, 0xFF	; 255
    757a:	87 e1       	ldi	r24, 0x17	; 23
    757c:	8e 1b       	sub	r24, r30
    757e:	b8 01       	movw	r22, r16
    7580:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
		  GetTabSpace((15-strlen(strDeltaMoney)),strTabSpace2);
    7584:	e3 e3       	ldi	r30, 0x33	; 51
    7586:	8e 2e       	mov	r8, r30
    7588:	ec e0       	ldi	r30, 0x0C	; 12
    758a:	9e 2e       	mov	r9, r30
    758c:	f4 01       	movw	r30, r8
    758e:	01 90       	ld	r0, Z+
    7590:	00 20       	and	r0, r0
    7592:	e9 f7       	brne	.-6      	; 0x758e <systemGenerateReport+0xc6e>
    7594:	31 97       	sbiw	r30, 0x01	; 1
    7596:	e8 19       	sub	r30, r8
    7598:	f9 09       	sbc	r31, r9
    759a:	7d e7       	ldi	r23, 0x7D	; 125
    759c:	a7 2e       	mov	r10, r23
    759e:	b1 2c       	mov	r11, r1
    75a0:	ac 0e       	add	r10, r28
    75a2:	bd 1e       	adc	r11, r29
    75a4:	8f e0       	ldi	r24, 0x0F	; 15
    75a6:	8e 1b       	sub	r24, r30
    75a8:	b5 01       	movw	r22, r10
    75aa:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s%s%s%s"),strTabSpace,strDeltaVolume,strTabSpace2,strDeltaMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    75ae:	87 ec       	ldi	r24, 0xC7	; 199
    75b0:	93 e0       	ldi	r25, 0x03	; 3
    75b2:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    75b6:	81 30       	cpi	r24, 0x01	; 1
    75b8:	19 f5       	brne	.+70     	; 0x7600 <systemGenerateReport+0xce0>
    75ba:	8d b7       	in	r24, 0x3d	; 61
    75bc:	9e b7       	in	r25, 0x3e	; 62
    75be:	0c 97       	sbiw	r24, 0x0c	; 12
    75c0:	0f b6       	in	r0, 0x3f	; 63
    75c2:	f8 94       	cli
    75c4:	9e bf       	out	0x3e, r25	; 62
    75c6:	0f be       	out	0x3f, r0	; 63
    75c8:	8d bf       	out	0x3d, r24	; 61
    75ca:	ed b7       	in	r30, 0x3d	; 61
    75cc:	fe b7       	in	r31, 0x3e	; 62
    75ce:	31 96       	adiw	r30, 0x01	; 1
    75d0:	ad b7       	in	r26, 0x3d	; 61
    75d2:	be b7       	in	r27, 0x3e	; 62
    75d4:	12 96       	adiw	r26, 0x02	; 2
    75d6:	fc 92       	st	X, r15
    75d8:	ee 92       	st	-X, r14
    75da:	11 97       	sbiw	r26, 0x01	; 1
    75dc:	80 ea       	ldi	r24, 0xA0	; 160
    75de:	95 e0       	ldi	r25, 0x05	; 5
    75e0:	93 83       	std	Z+3, r25	; 0x03
    75e2:	82 83       	std	Z+2, r24	; 0x02
    75e4:	15 83       	std	Z+5, r17	; 0x05
    75e6:	04 83       	std	Z+4, r16	; 0x04
    75e8:	d7 82       	std	Z+7, r13	; 0x07
    75ea:	c6 82       	std	Z+6, r12	; 0x06
    75ec:	b1 86       	std	Z+9, r11	; 0x09
    75ee:	a0 86       	std	Z+8, r10	; 0x08
    75f0:	93 86       	std	Z+11, r9	; 0x0b
    75f2:	82 86       	std	Z+10, r8	; 0x0a
    75f4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    75f8:	ed b7       	in	r30, 0x3d	; 61
    75fa:	fe b7       	in	r31, 0x3e	; 62
    75fc:	3c 96       	adiw	r30, 0x0c	; 12
    75fe:	1e c0       	rjmp	.+60     	; 0x763c <systemGenerateReport+0xd1c>
          else sprintf_P(strReport,PSTR("%s%s"),strTabSpace,strDeltaVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    7600:	8d b7       	in	r24, 0x3d	; 61
    7602:	9e b7       	in	r25, 0x3e	; 62
    7604:	08 97       	sbiw	r24, 0x08	; 8
    7606:	0f b6       	in	r0, 0x3f	; 63
    7608:	f8 94       	cli
    760a:	9e bf       	out	0x3e, r25	; 62
    760c:	0f be       	out	0x3f, r0	; 63
    760e:	8d bf       	out	0x3d, r24	; 61
    7610:	ed b7       	in	r30, 0x3d	; 61
    7612:	fe b7       	in	r31, 0x3e	; 62
    7614:	31 96       	adiw	r30, 0x01	; 1
    7616:	ad b7       	in	r26, 0x3d	; 61
    7618:	be b7       	in	r27, 0x3e	; 62
    761a:	12 96       	adiw	r26, 0x02	; 2
    761c:	fc 92       	st	X, r15
    761e:	ee 92       	st	-X, r14
    7620:	11 97       	sbiw	r26, 0x01	; 1
    7622:	8b e9       	ldi	r24, 0x9B	; 155
    7624:	95 e0       	ldi	r25, 0x05	; 5
    7626:	93 83       	std	Z+3, r25	; 0x03
    7628:	82 83       	std	Z+2, r24	; 0x02
    762a:	15 83       	std	Z+5, r17	; 0x05
    762c:	04 83       	std	Z+4, r16	; 0x04
    762e:	d7 82       	std	Z+7, r13	; 0x07
    7630:	c6 82       	std	Z+6, r12	; 0x06
    7632:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7636:	ed b7       	in	r30, 0x3d	; 61
    7638:	fe b7       	in	r31, 0x3e	; 62
    763a:	38 96       	adiw	r30, 0x08	; 8
    763c:	0f b6       	in	r0, 0x3f	; 63
    763e:	f8 94       	cli
    7640:	fe bf       	out	0x3e, r31	; 62
    7642:	0f be       	out	0x3f, r0	; 63
    7644:	ed bf       	out	0x3d, r30	; 61
    7646:	ce 01       	movw	r24, r28
    7648:	8b 55       	subi	r24, 0x5B	; 91
    764a:	9f 4f       	sbci	r25, 0xFF	; 255
    764c:	62 ef       	ldi	r22, 0xF2	; 242
    764e:	73 e0       	ldi	r23, 0x03	; 3
    7650:	48 ed       	ldi	r20, 0xD8	; 216
    7652:	51 e0       	ldi	r21, 0x01	; 1
    7654:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>

          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7658:	87 e0       	ldi	r24, 0x07	; 7
    765a:	62 ef       	ldi	r22, 0xF2	; 242
    765c:	73 e0       	ldi	r23, 0x03	; 3
    765e:	41 e0       	ldi	r20, 0x01	; 1
    7660:	28 ed       	ldi	r18, 0xD8	; 216
    7662:	31 e0       	ldi	r19, 0x01	; 1
    7664:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7668:	8b e0       	ldi	r24, 0x0B	; 11
    766a:	62 ef       	ldi	r22, 0xF2	; 242
    766c:	73 e0       	ldi	r23, 0x03	; 3
    766e:	48 e2       	ldi	r20, 0x28	; 40
    7670:	28 ed       	ldi	r18, 0xD8	; 216
    7672:	31 e0       	ldi	r19, 0x01	; 1
    7674:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7678:	89 e0       	ldi	r24, 0x09	; 9
    767a:	62 ef       	ldi	r22, 0xF2	; 242
    767c:	73 e0       	ldi	r23, 0x03	; 3
    767e:	41 e0       	ldi	r20, 0x01	; 1
    7680:	28 ed       	ldi	r18, 0xD8	; 216
    7682:	31 e0       	ldi	r19, 0x01	; 1
    7684:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7688:	8c e0       	ldi	r24, 0x0C	; 12
    768a:	62 ef       	ldi	r22, 0xF2	; 242
    768c:	73 e0       	ldi	r23, 0x03	; 3
    768e:	41 e0       	ldi	r20, 0x01	; 1
    7690:	28 ed       	ldi	r18, 0xD8	; 216
    7692:	31 e0       	ldi	r19, 0x01	; 1
    7694:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>


          cmdPrint=0b00000000;
    7698:	10 92 b7 01 	sts	0x01B7, r1
		  LengthMessage81=RepPos+1;
    769c:	80 91 d8 01 	lds	r24, 0x01D8
    76a0:	90 91 d9 01 	lds	r25, 0x01D9
    76a4:	01 96       	adiw	r24, 0x01	; 1
    76a6:	90 93 8e 01 	sts	0x018E, r25
    76aa:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    76ae:	81 e0       	ldi	r24, 0x01	; 1
    76b0:	80 93 aa 01 	sts	0x01AA, r24
	      IsBusyFreePrinting=True;
    76b4:	80 93 b6 01 	sts	0x01B6, r24

	      stGenerateReport=grWaitPrinted2;
    76b8:	89 e0       	ldi	r24, 0x09	; 9
    76ba:	61 c3       	rjmp	.+1730   	; 0x7d7e <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted2:
	 
          if (IsBusyFreePrinting==False)stGenerateReport=grGenerateReportData;
    76bc:	80 91 b6 01 	lds	r24, 0x01B6
    76c0:	88 23       	and	r24, r24
    76c2:	09 f0       	breq	.+2      	; 0x76c6 <systemGenerateReport+0xda6>
    76c4:	64 c3       	rjmp	.+1736   	; 0x7d8e <systemGenerateReport+0x146e>
    76c6:	86 e0       	ldi	r24, 0x06	; 6
    76c8:	5a c3       	rjmp	.+1716   	; 0x7d7e <systemGenerateReport+0x145e>
	      break;
     case grCreateReportFooter:
          RepPos=0;
    76ca:	10 92 d9 01 	sts	0x01D9, r1
    76ce:	10 92 d8 01 	sts	0x01D8, r1
    76d2:	e2 ef       	ldi	r30, 0xF2	; 242
    76d4:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    76d6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    76d8:	85 e0       	ldi	r24, 0x05	; 5
    76da:	e3 38       	cpi	r30, 0x83	; 131
    76dc:	f8 07       	cpc	r31, r24
    76de:	d9 f7       	brne	.-10     	; 0x76d6 <systemGenerateReport+0xdb6>
    76e0:	fe 01       	movw	r30, r28
    76e2:	eb 55       	subi	r30, 0x5B	; 91
    76e4:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    76e6:	cf 01       	movw	r24, r30
    76e8:	9e 2e       	mov	r9, r30
    76ea:	89 2e       	mov	r8, r25
    76ec:	ce 01       	movw	r24, r28
    76ee:	8b 50       	subi	r24, 0x0B	; 11
    76f0:	9f 4f       	sbci	r25, 0xFF	; 255
    76f2:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    76f4:	e8 17       	cp	r30, r24
    76f6:	f9 07       	cpc	r31, r25
    76f8:	e1 f7       	brne	.-8      	; 0x76f2 <systemGenerateReport+0xdd2>
     case grCreateReportFooter:
          RepPos=0;
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
		  FillChar(strReport,sizeof(strReport),0);

		  RemZeroLead(strTotalMoney);
    76fa:	6e ea       	ldi	r22, 0xAE	; 174
    76fc:	c6 2e       	mov	r12, r22
    76fe:	68 e0       	ldi	r22, 0x08	; 8
    7700:	d6 2e       	mov	r13, r22
    7702:	c6 01       	movw	r24, r12
    7704:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		  RemZeroLead(strTotalVolume);
    7708:	5d ef       	ldi	r21, 0xFD	; 253
    770a:	e5 2e       	mov	r14, r21
    770c:	57 e0       	ldi	r21, 0x07	; 7
    770e:	f5 2e       	mov	r15, r21
    7710:	c7 01       	movw	r24, r14
    7712:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>

		  FormatTotalizerMoney(strTotalMoney);
    7716:	c6 01       	movw	r24, r12
    7718:	0e 94 58 34 	call	0x68b0	; 0x68b0 <FormatTotalizerMoney>
		  FormatCurrency(strTotalMoney);
    771c:	c6 01       	movw	r24, r12
    771e:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
		  FormatTotalizerVolume(strTotalVolume);
    7722:	c7 01       	movw	r24, r14
    7724:	0e 94 4a 34 	call	0x6894	; 0x6894 <FormatTotalizerVolume>
		  FormatCurrency(strTotalVolume);
    7728:	c7 01       	movw	r24, r14
    772a:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>

          //Test
		  //RemZeroLead(strTotalMoney);
		  //RemZeroLead(strTotalVolume);

		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    772e:	81 e0       	ldi	r24, 0x01	; 1
    7730:	62 ef       	ldi	r22, 0xF2	; 242
    7732:	73 e0       	ldi	r23, 0x03	; 3
    7734:	41 e0       	ldi	r20, 0x01	; 1
    7736:	28 ed       	ldi	r18, 0xD8	; 216
    7738:	31 e0       	ldi	r19, 0x01	; 1
    773a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    773e:	8b e0       	ldi	r24, 0x0B	; 11
    7740:	62 ef       	ldi	r22, 0xF2	; 242
    7742:	73 e0       	ldi	r23, 0x03	; 3
    7744:	48 e2       	ldi	r20, 0x28	; 40
    7746:	28 ed       	ldi	r18, 0xD8	; 216
    7748:	31 e0       	ldi	r19, 0x01	; 1
    774a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    774e:	83 e0       	ldi	r24, 0x03	; 3
    7750:	62 ef       	ldi	r22, 0xF2	; 242
    7752:	73 e0       	ldi	r23, 0x03	; 3
    7754:	41 e0       	ldi	r20, 0x01	; 1
    7756:	28 ed       	ldi	r18, 0xD8	; 216
    7758:	31 e0       	ldi	r19, 0x01	; 1
    775a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    775e:	8c e0       	ldi	r24, 0x0C	; 12
    7760:	62 ef       	ldi	r22, 0xF2	; 242
    7762:	73 e0       	ldi	r23, 0x03	; 3
    7764:	41 e0       	ldi	r20, 0x01	; 1
    7766:	28 ed       	ldi	r18, 0xD8	; 216
    7768:	31 e0       	ldi	r19, 0x01	; 1
    776a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
		  GetTabSpace((17-strlen(strTotalVolume)),strTabSpace);
    776e:	f7 01       	movw	r30, r14
    7770:	01 90       	ld	r0, Z+
    7772:	00 20       	and	r0, r0
    7774:	e9 f7       	brne	.-6      	; 0x7770 <systemGenerateReport+0xe50>
    7776:	31 97       	sbiw	r30, 0x01	; 1
    7778:	ee 19       	sub	r30, r14
    777a:	ff 09       	sbc	r31, r15
    777c:	8e 01       	movw	r16, r28
    777e:	07 59       	subi	r16, 0x97	; 151
    7780:	1f 4f       	sbci	r17, 0xFF	; 255
    7782:	81 e1       	ldi	r24, 0x11	; 17
    7784:	8e 1b       	sub	r24, r30
    7786:	b8 01       	movw	r22, r16
    7788:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
		  GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    778c:	f6 01       	movw	r30, r12
    778e:	01 90       	ld	r0, Z+
    7790:	00 20       	and	r0, r0
    7792:	e9 f7       	brne	.-6      	; 0x778e <systemGenerateReport+0xe6e>
    7794:	31 97       	sbiw	r30, 0x01	; 1
    7796:	ec 19       	sub	r30, r12
    7798:	fd 09       	sbc	r31, r13
    779a:	4d e7       	ldi	r20, 0x7D	; 125
    779c:	a4 2e       	mov	r10, r20
    779e:	b1 2c       	mov	r11, r1
    77a0:	ac 0e       	add	r10, r28
    77a2:	bd 1e       	adc	r11, r29
    77a4:	8f e0       	ldi	r24, 0x0F	; 15
    77a6:	8e 1b       	sub	r24, r30
    77a8:	b5 01       	movw	r22, r10
    77aa:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    77ae:	87 ec       	ldi	r24, 0xC7	; 199
    77b0:	93 e0       	ldi	r25, 0x03	; 3
    77b2:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    77b6:	81 30       	cpi	r24, 0x01	; 1
    77b8:	11 f5       	brne	.+68     	; 0x77fe <systemGenerateReport+0xede>
    77ba:	ad b7       	in	r26, 0x3d	; 61
    77bc:	be b7       	in	r27, 0x3e	; 62
    77be:	1c 97       	sbiw	r26, 0x0c	; 12
    77c0:	0f b6       	in	r0, 0x3f	; 63
    77c2:	f8 94       	cli
    77c4:	be bf       	out	0x3e, r27	; 62
    77c6:	0f be       	out	0x3f, r0	; 63
    77c8:	ad bf       	out	0x3d, r26	; 61
    77ca:	ed b7       	in	r30, 0x3d	; 61
    77cc:	fe b7       	in	r31, 0x3e	; 62
    77ce:	31 96       	adiw	r30, 0x01	; 1
    77d0:	11 96       	adiw	r26, 0x01	; 1
    77d2:	9c 92       	st	X, r9
    77d4:	11 97       	sbiw	r26, 0x01	; 1
    77d6:	12 96       	adiw	r26, 0x02	; 2
    77d8:	8c 92       	st	X, r8
    77da:	8c e8       	ldi	r24, 0x8C	; 140
    77dc:	95 e0       	ldi	r25, 0x05	; 5
    77de:	93 83       	std	Z+3, r25	; 0x03
    77e0:	82 83       	std	Z+2, r24	; 0x02
    77e2:	15 83       	std	Z+5, r17	; 0x05
    77e4:	04 83       	std	Z+4, r16	; 0x04
    77e6:	f7 82       	std	Z+7, r15	; 0x07
    77e8:	e6 82       	std	Z+6, r14	; 0x06
    77ea:	b1 86       	std	Z+9, r11	; 0x09
    77ec:	a0 86       	std	Z+8, r10	; 0x08
    77ee:	d3 86       	std	Z+11, r13	; 0x0b
    77f0:	c2 86       	std	Z+10, r12	; 0x0a
    77f2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    77f6:	ed b7       	in	r30, 0x3d	; 61
    77f8:	fe b7       	in	r31, 0x3e	; 62
    77fa:	3c 96       	adiw	r30, 0x0c	; 12
    77fc:	1f c0       	rjmp	.+62     	; 0x783c <systemGenerateReport+0xf1c>
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    77fe:	8d b7       	in	r24, 0x3d	; 61
    7800:	9e b7       	in	r25, 0x3e	; 62
    7802:	08 97       	sbiw	r24, 0x08	; 8
    7804:	0f b6       	in	r0, 0x3f	; 63
    7806:	f8 94       	cli
    7808:	9e bf       	out	0x3e, r25	; 62
    780a:	0f be       	out	0x3f, r0	; 63
    780c:	8d bf       	out	0x3d, r24	; 61
    780e:	ed b7       	in	r30, 0x3d	; 61
    7810:	fe b7       	in	r31, 0x3e	; 62
    7812:	31 96       	adiw	r30, 0x01	; 1
    7814:	ad b7       	in	r26, 0x3d	; 61
    7816:	be b7       	in	r27, 0x3e	; 62
    7818:	11 96       	adiw	r26, 0x01	; 1
    781a:	9c 92       	st	X, r9
    781c:	11 97       	sbiw	r26, 0x01	; 1
    781e:	12 96       	adiw	r26, 0x02	; 2
    7820:	8c 92       	st	X, r8
    7822:	81 e8       	ldi	r24, 0x81	; 129
    7824:	95 e0       	ldi	r25, 0x05	; 5
    7826:	93 83       	std	Z+3, r25	; 0x03
    7828:	82 83       	std	Z+2, r24	; 0x02
    782a:	15 83       	std	Z+5, r17	; 0x05
    782c:	04 83       	std	Z+4, r16	; 0x04
    782e:	f7 82       	std	Z+7, r15	; 0x07
    7830:	e6 82       	std	Z+6, r14	; 0x06
    7832:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7836:	ed b7       	in	r30, 0x3d	; 61
    7838:	fe b7       	in	r31, 0x3e	; 62
    783a:	38 96       	adiw	r30, 0x08	; 8
    783c:	0f b6       	in	r0, 0x3f	; 63
    783e:	f8 94       	cli
    7840:	fe bf       	out	0x3e, r31	; 62
    7842:	0f be       	out	0x3f, r0	; 63
    7844:	ed bf       	out	0x3d, r30	; 61
    7846:	ce 01       	movw	r24, r28
    7848:	8b 55       	subi	r24, 0x5B	; 91
    784a:	9f 4f       	sbci	r25, 0xFF	; 255
    784c:	62 ef       	ldi	r22, 0xF2	; 242
    784e:	73 e0       	ldi	r23, 0x03	; 3
    7850:	48 ed       	ldi	r20, 0xD8	; 216
    7852:	51 e0       	ldi	r21, 0x01	; 1
    7854:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      
    7858:	84 e0       	ldi	r24, 0x04	; 4
    785a:	62 ef       	ldi	r22, 0xF2	; 242
    785c:	73 e0       	ldi	r23, 0x03	; 3
    785e:	41 e0       	ldi	r20, 0x01	; 1
    7860:	28 ed       	ldi	r18, 0xD8	; 216
    7862:	31 e0       	ldi	r19, 0x01	; 1
    7864:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7868:	8b e0       	ldi	r24, 0x0B	; 11
    786a:	62 ef       	ldi	r22, 0xF2	; 242
    786c:	73 e0       	ldi	r23, 0x03	; 3
    786e:	48 e2       	ldi	r20, 0x28	; 40
    7870:	28 ed       	ldi	r18, 0xD8	; 216
    7872:	31 e0       	ldi	r19, 0x01	; 1
    7874:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7878:	86 e0       	ldi	r24, 0x06	; 6
    787a:	62 ef       	ldi	r22, 0xF2	; 242
    787c:	73 e0       	ldi	r23, 0x03	; 3
    787e:	41 e0       	ldi	r20, 0x01	; 1
    7880:	28 ed       	ldi	r18, 0xD8	; 216
    7882:	31 e0       	ldi	r19, 0x01	; 1
    7884:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7888:	8c e0       	ldi	r24, 0x0C	; 12
    788a:	62 ef       	ldi	r22, 0xF2	; 242
    788c:	73 e0       	ldi	r23, 0x03	; 3
    788e:	41 e0       	ldi	r20, 0x01	; 1
    7890:	28 ed       	ldi	r18, 0xD8	; 216
    7892:	31 e0       	ldi	r19, 0x01	; 1
    7894:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7898:	cb 50       	subi	r28, 0x0B	; 11
    789a:	df 4f       	sbci	r29, 0xFF	; 255
    789c:	18 82       	st	Y, r1
    789e:	c5 5f       	subi	r28, 0xF5	; 245
    78a0:	d0 40       	sbci	r29, 0x00	; 0

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    78a2:	ce 01       	movw	r24, r28
    78a4:	88 96       	adiw	r24, 0x28	; 40
    78a6:	c6 50       	subi	r28, 0x06	; 6
    78a8:	df 4f       	sbci	r29, 0xFF	; 255
    78aa:	99 83       	std	Y+1, r25	; 0x01
    78ac:	88 83       	st	Y, r24
    78ae:	ca 5f       	subi	r28, 0xFA	; 250
    78b0:	d0 40       	sbci	r29, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    78b2:	37 e3       	ldi	r19, 0x37	; 55
    78b4:	23 2e       	mov	r2, r19
    78b6:	31 2c       	mov	r3, r1
    78b8:	2c 0e       	add	r2, r28
    78ba:	3d 1e       	adc	r3, r29
    78bc:	d1 01       	movw	r26, r2
    78be:	1f 96       	adiw	r26, 0x0f	; 15
    78c0:	ca 50       	subi	r28, 0x0A	; 10
    78c2:	df 4f       	sbci	r29, 0xFF	; 255
    78c4:	b9 83       	std	Y+1, r27	; 0x01
    78c6:	a8 83       	st	Y, r26
    78c8:	c6 5f       	subi	r28, 0xF6	; 246
    78ca:	d0 40       	sbci	r29, 0x00	; 0
    78cc:	e6 e4       	ldi	r30, 0x46	; 70
    78ce:	f0 e0       	ldi	r31, 0x00	; 0
    78d0:	ec 0f       	add	r30, r28
    78d2:	fd 1f       	adc	r31, r29
    78d4:	3f 96       	adiw	r30, 0x0f	; 15
    78d6:	c8 50       	subi	r28, 0x08	; 8
    78d8:	df 4f       	sbci	r29, 0xFF	; 255
    78da:	f9 83       	std	Y+1, r31	; 0x01
    78dc:	e8 83       	st	Y, r30
    78de:	c8 5f       	subi	r28, 0xF8	; 248
    78e0:	d0 40       	sbci	r29, 0x00	; 0
    78e2:	da c1       	rjmp	.+948    	; 0x7c98 <systemGenerateReport+0x1378>
    78e4:	f2 01       	movw	r30, r4
    78e6:	e6 52       	subi	r30, 0x26	; 38
    78e8:	fe 4f       	sbci	r31, 0xFE	; 254
    78ea:	80 81       	ld	r24, Z
    78ec:	80 53       	subi	r24, 0x30	; 48
    78ee:	8a 30       	cpi	r24, 0x0A	; 10
    78f0:	08 f0       	brcs	.+2      	; 0x78f4 <systemGenerateReport+0xfd4>
    78f2:	80 e0       	ldi	r24, 0x00	; 0
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
		      xGrade=Ord(GradeList[iTotal]);
    78f4:	80 93 e7 01 	sts	0x01E7, r24
			  if (xGrade>0){
    78f8:	88 23       	and	r24, r24
    78fa:	09 f4       	brne	.+2      	; 0x78fe <systemGenerateReport+0xfde>
    78fc:	c2 c1       	rjmp	.+900    	; 0x7c82 <systemGenerateReport+0x1362>
			      GetProductName(xGrade,strProduct);
    78fe:	64 e6       	ldi	r22, 0x64	; 100
    7900:	77 e0       	ldi	r23, 0x07	; 7
    7902:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <GetProductName>
    7906:	ed ef       	ldi	r30, 0xFD	; 253
    7908:	f7 e0       	ldi	r31, 0x07	; 7
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    790a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    790c:	88 e0       	ldi	r24, 0x08	; 8
    790e:	e1 31       	cpi	r30, 0x11	; 17
    7910:	f8 07       	cpc	r31, r24
    7912:	d9 f7       	brne	.-10     	; 0x790a <systemGenerateReport+0xfea>
    7914:	ee ea       	ldi	r30, 0xAE	; 174
    7916:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
    7918:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    791a:	98 e0       	ldi	r25, 0x08	; 8
    791c:	e2 3c       	cpi	r30, 0xC2	; 194
    791e:	f9 07       	cpc	r31, r25
    7920:	d9 f7       	brne	.-10     	; 0x7918 <systemGenerateReport+0xff8>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    7922:	81 e0       	ldi	r24, 0x01	; 1
    7924:	80 93 e9 01 	sts	0x01E9, r24
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7928:	27 e0       	ldi	r18, 0x07	; 7
    792a:	82 2e       	mov	r8, r18
    792c:	91 2c       	mov	r9, r1
    792e:	8c 0e       	add	r8, r28
    7930:	9d 1e       	adc	r9, r29

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7932:	99 e1       	ldi	r25, 0x19	; 25
    7934:	c9 2e       	mov	r12, r25
    7936:	d1 2c       	mov	r13, r1
    7938:	cc 0e       	add	r12, r28
    793a:	dd 1e       	adc	r13, r29
								      NormalizeOverflow(strDeltaVolume);


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    793c:	8f e0       	ldi	r24, 0x0F	; 15
    793e:	a8 2e       	mov	r10, r24
    7940:	b1 2c       	mov	r11, r1
    7942:	ac 0e       	add	r10, r28
    7944:	bd 1e       	adc	r11, r29
    7946:	ee c0       	rjmp	.+476    	; 0x7b24 <systemGenerateReport+0x1204>
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7948:	c4 01       	movw	r24, r8
    794a:	6a e4       	ldi	r22, 0x4A	; 74
    794c:	70 e0       	ldi	r23, 0x00	; 0
    794e:	48 e0       	ldi	r20, 0x08	; 8
    7950:	50 e0       	ldi	r21, 0x00	; 0
    7952:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
			          PumpNum=PPumpID[xPump-1];
    7956:	80 91 e9 01 	lds	r24, 0x01E9
    795a:	fe 01       	movw	r30, r28
    795c:	e8 0f       	add	r30, r24
    795e:	f1 1d       	adc	r31, r1
    7960:	86 81       	ldd	r24, Z+6	; 0x06
    7962:	80 93 e6 01 	sts	0x01E6, r24
					  if (PumpNum>0){
    7966:	88 23       	and	r24, r24
    7968:	09 f4       	brne	.+2      	; 0x796c <systemGenerateReport+0x104c>
    796a:	d7 c0       	rjmp	.+430    	; 0x7b1a <systemGenerateReport+0x11fa>
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    796c:	81 e0       	ldi	r24, 0x01	; 1
    796e:	80 93 e8 01 	sts	0x01E8, r24
							  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    7972:	06 e0       	ldi	r16, 0x06	; 6
    7974:	e0 2e       	mov	r14, r16
    7976:	cc c0       	rjmp	.+408    	; 0x7b10 <systemGenerateReport+0x11f0>
    7978:	60 91 e9 01 	lds	r22, 0x01E9
    797c:	6e 9d       	mul	r22, r14
    797e:	b0 01       	movw	r22, r0
    7980:	11 24       	eor	r1, r1
    7982:	6c 5a       	subi	r22, 0xAC	; 172
    7984:	7f 4f       	sbci	r23, 0xFF	; 255
    7986:	ce 01       	movw	r24, r28
    7988:	01 96       	adiw	r24, 0x01	; 1
    798a:	46 e0       	ldi	r20, 0x06	; 6
    798c:	50 e0       	ldi	r21, 0x00	; 0
    798e:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){
    7992:	80 91 e8 01 	lds	r24, 0x01E8
    7996:	fe 01       	movw	r30, r28
    7998:	e8 0f       	add	r30, r24
    799a:	f1 1d       	adc	r31, r1
    799c:	90 81       	ld	r25, Z
    799e:	80 91 e7 01 	lds	r24, 0x01E7
    79a2:	98 17       	cp	r25, r24
    79a4:	09 f0       	breq	.+2      	; 0x79a8 <systemGenerateReport+0x1088>
    79a6:	af c0       	rjmp	.+350    	; 0x7b06 <systemGenerateReport+0x11e6>
    79a8:	e3 e3       	ldi	r30, 0x33	; 51
    79aa:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    79ac:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79ae:	ac e0       	ldi	r26, 0x0C	; 12
    79b0:	e2 34       	cpi	r30, 0x42	; 66
    79b2:	fa 07       	cpc	r31, r26
    79b4:	d9 f7       	brne	.-10     	; 0x79ac <systemGenerateReport+0x108c>
    79b6:	eb e0       	ldi	r30, 0x0B	; 11
    79b8:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    79ba:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79bc:	b9 e0       	ldi	r27, 0x09	; 9
    79be:	ea 31       	cpi	r30, 0x1A	; 26
    79c0:	fb 07       	cpc	r31, r27
    79c2:	d9 f7       	brne	.-10     	; 0x79ba <systemGenerateReport+0x109a>
    79c4:	f6 01       	movw	r30, r12
	     strMemory[i]=data;
    79c6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79c8:	c6 50       	subi	r28, 0x06	; 6
    79ca:	df 4f       	sbci	r29, 0xFF	; 255
    79cc:	88 81       	ld	r24, Y
    79ce:	99 81       	ldd	r25, Y+1	; 0x01
    79d0:	ca 5f       	subi	r28, 0xFA	; 250
    79d2:	d0 40       	sbci	r29, 0x00	; 0
    79d4:	e8 17       	cp	r30, r24
    79d6:	f9 07       	cpc	r31, r25
    79d8:	b1 f7       	brne	.-20     	; 0x79c6 <systemGenerateReport+0x10a6>
    79da:	fe 01       	movw	r30, r28
    79dc:	b8 96       	adiw	r30, 0x28	; 40
	     strMemory[i]=data;
    79de:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79e0:	e2 15       	cp	r30, r2
    79e2:	f3 05       	cpc	r31, r3
    79e4:	e1 f7       	brne	.-8      	; 0x79de <systemGenerateReport+0x10be>
    79e6:	f1 01       	movw	r30, r2
	     strMemory[i]=data;
    79e8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79ea:	ca 50       	subi	r28, 0x0A	; 10
    79ec:	df 4f       	sbci	r29, 0xFF	; 255
    79ee:	a8 81       	ld	r26, Y
    79f0:	b9 81       	ldd	r27, Y+1	; 0x01
    79f2:	c6 5f       	subi	r28, 0xF6	; 246
    79f4:	d0 40       	sbci	r29, 0x00	; 0
    79f6:	ea 17       	cp	r30, r26
    79f8:	fb 07       	cpc	r31, r27
    79fa:	b1 f7       	brne	.-20     	; 0x79e8 <systemGenerateReport+0x10c8>
    79fc:	fe 01       	movw	r30, r28
    79fe:	ea 5b       	subi	r30, 0xBA	; 186
    7a00:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    7a02:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7a04:	c8 50       	subi	r28, 0x08	; 8
    7a06:	df 4f       	sbci	r29, 0xFF	; 255
    7a08:	88 81       	ld	r24, Y
    7a0a:	99 81       	ldd	r25, Y+1	; 0x01
    7a0c:	c8 5f       	subi	r28, 0xF8	; 248
    7a0e:	d0 40       	sbci	r29, 0x00	; 0
    7a10:	e8 17       	cp	r30, r24
    7a12:	f9 07       	cpc	r31, r25
    7a14:	b1 f7       	brne	.-20     	; 0x7a02 <systemGenerateReport+0x10e2>
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
								  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
								  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

								  PumpNozzle=xNozzle;
    7a16:	80 91 e8 01 	lds	r24, 0x01E8
    7a1a:	80 93 e5 01 	sts	0x01E5, r24
								  
								  FIPAddr=GetFIPAddr(PumpNum); 
    7a1e:	80 91 e6 01 	lds	r24, 0x01E6
    7a22:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
								  if (FIPAddr>0){
    7a26:	88 23       	and	r24, r24
    7a28:	31 f1       	breq	.+76     	; 0x7a76 <systemGenerateReport+0x1156>
									  FIPAddr=FIPAddr-1;							  							  							      
    7a2a:	f8 2e       	mov	r15, r24
    7a2c:	fa 94       	dec	r15
									  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    7a2e:	80 e0       	ldi	r24, 0x00	; 0
    7a30:	60 e0       	ldi	r22, 0x00	; 0
    7a32:	4f 2d       	mov	r20, r15
    7a34:	20 91 e5 01 	lds	r18, 0x01E5
    7a38:	86 01       	movw	r16, r12
    7a3a:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    7a3e:	81 e0       	ldi	r24, 0x01	; 1
    7a40:	60 e0       	ldi	r22, 0x00	; 0
    7a42:	4f 2d       	mov	r20, r15
    7a44:	20 91 e5 01 	lds	r18, 0x01E5
    7a48:	8e 01       	movw	r16, r28
    7a4a:	08 5d       	subi	r16, 0xD8	; 216
    7a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    7a4e:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>

									  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    7a52:	80 e0       	ldi	r24, 0x00	; 0
    7a54:	61 e0       	ldi	r22, 0x01	; 1
    7a56:	4f 2d       	mov	r20, r15
    7a58:	20 91 e5 01 	lds	r18, 0x01E5
    7a5c:	81 01       	movw	r16, r2
    7a5e:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    7a62:	81 e0       	ldi	r24, 0x01	; 1
    7a64:	61 e0       	ldi	r22, 0x01	; 1
    7a66:	4f 2d       	mov	r20, r15
    7a68:	20 91 e5 01 	lds	r18, 0x01E5
    7a6c:	8e 01       	movw	r16, r28
    7a6e:	0a 5b       	subi	r16, 0xBA	; 186
    7a70:	1f 4f       	sbci	r17, 0xFF	; 255
    7a72:	0e 94 c2 20 	call	0x4184	; 0x4184 <GetTotalizerData>
								  }

								  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    7a76:	80 e0       	ldi	r24, 0x00	; 0
    7a78:	b1 01       	movw	r22, r2
    7a7a:	a6 01       	movw	r20, r12
    7a7c:	2b e0       	ldi	r18, 0x0B	; 11
    7a7e:	39 e0       	ldi	r19, 0x09	; 9
    7a80:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>
								  if (IsMinus(strDeltaVolume)==True)
    7a84:	8b e0       	ldi	r24, 0x0B	; 11
    7a86:	99 e0       	ldi	r25, 0x09	; 9
    7a88:	0e 94 8d 23 	call	0x471a	; 0x471a <IsMinus>
    7a8c:	81 30       	cpi	r24, 0x01	; 1
    7a8e:	21 f4       	brne	.+8      	; 0x7a98 <systemGenerateReport+0x1178>
								      NormalizeOverflow(strDeltaVolume);
    7a90:	8b e0       	ldi	r24, 0x0B	; 11
    7a92:	99 e0       	ldi	r25, 0x09	; 9
    7a94:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <NormalizeOverflow>


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    7a98:	8c e3       	ldi	r24, 0x3C	; 60
    7a9a:	91 e0       	ldi	r25, 0x01	; 1
    7a9c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    7aa0:	82 30       	cpi	r24, 0x02	; 2
    7aa2:	61 f4       	brne	.+24     	; 0x7abc <systemGenerateReport+0x119c>
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    7aa4:	c5 01       	movw	r24, r10
    7aa6:	60 91 e6 01 	lds	r22, 0x01E6
    7aaa:	40 91 e5 01 	lds	r20, 0x01E5
    7aae:	0e 94 71 24 	call	0x48e2	; 0x48e2 <GetProductPrice>
									  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    7ab2:	82 e0       	ldi	r24, 0x02	; 2
    7ab4:	b5 01       	movw	r22, r10
    7ab6:	4b e0       	ldi	r20, 0x0B	; 11
    7ab8:	59 e0       	ldi	r21, 0x09	; 9
    7aba:	07 c0       	rjmp	.+14     	; 0x7aca <systemGenerateReport+0x11aa>
								  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    7abc:	80 e0       	ldi	r24, 0x00	; 0
    7abe:	be 01       	movw	r22, r28
    7ac0:	6a 5b       	subi	r22, 0xBA	; 186
    7ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac4:	ae 01       	movw	r20, r28
    7ac6:	48 5d       	subi	r20, 0xD8	; 216
    7ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    7aca:	23 e3       	ldi	r18, 0x33	; 51
    7acc:	3c e0       	ldi	r19, 0x0C	; 12
    7ace:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>
								  //StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
								  if (IsMinus(strDeltaMoney)==True)
    7ad2:	83 e3       	ldi	r24, 0x33	; 51
    7ad4:	9c e0       	ldi	r25, 0x0C	; 12
    7ad6:	0e 94 8d 23 	call	0x471a	; 0x471a <IsMinus>
    7ada:	81 30       	cpi	r24, 0x01	; 1
    7adc:	21 f4       	brne	.+8      	; 0x7ae6 <systemGenerateReport+0x11c6>
								      NormalizeOverflow(strDeltaMoney);
    7ade:	83 e3       	ldi	r24, 0x33	; 51
    7ae0:	9c e0       	ldi	r25, 0x0C	; 12
    7ae2:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <NormalizeOverflow>
		  
								  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    7ae6:	81 e0       	ldi	r24, 0x01	; 1
    7ae8:	6d ef       	ldi	r22, 0xFD	; 253
    7aea:	77 e0       	ldi	r23, 0x07	; 7
    7aec:	4b e0       	ldi	r20, 0x0B	; 11
    7aee:	59 e0       	ldi	r21, 0x09	; 9
    7af0:	9b 01       	movw	r18, r22
    7af2:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>
								  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    7af6:	81 e0       	ldi	r24, 0x01	; 1
    7af8:	6e ea       	ldi	r22, 0xAE	; 174
    7afa:	78 e0       	ldi	r23, 0x08	; 8
    7afc:	43 e3       	ldi	r20, 0x33	; 51
    7afe:	5c e0       	ldi	r21, 0x0C	; 12
    7b00:	9b 01       	movw	r18, r22
    7b02:	0e 94 8a 29 	call	0x5314	; 0x5314 <StrCalc>

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
			          PumpNum=PPumpID[xPump-1];
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    7b06:	80 91 e8 01 	lds	r24, 0x01E8
    7b0a:	8f 5f       	subi	r24, 0xFF	; 255
    7b0c:	80 93 e8 01 	sts	0x01E8, r24
    7b10:	80 91 e8 01 	lds	r24, 0x01E8
    7b14:	87 30       	cpi	r24, 0x07	; 7
    7b16:	08 f4       	brcc	.+2      	; 0x7b1a <systemGenerateReport+0x11fa>
    7b18:	2f cf       	rjmp	.-418    	; 0x7978 <systemGenerateReport+0x1058>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    7b1a:	80 91 e9 01 	lds	r24, 0x01E9
    7b1e:	8f 5f       	subi	r24, 0xFF	; 255
    7b20:	80 93 e9 01 	sts	0x01E9, r24
    7b24:	80 91 e9 01 	lds	r24, 0x01E9
    7b28:	89 30       	cpi	r24, 0x09	; 9
    7b2a:	08 f4       	brcc	.+2      	; 0x7b2e <systemGenerateReport+0x120e>
    7b2c:	0d cf       	rjmp	.-486    	; 0x7948 <systemGenerateReport+0x1028>
							  }
						  }
					  }				  
				  }

				  RemZeroLead(strTotalMoney);
    7b2e:	1e ea       	ldi	r17, 0xAE	; 174
    7b30:	a1 2e       	mov	r10, r17
    7b32:	18 e0       	ldi	r17, 0x08	; 8
    7b34:	b1 2e       	mov	r11, r17
    7b36:	c5 01       	movw	r24, r10
    7b38:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
				  RemZeroLead(strTotalVolume);
    7b3c:	0d ef       	ldi	r16, 0xFD	; 253
    7b3e:	17 e0       	ldi	r17, 0x07	; 7
    7b40:	c8 01       	movw	r24, r16
    7b42:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>

				  FormatTotalizerMoney(strTotalMoney);
    7b46:	c5 01       	movw	r24, r10
    7b48:	0e 94 58 34 	call	0x68b0	; 0x68b0 <FormatTotalizerMoney>
				  FormatCurrency(strTotalMoney);
    7b4c:	c5 01       	movw	r24, r10
    7b4e:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>

				  FormatTotalizerVolume(strTotalVolume);
    7b52:	c8 01       	movw	r24, r16
    7b54:	0e 94 4a 34 	call	0x6894	; 0x6894 <FormatTotalizerVolume>
				  FormatCurrency(strTotalVolume);
    7b58:	c8 01       	movw	r24, r16
    7b5a:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
		          //Test
				 // RemZeroLead(strTotalMoney);
				 // RemZeroLead(strTotalVolume);


			      GetTabSpace((21-strlen(strProduct)-strlen(strTotalVolume)),strTabSpace);
    7b5e:	b4 e6       	ldi	r27, 0x64	; 100
    7b60:	8b 2e       	mov	r8, r27
    7b62:	b7 e0       	ldi	r27, 0x07	; 7
    7b64:	9b 2e       	mov	r9, r27
    7b66:	f4 01       	movw	r30, r8
    7b68:	01 90       	ld	r0, Z+
    7b6a:	00 20       	and	r0, r0
    7b6c:	e9 f7       	brne	.-6      	; 0x7b68 <systemGenerateReport+0x1248>
    7b6e:	31 97       	sbiw	r30, 0x01	; 1
    7b70:	e8 19       	sub	r30, r8
    7b72:	f9 09       	sbc	r31, r9
    7b74:	d8 01       	movw	r26, r16
    7b76:	0d 90       	ld	r0, X+
    7b78:	00 20       	and	r0, r0
    7b7a:	e9 f7       	brne	.-6      	; 0x7b76 <systemGenerateReport+0x1256>
    7b7c:	11 97       	sbiw	r26, 0x01	; 1
    7b7e:	a0 1b       	sub	r26, r16
    7b80:	b1 0b       	sbc	r27, r17
    7b82:	e1 95       	neg	r30
    7b84:	ea 1b       	sub	r30, r26
    7b86:	a9 e6       	ldi	r26, 0x69	; 105
    7b88:	ea 2e       	mov	r14, r26
    7b8a:	f1 2c       	mov	r15, r1
    7b8c:	ec 0e       	add	r14, r28
    7b8e:	fd 1e       	adc	r15, r29
    7b90:	8e 2f       	mov	r24, r30
    7b92:	8b 5e       	subi	r24, 0xEB	; 235
    7b94:	b7 01       	movw	r22, r14
    7b96:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>
			      GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    7b9a:	f5 01       	movw	r30, r10
    7b9c:	01 90       	ld	r0, Z+
    7b9e:	00 20       	and	r0, r0
    7ba0:	e9 f7       	brne	.-6      	; 0x7b9c <systemGenerateReport+0x127c>
    7ba2:	31 97       	sbiw	r30, 0x01	; 1
    7ba4:	ea 19       	sub	r30, r10
    7ba6:	fb 09       	sbc	r31, r11
    7ba8:	fd e7       	ldi	r31, 0x7D	; 125
    7baa:	6f 2e       	mov	r6, r31
    7bac:	71 2c       	mov	r7, r1
    7bae:	6c 0e       	add	r6, r28
    7bb0:	7d 1e       	adc	r7, r29
    7bb2:	8f e0       	ldi	r24, 0x0F	; 15
    7bb4:	8e 1b       	sub	r24, r30
    7bb6:	b3 01       	movw	r22, r6
    7bb8:	0e 94 47 1a 	call	0x348e	; 0x348e <GetTabSpace>

				  //PrintMoney
		          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%d.%s%s%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);
    7bbc:	87 ec       	ldi	r24, 0xC7	; 199
    7bbe:	93 e0       	ldi	r25, 0x03	; 3
    7bc0:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    7bc4:	75 ea       	ldi	r23, 0xA5	; 165
    7bc6:	c7 2e       	mov	r12, r23
    7bc8:	d1 2c       	mov	r13, r1
    7bca:	cc 0e       	add	r12, r28
    7bcc:	dd 1e       	adc	r13, r29
    7bce:	92 01       	movw	r18, r4
    7bd0:	2f 5f       	subi	r18, 0xFF	; 255
    7bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    7bd4:	81 30       	cpi	r24, 0x01	; 1
    7bd6:	29 f5       	brne	.+74     	; 0x7c22 <systemGenerateReport+0x1302>
    7bd8:	ad b7       	in	r26, 0x3d	; 61
    7bda:	be b7       	in	r27, 0x3e	; 62
    7bdc:	50 97       	sbiw	r26, 0x10	; 16
    7bde:	0f b6       	in	r0, 0x3f	; 63
    7be0:	f8 94       	cli
    7be2:	be bf       	out	0x3e, r27	; 62
    7be4:	0f be       	out	0x3f, r0	; 63
    7be6:	ad bf       	out	0x3d, r26	; 61
    7be8:	ed b7       	in	r30, 0x3d	; 61
    7bea:	fe b7       	in	r31, 0x3e	; 62
    7bec:	31 96       	adiw	r30, 0x01	; 1
    7bee:	12 96       	adiw	r26, 0x02	; 2
    7bf0:	dc 92       	st	X, r13
    7bf2:	ce 92       	st	-X, r12
    7bf4:	11 97       	sbiw	r26, 0x01	; 1
    7bf6:	83 e7       	ldi	r24, 0x73	; 115
    7bf8:	95 e0       	ldi	r25, 0x05	; 5
    7bfa:	93 83       	std	Z+3, r25	; 0x03
    7bfc:	82 83       	std	Z+2, r24	; 0x02
    7bfe:	35 83       	std	Z+5, r19	; 0x05
    7c00:	24 83       	std	Z+4, r18	; 0x04
    7c02:	97 82       	std	Z+7, r9	; 0x07
    7c04:	86 82       	std	Z+6, r8	; 0x06
    7c06:	f1 86       	std	Z+9, r15	; 0x09
    7c08:	e0 86       	std	Z+8, r14	; 0x08
    7c0a:	13 87       	std	Z+11, r17	; 0x0b
    7c0c:	02 87       	std	Z+10, r16	; 0x0a
    7c0e:	75 86       	std	Z+13, r7	; 0x0d
    7c10:	64 86       	std	Z+12, r6	; 0x0c
    7c12:	b7 86       	std	Z+15, r11	; 0x0f
    7c14:	a6 86       	std	Z+14, r10	; 0x0e
    7c16:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7c1a:	ed b7       	in	r30, 0x3d	; 61
    7c1c:	fe b7       	in	r31, 0x3e	; 62
    7c1e:	70 96       	adiw	r30, 0x10	; 16
    7c20:	22 c0       	rjmp	.+68     	; 0x7c66 <systemGenerateReport+0x1346>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);
    7c22:	8d b7       	in	r24, 0x3d	; 61
    7c24:	9e b7       	in	r25, 0x3e	; 62
    7c26:	0c 97       	sbiw	r24, 0x0c	; 12
    7c28:	0f b6       	in	r0, 0x3f	; 63
    7c2a:	f8 94       	cli
    7c2c:	9e bf       	out	0x3e, r25	; 62
    7c2e:	0f be       	out	0x3f, r0	; 63
    7c30:	8d bf       	out	0x3d, r24	; 61
    7c32:	ed b7       	in	r30, 0x3d	; 61
    7c34:	fe b7       	in	r31, 0x3e	; 62
    7c36:	31 96       	adiw	r30, 0x01	; 1
    7c38:	ad b7       	in	r26, 0x3d	; 61
    7c3a:	be b7       	in	r27, 0x3e	; 62
    7c3c:	12 96       	adiw	r26, 0x02	; 2
    7c3e:	dc 92       	st	X, r13
    7c40:	ce 92       	st	-X, r12
    7c42:	11 97       	sbiw	r26, 0x01	; 1
    7c44:	89 e6       	ldi	r24, 0x69	; 105
    7c46:	95 e0       	ldi	r25, 0x05	; 5
    7c48:	93 83       	std	Z+3, r25	; 0x03
    7c4a:	82 83       	std	Z+2, r24	; 0x02
    7c4c:	35 83       	std	Z+5, r19	; 0x05
    7c4e:	24 83       	std	Z+4, r18	; 0x04
    7c50:	97 82       	std	Z+7, r9	; 0x07
    7c52:	86 82       	std	Z+6, r8	; 0x06
    7c54:	f1 86       	std	Z+9, r15	; 0x09
    7c56:	e0 86       	std	Z+8, r14	; 0x08
    7c58:	13 87       	std	Z+11, r17	; 0x0b
    7c5a:	02 87       	std	Z+10, r16	; 0x0a
    7c5c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    7c60:	ed b7       	in	r30, 0x3d	; 61
    7c62:	fe b7       	in	r31, 0x3e	; 62
    7c64:	3c 96       	adiw	r30, 0x0c	; 12
    7c66:	0f b6       	in	r0, 0x3f	; 63
    7c68:	f8 94       	cli
    7c6a:	fe bf       	out	0x3e, r31	; 62
    7c6c:	0f be       	out	0x3f, r0	; 63
    7c6e:	ed bf       	out	0x3d, r30	; 61

				  CreateReport(strReport,PrintBuffer,&RepPos);
    7c70:	ce 01       	movw	r24, r28
    7c72:	8b 55       	subi	r24, 0x5B	; 91
    7c74:	9f 4f       	sbci	r25, 0xFF	; 255
    7c76:	62 ef       	ldi	r22, 0xF2	; 242
    7c78:	73 e0       	ldi	r23, 0x03	; 3
    7c7a:	48 ed       	ldi	r20, 0xD8	; 216
    7c7c:	51 e0       	ldi	r21, 0x01	; 1
    7c7e:	0e 94 28 22 	call	0x4450	; 0x4450 <CreateReport>
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    7c82:	cb 50       	subi	r28, 0x0B	; 11
    7c84:	df 4f       	sbci	r29, 0xFF	; 255
    7c86:	f8 81       	ld	r31, Y
    7c88:	c5 5f       	subi	r28, 0xF5	; 245
    7c8a:	d0 40       	sbci	r29, 0x00	; 0
    7c8c:	ff 5f       	subi	r31, 0xFF	; 255
    7c8e:	cb 50       	subi	r28, 0x0B	; 11
    7c90:	df 4f       	sbci	r29, 0xFF	; 255
    7c92:	f8 83       	st	Y, r31
    7c94:	c5 5f       	subi	r28, 0xF5	; 245
    7c96:	d0 40       	sbci	r29, 0x00	; 0
    7c98:	ea ed       	ldi	r30, 0xDA	; 218
    7c9a:	f1 e0       	ldi	r31, 0x01	; 1
    7c9c:	01 90       	ld	r0, Z+
    7c9e:	00 20       	and	r0, r0
    7ca0:	e9 f7       	brne	.-6      	; 0x7c9c <systemGenerateReport+0x137c>
    7ca2:	31 97       	sbiw	r30, 0x01	; 1
    7ca4:	ea 5d       	subi	r30, 0xDA	; 218
    7ca6:	f1 40       	sbci	r31, 0x01	; 1
    7ca8:	cb 50       	subi	r28, 0x0B	; 11
    7caa:	df 4f       	sbci	r29, 0xFF	; 255
    7cac:	88 81       	ld	r24, Y
    7cae:	c5 5f       	subi	r28, 0xF5	; 245
    7cb0:	d0 40       	sbci	r29, 0x00	; 0
    7cb2:	48 2e       	mov	r4, r24
    7cb4:	55 24       	eor	r5, r5
    7cb6:	4e 16       	cp	r4, r30
    7cb8:	5f 06       	cpc	r5, r31
    7cba:	08 f4       	brcc	.+2      	; 0x7cbe <systemGenerateReport+0x139e>
    7cbc:	13 ce       	rjmp	.-986    	; 0x78e4 <systemGenerateReport+0xfc4>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);

				  CreateReport(strReport,PrintBuffer,&RepPos);
               }
		  }
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7cbe:	87 e0       	ldi	r24, 0x07	; 7
    7cc0:	62 ef       	ldi	r22, 0xF2	; 242
    7cc2:	73 e0       	ldi	r23, 0x03	; 3
    7cc4:	41 e0       	ldi	r20, 0x01	; 1
    7cc6:	28 ed       	ldi	r18, 0xD8	; 216
    7cc8:	31 e0       	ldi	r19, 0x01	; 1
    7cca:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7cce:	8b e0       	ldi	r24, 0x0B	; 11
    7cd0:	62 ef       	ldi	r22, 0xF2	; 242
    7cd2:	73 e0       	ldi	r23, 0x03	; 3
    7cd4:	48 e2       	ldi	r20, 0x28	; 40
    7cd6:	28 ed       	ldi	r18, 0xD8	; 216
    7cd8:	31 e0       	ldi	r19, 0x01	; 1
    7cda:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7cde:	89 e0       	ldi	r24, 0x09	; 9
    7ce0:	62 ef       	ldi	r22, 0xF2	; 242
    7ce2:	73 e0       	ldi	r23, 0x03	; 3
    7ce4:	41 e0       	ldi	r20, 0x01	; 1
    7ce6:	28 ed       	ldi	r18, 0xD8	; 216
    7ce8:	31 e0       	ldi	r19, 0x01	; 1
    7cea:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7cee:	8c e0       	ldi	r24, 0x0C	; 12
    7cf0:	62 ef       	ldi	r22, 0xF2	; 242
    7cf2:	73 e0       	ldi	r23, 0x03	; 3
    7cf4:	41 e0       	ldi	r20, 0x01	; 1
    7cf6:	28 ed       	ldi	r18, 0xD8	; 216
    7cf8:	31 e0       	ldi	r19, 0x01	; 1
    7cfa:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
		  InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7cfe:	8c e0       	ldi	r24, 0x0C	; 12
    7d00:	62 ef       	ldi	r22, 0xF2	; 242
    7d02:	73 e0       	ldi	r23, 0x03	; 3
    7d04:	41 e0       	ldi	r20, 0x01	; 1
    7d06:	28 ed       	ldi	r18, 0xD8	; 216
    7d08:	31 e0       	ldi	r19, 0x01	; 1
    7d0a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7d0e:	8c e0       	ldi	r24, 0x0C	; 12
    7d10:	62 ef       	ldi	r22, 0xF2	; 242
    7d12:	73 e0       	ldi	r23, 0x03	; 3
    7d14:	41 e0       	ldi	r20, 0x01	; 1
    7d16:	28 ed       	ldi	r18, 0xD8	; 216
    7d18:	31 e0       	ldi	r19, 0x01	; 1
    7d1a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7d1e:	8c e0       	ldi	r24, 0x0C	; 12
    7d20:	62 ef       	ldi	r22, 0xF2	; 242
    7d22:	73 e0       	ldi	r23, 0x03	; 3
    7d24:	41 e0       	ldi	r20, 0x01	; 1
    7d26:	28 ed       	ldi	r18, 0xD8	; 216
    7d28:	31 e0       	ldi	r19, 0x01	; 1
    7d2a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7d2e:	8c e0       	ldi	r24, 0x0C	; 12
    7d30:	62 ef       	ldi	r22, 0xF2	; 242
    7d32:	73 e0       	ldi	r23, 0x03	; 3
    7d34:	41 e0       	ldi	r20, 0x01	; 1
    7d36:	28 ed       	ldi	r18, 0xD8	; 216
    7d38:	31 e0       	ldi	r19, 0x01	; 1
    7d3a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>
    7d3e:	8c e0       	ldi	r24, 0x0C	; 12
    7d40:	62 ef       	ldi	r22, 0xF2	; 242
    7d42:	73 e0       	ldi	r23, 0x03	; 3
    7d44:	41 e0       	ldi	r20, 0x01	; 1
    7d46:	28 ed       	ldi	r18, 0xD8	; 216
    7d48:	31 e0       	ldi	r19, 0x01	; 1
    7d4a:	0e 94 97 1a 	call	0x352e	; 0x352e <InserBorder>


          cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    7d4e:	80 e3       	ldi	r24, 0x30	; 48
    7d50:	80 93 b7 01 	sts	0x01B7, r24
		  LengthMessage81=RepPos+1;
    7d54:	80 91 d8 01 	lds	r24, 0x01D8
    7d58:	90 91 d9 01 	lds	r25, 0x01D9
    7d5c:	01 96       	adiw	r24, 0x01	; 1
    7d5e:	90 93 8e 01 	sts	0x018E, r25
    7d62:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    7d66:	81 e0       	ldi	r24, 0x01	; 1
    7d68:	80 93 aa 01 	sts	0x01AA, r24
	      IsBusyFreePrinting=True; 
    7d6c:	80 93 b6 01 	sts	0x01B6, r24
         	       
	      stGenerateReport=grWaitPrinted3;
    7d70:	8b e0       	ldi	r24, 0x0B	; 11
    7d72:	05 c0       	rjmp	.+10     	; 0x7d7e <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted3:
          if (IsBusyFreePrinting==False)stGenerateReport=grFinishGenerateReport;
    7d74:	80 91 b6 01 	lds	r24, 0x01B6
    7d78:	88 23       	and	r24, r24
    7d7a:	49 f4       	brne	.+18     	; 0x7d8e <systemGenerateReport+0x146e>
    7d7c:	8c e0       	ldi	r24, 0x0C	; 12
    7d7e:	80 93 ea 01 	sts	0x01EA, r24
    7d82:	05 c0       	rjmp	.+10     	; 0x7d8e <systemGenerateReport+0x146e>
	      break;
     case grFinishGenerateReport:
	      IsFinishPrintingTotalizer=True;
    7d84:	81 e0       	ldi	r24, 0x01	; 1
    7d86:	80 93 87 01 	sts	0x0187, r24
          stGenerateReport=grScanAction;
    7d8a:	10 92 ea 01 	sts	0x01EA, r1
	      break;
	 }
}
    7d8e:	c5 50       	subi	r28, 0x05	; 5
    7d90:	df 4f       	sbci	r29, 0xFF	; 255
    7d92:	0f b6       	in	r0, 0x3f	; 63
    7d94:	f8 94       	cli
    7d96:	de bf       	out	0x3e, r29	; 62
    7d98:	0f be       	out	0x3f, r0	; 63
    7d9a:	cd bf       	out	0x3d, r28	; 61
    7d9c:	cf 91       	pop	r28
    7d9e:	df 91       	pop	r29
    7da0:	1f 91       	pop	r17
    7da2:	0f 91       	pop	r16
    7da4:	ff 90       	pop	r15
    7da6:	ef 90       	pop	r14
    7da8:	df 90       	pop	r13
    7daa:	cf 90       	pop	r12
    7dac:	bf 90       	pop	r11
    7dae:	af 90       	pop	r10
    7db0:	9f 90       	pop	r9
    7db2:	8f 90       	pop	r8
    7db4:	7f 90       	pop	r7
    7db6:	6f 90       	pop	r6
    7db8:	5f 90       	pop	r5
    7dba:	4f 90       	pop	r4
    7dbc:	3f 90       	pop	r3
    7dbe:	2f 90       	pop	r2
    7dc0:	08 95       	ret

00007dc2 <UpdateCardID>:
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    7dc2:	cf 93       	push	r28
    7dc4:	df 93       	push	r29
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
    7dc6:	e7 e5       	ldi	r30, 0x57	; 87
    7dc8:	fc e0       	ldi	r31, 0x0C	; 12
    7dca:	01 90       	ld	r0, Z+
    7dcc:	00 20       	and	r0, r0
    7dce:	e9 f7       	brne	.-6      	; 0x7dca <UpdateCardID+0x8>
    7dd0:	31 97       	sbiw	r30, 0x01	; 1
    7dd2:	e7 55       	subi	r30, 0x57	; 87
    7dd4:	fc 40       	sbci	r31, 0x0C	; 12
    7dd6:	af e8       	ldi	r26, 0x8F	; 143
    7dd8:	bb e0       	ldi	r27, 0x0B	; 11
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    7dda:	f0 e0       	ldi	r31, 0x00	; 0
    7ddc:	ef 01       	movw	r28, r30
    7dde:	cd 5b       	subi	r28, 0xBD	; 189
    7de0:	d3 4f       	sbci	r29, 0xF3	; 243
    7de2:	20 e0       	ldi	r18, 0x00	; 0
    7de4:	30 e0       	ldi	r19, 0x00	; 0
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
    7de6:	44 e1       	ldi	r20, 0x14	; 20
    7de8:	50 e0       	ldi	r21, 0x00	; 0
    7dea:	4e 1b       	sub	r20, r30
    7dec:	5f 0b       	sbc	r21, r31
    7dee:	90 e2       	ldi	r25, 0x20	; 32
    7df0:	24 17       	cp	r18, r20
    7df2:	35 07       	cpc	r19, r21
    7df4:	14 f4       	brge	.+4      	; 0x7dfa <UpdateCardID+0x38>
    7df6:	9c 93       	st	X, r25
    7df8:	02 c0       	rjmp	.+4      	; 0x7dfe <UpdateCardID+0x3c>
		else strCardID[i]=strRFID[i-(20-LengthID)];
    7dfa:	88 81       	ld	r24, Y
    7dfc:	8c 93       	st	X, r24
    7dfe:	2f 5f       	subi	r18, 0xFF	; 255
    7e00:	3f 4f       	sbci	r19, 0xFF	; 255
    7e02:	11 96       	adiw	r26, 0x01	; 1
    7e04:	21 96       	adiw	r28, 0x01	; 1
} 

void UpdateCardID(){
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
    7e06:	24 31       	cpi	r18, 0x14	; 20
    7e08:	31 05       	cpc	r19, r1
    7e0a:	91 f7       	brne	.-28     	; 0x7df0 <UpdateCardID+0x2e>
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;
    7e0c:	10 92 a3 0b 	sts	0x0BA3, r1

}
    7e10:	df 91       	pop	r29
    7e12:	cf 91       	pop	r28
    7e14:	08 95       	ret

00007e16 <GenerateTransactionNum>:
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    7e16:	cf 92       	push	r12
    7e18:	df 92       	push	r13
    7e1a:	ef 92       	push	r14
    7e1c:	ff 92       	push	r15
    7e1e:	0f 93       	push	r16
    7e20:	1f 93       	push	r17
    7e22:	df 93       	push	r29
    7e24:	cf 93       	push	r28
    7e26:	cd b7       	in	r28, 0x3d	; 61
    7e28:	de b7       	in	r29, 0x3e	; 62
    7e2a:	27 97       	sbiw	r28, 0x07	; 7
    7e2c:	0f b6       	in	r0, 0x3f	; 63
    7e2e:	f8 94       	cli
    7e30:	de bf       	out	0x3e, r29	; 62
    7e32:	0f be       	out	0x3f, r0	; 63
    7e34:	cd bf       	out	0x3d, r28	; 61
    7e36:	6c 01       	movw	r12, r24
    7e38:	fe 01       	movw	r30, r28
    7e3a:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7e3c:	ce 01       	movw	r24, r28
    7e3e:	08 96       	adiw	r24, 0x08	; 8
	     strMemory[i]=data;
    7e40:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7e42:	e8 17       	cp	r30, r24
    7e44:	f9 07       	cpc	r31, r25
    7e46:	e1 f7       	brne	.-8      	; 0x7e40 <GenerateTransactionNum+0x2a>
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
    7e48:	8e 01       	movw	r16, r28
    7e4a:	0f 5f       	subi	r16, 0xFF	; 255
    7e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    7e4e:	c8 01       	movw	r24, r16
    7e50:	6d e3       	ldi	r22, 0x3D	; 61
    7e52:	71 e0       	ldi	r23, 0x01	; 1
    7e54:	47 e0       	ldi	r20, 0x07	; 7
    7e56:	50 e0       	ldi	r21, 0x00	; 0
    7e58:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);
    7e5c:	f8 01       	movw	r30, r16
    7e5e:	01 90       	ld	r0, Z+
    7e60:	00 20       	and	r0, r0
    7e62:	e9 f7       	brne	.-6      	; 0x7e5e <GenerateTransactionNum+0x48>
    7e64:	31 97       	sbiw	r30, 0x01	; 1
    7e66:	e0 1b       	sub	r30, r16
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    7e68:	f0 e0       	ldi	r31, 0x00	; 0
    7e6a:	0e 0f       	add	r16, r30
    7e6c:	1f 1f       	adc	r17, r31
    7e6e:	31 97       	sbiw	r30, 0x01	; 1
    7e70:	76 01       	movw	r14, r12
    7e72:	ee 0e       	add	r14, r30
    7e74:	ff 1e       	adc	r15, r31
    7e76:	31 96       	adiw	r30, 0x01	; 1
    7e78:	61 e0       	ldi	r22, 0x01	; 1
    7e7a:	19 c0       	rjmp	.+50     	; 0x7eae <GenerateTransactionNum+0x98>
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
		 cNum='0'+((xNum+xAdd)%10);
    7e7c:	d8 01       	movw	r26, r16
    7e7e:	2c 91       	ld	r18, X
    7e80:	20 53       	subi	r18, 0x30	; 48
    7e82:	30 e0       	ldi	r19, 0x00	; 0
    7e84:	26 0f       	add	r18, r22
    7e86:	31 1d       	adc	r19, r1
    7e88:	c9 01       	movw	r24, r18
    7e8a:	6a e0       	ldi	r22, 0x0A	; 10
    7e8c:	70 e0       	ldi	r23, 0x00	; 0
    7e8e:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    7e92:	48 2f       	mov	r20, r24
    7e94:	40 5d       	subi	r20, 0xD0	; 208
		 xAdd=((xNum+xAdd)/10);
    7e96:	c9 01       	movw	r24, r18
    7e98:	6a e0       	ldi	r22, 0x0A	; 10
    7e9a:	70 e0       	ldi	r23, 0x00	; 0
    7e9c:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
		 PTransNum[Length-i-1]=cNum;
    7ea0:	d8 01       	movw	r26, r16
    7ea2:	4c 93       	st	X, r20
		 sTransNumber[Length-i-1]=cNum;
    7ea4:	d7 01       	movw	r26, r14
    7ea6:	4c 93       	st	X, r20
    7ea8:	08 94       	sec
    7eaa:	e1 08       	sbc	r14, r1
    7eac:	f1 08       	sbc	r15, r1
    7eae:	01 50       	subi	r16, 0x01	; 1
    7eb0:	10 40       	sbci	r17, 0x00	; 0
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    7eb2:	0c 17       	cp	r16, r28
    7eb4:	1d 07       	cpc	r17, r29
    7eb6:	11 f7       	brne	.-60     	; 0x7e7c <GenerateTransactionNum+0x66>
		 cNum='0'+((xNum+xAdd)%10);
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
		 sTransNumber[Length-i-1]=cNum;
	 }
	 sTransNumber[Length]=0;
    7eb8:	ce 0e       	add	r12, r30
    7eba:	df 1e       	adc	r13, r31
    7ebc:	d6 01       	movw	r26, r12
    7ebe:	1c 92       	st	X, r1
	 PTransNum[Length]=0;
    7ec0:	ce 01       	movw	r24, r28
    7ec2:	01 96       	adiw	r24, 0x01	; 1
    7ec4:	e8 0f       	add	r30, r24
    7ec6:	f9 1f       	adc	r31, r25
    7ec8:	10 82       	st	Z, r1

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
    7eca:	6d e3       	ldi	r22, 0x3D	; 61
    7ecc:	71 e0       	ldi	r23, 0x01	; 1
    7ece:	47 e0       	ldi	r20, 0x07	; 7
    7ed0:	50 e0       	ldi	r21, 0x00	; 0
    7ed2:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
}
    7ed6:	27 96       	adiw	r28, 0x07	; 7
    7ed8:	0f b6       	in	r0, 0x3f	; 63
    7eda:	f8 94       	cli
    7edc:	de bf       	out	0x3e, r29	; 62
    7ede:	0f be       	out	0x3f, r0	; 63
    7ee0:	cd bf       	out	0x3d, r28	; 61
    7ee2:	cf 91       	pop	r28
    7ee4:	df 91       	pop	r29
    7ee6:	1f 91       	pop	r17
    7ee8:	0f 91       	pop	r16
    7eea:	ff 90       	pop	r15
    7eec:	ef 90       	pop	r14
    7eee:	df 90       	pop	r13
    7ef0:	cf 90       	pop	r12
    7ef2:	08 95       	ret

00007ef4 <GetParameter>:
	}
  return  PosFound;
}


void GetParameter(char *GFlow,char FLength,char *GCmd,char *GPumpID, char *GeniCSum){
    7ef4:	8f 92       	push	r8
    7ef6:	9f 92       	push	r9
    7ef8:	af 92       	push	r10
    7efa:	bf 92       	push	r11
    7efc:	cf 92       	push	r12
    7efe:	df 92       	push	r13
    7f00:	ef 92       	push	r14
    7f02:	ff 92       	push	r15
    7f04:	0f 93       	push	r16
    7f06:	1f 93       	push	r17
    7f08:	df 93       	push	r29
    7f0a:	cf 93       	push	r28
    7f0c:	cd b7       	in	r28, 0x3d	; 61
    7f0e:	de b7       	in	r29, 0x3e	; 62
    7f10:	a7 97       	sbiw	r28, 0x27	; 39
    7f12:	0f b6       	in	r0, 0x3f	; 63
    7f14:	f8 94       	cli
    7f16:	de bf       	out	0x3e, r29	; 62
    7f18:	0f be       	out	0x3f, r0	; 63
    7f1a:	cd bf       	out	0x3d, r28	; 61
    7f1c:	79 01       	movw	r14, r18
    7f1e:	48 01       	movw	r8, r16
    7f20:	e6 2f       	mov	r30, r22
    7f22:	f0 e0       	ldi	r31, 0x00	; 0
    7f24:	31 97       	sbiw	r30, 0x01	; 1
    7f26:	e8 0f       	add	r30, r24
    7f28:	f9 1f       	adc	r31, r25
    7f2a:	9e 01       	movw	r18, r28
    7f2c:	26 5f       	subi	r18, 0xF6	; 246
    7f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    7f30:	d9 01       	movw	r26, r18
    7f32:	03 c0       	rjmp	.+6      	; 0x7f3a <GetParameter+0x46>
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
	     SGeniusFlow[i]=GFlow[FLength-i-1];
    7f34:	80 81       	ld	r24, Z
    7f36:	8d 93       	st	X+, r24
    7f38:	31 97       	sbiw	r30, 0x01	; 1
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    7f3a:	8a 2f       	mov	r24, r26
    7f3c:	82 1b       	sub	r24, r18
    7f3e:	86 17       	cp	r24, r22
    7f40:	c8 f3       	brcs	.-14     	; 0x7f34 <GetParameter+0x40>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
	 }SGeniusFlow[FLength]=0;
    7f42:	c6 2e       	mov	r12, r22
    7f44:	dd 24       	eor	r13, r13
    7f46:	6a e0       	ldi	r22, 0x0A	; 10
    7f48:	a6 2e       	mov	r10, r22
    7f4a:	b1 2c       	mov	r11, r1
    7f4c:	ac 0e       	add	r10, r28
    7f4e:	bd 1e       	adc	r11, r29
    7f50:	f5 01       	movw	r30, r10
    7f52:	ec 0d       	add	r30, r12
    7f54:	fd 1d       	adc	r31, r13
    7f56:	10 82       	st	Z, r1

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
    7f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f5a:	fa 01       	movw	r30, r20
    7f5c:	80 83       	st	Z, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    7f5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7f60:	89 83       	std	Y+1, r24	; 0x01
    7f62:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f64:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    7f66:	1b 82       	std	Y+3, r1	; 0x03
	 }SGeniusFlow[FLength]=0;

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
	 xPumpID=atoi(sPumpID);
    7f68:	ce 01       	movw	r24, r28
    7f6a:	01 96       	adiw	r24, 0x01	; 1
    7f6c:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
	 *GPumpID=xPumpID;
    7f70:	f7 01       	movw	r30, r14
    7f72:	80 83       	st	Z, r24
	 sprintf_P(strSub,PSTR(":"));
    7f74:	00 d0       	rcall	.+0      	; 0x7f76 <GetParameter+0x82>
    7f76:	00 d0       	rcall	.+0      	; 0x7f78 <GetParameter+0x84>
    7f78:	57 e0       	ldi	r21, 0x07	; 7
    7f7a:	e5 2e       	mov	r14, r21
    7f7c:	f1 2c       	mov	r15, r1
    7f7e:	ec 0e       	add	r14, r28
    7f80:	fd 1e       	adc	r15, r29
    7f82:	ed b7       	in	r30, 0x3d	; 61
    7f84:	fe b7       	in	r31, 0x3e	; 62
    7f86:	f2 82       	std	Z+2, r15	; 0x02
    7f88:	e1 82       	std	Z+1, r14	; 0x01
    7f8a:	8f e5       	ldi	r24, 0x5F	; 95
    7f8c:	95 e0       	ldi	r25, 0x05	; 5
    7f8e:	94 83       	std	Z+4, r25	; 0x04
    7f90:	83 83       	std	Z+3, r24	; 0x03
    7f92:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 if (Pos(strSub,SGeniusFlow)<FLength){
    7f96:	0f 90       	pop	r0
    7f98:	0f 90       	pop	r0
    7f9a:	0f 90       	pop	r0
    7f9c:	0f 90       	pop	r0
    7f9e:	c7 01       	movw	r24, r14
    7fa0:	b5 01       	movw	r22, r10
    7fa2:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <Pos>
    7fa6:	8c 15       	cp	r24, r12
    7fa8:	9d 05       	cpc	r25, r13
    7faa:	4c f5       	brge	.+82     	; 0x7ffe <GetParameter+0x10a>
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
    7fac:	c7 01       	movw	r24, r14
    7fae:	b5 01       	movw	r22, r10
    7fb0:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <Pos>
    7fb4:	8c 01       	movw	r16, r24
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    7fb6:	c7 01       	movw	r24, r14
    7fb8:	b5 01       	movw	r22, r10
    7fba:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <Pos>
    7fbe:	a6 01       	movw	r20, r12
    7fc0:	40 1b       	sub	r20, r16
    7fc2:	51 0b       	sbc	r21, r17
    7fc4:	d5 01       	movw	r26, r10
    7fc6:	a8 0f       	add	r26, r24
    7fc8:	b9 1f       	adc	r27, r25
    7fca:	20 e0       	ldi	r18, 0x00	; 0
    7fcc:	30 e0       	ldi	r19, 0x00	; 0
    7fce:	be 01       	movw	r22, r28
    7fd0:	6c 5f       	subi	r22, 0xFC	; 252
    7fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    7fd4:	07 c0       	rjmp	.+14     	; 0x7fe4 <GetParameter+0xf0>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    7fd6:	fb 01       	movw	r30, r22
    7fd8:	e2 0f       	add	r30, r18
    7fda:	f3 1f       	adc	r31, r19
    7fdc:	8c 91       	ld	r24, X
    7fde:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    7fe0:	2f 5f       	subi	r18, 0xFF	; 255
    7fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    7fe4:	11 96       	adiw	r26, 0x01	; 1
    7fe6:	24 17       	cp	r18, r20
    7fe8:	35 07       	cpc	r19, r21
    7fea:	a8 f3       	brcs	.-22     	; 0x7fd6 <GetParameter+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    7fec:	46 0f       	add	r20, r22
    7fee:	57 1f       	adc	r21, r23
    7ff0:	fa 01       	movw	r30, r20
    7ff2:	10 82       	st	Z, r1
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
	 if (Pos(strSub,SGeniusFlow)<FLength){
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
		 xCsum=atoi(sCSum);
    7ff4:	cb 01       	movw	r24, r22
    7ff6:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
	     *GeniCSum=xCsum;
    7ffa:	f4 01       	movw	r30, r8
    7ffc:	80 83       	st	Z, r24
	 sprintf_P(strSend,PSTR("%d"),xPumpID);
	 uart_print(1,1,strSend);
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}
    7ffe:	a7 96       	adiw	r28, 0x27	; 39
    8000:	0f b6       	in	r0, 0x3f	; 63
    8002:	f8 94       	cli
    8004:	de bf       	out	0x3e, r29	; 62
    8006:	0f be       	out	0x3f, r0	; 63
    8008:	cd bf       	out	0x3d, r28	; 61
    800a:	cf 91       	pop	r28
    800c:	df 91       	pop	r29
    800e:	1f 91       	pop	r17
    8010:	0f 91       	pop	r16
    8012:	ff 90       	pop	r15
    8014:	ef 90       	pop	r14
    8016:	df 90       	pop	r13
    8018:	cf 90       	pop	r12
    801a:	bf 90       	pop	r11
    801c:	af 90       	pop	r10
    801e:	9f 90       	pop	r9
    8020:	8f 90       	pop	r8
    8022:	08 95       	ret

00008024 <GeniusProtocol>:
   return Result;	 
}

//enum eGeniusProtocolCommand{GP_PUMP_STATUS,GP_PUMP_LAST_TRANSACTION,GP_PUMP_STOP,GP_PUMP_RESUME,GP_PUMP_PRESET};

void GeniusProtocol(char dataIn){
    8024:	ff 92       	push	r15
    8026:	0f 93       	push	r16
    8028:	1f 93       	push	r17
    802a:	df 93       	push	r29
    802c:	cf 93       	push	r28
    802e:	cd b7       	in	r28, 0x3d	; 61
    8030:	de b7       	in	r29, 0x3e	; 62
    8032:	67 97       	sbiw	r28, 0x17	; 23
    8034:	0f b6       	in	r0, 0x3f	; 63
    8036:	f8 94       	cli
    8038:	de bf       	out	0x3e, r29	; 62
    803a:	0f be       	out	0x3f, r0	; 63
    803c:	cd bf       	out	0x3d, r28	; 61
    803e:	f8 2e       	mov	r15, r24
	 char i,GeniCmd,GeniPumpID,GeniCSum;//,sCmd[7];
	 char strSend[20];

    //uart(1,1,dataIn);

	if (dataIn==0x0D){	
    8040:	8d e0       	ldi	r24, 0x0D	; 13
    8042:	f8 16       	cp	r15, r24
    8044:	09 f0       	breq	.+2      	; 0x8048 <GeniusProtocol+0x24>
    8046:	45 c0       	rjmp	.+138    	; 0x80d2 <GeniusProtocol+0xae>
	    GetParameter(Geniflow,FlowLength,&GeniCmd,&GeniPumpID,&GeniCSum);
    8048:	84 ec       	ldi	r24, 0xC4	; 196
    804a:	91 e0       	ldi	r25, 0x01	; 1
    804c:	60 91 c3 01 	lds	r22, 0x01C3
    8050:	ae 01       	movw	r20, r28
    8052:	4f 5f       	subi	r20, 0xFF	; 255
    8054:	5f 4f       	sbci	r21, 0xFF	; 255
    8056:	9e 01       	movw	r18, r28
    8058:	2e 5f       	subi	r18, 0xFE	; 254
    805a:	3f 4f       	sbci	r19, 0xFF	; 255
    805c:	8e 01       	movw	r16, r28
    805e:	0d 5f       	subi	r16, 0xFD	; 253
    8060:	1f 4f       	sbci	r17, 0xFF	; 255
    8062:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <GetParameter>
		FlowLength=0;
    8066:	10 92 c3 01 	sts	0x01C3, r1
		IsGeniusFlow=False;
    806a:	10 92 c2 01 	sts	0x01C2, r1
		FillChar(strSend,0,sizeof(strSend));
		sprintf_P(strSend,PSTR("%c%.2d:"),GeniCmd,GeniPumpID);
    806e:	ad b7       	in	r26, 0x3d	; 61
    8070:	be b7       	in	r27, 0x3e	; 62
    8072:	18 97       	sbiw	r26, 0x08	; 8
    8074:	0f b6       	in	r0, 0x3f	; 63
    8076:	f8 94       	cli
    8078:	be bf       	out	0x3e, r27	; 62
    807a:	0f be       	out	0x3f, r0	; 63
    807c:	ad bf       	out	0x3d, r26	; 61
    807e:	ed b7       	in	r30, 0x3d	; 61
    8080:	fe b7       	in	r31, 0x3e	; 62
    8082:	31 96       	adiw	r30, 0x01	; 1
    8084:	8e 01       	movw	r16, r28
    8086:	0c 5f       	subi	r16, 0xFC	; 252
    8088:	1f 4f       	sbci	r17, 0xFF	; 255
    808a:	12 96       	adiw	r26, 0x02	; 2
    808c:	1c 93       	st	X, r17
    808e:	0e 93       	st	-X, r16
    8090:	11 97       	sbiw	r26, 0x01	; 1
    8092:	81 e5       	ldi	r24, 0x51	; 81
    8094:	95 e0       	ldi	r25, 0x05	; 5
    8096:	93 83       	std	Z+3, r25	; 0x03
    8098:	82 83       	std	Z+2, r24	; 0x02
    809a:	89 81       	ldd	r24, Y+1	; 0x01
    809c:	84 83       	std	Z+4, r24	; 0x04
    809e:	15 82       	std	Z+5, r1	; 0x05
    80a0:	8a 81       	ldd	r24, Y+2	; 0x02
    80a2:	86 83       	std	Z+6, r24	; 0x06
    80a4:	17 82       	std	Z+7, r1	; 0x07
    80a6:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		//uart_print(1,1,strSend);


		if ((SumChecksum(strSend))==GeniCSum){
    80aa:	8d b7       	in	r24, 0x3d	; 61
    80ac:	9e b7       	in	r25, 0x3e	; 62
    80ae:	08 96       	adiw	r24, 0x08	; 8
    80b0:	0f b6       	in	r0, 0x3f	; 63
    80b2:	f8 94       	cli
    80b4:	9e bf       	out	0x3e, r25	; 62
    80b6:	0f be       	out	0x3f, r0	; 63
    80b8:	8d bf       	out	0x3d, r24	; 61
    80ba:	c8 01       	movw	r24, r16
    80bc:	0e 94 8c 21 	call	0x4318	; 0x4318 <SumChecksum>
    80c0:	9b 81       	ldd	r25, Y+3	; 0x03
    80c2:	89 17       	cp	r24, r25
    80c4:	31 f4       	brne	.+12     	; 0x80d2 <GeniusProtocol+0xae>
		     switch(GeniCmd){
    80c6:	89 81       	ldd	r24, Y+1	; 0x01
    80c8:	84 35       	cpi	r24, 0x54	; 84
    80ca:	19 f4       	brne	.+6      	; 0x80d2 <GeniusProtocol+0xae>
			 case 'C'://PumpStatus
			      GeniusSendPumpStatus(GeniPumpID);
			      break;
             case 'T'://Transaction Request: T01:239<0D>
			      GeniusSendLastTransaction(GeniPumpID);
    80cc:	8a 81       	ldd	r24, Y+2	; 0x02
    80ce:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <GeniusSendLastTransaction>
    80d2:	e6 ed       	ldi	r30, 0xD6	; 214
    80d4:	f1 e0       	ldi	r31, 0x01	; 1
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
	    Geniflow[i]=Geniflow[i-1];	
    80d6:	80 81       	ld	r24, Z
    80d8:	81 83       	std	Z+1, r24	; 0x01
    80da:	31 97       	sbiw	r30, 0x01	; 1
			      break;
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
    80dc:	91 e0       	ldi	r25, 0x01	; 1
    80de:	e3 3c       	cpi	r30, 0xC3	; 195
    80e0:	f9 07       	cpc	r31, r25
    80e2:	c9 f7       	brne	.-14     	; 0x80d6 <GeniusProtocol+0xb2>
	    Geniflow[i]=Geniflow[i-1];	
	}Geniflow[0]=dataIn;
    80e4:	f1 82       	std	Z+1, r15	; 0x01

	if (IsGeniusCommand(dataIn)==True)IsGeniusFlow=True;
    80e6:	8f 2d       	mov	r24, r15
    80e8:	0e 94 ac 21 	call	0x4358	; 0x4358 <IsGeniusCommand>
    80ec:	81 30       	cpi	r24, 0x01	; 1
    80ee:	11 f4       	brne	.+4      	; 0x80f4 <GeniusProtocol+0xd0>
    80f0:	80 93 c2 01 	sts	0x01C2, r24
	if (IsGeniusFlow==True)FlowLength++;
    80f4:	80 91 c2 01 	lds	r24, 0x01C2
    80f8:	81 30       	cpi	r24, 0x01	; 1
    80fa:	29 f4       	brne	.+10     	; 0x8106 <GeniusProtocol+0xe2>
    80fc:	80 91 c3 01 	lds	r24, 0x01C3
    8100:	8f 5f       	subi	r24, 0xFF	; 255
    8102:	80 93 c3 01 	sts	0x01C3, r24
	Geniflow[3]=Geniflow[2];
	Geniflow[2]=Geniflow[1];
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}
    8106:	67 96       	adiw	r28, 0x17	; 23
    8108:	0f b6       	in	r0, 0x3f	; 63
    810a:	f8 94       	cli
    810c:	de bf       	out	0x3e, r29	; 62
    810e:	0f be       	out	0x3f, r0	; 63
    8110:	cd bf       	out	0x3d, r28	; 61
    8112:	cf 91       	pop	r28
    8114:	df 91       	pop	r29
    8116:	1f 91       	pop	r17
    8118:	0f 91       	pop	r16
    811a:	ff 90       	pop	r15
    811c:	08 95       	ret

0000811e <__vector_30>:
}

// NotSuccessful! 


ISR(USART1_RX_vect){
    811e:	1f 92       	push	r1
    8120:	0f 92       	push	r0
    8122:	0f b6       	in	r0, 0x3f	; 63
    8124:	0f 92       	push	r0
    8126:	0b b6       	in	r0, 0x3b	; 59
    8128:	0f 92       	push	r0
    812a:	11 24       	eor	r1, r1
    812c:	1f 93       	push	r17
    812e:	2f 93       	push	r18
    8130:	3f 93       	push	r19
    8132:	4f 93       	push	r20
    8134:	5f 93       	push	r21
    8136:	6f 93       	push	r22
    8138:	7f 93       	push	r23
    813a:	8f 93       	push	r24
    813c:	9f 93       	push	r25
    813e:	af 93       	push	r26
    8140:	bf 93       	push	r27
    8142:	ef 93       	push	r30
    8144:	ff 93       	push	r31
	char dataTX1,serialSend[12];
	static char IsAdvanZProtocol=False;
	unsigned int i;
	dataTX1 = UDR1;
    8146:	10 91 9c 00 	lds	r17, 0x009C
    //Not Successfull!
	//NewPacket
	if (IsNewPacket==True){
    814a:	80 91 88 01 	lds	r24, 0x0188
    814e:	81 30       	cpi	r24, 0x01	; 1
    8150:	51 f4       	brne	.+20     	; 0x8166 <__vector_30+0x48>
	    if (dataTX1==0x01){
    8152:	11 30       	cpi	r17, 0x01	; 1
    8154:	41 f4       	brne	.+16     	; 0x8166 <__vector_30+0x48>
		    char_count=0;
    8156:	10 92 8a 01 	sts	0x018A, r1
    815a:	10 92 89 01 	sts	0x0189, r1
            IsNewPacket=False;
    815e:	10 92 88 01 	sts	0x0188, r1
			IsAdvanZProtocol=True;
    8162:	10 93 9d 02 	sts	0x029D, r17
			}
	}
    //Save data to buffer if AdvanZ MSG
	if (IsAdvanZProtocol==True){
    8166:	80 91 9d 02 	lds	r24, 0x029D
    816a:	81 30       	cpi	r24, 0x01	; 1
    816c:	69 f4       	brne	.+26     	; 0x8188 <__vector_30+0x6a>
	    rcv_trans[char_count]=dataTX1;
    816e:	80 91 89 01 	lds	r24, 0x0189
    8172:	90 91 8a 01 	lds	r25, 0x018A
    8176:	fc 01       	movw	r30, r24
    8178:	ed 5d       	subi	r30, 0xDD	; 221
    817a:	f6 4f       	sbci	r31, 0xF6	; 246
    817c:	10 83       	st	Z, r17
	    char_count++; 
    817e:	01 96       	adiw	r24, 0x01	; 1
    8180:	90 93 8a 01 	sts	0x018A, r25
    8184:	80 93 89 01 	sts	0x0189, r24
	}

	if (dataTX1==0x02){
    8188:	12 30       	cpi	r17, 0x02	; 2
    818a:	b1 f5       	brne	.+108    	; 0x81f8 <__vector_30+0xda>
		transLength=char_count;
    818c:	60 91 89 01 	lds	r22, 0x0189
    8190:	70 91 8a 01 	lds	r23, 0x018A
    8194:	70 93 8c 01 	sts	0x018C, r23
    8198:	60 93 8b 01 	sts	0x018B, r22
		char_count=0;
    819c:	10 92 8a 01 	sts	0x018A, r1
    81a0:	10 92 89 01 	sts	0x0189, r1
		IsAdvanZProtocol=False;
    81a4:	10 92 9d 02 	sts	0x029D, r1

		//MessageIdentification
        if (MsgCode!=MSG_NONE)MsgCode=MSG_NONE;
	    MsgCode=((rcv_trans[35]-'0')*10)+(rcv_trans[36]-'0');
    81a8:	20 91 47 09 	lds	r18, 0x0947
    81ac:	20 51       	subi	r18, 0x10	; 16
    81ae:	80 91 46 09 	lds	r24, 0x0946
    81b2:	3a e0       	ldi	r19, 0x0A	; 10
    81b4:	83 9f       	mul	r24, r19
    81b6:	c0 01       	movw	r24, r0
    81b8:	11 24       	eor	r1, r1
    81ba:	28 0f       	add	r18, r24
    81bc:	20 93 24 01 	sts	0x0124, r18
     
	    IdentifyMessage(rcv_trans[0],transLength);
    81c0:	80 91 23 09 	lds	r24, 0x0923
    81c4:	0e 94 77 19 	call	0x32ee	; 0x32ee <IdentifyMessage>
		IsNewPacket=True;
    81c8:	21 e0       	ldi	r18, 0x01	; 1
    81ca:	20 93 88 01 	sts	0x0188, r18

		if ((rcv_trans[35]=='8')&&(rcv_trans[36]=='1')){
    81ce:	80 91 46 09 	lds	r24, 0x0946
    81d2:	88 33       	cpi	r24, 0x38	; 56
    81d4:	89 f4       	brne	.+34     	; 0x81f8 <__vector_30+0xda>
    81d6:	80 91 47 09 	lds	r24, 0x0947
    81da:	81 33       	cpi	r24, 0x31	; 49
    81dc:	69 f4       	brne	.+26     	; 0x81f8 <__vector_30+0xda>
		   LengthMessage81=transLength-12-44;
    81de:	80 91 8b 01 	lds	r24, 0x018B
    81e2:	90 91 8c 01 	lds	r25, 0x018C
    81e6:	c8 97       	sbiw	r24, 0x38	; 56
    81e8:	90 93 8e 01 	sts	0x018E, r25
    81ec:	80 93 8d 01 	sts	0x018D, r24
		   IsMessage81=True;
    81f0:	20 93 a8 01 	sts	0x01A8, r18
		   IsCompleteFilling=True;
    81f4:	20 93 ab 01 	sts	0x01AB, r18
		

	}//Endif(dataTX1==0x02)

	//ConfigDetection: iConf?<0D><0A>
	if (IsNewPacket!=True)
    81f8:	80 91 88 01 	lds	r24, 0x0188
    81fc:	81 30       	cpi	r24, 0x01	; 1
    81fe:	19 f0       	breq	.+6      	; 0x8206 <__vector_30+0xe8>
	    ConfigProtocol(dataTX1);
    8200:	81 2f       	mov	r24, r17
    8202:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <ConfigProtocol>
	//GeniusDetection: [CMD][MSG][CSUM][0x0D]
	if ((IFType==IT_STANDALONE)&&(IsNewPacket!=True))
    8206:	80 91 00 01 	lds	r24, 0x0100
    820a:	82 30       	cpi	r24, 0x02	; 2
    820c:	39 f4       	brne	.+14     	; 0x821c <__vector_30+0xfe>
    820e:	80 91 88 01 	lds	r24, 0x0188
    8212:	81 30       	cpi	r24, 0x01	; 1
    8214:	19 f0       	breq	.+6      	; 0x821c <__vector_30+0xfe>
	     GeniusProtocol(dataTX1);		
    8216:	81 2f       	mov	r24, r17
    8218:	0e 94 12 40 	call	0x8024	; 0x8024 <GeniusProtocol>
    //uart(0,1,dataTX1);
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}
    821c:	ff 91       	pop	r31
    821e:	ef 91       	pop	r30
    8220:	bf 91       	pop	r27
    8222:	af 91       	pop	r26
    8224:	9f 91       	pop	r25
    8226:	8f 91       	pop	r24
    8228:	7f 91       	pop	r23
    822a:	6f 91       	pop	r22
    822c:	5f 91       	pop	r21
    822e:	4f 91       	pop	r20
    8230:	3f 91       	pop	r19
    8232:	2f 91       	pop	r18
    8234:	1f 91       	pop	r17
    8236:	0f 90       	pop	r0
    8238:	0b be       	out	0x3b, r0	; 59
    823a:	0f 90       	pop	r0
    823c:	0f be       	out	0x3f, r0	; 63
    823e:	0f 90       	pop	r0
    8240:	1f 90       	pop	r1
    8242:	18 95       	reti

00008244 <procMessage99>:
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}

char procMessage99(){//<STX>[IFT IDSeq N Srce IPDest IPMsg CodeTran NoShiftDateTimeIsland IDFIP IDProduct IDDescriptionPriceVolumeAmountMOP TypeMOP NameCard IDCard HolderBalance Type Balance MeterVolume MeterAmount Current TimePrint Count Checksum ETX
    8244:	0f 93       	push	r16
    8246:	1f 93       	push	r17
     char Result;
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
    8248:	80 91 23 09 	lds	r24, 0x0923
    824c:	81 30       	cpi	r24, 0x01	; 1
    824e:	09 f0       	breq	.+2      	; 0x8252 <procMessage99+0xe>
    8250:	2e c2       	rjmp	.+1116   	; 0x86ae <procMessage99+0x46a>
    8252:	80 91 8b 01 	lds	r24, 0x018B
    8256:	90 91 8c 01 	lds	r25, 0x018C
    825a:	8a 57       	subi	r24, 0x7A	; 122
    825c:	91 40       	sbci	r25, 0x01	; 1
    825e:	08 f4       	brcc	.+2      	; 0x8262 <procMessage99+0x1e>
    8260:	26 c2       	rjmp	.+1100   	; 0x86ae <procMessage99+0x46a>
    8262:	20 e0       	ldi	r18, 0x00	; 0
    8264:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8266:	f9 01       	movw	r30, r18
    8268:	e3 57       	subi	r30, 0x73	; 115
    826a:	f3 4f       	sbci	r31, 0xF3	; 243
    826c:	d9 01       	movw	r26, r18
    826e:	ad 5d       	subi	r26, 0xDD	; 221
    8270:	b6 4f       	sbci	r27, 0xF6	; 246
    8272:	95 96       	adiw	r26, 0x25	; 37
    8274:	8c 91       	ld	r24, X
    8276:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8278:	2f 5f       	subi	r18, 0xFF	; 255
    827a:	3f 4f       	sbci	r19, 0xFF	; 255
    827c:	26 30       	cpi	r18, 0x06	; 6
    827e:	31 05       	cpc	r19, r1
    8280:	91 f7       	brne	.-28     	; 0x8266 <procMessage99+0x22>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8282:	10 92 93 0c 	sts	0x0C93, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8286:	80 91 4e 09 	lds	r24, 0x094E
    828a:	80 93 6e 0c 	sts	0x0C6E, r24
	 }Dest[Length]=0;
    828e:	10 92 6f 0c 	sts	0x0C6F, r1
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
       StrPosCopy(rcv_trans,strTranNo,37,6);//Transaction Number
       StrPosCopy(rcv_trans,strShift,43,1);
       Shift=(CharPosCopy(rcv_trans,43)-'0');
    8292:	80 53       	subi	r24, 0x30	; 48
    8294:	80 93 bb 01 	sts	0x01BB, r24
    8298:	20 e0       	ldi	r18, 0x00	; 0
    829a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    829c:	f9 01       	movw	r30, r18
    829e:	ec 58       	subi	r30, 0x8C	; 140
    82a0:	f8 4f       	sbci	r31, 0xF8	; 248
    82a2:	d9 01       	movw	r26, r18
    82a4:	ad 5d       	subi	r26, 0xDD	; 221
    82a6:	b6 4f       	sbci	r27, 0xF6	; 246
    82a8:	9c 96       	adiw	r26, 0x2c	; 44
    82aa:	8c 91       	ld	r24, X
    82ac:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    82ae:	2f 5f       	subi	r18, 0xFF	; 255
    82b0:	3f 4f       	sbci	r19, 0xFF	; 255
    82b2:	2a 30       	cpi	r18, 0x0A	; 10
    82b4:	31 05       	cpc	r19, r1
    82b6:	91 f7       	brne	.-28     	; 0x829c <procMessage99+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    82b8:	10 92 7e 07 	sts	0x077E, r1
    82bc:	20 e0       	ldi	r18, 0x00	; 0
    82be:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82c0:	f9 01       	movw	r30, r18
    82c2:	ed 5a       	subi	r30, 0xAD	; 173
    82c4:	fc 4f       	sbci	r31, 0xFC	; 252
    82c6:	d9 01       	movw	r26, r18
    82c8:	ad 5d       	subi	r26, 0xDD	; 221
    82ca:	b6 4f       	sbci	r27, 0xF6	; 246
    82cc:	d6 96       	adiw	r26, 0x36	; 54
    82ce:	8c 91       	ld	r24, X
    82d0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    82d2:	2f 5f       	subi	r18, 0xFF	; 255
    82d4:	3f 4f       	sbci	r19, 0xFF	; 255
    82d6:	28 30       	cpi	r18, 0x08	; 8
    82d8:	31 05       	cpc	r19, r1
    82da:	91 f7       	brne	.-28     	; 0x82c0 <procMessage99+0x7c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    82dc:	10 92 5b 03 	sts	0x035B, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82e0:	80 91 61 09 	lds	r24, 0x0961
    82e4:	80 93 fd 08 	sts	0x08FD, r24
    82e8:	80 91 62 09 	lds	r24, 0x0962
    82ec:	80 93 fe 08 	sts	0x08FE, r24
	 }Dest[Length]=0;
    82f0:	10 92 ff 08 	sts	0x08FF, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82f4:	80 91 63 09 	lds	r24, 0x0963
    82f8:	80 93 bf 07 	sts	0x07BF, r24
    82fc:	80 91 64 09 	lds	r24, 0x0964
    8300:	80 93 c0 07 	sts	0x07C0, r24
	 }Dest[Length]=0;
    8304:	10 92 c1 07 	sts	0x07C1, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8308:	80 91 65 09 	lds	r24, 0x0965
    830c:	80 93 77 08 	sts	0x0877, r24
    8310:	80 91 66 09 	lds	r24, 0x0966
    8314:	80 93 78 08 	sts	0x0878, r24
	 }Dest[Length]=0;
    8318:	10 92 79 08 	sts	0x0879, r1
    831c:	20 e0       	ldi	r18, 0x00	; 0
    831e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8320:	f9 01       	movw	r30, r18
    8322:	ee 5e       	subi	r30, 0xEE	; 238
    8324:	f7 4f       	sbci	r31, 0xF7	; 247
    8326:	d9 01       	movw	r26, r18
    8328:	a9 59       	subi	r26, 0x99	; 153
    832a:	b6 4f       	sbci	r27, 0xF6	; 246
    832c:	8c 91       	ld	r24, X
    832e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8330:	2f 5f       	subi	r18, 0xFF	; 255
    8332:	3f 4f       	sbci	r19, 0xFF	; 255
    8334:	2f 30       	cpi	r18, 0x0F	; 15
    8336:	31 05       	cpc	r19, r1
    8338:	99 f7       	brne	.-26     	; 0x8320 <procMessage99+0xdc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    833a:	10 92 21 08 	sts	0x0821, r1
    833e:	20 e0       	ldi	r18, 0x00	; 0
    8340:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8342:	f9 01       	movw	r30, r18
    8344:	ec 55       	subi	r30, 0x5C	; 92
    8346:	fa 4f       	sbci	r31, 0xFA	; 250
    8348:	d9 01       	movw	r26, r18
    834a:	aa 58       	subi	r26, 0x8A	; 138
    834c:	b6 4f       	sbci	r27, 0xF6	; 246
    834e:	8c 91       	ld	r24, X
    8350:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8352:	2f 5f       	subi	r18, 0xFF	; 255
    8354:	3f 4f       	sbci	r19, 0xFF	; 255
    8356:	28 30       	cpi	r18, 0x08	; 8
    8358:	31 05       	cpc	r19, r1
    835a:	99 f7       	brne	.-26     	; 0x8342 <procMessage99+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    835c:	10 92 ac 05 	sts	0x05AC, r1
    8360:	20 e0       	ldi	r18, 0x00	; 0
    8362:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8364:	f9 01       	movw	r30, r18
    8366:	e5 58       	subi	r30, 0x85	; 133
    8368:	fc 4f       	sbci	r31, 0xFC	; 252
    836a:	d9 01       	movw	r26, r18
    836c:	a2 58       	subi	r26, 0x82	; 130
    836e:	b6 4f       	sbci	r27, 0xF6	; 246
    8370:	8c 91       	ld	r24, X
    8372:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8374:	2f 5f       	subi	r18, 0xFF	; 255
    8376:	3f 4f       	sbci	r19, 0xFF	; 255
    8378:	28 30       	cpi	r18, 0x08	; 8
    837a:	31 05       	cpc	r19, r1
    837c:	99 f7       	brne	.-26     	; 0x8364 <procMessage99+0x120>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    837e:	10 92 83 03 	sts	0x0383, r1
    8382:	20 e0       	ldi	r18, 0x00	; 0
    8384:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8386:	f9 01       	movw	r30, r18
    8388:	e7 54       	subi	r30, 0x47	; 71
    838a:	f4 4f       	sbci	r31, 0xF4	; 244
    838c:	d9 01       	movw	r26, r18
    838e:	aa 57       	subi	r26, 0x7A	; 122
    8390:	b6 4f       	sbci	r27, 0xF6	; 246
    8392:	8c 91       	ld	r24, X
    8394:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8396:	2f 5f       	subi	r18, 0xFF	; 255
    8398:	3f 4f       	sbci	r19, 0xFF	; 255
    839a:	2a 30       	cpi	r18, 0x0A	; 10
    839c:	31 05       	cpc	r19, r1
    839e:	99 f7       	brne	.-26     	; 0x8386 <procMessage99+0x142>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83a0:	10 92 c3 0b 	sts	0x0BC3, r1

	   //FillChar(strAmount,sizeof(strAmount),0);
       StrPosCopy(rcv_trans,strAmount,99,10);

       //StrPosCopy(rcv_trans,strMOPType,109,1);
       MOPType=(CharPosCopy(rcv_trans,109)-'0');
    83a4:	80 91 90 09 	lds	r24, 0x0990
    83a8:	80 53       	subi	r24, 0x30	; 48
    83aa:	80 93 ba 01 	sts	0x01BA, r24
    83ae:	20 e0       	ldi	r18, 0x00	; 0
    83b0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83b2:	f9 01       	movw	r30, r18
    83b4:	ed 57       	subi	r30, 0x7D	; 125
    83b6:	fa 4f       	sbci	r31, 0xFA	; 250
    83b8:	d9 01       	movw	r26, r18
    83ba:	af 56       	subi	r26, 0x6F	; 111
    83bc:	b6 4f       	sbci	r27, 0xF6	; 246
    83be:	8c 91       	ld	r24, X
    83c0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    83c2:	2f 5f       	subi	r18, 0xFF	; 255
    83c4:	3f 4f       	sbci	r19, 0xFF	; 255
    83c6:	24 31       	cpi	r18, 0x14	; 20
    83c8:	31 05       	cpc	r19, r1
    83ca:	99 f7       	brne	.-26     	; 0x83b2 <procMessage99+0x16e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83cc:	10 92 97 05 	sts	0x0597, r1
    83d0:	20 e0       	ldi	r18, 0x00	; 0
    83d2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83d4:	f9 01       	movw	r30, r18
    83d6:	e1 57       	subi	r30, 0x71	; 113
    83d8:	f4 4f       	sbci	r31, 0xF4	; 244
    83da:	d9 01       	movw	r26, r18
    83dc:	ab 55       	subi	r26, 0x5B	; 91
    83de:	b6 4f       	sbci	r27, 0xF6	; 246
    83e0:	8c 91       	ld	r24, X
    83e2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    83e4:	2f 5f       	subi	r18, 0xFF	; 255
    83e6:	3f 4f       	sbci	r19, 0xFF	; 255
    83e8:	24 31       	cpi	r18, 0x14	; 20
    83ea:	31 05       	cpc	r19, r1
    83ec:	99 f7       	brne	.-26     	; 0x83d4 <procMessage99+0x190>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83ee:	10 92 a3 0b 	sts	0x0BA3, r1
    83f2:	20 e0       	ldi	r18, 0x00	; 0
    83f4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83f6:	f9 01       	movw	r30, r18
    83f8:	e6 5d       	subi	r30, 0xD6	; 214
    83fa:	fc 4f       	sbci	r31, 0xFC	; 252
    83fc:	d9 01       	movw	r26, r18
    83fe:	a7 54       	subi	r26, 0x47	; 71
    8400:	b6 4f       	sbci	r27, 0xF6	; 246
    8402:	8c 91       	ld	r24, X
    8404:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8406:	2f 5f       	subi	r18, 0xFF	; 255
    8408:	3f 4f       	sbci	r19, 0xFF	; 255
    840a:	28 32       	cpi	r18, 0x28	; 40
    840c:	31 05       	cpc	r19, r1
    840e:	99 f7       	brne	.-26     	; 0x83f6 <procMessage99+0x1b2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8410:	10 92 52 03 	sts	0x0352, r1
    8414:	20 e0       	ldi	r18, 0x00	; 0
    8416:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8418:	f9 01       	movw	r30, r18
    841a:	ef 59       	subi	r30, 0x9F	; 159
    841c:	fc 4f       	sbci	r31, 0xFC	; 252
    841e:	d9 01       	movw	r26, r18
    8420:	af 51       	subi	r26, 0x1F	; 31
    8422:	b6 4f       	sbci	r27, 0xF6	; 246
    8424:	8c 91       	ld	r24, X
    8426:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8428:	2f 5f       	subi	r18, 0xFF	; 255
    842a:	3f 4f       	sbci	r19, 0xFF	; 255
    842c:	29 31       	cpi	r18, 0x19	; 25
    842e:	31 05       	cpc	r19, r1
    8430:	99 f7       	brne	.-26     	; 0x8418 <procMessage99+0x1d4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8432:	10 92 7a 03 	sts	0x037A, r1
    8436:	20 e0       	ldi	r18, 0x00	; 0
    8438:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    843a:	f9 01       	movw	r30, r18
    843c:	e2 50       	subi	r30, 0x02	; 2
    843e:	f4 4f       	sbci	r31, 0xF4	; 244
    8440:	d9 01       	movw	r26, r18
    8442:	a6 50       	subi	r26, 0x06	; 6
    8444:	b6 4f       	sbci	r27, 0xF6	; 246
    8446:	8c 91       	ld	r24, X
    8448:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    844a:	2f 5f       	subi	r18, 0xFF	; 255
    844c:	3f 4f       	sbci	r19, 0xFF	; 255
    844e:	2d 30       	cpi	r18, 0x0D	; 13
    8450:	31 05       	cpc	r19, r1
    8452:	99 f7       	brne	.-26     	; 0x843a <procMessage99+0x1f6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8454:	10 92 0b 0c 	sts	0x0C0B, r1
    8458:	20 e0       	ldi	r18, 0x00	; 0
    845a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    845c:	f9 01       	movw	r30, r18
    845e:	ee 56       	subi	r30, 0x6E	; 110
    8460:	fc 4f       	sbci	r31, 0xFC	; 252
    8462:	d9 01       	movw	r26, r18
    8464:	a9 5f       	subi	r26, 0xF9	; 249
    8466:	b5 4f       	sbci	r27, 0xF5	; 245
    8468:	8c 91       	ld	r24, X
    846a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    846c:	2f 5f       	subi	r18, 0xFF	; 255
    846e:	3f 4f       	sbci	r19, 0xFF	; 255
    8470:	2d 30       	cpi	r18, 0x0D	; 13
    8472:	31 05       	cpc	r19, r1
    8474:	99 f7       	brne	.-26     	; 0x845c <procMessage99+0x218>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8476:	10 92 9f 03 	sts	0x039F, r1
    847a:	20 e0       	ldi	r18, 0x00	; 0
    847c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    847e:	f9 01       	movw	r30, r18
    8480:	e1 51       	subi	r30, 0x11	; 17
    8482:	f7 4f       	sbci	r31, 0xF7	; 247
    8484:	d9 01       	movw	r26, r18
    8486:	ac 5e       	subi	r26, 0xEC	; 236
    8488:	b5 4f       	sbci	r27, 0xF5	; 245
    848a:	8c 91       	ld	r24, X
    848c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    848e:	2f 5f       	subi	r18, 0xFF	; 255
    8490:	3f 4f       	sbci	r19, 0xFF	; 255
    8492:	2d 30       	cpi	r18, 0x0D	; 13
    8494:	31 05       	cpc	r19, r1
    8496:	99 f7       	brne	.-26     	; 0x847e <procMessage99+0x23a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8498:	10 92 fc 08 	sts	0x08FC, r1
    849c:	20 e0       	ldi	r18, 0x00	; 0
    849e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84a0:	f9 01       	movw	r30, r18
    84a2:	ee 53       	subi	r30, 0x3E	; 62
    84a4:	f8 4f       	sbci	r31, 0xF8	; 248
    84a6:	d9 01       	movw	r26, r18
    84a8:	af 5d       	subi	r26, 0xDF	; 223
    84aa:	b5 4f       	sbci	r27, 0xF5	; 245
    84ac:	8c 91       	ld	r24, X
    84ae:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    84b0:	2f 5f       	subi	r18, 0xFF	; 255
    84b2:	3f 4f       	sbci	r19, 0xFF	; 255
    84b4:	23 31       	cpi	r18, 0x13	; 19
    84b6:	31 05       	cpc	r19, r1
    84b8:	99 f7       	brne	.-26     	; 0x84a0 <procMessage99+0x25c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    84ba:	10 92 d5 07 	sts	0x07D5, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84be:	80 91 34 0a 	lds	r24, 0x0A34
    84c2:	80 93 8a 0c 	sts	0x0C8A, r24
    84c6:	80 91 35 0a 	lds	r24, 0x0A35
    84ca:	80 93 8b 0c 	sts	0x0C8B, r24
	 }Dest[Length]=0;
    84ce:	10 92 8c 0c 	sts	0x0C8C, r1
    84d2:	20 e0       	ldi	r18, 0x00	; 0
    84d4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84d6:	f9 01       	movw	r30, r18
    84d8:	e6 5e       	subi	r30, 0xE6	; 230
    84da:	f6 4f       	sbci	r31, 0xF6	; 246
    84dc:	d9 01       	movw	r26, r18
    84de:	aa 5c       	subi	r26, 0xCA	; 202
    84e0:	b5 4f       	sbci	r27, 0xF5	; 245
    84e2:	8c 91       	ld	r24, X
    84e4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    84e6:	2f 5f       	subi	r18, 0xFF	; 255
    84e8:	3f 4f       	sbci	r19, 0xFF	; 255
    84ea:	28 30       	cpi	r18, 0x08	; 8
    84ec:	31 05       	cpc	r19, r1
    84ee:	99 f7       	brne	.-26     	; 0x84d6 <procMessage99+0x292>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    84f0:	10 92 22 09 	sts	0x0922, r1
    84f4:	20 e0       	ldi	r18, 0x00	; 0
    84f6:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84f8:	f9 01       	movw	r30, r18
    84fa:	ef 53       	subi	r30, 0x3F	; 63
    84fc:	fd 4f       	sbci	r31, 0xFD	; 253
    84fe:	d9 01       	movw	r26, r18
    8500:	a2 5c       	subi	r26, 0xC2	; 194
    8502:	b5 4f       	sbci	r27, 0xF5	; 245
    8504:	8c 91       	ld	r24, X
    8506:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8508:	2f 5f       	subi	r18, 0xFF	; 255
    850a:	3f 4f       	sbci	r19, 0xFF	; 255
    850c:	28 30       	cpi	r18, 0x08	; 8
    850e:	31 05       	cpc	r19, r1
    8510:	99 f7       	brne	.-26     	; 0x84f8 <procMessage99+0x2b4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8512:	10 92 c9 02 	sts	0x02C9, r1
    8516:	20 e0       	ldi	r18, 0x00	; 0
    8518:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    851a:	f9 01       	movw	r30, r18
    851c:	e3 51       	subi	r30, 0x13	; 19
    851e:	fd 4f       	sbci	r31, 0xFD	; 253
    8520:	d9 01       	movw	r26, r18
    8522:	aa 5b       	subi	r26, 0xBA	; 186
    8524:	b5 4f       	sbci	r27, 0xF5	; 245
    8526:	8c 91       	ld	r24, X
    8528:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    852a:	2f 5f       	subi	r18, 0xFF	; 255
    852c:	3f 4f       	sbci	r19, 0xFF	; 255
    852e:	24 31       	cpi	r18, 0x14	; 20
    8530:	31 05       	cpc	r19, r1
    8532:	99 f7       	brne	.-26     	; 0x851a <procMessage99+0x2d6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8534:	10 92 01 03 	sts	0x0301, r1
    8538:	20 e0       	ldi	r18, 0x00	; 0
    853a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    853c:	f9 01       	movw	r30, r18
    853e:	e6 53       	subi	r30, 0x36	; 54
    8540:	fd 4f       	sbci	r31, 0xFD	; 253
    8542:	d9 01       	movw	r26, r18
    8544:	a6 5a       	subi	r26, 0xA6	; 166
    8546:	b5 4f       	sbci	r27, 0xF5	; 245
    8548:	8c 91       	ld	r24, X
    854a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    854c:	2f 5f       	subi	r18, 0xFF	; 255
    854e:	3f 4f       	sbci	r19, 0xFF	; 255
    8550:	2e 31       	cpi	r18, 0x1E	; 30
    8552:	31 05       	cpc	r19, r1
    8554:	99 f7       	brne	.-26     	; 0x853c <procMessage99+0x2f8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8556:	10 92 e8 02 	sts	0x02E8, r1
    855a:	20 e0       	ldi	r18, 0x00	; 0
    855c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    855e:	f9 01       	movw	r30, r18
    8560:	e5 5c       	subi	r30, 0xC5	; 197
    8562:	f7 4f       	sbci	r31, 0xF7	; 247
    8564:	d9 01       	movw	r26, r18
    8566:	a8 58       	subi	r26, 0x88	; 136
    8568:	b5 4f       	sbci	r27, 0xF5	; 245
    856a:	8c 91       	ld	r24, X
    856c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    856e:	2f 5f       	subi	r18, 0xFF	; 255
    8570:	3f 4f       	sbci	r19, 0xFF	; 255
    8572:	28 30       	cpi	r18, 0x08	; 8
    8574:	31 05       	cpc	r19, r1
    8576:	99 f7       	brne	.-26     	; 0x855e <procMessage99+0x31a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8578:	10 92 43 08 	sts	0x0843, r1
    857c:	20 e0       	ldi	r18, 0x00	; 0
    857e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8580:	f9 01       	movw	r30, r18
    8582:	ec 57       	subi	r30, 0x7C	; 124
    8584:	fc 4f       	sbci	r31, 0xFC	; 252
    8586:	d9 01       	movw	r26, r18
    8588:	a0 58       	subi	r26, 0x80	; 128
    858a:	b5 4f       	sbci	r27, 0xF5	; 245
    858c:	8c 91       	ld	r24, X
    858e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8590:	2f 5f       	subi	r18, 0xFF	; 255
    8592:	3f 4f       	sbci	r19, 0xFF	; 255
    8594:	2a 30       	cpi	r18, 0x0A	; 10
    8596:	31 05       	cpc	r19, r1
    8598:	99 f7       	brne	.-26     	; 0x8580 <procMessage99+0x33c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    859a:	10 92 8e 03 	sts	0x038E, r1
    859e:	20 e0       	ldi	r18, 0x00	; 0
    85a0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85a2:	f9 01       	movw	r30, r18
    85a4:	ed 50       	subi	r30, 0x0D	; 13
    85a6:	f4 4f       	sbci	r31, 0xF4	; 244
    85a8:	d9 01       	movw	r26, r18
    85aa:	a6 57       	subi	r26, 0x76	; 118
    85ac:	b5 4f       	sbci	r27, 0xF5	; 245
    85ae:	8c 91       	ld	r24, X
    85b0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85b2:	2f 5f       	subi	r18, 0xFF	; 255
    85b4:	3f 4f       	sbci	r19, 0xFF	; 255
    85b6:	2a 30       	cpi	r18, 0x0A	; 10
    85b8:	31 05       	cpc	r19, r1
    85ba:	99 f7       	brne	.-26     	; 0x85a2 <procMessage99+0x35e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85bc:	10 92 fd 0b 	sts	0x0BFD, r1
    85c0:	20 e0       	ldi	r18, 0x00	; 0
    85c2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85c4:	f9 01       	movw	r30, r18
    85c6:	ef 51       	subi	r30, 0x1F	; 31
    85c8:	f8 4f       	sbci	r31, 0xF8	; 248
    85ca:	d9 01       	movw	r26, r18
    85cc:	ac 56       	subi	r26, 0x6C	; 108
    85ce:	b5 4f       	sbci	r27, 0xF5	; 245
    85d0:	8c 91       	ld	r24, X
    85d2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85d4:	2f 5f       	subi	r18, 0xFF	; 255
    85d6:	3f 4f       	sbci	r19, 0xFF	; 255
    85d8:	24 31       	cpi	r18, 0x14	; 20
    85da:	31 05       	cpc	r19, r1
    85dc:	99 f7       	brne	.-26     	; 0x85c4 <procMessage99+0x380>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85de:	10 92 f5 07 	sts	0x07F5, r1
    85e2:	20 e0       	ldi	r18, 0x00	; 0
    85e4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85e6:	f9 01       	movw	r30, r18
    85e8:	e8 5a       	subi	r30, 0xA8	; 168
    85ea:	f7 4f       	sbci	r31, 0xF7	; 247
    85ec:	d9 01       	movw	r26, r18
    85ee:	a8 55       	subi	r26, 0x58	; 88
    85f0:	b5 4f       	sbci	r27, 0xF5	; 245
    85f2:	8c 91       	ld	r24, X
    85f4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85f6:	2f 5f       	subi	r18, 0xFF	; 255
    85f8:	3f 4f       	sbci	r19, 0xFF	; 255
    85fa:	2a 30       	cpi	r18, 0x0A	; 10
    85fc:	31 05       	cpc	r19, r1
    85fe:	99 f7       	brne	.-26     	; 0x85e6 <procMessage99+0x3a2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8600:	10 92 62 08 	sts	0x0862, r1
    8604:	20 e0       	ldi	r18, 0x00	; 0
    8606:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8608:	f9 01       	movw	r30, r18
    860a:	e0 56       	subi	r30, 0x60	; 96
    860c:	fc 4f       	sbci	r31, 0xFC	; 252
    860e:	d9 01       	movw	r26, r18
    8610:	ae 54       	subi	r26, 0x4E	; 78
    8612:	b5 4f       	sbci	r27, 0xF5	; 245
    8614:	8c 91       	ld	r24, X
    8616:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8618:	2f 5f       	subi	r18, 0xFF	; 255
    861a:	3f 4f       	sbci	r19, 0xFF	; 255
    861c:	28 30       	cpi	r18, 0x08	; 8
    861e:	31 05       	cpc	r19, r1
    8620:	99 f7       	brne	.-26     	; 0x8608 <procMessage99+0x3c4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8622:	10 92 a8 03 	sts	0x03A8, r1
    8626:	20 e0       	ldi	r18, 0x00	; 0
    8628:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    862a:	f9 01       	movw	r30, r18
    862c:	e1 58       	subi	r30, 0x81	; 129
    862e:	f3 4f       	sbci	r31, 0xF3	; 243
    8630:	d9 01       	movw	r26, r18
    8632:	a6 54       	subi	r26, 0x46	; 70
    8634:	b5 4f       	sbci	r27, 0xF5	; 245
    8636:	8c 91       	ld	r24, X
    8638:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    863a:	2f 5f       	subi	r18, 0xFF	; 255
    863c:	3f 4f       	sbci	r19, 0xFF	; 255
    863e:	2a 30       	cpi	r18, 0x0A	; 10
    8640:	31 05       	cpc	r19, r1
    8642:	99 f7       	brne	.-26     	; 0x862a <procMessage99+0x3e6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8644:	10 92 89 0c 	sts	0x0C89, r1
    8648:	20 e0       	ldi	r18, 0x00	; 0
    864a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    864c:	f9 01       	movw	r30, r18
    864e:	e0 5f       	subi	r30, 0xF0	; 240
    8650:	f3 4f       	sbci	r31, 0xF3	; 243
    8652:	d9 01       	movw	r26, r18
    8654:	ac 53       	subi	r26, 0x3C	; 60
    8656:	b5 4f       	sbci	r27, 0xF5	; 245
    8658:	8c 91       	ld	r24, X
    865a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    865c:	2f 5f       	subi	r18, 0xFF	; 255
    865e:	3f 4f       	sbci	r19, 0xFF	; 255
    8660:	24 31       	cpi	r18, 0x14	; 20
    8662:	31 05       	cpc	r19, r1
    8664:	99 f7       	brne	.-26     	; 0x864c <procMessage99+0x408>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8666:	10 92 24 0c 	sts	0x0C24, r1
    866a:	20 e0       	ldi	r18, 0x00	; 0
    866c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    866e:	f9 01       	movw	r30, r18
    8670:	ed 52       	subi	r30, 0x2D	; 45
    8672:	fc 4f       	sbci	r31, 0xFC	; 252
    8674:	d9 01       	movw	r26, r18
    8676:	a8 52       	subi	r26, 0x28	; 40
    8678:	b5 4f       	sbci	r27, 0xF5	; 245
    867a:	8c 91       	ld	r24, X
    867c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    867e:	2f 5f       	subi	r18, 0xFF	; 255
    8680:	3f 4f       	sbci	r19, 0xFF	; 255
    8682:	2e 31       	cpi	r18, 0x1E	; 30
    8684:	31 05       	cpc	r19, r1
    8686:	99 f7       	brne	.-26     	; 0x866e <procMessage99+0x42a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8688:	10 92 f1 03 	sts	0x03F1, r1
       StrPosCopy(rcv_trans,strCorporateName,437,30);
	   //


	   //FIP Detection LocalAccount Null Filling
	   if ((nLocalAccount>0)&&(LocalAccountFIP[0]==atoi(strFIP_ID))){
    868c:	80 91 8f 01 	lds	r24, 0x018F
    8690:	88 23       	and	r24, r24
    8692:	69 f0       	breq	.+26     	; 0x86ae <procMessage99+0x46a>
    8694:	00 91 5c 03 	lds	r16, 0x035C
    8698:	10 e0       	ldi	r17, 0x00	; 0
    869a:	8f eb       	ldi	r24, 0xBF	; 191
    869c:	97 e0       	ldi	r25, 0x07	; 7
    869e:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
    86a2:	08 17       	cp	r16, r24
    86a4:	19 07       	cpc	r17, r25
    86a6:	19 f4       	brne	.+6      	; 0x86ae <procMessage99+0x46a>
	        IsCompleteFilling=True;
    86a8:	81 e0       	ldi	r24, 0x01	; 1
    86aa:	80 93 ab 01 	sts	0x01AB, r24
	   }

	  }
     return Result;     
}
    86ae:	80 e0       	ldi	r24, 0x00	; 0
    86b0:	1f 91       	pop	r17
    86b2:	0f 91       	pop	r16
    86b4:	08 95       	ret

000086b6 <GetMessageID>:
		  }
       IsStandaloneAcknoledge=True;
	  }
}

char GetMessageID(char *strMessageFlow){
    86b6:	0f 93       	push	r16
    86b8:	1f 93       	push	r17
    86ba:	df 93       	push	r29
    86bc:	cf 93       	push	r28
    86be:	00 d0       	rcall	.+0      	; 0x86c0 <GetMessageID+0xa>
    86c0:	0f 92       	push	r0
    86c2:	cd b7       	in	r28, 0x3d	; 61
    86c4:	de b7       	in	r29, 0x3e	; 62
    86c6:	fc 01       	movw	r30, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    86c8:	80 81       	ld	r24, Z
    86ca:	89 83       	std	Y+1, r24	; 0x01
    86cc:	81 81       	ldd	r24, Z+1	; 0x01
    86ce:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    86d0:	1b 82       	std	Y+3, r1	; 0x03
}

char GetMessageID(char *strMessageFlow){
     char Result,strMsgID[3];
	 StrPosCopy(strMessageFlow,strMsgID,0,2);
	 RemZeroLead(strMsgID);
    86d2:	8e 01       	movw	r16, r28
    86d4:	0f 5f       	subi	r16, 0xFF	; 255
    86d6:	1f 4f       	sbci	r17, 0xFF	; 255
    86d8:	c8 01       	movw	r24, r16
    86da:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
	 Result=atoi(strMsgID);
    86de:	c8 01       	movw	r24, r16
    86e0:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
  return Result;
}
    86e4:	0f 90       	pop	r0
    86e6:	0f 90       	pop	r0
    86e8:	0f 90       	pop	r0
    86ea:	cf 91       	pop	r28
    86ec:	df 91       	pop	r29
    86ee:	1f 91       	pop	r17
    86f0:	0f 91       	pop	r16
    86f2:	08 95       	ret

000086f4 <GenerateStandaloneTransData>:

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
}


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
    86f4:	bf 92       	push	r11
    86f6:	cf 92       	push	r12
    86f8:	df 92       	push	r13
    86fa:	ef 92       	push	r14
    86fc:	ff 92       	push	r15
    86fe:	0f 93       	push	r16
    8700:	1f 93       	push	r17
    8702:	df 93       	push	r29
    8704:	cf 93       	push	r28
    8706:	cd b7       	in	r28, 0x3d	; 61
    8708:	de b7       	in	r29, 0x3e	; 62
    870a:	6e 97       	sbiw	r28, 0x1e	; 30
    870c:	0f b6       	in	r0, 0x3f	; 63
    870e:	f8 94       	cli
    8710:	de bf       	out	0x3e, r29	; 62
    8712:	0f be       	out	0x3f, r0	; 63
    8714:	cd bf       	out	0x3d, r28	; 61
    8716:	e8 2e       	mov	r14, r24
    8718:	8b 01       	movw	r16, r22
	 char strConfUnitPrice[10];
	 unsigned int PumpPrice,ConfigPrice;
	 char strConst[5];

	 iPumpID=(xPumpID&0x0F);
	 FIPAddr=GetFIPAddr(iPumpID);
    871a:	8f 70       	andi	r24, 0x0F	; 15
    871c:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
     if (FIPAddr>0){
    8720:	88 23       	and	r24, r24
    8722:	09 f4       	brne	.+2      	; 0x8726 <GenerateStandaloneTransData+0x32>
    8724:	9b c1       	rjmp	.+822    	; 0x8a5c <GenerateStandaloneTransData+0x368>
	     FIPAddr=FIPAddr-1;
		 iProdID=PNozzle[RecPumpData[FIPAddr].Grade];
    8726:	81 50       	subi	r24, 0x01	; 1
    8728:	c8 2e       	mov	r12, r24
    872a:	dd 24       	eor	r13, r13
    872c:	85 e3       	ldi	r24, 0x35	; 53
    872e:	90 e0       	ldi	r25, 0x00	; 0
    8730:	c8 9e       	mul	r12, r24
    8732:	f0 01       	movw	r30, r0
    8734:	c9 9e       	mul	r12, r25
    8736:	f0 0d       	add	r31, r0
    8738:	d8 9e       	mul	r13, r24
    873a:	f0 0d       	add	r31, r0
    873c:	11 24       	eor	r1, r1
    873e:	e2 55       	subi	r30, 0x52	; 82
    8740:	fa 4f       	sbci	r31, 0xFA	; 250
    8742:	80 81       	ld	r24, Z
    8744:	08 0f       	add	r16, r24
    8746:	11 1d       	adc	r17, r1
    8748:	d8 01       	movw	r26, r16
    874a:	bc 90       	ld	r11, X
    874c:	ce 01       	movw	r24, r28
    874e:	40 96       	adiw	r24, 0x10	; 16

		 if (iProdID>0) eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[iProdID-1],sizeof(DefProductName[iProdID-1]));
    8750:	bb 20       	and	r11, r11
    8752:	59 f0       	breq	.+22     	; 0x876a <GenerateStandaloneTransData+0x76>
    8754:	6d e0       	ldi	r22, 0x0D	; 13
    8756:	b6 9e       	mul	r11, r22
    8758:	b0 01       	movw	r22, r0
    875a:	11 24       	eor	r1, r1
    875c:	6d 54       	subi	r22, 0x4D	; 77
    875e:	7f 4f       	sbci	r23, 0xFF	; 255
    8760:	4d e0       	ldi	r20, 0x0D	; 13
    8762:	50 e0       	ldi	r21, 0x00	; 0
    8764:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    8768:	10 c0       	rjmp	.+32     	; 0x878a <GenerateStandaloneTransData+0x96>
		 else sprintf_P(ProductName,PSTR("N/A"));
    876a:	00 d0       	rcall	.+0      	; 0x876c <GenerateStandaloneTransData+0x78>
    876c:	00 d0       	rcall	.+0      	; 0x876e <GenerateStandaloneTransData+0x7a>
    876e:	ed b7       	in	r30, 0x3d	; 61
    8770:	fe b7       	in	r31, 0x3e	; 62
    8772:	92 83       	std	Z+2, r25	; 0x02
    8774:	81 83       	std	Z+1, r24	; 0x01
    8776:	82 e4       	ldi	r24, 0x42	; 66
    8778:	94 e2       	ldi	r25, 0x24	; 36
    877a:	94 83       	std	Z+4, r25	; 0x04
    877c:	83 83       	std	Z+3, r24	; 0x03
    877e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    8782:	0f 90       	pop	r0
    8784:	0f 90       	pop	r0
    8786:	0f 90       	pop	r0
    8788:	0f 90       	pop	r0

		 TermID=eeprom_read_byte(&DefIFT_ID);
    878a:	80 e0       	ldi	r24, 0x00	; 0
    878c:	90 e0       	ldi	r25, 0x00	; 0
    878e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    8792:	f8 2e       	mov	r15, r24

		 //Shift,TransNum,Date,Time
		 sprintf_P(strShift,PSTR("%d"),RecPumpData[FIPAddr].Shift);
    8794:	00 d0       	rcall	.+0      	; 0x8796 <GenerateStandaloneTransData+0xa2>
    8796:	00 d0       	rcall	.+0      	; 0x8798 <GenerateStandaloneTransData+0xa4>
    8798:	00 d0       	rcall	.+0      	; 0x879a <GenerateStandaloneTransData+0xa6>
    879a:	ad b7       	in	r26, 0x3d	; 61
    879c:	be b7       	in	r27, 0x3e	; 62
    879e:	11 96       	adiw	r26, 0x01	; 1
    87a0:	8e e6       	ldi	r24, 0x6E	; 110
    87a2:	9c e0       	ldi	r25, 0x0C	; 12
    87a4:	ed b7       	in	r30, 0x3d	; 61
    87a6:	fe b7       	in	r31, 0x3e	; 62
    87a8:	92 83       	std	Z+2, r25	; 0x02
    87aa:	81 83       	std	Z+1, r24	; 0x01
    87ac:	8f e3       	ldi	r24, 0x3F	; 63
    87ae:	94 e2       	ldi	r25, 0x24	; 36
    87b0:	13 96       	adiw	r26, 0x03	; 3
    87b2:	9c 93       	st	X, r25
    87b4:	8e 93       	st	-X, r24
    87b6:	12 97       	sbiw	r26, 0x02	; 2
    87b8:	85 e3       	ldi	r24, 0x35	; 53
    87ba:	90 e0       	ldi	r25, 0x00	; 0
    87bc:	c8 9e       	mul	r12, r24
    87be:	80 01       	movw	r16, r0
    87c0:	c9 9e       	mul	r12, r25
    87c2:	10 0d       	add	r17, r0
    87c4:	d8 9e       	mul	r13, r24
    87c6:	10 0d       	add	r17, r0
    87c8:	11 24       	eor	r1, r1
    87ca:	f8 01       	movw	r30, r16
    87cc:	e2 55       	subi	r30, 0x52	; 82
    87ce:	fa 4f       	sbci	r31, 0xFA	; 250
    87d0:	82 81       	ldd	r24, Z+2	; 0x02
    87d2:	14 96       	adiw	r26, 0x04	; 4
    87d4:	8c 93       	st	X, r24
    87d6:	14 97       	sbiw	r26, 0x04	; 4
    87d8:	15 96       	adiw	r26, 0x05	; 5
    87da:	1c 92       	st	X, r1
    87dc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 sprintf_P(strTranNo,PSTR("%s"),RecPumpData[FIPAddr].strTransNum);
    87e0:	ed b7       	in	r30, 0x3d	; 61
    87e2:	fe b7       	in	r31, 0x3e	; 62
    87e4:	31 96       	adiw	r30, 0x01	; 1
    87e6:	8d e8       	ldi	r24, 0x8D	; 141
    87e8:	9c e0       	ldi	r25, 0x0C	; 12
    87ea:	ad b7       	in	r26, 0x3d	; 61
    87ec:	be b7       	in	r27, 0x3e	; 62
    87ee:	12 96       	adiw	r26, 0x02	; 2
    87f0:	9c 93       	st	X, r25
    87f2:	8e 93       	st	-X, r24
    87f4:	11 97       	sbiw	r26, 0x01	; 1
    87f6:	8c e3       	ldi	r24, 0x3C	; 60
    87f8:	94 e2       	ldi	r25, 0x24	; 36
    87fa:	93 83       	std	Z+3, r25	; 0x03
    87fc:	82 83       	std	Z+2, r24	; 0x02
    87fe:	c8 01       	movw	r24, r16
    8800:	8f 54       	subi	r24, 0x4F	; 79
    8802:	9a 4f       	sbci	r25, 0xFA	; 250
    8804:	95 83       	std	Z+5, r25	; 0x05
    8806:	84 83       	std	Z+4, r24	; 0x04
    8808:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	     sprintf_P(strDate,PSTR("%s"),RecPumpData[FIPAddr].strTransDate);
    880c:	ed b7       	in	r30, 0x3d	; 61
    880e:	fe b7       	in	r31, 0x3e	; 62
    8810:	31 96       	adiw	r30, 0x01	; 1
    8812:	84 e7       	ldi	r24, 0x74	; 116
    8814:	97 e0       	ldi	r25, 0x07	; 7
    8816:	ad b7       	in	r26, 0x3d	; 61
    8818:	be b7       	in	r27, 0x3e	; 62
    881a:	12 96       	adiw	r26, 0x02	; 2
    881c:	9c 93       	st	X, r25
    881e:	8e 93       	st	-X, r24
    8820:	11 97       	sbiw	r26, 0x01	; 1
    8822:	89 e3       	ldi	r24, 0x39	; 57
    8824:	94 e2       	ldi	r25, 0x24	; 36
    8826:	93 83       	std	Z+3, r25	; 0x03
    8828:	82 83       	std	Z+2, r24	; 0x02
    882a:	c8 01       	movw	r24, r16
    882c:	88 54       	subi	r24, 0x48	; 72
    882e:	9a 4f       	sbci	r25, 0xFA	; 250
    8830:	95 83       	std	Z+5, r25	; 0x05
    8832:	84 83       	std	Z+4, r24	; 0x04
    8834:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 sprintf_P(strTime,PSTR("%s"),RecPumpData[FIPAddr].strTransTime);	 
    8838:	ed b7       	in	r30, 0x3d	; 61
    883a:	fe b7       	in	r31, 0x3e	; 62
    883c:	31 96       	adiw	r30, 0x01	; 1
    883e:	83 e5       	ldi	r24, 0x53	; 83
    8840:	93 e0       	ldi	r25, 0x03	; 3
    8842:	ad b7       	in	r26, 0x3d	; 61
    8844:	be b7       	in	r27, 0x3e	; 62
    8846:	12 96       	adiw	r26, 0x02	; 2
    8848:	9c 93       	st	X, r25
    884a:	8e 93       	st	-X, r24
    884c:	11 97       	sbiw	r26, 0x01	; 1
    884e:	86 e3       	ldi	r24, 0x36	; 54
    8850:	94 e2       	ldi	r25, 0x24	; 36
    8852:	93 83       	std	Z+3, r25	; 0x03
    8854:	82 83       	std	Z+2, r24	; 0x02
    8856:	c8 01       	movw	r24, r16
    8858:	8f 53       	subi	r24, 0x3F	; 63
    885a:	9a 4f       	sbci	r25, 0xFA	; 250
    885c:	95 83       	std	Z+5, r25	; 0x05
    885e:	84 83       	std	Z+4, r24	; 0x04
    8860:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

	     //TermID,FIP_ID,Product
		 sprintf_P(strIslandID,PSTR("%d"),TermID);
    8864:	ed b7       	in	r30, 0x3d	; 61
    8866:	fe b7       	in	r31, 0x3e	; 62
    8868:	31 96       	adiw	r30, 0x01	; 1
    886a:	8d ef       	ldi	r24, 0xFD	; 253
    886c:	98 e0       	ldi	r25, 0x08	; 8
    886e:	ad b7       	in	r26, 0x3d	; 61
    8870:	be b7       	in	r27, 0x3e	; 62
    8872:	12 96       	adiw	r26, 0x02	; 2
    8874:	9c 93       	st	X, r25
    8876:	8e 93       	st	-X, r24
    8878:	11 97       	sbiw	r26, 0x01	; 1
    887a:	83 e3       	ldi	r24, 0x33	; 51
    887c:	94 e2       	ldi	r25, 0x24	; 36
    887e:	93 83       	std	Z+3, r25	; 0x03
    8880:	82 83       	std	Z+2, r24	; 0x02
    8882:	f4 82       	std	Z+4, r15	; 0x04
    8884:	15 82       	std	Z+5, r1	; 0x05
    8886:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 sprintf_P(strFIP_ID,PSTR("%.2d"),xPumpID);
    888a:	ed b7       	in	r30, 0x3d	; 61
    888c:	fe b7       	in	r31, 0x3e	; 62
    888e:	31 96       	adiw	r30, 0x01	; 1
    8890:	8f eb       	ldi	r24, 0xBF	; 191
    8892:	97 e0       	ldi	r25, 0x07	; 7
    8894:	ad b7       	in	r26, 0x3d	; 61
    8896:	be b7       	in	r27, 0x3e	; 62
    8898:	12 96       	adiw	r26, 0x02	; 2
    889a:	9c 93       	st	X, r25
    889c:	8e 93       	st	-X, r24
    889e:	11 97       	sbiw	r26, 0x01	; 1
    88a0:	8e e2       	ldi	r24, 0x2E	; 46
    88a2:	94 e2       	ldi	r25, 0x24	; 36
    88a4:	93 83       	std	Z+3, r25	; 0x03
    88a6:	82 83       	std	Z+2, r24	; 0x02
    88a8:	e4 82       	std	Z+4, r14	; 0x04
    88aa:	15 82       	std	Z+5, r1	; 0x05
    88ac:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	     sprintf_P(strDescription,PSTR("%s"),ProductName);
    88b0:	ed b7       	in	r30, 0x3d	; 61
    88b2:	fe b7       	in	r31, 0x3e	; 62
    88b4:	31 96       	adiw	r30, 0x01	; 1
    88b6:	82 e1       	ldi	r24, 0x12	; 18
    88b8:	98 e0       	ldi	r25, 0x08	; 8
    88ba:	ad b7       	in	r26, 0x3d	; 61
    88bc:	be b7       	in	r27, 0x3e	; 62
    88be:	12 96       	adiw	r26, 0x02	; 2
    88c0:	9c 93       	st	X, r25
    88c2:	8e 93       	st	-X, r24
    88c4:	11 97       	sbiw	r26, 0x01	; 1
    88c6:	8b e2       	ldi	r24, 0x2B	; 43
    88c8:	94 e2       	ldi	r25, 0x24	; 36
    88ca:	93 83       	std	Z+3, r25	; 0x03
    88cc:	82 83       	std	Z+2, r24	; 0x02
    88ce:	ce 01       	movw	r24, r28
    88d0:	40 96       	adiw	r24, 0x10	; 16
    88d2:	95 83       	std	Z+5, r25	; 0x05
    88d4:	84 83       	std	Z+4, r24	; 0x04
    88d6:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

		 //Price Volume Money
		 sprintf_P(strPrice,PSTR("%s"),RecPumpData[FIPAddr].Price);
    88da:	ed b7       	in	r30, 0x3d	; 61
    88dc:	fe b7       	in	r31, 0x3e	; 62
    88de:	31 96       	adiw	r30, 0x01	; 1
    88e0:	74 ea       	ldi	r23, 0xA4	; 164
    88e2:	e7 2e       	mov	r14, r23
    88e4:	75 e0       	ldi	r23, 0x05	; 5
    88e6:	f7 2e       	mov	r15, r23
    88e8:	ad b7       	in	r26, 0x3d	; 61
    88ea:	be b7       	in	r27, 0x3e	; 62
    88ec:	12 96       	adiw	r26, 0x02	; 2
    88ee:	fc 92       	st	X, r15
    88f0:	ee 92       	st	-X, r14
    88f2:	11 97       	sbiw	r26, 0x01	; 1
    88f4:	88 e2       	ldi	r24, 0x28	; 40
    88f6:	94 e2       	ldi	r25, 0x24	; 36
    88f8:	93 83       	std	Z+3, r25	; 0x03
    88fa:	82 83       	std	Z+2, r24	; 0x02
    88fc:	c8 01       	movw	r24, r16
    88fe:	86 53       	subi	r24, 0x36	; 54
    8900:	9a 4f       	sbci	r25, 0xFA	; 250
    8902:	95 83       	std	Z+5, r25	; 0x05
    8904:	84 83       	std	Z+4, r24	; 0x04
    8906:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	     sprintf_P(strVolume,PSTR("%s"),RecPumpData[FIPAddr].Volume);
    890a:	ed b7       	in	r30, 0x3d	; 61
    890c:	fe b7       	in	r31, 0x3e	; 62
    890e:	31 96       	adiw	r30, 0x01	; 1
    8910:	8b e7       	ldi	r24, 0x7B	; 123
    8912:	93 e0       	ldi	r25, 0x03	; 3
    8914:	ad b7       	in	r26, 0x3d	; 61
    8916:	be b7       	in	r27, 0x3e	; 62
    8918:	12 96       	adiw	r26, 0x02	; 2
    891a:	9c 93       	st	X, r25
    891c:	8e 93       	st	-X, r24
    891e:	11 97       	sbiw	r26, 0x01	; 1
    8920:	85 e2       	ldi	r24, 0x25	; 37
    8922:	94 e2       	ldi	r25, 0x24	; 36
    8924:	93 83       	std	Z+3, r25	; 0x03
    8926:	82 83       	std	Z+2, r24	; 0x02
    8928:	c8 01       	movw	r24, r16
    892a:	8f 52       	subi	r24, 0x2F	; 47
    892c:	9a 4f       	sbci	r25, 0xFA	; 250
    892e:	95 83       	std	Z+5, r25	; 0x05
    8930:	84 83       	std	Z+4, r24	; 0x04
    8932:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 sprintf_P(strAmount,PSTR("%s"),RecPumpData[FIPAddr].Money);
    8936:	ed b7       	in	r30, 0x3d	; 61
    8938:	fe b7       	in	r31, 0x3e	; 62
    893a:	31 96       	adiw	r30, 0x01	; 1
    893c:	89 eb       	ldi	r24, 0xB9	; 185
    893e:	9b e0       	ldi	r25, 0x0B	; 11
    8940:	ad b7       	in	r26, 0x3d	; 61
    8942:	be b7       	in	r27, 0x3e	; 62
    8944:	12 96       	adiw	r26, 0x02	; 2
    8946:	9c 93       	st	X, r25
    8948:	8e 93       	st	-X, r24
    894a:	11 97       	sbiw	r26, 0x01	; 1
    894c:	82 e2       	ldi	r24, 0x22	; 34
    894e:	94 e2       	ldi	r25, 0x24	; 36
    8950:	93 83       	std	Z+3, r25	; 0x03
    8952:	82 83       	std	Z+2, r24	; 0x02
    8954:	06 52       	subi	r16, 0x26	; 38
    8956:	1a 4f       	sbci	r17, 0xFA	; 250
    8958:	15 83       	std	Z+5, r17	; 0x05
    895a:	04 83       	std	Z+4, r16	; 0x04
    895c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

		 
		 //Genius4.23 ->Enhanced Multiplication for 6 Digit Pump
		 //Read Price Configuration
		 if (iProdID>0) eeprom_read_block((void*) &strConfUnitPrice, (const void*) &DefProductPrice[iProdID-1],sizeof(DefProductPrice[iProdID-1]));
    8960:	ed b7       	in	r30, 0x3d	; 61
    8962:	fe b7       	in	r31, 0x3e	; 62
    8964:	36 96       	adiw	r30, 0x06	; 6
    8966:	0f b6       	in	r0, 0x3f	; 63
    8968:	f8 94       	cli
    896a:	fe bf       	out	0x3e, r31	; 62
    896c:	0f be       	out	0x3f, r0	; 63
    896e:	ed bf       	out	0x3d, r30	; 61
    8970:	ce 01       	movw	r24, r28
    8972:	06 96       	adiw	r24, 0x06	; 6
    8974:	bb 20       	and	r11, r11
    8976:	59 f0       	breq	.+22     	; 0x898e <GenerateStandaloneTransData+0x29a>
    8978:	69 e0       	ldi	r22, 0x09	; 9
    897a:	b6 9e       	mul	r11, r22
    897c:	b0 01       	movw	r22, r0
    897e:	11 24       	eor	r1, r1
    8980:	6f 57       	subi	r22, 0x7F	; 127
    8982:	7f 4f       	sbci	r23, 0xFF	; 255
    8984:	49 e0       	ldi	r20, 0x09	; 9
    8986:	50 e0       	ldi	r21, 0x00	; 0
    8988:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    898c:	1c c0       	rjmp	.+56     	; 0x89c6 <GenerateStandaloneTransData+0x2d2>
		 else sprintf_P(strConfUnitPrice,PSTR("%s"),strPrice);
    898e:	00 d0       	rcall	.+0      	; 0x8990 <GenerateStandaloneTransData+0x29c>
    8990:	00 d0       	rcall	.+0      	; 0x8992 <GenerateStandaloneTransData+0x29e>
    8992:	00 d0       	rcall	.+0      	; 0x8994 <GenerateStandaloneTransData+0x2a0>
    8994:	ed b7       	in	r30, 0x3d	; 61
    8996:	fe b7       	in	r31, 0x3e	; 62
    8998:	31 96       	adiw	r30, 0x01	; 1
    899a:	ad b7       	in	r26, 0x3d	; 61
    899c:	be b7       	in	r27, 0x3e	; 62
    899e:	12 96       	adiw	r26, 0x02	; 2
    89a0:	9c 93       	st	X, r25
    89a2:	8e 93       	st	-X, r24
    89a4:	11 97       	sbiw	r26, 0x01	; 1
    89a6:	8f e1       	ldi	r24, 0x1F	; 31
    89a8:	94 e2       	ldi	r25, 0x24	; 36
    89aa:	93 83       	std	Z+3, r25	; 0x03
    89ac:	82 83       	std	Z+2, r24	; 0x02
    89ae:	f5 82       	std	Z+5, r15	; 0x05
    89b0:	e4 82       	std	Z+4, r14	; 0x04
    89b2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    89b6:	ed b7       	in	r30, 0x3d	; 61
    89b8:	fe b7       	in	r31, 0x3e	; 62
    89ba:	36 96       	adiw	r30, 0x06	; 6
    89bc:	0f b6       	in	r0, 0x3f	; 63
    89be:	f8 94       	cli
    89c0:	fe bf       	out	0x3e, r31	; 62
    89c2:	0f be       	out	0x3f, r0	; 63
    89c4:	ed bf       	out	0x3d, r30	; 61

		 PumpPrice=atoi(strPrice);
    89c6:	84 ea       	ldi	r24, 0xA4	; 164
    89c8:	95 e0       	ldi	r25, 0x05	; 5
    89ca:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
    89ce:	7c 01       	movw	r14, r24
		 ConfigPrice=atoi(strConfUnitPrice);
    89d0:	8e 01       	movw	r16, r28
    89d2:	0a 5f       	subi	r16, 0xFA	; 250
    89d4:	1f 4f       	sbci	r17, 0xFF	; 255
    89d6:	c8 01       	movw	r24, r16
    89d8:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>

		 if ((strlen(strConfUnitPrice)>=5)&&(ConfigPrice>PumpPrice)){//if Price Configured > Pump Price
    89dc:	f8 01       	movw	r30, r16
    89de:	01 90       	ld	r0, Z+
    89e0:	00 20       	and	r0, r0
    89e2:	e9 f7       	brne	.-6      	; 0x89de <GenerateStandaloneTransData+0x2ea>
    89e4:	31 97       	sbiw	r30, 0x01	; 1
    89e6:	e0 1b       	sub	r30, r16
    89e8:	f1 0b       	sbc	r31, r17
    89ea:	35 97       	sbiw	r30, 0x05	; 5
    89ec:	30 f1       	brcs	.+76     	; 0x8a3a <GenerateStandaloneTransData+0x346>
    89ee:	e8 16       	cp	r14, r24
    89f0:	f9 06       	cpc	r15, r25
    89f2:	18 f5       	brcc	.+70     	; 0x8a3a <GenerateStandaloneTransData+0x346>
		     sprintf_P(strConst,PSTR("10"));
    89f4:	00 d0       	rcall	.+0      	; 0x89f6 <GenerateStandaloneTransData+0x302>
    89f6:	00 d0       	rcall	.+0      	; 0x89f8 <GenerateStandaloneTransData+0x304>
    89f8:	8e 01       	movw	r16, r28
    89fa:	0f 5f       	subi	r16, 0xFF	; 255
    89fc:	1f 4f       	sbci	r17, 0xFF	; 255
    89fe:	ad b7       	in	r26, 0x3d	; 61
    8a00:	be b7       	in	r27, 0x3e	; 62
    8a02:	12 96       	adiw	r26, 0x02	; 2
    8a04:	1c 93       	st	X, r17
    8a06:	0e 93       	st	-X, r16
    8a08:	11 97       	sbiw	r26, 0x01	; 1
    8a0a:	8c e1       	ldi	r24, 0x1C	; 28
    8a0c:	94 e2       	ldi	r25, 0x24	; 36
    8a0e:	14 96       	adiw	r26, 0x04	; 4
    8a10:	9c 93       	st	X, r25
    8a12:	8e 93       	st	-X, r24
    8a14:	13 97       	sbiw	r26, 0x03	; 3
    8a16:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		     CalcMultiply(strPrice,strConst,strPrice);
    8a1a:	0f 90       	pop	r0
    8a1c:	0f 90       	pop	r0
    8a1e:	0f 90       	pop	r0
    8a20:	0f 90       	pop	r0
    8a22:	84 ea       	ldi	r24, 0xA4	; 164
    8a24:	95 e0       	ldi	r25, 0x05	; 5
    8a26:	b8 01       	movw	r22, r16
    8a28:	ac 01       	movw	r20, r24
    8a2a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <CalcMultiply>
			 CalcMultiply(strAmount,strConst,strAmount);
    8a2e:	89 eb       	ldi	r24, 0xB9	; 185
    8a30:	9b e0       	ldi	r25, 0x0B	; 11
    8a32:	b8 01       	movw	r22, r16
    8a34:	ac 01       	movw	r20, r24
    8a36:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <CalcMultiply>
		 }       

		 //Formating Decimal Genius 4.32 Previus In StoreStandaloneTransData

		 FormatPrice(strPrice);
    8a3a:	84 ea       	ldi	r24, 0xA4	; 164
    8a3c:	95 e0       	ldi	r25, 0x05	; 5
    8a3e:	0e 94 82 34 	call	0x6904	; 0x6904 <FormatPrice>
		 FormatVolume(strVolume);
    8a42:	8b e7       	ldi	r24, 0x7B	; 123
    8a44:	93 e0       	ldi	r25, 0x03	; 3
    8a46:	0e 94 66 34 	call	0x68cc	; 0x68cc <FormatVolume>
		 FormatMoney(strAmount);		 
    8a4a:	89 eb       	ldi	r24, 0xB9	; 185
    8a4c:	9b e0       	ldi	r25, 0x0B	; 11
    8a4e:	0e 94 74 34 	call	0x68e8	; 0x68e8 <FormatMoney>

		 MOPType=MOP_CASH;
    8a52:	10 92 ba 01 	sts	0x01BA, r1
	     IsPrinting=True;	 
    8a56:	81 e0       	ldi	r24, 0x01	; 1
    8a58:	80 93 ae 01 	sts	0x01AE, r24
	 }
	 //ProductName	 
	 //iProdID=PNozzle[RecPumpData[iPumpID].Nozzle];
	 //BAsedOnGrade
   return Result;
}
    8a5c:	6e 96       	adiw	r28, 0x1e	; 30
    8a5e:	0f b6       	in	r0, 0x3f	; 63
    8a60:	f8 94       	cli
    8a62:	de bf       	out	0x3e, r29	; 62
    8a64:	0f be       	out	0x3f, r0	; 63
    8a66:	cd bf       	out	0x3d, r28	; 61
    8a68:	cf 91       	pop	r28
    8a6a:	df 91       	pop	r29
    8a6c:	1f 91       	pop	r17
    8a6e:	0f 91       	pop	r16
    8a70:	ff 90       	pop	r15
    8a72:	ef 90       	pop	r14
    8a74:	df 90       	pop	r13
    8a76:	cf 90       	pop	r12
    8a78:	bf 90       	pop	r11
    8a7a:	08 95       	ret

00008a7c <PrintStandalone>:
         RecPumpData[FIP].zstrTransNum[i]=RecPumpData[FIP].strTransNum[i];
	 }RecPumpData[FIP].zstrTransNum[Length]=0;
*/
}

char PrintStandalone(char FIPAddr,char IsReprint){
    8a7c:	ef 92       	push	r14
    8a7e:	ff 92       	push	r15
    8a80:	0f 93       	push	r16
    8a82:	1f 93       	push	r17
    8a84:	df 93       	push	r29
    8a86:	cf 93       	push	r28
    8a88:	00 d0       	rcall	.+0      	; 0x8a8a <PrintStandalone+0xe>
    8a8a:	00 d0       	rcall	.+0      	; 0x8a8c <PrintStandalone+0x10>
    8a8c:	00 d0       	rcall	.+0      	; 0x8a8e <PrintStandalone+0x12>
    8a8e:	cd b7       	in	r28, 0x3d	; 61
    8a90:	de b7       	in	r29, 0x3e	; 62
    8a92:	f8 2e       	mov	r15, r24
    8a94:	06 2f       	mov	r16, r22
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;

//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
    8a96:	0e 94 9a 20 	call	0x4134	; 0x4134 <GetPumpID>
    8a9a:	e8 2e       	mov	r14, r24
     LFIPAddr=GetFIPAddr(iPumpID);
    8a9c:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
    8aa0:	18 2f       	mov	r17, r24

     if (LFIPAddr>0){
    8aa2:	88 23       	and	r24, r24
    8aa4:	89 f1       	breq	.+98     	; 0x8b08 <PrintStandalone+0x8c>
	     LFIPAddr=LFIPAddr-1;
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
    8aa6:	01 30       	cpi	r16, 0x01	; 1
    8aa8:	69 f0       	breq	.+26     	; 0x8ac4 <PrintStandalone+0x48>
    8aaa:	ee 20       	and	r14, r14
    8aac:	69 f1       	breq	.+90     	; 0x8b08 <PrintStandalone+0x8c>
    8aae:	80 e1       	ldi	r24, 0x10	; 16
    8ab0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    8ab4:	11 50       	subi	r17, 0x01	; 1
    8ab6:	e1 2f       	mov	r30, r17
    8ab8:	f0 e0       	ldi	r31, 0x00	; 0
    8aba:	ee 5f       	subi	r30, 0xFE	; 254
    8abc:	fe 4f       	sbci	r31, 0xFE	; 254
    8abe:	90 81       	ld	r25, Z
    8ac0:	98 17       	cp	r25, r24
    8ac2:	11 f5       	brne	.+68     	; 0x8b08 <PrintStandalone+0x8c>
		     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);		 
    8ac4:	66 e0       	ldi	r22, 0x06	; 6
    8ac6:	f6 9e       	mul	r15, r22
    8ac8:	b0 01       	movw	r22, r0
    8aca:	11 24       	eor	r1, r1
    8acc:	6c 5a       	subi	r22, 0xAC	; 172
    8ace:	7f 4f       	sbci	r23, 0xFF	; 255
    8ad0:	ce 01       	movw	r24, r28
    8ad2:	01 96       	adiw	r24, 0x01	; 1
    8ad4:	46 e0       	ldi	r20, 0x06	; 6
    8ad6:	50 e0       	ldi	r21, 0x00	; 0
    8ad8:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		     if (((ReprintReady[FIPAddr-1]==True))||(IsReprint==False)){
    8adc:	ef 2d       	mov	r30, r15
    8ade:	f0 e0       	ldi	r31, 0x00	; 0
    8ae0:	ee 5e       	subi	r30, 0xEE	; 238
    8ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    8ae4:	80 81       	ld	r24, Z
    8ae6:	81 30       	cpi	r24, 0x01	; 1
    8ae8:	19 f0       	breq	.+6      	; 0x8af0 <PrintStandalone+0x74>
    8aea:	00 23       	and	r16, r16
    8aec:	29 f0       	breq	.+10     	; 0x8af8 <PrintStandalone+0x7c>
    8aee:	0c c0       	rjmp	.+24     	; 0x8b08 <PrintStandalone+0x8c>
			       if (IsReprint==True)IsReprintTicket=True;
    8af0:	01 30       	cpi	r16, 0x01	; 1
    8af2:	11 f4       	brne	.+4      	; 0x8af8 <PrintStandalone+0x7c>
    8af4:	00 93 7f 01 	sts	0x017F, r16
			       GenerateStandaloneTransData(iPumpID,PProductID);		 			   
    8af8:	8e 2d       	mov	r24, r14
    8afa:	be 01       	movw	r22, r28
    8afc:	6f 5f       	subi	r22, 0xFF	; 255
    8afe:	7f 4f       	sbci	r23, 0xFF	; 255
    8b00:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <GenerateStandaloneTransData>
    8b04:	81 e1       	ldi	r24, 0x11	; 17
    8b06:	01 c0       	rjmp	.+2      	; 0x8b0a <PrintStandalone+0x8e>
    8b08:	82 e1       	ldi	r24, 0x12	; 18
			 }//else Result=PS_NO_DATA;
		 }
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}
    8b0a:	26 96       	adiw	r28, 0x06	; 6
    8b0c:	0f b6       	in	r0, 0x3f	; 63
    8b0e:	f8 94       	cli
    8b10:	de bf       	out	0x3e, r29	; 62
    8b12:	0f be       	out	0x3f, r0	; 63
    8b14:	cd bf       	out	0x3d, r28	; 61
    8b16:	cf 91       	pop	r28
    8b18:	df 91       	pop	r29
    8b1a:	1f 91       	pop	r17
    8b1c:	0f 91       	pop	r16
    8b1e:	ff 90       	pop	r15
    8b20:	ef 90       	pop	r14
    8b22:	08 95       	ret

00008b24 <SendPrint>:
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}

void SendPrint(char xSend,char xSendLead){
    8b24:	1f 93       	push	r17
    8b26:	18 2f       	mov	r17, r24
static char zSend;     
	 if (xSend==0x19){
    8b28:	89 31       	cpi	r24, 0x19	; 25
    8b2a:	59 f4       	brne	.+22     	; 0x8b42 <SendPrint+0x1e>
	     if (zSend==xSendLead)uart(_COM_PRINTER,1,xSendLead);
    8b2c:	40 91 f8 01 	lds	r20, 0x01F8
    8b30:	46 17       	cp	r20, r22
    8b32:	19 f4       	brne	.+6      	; 0x8b3a <SendPrint+0x16>
    8b34:	80 e0       	ldi	r24, 0x00	; 0
    8b36:	61 e0       	ldi	r22, 0x01	; 1
    8b38:	07 c0       	rjmp	.+14     	; 0x8b48 <SendPrint+0x24>
		 else uart(_COM_PRINTER,1,' ');	 
    8b3a:	80 e0       	ldi	r24, 0x00	; 0
    8b3c:	61 e0       	ldi	r22, 0x01	; 1
    8b3e:	40 e2       	ldi	r20, 0x20	; 32
    8b40:	03 c0       	rjmp	.+6      	; 0x8b48 <SendPrint+0x24>
	 } 
	 else uart(_COM_PRINTER,1,xSend);
    8b42:	80 e0       	ldi	r24, 0x00	; 0
    8b44:	61 e0       	ldi	r22, 0x01	; 1
    8b46:	41 2f       	mov	r20, r17
    8b48:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
	 zSend=xSend;
    8b4c:	10 93 f8 01 	sts	0x01F8, r17
}
    8b50:	1f 91       	pop	r17
    8b52:	08 95       	ret

00008b54 <CarriegeReturn>:
	      break;	 
	 }
}

void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
    8b54:	80 e0       	ldi	r24, 0x00	; 0
    8b56:	61 e0       	ldi	r22, 0x01	; 1
    8b58:	4d e0       	ldi	r20, 0x0D	; 13
    8b5a:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
     uart(_COM_PRINTER, 1, 0x0A);
    8b5e:	80 e0       	ldi	r24, 0x00	; 0
    8b60:	61 e0       	ldi	r22, 0x01	; 1
    8b62:	4a e0       	ldi	r20, 0x0A	; 10
    8b64:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
}
    8b68:	08 95       	ret

00008b6a <InitPrinter>:
	 uart(_COM_PRINTER, 1,Len%0xFF);
}

void InitPrinter(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8b6a:	80 e3       	ldi	r24, 0x30	; 48
    8b6c:	90 e0       	ldi	r25, 0x00	; 0
    8b6e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    //Custom Printer TG02
	//Density Lowest: 1D 7C 00
	if (PrinterType==PT_CUSTOM_TG02){
    8b72:	81 30       	cpi	r24, 0x01	; 1
    8b74:	61 f5       	brne	.+88     	; 0x8bce <InitPrinter+0x64>
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x00);
    8b76:	80 e0       	ldi	r24, 0x00	; 0
    8b78:	61 e0       	ldi	r22, 0x01	; 1
    8b7a:	4d e1       	ldi	r20, 0x1D	; 29
    8b7c:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8b80:	80 e0       	ldi	r24, 0x00	; 0
    8b82:	61 e0       	ldi	r22, 0x01	; 1
    8b84:	4c e7       	ldi	r20, 0x7C	; 124
    8b86:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8b8a:	80 e0       	ldi	r24, 0x00	; 0
    8b8c:	61 e0       	ldi	r22, 0x01	; 1
    8b8e:	40 e0       	ldi	r20, 0x00	; 0
    8b90:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		//Double Strike ON : 1B 47 01
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x01);
    8b94:	80 e0       	ldi	r24, 0x00	; 0
    8b96:	61 e0       	ldi	r22, 0x01	; 1
    8b98:	4b e1       	ldi	r20, 0x1B	; 27
    8b9a:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8b9e:	80 e0       	ldi	r24, 0x00	; 0
    8ba0:	61 e0       	ldi	r22, 0x01	; 1
    8ba2:	47 e4       	ldi	r20, 0x47	; 71
    8ba4:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8ba8:	80 e0       	ldi	r24, 0x00	; 0
    8baa:	61 e0       	ldi	r22, 0x01	; 1
    8bac:	41 e0       	ldi	r20, 0x01	; 1
    8bae:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);   
    8bb2:	80 e0       	ldi	r24, 0x00	; 0
    8bb4:	61 e0       	ldi	r22, 0x01	; 1
    8bb6:	4d e1       	ldi	r20, 0x1D	; 29
    8bb8:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8bbc:	80 e0       	ldi	r24, 0x00	; 0
    8bbe:	61 e0       	ldi	r22, 0x01	; 1
    8bc0:	41 e2       	ldi	r20, 0x21	; 33
    8bc2:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8bc6:	80 e0       	ldi	r24, 0x00	; 0
    8bc8:	61 e0       	ldi	r22, 0x01	; 1
    8bca:	41 e0       	ldi	r20, 0x01	; 1
    8bcc:	2d c0       	rjmp	.+90     	; 0x8c28 <InitPrinter+0xbe>
		}
    else
	if (PrinterType==PT_CUSTOM_CUBE){
    8bce:	82 30       	cpi	r24, 0x02	; 2
    8bd0:	71 f5       	brne	.+92     	; 0x8c2e <InitPrinter+0xc4>
        //Print Density 0%
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x04);
    8bd2:	80 e0       	ldi	r24, 0x00	; 0
    8bd4:	61 e0       	ldi	r22, 0x01	; 1
    8bd6:	4d e1       	ldi	r20, 0x1D	; 29
    8bd8:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8bdc:	80 e0       	ldi	r24, 0x00	; 0
    8bde:	61 e0       	ldi	r22, 0x01	; 1
    8be0:	4c e7       	ldi	r20, 0x7C	; 124
    8be2:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8be6:	80 e0       	ldi	r24, 0x00	; 0
    8be8:	61 e0       	ldi	r22, 0x01	; 1
    8bea:	44 e0       	ldi	r20, 0x04	; 4
    8bec:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		//Double Strike OFF : 1B 47 00
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x00);
    8bf0:	80 e0       	ldi	r24, 0x00	; 0
    8bf2:	61 e0       	ldi	r22, 0x01	; 1
    8bf4:	4b e1       	ldi	r20, 0x1B	; 27
    8bf6:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8bfa:	80 e0       	ldi	r24, 0x00	; 0
    8bfc:	61 e0       	ldi	r22, 0x01	; 1
    8bfe:	47 e4       	ldi	r20, 0x47	; 71
    8c00:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c04:	80 e0       	ldi	r24, 0x00	; 0
    8c06:	61 e0       	ldi	r22, 0x01	; 1
    8c08:	40 e0       	ldi	r20, 0x00	; 0
    8c0a:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
    8c0e:	80 e0       	ldi	r24, 0x00	; 0
    8c10:	61 e0       	ldi	r22, 0x01	; 1
    8c12:	4d e1       	ldi	r20, 0x1D	; 29
    8c14:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c18:	80 e0       	ldi	r24, 0x00	; 0
    8c1a:	61 e0       	ldi	r22, 0x01	; 1
    8c1c:	41 e2       	ldi	r20, 0x21	; 33
    8c1e:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c22:	80 e0       	ldi	r24, 0x00	; 0
    8c24:	61 e0       	ldi	r22, 0x01	; 1
    8c26:	40 e0       	ldi	r20, 0x00	; 0
    8c28:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c2c:	08 95       	ret
		}
    else 
	if(PrinterType==PT_CUSTOM_ESCPOS) {
    8c2e:	83 30       	cpi	r24, 0x03	; 3
    8c30:	69 f5       	brne	.+90     	; 0x8c8c <InitPrinter+0x122>
      /* Set print mode font B */
      uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);
    8c32:	80 e0       	ldi	r24, 0x00	; 0
    8c34:	61 e0       	ldi	r22, 0x01	; 1
    8c36:	4b e1       	ldi	r20, 0x1B	; 27
    8c38:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c3c:	80 e0       	ldi	r24, 0x00	; 0
    8c3e:	61 e0       	ldi	r22, 0x01	; 1
    8c40:	41 e2       	ldi	r20, 0x21	; 33
    8c42:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c46:	80 e0       	ldi	r24, 0x00	; 0
    8c48:	61 e0       	ldi	r22, 0x01	; 1
    8c4a:	41 e0       	ldi	r20, 0x01	; 1
    8c4c:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
      /* Set Character per inche font A = 15 cpi; font B = 20 cpi */
      uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0xC1);uart(_COM_PRINTER, 1, 0x01);//0x31
    8c50:	80 e0       	ldi	r24, 0x00	; 0
    8c52:	61 e0       	ldi	r22, 0x01	; 1
    8c54:	4b e1       	ldi	r20, 0x1B	; 27
    8c56:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c5a:	80 e0       	ldi	r24, 0x00	; 0
    8c5c:	61 e0       	ldi	r22, 0x01	; 1
    8c5e:	41 ec       	ldi	r20, 0xC1	; 193
    8c60:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c64:	80 e0       	ldi	r24, 0x00	; 0
    8c66:	61 e0       	ldi	r22, 0x01	; 1
    8c68:	41 e0       	ldi	r20, 0x01	; 1
    8c6a:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
      /* Set Character size normal */
      uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
    8c6e:	80 e0       	ldi	r24, 0x00	; 0
    8c70:	61 e0       	ldi	r22, 0x01	; 1
    8c72:	4d e1       	ldi	r20, 0x1D	; 29
    8c74:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c78:	80 e0       	ldi	r24, 0x00	; 0
    8c7a:	61 e0       	ldi	r22, 0x01	; 1
    8c7c:	41 e2       	ldi	r20, 0x21	; 33
    8c7e:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c82:	80 e0       	ldi	r24, 0x00	; 0
    8c84:	61 e0       	ldi	r22, 0x01	; 1
    8c86:	40 e0       	ldi	r20, 0x00	; 0
    8c88:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8c8c:	08 95       	ret

00008c8e <PrintNormalHeight>:
		 }
}

void PrintNormalHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8c8e:	80 e3       	ldi	r24, 0x30	; 48
    8c90:	90 e0       	ldi	r25, 0x00	; 0
    8c92:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8c96:	82 30       	cpi	r24, 0x02	; 2
    8c98:	79 f4       	brne	.+30     	; 0x8cb8 <PrintNormalHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
    8c9a:	80 e0       	ldi	r24, 0x00	; 0
    8c9c:	61 e0       	ldi	r22, 0x01	; 1
    8c9e:	4d e1       	ldi	r20, 0x1D	; 29
    8ca0:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8ca4:	80 e0       	ldi	r24, 0x00	; 0
    8ca6:	61 e0       	ldi	r22, 0x01	; 1
    8ca8:	41 e2       	ldi	r20, 0x21	; 33
    8caa:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8cae:	80 e0       	ldi	r24, 0x00	; 0
    8cb0:	61 e0       	ldi	r22, 0x01	; 1
    8cb2:	40 e0       	ldi	r20, 0x00	; 0
    8cb4:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8cb8:	08 95       	ret

00008cba <PrintDoubleHeight>:

//void SetPrinterCharacterWidth

void PrintDoubleHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8cba:	80 e3       	ldi	r24, 0x30	; 48
    8cbc:	90 e0       	ldi	r25, 0x00	; 0
    8cbe:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8cc2:	82 30       	cpi	r24, 0x02	; 2
    8cc4:	79 f4       	brne	.+30     	; 0x8ce4 <PrintDoubleHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);
    8cc6:	80 e0       	ldi	r24, 0x00	; 0
    8cc8:	61 e0       	ldi	r22, 0x01	; 1
    8cca:	4d e1       	ldi	r20, 0x1D	; 29
    8ccc:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8cd0:	80 e0       	ldi	r24, 0x00	; 0
    8cd2:	61 e0       	ldi	r22, 0x01	; 1
    8cd4:	41 e2       	ldi	r20, 0x21	; 33
    8cd6:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8cda:	80 e0       	ldi	r24, 0x00	; 0
    8cdc:	61 e0       	ldi	r22, 0x01	; 1
    8cde:	41 e0       	ldi	r20, 0x01	; 1
    8ce0:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8ce4:	08 95       	ret

00008ce6 <PaperCut>:

	 return Result;
}


void PaperCut(){
    8ce6:	1f 93       	push	r17
     char CutType;
     CutType= eeprom_read_byte(&DefPrintAutoCut);
    8ce8:	83 e3       	ldi	r24, 0x33	; 51
    8cea:	90 e0       	ldi	r25, 0x00	; 0
    8cec:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    8cf0:	18 2f       	mov	r17, r24
     uart(_COM_PRINTER, 1, 0x1B);
    8cf2:	80 e0       	ldi	r24, 0x00	; 0
    8cf4:	61 e0       	ldi	r22, 0x01	; 1
    8cf6:	4b e1       	ldi	r20, 0x1B	; 27
    8cf8:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
    8cfc:	11 30       	cpi	r17, 0x01	; 1
    8cfe:	21 f4       	brne	.+8      	; 0x8d08 <PaperCut+0x22>
    8d00:	80 e0       	ldi	r24, 0x00	; 0
    8d02:	61 e0       	ldi	r22, 0x01	; 1
    8d04:	4d e6       	ldi	r20, 0x6D	; 109
    8d06:	05 c0       	rjmp	.+10     	; 0x8d12 <PaperCut+0x2c>
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}
    8d08:	12 30       	cpi	r17, 0x02	; 2
    8d0a:	29 f4       	brne	.+10     	; 0x8d16 <PaperCut+0x30>
    8d0c:	80 e0       	ldi	r24, 0x00	; 0
    8d0e:	61 e0       	ldi	r22, 0x01	; 1
    8d10:	49 e6       	ldi	r20, 0x69	; 105
    8d12:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>

}
    8d16:	1f 91       	pop	r17
    8d18:	08 95       	ret

00008d1a <PrintLogo>:
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
		 }
}


void PrintLogo(){
    8d1a:	af 92       	push	r10
    8d1c:	bf 92       	push	r11
    8d1e:	cf 92       	push	r12
    8d20:	df 92       	push	r13
    8d22:	ef 92       	push	r14
    8d24:	ff 92       	push	r15
    8d26:	0f 93       	push	r16
    8d28:	1f 93       	push	r17
     unsigned int Pos,Len;

     uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0xFA);uart(_COM_PRINTER, 1, 0x01);
    8d2a:	80 e0       	ldi	r24, 0x00	; 0
    8d2c:	61 e0       	ldi	r22, 0x01	; 1
    8d2e:	4b e1       	ldi	r20, 0x1B	; 27
    8d30:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8d34:	80 e0       	ldi	r24, 0x00	; 0
    8d36:	61 e0       	ldi	r22, 0x01	; 1
    8d38:	4a ef       	ldi	r20, 0xFA	; 250
    8d3a:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
    8d3e:	80 e0       	ldi	r24, 0x00	; 0
    8d40:	61 e0       	ldi	r22, 0x01	; 1
    8d42:	41 e0       	ldi	r20, 0x01	; 1
    8d44:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>

	 Pos = eeprom_read_dword(&DefLogoPosition);
    8d48:	86 e3       	ldi	r24, 0x36	; 54
    8d4a:	90 e0       	ldi	r25, 0x00	; 0
    8d4c:	0e 94 47 ae 	call	0x15c8e	; 0x15c8e <__eerd_dword_m128>
    8d50:	7b 01       	movw	r14, r22
    8d52:	8c 01       	movw	r16, r24
	 Len = eeprom_read_dword(&DefLogoLength);
    8d54:	88 e3       	ldi	r24, 0x38	; 56
    8d56:	90 e0       	ldi	r25, 0x00	; 0
    8d58:	0e 94 47 ae 	call	0x15c8e	; 0x15c8e <__eerd_dword_m128>
    8d5c:	5b 01       	movw	r10, r22
    8d5e:	6c 01       	movw	r12, r24

	 uart(_COM_PRINTER, 1,Pos/0xFF);
    8d60:	c7 01       	movw	r24, r14
    8d62:	6f ef       	ldi	r22, 0xFF	; 255
    8d64:	70 e0       	ldi	r23, 0x00	; 0
    8d66:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    8d6a:	46 2f       	mov	r20, r22
    8d6c:	80 e0       	ldi	r24, 0x00	; 0
    8d6e:	61 e0       	ldi	r22, 0x01	; 1
    8d70:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
	 uart(_COM_PRINTER, 1,Pos%0xFF);
    8d74:	c7 01       	movw	r24, r14
    8d76:	6f ef       	ldi	r22, 0xFF	; 255
    8d78:	70 e0       	ldi	r23, 0x00	; 0
    8d7a:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    8d7e:	48 2f       	mov	r20, r24
    8d80:	80 e0       	ldi	r24, 0x00	; 0
    8d82:	61 e0       	ldi	r22, 0x01	; 1
    8d84:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>

	 uart(_COM_PRINTER, 1,Len/0xFF);
    8d88:	c5 01       	movw	r24, r10
    8d8a:	6f ef       	ldi	r22, 0xFF	; 255
    8d8c:	70 e0       	ldi	r23, 0x00	; 0
    8d8e:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    8d92:	46 2f       	mov	r20, r22
    8d94:	80 e0       	ldi	r24, 0x00	; 0
    8d96:	61 e0       	ldi	r22, 0x01	; 1
    8d98:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
	 uart(_COM_PRINTER, 1,Len%0xFF);
    8d9c:	c5 01       	movw	r24, r10
    8d9e:	6f ef       	ldi	r22, 0xFF	; 255
    8da0:	70 e0       	ldi	r23, 0x00	; 0
    8da2:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    8da6:	48 2f       	mov	r20, r24
    8da8:	80 e0       	ldi	r24, 0x00	; 0
    8daa:	61 e0       	ldi	r22, 0x01	; 1
    8dac:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
}
    8db0:	1f 91       	pop	r17
    8db2:	0f 91       	pop	r16
    8db4:	ff 90       	pop	r15
    8db6:	ef 90       	pop	r14
    8db8:	df 90       	pop	r13
    8dba:	cf 90       	pop	r12
    8dbc:	bf 90       	pop	r11
    8dbe:	af 90       	pop	r10
    8dc0:	08 95       	ret

00008dc2 <procMessage11>:
}




void procMessage11(){
    8dc2:	6f 92       	push	r6
    8dc4:	7f 92       	push	r7
    8dc6:	8f 92       	push	r8
    8dc8:	9f 92       	push	r9
    8dca:	af 92       	push	r10
    8dcc:	bf 92       	push	r11
    8dce:	cf 92       	push	r12
    8dd0:	df 92       	push	r13
    8dd2:	ef 92       	push	r14
    8dd4:	ff 92       	push	r15
    8dd6:	0f 93       	push	r16
    8dd8:	1f 93       	push	r17
    8dda:	df 93       	push	r29
    8ddc:	cf 93       	push	r28
    8dde:	cd b7       	in	r28, 0x3d	; 61
    8de0:	de b7       	in	r29, 0x3e	; 62
    8de2:	c0 59       	subi	r28, 0x90	; 144
    8de4:	d0 40       	sbci	r29, 0x00	; 0
    8de6:	0f b6       	in	r0, 0x3f	; 63
    8de8:	f8 94       	cli
    8dea:	de bf       	out	0x3e, r29	; 62
    8dec:	0f be       	out	0x3f, r0	; 63
    8dee:	cd bf       	out	0x3d, r28	; 61
    8df0:	20 e0       	ldi	r18, 0x00	; 0
    8df2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8df4:	ae 01       	movw	r20, r28
    8df6:	46 5f       	subi	r20, 0xF6	; 246
    8df8:	5f 4f       	sbci	r21, 0xFF	; 255
    8dfa:	fa 01       	movw	r30, r20
    8dfc:	e2 0f       	add	r30, r18
    8dfe:	f3 1f       	adc	r31, r19
    8e00:	d9 01       	movw	r26, r18
    8e02:	ad 5d       	subi	r26, 0xDD	; 221
    8e04:	b6 4f       	sbci	r27, 0xF6	; 246
    8e06:	9b 96       	adiw	r26, 0x2b	; 43
    8e08:	8c 91       	ld	r24, X
    8e0a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e0c:	2f 5f       	subi	r18, 0xFF	; 255
    8e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    8e10:	2a 30       	cpi	r18, 0x0A	; 10
    8e12:	31 05       	cpc	r19, r1
    8e14:	91 f7       	brne	.-28     	; 0x8dfa <procMessage11+0x38>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8e16:	fa 01       	movw	r30, r20
    8e18:	12 86       	std	Z+10, r1	; 0x0a
     char buffHeader[50],strReadEEPROM[50];
	 char strProductName[13],strProductPrice[9],strTime[12],strDate[10];

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
    8e1a:	81 e0       	ldi	r24, 0x01	; 1
    8e1c:	ba 01       	movw	r22, r20
    8e1e:	0e 94 01 25 	call	0x4a02	; 0x4a02 <FormatDate>
    8e22:	20 e0       	ldi	r18, 0x00	; 0
    8e24:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8e26:	ae 01       	movw	r20, r28
    8e28:	4c 5e       	subi	r20, 0xEC	; 236
    8e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    8e2c:	fa 01       	movw	r30, r20
    8e2e:	e2 0f       	add	r30, r18
    8e30:	f3 1f       	adc	r31, r19
    8e32:	d9 01       	movw	r26, r18
    8e34:	ad 5d       	subi	r26, 0xDD	; 221
    8e36:	b6 4f       	sbci	r27, 0xF6	; 246
    8e38:	d6 96       	adiw	r26, 0x36	; 54
    8e3a:	8c 91       	ld	r24, X
    8e3c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e3e:	2f 5f       	subi	r18, 0xFF	; 255
    8e40:	3f 4f       	sbci	r19, 0xFF	; 255
    8e42:	28 30       	cpi	r18, 0x08	; 8
    8e44:	31 05       	cpc	r19, r1
    8e46:	91 f7       	brne	.-28     	; 0x8e2c <procMessage11+0x6a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8e48:	1c 8e       	std	Y+28, r1	; 0x1c

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8e4a:	81 e0       	ldi	r24, 0x01	; 1
    8e4c:	be 01       	movw	r22, r28
    8e4e:	66 5f       	subi	r22, 0xF6	; 246
    8e50:	7f 4f       	sbci	r23, 0xFF	; 255
    8e52:	0e 94 cd a8 	call	0x1519a	; 0x1519a <_datetime>
    8e56:	0d e2       	ldi	r16, 0x2D	; 45
    8e58:	12 e0       	ldi	r17, 0x02	; 2
    8e5a:	71 e6       	ldi	r23, 0x61	; 97
    8e5c:	e7 2e       	mov	r14, r23
    8e5e:	79 e0       	ldi	r23, 0x09	; 9
    8e60:	f7 2e       	mov	r15, r23
    8e62:	6d e2       	ldi	r22, 0x2D	; 45
    8e64:	c6 2e       	mov	r12, r22
    8e66:	d1 2c       	mov	r13, r1
    8e68:	cc 0e       	add	r12, r28
    8e6a:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e6c:	58 e2       	ldi	r21, 0x28	; 40
    8e6e:	a5 2e       	mov	r10, r21
    8e70:	b1 2c       	mov	r11, r1
    8e72:	ac 0c       	add	r10, r12
    8e74:	bd 1c       	adc	r11, r13
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8e76:	45 e5       	ldi	r20, 0x55	; 85
    8e78:	64 2e       	mov	r6, r20
    8e7a:	71 2c       	mov	r7, r1
    8e7c:	6c 0e       	add	r6, r28
    8e7e:	7d 1e       	adc	r7, r29
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8e80:	3f e5       	ldi	r19, 0x5F	; 95
    8e82:	83 2e       	mov	r8, r19
    8e84:	91 2c       	mov	r9, r1
    8e86:	8c 0e       	add	r8, r28
    8e88:	9d 1e       	adc	r9, r29

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8e8a:	f6 01       	movw	r30, r12
    8e8c:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8e8e:	8d 91       	ld	r24, X+
    8e90:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e92:	ea 15       	cp	r30, r10
    8e94:	fb 05       	cpc	r31, r11
    8e96:	d9 f7       	brne	.-10     	; 0x8e8e <procMessage11+0xcc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8e98:	f3 01       	movw	r30, r6
    8e9a:	10 82       	st	Z, r1
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8e9c:	c4 01       	movw	r24, r8
    8e9e:	b8 01       	movw	r22, r16
    8ea0:	49 e2       	ldi	r20, 0x29	; 41
    8ea2:	50 e0       	ldi	r21, 0x00	; 0
    8ea4:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	     if (strcmp(strReadEEPROM,buffHeader)!=0)
    8ea8:	c4 01       	movw	r24, r8
    8eaa:	b6 01       	movw	r22, r12
    8eac:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    8eb0:	00 97       	sbiw	r24, 0x00	; 0
    8eb2:	31 f0       	breq	.+12     	; 0x8ec0 <procMessage11+0xfe>
		     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[i], 41);
    8eb4:	c6 01       	movw	r24, r12
    8eb6:	b8 01       	movw	r22, r16
    8eb8:	49 e2       	ldi	r20, 0x29	; 41
    8eba:	50 e0       	ldi	r21, 0x00	; 0
    8ebc:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
    8ec0:	07 5d       	subi	r16, 0xD7	; 215
    8ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ec4:	88 e2       	ldi	r24, 0x28	; 40
    8ec6:	90 e0       	ldi	r25, 0x00	; 0
    8ec8:	e8 0e       	add	r14, r24
    8eca:	f9 1e       	adc	r15, r25
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8ecc:	93 e0       	ldi	r25, 0x03	; 3
    8ece:	07 3c       	cpi	r16, 0xC7	; 199
    8ed0:	19 07       	cpc	r17, r25
    8ed2:	d9 f6       	brne	.-74     	; 0x8e8a <procMessage11+0xc8>
    8ed4:	00 ec       	ldi	r16, 0xC0	; 192
    8ed6:	10 e0       	ldi	r17, 0x00	; 0
    8ed8:	29 e0       	ldi	r18, 0x09	; 9
    8eda:	e2 2e       	mov	r14, r18
    8edc:	2b e0       	ldi	r18, 0x0B	; 11
    8ede:	f2 2e       	mov	r15, r18
    8ee0:	90 e2       	ldi	r25, 0x20	; 32
    8ee2:	c9 2e       	mov	r12, r25
    8ee4:	d1 2c       	mov	r13, r1
    8ee6:	cc 0e       	add	r12, r28
    8ee8:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8eea:	8c e2       	ldi	r24, 0x2C	; 44
    8eec:	88 2e       	mov	r8, r24
    8eee:	91 2c       	mov	r9, r1
    8ef0:	8c 0e       	add	r8, r28
    8ef2:	9d 1e       	adc	r9, r29
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8ef4:	bf e5       	ldi	r27, 0x5F	; 95
    8ef6:	ab 2e       	mov	r10, r27
    8ef8:	b1 2c       	mov	r11, r1
    8efa:	ac 0e       	add	r10, r28
    8efc:	bd 1e       	adc	r11, r29
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8efe:	f6 01       	movw	r30, r12
    8f00:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8f02:	8d 91       	ld	r24, X+
    8f04:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8f06:	e8 15       	cp	r30, r8
    8f08:	f9 05       	cpc	r31, r9
    8f0a:	d9 f7       	brne	.-10     	; 0x8f02 <procMessage11+0x140>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8f0c:	1c a6       	std	Y+44, r1	; 0x2c
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
    8f0e:	c6 01       	movw	r24, r12
    8f10:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8f14:	c5 01       	movw	r24, r10
    8f16:	b8 01       	movw	r22, r16
    8f18:	4c e0       	ldi	r20, 0x0C	; 12
    8f1a:	50 e0       	ldi	r21, 0x00	; 0
    8f1c:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductName)!=0)
    8f20:	c5 01       	movw	r24, r10
    8f22:	b6 01       	movw	r22, r12
    8f24:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    8f28:	00 97       	sbiw	r24, 0x00	; 0
    8f2a:	31 f0       	breq	.+12     	; 0x8f38 <procMessage11+0x176>
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
    8f2c:	c6 01       	movw	r24, r12
    8f2e:	b8 01       	movw	r22, r16
    8f30:	4c e0       	ldi	r20, 0x0C	; 12
    8f32:	50 e0       	ldi	r21, 0x00	; 0
    8f34:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
    8f38:	03 5f       	subi	r16, 0xF3	; 243
    8f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    8f3c:	ec e0       	ldi	r30, 0x0C	; 12
    8f3e:	f0 e0       	ldi	r31, 0x00	; 0
    8f40:	ee 0e       	add	r14, r30
    8f42:	ff 1e       	adc	r15, r31
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8f44:	f1 e0       	ldi	r31, 0x01	; 1
    8f46:	0e 30       	cpi	r16, 0x0E	; 14
    8f48:	1f 07       	cpc	r17, r31
    8f4a:	c9 f6       	brne	.-78     	; 0x8efe <procMessage11+0x13c>
    8f4c:	0a e8       	ldi	r16, 0x8A	; 138
    8f4e:	10 e0       	ldi	r17, 0x00	; 0
    8f50:	a1 e5       	ldi	r26, 0x51	; 81
    8f52:	ea 2e       	mov	r14, r26
    8f54:	ab e0       	ldi	r26, 0x0B	; 11
    8f56:	fa 2e       	mov	r15, r26
    8f58:	6e 01       	movw	r12, r28
    8f5a:	08 94       	sec
    8f5c:	c1 1c       	adc	r12, r1
    8f5e:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8f60:	f9 e0       	ldi	r31, 0x09	; 9
    8f62:	8f 2e       	mov	r8, r31
    8f64:	91 2c       	mov	r9, r1
    8f66:	8c 0e       	add	r8, r28
    8f68:	9d 1e       	adc	r9, r29
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
		RemZeroLead(strProductPrice);
		RemDecimal(strProductPrice);

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8f6a:	ef e5       	ldi	r30, 0x5F	; 95
    8f6c:	ae 2e       	mov	r10, r30
    8f6e:	b1 2c       	mov	r11, r1
    8f70:	ac 0e       	add	r10, r28
    8f72:	bd 1e       	adc	r11, r29
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8f74:	f6 01       	movw	r30, r12
    8f76:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8f78:	8d 91       	ld	r24, X+
    8f7a:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8f7c:	e8 15       	cp	r30, r8
    8f7e:	f9 05       	cpc	r31, r9
    8f80:	d9 f7       	brne	.-10     	; 0x8f78 <procMessage11+0x1b6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8f82:	19 86       	std	Y+9, r1	; 0x09
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
    8f84:	c6 01       	movw	r24, r12
    8f86:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		RemZeroLead(strProductPrice);
    8f8a:	c6 01       	movw	r24, r12
    8f8c:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		RemDecimal(strProductPrice);
    8f90:	c6 01       	movw	r24, r12
    8f92:	0e 94 50 24 	call	0x48a0	; 0x48a0 <RemDecimal>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8f96:	c5 01       	movw	r24, r10
    8f98:	b8 01       	movw	r22, r16
    8f9a:	48 e0       	ldi	r20, 0x08	; 8
    8f9c:	50 e0       	ldi	r21, 0x00	; 0
    8f9e:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
    8fa2:	c5 01       	movw	r24, r10
    8fa4:	b6 01       	movw	r22, r12
    8fa6:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    8faa:	00 97       	sbiw	r24, 0x00	; 0
    8fac:	31 f0       	breq	.+12     	; 0x8fba <procMessage11+0x1f8>
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
    8fae:	c6 01       	movw	r24, r12
    8fb0:	b8 01       	movw	r22, r16
    8fb2:	48 e0       	ldi	r20, 0x08	; 8
    8fb4:	50 e0       	ldi	r21, 0x00	; 0
    8fb6:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
    8fba:	07 5f       	subi	r16, 0xF7	; 247
    8fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    8fbe:	88 e0       	ldi	r24, 0x08	; 8
    8fc0:	90 e0       	ldi	r25, 0x00	; 0
    8fc2:	e8 0e       	add	r14, r24
    8fc4:	f9 1e       	adc	r15, r25
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
    8fc6:	90 e0       	ldi	r25, 0x00	; 0
    8fc8:	00 3c       	cpi	r16, 0xC0	; 192
    8fca:	19 07       	cpc	r17, r25
    8fcc:	99 f6       	brne	.-90     	; 0x8f74 <procMessage11+0x1b2>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
	 }
}
    8fce:	c0 57       	subi	r28, 0x70	; 112
    8fd0:	df 4f       	sbci	r29, 0xFF	; 255
    8fd2:	0f b6       	in	r0, 0x3f	; 63
    8fd4:	f8 94       	cli
    8fd6:	de bf       	out	0x3e, r29	; 62
    8fd8:	0f be       	out	0x3f, r0	; 63
    8fda:	cd bf       	out	0x3d, r28	; 61
    8fdc:	cf 91       	pop	r28
    8fde:	df 91       	pop	r29
    8fe0:	1f 91       	pop	r17
    8fe2:	0f 91       	pop	r16
    8fe4:	ff 90       	pop	r15
    8fe6:	ef 90       	pop	r14
    8fe8:	df 90       	pop	r13
    8fea:	cf 90       	pop	r12
    8fec:	bf 90       	pop	r11
    8fee:	af 90       	pop	r10
    8ff0:	9f 90       	pop	r9
    8ff2:	8f 90       	pop	r8
    8ff4:	7f 90       	pop	r7
    8ff6:	6f 90       	pop	r6
    8ff8:	08 95       	ret

00008ffa <ValidateRestoreCode>:
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
     WrapCode(strKeyStamp);
}

char ValidateRestoreCode(char *sKeyStamp, char *sRestoreCode){//==RC_VALID
    8ffa:	ef 92       	push	r14
    8ffc:	ff 92       	push	r15
    8ffe:	0f 93       	push	r16
    9000:	1f 93       	push	r17
    9002:	cf 93       	push	r28
    9004:	df 93       	push	r29
    9006:	ec 01       	movw	r28, r24
    9008:	7b 01       	movw	r14, r22

	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
    900a:	08 81       	ld	r16, Y
    900c:	00 53       	subi	r16, 0x30	; 48
    900e:	10 e0       	ldi	r17, 0x00	; 0
    9010:	04 c0       	rjmp	.+8      	; 0x901a <ValidateRestoreCode+0x20>
	 for (i=0;i<nSum;i++){
         WrapCode(sKeyStamp);
    9012:	ce 01       	movw	r24, r28
    9014:	0e 94 00 31 	call	0x6200	; 0x6200 <WrapCode>
	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
	 for (i=0;i<nSum;i++){
    9018:	1f 5f       	subi	r17, 0xFF	; 255
    901a:	10 17       	cp	r17, r16
    901c:	d0 f3       	brcs	.-12     	; 0x9012 <ValidateRestoreCode+0x18>
	 //uart_print(1,1,strSend);
     
	 //sprintf_P(strSend,PSTR("WrapStamp:%s"),sRestoreCode);
	 //uart_print(1,1,strSend);

	 if (strcmp(sKeyStamp,sRestoreCode)==0)
    901e:	ce 01       	movw	r24, r28
    9020:	b7 01       	movw	r22, r14
    9022:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    9026:	00 97       	sbiw	r24, 0x00	; 0
    9028:	11 f0       	breq	.+4      	; 0x902e <ValidateRestoreCode+0x34>
    902a:	82 e0       	ldi	r24, 0x02	; 2
    902c:	01 c0       	rjmp	.+2      	; 0x9030 <ValidateRestoreCode+0x36>
    902e:	81 e0       	ldi	r24, 0x01	; 1
	     Result=RC_VALID;	 
     else Result=RC_INVALID;

   return Result;
}
    9030:	df 91       	pop	r29
    9032:	cf 91       	pop	r28
    9034:	1f 91       	pop	r17
    9036:	0f 91       	pop	r16
    9038:	ff 90       	pop	r15
    903a:	ef 90       	pop	r14
    903c:	08 95       	ret

0000903e <ValidateGeniusCode>:
          }
	 }sTemp[iAdd]=0;
	 sprintf_P(strSource,PSTR("%s"),sTemp);
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
    903e:	ef 92       	push	r14
    9040:	ff 92       	push	r15
    9042:	0f 93       	push	r16
    9044:	1f 93       	push	r17
    9046:	df 93       	push	r29
    9048:	cf 93       	push	r28
    904a:	cd b7       	in	r28, 0x3d	; 61
    904c:	de b7       	in	r29, 0x3e	; 62
    904e:	2a 97       	sbiw	r28, 0x0a	; 10
    9050:	0f b6       	in	r0, 0x3f	; 63
    9052:	f8 94       	cli
    9054:	de bf       	out	0x3e, r29	; 62
    9056:	0f be       	out	0x3f, r0	; 63
    9058:	cd bf       	out	0x3d, r28	; 61
    905a:	7b 01       	movw	r14, r22

         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("[%s]"),sGenCode); 
         uart_print(1,1,strSend);
		 #endif
	 if (strlen(sGenCode)==8){//Length musti  8
    905c:	fb 01       	movw	r30, r22
    905e:	01 90       	ld	r0, Z+
    9060:	00 20       	and	r0, r0
    9062:	e9 f7       	brne	.-6      	; 0x905e <ValidateGeniusCode+0x20>
    9064:	39 97       	sbiw	r30, 0x09	; 9
    9066:	e6 17       	cp	r30, r22
    9068:	f7 07       	cpc	r31, r23
    906a:	11 f0       	breq	.+4      	; 0x9070 <ValidateGeniusCode+0x32>
    906c:	80 e0       	ldi	r24, 0x00	; 0
    906e:	11 c0       	rjmp	.+34     	; 0x9092 <ValidateGeniusCode+0x54>
	     //sDate: 05012001		 
		 GenerateGeniusCode(sDate,sGenCode[0],sAutoGen);
    9070:	fb 01       	movw	r30, r22
    9072:	60 81       	ld	r22, Z
    9074:	8e 01       	movw	r16, r28
    9076:	0f 5f       	subi	r16, 0xFF	; 255
    9078:	1f 4f       	sbci	r17, 0xFF	; 255
    907a:	a8 01       	movw	r20, r16
    907c:	0e 94 fe 31 	call	0x63fc	; 0x63fc <GenerateGeniusCode>
         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("%s|%s"),sAutoGen,sGenCode); 
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
    9080:	c8 01       	movw	r24, r16
    9082:	b7 01       	movw	r22, r14
    9084:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    9088:	00 97       	sbiw	r24, 0x00	; 0
    908a:	11 f0       	breq	.+4      	; 0x9090 <ValidateGeniusCode+0x52>
    908c:	82 e0       	ldi	r24, 0x02	; 2
    908e:	01 c0       	rjmp	.+2      	; 0x9092 <ValidateGeniusCode+0x54>
    9090:	81 e0       	ldi	r24, 0x01	; 1
         else Result=GC_INVALID;
	 }


   return Result;
}
    9092:	2a 96       	adiw	r28, 0x0a	; 10
    9094:	0f b6       	in	r0, 0x3f	; 63
    9096:	f8 94       	cli
    9098:	de bf       	out	0x3e, r29	; 62
    909a:	0f be       	out	0x3f, r0	; 63
    909c:	cd bf       	out	0x3d, r28	; 61
    909e:	cf 91       	pop	r28
    90a0:	df 91       	pop	r29
    90a2:	1f 91       	pop	r17
    90a4:	0f 91       	pop	r16
    90a6:	ff 90       	pop	r15
    90a8:	ef 90       	pop	r14
    90aa:	08 95       	ret

000090ac <_scr_pump>:

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    90ac:	8f 92       	push	r8
    90ae:	9f 92       	push	r9
    90b0:	af 92       	push	r10
    90b2:	bf 92       	push	r11
    90b4:	cf 92       	push	r12
    90b6:	df 92       	push	r13
    90b8:	ef 92       	push	r14
    90ba:	ff 92       	push	r15
    90bc:	0f 93       	push	r16
    90be:	1f 93       	push	r17
    90c0:	df 93       	push	r29
    90c2:	cf 93       	push	r28
    90c4:	cd b7       	in	r28, 0x3d	; 61
    90c6:	de b7       	in	r29, 0x3e	; 62
    90c8:	6c 97       	sbiw	r28, 0x1c	; 28
    90ca:	0f b6       	in	r0, 0x3f	; 63
    90cc:	f8 94       	cli
    90ce:	de bf       	out	0x3e, r29	; 62
    90d0:	0f be       	out	0x3f, r0	; 63
    90d2:	cd bf       	out	0x3d, r28	; 61
	 //char strPumpL[3],strPumpR[3];
	 char __pump_id[8];
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
    90d4:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    90d8:	84 ec       	ldi	r24, 0xC4	; 196
    90da:	99 e0       	ldi	r25, 0x09	; 9
    90dc:	01 97       	sbiw	r24, 0x01	; 1
    90de:	f1 f7       	brne	.-4      	; 0x90dc <_scr_pump+0x30>
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    90e0:	8e 01       	movw	r16, r28
    90e2:	0f 5f       	subi	r16, 0xFF	; 255
    90e4:	1f 4f       	sbci	r17, 0xFF	; 255
    90e6:	c8 01       	movw	r24, r16
    90e8:	6a e4       	ldi	r22, 0x4A	; 74
    90ea:	70 e0       	ldi	r23, 0x00	; 0
    90ec:	48 e0       	ldi	r20, 0x08	; 8
    90ee:	50 e0       	ldi	r21, 0x00	; 0
    90f0:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    90f4:	78 01       	movw	r14, r16
    90f6:	01 e0       	ldi	r16, 0x01	; 1
    90f8:	10 e0       	ldi	r17, 0x00	; 0
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    90fa:	a9 e0       	ldi	r26, 0x09	; 9
    90fc:	ca 2e       	mov	r12, r26
    90fe:	d1 2c       	mov	r13, r1
    9100:	cc 0e       	add	r12, r28
    9102:	dd 1e       	adc	r13, r29
    9104:	f6 ed       	ldi	r31, 0xD6	; 214
    9106:	8f 2e       	mov	r8, r31
    9108:	fe e0       	ldi	r31, 0x0E	; 14
    910a:	9f 2e       	mov	r9, r31
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    910c:	e5 e0       	ldi	r30, 0x05	; 5
    910e:	ae 2e       	mov	r10, r30
    9110:	b1 2c       	mov	r11, r1
    9112:	ac 0e       	add	r10, r28
    9114:	bd 1e       	adc	r11, r29
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    9116:	8d b7       	in	r24, 0x3d	; 61
    9118:	9e b7       	in	r25, 0x3e	; 62
    911a:	0c 97       	sbiw	r24, 0x0c	; 12
    911c:	0f b6       	in	r0, 0x3f	; 63
    911e:	f8 94       	cli
    9120:	9e bf       	out	0x3e, r25	; 62
    9122:	0f be       	out	0x3f, r0	; 63
    9124:	8d bf       	out	0x3d, r24	; 61
    9126:	ed b7       	in	r30, 0x3d	; 61
    9128:	fe b7       	in	r31, 0x3e	; 62
    912a:	31 96       	adiw	r30, 0x01	; 1
    912c:	ad b7       	in	r26, 0x3d	; 61
    912e:	be b7       	in	r27, 0x3e	; 62
    9130:	12 96       	adiw	r26, 0x02	; 2
    9132:	dc 92       	st	X, r13
    9134:	ce 92       	st	-X, r12
    9136:	11 97       	sbiw	r26, 0x01	; 1
    9138:	93 82       	std	Z+3, r9	; 0x03
    913a:	82 82       	std	Z+2, r8	; 0x02
    913c:	15 83       	std	Z+5, r17	; 0x05
    913e:	04 83       	std	Z+4, r16	; 0x04
    9140:	d7 01       	movw	r26, r14
    9142:	8c 91       	ld	r24, X
    9144:	86 83       	std	Z+6, r24	; 0x06
    9146:	17 82       	std	Z+7, r1	; 0x07
    9148:	0c 5f       	subi	r16, 0xFC	; 252
    914a:	1f 4f       	sbci	r17, 0xFF	; 255
    914c:	11 87       	std	Z+9, r17	; 0x09
    914e:	00 87       	std	Z+8, r16	; 0x08
    9150:	04 50       	subi	r16, 0x04	; 4
    9152:	10 40       	sbci	r17, 0x00	; 0
    9154:	14 96       	adiw	r26, 0x04	; 4
    9156:	8c 91       	ld	r24, X
    9158:	82 87       	std	Z+10, r24	; 0x0a
    915a:	13 86       	std	Z+11, r1	; 0x0b
    915c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			 lcd_print((i+1),1,lcdteks);
    9160:	8d b7       	in	r24, 0x3d	; 61
    9162:	9e b7       	in	r25, 0x3e	; 62
    9164:	0c 96       	adiw	r24, 0x0c	; 12
    9166:	0f b6       	in	r0, 0x3f	; 63
    9168:	f8 94       	cli
    916a:	9e bf       	out	0x3e, r25	; 62
    916c:	0f be       	out	0x3f, r0	; 63
    916e:	8d bf       	out	0x3d, r24	; 61
    9170:	80 2f       	mov	r24, r16
    9172:	61 e0       	ldi	r22, 0x01	; 1
    9174:	a6 01       	movw	r20, r12
    9176:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    917a:	08 94       	sec
    917c:	e1 1c       	adc	r14, r1
    917e:	f1 1c       	adc	r15, r1
    9180:	0f 5f       	subi	r16, 0xFF	; 255
    9182:	1f 4f       	sbci	r17, 0xFF	; 255
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    9184:	ea 14       	cp	r14, r10
    9186:	fb 04       	cpc	r15, r11
    9188:	31 f6       	brne	.-116    	; 0x9116 <_scr_pump+0x6a>
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
			 lcd_print((i+1),1,lcdteks);
		}
        lcd_printf(4,15,PSTR("*)Exit"));
    918a:	84 e0       	ldi	r24, 0x04	; 4
    918c:	6f e0       	ldi	r22, 0x0F	; 15
    918e:	4f ec       	ldi	r20, 0xCF	; 207
    9190:	5e e0       	ldi	r21, 0x0E	; 14
    9192:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
}
    9196:	6c 96       	adiw	r28, 0x1c	; 28
    9198:	0f b6       	in	r0, 0x3f	; 63
    919a:	f8 94       	cli
    919c:	de bf       	out	0x3e, r29	; 62
    919e:	0f be       	out	0x3f, r0	; 63
    91a0:	cd bf       	out	0x3d, r28	; 61
    91a2:	cf 91       	pop	r28
    91a4:	df 91       	pop	r29
    91a6:	1f 91       	pop	r17
    91a8:	0f 91       	pop	r16
    91aa:	ff 90       	pop	r15
    91ac:	ef 90       	pop	r14
    91ae:	df 90       	pop	r13
    91b0:	cf 90       	pop	r12
    91b2:	bf 90       	pop	r11
    91b4:	af 90       	pop	r10
    91b6:	9f 90       	pop	r9
    91b8:	8f 90       	pop	r8
    91ba:	08 95       	ret

000091bc <FViewFreeMessage>:
char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
	 switch(stFreeMessage){
    91bc:	80 91 70 02 	lds	r24, 0x0270
    91c0:	81 30       	cpi	r24, 0x01	; 1
    91c2:	49 f0       	breq	.+18     	; 0x91d6 <FViewFreeMessage+0x1a>
    91c4:	81 30       	cpi	r24, 0x01	; 1
    91c6:	28 f0       	brcs	.+10     	; 0x91d2 <FViewFreeMessage+0x16>
    91c8:	82 30       	cpi	r24, 0x02	; 2
    91ca:	19 f1       	breq	.+70     	; 0x9212 <FViewFreeMessage+0x56>
    91cc:	83 30       	cpi	r24, 0x03	; 3
    91ce:	71 f5       	brne	.+92     	; 0x922c <FViewFreeMessage+0x70>
    91d0:	29 c0       	rjmp	.+82     	; 0x9224 <FViewFreeMessage+0x68>
	 case fmInit:
	      stFreeMessage=fmDisplayFreeMessage;
    91d2:	81 e0       	ldi	r24, 0x01	; 1
    91d4:	23 c0       	rjmp	.+70     	; 0x921c <FViewFreeMessage+0x60>
	      break;
     case fmDisplayFreeMessage:
		  lcd_clear();
    91d6:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    91da:	81 e0       	ldi	r24, 0x01	; 1
    91dc:	61 e0       	ldi	r22, 0x01	; 1
    91de:	48 e9       	ldi	r20, 0x98	; 152
    91e0:	58 e0       	ldi	r21, 0x08	; 8
    91e2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    91e6:	82 e0       	ldi	r24, 0x02	; 2
    91e8:	61 e0       	ldi	r22, 0x01	; 1
    91ea:	49 ea       	ldi	r20, 0xA9	; 169
    91ec:	57 e0       	ldi	r21, 0x07	; 7
    91ee:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    91f2:	83 e0       	ldi	r24, 0x03	; 3
    91f4:	61 e0       	ldi	r22, 0x01	; 1
    91f6:	42 e2       	ldi	r20, 0x22	; 34
    91f8:	58 e0       	ldi	r21, 0x08	; 8
    91fa:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    91fe:	84 e0       	ldi	r24, 0x04	; 4
    9200:	61 e0       	ldi	r22, 0x01	; 1
    9202:	4c ed       	ldi	r20, 0xDC	; 220
    9204:	5b e0       	ldi	r21, 0x0B	; 11
    9206:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	      TimDisplay=0;
    920a:	10 92 93 01 	sts	0x0193, r1
	      stFreeMessage=fmDelayViewMesage;
    920e:	82 e0       	ldi	r24, 0x02	; 2
    9210:	05 c0       	rjmp	.+10     	; 0x921c <FViewFreeMessage+0x60>
	      break;
	 case fmDelayViewMesage:  
	      if (TimDisplay>TIM_FREE_MESSAGE)stFreeMessage=fmFinishFreeMessage;
    9212:	80 91 93 01 	lds	r24, 0x0193
    9216:	8b 30       	cpi	r24, 0x0B	; 11
    9218:	48 f0       	brcs	.+18     	; 0x922c <FViewFreeMessage+0x70>
    921a:	83 e0       	ldi	r24, 0x03	; 3
    921c:	80 93 70 02 	sts	0x0270, r24
    9220:	80 e0       	ldi	r24, 0x00	; 0
    9222:	08 95       	ret
	      break;
     case fmFinishFreeMessage:
          stFreeMessage=fmInit;
    9224:	10 92 70 02 	sts	0x0270, r1
    9228:	81 e0       	ldi	r24, 0x01	; 1
    922a:	08 95       	ret
    922c:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    922e:	08 95       	ret

00009230 <FTestChar>:
		TimTicker++;
	}

}

char FTestChar(){
    9230:	0f 93       	push	r16
    9232:	1f 93       	push	r17
    9234:	df 93       	push	r29
    9236:	cf 93       	push	r28
    9238:	cd b7       	in	r28, 0x3d	; 61
    923a:	de b7       	in	r29, 0x3e	; 62
    923c:	64 97       	sbiw	r28, 0x14	; 20
    923e:	0f b6       	in	r0, 0x3f	; 63
    9240:	f8 94       	cli
    9242:	de bf       	out	0x3e, r29	; 62
    9244:	0f be       	out	0x3f, r0	; 63
    9246:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20],Result;
char i=0;
     Result=MENU_NONE;
     sprintf_P(lcdteks,PSTR("D:%d C:%c  "),i,i);
    9248:	8d b7       	in	r24, 0x3d	; 61
    924a:	9e b7       	in	r25, 0x3e	; 62
    924c:	08 97       	sbiw	r24, 0x08	; 8
    924e:	0f b6       	in	r0, 0x3f	; 63
    9250:	f8 94       	cli
    9252:	9e bf       	out	0x3e, r25	; 62
    9254:	0f be       	out	0x3f, r0	; 63
    9256:	8d bf       	out	0x3d, r24	; 61
    9258:	ed b7       	in	r30, 0x3d	; 61
    925a:	fe b7       	in	r31, 0x3e	; 62
    925c:	31 96       	adiw	r30, 0x01	; 1
    925e:	8e 01       	movw	r16, r28
    9260:	0f 5f       	subi	r16, 0xFF	; 255
    9262:	1f 4f       	sbci	r17, 0xFF	; 255
    9264:	ad b7       	in	r26, 0x3d	; 61
    9266:	be b7       	in	r27, 0x3e	; 62
    9268:	12 96       	adiw	r26, 0x02	; 2
    926a:	1c 93       	st	X, r17
    926c:	0e 93       	st	-X, r16
    926e:	11 97       	sbiw	r26, 0x01	; 1
    9270:	85 e6       	ldi	r24, 0x65	; 101
    9272:	9e e1       	ldi	r25, 0x1E	; 30
    9274:	93 83       	std	Z+3, r25	; 0x03
    9276:	82 83       	std	Z+2, r24	; 0x02
    9278:	15 82       	std	Z+5, r1	; 0x05
    927a:	14 82       	std	Z+4, r1	; 0x04
    927c:	17 82       	std	Z+7, r1	; 0x07
    927e:	16 82       	std	Z+6, r1	; 0x06
    9280:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
     lcd_print(1,1,lcdteks);
    9284:	8d b7       	in	r24, 0x3d	; 61
    9286:	9e b7       	in	r25, 0x3e	; 62
    9288:	08 96       	adiw	r24, 0x08	; 8
    928a:	0f b6       	in	r0, 0x3f	; 63
    928c:	f8 94       	cli
    928e:	9e bf       	out	0x3e, r25	; 62
    9290:	0f be       	out	0x3f, r0	; 63
    9292:	8d bf       	out	0x3d, r24	; 61
    9294:	81 e0       	ldi	r24, 0x01	; 1
    9296:	61 e0       	ldi	r22, 0x01	; 1
    9298:	a8 01       	movw	r20, r16
    929a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    929e:	88 ee       	ldi	r24, 0xE8	; 232
    92a0:	9d ef       	ldi	r25, 0xFD	; 253
    92a2:	29 e1       	ldi	r18, 0x19	; 25
    92a4:	30 e0       	ldi	r19, 0x00	; 0
    92a6:	f9 01       	movw	r30, r18
    92a8:	31 97       	sbiw	r30, 0x01	; 1
    92aa:	f1 f7       	brne	.-4      	; 0x92a8 <FTestChar+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    92ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    92ae:	d9 f7       	brne	.-10     	; 0x92a6 <FTestChar+0x76>
	 if (i==0xFF)Result=MENU_DONE;
	 i++;
     _delay_ms(6500);
  return Result;
}
    92b0:	80 e0       	ldi	r24, 0x00	; 0
    92b2:	64 96       	adiw	r28, 0x14	; 20
    92b4:	0f b6       	in	r0, 0x3f	; 63
    92b6:	f8 94       	cli
    92b8:	de bf       	out	0x3e, r29	; 62
    92ba:	0f be       	out	0x3f, r0	; 63
    92bc:	cd bf       	out	0x3d, r28	; 61
    92be:	cf 91       	pop	r28
    92c0:	df 91       	pop	r29
    92c2:	1f 91       	pop	r17
    92c4:	0f 91       	pop	r16
    92c6:	08 95       	ret

000092c8 <DisplayDateTime>:

void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}

void DisplayDateTime(){
    92c8:	cf 92       	push	r12
    92ca:	df 92       	push	r13
    92cc:	ef 92       	push	r14
    92ce:	ff 92       	push	r15
    92d0:	0f 93       	push	r16
    92d2:	1f 93       	push	r17
    92d4:	df 93       	push	r29
    92d6:	cf 93       	push	r28
    92d8:	cd b7       	in	r28, 0x3d	; 61
    92da:	de b7       	in	r29, 0x3e	; 62
    92dc:	64 97       	sbiw	r28, 0x14	; 20
    92de:	0f b6       	in	r0, 0x3f	; 63
    92e0:	f8 94       	cli
    92e2:	de bf       	out	0x3e, r29	; 62
    92e4:	0f be       	out	0x3f, r0	; 63
    92e6:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20];
	 _datetime(0, strSystemDate, strSystemTime);
    92e8:	10 ec       	ldi	r17, 0xC0	; 192
    92ea:	e1 2e       	mov	r14, r17
    92ec:	13 e0       	ldi	r17, 0x03	; 3
    92ee:	f1 2e       	mov	r15, r17
    92f0:	ba e7       	ldi	r27, 0x7A	; 122
    92f2:	cb 2e       	mov	r12, r27
    92f4:	b8 e0       	ldi	r27, 0x08	; 8
    92f6:	db 2e       	mov	r13, r27
    92f8:	80 e0       	ldi	r24, 0x00	; 0
    92fa:	b7 01       	movw	r22, r14
    92fc:	a6 01       	movw	r20, r12
    92fe:	0e 94 cd a8 	call	0x1519a	; 0x1519a <_datetime>
	 sprintf_P(lcdteks,PSTR("%s %s"),strSystemDate,strSystemTime);
    9302:	8d b7       	in	r24, 0x3d	; 61
    9304:	9e b7       	in	r25, 0x3e	; 62
    9306:	08 97       	sbiw	r24, 0x08	; 8
    9308:	0f b6       	in	r0, 0x3f	; 63
    930a:	f8 94       	cli
    930c:	9e bf       	out	0x3e, r25	; 62
    930e:	0f be       	out	0x3f, r0	; 63
    9310:	8d bf       	out	0x3d, r24	; 61
    9312:	ed b7       	in	r30, 0x3d	; 61
    9314:	fe b7       	in	r31, 0x3e	; 62
    9316:	31 96       	adiw	r30, 0x01	; 1
    9318:	8e 01       	movw	r16, r28
    931a:	0f 5f       	subi	r16, 0xFF	; 255
    931c:	1f 4f       	sbci	r17, 0xFF	; 255
    931e:	ad b7       	in	r26, 0x3d	; 61
    9320:	be b7       	in	r27, 0x3e	; 62
    9322:	12 96       	adiw	r26, 0x02	; 2
    9324:	1c 93       	st	X, r17
    9326:	0e 93       	st	-X, r16
    9328:	11 97       	sbiw	r26, 0x01	; 1
    932a:	81 e7       	ldi	r24, 0x71	; 113
    932c:	9e e1       	ldi	r25, 0x1E	; 30
    932e:	93 83       	std	Z+3, r25	; 0x03
    9330:	82 83       	std	Z+2, r24	; 0x02
    9332:	f5 82       	std	Z+5, r15	; 0x05
    9334:	e4 82       	std	Z+4, r14	; 0x04
    9336:	d7 82       	std	Z+7, r13	; 0x07
    9338:	c6 82       	std	Z+6, r12	; 0x06
    933a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 lcd_print(2, 1, lcdteks);
    933e:	8d b7       	in	r24, 0x3d	; 61
    9340:	9e b7       	in	r25, 0x3e	; 62
    9342:	08 96       	adiw	r24, 0x08	; 8
    9344:	0f b6       	in	r0, 0x3f	; 63
    9346:	f8 94       	cli
    9348:	9e bf       	out	0x3e, r25	; 62
    934a:	0f be       	out	0x3f, r0	; 63
    934c:	8d bf       	out	0x3d, r24	; 61
    934e:	82 e0       	ldi	r24, 0x02	; 2
    9350:	61 e0       	ldi	r22, 0x01	; 1
    9352:	a8 01       	movw	r20, r16
    9354:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
}
    9358:	64 96       	adiw	r28, 0x14	; 20
    935a:	0f b6       	in	r0, 0x3f	; 63
    935c:	f8 94       	cli
    935e:	de bf       	out	0x3e, r29	; 62
    9360:	0f be       	out	0x3f, r0	; 63
    9362:	cd bf       	out	0x3d, r28	; 61
    9364:	cf 91       	pop	r28
    9366:	df 91       	pop	r29
    9368:	1f 91       	pop	r17
    936a:	0f 91       	pop	r16
    936c:	ff 90       	pop	r15
    936e:	ef 90       	pop	r14
    9370:	df 90       	pop	r13
    9372:	cf 90       	pop	r12
    9374:	08 95       	ret

00009376 <DisplayScreenIdle>:
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
		break;
	 }
}

void DisplayScreenIdle(void){
    9376:	cf 92       	push	r12
    9378:	df 92       	push	r13
    937a:	ef 92       	push	r14
    937c:	ff 92       	push	r15
    937e:	0f 93       	push	r16
    9380:	1f 93       	push	r17
    9382:	df 93       	push	r29
    9384:	cf 93       	push	r28
    9386:	cd b7       	in	r28, 0x3d	; 61
    9388:	de b7       	in	r29, 0x3e	; 62
    938a:	a8 97       	sbiw	r28, 0x28	; 40
    938c:	0f b6       	in	r0, 0x3f	; 63
    938e:	f8 94       	cli
    9390:	de bf       	out	0x3e, r29	; 62
    9392:	0f be       	out	0x3f, r0	; 63
    9394:	cd bf       	out	0x3d, r28	; 61
char strCodeName[10],strVersion[10],lcdteks[20];
    sprintf_P(strCodeName,PSTR(CODE_NAME)); 
    9396:	00 d0       	rcall	.+0      	; 0x9398 <DisplayScreenIdle+0x22>
    9398:	00 d0       	rcall	.+0      	; 0x939a <DisplayScreenIdle+0x24>
    939a:	6e 01       	movw	r12, r28
    939c:	08 94       	sec
    939e:	c1 1c       	adc	r12, r1
    93a0:	d1 1c       	adc	r13, r1
    93a2:	ad b7       	in	r26, 0x3d	; 61
    93a4:	be b7       	in	r27, 0x3e	; 62
    93a6:	12 96       	adiw	r26, 0x02	; 2
    93a8:	dc 92       	st	X, r13
    93aa:	ce 92       	st	-X, r12
    93ac:	11 97       	sbiw	r26, 0x01	; 1
    93ae:	82 ea       	ldi	r24, 0xA2	; 162
    93b0:	93 e2       	ldi	r25, 0x23	; 35
    93b2:	14 96       	adiw	r26, 0x04	; 4
    93b4:	9c 93       	st	X, r25
    93b6:	8e 93       	st	-X, r24
    93b8:	13 97       	sbiw	r26, 0x03	; 3
    93ba:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    sprintf_P(strVersion,PSTR(VERSION_NUM)); 
    93be:	0b e0       	ldi	r16, 0x0B	; 11
    93c0:	e0 2e       	mov	r14, r16
    93c2:	f1 2c       	mov	r15, r1
    93c4:	ec 0e       	add	r14, r28
    93c6:	fd 1e       	adc	r15, r29
    93c8:	ed b7       	in	r30, 0x3d	; 61
    93ca:	fe b7       	in	r31, 0x3e	; 62
    93cc:	f2 82       	std	Z+2, r15	; 0x02
    93ce:	e1 82       	std	Z+1, r14	; 0x01
    93d0:	8d e9       	ldi	r24, 0x9D	; 157
    93d2:	93 e2       	ldi	r25, 0x23	; 35
    93d4:	94 83       	std	Z+4, r25	; 0x04
    93d6:	83 83       	std	Z+3, r24	; 0x03
    93d8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    sprintf_P(lcdteks,PSTR("%s %s"),strCodeName,strVersion); 
    93dc:	00 d0       	rcall	.+0      	; 0x93de <DisplayScreenIdle+0x68>
    93de:	00 d0       	rcall	.+0      	; 0x93e0 <DisplayScreenIdle+0x6a>
    93e0:	ed b7       	in	r30, 0x3d	; 61
    93e2:	fe b7       	in	r31, 0x3e	; 62
    93e4:	31 96       	adiw	r30, 0x01	; 1
    93e6:	8e 01       	movw	r16, r28
    93e8:	0b 5e       	subi	r16, 0xEB	; 235
    93ea:	1f 4f       	sbci	r17, 0xFF	; 255
    93ec:	ad b7       	in	r26, 0x3d	; 61
    93ee:	be b7       	in	r27, 0x3e	; 62
    93f0:	12 96       	adiw	r26, 0x02	; 2
    93f2:	1c 93       	st	X, r17
    93f4:	0e 93       	st	-X, r16
    93f6:	11 97       	sbiw	r26, 0x01	; 1
    93f8:	87 e9       	ldi	r24, 0x97	; 151
    93fa:	93 e2       	ldi	r25, 0x23	; 35
    93fc:	93 83       	std	Z+3, r25	; 0x03
    93fe:	82 83       	std	Z+2, r24	; 0x02
    9400:	d5 82       	std	Z+5, r13	; 0x05
    9402:	c4 82       	std	Z+4, r12	; 0x04
    9404:	f7 82       	std	Z+7, r15	; 0x07
    9406:	e6 82       	std	Z+6, r14	; 0x06
    9408:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	lcd_clear();
    940c:	ed b7       	in	r30, 0x3d	; 61
    940e:	fe b7       	in	r31, 0x3e	; 62
    9410:	38 96       	adiw	r30, 0x08	; 8
    9412:	0f b6       	in	r0, 0x3f	; 63
    9414:	f8 94       	cli
    9416:	fe bf       	out	0x3e, r31	; 62
    9418:	0f be       	out	0x3f, r0	; 63
    941a:	ed bf       	out	0x3d, r30	; 61
    941c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	lcd_print(1,1,lcdteks);
    9420:	81 e0       	ldi	r24, 0x01	; 1
    9422:	61 e0       	ldi	r22, 0x01	; 1
    9424:	a8 01       	movw	r20, r16
    9426:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
}
    942a:	a8 96       	adiw	r28, 0x28	; 40
    942c:	0f b6       	in	r0, 0x3f	; 63
    942e:	f8 94       	cli
    9430:	de bf       	out	0x3e, r29	; 62
    9432:	0f be       	out	0x3f, r0	; 63
    9434:	cd bf       	out	0x3d, r28	; 61
    9436:	cf 91       	pop	r28
    9438:	df 91       	pop	r29
    943a:	1f 91       	pop	r17
    943c:	0f 91       	pop	r16
    943e:	ff 90       	pop	r15
    9440:	ef 90       	pop	r14
    9442:	df 90       	pop	r13
    9444:	cf 90       	pop	r12
    9446:	08 95       	ret

00009448 <DisplayPumpStatus>:
		  break;         	 
	 }
  return Result;	 
}

void DisplayPumpStatus(){
    9448:	0f 93       	push	r16
    944a:	1f 93       	push	r17
    944c:	df 93       	push	r29
    944e:	cf 93       	push	r28
    9450:	cd b7       	in	r28, 0x3d	; 61
    9452:	de b7       	in	r29, 0x3e	; 62
    9454:	a8 97       	sbiw	r28, 0x28	; 40
    9456:	0f b6       	in	r0, 0x3f	; 63
    9458:	f8 94       	cli
    945a:	de bf       	out	0x3e, r29	; 62
    945c:	0f be       	out	0x3f, r0	; 63
    945e:	cd bf       	out	0x3d, r28	; 61
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
    9460:	80 91 01 01 	lds	r24, 0x0101
    9464:	81 30       	cpi	r24, 0x01	; 1
    9466:	09 f0       	breq	.+2      	; 0x946a <DisplayPumpStatus+0x22>
    9468:	4a c0       	rjmp	.+148    	; 0x94fe <DisplayPumpStatus+0xb6>
	     IsNewPumpStatus=False;
    946a:	10 92 01 01 	sts	0x0101, r1
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    946e:	80 93 b3 02 	sts	0x02B3, r24
	 __key_lgtcnt = 0; 
    9472:	10 92 b4 02 	sts	0x02B4, r1
	 PORTG=PORTG&0b11111101;
    9476:	80 91 65 00 	lds	r24, 0x0065
    947a:	8d 7f       	andi	r24, 0xFD	; 253
    947c:	80 93 65 00 	sts	0x0065, r24
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
    9480:	80 91 5c 01 	lds	r24, 0x015C
    9484:	48 2f       	mov	r20, r24
    9486:	50 e0       	ldi	r21, 0x00	; 0
    9488:	20 e0       	ldi	r18, 0x00	; 0
    948a:	30 e0       	ldi	r19, 0x00	; 0
    948c:	be 01       	movw	r22, r28
    948e:	6f 5f       	subi	r22, 0xFF	; 255
    9490:	7f 4f       	sbci	r23, 0xFF	; 255
    9492:	0a c0       	rjmp	.+20     	; 0x94a8 <DisplayPumpStatus+0x60>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    9494:	fb 01       	movw	r30, r22
    9496:	e2 0f       	add	r30, r18
    9498:	f3 1f       	adc	r31, r19
    949a:	d9 01       	movw	r26, r18
    949c:	ae 5f       	subi	r26, 0xFE	; 254
    949e:	be 4f       	sbci	r27, 0xFE	; 254
    94a0:	8c 91       	ld	r24, X
    94a2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    94a4:	2f 5f       	subi	r18, 0xFF	; 255
    94a6:	3f 4f       	sbci	r19, 0xFF	; 255
    94a8:	24 17       	cp	r18, r20
    94aa:	35 07       	cpc	r19, r21
    94ac:	98 f3       	brcs	.-26     	; 0x9494 <DisplayPumpStatus+0x4c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    94ae:	46 0f       	add	r20, r22
    94b0:	57 1f       	adc	r21, r23
    94b2:	da 01       	movw	r26, r20
    94b4:	1c 92       	st	X, r1

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
    94b6:	00 d0       	rcall	.+0      	; 0x94b8 <DisplayPumpStatus+0x70>
    94b8:	00 d0       	rcall	.+0      	; 0x94ba <DisplayPumpStatus+0x72>
    94ba:	00 d0       	rcall	.+0      	; 0x94bc <DisplayPumpStatus+0x74>
    94bc:	ed b7       	in	r30, 0x3d	; 61
    94be:	fe b7       	in	r31, 0x3e	; 62
    94c0:	31 96       	adiw	r30, 0x01	; 1
    94c2:	8e 01       	movw	r16, r28
    94c4:	0b 5e       	subi	r16, 0xEB	; 235
    94c6:	1f 4f       	sbci	r17, 0xFF	; 255
    94c8:	ad b7       	in	r26, 0x3d	; 61
    94ca:	be b7       	in	r27, 0x3e	; 62
    94cc:	12 96       	adiw	r26, 0x02	; 2
    94ce:	1c 93       	st	X, r17
    94d0:	0e 93       	st	-X, r16
    94d2:	11 97       	sbiw	r26, 0x01	; 1
    94d4:	89 e1       	ldi	r24, 0x19	; 25
    94d6:	94 e2       	ldi	r25, 0x24	; 36
    94d8:	93 83       	std	Z+3, r25	; 0x03
    94da:	82 83       	std	Z+2, r24	; 0x02
    94dc:	75 83       	std	Z+5, r23	; 0x05
    94de:	64 83       	std	Z+4, r22	; 0x04
    94e0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
         lcd_print(4,1,lcdteks);
    94e4:	ed b7       	in	r30, 0x3d	; 61
    94e6:	fe b7       	in	r31, 0x3e	; 62
    94e8:	36 96       	adiw	r30, 0x06	; 6
    94ea:	0f b6       	in	r0, 0x3f	; 63
    94ec:	f8 94       	cli
    94ee:	fe bf       	out	0x3e, r31	; 62
    94f0:	0f be       	out	0x3f, r0	; 63
    94f2:	ed bf       	out	0x3d, r30	; 61
    94f4:	84 e0       	ldi	r24, 0x04	; 4
    94f6:	61 e0       	ldi	r22, 0x01	; 1
    94f8:	a8 01       	movw	r20, r16
    94fa:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
     	 }
}
    94fe:	a8 96       	adiw	r28, 0x28	; 40
    9500:	0f b6       	in	r0, 0x3f	; 63
    9502:	f8 94       	cli
    9504:	de bf       	out	0x3e, r29	; 62
    9506:	0f be       	out	0x3f, r0	; 63
    9508:	cd bf       	out	0x3d, r28	; 61
    950a:	cf 91       	pop	r28
    950c:	df 91       	pop	r29
    950e:	1f 91       	pop	r17
    9510:	0f 91       	pop	r16
    9512:	08 95       	ret

00009514 <FCloseShift>:
	 }
  return Result;
}


char FCloseShift(char ShiftType){//SHIFT_NONE,NEW_SHIFT,CONTINUE_SHIFT
    9514:	df 92       	push	r13
    9516:	ef 92       	push	r14
    9518:	ff 92       	push	r15
    951a:	0f 93       	push	r16
    951c:	1f 93       	push	r17
    951e:	df 93       	push	r29
    9520:	cf 93       	push	r28
    9522:	cd b7       	in	r28, 0x3d	; 61
    9524:	de b7       	in	r29, 0x3e	; 62
    9526:	64 97       	sbiw	r28, 0x14	; 20
    9528:	0f b6       	in	r0, 0x3f	; 63
    952a:	f8 94       	cli
    952c:	de bf       	out	0x3e, r29	; 62
    952e:	0f be       	out	0x3f, r0	; 63
    9530:	cd bf       	out	0x3d, r28	; 61
    9532:	18 2f       	mov	r17, r24
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
	 switch(stCloseShift){
    9534:	80 91 4c 02 	lds	r24, 0x024C
    9538:	87 30       	cpi	r24, 0x07	; 7
    953a:	09 f4       	brne	.+2      	; 0x953e <FCloseShift+0x2a>
    953c:	98 c1       	rjmp	.+816    	; 0x986e <FCloseShift+0x35a>
    953e:	88 30       	cpi	r24, 0x08	; 8
    9540:	78 f4       	brcc	.+30     	; 0x9560 <FCloseShift+0x4c>
    9542:	84 30       	cpi	r24, 0x04	; 4
    9544:	09 f4       	brne	.+2      	; 0x9548 <FCloseShift+0x34>
    9546:	64 c0       	rjmp	.+200    	; 0x9610 <FCloseShift+0xfc>
    9548:	85 30       	cpi	r24, 0x05	; 5
    954a:	18 f4       	brcc	.+6      	; 0x9552 <FCloseShift+0x3e>
    954c:	88 23       	and	r24, r24
    954e:	c1 f0       	breq	.+48     	; 0x9580 <FCloseShift+0x6c>
    9550:	04 c2       	rjmp	.+1032   	; 0x995a <FCloseShift+0x446>
    9552:	85 30       	cpi	r24, 0x05	; 5
    9554:	09 f4       	brne	.+2      	; 0x9558 <FCloseShift+0x44>
    9556:	a2 c0       	rjmp	.+324    	; 0x969c <FCloseShift+0x188>
    9558:	86 30       	cpi	r24, 0x06	; 6
    955a:	09 f0       	breq	.+2      	; 0x955e <FCloseShift+0x4a>
    955c:	fe c1       	rjmp	.+1020   	; 0x995a <FCloseShift+0x446>
    955e:	a4 c0       	rjmp	.+328    	; 0x96a8 <FCloseShift+0x194>
    9560:	8a 30       	cpi	r24, 0x0A	; 10
    9562:	09 f4       	brne	.+2      	; 0x9566 <FCloseShift+0x52>
    9564:	c8 c1       	rjmp	.+912    	; 0x98f6 <FCloseShift+0x3e2>
    9566:	8b 30       	cpi	r24, 0x0B	; 11
    9568:	20 f4       	brcc	.+8      	; 0x9572 <FCloseShift+0x5e>
    956a:	88 30       	cpi	r24, 0x08	; 8
    956c:	09 f0       	breq	.+2      	; 0x9570 <FCloseShift+0x5c>
    956e:	f5 c1       	rjmp	.+1002   	; 0x995a <FCloseShift+0x446>
    9570:	84 c1       	rjmp	.+776    	; 0x987a <FCloseShift+0x366>
    9572:	8b 30       	cpi	r24, 0x0B	; 11
    9574:	09 f4       	brne	.+2      	; 0x9578 <FCloseShift+0x64>
    9576:	ed c1       	rjmp	.+986    	; 0x9952 <FCloseShift+0x43e>
    9578:	8c 30       	cpi	r24, 0x0C	; 12
    957a:	09 f0       	breq	.+2      	; 0x957e <FCloseShift+0x6a>
    957c:	ee c1       	rjmp	.+988    	; 0x995a <FCloseShift+0x446>
    957e:	c3 c1       	rjmp	.+902    	; 0x9906 <FCloseShift+0x3f2>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
    9580:	8f e4       	ldi	r24, 0x4F	; 79
    9582:	91 e0       	ldi	r25, 0x01	; 1
    9584:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9588:	80 93 5d 01 	sts	0x015D, r24
		  IsPumpBusy=False;
    958c:	10 92 4b 02 	sts	0x024B, r1
    9590:	ff 24       	eor	r15, r15
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
    9592:	dd 24       	eor	r13, r13
    9594:	d3 94       	inc	r13
    9596:	36 c0       	rjmp	.+108    	; 0x9604 <FCloseShift+0xf0>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
		       if ((strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_NONE))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_OFF))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_BUSY)))
    9598:	0f 2d       	mov	r16, r15
    959a:	10 e0       	ldi	r17, 0x00	; 0
    959c:	f8 01       	movw	r30, r16
    959e:	ee 5f       	subi	r30, 0xFE	; 254
    95a0:	fe 4f       	sbci	r31, 0xFE	; 254
    95a2:	e0 80       	ld	r14, Z
    95a4:	8e e0       	ldi	r24, 0x0E	; 14
    95a6:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    95aa:	e8 16       	cp	r14, r24
    95ac:	81 f0       	breq	.+32     	; 0x95ce <FCloseShift+0xba>
    95ae:	86 e0       	ldi	r24, 0x06	; 6
    95b0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    95b4:	e8 16       	cp	r14, r24
    95b6:	59 f0       	breq	.+22     	; 0x95ce <FCloseShift+0xba>
    95b8:	89 e0       	ldi	r24, 0x09	; 9
    95ba:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    95be:	e8 16       	cp	r14, r24
    95c0:	31 f0       	breq	.+12     	; 0x95ce <FCloseShift+0xba>
				    UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    95c2:	8f 2d       	mov	r24, r15
    95c4:	0e 94 9a 20 	call	0x4134	; 0x4134 <GetPumpID>
    95c8:	66 e0       	ldi	r22, 0x06	; 6
    95ca:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    95ce:	84 e1       	ldi	r24, 0x14	; 20
    95d0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    95d4:	f8 01       	movw	r30, r16
    95d6:	ee 5f       	subi	r30, 0xFE	; 254
    95d8:	fe 4f       	sbci	r31, 0xFE	; 254
    95da:	90 81       	ld	r25, Z
    95dc:	98 17       	cp	r25, r24
    95de:	31 f4       	brne	.+12     	; 0x95ec <FCloseShift+0xd8>
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    95e0:	8f 2d       	mov	r24, r15
    95e2:	0e 94 9a 20 	call	0x4134	; 0x4134 <GetPumpID>
    95e6:	66 e0       	ldi	r22, 0x06	; 6
    95e8:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
    95ec:	89 e0       	ldi	r24, 0x09	; 9
    95ee:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    95f2:	0e 5f       	subi	r16, 0xFE	; 254
    95f4:	1e 4f       	sbci	r17, 0xFE	; 254
    95f6:	d8 01       	movw	r26, r16
    95f8:	9c 91       	ld	r25, X
    95fa:	98 17       	cp	r25, r24
    95fc:	11 f4       	brne	.+4      	; 0x9602 <FCloseShift+0xee>
			       IsPumpBusy=True;
    95fe:	d0 92 4b 02 	sts	0x024B, r13
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
    9602:	f3 94       	inc	r15
    9604:	80 91 5d 01 	lds	r24, 0x015D
    9608:	f8 16       	cp	r15, r24
    960a:	30 f2       	brcs	.-116    	; 0x9598 <FCloseShift+0x84>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
			   }

          stCloseShift=csSendTotalizerALL;
    960c:	84 e0       	ldi	r24, 0x04	; 4
    960e:	9e c1       	rjmp	.+828    	; 0x994c <FCloseShift+0x438>
			  */
	      break;
     case csWaitPumpLocked:	     
	      break;
     case csSendTotalizerALL:
	      lcd_clear();
    9610:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("Totalizer.."));
    9614:	81 e0       	ldi	r24, 0x01	; 1
    9616:	61 e0       	ldi	r22, 0x01	; 1
    9618:	48 e3       	ldi	r20, 0x38	; 56
    961a:	57 e1       	ldi	r21, 0x17	; 23
    961c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  
		  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    9620:	00 91 5d 01 	lds	r16, 0x015D
    9624:	10 e0       	ldi	r17, 0x00	; 0
    9626:	82 e0       	ldi	r24, 0x02	; 2
    9628:	91 e0       	ldi	r25, 0x01	; 1
    962a:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <CountTotalizerSatus>
    962e:	00 d0       	rcall	.+0      	; 0x9630 <FCloseShift+0x11c>
    9630:	00 d0       	rcall	.+0      	; 0x9632 <FCloseShift+0x11e>
    9632:	00 d0       	rcall	.+0      	; 0x9634 <FCloseShift+0x120>
    9634:	ed b7       	in	r30, 0x3d	; 61
    9636:	fe b7       	in	r31, 0x3e	; 62
    9638:	31 96       	adiw	r30, 0x01	; 1
    963a:	7e 01       	movw	r14, r28
    963c:	08 94       	sec
    963e:	e1 1c       	adc	r14, r1
    9640:	f1 1c       	adc	r15, r1
    9642:	ad b7       	in	r26, 0x3d	; 61
    9644:	be b7       	in	r27, 0x3e	; 62
    9646:	12 96       	adiw	r26, 0x02	; 2
    9648:	fc 92       	st	X, r15
    964a:	ee 92       	st	-X, r14
    964c:	11 97       	sbiw	r26, 0x01	; 1
    964e:	2a e2       	ldi	r18, 0x2A	; 42
    9650:	37 e1       	ldi	r19, 0x17	; 23
    9652:	33 83       	std	Z+3, r19	; 0x03
    9654:	22 83       	std	Z+2, r18	; 0x02
    9656:	08 1b       	sub	r16, r24
    9658:	11 09       	sbc	r17, r1
    965a:	15 83       	std	Z+5, r17	; 0x05
    965c:	04 83       	std	Z+4, r16	; 0x04
    965e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    9662:	ed b7       	in	r30, 0x3d	; 61
    9664:	fe b7       	in	r31, 0x3e	; 62
    9666:	36 96       	adiw	r30, 0x06	; 6
    9668:	0f b6       	in	r0, 0x3f	; 63
    966a:	f8 94       	cli
    966c:	fe bf       	out	0x3e, r31	; 62
    966e:	0f be       	out	0x3f, r0	; 63
    9670:	ed bf       	out	0x3d, r30	; 61
    9672:	82 e0       	ldi	r24, 0x02	; 2
    9674:	61 e0       	ldi	r22, 0x01	; 1
    9676:	a7 01       	movw	r20, r14
    9678:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>


          IsNewPumpStatus=True;
    967c:	11 e0       	ldi	r17, 0x01	; 1
    967e:	10 93 01 01 	sts	0x0101, r17
		  DisplayPumpStatus(); 
    9682:	0e 94 24 4a 	call	0x9448	; 0x9448 <DisplayPumpStatus>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    9686:	95 e0       	ldi	r25, 0x05	; 5
    9688:	90 93 ad 05 	sts	0x05AD, r25
	 PoolMsg=plMsg;
    968c:	82 e1       	ldi	r24, 0x12	; 18
    968e:	80 93 d9 0b 	sts	0x0BD9, r24
     IsControlPooling=True;
    9692:	10 93 84 01 	sts	0x0184, r17
          IsNewPumpStatus=True;
		  DisplayPumpStatus(); 
		  //SendCommand
	      //SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);          
		  SendPoolingCommand(SC_TOTALIZER,PUMP_ALL);
		  stCloseShift=csDisplayPumpStatus;
    9696:	90 93 4c 02 	sts	0x024C, r25
    969a:	5f c1       	rjmp	.+702    	; 0x995a <FCloseShift+0x446>
	      break;
     case csDisplayPumpStatus:
		  DisplayPumpStatus(); 
    969c:	0e 94 24 4a 	call	0x9448	; 0x9448 <DisplayPumpStatus>
		  TimDisplay=0;         
    96a0:	10 92 93 01 	sts	0x0193, r1
          stCloseShift=csWaitTotalizerComplete;
    96a4:	86 e0       	ldi	r24, 0x06	; 6
    96a6:	52 c1       	rjmp	.+676    	; 0x994c <FCloseShift+0x438>
	      break;
     case csWaitTotalizerComplete:
	      KeyPressed=_key_scan(1);
    96a8:	81 e0       	ldi	r24, 0x01	; 1
    96aa:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    96ae:	d8 2e       	mov	r13, r24
		  if (IsNewPumpStatus==True){
    96b0:	80 91 01 01 	lds	r24, 0x0101
    96b4:	81 30       	cpi	r24, 0x01	; 1
    96b6:	89 f5       	brne	.+98     	; 0x971a <FCloseShift+0x206>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    96b8:	00 91 5d 01 	lds	r16, 0x015D
    96bc:	10 e0       	ldi	r17, 0x00	; 0
    96be:	82 e0       	ldi	r24, 0x02	; 2
    96c0:	91 e0       	ldi	r25, 0x01	; 1
    96c2:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <CountTotalizerSatus>
    96c6:	00 d0       	rcall	.+0      	; 0x96c8 <FCloseShift+0x1b4>
    96c8:	00 d0       	rcall	.+0      	; 0x96ca <FCloseShift+0x1b6>
    96ca:	00 d0       	rcall	.+0      	; 0x96cc <FCloseShift+0x1b8>
    96cc:	ed b7       	in	r30, 0x3d	; 61
    96ce:	fe b7       	in	r31, 0x3e	; 62
    96d0:	31 96       	adiw	r30, 0x01	; 1
    96d2:	7e 01       	movw	r14, r28
    96d4:	08 94       	sec
    96d6:	e1 1c       	adc	r14, r1
    96d8:	f1 1c       	adc	r15, r1
    96da:	ad b7       	in	r26, 0x3d	; 61
    96dc:	be b7       	in	r27, 0x3e	; 62
    96de:	12 96       	adiw	r26, 0x02	; 2
    96e0:	fc 92       	st	X, r15
    96e2:	ee 92       	st	-X, r14
    96e4:	11 97       	sbiw	r26, 0x01	; 1
    96e6:	2c e1       	ldi	r18, 0x1C	; 28
    96e8:	37 e1       	ldi	r19, 0x17	; 23
    96ea:	33 83       	std	Z+3, r19	; 0x03
    96ec:	22 83       	std	Z+2, r18	; 0x02
    96ee:	08 1b       	sub	r16, r24
    96f0:	11 09       	sbc	r17, r1
    96f2:	15 83       	std	Z+5, r17	; 0x05
    96f4:	04 83       	std	Z+4, r16	; 0x04
    96f6:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  lcd_print(2,1,lcdteks);
    96fa:	ed b7       	in	r30, 0x3d	; 61
    96fc:	fe b7       	in	r31, 0x3e	; 62
    96fe:	36 96       	adiw	r30, 0x06	; 6
    9700:	0f b6       	in	r0, 0x3f	; 63
    9702:	f8 94       	cli
    9704:	fe bf       	out	0x3e, r31	; 62
    9706:	0f be       	out	0x3f, r0	; 63
    9708:	ed bf       	out	0x3d, r30	; 61
    970a:	82 e0       	ldi	r24, 0x02	; 2
    970c:	61 e0       	ldi	r22, 0x01	; 1
    970e:	a7 01       	movw	r20, r14
    9710:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  	  stCloseShift=csDisplayPumpStatus;	 
    9714:	85 e0       	ldi	r24, 0x05	; 5
    9716:	80 93 4c 02 	sts	0x024C, r24
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
    971a:	82 e0       	ldi	r24, 0x02	; 2
    971c:	91 e0       	ldi	r25, 0x01	; 1
    971e:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <CountTotalizerSatus>
    9722:	90 91 5d 01 	lds	r25, 0x015D
    9726:	89 17       	cp	r24, r25
    9728:	a0 f0       	brcs	.+40     	; 0x9752 <FCloseShift+0x23e>
    972a:	80 91 93 01 	lds	r24, 0x0193
    972e:	86 30       	cpi	r24, 0x06	; 6
    9730:	80 f0       	brcs	.+32     	; 0x9752 <FCloseShift+0x23e>
    9732:	10 e0       	ldi	r17, 0x00	; 0
    9734:	07 c0       	rjmp	.+14     	; 0x9744 <FCloseShift+0x230>
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    9736:	81 2f       	mov	r24, r17
    9738:	0e 94 9a 20 	call	0x4134	; 0x4134 <GetPumpID>
    973c:	66 e0       	ldi	r22, 0x06	; 6
    973e:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
			  lcd_print(2,1,lcdteks);
		  	  stCloseShift=csDisplayPumpStatus;	 
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
    9742:	1f 5f       	subi	r17, 0xFF	; 255
    9744:	80 91 5d 01 	lds	r24, 0x015D
    9748:	18 17       	cp	r17, r24
    974a:	a8 f3       	brcs	.-22     	; 0x9736 <FCloseShift+0x222>
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);

		      stCloseShift=csGenerateReport;		      
    974c:	88 e0       	ldi	r24, 0x08	; 8
    974e:	80 93 4c 02 	sts	0x024C, r24
			  }
          //sprintf_P(lcdteks,PSTR("TimSend:%d"),TimDisplay);
		  //lcd_print(3,1,lcdteks);

          if ((TimDisplay>15)&&(IsPumpBusy!=True)){
    9752:	80 91 93 01 	lds	r24, 0x0193
    9756:	80 31       	cpi	r24, 0x10	; 16
    9758:	08 f4       	brcc	.+2      	; 0x975c <FCloseShift+0x248>
    975a:	60 c0       	rjmp	.+192    	; 0x981c <FCloseShift+0x308>
    975c:	80 91 4b 02 	lds	r24, 0x024B
    9760:	81 30       	cpi	r24, 0x01	; 1
    9762:	09 f4       	brne	.+2      	; 0x9766 <FCloseShift+0x252>
    9764:	5b c0       	rjmp	.+182    	; 0x981c <FCloseShift+0x308>
		      if(CountNoPumpSatus(strPumpStatus)>=eeprom_read_byte(&DefActivePump)){
    9766:	82 e0       	ldi	r24, 0x02	; 2
    9768:	91 e0       	ldi	r25, 0x01	; 1
    976a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <CountNoPumpSatus>
    976e:	18 2f       	mov	r17, r24
    9770:	8f e4       	ldi	r24, 0x4F	; 79
    9772:	91 e0       	ldi	r25, 0x01	; 1
    9774:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9778:	18 17       	cp	r17, r24
    977a:	08 f4       	brcc	.+2      	; 0x977e <FCloseShift+0x26a>
    977c:	4f c0       	rjmp	.+158    	; 0x981c <FCloseShift+0x308>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
    977e:	00 91 5d 01 	lds	r16, 0x015D
    9782:	10 e0       	ldi	r17, 0x00	; 0
    9784:	82 e0       	ldi	r24, 0x02	; 2
    9786:	91 e0       	ldi	r25, 0x01	; 1
    9788:	0e 94 13 17 	call	0x2e26	; 0x2e26 <CountNoPumpSatus>
    978c:	00 d0       	rcall	.+0      	; 0x978e <FCloseShift+0x27a>
    978e:	00 d0       	rcall	.+0      	; 0x9790 <FCloseShift+0x27c>
    9790:	00 d0       	rcall	.+0      	; 0x9792 <FCloseShift+0x27e>
    9792:	ed b7       	in	r30, 0x3d	; 61
    9794:	fe b7       	in	r31, 0x3e	; 62
    9796:	31 96       	adiw	r30, 0x01	; 1
    9798:	7e 01       	movw	r14, r28
    979a:	08 94       	sec
    979c:	e1 1c       	adc	r14, r1
    979e:	f1 1c       	adc	r15, r1
    97a0:	ad b7       	in	r26, 0x3d	; 61
    97a2:	be b7       	in	r27, 0x3e	; 62
    97a4:	12 96       	adiw	r26, 0x02	; 2
    97a6:	fc 92       	st	X, r15
    97a8:	ee 92       	st	-X, r14
    97aa:	11 97       	sbiw	r26, 0x01	; 1
    97ac:	28 e0       	ldi	r18, 0x08	; 8
    97ae:	37 e1       	ldi	r19, 0x17	; 23
    97b0:	33 83       	std	Z+3, r19	; 0x03
    97b2:	22 83       	std	Z+2, r18	; 0x02
    97b4:	08 1b       	sub	r16, r24
    97b6:	11 09       	sbc	r17, r1
    97b8:	15 83       	std	Z+5, r17	; 0x05
    97ba:	04 83       	std	Z+4, r16	; 0x04
    97bc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    97c0:	ed b7       	in	r30, 0x3d	; 61
    97c2:	fe b7       	in	r31, 0x3e	; 62
    97c4:	36 96       	adiw	r30, 0x06	; 6
    97c6:	0f b6       	in	r0, 0x3f	; 63
    97c8:	f8 94       	cli
    97ca:	fe bf       	out	0x3e, r31	; 62
    97cc:	0f be       	out	0x3f, r0	; 63
    97ce:	ed bf       	out	0x3d, r30	; 61
    97d0:	83 e0       	ldi	r24, 0x03	; 3
    97d2:	61 e0       	ldi	r22, 0x01	; 1
    97d4:	a7 01       	movw	r20, r14
    97d6:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    97da:	10 e0       	ldi	r17, 0x00	; 0
    97dc:	11 c0       	rjmp	.+34     	; 0x9800 <FCloseShift+0x2ec>
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    97de:	84 e1       	ldi	r24, 0x14	; 20
    97e0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
    97e4:	e1 2f       	mov	r30, r17
    97e6:	f0 e0       	ldi	r31, 0x00	; 0
    97e8:	ee 5f       	subi	r30, 0xFE	; 254
    97ea:	fe 4f       	sbci	r31, 0xFE	; 254
    97ec:	90 81       	ld	r25, Z
    97ee:	98 17       	cp	r25, r24
    97f0:	31 f4       	brne	.+12     	; 0x97fe <FCloseShift+0x2ea>
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    97f2:	81 2f       	mov	r24, r17
    97f4:	0e 94 9a 20 	call	0x4134	; 0x4134 <GetPumpID>
    97f8:	66 e0       	ldi	r22, 0x06	; 6
    97fa:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
			  lcd_print(3,1,lcdteks);
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
    97fe:	1f 5f       	subi	r17, 0xFF	; 255
    9800:	80 91 5d 01 	lds	r24, 0x015D
    9804:	18 17       	cp	r17, r24
    9806:	58 f3       	brcs	.-42     	; 0x97de <FCloseShift+0x2ca>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    9808:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    980a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    980c:	81 e0       	ldi	r24, 0x01	; 1
    980e:	80 93 be 01 	sts	0x01BE, r24
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
			  }

			  system_beep(1);
			  TimDisplay=0;
    9812:	10 92 93 01 	sts	0x0193, r1
			  stCloseShift=csNoPumpFound;		     
    9816:	87 e0       	ldi	r24, 0x07	; 7
    9818:	80 93 4c 02 	sts	0x024C, r24
			  }			  
		  }
		  if (KeyPressed==_KEY_CANCEL){
    981c:	f7 ee       	ldi	r31, 0xE7	; 231
    981e:	df 16       	cp	r13, r31
    9820:	09 f0       	breq	.+2      	; 0x9824 <FCloseShift+0x310>
    9822:	9b c0       	rjmp	.+310    	; 0x995a <FCloseShift+0x446>
			  sprintf_P(lcdteks,PSTR("Cancel"));
    9824:	00 d0       	rcall	.+0      	; 0x9826 <FCloseShift+0x312>
    9826:	00 d0       	rcall	.+0      	; 0x9828 <FCloseShift+0x314>
    9828:	8e 01       	movw	r16, r28
    982a:	0f 5f       	subi	r16, 0xFF	; 255
    982c:	1f 4f       	sbci	r17, 0xFF	; 255
    982e:	ad b7       	in	r26, 0x3d	; 61
    9830:	be b7       	in	r27, 0x3e	; 62
    9832:	12 96       	adiw	r26, 0x02	; 2
    9834:	1c 93       	st	X, r17
    9836:	0e 93       	st	-X, r16
    9838:	11 97       	sbiw	r26, 0x01	; 1
    983a:	81 e0       	ldi	r24, 0x01	; 1
    983c:	97 e1       	ldi	r25, 0x17	; 23
    983e:	14 96       	adiw	r26, 0x04	; 4
    9840:	9c 93       	st	X, r25
    9842:	8e 93       	st	-X, r24
    9844:	13 97       	sbiw	r26, 0x03	; 3
    9846:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    984a:	0f 90       	pop	r0
    984c:	0f 90       	pop	r0
    984e:	0f 90       	pop	r0
    9850:	0f 90       	pop	r0
    9852:	83 e0       	ldi	r24, 0x03	; 3
    9854:	61 e0       	ldi	r22, 0x01	; 1
    9856:	a8 01       	movw	r20, r16
    9858:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    985c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    985e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    9860:	81 e0       	ldi	r24, 0x01	; 1
    9862:	80 93 be 01 	sts	0x01BE, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
			  sprintf_P(lcdteks,PSTR("Cancel"));
			  lcd_print(3,1,lcdteks);
			  system_beep(1);
			  TimDisplay=0;
    9866:	10 92 93 01 	sts	0x0193, r1
			  stCloseShift=csNoPumpFound;		     		  
    986a:	87 e0       	ldi	r24, 0x07	; 7
    986c:	6f c0       	rjmp	.+222    	; 0x994c <FCloseShift+0x438>
		  }
	      break;
     case csNoPumpFound:
	      if (TimDisplay>TIM_DISPLAY){
    986e:	80 91 93 01 	lds	r24, 0x0193
    9872:	8b 30       	cpi	r24, 0x0B	; 11
    9874:	08 f4       	brcc	.+2      	; 0x9878 <FCloseShift+0x364>
    9876:	71 c0       	rjmp	.+226    	; 0x995a <FCloseShift+0x446>
    9878:	68 c0       	rjmp	.+208    	; 0x994a <FCloseShift+0x436>
		      stCloseShift=csFinishCloseShift;
		  }	      
	      break;
     case csGenerateReport:
		  lcd_printf(1,1,PSTR("Printing Totalizer"));
    987a:	81 e0       	ldi	r24, 0x01	; 1
    987c:	61 e0       	ldi	r22, 0x01	; 1
    987e:	4e ee       	ldi	r20, 0xEE	; 238
    9880:	56 e1       	ldi	r21, 0x16	; 22
    9882:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          _datetime(0, strSystemDate, strSystemTime);
    9886:	00 ec       	ldi	r16, 0xC0	; 192
    9888:	13 e0       	ldi	r17, 0x03	; 3
    988a:	8a e7       	ldi	r24, 0x7A	; 122
    988c:	e8 2e       	mov	r14, r24
    988e:	88 e0       	ldi	r24, 0x08	; 8
    9890:	f8 2e       	mov	r15, r24
    9892:	80 e0       	ldi	r24, 0x00	; 0
    9894:	b8 01       	movw	r22, r16
    9896:	a7 01       	movw	r20, r14
    9898:	0e 94 cd a8 	call	0x1519a	; 0x1519a <_datetime>
		  sprintf_P(CurrentShiftDateTime,PSTR("%s %s"),strSystemDate,strSystemTime);
    989c:	ed b7       	in	r30, 0x3d	; 61
    989e:	fe b7       	in	r31, 0x3e	; 62
    98a0:	38 97       	sbiw	r30, 0x08	; 8
    98a2:	0f b6       	in	r0, 0x3f	; 63
    98a4:	f8 94       	cli
    98a6:	fe bf       	out	0x3e, r31	; 62
    98a8:	0f be       	out	0x3f, r0	; 63
    98aa:	ed bf       	out	0x3d, r30	; 61
    98ac:	31 96       	adiw	r30, 0x01	; 1
    98ae:	84 e9       	ldi	r24, 0x94	; 148
    98b0:	97 e0       	ldi	r25, 0x07	; 7
    98b2:	ad b7       	in	r26, 0x3d	; 61
    98b4:	be b7       	in	r27, 0x3e	; 62
    98b6:	12 96       	adiw	r26, 0x02	; 2
    98b8:	9c 93       	st	X, r25
    98ba:	8e 93       	st	-X, r24
    98bc:	11 97       	sbiw	r26, 0x01	; 1
    98be:	88 ee       	ldi	r24, 0xE8	; 232
    98c0:	96 e1       	ldi	r25, 0x16	; 22
    98c2:	93 83       	std	Z+3, r25	; 0x03
    98c4:	82 83       	std	Z+2, r24	; 0x02
    98c6:	15 83       	std	Z+5, r17	; 0x05
    98c8:	04 83       	std	Z+4, r16	; 0x04
    98ca:	f7 82       	std	Z+7, r15	; 0x07
    98cc:	e6 82       	std	Z+6, r14	; 0x06
    98ce:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  IsGenerateReport=True;
    98d2:	81 e0       	ldi	r24, 0x01	; 1
    98d4:	80 93 86 01 	sts	0x0186, r24
		  IsFinishPrintingTotalizer=False;
    98d8:	10 92 87 01 	sts	0x0187, r1
		  stCloseShift=csWaitPrintTotalizerComplete;
    98dc:	8a e0       	ldi	r24, 0x0A	; 10
    98de:	80 93 4c 02 	sts	0x024C, r24
    98e2:	80 e0       	ldi	r24, 0x00	; 0
    98e4:	ed b7       	in	r30, 0x3d	; 61
    98e6:	fe b7       	in	r31, 0x3e	; 62
    98e8:	38 96       	adiw	r30, 0x08	; 8
    98ea:	0f b6       	in	r0, 0x3f	; 63
    98ec:	f8 94       	cli
    98ee:	fe bf       	out	0x3e, r31	; 62
    98f0:	0f be       	out	0x3f, r0	; 63
    98f2:	ed bf       	out	0x3d, r30	; 61
    98f4:	33 c0       	rjmp	.+102    	; 0x995c <FCloseShift+0x448>
	      break;
     case csWaitTotalizerALL:
	      break;
     case csWaitPrintTotalizerComplete:
	      if (IsFinishPrintingTotalizer==True){
    98f6:	80 91 87 01 	lds	r24, 0x0187
    98fa:	81 30       	cpi	r24, 0x01	; 1
    98fc:	71 f5       	brne	.+92     	; 0x995a <FCloseShift+0x446>
		      IsFinishPrintingTotalizer=False;
    98fe:	10 92 87 01 	sts	0x0187, r1
		      stCloseShift=csDumpShift;
    9902:	8c e0       	ldi	r24, 0x0C	; 12
    9904:	23 c0       	rjmp	.+70     	; 0x994c <FCloseShift+0x438>
		  }
	      break;
     case csDumpShift://Increment CurrentShift save Current to Last
		  lcd_printf(1,1,PSTR("Saving ShiftData.. "));
    9906:	81 e0       	ldi	r24, 0x01	; 1
    9908:	61 e0       	ldi	r22, 0x01	; 1
    990a:	44 ed       	ldi	r20, 0xD4	; 212
    990c:	56 e1       	ldi	r21, 0x16	; 22
    990e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      if (ShiftType==CONTINUE_SHIFT)//Shift=Shift+1
    9912:	12 30       	cpi	r17, 0x02	; 2
    9914:	49 f4       	brne	.+18     	; 0x9928 <FCloseShift+0x414>
		      eeprom_write_byte(&DefShift,eeprom_read_byte(&DefShift)+1);	 
    9916:	84 e4       	ldi	r24, 0x44	; 68
    9918:	91 e0       	ldi	r25, 0x01	; 1
    991a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    991e:	68 2f       	mov	r22, r24
    9920:	6f 5f       	subi	r22, 0xFF	; 255
    9922:	84 e4       	ldi	r24, 0x44	; 68
    9924:	91 e0       	ldi	r25, 0x01	; 1
    9926:	05 c0       	rjmp	.+10     	; 0x9932 <FCloseShift+0x41e>
          else if (ShiftType==NEW_SHIFT)//Shift=1
    9928:	11 30       	cpi	r17, 0x01	; 1
    992a:	29 f4       	brne	.+10     	; 0x9936 <FCloseShift+0x422>
		      eeprom_write_byte(&DefShift,1);	 
    992c:	84 e4       	ldi	r24, 0x44	; 68
    992e:	91 e0       	ldi	r25, 0x01	; 1
    9930:	61 e0       	ldi	r22, 0x01	; 1
    9932:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

          SaveTotalizerCurrentToLast();
    9936:	0e 94 a4 28 	call	0x5148	; 0x5148 <SaveTotalizerCurrentToLast>
          eeprom_write_block((const void*) &CurrentShiftDateTime, (void*) &DefLastShiftDateTime,sizeof(DefLastShiftDateTime));
    993a:	84 e9       	ldi	r24, 0x94	; 148
    993c:	97 e0       	ldi	r25, 0x07	; 7
    993e:	69 e4       	ldi	r22, 0x49	; 73
    9940:	78 e0       	ldi	r23, 0x08	; 8
    9942:	44 e1       	ldi	r20, 0x14	; 20
    9944:	50 e0       	ldi	r21, 0x00	; 0
    9946:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		  stCloseShift=csFinishCloseShift;
    994a:	8b e0       	ldi	r24, 0x0B	; 11
    994c:	80 93 4c 02 	sts	0x024C, r24
    9950:	04 c0       	rjmp	.+8      	; 0x995a <FCloseShift+0x446>
	      break;
     case csFinishCloseShift:
          stCloseShift=csInitCloseShift;
    9952:	10 92 4c 02 	sts	0x024C, r1
    9956:	81 e0       	ldi	r24, 0x01	; 1
    9958:	01 c0       	rjmp	.+2      	; 0x995c <FCloseShift+0x448>
    995a:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 //uart_printf(0,1,PSTR("Close Shift"));	
   return Result;
}
    995c:	64 96       	adiw	r28, 0x14	; 20
    995e:	0f b6       	in	r0, 0x3f	; 63
    9960:	f8 94       	cli
    9962:	de bf       	out	0x3e, r29	; 62
    9964:	0f be       	out	0x3f, r0	; 63
    9966:	cd bf       	out	0x3d, r28	; 61
    9968:	cf 91       	pop	r28
    996a:	df 91       	pop	r29
    996c:	1f 91       	pop	r17
    996e:	0f 91       	pop	r16
    9970:	ff 90       	pop	r15
    9972:	ef 90       	pop	r14
    9974:	df 90       	pop	r13
    9976:	08 95       	ret

00009978 <_menu_host>:
			lcd_print(__x, __y, __buff);
		}
	}
}

void _menu_host(void){
    9978:	4f 92       	push	r4
    997a:	5f 92       	push	r5
    997c:	6f 92       	push	r6
    997e:	7f 92       	push	r7
    9980:	8f 92       	push	r8
    9982:	9f 92       	push	r9
    9984:	bf 92       	push	r11
    9986:	cf 92       	push	r12
    9988:	df 92       	push	r13
    998a:	ef 92       	push	r14
    998c:	ff 92       	push	r15
    998e:	0f 93       	push	r16
    9990:	1f 93       	push	r17
    9992:	df 93       	push	r29
    9994:	cf 93       	push	r28
    9996:	cd b7       	in	r28, 0x3d	; 61
    9998:	de b7       	in	r29, 0x3e	; 62
    999a:	6d 97       	sbiw	r28, 0x1d	; 29
    999c:	0f b6       	in	r0, 0x3f	; 63
    999e:	f8 94       	cli
    99a0:	de bf       	out	0x3e, r29	; 62
    99a2:	0f be       	out	0x3f, r0	; 63
    99a4:	cd bf       	out	0x3d, r28	; 61
	char 			__value[4];
	unsigned char	__i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];
	char TermID;

	__value[0] = eeprom_read_byte(&DefPrintMoney);
    99a6:	87 ec       	ldi	r24, 0xC7	; 199
    99a8:	93 e0       	ldi	r25, 0x03	; 3
    99aa:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    99ae:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefShowDateTime);
    99b0:	8b e3       	ldi	r24, 0x3B	; 59
    99b2:	90 e0       	ldi	r25, 0x00	; 0
    99b4:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    99b8:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefNotifScreen);
    99ba:	8c e3       	ldi	r24, 0x3C	; 60
    99bc:	90 e0       	ldi	r25, 0x00	; 0
    99be:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    99c2:	8b 83       	std	Y+3, r24	; 0x03
	TermID= eeprom_read_byte(&DefIFT_ID);
    99c4:	80 e0       	ldi	r24, 0x00	; 0
    99c6:	90 e0       	ldi	r25, 0x00	; 0
    99c8:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    99cc:	b8 2e       	mov	r11, r24


	lcd_clear();_delay_ms(10);
    99ce:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    99d2:	84 ec       	ldi	r24, 0xC4	; 196
    99d4:	99 e0       	ldi	r25, 0x09	; 9
    99d6:	01 97       	sbiw	r24, 0x01	; 1
    99d8:	f1 f7       	brne	.-4      	; 0x99d6 <_menu_host+0x5e>
	lcd_printf(1, 1, PSTR("1)Money :"));
    99da:	81 e0       	ldi	r24, 0x01	; 1
    99dc:	61 e0       	ldi	r22, 0x01	; 1
    99de:	4e eb       	ldi	r20, 0xBE	; 190
    99e0:	5c e0       	ldi	r21, 0x0C	; 12
    99e2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)D/T   :"));
    99e6:	82 e0       	ldi	r24, 0x02	; 2
    99e8:	61 e0       	ldi	r22, 0x01	; 1
    99ea:	44 eb       	ldi	r20, 0xB4	; 180
    99ec:	5c e0       	ldi	r21, 0x0C	; 12
    99ee:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    99f2:	83 e0       	ldi	r24, 0x03	; 3
    99f4:	61 e0       	ldi	r22, 0x01	; 1
    99f6:	4f e9       	ldi	r20, 0x9F	; 159
    99f8:	5c e0       	ldi	r21, 0x0C	; 12
    99fa:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    99fe:	00 d0       	rcall	.+0      	; 0x9a00 <_menu_host+0x88>
    9a00:	00 d0       	rcall	.+0      	; 0x9a02 <_menu_host+0x8a>
    9a02:	00 d0       	rcall	.+0      	; 0x9a04 <_menu_host+0x8c>
    9a04:	ed b7       	in	r30, 0x3d	; 61
    9a06:	fe b7       	in	r31, 0x3e	; 62
    9a08:	31 96       	adiw	r30, 0x01	; 1
    9a0a:	8e 01       	movw	r16, r28
    9a0c:	06 5f       	subi	r16, 0xF6	; 246
    9a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    9a10:	ad b7       	in	r26, 0x3d	; 61
    9a12:	be b7       	in	r27, 0x3e	; 62
    9a14:	12 96       	adiw	r26, 0x02	; 2
    9a16:	1c 93       	st	X, r17
    9a18:	0e 93       	st	-X, r16
    9a1a:	11 97       	sbiw	r26, 0x01	; 1
    9a1c:	82 e9       	ldi	r24, 0x92	; 146
    9a1e:	9c e0       	ldi	r25, 0x0C	; 12
    9a20:	93 83       	std	Z+3, r25	; 0x03
    9a22:	82 83       	std	Z+2, r24	; 0x02
    9a24:	b4 82       	std	Z+4, r11	; 0x04
    9a26:	15 82       	std	Z+5, r1	; 0x05
    9a28:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	lcd_print(4, 1,lcdteks);
    9a2c:	ed b7       	in	r30, 0x3d	; 61
    9a2e:	fe b7       	in	r31, 0x3e	; 62
    9a30:	36 96       	adiw	r30, 0x06	; 6
    9a32:	0f b6       	in	r0, 0x3f	; 63
    9a34:	f8 94       	cli
    9a36:	fe bf       	out	0x3e, r31	; 62
    9a38:	0f be       	out	0x3f, r0	; 63
    9a3a:	ed bf       	out	0x3d, r30	; 61
    9a3c:	84 e0       	ldi	r24, 0x04	; 4
    9a3e:	61 e0       	ldi	r22, 0x01	; 1
    9a40:	a8 01       	movw	r20, r16
    9a42:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	lcd_printf(4, 15, PSTR("#)Save"));
    9a46:	84 e0       	ldi	r24, 0x04	; 4
    9a48:	6f e0       	ldi	r22, 0x0F	; 15
    9a4a:	4b e8       	ldi	r20, 0x8B	; 139
    9a4c:	5c e0       	ldi	r21, 0x0C	; 12
    9a4e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    9a52:	e4 ed       	ldi	r30, 0xD4	; 212
    9a54:	ee 2e       	mov	r14, r30
    9a56:	e2 e0       	ldi	r30, 0x02	; 2
    9a58:	fe 2e       	mov	r15, r30
    9a5a:	6e 01       	movw	r12, r28
    9a5c:	08 94       	sec
    9a5e:	c1 1c       	adc	r12, r1
    9a60:	d1 1c       	adc	r13, r1

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
		__y = pgm_read_byte(&__hostloc[__i][1]);
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9a62:	75 e0       	ldi	r23, 0x05	; 5
    9a64:	87 2e       	mov	r8, r23
    9a66:	91 2c       	mov	r9, r1
    9a68:	8c 0e       	add	r8, r28
    9a6a:	9d 1e       	adc	r9, r29
    9a6c:	68 e8       	ldi	r22, 0x88	; 136
    9a6e:	66 2e       	mov	r6, r22
    9a70:	6c e0       	ldi	r22, 0x0C	; 12
    9a72:	76 2e       	mov	r7, r22
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
    9a74:	f7 01       	movw	r30, r14
    9a76:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__hostloc[__i][1]);
    9a78:	08 94       	sec
    9a7a:	e1 1c       	adc	r14, r1
    9a7c:	f1 1c       	adc	r15, r1
    9a7e:	f7 01       	movw	r30, r14
    9a80:	14 91       	lpm	r17, Z+
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9a82:	00 d0       	rcall	.+0      	; 0x9a84 <_menu_host+0x10c>
    9a84:	00 d0       	rcall	.+0      	; 0x9a86 <_menu_host+0x10e>
    9a86:	00 d0       	rcall	.+0      	; 0x9a88 <_menu_host+0x110>
    9a88:	ed b7       	in	r30, 0x3d	; 61
    9a8a:	fe b7       	in	r31, 0x3e	; 62
    9a8c:	31 96       	adiw	r30, 0x01	; 1
    9a8e:	ad b7       	in	r26, 0x3d	; 61
    9a90:	be b7       	in	r27, 0x3e	; 62
    9a92:	12 96       	adiw	r26, 0x02	; 2
    9a94:	9c 92       	st	X, r9
    9a96:	8e 92       	st	-X, r8
    9a98:	11 97       	sbiw	r26, 0x01	; 1
    9a9a:	73 82       	std	Z+3, r7	; 0x03
    9a9c:	62 82       	std	Z+2, r6	; 0x02
    9a9e:	d6 01       	movw	r26, r12
    9aa0:	8d 91       	ld	r24, X+
    9aa2:	6d 01       	movw	r12, r26
    9aa4:	84 83       	std	Z+4, r24	; 0x04
    9aa6:	15 82       	std	Z+5, r1	; 0x05
    9aa8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
    9aac:	ed b7       	in	r30, 0x3d	; 61
    9aae:	fe b7       	in	r31, 0x3e	; 62
    9ab0:	36 96       	adiw	r30, 0x06	; 6
    9ab2:	0f b6       	in	r0, 0x3f	; 63
    9ab4:	f8 94       	cli
    9ab6:	fe bf       	out	0x3e, r31	; 62
    9ab8:	0f be       	out	0x3f, r0	; 63
    9aba:	ed bf       	out	0x3d, r30	; 61
    9abc:	80 2f       	mov	r24, r16
    9abe:	61 2f       	mov	r22, r17
    9ac0:	a4 01       	movw	r20, r8
    9ac2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    9ac6:	08 94       	sec
    9ac8:	e1 1c       	adc	r14, r1
    9aca:	f1 1c       	adc	r15, r1
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
    9acc:	fa ed       	ldi	r31, 0xDA	; 218
    9ace:	ef 16       	cp	r14, r31
    9ad0:	f2 e0       	ldi	r31, 0x02	; 2
    9ad2:	ff 06       	cpc	r15, r31
    9ad4:	79 f6       	brne	.-98     	; 0x9a74 <_menu_host+0xfc>
			lcd_print(__x, __y, __buff);
		}else
		if (__num=='4'){
		    if (TermID<=99)TermID++;
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    9ad6:	5a e0       	ldi	r21, 0x0A	; 10
    9ad8:	85 2e       	mov	r8, r21
    9ada:	91 2c       	mov	r9, r1
    9adc:	8c 0e       	add	r8, r28
    9ade:	9d 1e       	adc	r9, r29
    9ae0:	48 e7       	ldi	r20, 0x78	; 120
    9ae2:	44 2e       	mov	r4, r20
    9ae4:	4c e0       	ldi	r20, 0x0C	; 12
    9ae6:	54 2e       	mov	r5, r20
			eeprom_write_byte(&DefNotifScreen, __value[2]);
			eeprom_write_byte(&DefIFT_ID,TermID);
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
			if(__value[__num - 0x31] == 1)
    9ae8:	6e 01       	movw	r12, r28
    9aea:	08 94       	sec
    9aec:	c1 1c       	adc	r12, r1
    9aee:	d1 1c       	adc	r13, r1
				__value[__num - 0x31] = 0;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9af0:	35 e0       	ldi	r19, 0x05	; 5
    9af2:	e3 2e       	mov	r14, r19
    9af4:	f1 2c       	mov	r15, r1
    9af6:	ec 0e       	add	r14, r28
    9af8:	fd 1e       	adc	r15, r29
    9afa:	25 e8       	ldi	r18, 0x85	; 133
    9afc:	62 2e       	mov	r6, r18
    9afe:	2c e0       	ldi	r18, 0x0C	; 12
    9b00:	72 2e       	mov	r7, r18
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
	}

	while(1){
		__key = _key_scan(1);
    9b02:	81 e0       	ldi	r24, 0x01	; 1
    9b04:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    9b08:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9b0a:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    9b0e:	98 2f       	mov	r25, r24

		if(__key == _KEY_CANCEL)
    9b10:	17 3e       	cpi	r17, 0xE7	; 231
    9b12:	09 f4       	brne	.+2      	; 0x9b16 <_menu_host+0x19e>
    9b14:	8a c0       	rjmp	.+276    	; 0x9c2a <_menu_host+0x2b2>
			return;
		if(__key==_KEY_ENTER){
    9b16:	17 3b       	cpi	r17, 0xB7	; 183
    9b18:	a9 f4       	brne	.+42     	; 0x9b44 <_menu_host+0x1cc>
			eeprom_write_byte(&DefPrintMoney, __value[0]);
    9b1a:	87 ec       	ldi	r24, 0xC7	; 199
    9b1c:	93 e0       	ldi	r25, 0x03	; 3
    9b1e:	69 81       	ldd	r22, Y+1	; 0x01
    9b20:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefShowDateTime, __value[1]);
    9b24:	8b e3       	ldi	r24, 0x3B	; 59
    9b26:	90 e0       	ldi	r25, 0x00	; 0
    9b28:	6a 81       	ldd	r22, Y+2	; 0x02
    9b2a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefNotifScreen, __value[2]);
    9b2e:	8c e3       	ldi	r24, 0x3C	; 60
    9b30:	90 e0       	ldi	r25, 0x00	; 0
    9b32:	6b 81       	ldd	r22, Y+3	; 0x03
    9b34:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefIFT_ID,TermID);
    9b38:	80 e0       	ldi	r24, 0x00	; 0
    9b3a:	90 e0       	ldi	r25, 0x00	; 0
    9b3c:	6b 2d       	mov	r22, r11
    9b3e:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
    9b42:	73 c0       	rjmp	.+230    	; 0x9c2a <_menu_host+0x2b2>
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
    9b44:	81 53       	subi	r24, 0x31	; 49
    9b46:	83 30       	cpi	r24, 0x03	; 3
    9b48:	08 f0       	brcs	.+2      	; 0x9b4c <_menu_host+0x1d4>
    9b4a:	3f c0       	rjmp	.+126    	; 0x9bca <_menu_host+0x252>
			if(__value[__num - 0x31] == 1)
    9b4c:	a9 2f       	mov	r26, r25
    9b4e:	b0 e0       	ldi	r27, 0x00	; 0
    9b50:	d1 97       	sbiw	r26, 0x31	; 49
    9b52:	f6 01       	movw	r30, r12
    9b54:	ea 0f       	add	r30, r26
    9b56:	fb 1f       	adc	r31, r27
    9b58:	80 81       	ld	r24, Z
    9b5a:	81 30       	cpi	r24, 0x01	; 1
    9b5c:	11 f4       	brne	.+4      	; 0x9b62 <_menu_host+0x1ea>
				__value[__num - 0x31] = 0;
    9b5e:	10 82       	st	Z, r1
    9b60:	02 c0       	rjmp	.+4      	; 0x9b66 <_menu_host+0x1ee>
			else
				__value[__num - 0x31]++;
    9b62:	8f 5f       	subi	r24, 0xFF	; 255
    9b64:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
    9b66:	29 2f       	mov	r18, r25
    9b68:	30 e0       	ldi	r19, 0x00	; 0
    9b6a:	21 53       	subi	r18, 0x31	; 49
    9b6c:	30 40       	sbci	r19, 0x00	; 0
    9b6e:	22 0f       	add	r18, r18
    9b70:	33 1f       	adc	r19, r19
    9b72:	c9 01       	movw	r24, r18
    9b74:	8c 52       	subi	r24, 0x2C	; 44
    9b76:	9d 4f       	sbci	r25, 0xFD	; 253
    9b78:	fc 01       	movw	r30, r24
    9b7a:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
    9b7c:	2b 52       	subi	r18, 0x2B	; 43
    9b7e:	3d 4f       	sbci	r19, 0xFD	; 253
    9b80:	f9 01       	movw	r30, r18
    9b82:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9b84:	00 d0       	rcall	.+0      	; 0x9b86 <_menu_host+0x20e>
    9b86:	00 d0       	rcall	.+0      	; 0x9b88 <_menu_host+0x210>
    9b88:	00 d0       	rcall	.+0      	; 0x9b8a <_menu_host+0x212>
    9b8a:	2d b7       	in	r18, 0x3d	; 61
    9b8c:	3e b7       	in	r19, 0x3e	; 62
    9b8e:	2f 5f       	subi	r18, 0xFF	; 255
    9b90:	3f 4f       	sbci	r19, 0xFF	; 255
    9b92:	ed b7       	in	r30, 0x3d	; 61
    9b94:	fe b7       	in	r31, 0x3e	; 62
    9b96:	f2 82       	std	Z+2, r15	; 0x02
    9b98:	e1 82       	std	Z+1, r14	; 0x01
    9b9a:	f9 01       	movw	r30, r18
    9b9c:	73 82       	std	Z+3, r7	; 0x03
    9b9e:	62 82       	std	Z+2, r6	; 0x02
    9ba0:	ac 0d       	add	r26, r12
    9ba2:	bd 1d       	adc	r27, r13
    9ba4:	8c 91       	ld	r24, X
    9ba6:	84 83       	std	Z+4, r24	; 0x04
    9ba8:	15 82       	std	Z+5, r1	; 0x05
    9baa:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			lcd_print(__x, __y, __buff);
    9bae:	8d b7       	in	r24, 0x3d	; 61
    9bb0:	9e b7       	in	r25, 0x3e	; 62
    9bb2:	06 96       	adiw	r24, 0x06	; 6
    9bb4:	0f b6       	in	r0, 0x3f	; 63
    9bb6:	f8 94       	cli
    9bb8:	9e bf       	out	0x3e, r25	; 62
    9bba:	0f be       	out	0x3f, r0	; 63
    9bbc:	8d bf       	out	0x3d, r24	; 61
    9bbe:	80 2f       	mov	r24, r16
    9bc0:	61 2f       	mov	r22, r17
    9bc2:	a7 01       	movw	r20, r14
    9bc4:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    9bc8:	9c cf       	rjmp	.-200    	; 0x9b02 <_menu_host+0x18a>
		}else
		if (__num=='4'){
    9bca:	94 33       	cpi	r25, 0x34	; 52
    9bcc:	09 f0       	breq	.+2      	; 0x9bd0 <_menu_host+0x258>
    9bce:	99 cf       	rjmp	.-206    	; 0x9b02 <_menu_host+0x18a>
		    if (TermID<=99)TermID++;
    9bd0:	93 e6       	ldi	r25, 0x63	; 99
    9bd2:	9b 15       	cp	r25, r11
    9bd4:	18 f4       	brcc	.+6      	; 0x9bdc <_menu_host+0x264>
    9bd6:	bb 24       	eor	r11, r11
    9bd8:	b3 94       	inc	r11
    9bda:	01 c0       	rjmp	.+2      	; 0x9bde <_menu_host+0x266>
    9bdc:	b3 94       	inc	r11
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    9bde:	00 d0       	rcall	.+0      	; 0x9be0 <_menu_host+0x268>
    9be0:	00 d0       	rcall	.+0      	; 0x9be2 <_menu_host+0x26a>
    9be2:	00 d0       	rcall	.+0      	; 0x9be4 <_menu_host+0x26c>
    9be4:	ed b7       	in	r30, 0x3d	; 61
    9be6:	fe b7       	in	r31, 0x3e	; 62
    9be8:	31 96       	adiw	r30, 0x01	; 1
    9bea:	ad b7       	in	r26, 0x3d	; 61
    9bec:	be b7       	in	r27, 0x3e	; 62
    9bee:	12 96       	adiw	r26, 0x02	; 2
    9bf0:	9c 92       	st	X, r9
    9bf2:	8e 92       	st	-X, r8
    9bf4:	11 97       	sbiw	r26, 0x01	; 1
    9bf6:	53 82       	std	Z+3, r5	; 0x03
    9bf8:	42 82       	std	Z+2, r4	; 0x02
    9bfa:	b4 82       	std	Z+4, r11	; 0x04
    9bfc:	15 82       	std	Z+5, r1	; 0x05
    9bfe:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 lcd_print(4, 1,lcdteks);lcd_printf(4, 15, PSTR("#)Save"));
    9c02:	ed b7       	in	r30, 0x3d	; 61
    9c04:	fe b7       	in	r31, 0x3e	; 62
    9c06:	36 96       	adiw	r30, 0x06	; 6
    9c08:	0f b6       	in	r0, 0x3f	; 63
    9c0a:	f8 94       	cli
    9c0c:	fe bf       	out	0x3e, r31	; 62
    9c0e:	0f be       	out	0x3f, r0	; 63
    9c10:	ed bf       	out	0x3d, r30	; 61
    9c12:	84 e0       	ldi	r24, 0x04	; 4
    9c14:	61 e0       	ldi	r22, 0x01	; 1
    9c16:	a4 01       	movw	r20, r8
    9c18:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    9c1c:	84 e0       	ldi	r24, 0x04	; 4
    9c1e:	6f e0       	ldi	r22, 0x0F	; 15
    9c20:	41 e7       	ldi	r20, 0x71	; 113
    9c22:	5c e0       	ldi	r21, 0x0C	; 12
    9c24:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    9c28:	6c cf       	rjmp	.-296    	; 0x9b02 <_menu_host+0x18a>
		 
		}

	}
}
    9c2a:	6d 96       	adiw	r28, 0x1d	; 29
    9c2c:	0f b6       	in	r0, 0x3f	; 63
    9c2e:	f8 94       	cli
    9c30:	de bf       	out	0x3e, r29	; 62
    9c32:	0f be       	out	0x3f, r0	; 63
    9c34:	cd bf       	out	0x3d, r28	; 61
    9c36:	cf 91       	pop	r28
    9c38:	df 91       	pop	r29
    9c3a:	1f 91       	pop	r17
    9c3c:	0f 91       	pop	r16
    9c3e:	ff 90       	pop	r15
    9c40:	ef 90       	pop	r14
    9c42:	df 90       	pop	r13
    9c44:	cf 90       	pop	r12
    9c46:	bf 90       	pop	r11
    9c48:	9f 90       	pop	r9
    9c4a:	8f 90       	pop	r8
    9c4c:	7f 90       	pop	r7
    9c4e:	6f 90       	pop	r6
    9c50:	5f 90       	pop	r5
    9c52:	4f 90       	pop	r4
    9c54:	08 95       	ret

00009c56 <FSettingHost>:
char FSettingPrinter(){
     _menu_printer();
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    9c56:	0e 94 bc 4c 	call	0x9978	; 0x9978 <_menu_host>
	 return MENU_DONE;
}
    9c5a:	81 e0       	ldi	r24, 0x01	; 1
    9c5c:	08 95       	ret

00009c5e <_menu_printer>:
}

//*************************************************************************
//  ngeset printer

void _menu_printer(void){
    9c5e:	2f 92       	push	r2
    9c60:	3f 92       	push	r3
    9c62:	4f 92       	push	r4
    9c64:	5f 92       	push	r5
    9c66:	6f 92       	push	r6
    9c68:	7f 92       	push	r7
    9c6a:	8f 92       	push	r8
    9c6c:	9f 92       	push	r9
    9c6e:	af 92       	push	r10
    9c70:	bf 92       	push	r11
    9c72:	cf 92       	push	r12
    9c74:	df 92       	push	r13
    9c76:	ef 92       	push	r14
    9c78:	ff 92       	push	r15
    9c7a:	0f 93       	push	r16
    9c7c:	1f 93       	push	r17
    9c7e:	df 93       	push	r29
    9c80:	cf 93       	push	r28
    9c82:	cd b7       	in	r28, 0x3d	; 61
    9c84:	de b7       	in	r29, 0x3e	; 62
    9c86:	2c 97       	sbiw	r28, 0x0c	; 12
    9c88:	0f b6       	in	r0, 0x3f	; 63
    9c8a:	f8 94       	cli
    9c8c:	de bf       	out	0x3e, r29	; 62
    9c8e:	0f be       	out	0x3f, r0	; 63
    9c90:	cd bf       	out	0x3d, r28	; 61
	char 			__value[6];
	char	__i, __x, __y, __lmt, __start, __key, __num, __buff[6];
//	char lcdteks[20];

	__value[0] = eeprom_read_byte(&DefPrinterType);
    9c92:	80 e3       	ldi	r24, 0x30	; 48
    9c94:	90 e0       	ldi	r25, 0x00	; 0
    9c96:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9c9a:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefPrintSize);
    9c9c:	85 e3       	ldi	r24, 0x35	; 53
    9c9e:	90 e0       	ldi	r25, 0x00	; 0
    9ca0:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9ca4:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefPrintLogo);
    9ca6:	84 e3       	ldi	r24, 0x34	; 52
    9ca8:	90 e0       	ldi	r25, 0x00	; 0
    9caa:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9cae:	8b 83       	std	Y+3, r24	; 0x03
	__value[3] = eeprom_read_byte(&DefPrintAutoCut);
    9cb0:	83 e3       	ldi	r24, 0x33	; 51
    9cb2:	90 e0       	ldi	r25, 0x00	; 0
    9cb4:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9cb8:	8c 83       	std	Y+4, r24	; 0x04
	__value[4] = eeprom_read_byte(&DefPrintScrollEnd);
    9cba:	81 e3       	ldi	r24, 0x31	; 49
    9cbc:	90 e0       	ldi	r25, 0x00	; 0
    9cbe:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9cc2:	8d 83       	std	Y+5, r24	; 0x05
	__value[5] = eeprom_read_byte(&DefPrintScrollSpace);
    9cc4:	82 e3       	ldi	r24, 0x32	; 50
    9cc6:	90 e0       	ldi	r25, 0x00	; 0
    9cc8:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    9ccc:	8e 83       	std	Y+6, r24	; 0x06

	lcd_clear();
    9cce:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
    9cd2:	81 e0       	ldi	r24, 0x01	; 1
    9cd4:	61 e0       	ldi	r22, 0x01	; 1
    9cd6:	4b e0       	ldi	r20, 0x0B	; 11
    9cd8:	5d e0       	ldi	r21, 0x0D	; 13
    9cda:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
    9cde:	82 e0       	ldi	r24, 0x02	; 2
    9ce0:	61 e0       	ldi	r22, 0x01	; 1
    9ce2:	48 ef       	ldi	r20, 0xF8	; 248
    9ce4:	5c e0       	ldi	r21, 0x0C	; 12
    9ce6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
    9cea:	83 e0       	ldi	r24, 0x03	; 3
    9cec:	61 e0       	ldi	r22, 0x01	; 1
    9cee:	48 ee       	ldi	r20, 0xE8	; 232
    9cf0:	5c e0       	ldi	r21, 0x0C	; 12
    9cf2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));
    9cf6:	84 e0       	ldi	r24, 0x04	; 4
    9cf8:	61 e0       	ldi	r22, 0x01	; 1
    9cfa:	48 ed       	ldi	r20, 0xD8	; 216
    9cfc:	5c e0       	ldi	r21, 0x0C	; 12
    9cfe:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    9d02:	0c eb       	ldi	r16, 0xBC	; 188
    9d04:	12 e0       	ldi	r17, 0x02	; 2
    9d06:	4e 01       	movw	r8, r28
    9d08:	08 94       	sec
    9d0a:	81 1c       	adc	r8, r1
    9d0c:	91 1c       	adc	r9, r1
    9d0e:	74 01       	movw	r14, r8

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
		__y = pgm_read_byte(&__prntloc[__i][1]);
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9d10:	27 e0       	ldi	r18, 0x07	; 7
    9d12:	c2 2e       	mov	r12, r18
    9d14:	d1 2c       	mov	r13, r1
    9d16:	cc 0e       	add	r12, r28
    9d18:	dd 1e       	adc	r13, r29
    9d1a:	95 ed       	ldi	r25, 0xD5	; 213
    9d1c:	29 2e       	mov	r2, r25
    9d1e:	9c e0       	ldi	r25, 0x0C	; 12
    9d20:	39 2e       	mov	r3, r25
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9d22:	80 ed       	ldi	r24, 0xD0	; 208
    9d24:	48 2e       	mov	r4, r24
    9d26:	8c e0       	ldi	r24, 0x0C	; 12
    9d28:	58 2e       	mov	r5, r24
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
    9d2a:	f8 01       	movw	r30, r16
    9d2c:	74 90       	lpm	r7, Z+
		__y = pgm_read_byte(&__prntloc[__i][1]);
    9d2e:	0f 5f       	subi	r16, 0xFF	; 255
    9d30:	1f 4f       	sbci	r17, 0xFF	; 255
    9d32:	f8 01       	movw	r30, r16
    9d34:	a4 90       	lpm	r10, Z+
    9d36:	01 50       	subi	r16, 0x01	; 1
    9d38:	10 40       	sbci	r17, 0x00	; 0
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9d3a:	d7 01       	movw	r26, r14
    9d3c:	bc 90       	ld	r11, X
    9d3e:	00 d0       	rcall	.+0      	; 0x9d40 <_menu_printer+0xe2>
    9d40:	00 d0       	rcall	.+0      	; 0x9d42 <_menu_printer+0xe4>
    9d42:	00 d0       	rcall	.+0      	; 0x9d44 <_menu_printer+0xe6>
    9d44:	ed b7       	in	r30, 0x3d	; 61
    9d46:	fe b7       	in	r31, 0x3e	; 62
    9d48:	31 96       	adiw	r30, 0x01	; 1
    9d4a:	ad b7       	in	r26, 0x3d	; 61
    9d4c:	be b7       	in	r27, 0x3e	; 62
    9d4e:	12 96       	adiw	r26, 0x02	; 2
    9d50:	dc 92       	st	X, r13
    9d52:	ce 92       	st	-X, r12
    9d54:	11 97       	sbiw	r26, 0x01	; 1
    9d56:	33 82       	std	Z+3, r3	; 0x03
    9d58:	22 82       	std	Z+2, r2	; 0x02
    9d5a:	b4 82       	std	Z+4, r11	; 0x04
    9d5c:	15 82       	std	Z+5, r1	; 0x05
    9d5e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9d62:	8e 2d       	mov	r24, r14
    9d64:	88 19       	sub	r24, r8
    9d66:	ed b7       	in	r30, 0x3d	; 61
    9d68:	fe b7       	in	r31, 0x3e	; 62
    9d6a:	36 96       	adiw	r30, 0x06	; 6
    9d6c:	0f b6       	in	r0, 0x3f	; 63
    9d6e:	f8 94       	cli
    9d70:	fe bf       	out	0x3e, r31	; 62
    9d72:	0f be       	out	0x3f, r0	; 63
    9d74:	ed bf       	out	0x3d, r30	; 61
    9d76:	84 30       	cpi	r24, 0x04	; 4
    9d78:	d1 f4       	brne	.+52     	; 0x9dae <_menu_printer+0x150>
    9d7a:	00 d0       	rcall	.+0      	; 0x9d7c <_menu_printer+0x11e>
    9d7c:	00 d0       	rcall	.+0      	; 0x9d7e <_menu_printer+0x120>
    9d7e:	00 d0       	rcall	.+0      	; 0x9d80 <_menu_printer+0x122>
    9d80:	ed b7       	in	r30, 0x3d	; 61
    9d82:	fe b7       	in	r31, 0x3e	; 62
    9d84:	31 96       	adiw	r30, 0x01	; 1
    9d86:	ad b7       	in	r26, 0x3d	; 61
    9d88:	be b7       	in	r27, 0x3e	; 62
    9d8a:	12 96       	adiw	r26, 0x02	; 2
    9d8c:	dc 92       	st	X, r13
    9d8e:	ce 92       	st	-X, r12
    9d90:	11 97       	sbiw	r26, 0x01	; 1
    9d92:	53 82       	std	Z+3, r5	; 0x03
    9d94:	42 82       	std	Z+2, r4	; 0x02
    9d96:	b4 82       	std	Z+4, r11	; 0x04
    9d98:	15 82       	std	Z+5, r1	; 0x05
    9d9a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    9d9e:	ed b7       	in	r30, 0x3d	; 61
    9da0:	fe b7       	in	r31, 0x3e	; 62
    9da2:	36 96       	adiw	r30, 0x06	; 6
    9da4:	0f b6       	in	r0, 0x3f	; 63
    9da6:	f8 94       	cli
    9da8:	fe bf       	out	0x3e, r31	; 62
    9daa:	0f be       	out	0x3f, r0	; 63
    9dac:	ed bf       	out	0x3d, r30	; 61
		//_f_punctuation(__buff, 0, 2, 0);
		lcd_print(__x, __y, __buff);
    9dae:	87 2d       	mov	r24, r7
    9db0:	6a 2d       	mov	r22, r10
    9db2:	a6 01       	movw	r20, r12
    9db4:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    9db8:	0e 5f       	subi	r16, 0xFE	; 254
    9dba:	1f 4f       	sbci	r17, 0xFF	; 255
    9dbc:	08 94       	sec
    9dbe:	e1 1c       	adc	r14, r1
    9dc0:	f1 1c       	adc	r15, r1
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
    9dc2:	f2 e0       	ldi	r31, 0x02	; 2
    9dc4:	08 3c       	cpi	r16, 0xC8	; 200
    9dc6:	1f 07       	cpc	r17, r31
    9dc8:	09 f0       	breq	.+2      	; 0x9dcc <_menu_printer+0x16e>
    9dca:	af cf       	rjmp	.-162    	; 0x9d2a <_menu_printer+0xcc>

		}
		if(__num >= 0x31 && __num <= 0x36){
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
			if(__value[__num - 0x31] == __lmt)
    9dcc:	2e 01       	movw	r4, r28
    9dce:	08 94       	sec
    9dd0:	41 1c       	adc	r4, r1
    9dd2:	51 1c       	adc	r5, r1
				__value[__num - 0x31] = __start;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9dd4:	17 e0       	ldi	r17, 0x07	; 7
    9dd6:	e1 2e       	mov	r14, r17
    9dd8:	f1 2c       	mov	r15, r1
    9dda:	ec 0e       	add	r14, r28
    9ddc:	fd 1e       	adc	r15, r29
    9dde:	bd ec       	ldi	r27, 0xCD	; 205
    9de0:	6b 2e       	mov	r6, r27
    9de2:	bc e0       	ldi	r27, 0x0C	; 12
    9de4:	7b 2e       	mov	r7, r27
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9de6:	a8 ec       	ldi	r26, 0xC8	; 200
    9de8:	2a 2e       	mov	r2, r26
    9dea:	ac e0       	ldi	r26, 0x0C	; 12
    9dec:	3a 2e       	mov	r3, r26
		__key = _key_scan(1);
		__num = _key_btn(__key);
		if(__key == _KEY_CANCEL)
			return;
		if(__key==_KEY_ENTER){
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9dee:	89 80       	ldd	r8, Y+1	; 0x01
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9df0:	9a 80       	ldd	r9, Y+2	; 0x02
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9df2:	ab 80       	ldd	r10, Y+3	; 0x03
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9df4:	bc 80       	ldd	r11, Y+4	; 0x04
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9df6:	cd 80       	ldd	r12, Y+5	; 0x05
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9df8:	de 80       	ldd	r13, Y+6	; 0x06
	}
    //sprintf_P(lcdteks,PSTR("6)Space :%.2d"),__value[5]);
	//lcd_print(2,10,lcdteks);

	while(1){	
		__key = _key_scan(1);
    9dfa:	81 e0       	ldi	r24, 0x01	; 1
    9dfc:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    9e00:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9e02:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    9e06:	08 2f       	mov	r16, r24
		if(__key == _KEY_CANCEL)
    9e08:	17 3e       	cpi	r17, 0xE7	; 231
    9e0a:	09 f4       	brne	.+2      	; 0x9e0e <_menu_printer+0x1b0>
    9e0c:	85 c0       	rjmp	.+266    	; 0x9f18 <_menu_printer+0x2ba>
			return;
		if(__key==_KEY_ENTER){
    9e0e:	17 3b       	cpi	r17, 0xB7	; 183
    9e10:	f1 f4       	brne	.+60     	; 0x9e4e <_menu_printer+0x1f0>
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9e12:	80 e3       	ldi	r24, 0x30	; 48
    9e14:	90 e0       	ldi	r25, 0x00	; 0
    9e16:	68 2d       	mov	r22, r8
    9e18:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9e1c:	85 e3       	ldi	r24, 0x35	; 53
    9e1e:	90 e0       	ldi	r25, 0x00	; 0
    9e20:	69 2d       	mov	r22, r9
    9e22:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9e26:	84 e3       	ldi	r24, 0x34	; 52
    9e28:	90 e0       	ldi	r25, 0x00	; 0
    9e2a:	6a 2d       	mov	r22, r10
    9e2c:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9e30:	83 e3       	ldi	r24, 0x33	; 51
    9e32:	90 e0       	ldi	r25, 0x00	; 0
    9e34:	6b 2d       	mov	r22, r11
    9e36:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9e3a:	81 e3       	ldi	r24, 0x31	; 49
    9e3c:	90 e0       	ldi	r25, 0x00	; 0
    9e3e:	6c 2d       	mov	r22, r12
    9e40:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9e44:	82 e3       	ldi	r24, 0x32	; 50
    9e46:	90 e0       	ldi	r25, 0x00	; 0
    9e48:	6d 2d       	mov	r22, r13
    9e4a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

		}
		if(__num >= 0x31 && __num <= 0x36){
    9e4e:	80 2f       	mov	r24, r16
    9e50:	81 53       	subi	r24, 0x31	; 49
    9e52:	86 30       	cpi	r24, 0x06	; 6
    9e54:	90 f6       	brcc	.-92     	; 0x9dfa <_menu_printer+0x19c>
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
    9e56:	a0 2f       	mov	r26, r16
    9e58:	b0 e0       	ldi	r27, 0x00	; 0
    9e5a:	d1 97       	sbiw	r26, 0x31	; 49
    9e5c:	fd 01       	movw	r30, r26
    9e5e:	e8 53       	subi	r30, 0x38	; 56
    9e60:	fd 4f       	sbci	r31, 0xFD	; 253
    9e62:	24 91       	lpm	r18, Z+
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
    9e64:	fd 01       	movw	r30, r26
    9e66:	e2 53       	subi	r30, 0x32	; 50
    9e68:	fd 4f       	sbci	r31, 0xFD	; 253
    9e6a:	94 91       	lpm	r25, Z+
			if(__value[__num - 0x31] == __lmt)
    9e6c:	f2 01       	movw	r30, r4
    9e6e:	ea 0f       	add	r30, r26
    9e70:	fb 1f       	adc	r31, r27
    9e72:	80 81       	ld	r24, Z
    9e74:	82 17       	cp	r24, r18
    9e76:	11 f4       	brne	.+4      	; 0x9e7c <_menu_printer+0x21e>
				__value[__num - 0x31] = __start;
    9e78:	90 83       	st	Z, r25
    9e7a:	02 c0       	rjmp	.+4      	; 0x9e80 <_menu_printer+0x222>
			else
				__value[__num - 0x31]++;
    9e7c:	8f 5f       	subi	r24, 0xFF	; 255
    9e7e:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
    9e80:	9d 01       	movw	r18, r26
    9e82:	22 0f       	add	r18, r18
    9e84:	33 1f       	adc	r19, r19
    9e86:	c9 01       	movw	r24, r18
    9e88:	84 54       	subi	r24, 0x44	; 68
    9e8a:	9d 4f       	sbci	r25, 0xFD	; 253
    9e8c:	fc 01       	movw	r30, r24
    9e8e:	c4 90       	lpm	r12, Z+
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
    9e90:	23 54       	subi	r18, 0x43	; 67
    9e92:	3d 4f       	sbci	r19, 0xFD	; 253
    9e94:	f9 01       	movw	r30, r18
    9e96:	d4 90       	lpm	r13, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9e98:	a4 0d       	add	r26, r4
    9e9a:	b5 1d       	adc	r27, r5
    9e9c:	1c 91       	ld	r17, X
    9e9e:	00 d0       	rcall	.+0      	; 0x9ea0 <_menu_printer+0x242>
    9ea0:	00 d0       	rcall	.+0      	; 0x9ea2 <_menu_printer+0x244>
    9ea2:	00 d0       	rcall	.+0      	; 0x9ea4 <_menu_printer+0x246>
    9ea4:	ed b7       	in	r30, 0x3d	; 61
    9ea6:	fe b7       	in	r31, 0x3e	; 62
    9ea8:	31 96       	adiw	r30, 0x01	; 1
    9eaa:	ad b7       	in	r26, 0x3d	; 61
    9eac:	be b7       	in	r27, 0x3e	; 62
    9eae:	12 96       	adiw	r26, 0x02	; 2
    9eb0:	fc 92       	st	X, r15
    9eb2:	ee 92       	st	-X, r14
    9eb4:	11 97       	sbiw	r26, 0x01	; 1
    9eb6:	73 82       	std	Z+3, r7	; 0x03
    9eb8:	62 82       	std	Z+2, r6	; 0x02
    9eba:	14 83       	std	Z+4, r17	; 0x04
    9ebc:	15 82       	std	Z+5, r1	; 0x05
    9ebe:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
    9ec2:	05 53       	subi	r16, 0x35	; 53
    9ec4:	ed b7       	in	r30, 0x3d	; 61
    9ec6:	fe b7       	in	r31, 0x3e	; 62
    9ec8:	36 96       	adiw	r30, 0x06	; 6
    9eca:	0f b6       	in	r0, 0x3f	; 63
    9ecc:	f8 94       	cli
    9ece:	fe bf       	out	0x3e, r31	; 62
    9ed0:	0f be       	out	0x3f, r0	; 63
    9ed2:	ed bf       	out	0x3d, r30	; 61
    9ed4:	02 30       	cpi	r16, 0x02	; 2
    9ed6:	d0 f4       	brcc	.+52     	; 0x9f0c <_menu_printer+0x2ae>
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9ed8:	00 d0       	rcall	.+0      	; 0x9eda <_menu_printer+0x27c>
    9eda:	00 d0       	rcall	.+0      	; 0x9edc <_menu_printer+0x27e>
    9edc:	00 d0       	rcall	.+0      	; 0x9ede <_menu_printer+0x280>
    9ede:	ed b7       	in	r30, 0x3d	; 61
    9ee0:	fe b7       	in	r31, 0x3e	; 62
    9ee2:	31 96       	adiw	r30, 0x01	; 1
    9ee4:	ad b7       	in	r26, 0x3d	; 61
    9ee6:	be b7       	in	r27, 0x3e	; 62
    9ee8:	12 96       	adiw	r26, 0x02	; 2
    9eea:	fc 92       	st	X, r15
    9eec:	ee 92       	st	-X, r14
    9eee:	11 97       	sbiw	r26, 0x01	; 1
    9ef0:	33 82       	std	Z+3, r3	; 0x03
    9ef2:	22 82       	std	Z+2, r2	; 0x02
    9ef4:	14 83       	std	Z+4, r17	; 0x04
    9ef6:	15 82       	std	Z+5, r1	; 0x05
    9ef8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    9efc:	ed b7       	in	r30, 0x3d	; 61
    9efe:	fe b7       	in	r31, 0x3e	; 62
    9f00:	36 96       	adiw	r30, 0x06	; 6
    9f02:	0f b6       	in	r0, 0x3f	; 63
    9f04:	f8 94       	cli
    9f06:	fe bf       	out	0x3e, r31	; 62
    9f08:	0f be       	out	0x3f, r0	; 63
    9f0a:	ed bf       	out	0x3d, r30	; 61
				//_f_punctuation(__buff, 0, 2, 0);

			lcd_print(__x, __y, __buff);
    9f0c:	8c 2d       	mov	r24, r12
    9f0e:	6d 2d       	mov	r22, r13
    9f10:	a7 01       	movw	r20, r14
    9f12:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    9f16:	6b cf       	rjmp	.-298    	; 0x9dee <_menu_printer+0x190>
		}
	}
}
    9f18:	2c 96       	adiw	r28, 0x0c	; 12
    9f1a:	0f b6       	in	r0, 0x3f	; 63
    9f1c:	f8 94       	cli
    9f1e:	de bf       	out	0x3e, r29	; 62
    9f20:	0f be       	out	0x3f, r0	; 63
    9f22:	cd bf       	out	0x3d, r28	; 61
    9f24:	cf 91       	pop	r28
    9f26:	df 91       	pop	r29
    9f28:	1f 91       	pop	r17
    9f2a:	0f 91       	pop	r16
    9f2c:	ff 90       	pop	r15
    9f2e:	ef 90       	pop	r14
    9f30:	df 90       	pop	r13
    9f32:	cf 90       	pop	r12
    9f34:	bf 90       	pop	r11
    9f36:	af 90       	pop	r10
    9f38:	9f 90       	pop	r9
    9f3a:	8f 90       	pop	r8
    9f3c:	7f 90       	pop	r7
    9f3e:	6f 90       	pop	r6
    9f40:	5f 90       	pop	r5
    9f42:	4f 90       	pop	r4
    9f44:	3f 90       	pop	r3
    9f46:	2f 90       	pop	r2
    9f48:	08 95       	ret

00009f4a <FSettingPrinter>:
char FSettingDatetime(){
     _menu_datetime();
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    9f4a:	0e 94 2f 4e 	call	0x9c5e	; 0x9c5e <_menu_printer>
	 return MENU_DONE;
}
    9f4e:	81 e0       	ldi	r24, 0x01	; 1
    9f50:	08 95       	ret

00009f52 <_menu_pumpprodinput>:
				*/
		}
	}
}

void _menu_pumpprodinput(unsigned char __select){
    9f52:	6f 92       	push	r6
    9f54:	7f 92       	push	r7
    9f56:	8f 92       	push	r8
    9f58:	9f 92       	push	r9
    9f5a:	af 92       	push	r10
    9f5c:	bf 92       	push	r11
    9f5e:	cf 92       	push	r12
    9f60:	df 92       	push	r13
    9f62:	ef 92       	push	r14
    9f64:	ff 92       	push	r15
    9f66:	0f 93       	push	r16
    9f68:	1f 93       	push	r17
    9f6a:	df 93       	push	r29
    9f6c:	cf 93       	push	r28
    9f6e:	cd b7       	in	r28, 0x3d	; 61
    9f70:	de b7       	in	r29, 0x3e	; 62
    9f72:	a7 97       	sbiw	r28, 0x27	; 39
    9f74:	0f b6       	in	r0, 0x3f	; 63
    9f76:	f8 94       	cli
    9f78:	de bf       	out	0x3e, r29	; 62
    9f7a:	0f be       	out	0x3f, r0	; 63
    9f7c:	cd bf       	out	0x3d, r28	; 61
    9f7e:	b8 2e       	mov	r11, r24
	char 			__pump_prod[6],__pump_id[8];
	unsigned char	i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];

	eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    9f80:	8e 01       	movw	r16, r28
    9f82:	04 5f       	subi	r16, 0xF4	; 244
    9f84:	1f 4f       	sbci	r17, 0xFF	; 255
    9f86:	c8 01       	movw	r24, r16
    9f88:	6a e4       	ldi	r22, 0x4A	; 74
    9f8a:	70 e0       	ldi	r23, 0x00	; 0
    9f8c:	48 e0       	ldi	r20, 0x08	; 8
    9f8e:	50 e0       	ldi	r21, 0x00	; 0
    9f90:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	eeprom_read_block((void*) &__pump_prod, (const void*) &DefNozzleMap[__select], 6);
    9f94:	86 e0       	ldi	r24, 0x06	; 6
    9f96:	b8 9e       	mul	r11, r24
    9f98:	40 01       	movw	r8, r0
    9f9a:	11 24       	eor	r1, r1
    9f9c:	8a e5       	ldi	r24, 0x5A	; 90
    9f9e:	90 e0       	ldi	r25, 0x00	; 0
    9fa0:	88 0e       	add	r8, r24
    9fa2:	99 1e       	adc	r9, r25
    9fa4:	b6 e0       	ldi	r27, 0x06	; 6
    9fa6:	cb 2e       	mov	r12, r27
    9fa8:	d1 2c       	mov	r13, r1
    9faa:	cc 0e       	add	r12, r28
    9fac:	dd 1e       	adc	r13, r29
    9fae:	c6 01       	movw	r24, r12
    9fb0:	b4 01       	movw	r22, r8
    9fb2:	46 e0       	ldi	r20, 0x06	; 6
    9fb4:	50 e0       	ldi	r21, 0x00	; 0
    9fb6:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>

	lcd_clear();_delay_ms(10);
    9fba:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    9fbe:	84 ec       	ldi	r24, 0xC4	; 196
    9fc0:	99 e0       	ldi	r25, 0x09	; 9
    9fc2:	01 97       	sbiw	r24, 0x01	; 1
    9fc4:	f1 f7       	brne	.-4      	; 0x9fc2 <_menu_pumpprodinput+0x70>
    sprintf_P(lcdteks, PSTR("Product FIP%.2d"),__pump_id[__select]);
    9fc6:	00 d0       	rcall	.+0      	; 0x9fc8 <_menu_pumpprodinput+0x76>
    9fc8:	00 d0       	rcall	.+0      	; 0x9fca <_menu_pumpprodinput+0x78>
    9fca:	00 d0       	rcall	.+0      	; 0x9fcc <_menu_pumpprodinput+0x7a>
    9fcc:	ed b7       	in	r30, 0x3d	; 61
    9fce:	fe b7       	in	r31, 0x3e	; 62
    9fd0:	31 96       	adiw	r30, 0x01	; 1
    9fd2:	a4 e1       	ldi	r26, 0x14	; 20
    9fd4:	ea 2e       	mov	r14, r26
    9fd6:	f1 2c       	mov	r15, r1
    9fd8:	ec 0e       	add	r14, r28
    9fda:	fd 1e       	adc	r15, r29
    9fdc:	ad b7       	in	r26, 0x3d	; 61
    9fde:	be b7       	in	r27, 0x3e	; 62
    9fe0:	12 96       	adiw	r26, 0x02	; 2
    9fe2:	fc 92       	st	X, r15
    9fe4:	ee 92       	st	-X, r14
    9fe6:	11 97       	sbiw	r26, 0x01	; 1
    9fe8:	86 e8       	ldi	r24, 0x86	; 134
    9fea:	9d e0       	ldi	r25, 0x0D	; 13
    9fec:	93 83       	std	Z+3, r25	; 0x03
    9fee:	82 83       	std	Z+2, r24	; 0x02
    9ff0:	0b 0d       	add	r16, r11
    9ff2:	11 1d       	adc	r17, r1
    9ff4:	d8 01       	movw	r26, r16
    9ff6:	8c 91       	ld	r24, X
    9ff8:	84 83       	std	Z+4, r24	; 0x04
    9ffa:	15 82       	std	Z+5, r1	; 0x05
    9ffc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    lcd_print(1, 1,lcdteks);
    a000:	ed b7       	in	r30, 0x3d	; 61
    a002:	fe b7       	in	r31, 0x3e	; 62
    a004:	36 96       	adiw	r30, 0x06	; 6
    a006:	0f b6       	in	r0, 0x3f	; 63
    a008:	f8 94       	cli
    a00a:	fe bf       	out	0x3e, r31	; 62
    a00c:	0f be       	out	0x3f, r0	; 63
    a00e:	ed bf       	out	0x3d, r30	; 61
    a010:	81 e0       	ldi	r24, 0x01	; 1
    a012:	61 e0       	ldi	r22, 0x01	; 1
    a014:	a7 01       	movw	r20, r14
    a016:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
    a01a:	82 e0       	ldi	r24, 0x02	; 2
    a01c:	61 e0       	ldi	r22, 0x01	; 1
    a01e:	42 e7       	ldi	r20, 0x72	; 114
    a020:	5d e0       	ldi	r21, 0x0D	; 13
    a022:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
    a026:	83 e0       	ldi	r24, 0x03	; 3
    a028:	61 e0       	ldi	r22, 0x01	; 1
    a02a:	4e e5       	ldi	r20, 0x5E	; 94
    a02c:	5d e0       	ldi	r21, 0x0D	; 13
    a02e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));
    a032:	84 e0       	ldi	r24, 0x04	; 4
    a034:	61 e0       	ldi	r22, 0x01	; 1
    a036:	49 e4       	ldi	r20, 0x49	; 73
    a038:	5d e0       	ldi	r21, 0x0D	; 13
    a03a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    a03e:	e0 eb       	ldi	r30, 0xB0	; 176
    a040:	ee 2e       	mov	r14, r30
    a042:	e2 e0       	ldi	r30, 0x02	; 2
    a044:	fe 2e       	mov	r15, r30

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
		__y = pgm_read_byte(&__prodloc[i][1]);

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    a046:	5e 01       	movw	r10, r28
    a048:	08 94       	sec
    a04a:	a1 1c       	adc	r10, r1
    a04c:	b1 1c       	adc	r11, r1
    a04e:	76 e4       	ldi	r23, 0x46	; 70
    a050:	67 2e       	mov	r6, r23
    a052:	7d e0       	ldi	r23, 0x0D	; 13
    a054:	77 2e       	mov	r7, r23
	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
    a056:	f7 01       	movw	r30, r14
    a058:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__prodloc[i][1]);
    a05a:	08 94       	sec
    a05c:	e1 1c       	adc	r14, r1
    a05e:	f1 1c       	adc	r15, r1
    a060:	f7 01       	movw	r30, r14
    a062:	14 91       	lpm	r17, Z+

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    a064:	00 d0       	rcall	.+0      	; 0xa066 <_menu_pumpprodinput+0x114>
    a066:	00 d0       	rcall	.+0      	; 0xa068 <_menu_pumpprodinput+0x116>
    a068:	00 d0       	rcall	.+0      	; 0xa06a <_menu_pumpprodinput+0x118>
    a06a:	ed b7       	in	r30, 0x3d	; 61
    a06c:	fe b7       	in	r31, 0x3e	; 62
    a06e:	31 96       	adiw	r30, 0x01	; 1
    a070:	ad b7       	in	r26, 0x3d	; 61
    a072:	be b7       	in	r27, 0x3e	; 62
    a074:	12 96       	adiw	r26, 0x02	; 2
    a076:	bc 92       	st	X, r11
    a078:	ae 92       	st	-X, r10
    a07a:	11 97       	sbiw	r26, 0x01	; 1
    a07c:	73 82       	std	Z+3, r7	; 0x03
    a07e:	62 82       	std	Z+2, r6	; 0x02
    a080:	d6 01       	movw	r26, r12
    a082:	8d 91       	ld	r24, X+
    a084:	6d 01       	movw	r12, r26
    a086:	84 83       	std	Z+4, r24	; 0x04
    a088:	15 82       	std	Z+5, r1	; 0x05
    a08a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		lcd_print(__x+1, __y, __buff);
    a08e:	ed b7       	in	r30, 0x3d	; 61
    a090:	fe b7       	in	r31, 0x3e	; 62
    a092:	36 96       	adiw	r30, 0x06	; 6
    a094:	0f b6       	in	r0, 0x3f	; 63
    a096:	f8 94       	cli
    a098:	fe bf       	out	0x3e, r31	; 62
    a09a:	0f be       	out	0x3f, r0	; 63
    a09c:	ed bf       	out	0x3d, r30	; 61
    a09e:	80 2f       	mov	r24, r16
    a0a0:	8f 5f       	subi	r24, 0xFF	; 255
    a0a2:	61 2f       	mov	r22, r17
    a0a4:	a5 01       	movw	r20, r10
    a0a6:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    a0aa:	08 94       	sec
    a0ac:	e1 1c       	adc	r14, r1
    a0ae:	f1 1c       	adc	r15, r1

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
    a0b0:	fc eb       	ldi	r31, 0xBC	; 188
    a0b2:	ef 16       	cp	r14, r31
    a0b4:	f2 e0       	ldi	r31, 0x02	; 2
    a0b6:	ff 06       	cpc	r15, r31
    a0b8:	71 f6       	brne	.-100    	; 0xa056 <_menu_pumpprodinput+0x104>
		if(__key == _KEY_ENTER){
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
			return;
		}
		if(__num >= '1' && __num <= '6'){
			if(__pump_prod[__num - '1'] == 6)
    a0ba:	66 e0       	ldi	r22, 0x06	; 6
    a0bc:	c6 2e       	mov	r12, r22
    a0be:	d1 2c       	mov	r13, r1
    a0c0:	cc 0e       	add	r12, r28
    a0c2:	dd 1e       	adc	r13, r29
			else
				__pump_prod[__num - '1']++;

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    a0c4:	7e 01       	movw	r14, r28
    a0c6:	08 94       	sec
    a0c8:	e1 1c       	adc	r14, r1
    a0ca:	f1 1c       	adc	r15, r1
    a0cc:	53 e4       	ldi	r21, 0x43	; 67
    a0ce:	a5 2e       	mov	r10, r21
    a0d0:	5d e0       	ldi	r21, 0x0D	; 13
    a0d2:	b5 2e       	mov	r11, r21
		//lcd_print(2+(i%2),(i/2)*6,lcdteks);
	}

	while(1){
		
		__key = _key_scan(1);
    a0d4:	81 e0       	ldi	r24, 0x01	; 1
    a0d6:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    a0da:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    a0dc:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    a0e0:	98 2f       	mov	r25, r24
		if(__key == _KEY_CANCEL)
    a0e2:	17 3e       	cpi	r17, 0xE7	; 231
    a0e4:	09 f4       	brne	.+2      	; 0xa0e8 <_menu_pumpprodinput+0x196>
    a0e6:	4d c0       	rjmp	.+154    	; 0xa182 <_menu_pumpprodinput+0x230>
			return;
		if(__key == _KEY_ENTER){
    a0e8:	17 3b       	cpi	r17, 0xB7	; 183
    a0ea:	41 f4       	brne	.+16     	; 0xa0fc <_menu_pumpprodinput+0x1aa>
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
    a0ec:	ce 01       	movw	r24, r28
    a0ee:	06 96       	adiw	r24, 0x06	; 6
    a0f0:	b4 01       	movw	r22, r8
    a0f2:	46 e0       	ldi	r20, 0x06	; 6
    a0f4:	50 e0       	ldi	r21, 0x00	; 0
    a0f6:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
    a0fa:	43 c0       	rjmp	.+134    	; 0xa182 <_menu_pumpprodinput+0x230>
			return;
		}
		if(__num >= '1' && __num <= '6'){
    a0fc:	81 53       	subi	r24, 0x31	; 49
    a0fe:	86 30       	cpi	r24, 0x06	; 6
    a100:	48 f7       	brcc	.-46     	; 0xa0d4 <_menu_pumpprodinput+0x182>
			if(__pump_prod[__num - '1'] == 6)
    a102:	a9 2f       	mov	r26, r25
    a104:	b0 e0       	ldi	r27, 0x00	; 0
    a106:	d1 97       	sbiw	r26, 0x31	; 49
    a108:	f6 01       	movw	r30, r12
    a10a:	ea 0f       	add	r30, r26
    a10c:	fb 1f       	adc	r31, r27
    a10e:	80 81       	ld	r24, Z
    a110:	86 30       	cpi	r24, 0x06	; 6
    a112:	11 f4       	brne	.+4      	; 0xa118 <_menu_pumpprodinput+0x1c6>
				__pump_prod[__num - '1'] = 0;
    a114:	10 82       	st	Z, r1
    a116:	02 c0       	rjmp	.+4      	; 0xa11c <_menu_pumpprodinput+0x1ca>
			else
				__pump_prod[__num - '1']++;
    a118:	8f 5f       	subi	r24, 0xFF	; 255
    a11a:	80 83       	st	Z, r24

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
    a11c:	29 2f       	mov	r18, r25
    a11e:	30 e0       	ldi	r19, 0x00	; 0
    a120:	21 53       	subi	r18, 0x31	; 49
    a122:	30 40       	sbci	r19, 0x00	; 0
    a124:	22 0f       	add	r18, r18
    a126:	33 1f       	adc	r19, r19
    a128:	c9 01       	movw	r24, r18
    a12a:	80 55       	subi	r24, 0x50	; 80
    a12c:	9d 4f       	sbci	r25, 0xFD	; 253
    a12e:	fc 01       	movw	r30, r24
    a130:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
    a132:	2f 54       	subi	r18, 0x4F	; 79
    a134:	3d 4f       	sbci	r19, 0xFD	; 253
    a136:	f9 01       	movw	r30, r18
    a138:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    a13a:	00 d0       	rcall	.+0      	; 0xa13c <_menu_pumpprodinput+0x1ea>
    a13c:	00 d0       	rcall	.+0      	; 0xa13e <_menu_pumpprodinput+0x1ec>
    a13e:	00 d0       	rcall	.+0      	; 0xa140 <_menu_pumpprodinput+0x1ee>
    a140:	2d b7       	in	r18, 0x3d	; 61
    a142:	3e b7       	in	r19, 0x3e	; 62
    a144:	2f 5f       	subi	r18, 0xFF	; 255
    a146:	3f 4f       	sbci	r19, 0xFF	; 255
    a148:	ed b7       	in	r30, 0x3d	; 61
    a14a:	fe b7       	in	r31, 0x3e	; 62
    a14c:	f2 82       	std	Z+2, r15	; 0x02
    a14e:	e1 82       	std	Z+1, r14	; 0x01
    a150:	f9 01       	movw	r30, r18
    a152:	b3 82       	std	Z+3, r11	; 0x03
    a154:	a2 82       	std	Z+2, r10	; 0x02
    a156:	ac 0d       	add	r26, r12
    a158:	bd 1d       	adc	r27, r13
    a15a:	8c 91       	ld	r24, X
    a15c:	84 83       	std	Z+4, r24	; 0x04
    a15e:	15 82       	std	Z+5, r1	; 0x05
    a160:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			//_f_inttostr(__buff, __pump_prod[__num - 0x31]);
			lcd_print(__x+1, __y, __buff);
    a164:	8d b7       	in	r24, 0x3d	; 61
    a166:	9e b7       	in	r25, 0x3e	; 62
    a168:	06 96       	adiw	r24, 0x06	; 6
    a16a:	0f b6       	in	r0, 0x3f	; 63
    a16c:	f8 94       	cli
    a16e:	9e bf       	out	0x3e, r25	; 62
    a170:	0f be       	out	0x3f, r0	; 63
    a172:	8d bf       	out	0x3d, r24	; 61
    a174:	80 2f       	mov	r24, r16
    a176:	8f 5f       	subi	r24, 0xFF	; 255
    a178:	61 2f       	mov	r22, r17
    a17a:	a7 01       	movw	r20, r14
    a17c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    a180:	a9 cf       	rjmp	.-174    	; 0xa0d4 <_menu_pumpprodinput+0x182>
		}
	}
}
    a182:	a7 96       	adiw	r28, 0x27	; 39
    a184:	0f b6       	in	r0, 0x3f	; 63
    a186:	f8 94       	cli
    a188:	de bf       	out	0x3e, r29	; 62
    a18a:	0f be       	out	0x3f, r0	; 63
    a18c:	cd bf       	out	0x3d, r28	; 61
    a18e:	cf 91       	pop	r28
    a190:	df 91       	pop	r29
    a192:	1f 91       	pop	r17
    a194:	0f 91       	pop	r16
    a196:	ff 90       	pop	r15
    a198:	ef 90       	pop	r14
    a19a:	df 90       	pop	r13
    a19c:	cf 90       	pop	r12
    a19e:	bf 90       	pop	r11
    a1a0:	af 90       	pop	r10
    a1a2:	9f 90       	pop	r9
    a1a4:	8f 90       	pop	r8
    a1a6:	7f 90       	pop	r7
    a1a8:	6f 90       	pop	r6
    a1aa:	08 95       	ret

0000a1ac <_menu_pumpprod>:
}

void _menu_pumpprod(void){
	char KeyPressed,KeyChar;
	while(1){
		lcd_clear();
    a1ac:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		_scr_pump();
    a1b0:	0e 94 56 48 	call	0x90ac	; 0x90ac <_scr_pump>
		while(1){
			KeyPressed=_key_scan(1);
    a1b4:	81 e0       	ldi	r24, 0x01	; 1
    a1b6:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		    KeyChar=_key_btn(KeyPressed);
    a1ba:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    a1be:	98 2f       	mov	r25, r24

			if ((KeyChar>='1')&&(KeyChar<='8')){
    a1c0:	81 53       	subi	r24, 0x31	; 49
    a1c2:	88 30       	cpi	r24, 0x08	; 8
    a1c4:	18 f4       	brcc	.+6      	; 0xa1cc <_menu_pumpprod+0x20>
			     _menu_pumpprodinput(KeyChar-'1');
    a1c6:	0e 94 a9 4f 	call	0x9f52	; 0x9f52 <_menu_pumpprodinput>
    a1ca:	f0 cf       	rjmp	.-32     	; 0xa1ac <_menu_pumpprod>
				break;
			}else if (KeyChar=='*'){
    a1cc:	9a 32       	cpi	r25, 0x2A	; 42
    a1ce:	91 f7       	brne	.-28     	; 0xa1b4 <_menu_pumpprod+0x8>
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
}
    a1d0:	08 95       	ret

0000a1d2 <FMenuPumpLabel>:
		       break;		         
	      }
	 }     
}

void FMenuPumpLabel(){
    a1d2:	6f 92       	push	r6
    a1d4:	7f 92       	push	r7
    a1d6:	8f 92       	push	r8
    a1d8:	9f 92       	push	r9
    a1da:	af 92       	push	r10
    a1dc:	bf 92       	push	r11
    a1de:	cf 92       	push	r12
    a1e0:	df 92       	push	r13
    a1e2:	ef 92       	push	r14
    a1e4:	ff 92       	push	r15
    a1e6:	1f 93       	push	r17
    a1e8:	df 93       	push	r29
    a1ea:	cf 93       	push	r28
    a1ec:	cd b7       	in	r28, 0x3d	; 61
    a1ee:	de b7       	in	r29, 0x3e	; 62
    a1f0:	2d 97       	sbiw	r28, 0x0d	; 13
    a1f2:	0f b6       	in	r0, 0x3f	; 63
    a1f4:	f8 94       	cli
    a1f6:	de bf       	out	0x3e, r29	; 62
    a1f8:	0f be       	out	0x3f, r0	; 63
    a1fa:	cd bf       	out	0x3d, r28	; 61
	char PPumpLabel[8];
	unsigned char i, xPos,yPos,KeyPressed,KeyChar,strLabel[5];
	static char MaxCountId=16;

	eeprom_read_block((void*) &PPumpLabel, (const void*) &DefPumpLabel, 8);
    a1fc:	36 e0       	ldi	r19, 0x06	; 6
    a1fe:	c3 2e       	mov	r12, r19
    a200:	d1 2c       	mov	r13, r1
    a202:	cc 0e       	add	r12, r28
    a204:	dd 1e       	adc	r13, r29
    a206:	c6 01       	movw	r24, r12
    a208:	62 e5       	ldi	r22, 0x52	; 82
    a20a:	70 e0       	ldi	r23, 0x00	; 0
    a20c:	48 e0       	ldi	r20, 0x08	; 8
    a20e:	50 e0       	ldi	r21, 0x00	; 0
    a210:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	MaxCountId=99;
    a214:	83 e6       	ldi	r24, 0x63	; 99
    a216:	80 93 56 01 	sts	0x0156, r24
	lcd_clear();_delay_ms(10);
    a21a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    a21e:	84 ec       	ldi	r24, 0xC4	; 196
    a220:	99 e0       	ldi	r25, 0x09	; 9
    a222:	01 97       	sbiw	r24, 0x01	; 1
    a224:	f1 f7       	brne	.-4      	; 0xa222 <FMenuPumpLabel+0x50>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
    a226:	81 e0       	ldi	r24, 0x01	; 1
    a228:	61 e0       	ldi	r22, 0x01	; 1
    a22a:	41 e8       	ldi	r20, 0x81	; 129
    a22c:	5e e0       	ldi	r21, 0x0E	; 14
    a22e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
    a232:	82 e0       	ldi	r24, 0x02	; 2
    a234:	61 e0       	ldi	r22, 0x01	; 1
    a236:	45 e7       	ldi	r20, 0x75	; 117
    a238:	5e e0       	ldi	r21, 0x0E	; 14
    a23a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
    a23e:	83 e0       	ldi	r24, 0x03	; 3
    a240:	61 e0       	ldi	r22, 0x01	; 1
    a242:	40 e6       	ldi	r20, 0x60	; 96
    a244:	5e e0       	ldi	r21, 0x0E	; 14
    a246:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a24a:	84 e0       	ldi	r24, 0x04	; 4
    a24c:	61 e0       	ldi	r22, 0x01	; 1
    a24e:	4b e4       	ldi	r20, 0x4B	; 75
    a250:	5e e0       	ldi	r21, 0x0E	; 14
    a252:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    a256:	76 01       	movw	r14, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a258:	5e 01       	movw	r10, r28
    a25a:	08 94       	sec
    a25c:	a1 1c       	adc	r10, r1
    a25e:	b1 1c       	adc	r11, r1
    a260:	26 e4       	ldi	r18, 0x46	; 70
    a262:	62 2e       	mov	r6, r18
    a264:	2e e0       	ldi	r18, 0x0E	; 14
    a266:	72 2e       	mov	r7, r18
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a268:	9e e0       	ldi	r25, 0x0E	; 14
    a26a:	89 2e       	mov	r8, r25
    a26c:	91 2c       	mov	r9, r1
    a26e:	8c 0e       	add	r8, r28
    a270:	9d 1e       	adc	r9, r29
	MaxCountId=99;
	lcd_clear();_delay_ms(10);
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a272:	1e 2d       	mov	r17, r14
    a274:	1c 19       	sub	r17, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a276:	00 d0       	rcall	.+0      	; 0xa278 <FMenuPumpLabel+0xa6>
    a278:	00 d0       	rcall	.+0      	; 0xa27a <FMenuPumpLabel+0xa8>
    a27a:	00 d0       	rcall	.+0      	; 0xa27c <FMenuPumpLabel+0xaa>
    a27c:	ed b7       	in	r30, 0x3d	; 61
    a27e:	fe b7       	in	r31, 0x3e	; 62
    a280:	31 96       	adiw	r30, 0x01	; 1
    a282:	ad b7       	in	r26, 0x3d	; 61
    a284:	be b7       	in	r27, 0x3e	; 62
    a286:	12 96       	adiw	r26, 0x02	; 2
    a288:	bc 92       	st	X, r11
    a28a:	ae 92       	st	-X, r10
    a28c:	11 97       	sbiw	r26, 0x01	; 1
    a28e:	73 82       	std	Z+3, r7	; 0x03
    a290:	62 82       	std	Z+2, r6	; 0x02
    a292:	d7 01       	movw	r26, r14
    a294:	8d 91       	ld	r24, X+
    a296:	7d 01       	movw	r14, r26
    a298:	84 83       	std	Z+4, r24	; 0x04
    a29a:	15 82       	std	Z+5, r1	; 0x05
    a29c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		xPos=1+(i%4);
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
    a2a0:	ed b7       	in	r30, 0x3d	; 61
    a2a2:	fe b7       	in	r31, 0x3e	; 62
    a2a4:	36 96       	adiw	r30, 0x06	; 6
    a2a6:	0f b6       	in	r0, 0x3f	; 63
    a2a8:	f8 94       	cli
    a2aa:	fe bf       	out	0x3e, r31	; 62
    a2ac:	0f be       	out	0x3f, r0	; 63
    a2ae:	ed bf       	out	0x3d, r30	; 61
    a2b0:	61 2f       	mov	r22, r17
    a2b2:	66 95       	lsr	r22
    a2b4:	66 95       	lsr	r22
    a2b6:	66 0f       	add	r22, r22
    a2b8:	66 0f       	add	r22, r22
    a2ba:	66 0f       	add	r22, r22
    a2bc:	6b 5f       	subi	r22, 0xFB	; 251
    a2be:	13 70       	andi	r17, 0x03	; 3
    a2c0:	81 2f       	mov	r24, r17
    a2c2:	8f 5f       	subi	r24, 0xFF	; 255
    a2c4:	a5 01       	movw	r20, r10
    a2c6:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a2ca:	e8 14       	cp	r14, r8
    a2cc:	f9 04       	cpc	r15, r9
    a2ce:	89 f6       	brne	.-94     	; 0xa272 <FMenuPumpLabel+0xa0>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a2d0:	86 e0       	ldi	r24, 0x06	; 6
    a2d2:	c8 2e       	mov	r12, r24
    a2d4:	d1 2c       	mov	r13, r1
    a2d6:	cc 0e       	add	r12, r28
    a2d8:	dd 1e       	adc	r13, r29
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a2da:	7e 01       	movw	r14, r28
    a2dc:	08 94       	sec
    a2de:	e1 1c       	adc	r14, r1
    a2e0:	f1 1c       	adc	r15, r1
    a2e2:	11 e4       	ldi	r17, 0x41	; 65
    a2e4:	a1 2e       	mov	r10, r17
    a2e6:	1e e0       	ldi	r17, 0x0E	; 14
    a2e8:	b1 2e       	mov	r11, r17
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
	}

	while(1){
		KeyPressed = _key_scan(1);
    a2ea:	81 e0       	ldi	r24, 0x01	; 1
    a2ec:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    a2f0:	18 2f       	mov	r17, r24
		KeyChar    = _key_btn(KeyPressed);
    a2f2:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		if(KeyPressed == _KEY_CANCEL)break;
    a2f6:	17 3e       	cpi	r17, 0xE7	; 231
    a2f8:	09 f4       	brne	.+2      	; 0xa2fc <FMenuPumpLabel+0x12a>
    a2fa:	48 c0       	rjmp	.+144    	; 0xa38c <FMenuPumpLabel+0x1ba>
		else
		if(KeyPressed == _KEY_ENTER){
    a2fc:	17 3b       	cpi	r17, 0xB7	; 183
    a2fe:	49 f4       	brne	.+18     	; 0xa312 <FMenuPumpLabel+0x140>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
    a300:	ce 01       	movw	r24, r28
    a302:	06 96       	adiw	r24, 0x06	; 6
    a304:	62 e5       	ldi	r22, 0x52	; 82
    a306:	70 e0       	ldi	r23, 0x00	; 0
    a308:	48 e0       	ldi	r20, 0x08	; 8
    a30a:	50 e0       	ldi	r21, 0x00	; 0
    a30c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
    a310:	3d c0       	rjmp	.+122    	; 0xa38c <FMenuPumpLabel+0x1ba>
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
    a312:	18 2f       	mov	r17, r24
    a314:	11 53       	subi	r17, 0x31	; 49
    a316:	18 30       	cpi	r17, 0x08	; 8
    a318:	40 f7       	brcc	.-48     	; 0xa2ea <FMenuPumpLabel+0x118>
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a31a:	a1 2f       	mov	r26, r17
    a31c:	b0 e0       	ldi	r27, 0x00	; 0
    a31e:	f6 01       	movw	r30, r12
    a320:	ea 0f       	add	r30, r26
    a322:	fb 1f       	adc	r31, r27
    a324:	90 81       	ld	r25, Z
    a326:	80 91 56 01 	lds	r24, 0x0156
    a32a:	98 17       	cp	r25, r24
    a32c:	11 f4       	brne	.+4      	; 0xa332 <FMenuPumpLabel+0x160>
			   PPumpLabel[i] = 0;
    a32e:	10 82       	st	Z, r1
    a330:	02 c0       	rjmp	.+4      	; 0xa336 <FMenuPumpLabel+0x164>
			else
			   PPumpLabel[i]++;
    a332:	9f 5f       	subi	r25, 0xFF	; 255
    a334:	90 83       	st	Z, r25
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a336:	00 d0       	rcall	.+0      	; 0xa338 <FMenuPumpLabel+0x166>
    a338:	00 d0       	rcall	.+0      	; 0xa33a <FMenuPumpLabel+0x168>
    a33a:	00 d0       	rcall	.+0      	; 0xa33c <FMenuPumpLabel+0x16a>
    a33c:	2d b7       	in	r18, 0x3d	; 61
    a33e:	3e b7       	in	r19, 0x3e	; 62
    a340:	2f 5f       	subi	r18, 0xFF	; 255
    a342:	3f 4f       	sbci	r19, 0xFF	; 255
    a344:	ed b7       	in	r30, 0x3d	; 61
    a346:	fe b7       	in	r31, 0x3e	; 62
    a348:	f2 82       	std	Z+2, r15	; 0x02
    a34a:	e1 82       	std	Z+1, r14	; 0x01
    a34c:	f9 01       	movw	r30, r18
    a34e:	b3 82       	std	Z+3, r11	; 0x03
    a350:	a2 82       	std	Z+2, r10	; 0x02
    a352:	ac 0d       	add	r26, r12
    a354:	bd 1d       	adc	r27, r13
    a356:	8c 91       	ld	r24, X
    a358:	84 83       	std	Z+4, r24	; 0x04
    a35a:	15 82       	std	Z+5, r1	; 0x05
    a35c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
            lcd_print(xPos,yPos,strLabel);
    a360:	8d b7       	in	r24, 0x3d	; 61
    a362:	9e b7       	in	r25, 0x3e	; 62
    a364:	06 96       	adiw	r24, 0x06	; 6
    a366:	0f b6       	in	r0, 0x3f	; 63
    a368:	f8 94       	cli
    a36a:	9e bf       	out	0x3e, r25	; 62
    a36c:	0f be       	out	0x3f, r0	; 63
    a36e:	8d bf       	out	0x3d, r24	; 61
    a370:	61 2f       	mov	r22, r17
    a372:	66 95       	lsr	r22
    a374:	66 95       	lsr	r22
    a376:	66 0f       	add	r22, r22
    a378:	66 0f       	add	r22, r22
    a37a:	66 0f       	add	r22, r22
    a37c:	6b 5f       	subi	r22, 0xFB	; 251
    a37e:	13 70       	andi	r17, 0x03	; 3
    a380:	81 2f       	mov	r24, r17
    a382:	8f 5f       	subi	r24, 0xFF	; 255
    a384:	a7 01       	movw	r20, r14
    a386:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    a38a:	af cf       	rjmp	.-162    	; 0xa2ea <FMenuPumpLabel+0x118>
		}
	}
}
    a38c:	2d 96       	adiw	r28, 0x0d	; 13
    a38e:	0f b6       	in	r0, 0x3f	; 63
    a390:	f8 94       	cli
    a392:	de bf       	out	0x3e, r29	; 62
    a394:	0f be       	out	0x3f, r0	; 63
    a396:	cd bf       	out	0x3d, r28	; 61
    a398:	cf 91       	pop	r28
    a39a:	df 91       	pop	r29
    a39c:	1f 91       	pop	r17
    a39e:	ff 90       	pop	r15
    a3a0:	ef 90       	pop	r14
    a3a2:	df 90       	pop	r13
    a3a4:	cf 90       	pop	r12
    a3a6:	bf 90       	pop	r11
    a3a8:	af 90       	pop	r10
    a3aa:	9f 90       	pop	r9
    a3ac:	8f 90       	pop	r8
    a3ae:	7f 90       	pop	r7
    a3b0:	6f 90       	pop	r6
    a3b2:	08 95       	ret

0000a3b4 <FSettingDec>:

	Result=MENU_DONE;
	return Result;
}

char FSettingDec(){
    a3b4:	cf 92       	push	r12
    a3b6:	df 92       	push	r13
    a3b8:	ef 92       	push	r14
    a3ba:	ff 92       	push	r15
    a3bc:	0f 93       	push	r16
    a3be:	1f 93       	push	r17
    a3c0:	df 93       	push	r29
    a3c2:	cf 93       	push	r28
    a3c4:	cd b7       	in	r28, 0x3d	; 61
    a3c6:	de b7       	in	r29, 0x3e	; 62
    a3c8:	64 97       	sbiw	r28, 0x14	; 20
    a3ca:	0f b6       	in	r0, 0x3f	; 63
    a3cc:	f8 94       	cli
    a3ce:	de bf       	out	0x3e, r29	; 62
    a3d0:	0f be       	out	0x3f, r0	; 63
    a3d2:	cd bf       	out	0x3d, r28	; 61
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
	 switch(stSettingDecimal){
    a3d4:	80 91 22 02 	lds	r24, 0x0222
    a3d8:	82 30       	cpi	r24, 0x02	; 2
    a3da:	09 f4       	brne	.+2      	; 0xa3de <FSettingDec+0x2a>
    a3dc:	b2 c0       	rjmp	.+356    	; 0xa542 <FSettingDec+0x18e>
    a3de:	83 30       	cpi	r24, 0x03	; 3
    a3e0:	30 f4       	brcc	.+12     	; 0xa3ee <FSettingDec+0x3a>
    a3e2:	88 23       	and	r24, r24
    a3e4:	71 f0       	breq	.+28     	; 0xa402 <FSettingDec+0x4e>
    a3e6:	81 30       	cpi	r24, 0x01	; 1
    a3e8:	09 f0       	breq	.+2      	; 0xa3ec <FSettingDec+0x38>
    a3ea:	82 c1       	rjmp	.+772    	; 0xa6f0 <FSettingDec+0x33c>
    a3ec:	89 c0       	rjmp	.+274    	; 0xa500 <FSettingDec+0x14c>
    a3ee:	84 30       	cpi	r24, 0x04	; 4
    a3f0:	09 f4       	brne	.+2      	; 0xa3f4 <FSettingDec+0x40>
    a3f2:	76 c1       	rjmp	.+748    	; 0xa6e0 <FSettingDec+0x32c>
    a3f4:	84 30       	cpi	r24, 0x04	; 4
    a3f6:	08 f4       	brcc	.+2      	; 0xa3fa <FSettingDec+0x46>
    a3f8:	47 c1       	rjmp	.+654    	; 0xa688 <FSettingDec+0x2d4>
    a3fa:	85 30       	cpi	r24, 0x05	; 5
    a3fc:	09 f0       	breq	.+2      	; 0xa400 <FSettingDec+0x4c>
    a3fe:	78 c1       	rjmp	.+752    	; 0xa6f0 <FSettingDec+0x33c>
    a400:	73 c1       	rjmp	.+742    	; 0xa6e8 <FSettingDec+0x334>
	 case sdInitDisplay:
	      lcd_clear();         //"12345678901234567890
    a402:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalPrice);
    a406:	8d e3       	ldi	r24, 0x3D	; 61
    a408:	90 e0       	ldi	r25, 0x00	; 0
    a40a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    a40e:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalVolume);
    a410:	8e e3       	ldi	r24, 0x3E	; 62
    a412:	90 e0       	ldi	r25, 0x00	; 0
    a414:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    a418:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMoney);
    a41a:	8f e3       	ldi	r24, 0x3F	; 63
    a41c:	90 e0       	ldi	r25, 0x00	; 0
    a41e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    a422:	d8 2e       	mov	r13, r24

 
		  sprintf_P(lcdteks,PSTR("1.Price :%d"),PDecimalConfig[0]);
    a424:	00 d0       	rcall	.+0      	; 0xa426 <FSettingDec+0x72>
    a426:	00 d0       	rcall	.+0      	; 0xa428 <FSettingDec+0x74>
    a428:	00 d0       	rcall	.+0      	; 0xa42a <FSettingDec+0x76>
    a42a:	ed b7       	in	r30, 0x3d	; 61
    a42c:	fe b7       	in	r31, 0x3e	; 62
    a42e:	31 96       	adiw	r30, 0x01	; 1
    a430:	8e 01       	movw	r16, r28
    a432:	0f 5f       	subi	r16, 0xFF	; 255
    a434:	1f 4f       	sbci	r17, 0xFF	; 255
    a436:	ad b7       	in	r26, 0x3d	; 61
    a438:	be b7       	in	r27, 0x3e	; 62
    a43a:	12 96       	adiw	r26, 0x02	; 2
    a43c:	1c 93       	st	X, r17
    a43e:	0e 93       	st	-X, r16
    a440:	11 97       	sbiw	r26, 0x01	; 1
    a442:	86 ef       	ldi	r24, 0xF6	; 246
    a444:	92 e1       	ldi	r25, 0x12	; 18
    a446:	93 83       	std	Z+3, r25	; 0x03
    a448:	82 83       	std	Z+2, r24	; 0x02
    a44a:	f4 82       	std	Z+4, r15	; 0x04
    a44c:	15 82       	std	Z+5, r1	; 0x05
    a44e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a452:	8d b7       	in	r24, 0x3d	; 61
    a454:	9e b7       	in	r25, 0x3e	; 62
    a456:	06 96       	adiw	r24, 0x06	; 6
    a458:	0f b6       	in	r0, 0x3f	; 63
    a45a:	f8 94       	cli
    a45c:	9e bf       	out	0x3e, r25	; 62
    a45e:	0f be       	out	0x3f, r0	; 63
    a460:	8d bf       	out	0x3d, r24	; 61
    a462:	81 e0       	ldi	r24, 0x01	; 1
    a464:	61 e0       	ldi	r22, 0x01	; 1
    a466:	a8 01       	movw	r20, r16
    a468:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.Volume:%d"),PDecimalConfig[1]);
    a46c:	00 d0       	rcall	.+0      	; 0xa46e <FSettingDec+0xba>
    a46e:	00 d0       	rcall	.+0      	; 0xa470 <FSettingDec+0xbc>
    a470:	00 d0       	rcall	.+0      	; 0xa472 <FSettingDec+0xbe>
    a472:	ed b7       	in	r30, 0x3d	; 61
    a474:	fe b7       	in	r31, 0x3e	; 62
    a476:	31 96       	adiw	r30, 0x01	; 1
    a478:	ad b7       	in	r26, 0x3d	; 61
    a47a:	be b7       	in	r27, 0x3e	; 62
    a47c:	12 96       	adiw	r26, 0x02	; 2
    a47e:	1c 93       	st	X, r17
    a480:	0e 93       	st	-X, r16
    a482:	11 97       	sbiw	r26, 0x01	; 1
    a484:	8a ee       	ldi	r24, 0xEA	; 234
    a486:	92 e1       	ldi	r25, 0x12	; 18
    a488:	93 83       	std	Z+3, r25	; 0x03
    a48a:	82 83       	std	Z+2, r24	; 0x02
    a48c:	e4 82       	std	Z+4, r14	; 0x04
    a48e:	15 82       	std	Z+5, r1	; 0x05
    a490:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a494:	8d b7       	in	r24, 0x3d	; 61
    a496:	9e b7       	in	r25, 0x3e	; 62
    a498:	06 96       	adiw	r24, 0x06	; 6
    a49a:	0f b6       	in	r0, 0x3f	; 63
    a49c:	f8 94       	cli
    a49e:	9e bf       	out	0x3e, r25	; 62
    a4a0:	0f be       	out	0x3f, r0	; 63
    a4a2:	8d bf       	out	0x3d, r24	; 61
    a4a4:	82 e0       	ldi	r24, 0x02	; 2
    a4a6:	61 e0       	ldi	r22, 0x01	; 1
    a4a8:	a8 01       	movw	r20, r16
    a4aa:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Money :%d"),PDecimalConfig[2]);
    a4ae:	00 d0       	rcall	.+0      	; 0xa4b0 <FSettingDec+0xfc>
    a4b0:	00 d0       	rcall	.+0      	; 0xa4b2 <FSettingDec+0xfe>
    a4b2:	00 d0       	rcall	.+0      	; 0xa4b4 <FSettingDec+0x100>
    a4b4:	ed b7       	in	r30, 0x3d	; 61
    a4b6:	fe b7       	in	r31, 0x3e	; 62
    a4b8:	31 96       	adiw	r30, 0x01	; 1
    a4ba:	ad b7       	in	r26, 0x3d	; 61
    a4bc:	be b7       	in	r27, 0x3e	; 62
    a4be:	12 96       	adiw	r26, 0x02	; 2
    a4c0:	1c 93       	st	X, r17
    a4c2:	0e 93       	st	-X, r16
    a4c4:	11 97       	sbiw	r26, 0x01	; 1
    a4c6:	8e ed       	ldi	r24, 0xDE	; 222
    a4c8:	92 e1       	ldi	r25, 0x12	; 18
    a4ca:	93 83       	std	Z+3, r25	; 0x03
    a4cc:	82 83       	std	Z+2, r24	; 0x02
    a4ce:	d4 82       	std	Z+4, r13	; 0x04
    a4d0:	15 82       	std	Z+5, r1	; 0x05
    a4d2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a4d6:	8d b7       	in	r24, 0x3d	; 61
    a4d8:	9e b7       	in	r25, 0x3e	; 62
    a4da:	06 96       	adiw	r24, 0x06	; 6
    a4dc:	0f b6       	in	r0, 0x3f	; 63
    a4de:	f8 94       	cli
    a4e0:	9e bf       	out	0x3e, r25	; 62
    a4e2:	0f be       	out	0x3f, r0	; 63
    a4e4:	8d bf       	out	0x3d, r24	; 61
    a4e6:	83 e0       	ldi	r24, 0x03	; 3
    a4e8:	61 e0       	ldi	r22, 0x01	; 1
    a4ea:	a8 01       	movw	r20, r16
    a4ec:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]Back  [#]Next"));		  
    a4f0:	84 e0       	ldi	r24, 0x04	; 4
    a4f2:	61 e0       	ldi	r22, 0x01	; 1
    a4f4:	4d ec       	ldi	r20, 0xCD	; 205
    a4f6:	52 e1       	ldi	r21, 0x12	; 18
    a4f8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stSettingDecimal=sdSelectKey1;
    a4fc:	81 e0       	ldi	r24, 0x01	; 1
    a4fe:	f1 c0       	rjmp	.+482    	; 0xa6e2 <FSettingDec+0x32e>
		  break;
     case sdSelectKey1:
          KeyChar=_key_btn(_key_scan(1));
    a500:	81 e0       	ldi	r24, 0x01	; 1
    a502:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    a506:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='3')){
    a50a:	08 2f       	mov	r16, r24
    a50c:	01 53       	subi	r16, 0x31	; 49
    a50e:	03 30       	cpi	r16, 0x03	; 3
    a510:	80 f4       	brcc	.+32     	; 0xa532 <FSettingDec+0x17e>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalPrice+Addr);
    a512:	10 e0       	ldi	r17, 0x00	; 0
    a514:	03 5c       	subi	r16, 0xC3	; 195
    a516:	1f 4f       	sbci	r17, 0xFF	; 255
    a518:	c8 01       	movw	r24, r16
    a51a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
			  PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;
			  eeprom_write_byte(&DefDecimalPrice+Addr,PDecimalConfig[Addr]);
    a51e:	68 2f       	mov	r22, r24
    a520:	70 e0       	ldi	r23, 0x00	; 0
    a522:	6f 5f       	subi	r22, 0xFF	; 255
    a524:	7f 4f       	sbci	r23, 0xFF	; 255
    a526:	63 70       	andi	r22, 0x03	; 3
    a528:	70 70       	andi	r23, 0x00	; 0
    a52a:	c8 01       	movw	r24, r16
    a52c:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
    a530:	d4 c0       	rjmp	.+424    	; 0xa6da <FSettingDec+0x326>
              stSettingDecimal=sdInitDisplay;
		  }else if (KeyChar=='*') stSettingDecimal=sdExitSettingDecimal;
    a532:	8a 32       	cpi	r24, 0x2A	; 42
    a534:	11 f4       	brne	.+4      	; 0xa53a <FSettingDec+0x186>
    a536:	85 e0       	ldi	r24, 0x05	; 5
    a538:	d4 c0       	rjmp	.+424    	; 0xa6e2 <FSettingDec+0x32e>
		  else if (KeyChar=='#') stSettingDecimal=sdInitDisplay2;
    a53a:	83 32       	cpi	r24, 0x23	; 35
    a53c:	09 f0       	breq	.+2      	; 0xa540 <FSettingDec+0x18c>
    a53e:	d8 c0       	rjmp	.+432    	; 0xa6f0 <FSettingDec+0x33c>
    a540:	cf c0       	rjmp	.+414    	; 0xa6e0 <FSettingDec+0x32c>
          break;
     case sdInitDisplay2:
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalTotalVolume);
    a542:	81 e4       	ldi	r24, 0x41	; 65
    a544:	90 e0       	ldi	r25, 0x00	; 0
    a546:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    a54a:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalTotalMoney);
    a54c:	82 e4       	ldi	r24, 0x42	; 66
    a54e:	90 e0       	ldi	r25, 0x00	; 0
    a550:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    a554:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMark);
    a556:	83 e4       	ldi	r24, 0x43	; 67
    a558:	90 e0       	ldi	r25, 0x00	; 0
    a55a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    a55e:	d8 2e       	mov	r13, r24
		  PDecimalConfig[3]=eeprom_read_byte(&DefCurrencyMark);
    a560:	84 e4       	ldi	r24, 0x44	; 68
    a562:	90 e0       	ldi	r25, 0x00	; 0
    a564:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    a568:	c8 2e       	mov	r12, r24
		  sprintf_P(lcdteks,PSTR("1.T.Volume:%d "),PDecimalConfig[0]);
    a56a:	00 d0       	rcall	.+0      	; 0xa56c <FSettingDec+0x1b8>
    a56c:	00 d0       	rcall	.+0      	; 0xa56e <FSettingDec+0x1ba>
    a56e:	00 d0       	rcall	.+0      	; 0xa570 <FSettingDec+0x1bc>
    a570:	ed b7       	in	r30, 0x3d	; 61
    a572:	fe b7       	in	r31, 0x3e	; 62
    a574:	31 96       	adiw	r30, 0x01	; 1
    a576:	8e 01       	movw	r16, r28
    a578:	0f 5f       	subi	r16, 0xFF	; 255
    a57a:	1f 4f       	sbci	r17, 0xFF	; 255
    a57c:	ad b7       	in	r26, 0x3d	; 61
    a57e:	be b7       	in	r27, 0x3e	; 62
    a580:	12 96       	adiw	r26, 0x02	; 2
    a582:	1c 93       	st	X, r17
    a584:	0e 93       	st	-X, r16
    a586:	11 97       	sbiw	r26, 0x01	; 1
    a588:	8e eb       	ldi	r24, 0xBE	; 190
    a58a:	92 e1       	ldi	r25, 0x12	; 18
    a58c:	93 83       	std	Z+3, r25	; 0x03
    a58e:	82 83       	std	Z+2, r24	; 0x02
    a590:	f4 82       	std	Z+4, r15	; 0x04
    a592:	15 82       	std	Z+5, r1	; 0x05
    a594:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a598:	8d b7       	in	r24, 0x3d	; 61
    a59a:	9e b7       	in	r25, 0x3e	; 62
    a59c:	06 96       	adiw	r24, 0x06	; 6
    a59e:	0f b6       	in	r0, 0x3f	; 63
    a5a0:	f8 94       	cli
    a5a2:	9e bf       	out	0x3e, r25	; 62
    a5a4:	0f be       	out	0x3f, r0	; 63
    a5a6:	8d bf       	out	0x3d, r24	; 61
    a5a8:	81 e0       	ldi	r24, 0x01	; 1
    a5aa:	61 e0       	ldi	r22, 0x01	; 1
    a5ac:	a8 01       	movw	r20, r16
    a5ae:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.T.Money :%d "),PDecimalConfig[1]);
    a5b2:	00 d0       	rcall	.+0      	; 0xa5b4 <FSettingDec+0x200>
    a5b4:	00 d0       	rcall	.+0      	; 0xa5b6 <FSettingDec+0x202>
    a5b6:	00 d0       	rcall	.+0      	; 0xa5b8 <FSettingDec+0x204>
    a5b8:	ed b7       	in	r30, 0x3d	; 61
    a5ba:	fe b7       	in	r31, 0x3e	; 62
    a5bc:	31 96       	adiw	r30, 0x01	; 1
    a5be:	ad b7       	in	r26, 0x3d	; 61
    a5c0:	be b7       	in	r27, 0x3e	; 62
    a5c2:	12 96       	adiw	r26, 0x02	; 2
    a5c4:	1c 93       	st	X, r17
    a5c6:	0e 93       	st	-X, r16
    a5c8:	11 97       	sbiw	r26, 0x01	; 1
    a5ca:	8f ea       	ldi	r24, 0xAF	; 175
    a5cc:	92 e1       	ldi	r25, 0x12	; 18
    a5ce:	93 83       	std	Z+3, r25	; 0x03
    a5d0:	82 83       	std	Z+2, r24	; 0x02
    a5d2:	e4 82       	std	Z+4, r14	; 0x04
    a5d4:	15 82       	std	Z+5, r1	; 0x05
    a5d6:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a5da:	8d b7       	in	r24, 0x3d	; 61
    a5dc:	9e b7       	in	r25, 0x3e	; 62
    a5de:	06 96       	adiw	r24, 0x06	; 6
    a5e0:	0f b6       	in	r0, 0x3f	; 63
    a5e2:	f8 94       	cli
    a5e4:	9e bf       	out	0x3e, r25	; 62
    a5e6:	0f be       	out	0x3f, r0	; 63
    a5e8:	8d bf       	out	0x3d, r24	; 61
    a5ea:	82 e0       	ldi	r24, 0x02	; 2
    a5ec:	61 e0       	ldi	r22, 0x01	; 1
    a5ee:	a8 01       	movw	r20, r16
    a5f0:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Decimal :%c "),PDecimalConfig[2]);
    a5f4:	00 d0       	rcall	.+0      	; 0xa5f6 <FSettingDec+0x242>
    a5f6:	00 d0       	rcall	.+0      	; 0xa5f8 <FSettingDec+0x244>
    a5f8:	00 d0       	rcall	.+0      	; 0xa5fa <FSettingDec+0x246>
    a5fa:	ed b7       	in	r30, 0x3d	; 61
    a5fc:	fe b7       	in	r31, 0x3e	; 62
    a5fe:	31 96       	adiw	r30, 0x01	; 1
    a600:	ad b7       	in	r26, 0x3d	; 61
    a602:	be b7       	in	r27, 0x3e	; 62
    a604:	12 96       	adiw	r26, 0x02	; 2
    a606:	1c 93       	st	X, r17
    a608:	0e 93       	st	-X, r16
    a60a:	11 97       	sbiw	r26, 0x01	; 1
    a60c:	80 ea       	ldi	r24, 0xA0	; 160
    a60e:	92 e1       	ldi	r25, 0x12	; 18
    a610:	93 83       	std	Z+3, r25	; 0x03
    a612:	82 83       	std	Z+2, r24	; 0x02
    a614:	d4 82       	std	Z+4, r13	; 0x04
    a616:	15 82       	std	Z+5, r1	; 0x05
    a618:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a61c:	8d b7       	in	r24, 0x3d	; 61
    a61e:	9e b7       	in	r25, 0x3e	; 62
    a620:	06 96       	adiw	r24, 0x06	; 6
    a622:	0f b6       	in	r0, 0x3f	; 63
    a624:	f8 94       	cli
    a626:	9e bf       	out	0x3e, r25	; 62
    a628:	0f be       	out	0x3f, r0	; 63
    a62a:	8d bf       	out	0x3d, r24	; 61
    a62c:	83 e0       	ldi	r24, 0x03	; 3
    a62e:	61 e0       	ldi	r22, 0x01	; 1
    a630:	a8 01       	movw	r20, r16
    a632:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("4.Sparator:%c "),PDecimalConfig[3]);
    a636:	00 d0       	rcall	.+0      	; 0xa638 <FSettingDec+0x284>
    a638:	00 d0       	rcall	.+0      	; 0xa63a <FSettingDec+0x286>
    a63a:	00 d0       	rcall	.+0      	; 0xa63c <FSettingDec+0x288>
    a63c:	ed b7       	in	r30, 0x3d	; 61
    a63e:	fe b7       	in	r31, 0x3e	; 62
    a640:	31 96       	adiw	r30, 0x01	; 1
    a642:	ad b7       	in	r26, 0x3d	; 61
    a644:	be b7       	in	r27, 0x3e	; 62
    a646:	12 96       	adiw	r26, 0x02	; 2
    a648:	1c 93       	st	X, r17
    a64a:	0e 93       	st	-X, r16
    a64c:	11 97       	sbiw	r26, 0x01	; 1
    a64e:	81 e9       	ldi	r24, 0x91	; 145
    a650:	92 e1       	ldi	r25, 0x12	; 18
    a652:	93 83       	std	Z+3, r25	; 0x03
    a654:	82 83       	std	Z+2, r24	; 0x02
    a656:	c4 82       	std	Z+4, r12	; 0x04
    a658:	15 82       	std	Z+5, r1	; 0x05
    a65a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(4,1,lcdteks);
    a65e:	8d b7       	in	r24, 0x3d	; 61
    a660:	9e b7       	in	r25, 0x3e	; 62
    a662:	06 96       	adiw	r24, 0x06	; 6
    a664:	0f b6       	in	r0, 0x3f	; 63
    a666:	f8 94       	cli
    a668:	9e bf       	out	0x3e, r25	; 62
    a66a:	0f be       	out	0x3f, r0	; 63
    a66c:	8d bf       	out	0x3d, r24	; 61
    a66e:	84 e0       	ldi	r24, 0x04	; 4
    a670:	61 e0       	ldi	r22, 0x01	; 1
    a672:	a8 01       	movw	r20, r16
    a674:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(4,14,PSTR("*)Back"));
    a678:	84 e0       	ldi	r24, 0x04	; 4
    a67a:	6e e0       	ldi	r22, 0x0E	; 14
    a67c:	4a e8       	ldi	r20, 0x8A	; 138
    a67e:	52 e1       	ldi	r21, 0x12	; 18
    a680:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      stSettingDecimal=sdSelectKey2;
    a684:	83 e0       	ldi	r24, 0x03	; 3
    a686:	2d c0       	rjmp	.+90     	; 0xa6e2 <FSettingDec+0x32e>
	      break;
     case sdSelectKey2:
          KeyChar=_key_btn(_key_scan(1));
    a688:	81 e0       	ldi	r24, 0x01	; 1
    a68a:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    a68e:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    a692:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    a694:	08 2f       	mov	r16, r24
    a696:	01 53       	subi	r16, 0x31	; 49
    a698:	02 30       	cpi	r16, 0x02	; 2
    a69a:	68 f4       	brcc	.+26     	; 0xa6b6 <FSettingDec+0x302>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a69c:	10 e0       	ldi	r17, 0x00	; 0
    a69e:	0f 5b       	subi	r16, 0xBF	; 191
    a6a0:	1f 4f       	sbci	r17, 0xFF	; 255
    a6a2:	c8 01       	movw	r24, r16
    a6a4:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
		      PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;

			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a6a8:	68 2f       	mov	r22, r24
    a6aa:	70 e0       	ldi	r23, 0x00	; 0
    a6ac:	6f 5f       	subi	r22, 0xFF	; 255
    a6ae:	7f 4f       	sbci	r23, 0xFF	; 255
    a6b0:	63 70       	andi	r22, 0x03	; 3
    a6b2:	70 70       	andi	r23, 0x00	; 0
    a6b4:	0c c0       	rjmp	.+24     	; 0xa6ce <FSettingDec+0x31a>
              stSettingDecimal=sdInitDisplay2;
		  }else if ((KeyChar>='3')&&(KeyChar<='4')){
    a6b6:	83 53       	subi	r24, 0x33	; 51
    a6b8:	82 30       	cpi	r24, 0x02	; 2
    a6ba:	68 f4       	brcc	.+26     	; 0xa6d6 <FSettingDec+0x322>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a6bc:	10 e0       	ldi	r17, 0x00	; 0
    a6be:	0f 5b       	subi	r16, 0xBF	; 191
    a6c0:	1f 4f       	sbci	r17, 0xFF	; 255
    a6c2:	c8 01       	movw	r24, r16
    a6c4:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
			  PDecimalConfig[Addr]=SelectMark(PDecimalConfig[Addr]);
    a6c8:	0e 94 4f 21 	call	0x429e	; 0x429e <SelectMark>
    a6cc:	68 2f       	mov	r22, r24
			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a6ce:	c8 01       	movw	r24, r16
    a6d0:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
    a6d4:	05 c0       	rjmp	.+10     	; 0xa6e0 <FSettingDec+0x32c>
              stSettingDecimal=sdInitDisplay2;
		  }else if (KeyChar=='*') stSettingDecimal=sdInitDisplay;
    a6d6:	9a 32       	cpi	r25, 0x2A	; 42
    a6d8:	59 f4       	brne	.+22     	; 0xa6f0 <FSettingDec+0x33c>
    a6da:	10 92 22 02 	sts	0x0222, r1
    a6de:	08 c0       	rjmp	.+16     	; 0xa6f0 <FSettingDec+0x33c>
		          stSettingDecimal=sdTestInput;
				  }*/
          break;
     case sdTestInput:
	      //if (TestUserInput()==MENU_DONE)
		  stSettingDecimal=sdInitDisplay2;
    a6e0:	82 e0       	ldi	r24, 0x02	; 2
    a6e2:	80 93 22 02 	sts	0x0222, r24
    a6e6:	04 c0       	rjmp	.+8      	; 0xa6f0 <FSettingDec+0x33c>
	      break;
	 case sdExitSettingDecimal:
          stSettingDecimal=sdInitDisplay;
    a6e8:	10 92 22 02 	sts	0x0222, r1
    a6ec:	81 e0       	ldi	r24, 0x01	; 1
    a6ee:	01 c0       	rjmp	.+2      	; 0xa6f2 <FSettingDec+0x33e>
    a6f0:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
    return Result;
}
    a6f2:	64 96       	adiw	r28, 0x14	; 20
    a6f4:	0f b6       	in	r0, 0x3f	; 63
    a6f6:	f8 94       	cli
    a6f8:	de bf       	out	0x3e, r29	; 62
    a6fa:	0f be       	out	0x3f, r0	; 63
    a6fc:	cd bf       	out	0x3d, r28	; 61
    a6fe:	cf 91       	pop	r28
    a700:	df 91       	pop	r29
    a702:	1f 91       	pop	r17
    a704:	0f 91       	pop	r16
    a706:	ff 90       	pop	r15
    a708:	ef 90       	pop	r14
    a70a:	df 90       	pop	r13
    a70c:	cf 90       	pop	r12
    a70e:	08 95       	ret

0000a710 <FMenuShift>:
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
     switch(stMenuShift){
    a710:	80 91 4d 02 	lds	r24, 0x024D
    a714:	82 30       	cpi	r24, 0x02	; 2
    a716:	09 f4       	brne	.+2      	; 0xa71a <FMenuShift+0xa>
    a718:	48 c0       	rjmp	.+144    	; 0xa7aa <FMenuShift+0x9a>
    a71a:	83 30       	cpi	r24, 0x03	; 3
    a71c:	30 f4       	brcc	.+12     	; 0xa72a <FMenuShift+0x1a>
    a71e:	88 23       	and	r24, r24
    a720:	69 f0       	breq	.+26     	; 0xa73c <FMenuShift+0x2c>
    a722:	81 30       	cpi	r24, 0x01	; 1
    a724:	09 f0       	breq	.+2      	; 0xa728 <FMenuShift+0x18>
    a726:	50 c0       	rjmp	.+160    	; 0xa7c8 <FMenuShift+0xb8>
    a728:	25 c0       	rjmp	.+74     	; 0xa774 <FMenuShift+0x64>
    a72a:	84 30       	cpi	r24, 0x04	; 4
    a72c:	09 f4       	brne	.+2      	; 0xa730 <FMenuShift+0x20>
    a72e:	4c c0       	rjmp	.+152    	; 0xa7c8 <FMenuShift+0xb8>
    a730:	84 30       	cpi	r24, 0x04	; 4
    a732:	e8 f1       	brcs	.+122    	; 0xa7ae <FMenuShift+0x9e>
    a734:	85 30       	cpi	r24, 0x05	; 5
    a736:	09 f0       	breq	.+2      	; 0xa73a <FMenuShift+0x2a>
    a738:	47 c0       	rjmp	.+142    	; 0xa7c8 <FMenuShift+0xb8>
    a73a:	42 c0       	rjmp	.+132    	; 0xa7c0 <FMenuShift+0xb0>
	 case msInitMenuShift:
	      lcd_clear();
    a73c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Close Shift"));
    a740:	81 e0       	ldi	r24, 0x01	; 1
    a742:	61 e0       	ldi	r22, 0x01	; 1
    a744:	47 e6       	ldi	r20, 0x67	; 103
    a746:	57 e1       	ldi	r21, 0x17	; 23
    a748:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Close Day  "));
    a74c:	82 e0       	ldi	r24, 0x02	; 2
    a74e:	61 e0       	ldi	r22, 0x01	; 1
    a750:	49 e5       	ldi	r20, 0x59	; 89
    a752:	57 e1       	ldi	r21, 0x17	; 23
    a754:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("3.Lock Pump  "));
    a758:	83 e0       	ldi	r24, 0x03	; 3
    a75a:	61 e0       	ldi	r22, 0x01	; 1
    a75c:	4b e4       	ldi	r20, 0x4B	; 75
    a75e:	57 e1       	ldi	r21, 0x17	; 23
    a760:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit"));
    a764:	84 e0       	ldi	r24, 0x04	; 4
    a766:	61 e0       	ldi	r22, 0x01	; 1
    a768:	44 e4       	ldi	r20, 0x44	; 68
    a76a:	57 e1       	ldi	r21, 0x17	; 23
    a76c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stMenuShift=msSelectShift;
    a770:	81 e0       	ldi	r24, 0x01	; 1
    a772:	18 c0       	rjmp	.+48     	; 0xa7a4 <FMenuShift+0x94>
	      break;
     case msSelectShift:
          KeyPressed=_key_scan(1);
    a774:	81 e0       	ldi	r24, 0x01	; 1
    a776:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    a77a:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
          switch(KeyChar){
    a77e:	82 33       	cpi	r24, 0x32	; 50
    a780:	61 f0       	breq	.+24     	; 0xa79a <FMenuShift+0x8a>
    a782:	83 33       	cpi	r24, 0x33	; 51
    a784:	28 f4       	brcc	.+10     	; 0xa790 <FMenuShift+0x80>
    a786:	8a 32       	cpi	r24, 0x2A	; 42
    a788:	61 f0       	breq	.+24     	; 0xa7a2 <FMenuShift+0x92>
    a78a:	81 33       	cpi	r24, 0x31	; 49
    a78c:	e9 f4       	brne	.+58     	; 0xa7c8 <FMenuShift+0xb8>
    a78e:	03 c0       	rjmp	.+6      	; 0xa796 <FMenuShift+0x86>
    a790:	83 33       	cpi	r24, 0x33	; 51
    a792:	d1 f4       	brne	.+52     	; 0xa7c8 <FMenuShift+0xb8>
    a794:	04 c0       	rjmp	.+8      	; 0xa79e <FMenuShift+0x8e>
		  case '1':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseShift;
    a796:	82 e0       	ldi	r24, 0x02	; 2
    a798:	05 c0       	rjmp	.+10     	; 0xa7a4 <FMenuShift+0x94>
		       break; 
		  case '2':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseDay;
    a79a:	83 e0       	ldi	r24, 0x03	; 3
    a79c:	03 c0       	rjmp	.+6      	; 0xa7a4 <FMenuShift+0x94>
		       break; 
		  case '3':
		       SubMenu=MENU_NONE;
		       stMenuShift=msLockPump;
    a79e:	84 e0       	ldi	r24, 0x04	; 4
    a7a0:	01 c0       	rjmp	.+2      	; 0xa7a4 <FMenuShift+0x94>
		       break; 
		  case '*':
		       stMenuShift=msExitShift;
    a7a2:	85 e0       	ldi	r24, 0x05	; 5
    a7a4:	80 93 4d 02 	sts	0x024D, r24
    a7a8:	09 c0       	rjmp	.+18     	; 0xa7bc <FMenuShift+0xac>
		       break; 			   		  
		  }
		  break;
     case msCloseShift:
	      SubMenu=FCloseShift(CONTINUE_SHIFT);
    a7aa:	82 e0       	ldi	r24, 0x02	; 2
    a7ac:	01 c0       	rjmp	.+2      	; 0xa7b0 <FMenuShift+0xa0>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
		  //IsGenerateReport=True;		  
	      break;
     case msCloseDay:
	      SubMenu=FCloseShift(NEW_SHIFT);
    a7ae:	81 e0       	ldi	r24, 0x01	; 1
    a7b0:	0e 94 8a 4a 	call	0x9514	; 0x9514 <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
    a7b4:	81 30       	cpi	r24, 0x01	; 1
    a7b6:	41 f4       	brne	.+16     	; 0xa7c8 <FMenuShift+0xb8>
    a7b8:	10 92 4d 02 	sts	0x024D, r1
    a7bc:	80 e0       	ldi	r24, 0x00	; 0
    a7be:	08 95       	ret
     case msLockPump:
	      SubMenu=FLockPump();
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
	      break;
     case msExitShift:
          stMenuShift=msInitMenuShift;
    a7c0:	10 92 4d 02 	sts	0x024D, r1
    a7c4:	81 e0       	ldi	r24, 0x01	; 1
    a7c6:	08 95       	ret
    a7c8:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 } 
   return Result;
}
    a7ca:	08 95       	ret

0000a7cc <system_stop>:
	return Result;
}

void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
    a7cc:	84 e0       	ldi	r24, 0x04	; 4
    a7ce:	61 e0       	ldi	r22, 0x01	; 1
    a7d0:	49 ea       	ldi	r20, 0xA9	; 169
    a7d2:	53 e2       	ldi	r21, 0x23	; 35
    a7d4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a7d8:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a7da:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a7dc:	85 e0       	ldi	r24, 0x05	; 5
    a7de:	80 93 be 01 	sts	0x01BE, r24
void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
	 system_beep(5);
	 while(1){
		__key = _key_scan(1);
    a7e2:	81 e0       	ldi	r24, 0x01	; 1
    a7e4:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		__num = _key_btn(__key);
    a7e8:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
    a7ec:	80 53       	subi	r24, 0x30	; 48
    a7ee:	8a 30       	cpi	r24, 0x0A	; 10
    a7f0:	20 f0       	brcs	.+8      	; 0xa7fa <system_stop+0x2e>
    a7f2:	80 91 9e 01 	lds	r24, 0x019E
    a7f6:	81 30       	cpi	r24, 0x01	; 1
    a7f8:	a1 f7       	brne	.-24     	; 0xa7e2 <system_stop+0x16>
    a7fa:	08 95       	ret

0000a7fc <systemForceType>:
	 }
}

char systemForceType(){
     char Result,KeyChar;
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
    a7fc:	84 e0       	ldi	r24, 0x04	; 4
    a7fe:	61 e0       	ldi	r22, 0x01	; 1
    a800:	4e eb       	ldi	r20, 0xBE	; 190
    a802:	53 e2       	ldi	r21, 0x23	; 35
    a804:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a808:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a80a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a80c:	81 e0       	ldi	r24, 0x01	; 1
    a80e:	80 93 be 01 	sts	0x01BE, r24
    a812:	80 e5       	ldi	r24, 0x50	; 80
    a814:	93 ec       	ldi	r25, 0xC3	; 195
    a816:	01 97       	sbiw	r24, 0x01	; 1
    a818:	f1 f7       	brne	.-4      	; 0xa816 <systemForceType+0x1a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a81a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a81c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a81e:	82 e0       	ldi	r24, 0x02	; 2
    a820:	80 93 be 01 	sts	0x01BE, r24
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
	 system_beep(1);
	 _delay_ms(200);
	 system_beep(2);
	 while(1){
	    KeyChar=_key_btn(_key_scan(1));
    a824:	81 e0       	ldi	r24, 0x01	; 1
    a826:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    a82a:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    a82e:	98 2f       	mov	r25, r24
		if ((KeyChar=='1')||(KeyChar=='2')){
    a830:	81 53       	subi	r24, 0x31	; 49
    a832:	82 30       	cpi	r24, 0x02	; 2
    a834:	b8 f7       	brcc	.-18     	; 0xa824 <systemForceType+0x28>
		    Result=KeyChar;
			break;
		}
	 }
	return Result;
}
    a836:	89 2f       	mov	r24, r25
    a838:	08 95       	ret

0000a83a <_menu_datetime>:
		}
	}
}


void _menu_datetime(void){
    a83a:	8f 92       	push	r8
    a83c:	9f 92       	push	r9
    a83e:	af 92       	push	r10
    a840:	bf 92       	push	r11
    a842:	cf 92       	push	r12
    a844:	df 92       	push	r13
    a846:	ef 92       	push	r14
    a848:	ff 92       	push	r15
    a84a:	0f 93       	push	r16
    a84c:	1f 93       	push	r17
    a84e:	df 93       	push	r29
    a850:	cf 93       	push	r28
    a852:	cd b7       	in	r28, 0x3d	; 61
    a854:	de b7       	in	r29, 0x3e	; 62
    a856:	c2 54       	subi	r28, 0x42	; 66
    a858:	d0 40       	sbci	r29, 0x00	; 0
    a85a:	0f b6       	in	r0, 0x3f	; 63
    a85c:	f8 94       	cli
    a85e:	de bf       	out	0x3e, r29	; 62
    a860:	0f be       	out	0x3f, r0	; 63
    a862:	cd bf       	out	0x3d, r28	; 61
	char	__key, __chr;
	char	__date[9];
	char	__time[9];
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};
    a864:	de 01       	movw	r26, r28
    a866:	53 96       	adiw	r26, 0x13	; 19
    a868:	e6 e2       	ldi	r30, 0x26	; 38
    a86a:	f1 e0       	ldi	r31, 0x01	; 1
    a86c:	80 e3       	ldi	r24, 0x30	; 48
    a86e:	01 90       	ld	r0, Z+
    a870:	0d 92       	st	X+, r0
    a872:	81 50       	subi	r24, 0x01	; 1
    a874:	e1 f7       	brne	.-8      	; 0xa86e <_menu_datetime+0x34>

	_datetime(_DATETIME_READ, __date, __time);
    a876:	8e 01       	movw	r16, r28
    a878:	0f 5f       	subi	r16, 0xFF	; 255
    a87a:	1f 4f       	sbci	r17, 0xFF	; 255
    a87c:	b8 01       	movw	r22, r16
    a87e:	ae 01       	movw	r20, r28
    a880:	46 5f       	subi	r20, 0xF6	; 246
    a882:	5f 4f       	sbci	r21, 0xFF	; 255
    a884:	0e 94 cd a8 	call	0x1519a	; 0x1519a <_datetime>
    a888:	85 e1       	ldi	r24, 0x15	; 21
    a88a:	88 2e       	mov	r8, r24
    a88c:	91 2c       	mov	r9, r1
    a88e:	8c 0e       	add	r8, r28
    a890:	9d 1e       	adc	r9, r29
    a892:	d4 01       	movw	r26, r8
    a894:	20 e0       	ldi	r18, 0x00	; 0
    a896:	30 e0       	ldi	r19, 0x00	; 0
    a898:	40 e0       	ldi	r20, 0x00	; 0
    a89a:	50 e0       	ldi	r21, 0x00	; 0
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
    a89c:	22 30       	cpi	r18, 0x02	; 2
    a89e:	31 05       	cpc	r19, r1
    a8a0:	19 f0       	breq	.+6      	; 0xa8a8 <_menu_datetime+0x6e>
    a8a2:	24 30       	cpi	r18, 0x04	; 4
    a8a4:	31 05       	cpc	r19, r1
    a8a6:	11 f4       	brne	.+4      	; 0xa8ac <_menu_datetime+0x72>
			__ii++;
    a8a8:	4f 5f       	subi	r20, 0xFF	; 255
    a8aa:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __date[__ii];
    a8ac:	f8 01       	movw	r30, r16
    a8ae:	e4 0f       	add	r30, r20
    a8b0:	f5 1f       	adc	r31, r21
    a8b2:	80 81       	ld	r24, Z
    a8b4:	8c 93       	st	X, r24
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    a8b6:	2f 5f       	subi	r18, 0xFF	; 255
    a8b8:	3f 4f       	sbci	r19, 0xFF	; 255
    a8ba:	14 96       	adiw	r26, 0x04	; 4
    a8bc:	26 30       	cpi	r18, 0x06	; 6
    a8be:	31 05       	cpc	r19, r1
    a8c0:	19 f0       	breq	.+6      	; 0xa8c8 <_menu_datetime+0x8e>
    a8c2:	4f 5f       	subi	r20, 0xFF	; 255
    a8c4:	5f 4f       	sbci	r21, 0xFF	; 255
    a8c6:	ea cf       	rjmp	.-44     	; 0xa89c <_menu_datetime+0x62>
    a8c8:	0d e2       	ldi	r16, 0x2D	; 45
    a8ca:	a0 2e       	mov	r10, r16
    a8cc:	b1 2c       	mov	r11, r1
    a8ce:	ac 0e       	add	r10, r28
    a8d0:	bd 1e       	adc	r11, r29
    a8d2:	d5 01       	movw	r26, r10
    a8d4:	40 e0       	ldi	r20, 0x00	; 0
    a8d6:	50 e0       	ldi	r21, 0x00	; 0
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
    a8d8:	1a e0       	ldi	r17, 0x0A	; 10
    a8da:	e1 2e       	mov	r14, r17
    a8dc:	f1 2c       	mov	r15, r1
    a8de:	ec 0e       	add	r14, r28
    a8e0:	fd 1e       	adc	r15, r29
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
    a8e2:	28 30       	cpi	r18, 0x08	; 8
    a8e4:	31 05       	cpc	r19, r1
    a8e6:	19 f0       	breq	.+6      	; 0xa8ee <_menu_datetime+0xb4>
    a8e8:	2a 30       	cpi	r18, 0x0A	; 10
    a8ea:	31 05       	cpc	r19, r1
    a8ec:	11 f4       	brne	.+4      	; 0xa8f2 <_menu_datetime+0xb8>
			__ii++;
    a8ee:	4f 5f       	subi	r20, 0xFF	; 255
    a8f0:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __time[__ii];
    a8f2:	f7 01       	movw	r30, r14
    a8f4:	e4 0f       	add	r30, r20
    a8f6:	f5 1f       	adc	r31, r21
    a8f8:	80 81       	ld	r24, Z
    a8fa:	8c 93       	st	X, r24
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    a8fc:	2f 5f       	subi	r18, 0xFF	; 255
    a8fe:	3f 4f       	sbci	r19, 0xFF	; 255
    a900:	14 96       	adiw	r26, 0x04	; 4
    a902:	2c 30       	cpi	r18, 0x0C	; 12
    a904:	31 05       	cpc	r19, r1
    a906:	19 f0       	breq	.+6      	; 0xa90e <_menu_datetime+0xd4>
    a908:	4f 5f       	subi	r20, 0xFF	; 255
    a90a:	5f 4f       	sbci	r21, 0xFF	; 255
    a90c:	ea cf       	rjmp	.-44     	; 0xa8e2 <_menu_datetime+0xa8>
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
	}

	lcd_clear();_delay_ms(10);
    a90e:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    a912:	84 ec       	ldi	r24, 0xC4	; 196
    a914:	99 e0       	ldi	r25, 0x09	; 9
    a916:	01 97       	sbiw	r24, 0x01	; 1
    a918:	f1 f7       	brne	.-4      	; 0xa916 <_menu_datetime+0xdc>
	lcd_printf(1, 1, PSTR("DATE : "));
    a91a:	81 e0       	ldi	r24, 0x01	; 1
    a91c:	61 e0       	ldi	r22, 0x01	; 1
    a91e:	4b e3       	ldi	r20, 0x3B	; 59
    a920:	5d e0       	ldi	r21, 0x0D	; 13
    a922:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_printf(2, 1, PSTR("TIME : "));
    a926:	82 e0       	ldi	r24, 0x02	; 2
    a928:	61 e0       	ldi	r22, 0x01	; 1
    a92a:	43 e3       	ldi	r20, 0x33	; 51
    a92c:	5d e0       	ldi	r21, 0x0D	; 13
    a92e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	lcd_print(1, 8, __date);
    a932:	81 e0       	ldi	r24, 0x01	; 1
    a934:	68 e0       	ldi	r22, 0x08	; 8
    a936:	8e 01       	movw	r16, r28
    a938:	0f 5f       	subi	r16, 0xFF	; 255
    a93a:	1f 4f       	sbci	r17, 0xFF	; 255
    a93c:	a8 01       	movw	r20, r16
    a93e:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	lcd_print(2, 8, __time);
    a942:	82 e0       	ldi	r24, 0x02	; 2
    a944:	68 e0       	ldi	r22, 0x08	; 8
    a946:	a7 01       	movw	r20, r14
    a948:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));
    a94c:	84 e0       	ldi	r24, 0x04	; 4
    a94e:	61 e0       	ldi	r22, 0x01	; 1
    a950:	4e e1       	ldi	r20, 0x1E	; 30
    a952:	5d e0       	ldi	r21, 0x0D	; 13
    a954:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>

	__i = 0;
	lcd_xy(__map[__i][0], __map[__i][1]);
    a958:	8b 89       	ldd	r24, Y+19	; 0x13
    a95a:	6c 89       	ldd	r22, Y+20	; 0x14
    a95c:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
	CURSOR_SHOW;
    a960:	8f e0       	ldi	r24, 0x0F	; 15
    a962:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
    a966:	ee 24       	eor	r14, r14
    a968:	ff 24       	eor	r15, r15
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    a96a:	68 01       	movw	r12, r16
	lcd_xy(__map[__i][0], __map[__i][1]);
	CURSOR_SHOW;

	while(1){
		
		__key = _key_scan(1);
    a96c:	81 e0       	ldi	r24, 0x01	; 1
    a96e:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    a972:	18 2f       	mov	r17, r24
		__chr = _key_btn(__key);
    a974:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    a978:	48 2f       	mov	r20, r24
		if(__chr >= 0x30 && __chr <= 0x39){
    a97a:	80 53       	subi	r24, 0x30	; 48
    a97c:	8a 30       	cpi	r24, 0x0A	; 10
    a97e:	08 f0       	brcs	.+2      	; 0xa982 <_menu_datetime+0x148>
    a980:	72 c0       	rjmp	.+228    	; 0xaa66 <_menu_datetime+0x22c>
			if(__i == 0 || __i == 2 || __i == 6 || __i == 8 || __i == 10){
    a982:	e1 14       	cp	r14, r1
    a984:	f1 04       	cpc	r15, r1
    a986:	81 f0       	breq	.+32     	; 0xa9a8 <_menu_datetime+0x16e>
    a988:	82 e0       	ldi	r24, 0x02	; 2
    a98a:	e8 16       	cp	r14, r24
    a98c:	f1 04       	cpc	r15, r1
    a98e:	61 f0       	breq	.+24     	; 0xa9a8 <_menu_datetime+0x16e>
    a990:	96 e0       	ldi	r25, 0x06	; 6
    a992:	e9 16       	cp	r14, r25
    a994:	f1 04       	cpc	r15, r1
    a996:	41 f0       	breq	.+16     	; 0xa9a8 <_menu_datetime+0x16e>
    a998:	a8 e0       	ldi	r26, 0x08	; 8
    a99a:	ea 16       	cp	r14, r26
    a99c:	f1 04       	cpc	r15, r1
    a99e:	21 f0       	breq	.+8      	; 0xa9a8 <_menu_datetime+0x16e>
    a9a0:	ba e0       	ldi	r27, 0x0A	; 10
    a9a2:	eb 16       	cp	r14, r27
    a9a4:	f1 04       	cpc	r15, r1
    a9a6:	81 f4       	brne	.+32     	; 0xa9c8 <_menu_datetime+0x18e>
				if((__chr - 0x30) <= __map[__i][3])
    a9a8:	84 2f       	mov	r24, r20
    a9aa:	90 e0       	ldi	r25, 0x00	; 0
    a9ac:	c0 97       	sbiw	r24, 0x30	; 48
    a9ae:	f7 01       	movw	r30, r14
    a9b0:	ee 0f       	add	r30, r30
    a9b2:	ff 1f       	adc	r31, r31
    a9b4:	ee 0f       	add	r30, r30
    a9b6:	ff 1f       	adc	r31, r31
    a9b8:	ec 0d       	add	r30, r12
    a9ba:	fd 1d       	adc	r31, r13
    a9bc:	25 89       	ldd	r18, Z+21	; 0x15
    a9be:	30 e0       	ldi	r19, 0x00	; 0
    a9c0:	28 17       	cp	r18, r24
    a9c2:	39 07       	cpc	r19, r25
    a9c4:	84 f5       	brge	.+96     	; 0xaa26 <_menu_datetime+0x1ec>
    a9c6:	4f c0       	rjmp	.+158    	; 0xaa66 <_menu_datetime+0x22c>
					goto CETAK;
				else
					goto LEWAT;
			}
			if(__i == 1){
    a9c8:	81 e0       	ldi	r24, 0x01	; 1
    a9ca:	e8 16       	cp	r14, r24
    a9cc:	f1 04       	cpc	r15, r1
    a9ce:	61 f4       	brne	.+24     	; 0xa9e8 <_menu_datetime+0x1ae>
				if((__map[0][2] - 0x30) < __map[0][3])
    a9d0:	2d 89       	ldd	r18, Y+21	; 0x15
    a9d2:	30 e0       	ldi	r19, 0x00	; 0
    a9d4:	2f 52       	subi	r18, 0x2F	; 47
    a9d6:	30 40       	sbci	r19, 0x00	; 0
    a9d8:	8e 89       	ldd	r24, Y+22	; 0x16
    a9da:	90 e0       	ldi	r25, 0x00	; 0
    a9dc:	82 17       	cp	r24, r18
    a9de:	93 07       	cpc	r25, r19
    a9e0:	14 f5       	brge	.+68     	; 0xaa26 <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[0][2] - 0x30) >= __map[0][3]){
					if(__chr < 0x32)
    a9e2:	42 33       	cpi	r20, 0x32	; 50
    a9e4:	00 f1       	brcs	.+64     	; 0xaa26 <_menu_datetime+0x1ec>
    a9e6:	3f c0       	rjmp	.+126    	; 0xaa66 <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 3){
    a9e8:	93 e0       	ldi	r25, 0x03	; 3
    a9ea:	e9 16       	cp	r14, r25
    a9ec:	f1 04       	cpc	r15, r1
    a9ee:	61 f4       	brne	.+24     	; 0xaa08 <_menu_datetime+0x1ce>
				if((__map[2][2] - 0x30) < __map[2][3])
    a9f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    a9f2:	30 e0       	ldi	r19, 0x00	; 0
    a9f4:	2f 52       	subi	r18, 0x2F	; 47
    a9f6:	30 40       	sbci	r19, 0x00	; 0
    a9f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    a9fa:	90 e0       	ldi	r25, 0x00	; 0
    a9fc:	82 17       	cp	r24, r18
    a9fe:	93 07       	cpc	r25, r19
    aa00:	94 f4       	brge	.+36     	; 0xaa26 <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[2][2] - 0x30) >= __map[2][3]){
					if(__chr < 0x33)
    aa02:	43 33       	cpi	r20, 0x33	; 51
    aa04:	80 f0       	brcs	.+32     	; 0xaa26 <_menu_datetime+0x1ec>
    aa06:	2f c0       	rjmp	.+94     	; 0xaa66 <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 7){
    aa08:	a7 e0       	ldi	r26, 0x07	; 7
    aa0a:	ea 16       	cp	r14, r26
    aa0c:	f1 04       	cpc	r15, r1
    aa0e:	59 f4       	brne	.+22     	; 0xaa26 <_menu_datetime+0x1ec>
				if((__map[6][2] - 0x30) < __map[6][3])
    aa10:	2d a5       	ldd	r18, Y+45	; 0x2d
    aa12:	30 e0       	ldi	r19, 0x00	; 0
    aa14:	2f 52       	subi	r18, 0x2F	; 47
    aa16:	30 40       	sbci	r19, 0x00	; 0
    aa18:	8e a5       	ldd	r24, Y+46	; 0x2e
    aa1a:	90 e0       	ldi	r25, 0x00	; 0
    aa1c:	82 17       	cp	r24, r18
    aa1e:	93 07       	cpc	r25, r19
    aa20:	14 f4       	brge	.+4      	; 0xaa26 <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[6][2] - 0x30) >= __map[6][3]){
					if(__chr < 0x34)
    aa22:	44 33       	cpi	r20, 0x34	; 52
    aa24:	00 f5       	brcc	.+64     	; 0xaa66 <_menu_datetime+0x22c>
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    aa26:	f7 01       	movw	r30, r14
    aa28:	ee 0f       	add	r30, r30
    aa2a:	ff 1f       	adc	r31, r31
    aa2c:	ee 0f       	add	r30, r30
    aa2e:	ff 1f       	adc	r31, r31
    aa30:	ec 0d       	add	r30, r12
    aa32:	fd 1d       	adc	r31, r13
    aa34:	44 8b       	std	Z+20, r20	; 0x14
			_lcd(__chr);
    aa36:	84 2f       	mov	r24, r20
    aa38:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
			__i++;
    aa3c:	08 94       	sec
    aa3e:	e1 1c       	adc	r14, r1
    aa40:	f1 1c       	adc	r15, r1
    aa42:	bc e0       	ldi	r27, 0x0C	; 12
    aa44:	eb 16       	cp	r14, r27
    aa46:	f1 04       	cpc	r15, r1
    aa48:	1c f0       	brlt	.+6      	; 0xaa50 <_menu_datetime+0x216>
    aa4a:	7b e0       	ldi	r23, 0x0B	; 11
    aa4c:	e7 2e       	mov	r14, r23
    aa4e:	f1 2c       	mov	r15, r1
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
    aa50:	f7 01       	movw	r30, r14
    aa52:	ee 0f       	add	r30, r30
    aa54:	ff 1f       	adc	r31, r31
    aa56:	ee 0f       	add	r30, r30
    aa58:	ff 1f       	adc	r31, r31
    aa5a:	ec 0d       	add	r30, r12
    aa5c:	fd 1d       	adc	r31, r13
    aa5e:	82 89       	ldd	r24, Z+18	; 0x12
    aa60:	63 89       	ldd	r22, Z+19	; 0x13
    aa62:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
LEWAT:		;
		}
		if(__key == _KEY_SHIFT){
    aa66:	1b 37       	cpi	r17, 0x7B	; 123
    aa68:	59 f4       	brne	.+22     	; 0xaa80 <_menu_datetime+0x246>
			__i++;
    aa6a:	08 94       	sec
    aa6c:	e1 1c       	adc	r14, r1
    aa6e:	f1 1c       	adc	r15, r1
    aa70:	8c e0       	ldi	r24, 0x0C	; 12
    aa72:	e8 16       	cp	r14, r24
    aa74:	f1 04       	cpc	r15, r1
    aa76:	6c f0       	brlt	.+26     	; 0xaa92 <_menu_datetime+0x258>
    aa78:	5b e0       	ldi	r21, 0x0B	; 11
    aa7a:	e5 2e       	mov	r14, r21
    aa7c:	f1 2c       	mov	r15, r1
    aa7e:	09 c0       	rjmp	.+18     	; 0xaa92 <_menu_datetime+0x258>
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CLEAR){
    aa80:	17 37       	cpi	r17, 0x77	; 119
    aa82:	99 f4       	brne	.+38     	; 0xaaaa <_menu_datetime+0x270>
			__i--;
    aa84:	08 94       	sec
    aa86:	e1 08       	sbc	r14, r1
    aa88:	f1 08       	sbc	r15, r1
    aa8a:	f7 fe       	sbrs	r15, 7
    aa8c:	02 c0       	rjmp	.+4      	; 0xaa92 <_menu_datetime+0x258>
    aa8e:	ee 24       	eor	r14, r14
    aa90:	ff 24       	eor	r15, r15
			if(__i <= 0)
				__i = 0;
			lcd_xy(__map[__i][0], __map[__i][1]);
    aa92:	f7 01       	movw	r30, r14
    aa94:	ee 0f       	add	r30, r30
    aa96:	ff 1f       	adc	r31, r31
    aa98:	ee 0f       	add	r30, r30
    aa9a:	ff 1f       	adc	r31, r31
    aa9c:	ec 0d       	add	r30, r12
    aa9e:	fd 1d       	adc	r31, r13
    aaa0:	82 89       	ldd	r24, Z+18	; 0x12
    aaa2:	63 89       	ldd	r22, Z+19	; 0x13
    aaa4:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
    aaa8:	61 cf       	rjmp	.-318    	; 0xa96c <_menu_datetime+0x132>
		}
		if(__key == _KEY_CANCEL)
    aaaa:	17 3e       	cpi	r17, 0xE7	; 231
    aaac:	09 f4       	brne	.+2      	; 0xaab0 <_menu_datetime+0x276>
    aaae:	49 c0       	rjmp	.+146    	; 0xab42 <_menu_datetime+0x308>
			break;
		if(__key == _KEY_ENTER){
    aab0:	17 3b       	cpi	r17, 0xB7	; 183
    aab2:	09 f0       	breq	.+2      	; 0xaab6 <_menu_datetime+0x27c>
    aab4:	5b cf       	rjmp	.-330    	; 0xa96c <_menu_datetime+0x132>
    aab6:	20 e0       	ldi	r18, 0x00	; 0
    aab8:	30 e0       	ldi	r19, 0x00	; 0
    aaba:	40 e0       	ldi	r20, 0x00	; 0
    aabc:	50 e0       	ldi	r21, 0x00	; 0
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
    aabe:	be 01       	movw	r22, r28
    aac0:	6f 5f       	subi	r22, 0xFF	; 255
    aac2:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
    aac4:	22 30       	cpi	r18, 0x02	; 2
    aac6:	31 05       	cpc	r19, r1
    aac8:	19 f0       	breq	.+6      	; 0xaad0 <_menu_datetime+0x296>
    aaca:	24 30       	cpi	r18, 0x04	; 4
    aacc:	31 05       	cpc	r19, r1
    aace:	11 f4       	brne	.+4      	; 0xaad4 <_menu_datetime+0x29a>
					__ii++;
    aad0:	4f 5f       	subi	r20, 0xFF	; 255
    aad2:	5f 4f       	sbci	r21, 0xFF	; 255
				__date[__ii] = __map[__i][2];
    aad4:	fb 01       	movw	r30, r22
    aad6:	e4 0f       	add	r30, r20
    aad8:	f5 1f       	adc	r31, r21
    aada:	d4 01       	movw	r26, r8
    aadc:	8c 91       	ld	r24, X
    aade:	80 83       	st	Z, r24
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    aae0:	2f 5f       	subi	r18, 0xFF	; 255
    aae2:	3f 4f       	sbci	r19, 0xFF	; 255
    aae4:	84 e0       	ldi	r24, 0x04	; 4
    aae6:	90 e0       	ldi	r25, 0x00	; 0
    aae8:	88 0e       	add	r8, r24
    aaea:	99 1e       	adc	r9, r25
    aaec:	26 30       	cpi	r18, 0x06	; 6
    aaee:	31 05       	cpc	r19, r1
    aaf0:	19 f0       	breq	.+6      	; 0xaaf8 <_menu_datetime+0x2be>
    aaf2:	4f 5f       	subi	r20, 0xFF	; 255
    aaf4:	5f 4f       	sbci	r21, 0xFF	; 255
    aaf6:	e6 cf       	rjmp	.-52     	; 0xaac4 <_menu_datetime+0x28a>
    aaf8:	60 e0       	ldi	r22, 0x00	; 0
    aafa:	70 e0       	ldi	r23, 0x00	; 0
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
    aafc:	ae 01       	movw	r20, r28
    aafe:	46 5f       	subi	r20, 0xF6	; 246
    ab00:	5f 4f       	sbci	r21, 0xFF	; 255
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
    ab02:	28 30       	cpi	r18, 0x08	; 8
    ab04:	31 05       	cpc	r19, r1
    ab06:	19 f0       	breq	.+6      	; 0xab0e <_menu_datetime+0x2d4>
    ab08:	2a 30       	cpi	r18, 0x0A	; 10
    ab0a:	31 05       	cpc	r19, r1
    ab0c:	11 f4       	brne	.+4      	; 0xab12 <_menu_datetime+0x2d8>
					__ii++;
    ab0e:	6f 5f       	subi	r22, 0xFF	; 255
    ab10:	7f 4f       	sbci	r23, 0xFF	; 255
				__time[__ii] = __map[__i][2];
    ab12:	fa 01       	movw	r30, r20
    ab14:	e6 0f       	add	r30, r22
    ab16:	f7 1f       	adc	r31, r23
    ab18:	d5 01       	movw	r26, r10
    ab1a:	8c 91       	ld	r24, X
    ab1c:	80 83       	st	Z, r24
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    ab1e:	2f 5f       	subi	r18, 0xFF	; 255
    ab20:	3f 4f       	sbci	r19, 0xFF	; 255
    ab22:	84 e0       	ldi	r24, 0x04	; 4
    ab24:	90 e0       	ldi	r25, 0x00	; 0
    ab26:	a8 0e       	add	r10, r24
    ab28:	b9 1e       	adc	r11, r25
    ab2a:	2c 30       	cpi	r18, 0x0C	; 12
    ab2c:	31 05       	cpc	r19, r1
    ab2e:	19 f0       	breq	.+6      	; 0xab36 <_menu_datetime+0x2fc>
    ab30:	6f 5f       	subi	r22, 0xFF	; 255
    ab32:	7f 4f       	sbci	r23, 0xFF	; 255
    ab34:	e6 cf       	rjmp	.-52     	; 0xab02 <_menu_datetime+0x2c8>
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
			}
			_datetime(_DATETIME_WRITE, __date, __time);
    ab36:	81 e0       	ldi	r24, 0x01	; 1
    ab38:	be 01       	movw	r22, r28
    ab3a:	6f 5f       	subi	r22, 0xFF	; 255
    ab3c:	7f 4f       	sbci	r23, 0xFF	; 255
    ab3e:	0e 94 cd a8 	call	0x1519a	; 0x1519a <_datetime>
			break;
		}
	}
	CURSOR_HIDE;
    ab42:	8c e0       	ldi	r24, 0x0C	; 12
    ab44:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
}
    ab48:	ce 5b       	subi	r28, 0xBE	; 190
    ab4a:	df 4f       	sbci	r29, 0xFF	; 255
    ab4c:	0f b6       	in	r0, 0x3f	; 63
    ab4e:	f8 94       	cli
    ab50:	de bf       	out	0x3e, r29	; 62
    ab52:	0f be       	out	0x3f, r0	; 63
    ab54:	cd bf       	out	0x3d, r28	; 61
    ab56:	cf 91       	pop	r28
    ab58:	df 91       	pop	r29
    ab5a:	1f 91       	pop	r17
    ab5c:	0f 91       	pop	r16
    ab5e:	ff 90       	pop	r15
    ab60:	ef 90       	pop	r14
    ab62:	df 90       	pop	r13
    ab64:	cf 90       	pop	r12
    ab66:	bf 90       	pop	r11
    ab68:	af 90       	pop	r10
    ab6a:	9f 90       	pop	r9
    ab6c:	8f 90       	pop	r8
    ab6e:	08 95       	ret

0000ab70 <FSettingDatetime>:
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    ab70:	0e 94 1d 54 	call	0xa83a	; 0xa83a <_menu_datetime>
     return MENU_DONE;
}
    ab74:	81 e0       	ldi	r24, 0x01	; 1
    ab76:	08 95       	ret

0000ab78 <menu_FIP>:
	 }
  return Result;
}


char menu_FIP(char *xFIP,char *sFIPUsed){
    ab78:	4f 92       	push	r4
    ab7a:	5f 92       	push	r5
    ab7c:	6f 92       	push	r6
    ab7e:	7f 92       	push	r7
    ab80:	8f 92       	push	r8
    ab82:	9f 92       	push	r9
    ab84:	af 92       	push	r10
    ab86:	bf 92       	push	r11
    ab88:	cf 92       	push	r12
    ab8a:	df 92       	push	r13
    ab8c:	ef 92       	push	r14
    ab8e:	ff 92       	push	r15
    ab90:	0f 93       	push	r16
    ab92:	1f 93       	push	r17
    ab94:	df 93       	push	r29
    ab96:	cf 93       	push	r28
    ab98:	cd b7       	in	r28, 0x3d	; 61
    ab9a:	de b7       	in	r29, 0x3e	; 62
    ab9c:	a2 97       	sbiw	r28, 0x22	; 34
    ab9e:	0f b6       	in	r0, 0x3f	; 63
    aba0:	f8 94       	cli
    aba2:	de bf       	out	0x3e, r29	; 62
    aba4:	0f be       	out	0x3f, r0	; 63
    aba6:	cd bf       	out	0x3d, r28	; 61
    aba8:	7c 01       	movw	r14, r24
    abaa:	6b 01       	movw	r12, r22

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
       char FIP[8],strPumpL[3],strPumpR[3],lcdteks[20];

	   if (IsMenuFIPInit==True){
    abac:	80 91 90 01 	lds	r24, 0x0190
    abb0:	81 30       	cpi	r24, 0x01	; 1
    abb2:	21 f4       	brne	.+8      	; 0xabbc <menu_FIP+0x44>
	       IsMenuFIPInit=False;
    abb4:	10 92 90 01 	sts	0x0190, r1
		   stEnterFIP=efInit;
    abb8:	10 92 6f 02 	sts	0x026F, r1
	   
	   }

       switch(stEnterFIP){
    abbc:	80 91 6f 02 	lds	r24, 0x026F
    abc0:	81 30       	cpi	r24, 0x01	; 1
    abc2:	09 f4       	brne	.+2      	; 0xabc6 <menu_FIP+0x4e>
    abc4:	cd c0       	rjmp	.+410    	; 0xad60 <menu_FIP+0x1e8>
    abc6:	81 30       	cpi	r24, 0x01	; 1
    abc8:	20 f0       	brcs	.+8      	; 0xabd2 <menu_FIP+0x5a>
    abca:	82 30       	cpi	r24, 0x02	; 2
    abcc:	09 f0       	breq	.+2      	; 0xabd0 <menu_FIP+0x58>
    abce:	4a c1       	rjmp	.+660    	; 0xae64 <menu_FIP+0x2ec>
    abd0:	47 c1       	rjmp	.+654    	; 0xae60 <menu_FIP+0x2e8>
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
    abd2:	8e 01       	movw	r16, r28
    abd4:	09 5f       	subi	r16, 0xF9	; 249
    abd6:	1f 4f       	sbci	r17, 0xFF	; 255
    abd8:	c8 01       	movw	r24, r16
    abda:	6a e4       	ldi	r22, 0x4A	; 74
    abdc:	70 e0       	ldi	r23, 0x00	; 0
    abde:	48 e0       	ldi	r20, 0x08	; 8
    abe0:	50 e0       	ldi	r21, 0x00	; 0
    abe2:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		    lcd_clear(); 
    abe6:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    abea:	f8 01       	movw	r30, r16
    abec:	20 e0       	ldi	r18, 0x00	; 0
    abee:	30 e0       	ldi	r19, 0x00	; 0
    abf0:	07 c0       	rjmp	.+14     	; 0xac00 <menu_FIP+0x88>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
    abf2:	80 81       	ld	r24, Z
    abf4:	84 36       	cpi	r24, 0x64	; 100
    abf6:	08 f0       	brcs	.+2      	; 0xabfa <menu_FIP+0x82>
    abf8:	10 82       	st	Z, r1
    abfa:	2f 5f       	subi	r18, 0xFF	; 255
    abfc:	3f 4f       	sbci	r19, 0xFF	; 255
    abfe:	31 96       	adiw	r30, 0x01	; 1

       switch(stEnterFIP){
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
    ac00:	28 30       	cpi	r18, 0x08	; 8
    ac02:	31 05       	cpc	r19, r1
    ac04:	b0 f3       	brcs	.-20     	; 0xabf2 <menu_FIP+0x7a>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    ac06:	10 92 6d 02 	sts	0x026D, r1
    ac0a:	10 92 6c 02 	sts	0x026C, r1
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    ac0e:	5e 01       	movw	r10, r28
    ac10:	08 94       	sec
    ac12:	a1 1c       	adc	r10, r1
    ac14:	b1 1c       	adc	r11, r1
    ac16:	5b ee       	ldi	r21, 0xEB	; 235
    ac18:	c5 2e       	mov	r12, r21
    ac1a:	5e e0       	ldi	r21, 0x0E	; 14
    ac1c:	d5 2e       	mov	r13, r21
    ac1e:	47 e0       	ldi	r20, 0x07	; 7
    ac20:	44 2e       	mov	r4, r20
    ac22:	51 2c       	mov	r5, r1
    ac24:	4c 0e       	add	r4, r28
    ac26:	5d 1e       	adc	r5, r29
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    ac28:	34 e0       	ldi	r19, 0x04	; 4
    ac2a:	e3 2e       	mov	r14, r19
    ac2c:	f1 2c       	mov	r15, r1
    ac2e:	ec 0e       	add	r14, r28
    ac30:	fd 1e       	adc	r15, r29
    ac32:	2b e0       	ldi	r18, 0x0B	; 11
    ac34:	62 2e       	mov	r6, r18
    ac36:	71 2c       	mov	r7, r1
    ac38:	6c 0e       	add	r6, r28
    ac3a:	7d 1e       	adc	r7, r29
    ac3c:	8e 01       	movw	r16, r28
    ac3e:	01 5f       	subi	r16, 0xF1	; 241
    ac40:	1f 4f       	sbci	r17, 0xFF	; 255
    ac42:	99 ef       	ldi	r25, 0xF9	; 249
    ac44:	89 2e       	mov	r8, r25
    ac46:	9d e1       	ldi	r25, 0x1D	; 29
    ac48:	99 2e       	mov	r9, r25
    ac4a:	64 c0       	rjmp	.+200    	; 0xad14 <menu_FIP+0x19c>
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    ac4c:	00 d0       	rcall	.+0      	; 0xac4e <menu_FIP+0xd6>
    ac4e:	00 d0       	rcall	.+0      	; 0xac50 <menu_FIP+0xd8>
    ac50:	00 d0       	rcall	.+0      	; 0xac52 <menu_FIP+0xda>
    ac52:	2d b7       	in	r18, 0x3d	; 61
    ac54:	3e b7       	in	r19, 0x3e	; 62
    ac56:	2f 5f       	subi	r18, 0xFF	; 255
    ac58:	3f 4f       	sbci	r19, 0xFF	; 255
    ac5a:	ed b7       	in	r30, 0x3d	; 61
    ac5c:	fe b7       	in	r31, 0x3e	; 62
    ac5e:	b2 82       	std	Z+2, r11	; 0x02
    ac60:	a1 82       	std	Z+1, r10	; 0x01
    ac62:	f9 01       	movw	r30, r18
    ac64:	d3 82       	std	Z+3, r13	; 0x03
    ac66:	c2 82       	std	Z+2, r12	; 0x02
    ac68:	a4 0d       	add	r26, r4
    ac6a:	b5 1d       	adc	r27, r5
    ac6c:	8c 91       	ld	r24, X
    ac6e:	84 83       	std	Z+4, r24	; 0x04
    ac70:	15 82       	std	Z+5, r1	; 0x05
    ac72:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    ac76:	ad b7       	in	r26, 0x3d	; 61
    ac78:	be b7       	in	r27, 0x3e	; 62
    ac7a:	11 96       	adiw	r26, 0x01	; 1
    ac7c:	ed b7       	in	r30, 0x3d	; 61
    ac7e:	fe b7       	in	r31, 0x3e	; 62
    ac80:	f2 82       	std	Z+2, r15	; 0x02
    ac82:	e1 82       	std	Z+1, r14	; 0x01
    ac84:	13 96       	adiw	r26, 0x03	; 3
    ac86:	dc 92       	st	X, r13
    ac88:	ce 92       	st	-X, r12
    ac8a:	12 97       	sbiw	r26, 0x02	; 2
    ac8c:	e0 91 6c 02 	lds	r30, 0x026C
    ac90:	f0 91 6d 02 	lds	r31, 0x026D
    ac94:	e6 0d       	add	r30, r6
    ac96:	f7 1d       	adc	r31, r7
    ac98:	80 81       	ld	r24, Z
    ac9a:	14 96       	adiw	r26, 0x04	; 4
    ac9c:	8c 93       	st	X, r24
    ac9e:	14 97       	sbiw	r26, 0x04	; 4
    aca0:	15 96       	adiw	r26, 0x05	; 5
    aca2:	1c 92       	st	X, r1
    aca4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    aca8:	80 91 6c 02 	lds	r24, 0x026C
    acac:	90 91 6d 02 	lds	r25, 0x026D
    acb0:	00 d0       	rcall	.+0      	; 0xacb2 <menu_FIP+0x13a>
    acb2:	00 d0       	rcall	.+0      	; 0xacb4 <menu_FIP+0x13c>
    acb4:	00 d0       	rcall	.+0      	; 0xacb6 <menu_FIP+0x13e>
    acb6:	ed b7       	in	r30, 0x3d	; 61
    acb8:	fe b7       	in	r31, 0x3e	; 62
    acba:	31 96       	adiw	r30, 0x01	; 1
    acbc:	ad b7       	in	r26, 0x3d	; 61
    acbe:	be b7       	in	r27, 0x3e	; 62
    acc0:	12 96       	adiw	r26, 0x02	; 2
    acc2:	1c 93       	st	X, r17
    acc4:	0e 93       	st	-X, r16
    acc6:	11 97       	sbiw	r26, 0x01	; 1
    acc8:	93 82       	std	Z+3, r9	; 0x03
    acca:	82 82       	std	Z+2, r8	; 0x02
    accc:	01 96       	adiw	r24, 0x01	; 1
    acce:	95 83       	std	Z+5, r25	; 0x05
    acd0:	84 83       	std	Z+4, r24	; 0x04
    acd2:	b7 82       	std	Z+7, r11	; 0x07
    acd4:	a6 82       	std	Z+6, r10	; 0x06
    acd6:	04 96       	adiw	r24, 0x04	; 4
    acd8:	91 87       	std	Z+9, r25	; 0x09
    acda:	80 87       	std	Z+8, r24	; 0x08
    acdc:	f3 86       	std	Z+11, r15	; 0x0b
    acde:	e2 86       	std	Z+10, r14	; 0x0a
    ace0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			    lcd_print((iLoop+1),1,lcdteks);
    ace4:	ed b7       	in	r30, 0x3d	; 61
    ace6:	fe b7       	in	r31, 0x3e	; 62
    ace8:	3c 96       	adiw	r30, 0x0c	; 12
    acea:	0f b6       	in	r0, 0x3f	; 63
    acec:	f8 94       	cli
    acee:	fe bf       	out	0x3e, r31	; 62
    acf0:	0f be       	out	0x3f, r0	; 63
    acf2:	ed bf       	out	0x3d, r30	; 61
    acf4:	80 91 6c 02 	lds	r24, 0x026C
    acf8:	8f 5f       	subi	r24, 0xFF	; 255
    acfa:	61 e0       	ldi	r22, 0x01	; 1
    acfc:	a8 01       	movw	r20, r16
    acfe:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    ad02:	80 91 6c 02 	lds	r24, 0x026C
    ad06:	90 91 6d 02 	lds	r25, 0x026D
    ad0a:	01 96       	adiw	r24, 0x01	; 1
    ad0c:	90 93 6d 02 	sts	0x026D, r25
    ad10:	80 93 6c 02 	sts	0x026C, r24
    ad14:	a0 91 6c 02 	lds	r26, 0x026C
    ad18:	b0 91 6d 02 	lds	r27, 0x026D
    ad1c:	a4 30       	cpi	r26, 0x04	; 4
    ad1e:	b1 05       	cpc	r27, r1
    ad20:	08 f4       	brcc	.+2      	; 0xad24 <menu_FIP+0x1ac>
    ad22:	94 cf       	rjmp	.-216    	; 0xac4c <menu_FIP+0xd4>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
			    lcd_print((iLoop+1),1,lcdteks);
			}
		    lcd_printf(1,15,PSTR("FIP:_"));    //"1.P01 | 5.P05 FIP:_ "                                                                      
    ad24:	81 e0       	ldi	r24, 0x01	; 1
    ad26:	6f e0       	ldi	r22, 0x0F	; 15
    ad28:	43 ef       	ldi	r20, 0xF3	; 243
    ad2a:	5d e1       	ldi	r21, 0x1D	; 29
    ad2c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		    lcd_printf(2,15,PSTR("     "));    //"2.P02 | 6.P05       "
    ad30:	82 e0       	ldi	r24, 0x02	; 2
    ad32:	6f e0       	ldi	r22, 0x0F	; 15
    ad34:	4d ee       	ldi	r20, 0xED	; 237
    ad36:	5d e1       	ldi	r21, 0x1D	; 29
    ad38:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		    lcd_printf(3,15,PSTR("#)OK "));    //"3.P03 | 7.P07 #)OK  "
    ad3c:	83 e0       	ldi	r24, 0x03	; 3
    ad3e:	6f e0       	ldi	r22, 0x0F	; 15
    ad40:	47 ee       	ldi	r20, 0xE7	; 231
    ad42:	5d e1       	ldi	r21, 0x1D	; 29
    ad44:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	        lcd_printf(4,15,PSTR("*)Exit"));   //"4.P04 | 8.P08 *)Exit"				
    ad48:	84 e0       	ldi	r24, 0x04	; 4
    ad4a:	6f e0       	ldi	r22, 0x0F	; 15
    ad4c:	40 ee       	ldi	r20, 0xE0	; 224
    ad4e:	5d e1       	ldi	r21, 0x1D	; 29
    ad50:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		    iLoop=0;
    ad54:	10 92 6d 02 	sts	0x026D, r1
    ad58:	10 92 6c 02 	sts	0x026C, r1
		    stEnterFIP=efFIPInput;
    ad5c:	81 e0       	ldi	r24, 0x01	; 1
    ad5e:	7d c0       	rjmp	.+250    	; 0xae5a <menu_FIP+0x2e2>
	        break;
	   case efFIPInput:
		    iLoop++;
    ad60:	80 91 6c 02 	lds	r24, 0x026C
    ad64:	90 91 6d 02 	lds	r25, 0x026D
    ad68:	01 96       	adiw	r24, 0x01	; 1
    ad6a:	90 93 6d 02 	sts	0x026D, r25
    ad6e:	80 93 6c 02 	sts	0x026C, r24
		    KeyPressed=_key_scan(1);
    ad72:	81 e0       	ldi	r24, 0x01	; 1
    ad74:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    ad78:	08 2f       	mov	r16, r24
		    KeyChar=_key_btn(KeyPressed);
    ad7a:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    ad7e:	98 2f       	mov	r25, r24
		    if ((KeyChar>='1')&&(KeyChar<='8')){
    ad80:	18 2f       	mov	r17, r24
    ad82:	11 53       	subi	r17, 0x31	; 49
    ad84:	18 30       	cpi	r17, 0x08	; 8
    ad86:	60 f4       	brcc	.+24     	; 0xada0 <menu_FIP+0x228>
		 	     if (KeyCharLast!=KeyChar){
    ad88:	80 91 5a 01 	lds	r24, 0x015A
    ad8c:	89 17       	cp	r24, r25
    ad8e:	41 f0       	breq	.+16     	; 0xada0 <menu_FIP+0x228>
				     KeyCharLast=KeyChar;
    ad90:	90 93 5a 01 	sts	0x015A, r25
				     iLoop=1000;
    ad94:	88 ee       	ldi	r24, 0xE8	; 232
    ad96:	93 e0       	ldi	r25, 0x03	; 3
    ad98:	90 93 6d 02 	sts	0x026D, r25
    ad9c:	80 93 6c 02 	sts	0x026C, r24
                 }
		    }
 		    if ((iLoop%2000)==0){
    ada0:	80 91 6c 02 	lds	r24, 0x026C
    ada4:	90 91 6d 02 	lds	r25, 0x026D
    ada8:	60 ed       	ldi	r22, 0xD0	; 208
    adaa:	77 e0       	ldi	r23, 0x07	; 7
    adac:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    adb0:	89 2b       	or	r24, r25
    adb2:	39 f4       	brne	.+14     	; 0xadc2 <menu_FIP+0x24a>
		        lcd_xy(1,19);_lcd('_'); 
    adb4:	81 e0       	ldi	r24, 0x01	; 1
    adb6:	63 e1       	ldi	r22, 0x13	; 19
    adb8:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
    adbc:	8f e5       	ldi	r24, 0x5F	; 95
    adbe:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
			   }
           if ((iLoop%2000)==1000){
    adc2:	80 91 6c 02 	lds	r24, 0x026C
    adc6:	90 91 6d 02 	lds	r25, 0x026D
    adca:	60 ed       	ldi	r22, 0xD0	; 208
    adcc:	77 e0       	ldi	r23, 0x07	; 7
    adce:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    add2:	88 5e       	subi	r24, 0xE8	; 232
    add4:	93 40       	sbci	r25, 0x03	; 3
    add6:	41 f4       	brne	.+16     	; 0xade8 <menu_FIP+0x270>
			    lcd_xy(1,19);_lcd(KeyCharLast); 
    add8:	81 e0       	ldi	r24, 0x01	; 1
    adda:	63 e1       	ldi	r22, 0x13	; 19
    addc:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
    ade0:	80 91 5a 01 	lds	r24, 0x015A
    ade4:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
			   }

		   if (((KeyChar>='1')&&(KeyChar<='8'))||(KeyPressed==_KEY_ENTER)&&(KeyCharLast!=' ')){ 
    ade8:	18 30       	cpi	r17, 0x08	; 8
    adea:	30 f0       	brcs	.+12     	; 0xadf8 <menu_FIP+0x280>
    adec:	07 3b       	cpi	r16, 0xB7	; 183
    adee:	91 f5       	brne	.+100    	; 0xae54 <menu_FIP+0x2dc>
    adf0:	80 91 5a 01 	lds	r24, 0x015A
    adf4:	80 32       	cpi	r24, 0x20	; 32
    adf6:	b1 f1       	breq	.+108    	; 0xae64 <menu_FIP+0x2ec>
		         FIP_Used=FIP[KeyCharLast-'1'];
    adf8:	80 91 5a 01 	lds	r24, 0x015A
    adfc:	fe 01       	movw	r30, r28
    adfe:	ba 97       	sbiw	r30, 0x2a	; 42
    ae00:	e8 0f       	add	r30, r24
    ae02:	f1 1d       	adc	r31, r1
    ae04:	20 81       	ld	r18, Z
    ae06:	20 93 6e 02 	sts	0x026E, r18
				 if (FIP_Used<=99){
    ae0a:	24 36       	cpi	r18, 0x64	; 100
    ae0c:	f0 f4       	brcc	.+60     	; 0xae4a <menu_FIP+0x2d2>
                     //leadingZero(FIP_Used,sFIPUsed);
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
    ae0e:	d7 01       	movw	r26, r14
    ae10:	2c 93       	st	X, r18
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);
    ae12:	00 d0       	rcall	.+0      	; 0xae14 <menu_FIP+0x29c>
    ae14:	00 d0       	rcall	.+0      	; 0xae16 <menu_FIP+0x29e>
    ae16:	00 d0       	rcall	.+0      	; 0xae18 <menu_FIP+0x2a0>
    ae18:	ed b7       	in	r30, 0x3d	; 61
    ae1a:	fe b7       	in	r31, 0x3e	; 62
    ae1c:	31 96       	adiw	r30, 0x01	; 1
    ae1e:	ad b7       	in	r26, 0x3d	; 61
    ae20:	be b7       	in	r27, 0x3e	; 62
    ae22:	12 96       	adiw	r26, 0x02	; 2
    ae24:	dc 92       	st	X, r13
    ae26:	ce 92       	st	-X, r12
    ae28:	11 97       	sbiw	r26, 0x01	; 1
    ae2a:	8b ed       	ldi	r24, 0xDB	; 219
    ae2c:	9d e1       	ldi	r25, 0x1D	; 29
    ae2e:	93 83       	std	Z+3, r25	; 0x03
    ae30:	82 83       	std	Z+2, r24	; 0x02
    ae32:	24 83       	std	Z+4, r18	; 0x04
    ae34:	15 82       	std	Z+5, r1	; 0x05
    ae36:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    ae3a:	ed b7       	in	r30, 0x3d	; 61
    ae3c:	fe b7       	in	r31, 0x3e	; 62
    ae3e:	36 96       	adiw	r30, 0x06	; 6
    ae40:	0f b6       	in	r0, 0x3f	; 63
    ae42:	f8 94       	cli
    ae44:	fe bf       	out	0x3e, r31	; 62
    ae46:	0f be       	out	0x3f, r0	; 63
    ae48:	ed bf       	out	0x3d, r30	; 61

					 }
				 Result=FIP_DONE;
                 stEnterFIP=efExitFIPInput;
    ae4a:	82 e0       	ldi	r24, 0x02	; 2
    ae4c:	80 93 6f 02 	sts	0x026F, r24
    ae50:	80 e0       	ldi	r24, 0x00	; 0
    ae52:	09 c0       	rjmp	.+18     	; 0xae66 <menu_FIP+0x2ee>
		   }
		   else
		   if (KeyPressed==_KEY_CANCEL){
    ae54:	07 3e       	cpi	r16, 0xE7	; 231
    ae56:	31 f4       	brne	.+12     	; 0xae64 <menu_FIP+0x2ec>
               Result=FIP_CANCEL;
			   stEnterFIP=efExitFIPInput;
    ae58:	82 e0       	ldi	r24, 0x02	; 2
    ae5a:	80 93 6f 02 	sts	0x026F, r24
    ae5e:	03 c0       	rjmp	.+6      	; 0xae66 <menu_FIP+0x2ee>
		   }
	       break;
      case efExitFIPInput:
           stEnterFIP=efInit;
    ae60:	10 92 6f 02 	sts	0x026F, r1
    ae64:	81 e0       	ldi	r24, 0x01	; 1
	       break;
	 }
return Result;
}
    ae66:	a2 96       	adiw	r28, 0x22	; 34
    ae68:	0f b6       	in	r0, 0x3f	; 63
    ae6a:	f8 94       	cli
    ae6c:	de bf       	out	0x3e, r29	; 62
    ae6e:	0f be       	out	0x3f, r0	; 63
    ae70:	cd bf       	out	0x3d, r28	; 61
    ae72:	cf 91       	pop	r28
    ae74:	df 91       	pop	r29
    ae76:	1f 91       	pop	r17
    ae78:	0f 91       	pop	r16
    ae7a:	ff 90       	pop	r15
    ae7c:	ef 90       	pop	r14
    ae7e:	df 90       	pop	r13
    ae80:	cf 90       	pop	r12
    ae82:	bf 90       	pop	r11
    ae84:	af 90       	pop	r10
    ae86:	9f 90       	pop	r9
    ae88:	8f 90       	pop	r8
    ae8a:	7f 90       	pop	r7
    ae8c:	6f 90       	pop	r6
    ae8e:	5f 90       	pop	r5
    ae90:	4f 90       	pop	r4
    ae92:	08 95       	ret

0000ae94 <FMenuSettingServerIP>:
		       break;     
		  }//EndSwitch	 
    return Result;
}

char FMenuSettingServerIP(){
    ae94:	ff 92       	push	r15
    ae96:	0f 93       	push	r16
    ae98:	1f 93       	push	r17
    ae9a:	df 93       	push	r29
    ae9c:	cf 93       	push	r28
    ae9e:	cd b7       	in	r28, 0x3d	; 61
    aea0:	de b7       	in	r29, 0x3e	; 62
    aea2:	64 97       	sbiw	r28, 0x14	; 20
    aea4:	0f b6       	in	r0, 0x3f	; 63
    aea6:	f8 94       	cli
    aea8:	de bf       	out	0x3e, r29	; 62
    aeaa:	0f be       	out	0x3f, r0	; 63
    aeac:	cd bf       	out	0x3d, r28	; 61
     //Server IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
	 Result=MENU_NONE;
    aeae:	10 92 31 02 	sts	0x0231, r1
     switch(stClientIP){
    aeb2:	80 91 58 01 	lds	r24, 0x0158
    aeb6:	82 30       	cpi	r24, 0x02	; 2
    aeb8:	09 f4       	brne	.+2      	; 0xaebc <FMenuSettingServerIP+0x28>
    aeba:	79 c0       	rjmp	.+242    	; 0xafae <FMenuSettingServerIP+0x11a>
    aebc:	83 30       	cpi	r24, 0x03	; 3
    aebe:	20 f4       	brcc	.+8      	; 0xaec8 <FMenuSettingServerIP+0x34>
    aec0:	81 30       	cpi	r24, 0x01	; 1
    aec2:	09 f0       	breq	.+2      	; 0xaec6 <FMenuSettingServerIP+0x32>
    aec4:	5e c2       	rjmp	.+1212   	; 0xb382 <FMenuSettingServerIP+0x4ee>
    aec6:	07 c0       	rjmp	.+14     	; 0xaed6 <FMenuSettingServerIP+0x42>
    aec8:	83 30       	cpi	r24, 0x03	; 3
    aeca:	09 f4       	brne	.+2      	; 0xaece <FMenuSettingServerIP+0x3a>
    aecc:	55 c2       	rjmp	.+1194   	; 0xb378 <FMenuSettingServerIP+0x4e4>
    aece:	84 30       	cpi	r24, 0x04	; 4
    aed0:	09 f0       	breq	.+2      	; 0xaed4 <FMenuSettingServerIP+0x40>
    aed2:	57 c2       	rjmp	.+1198   	; 0xb382 <FMenuSettingServerIP+0x4ee>
    aed4:	45 c2       	rjmp	.+1162   	; 0xb360 <FMenuSettingServerIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    aed6:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	           lcd_printf(1,1,PSTR("Server IP"));
    aeda:	81 e0       	ldi	r24, 0x01	; 1
    aedc:	61 e0       	ldi	r22, 0x01	; 1
    aede:	43 ea       	ldi	r20, 0xA3	; 163
    aee0:	54 e1       	ldi	r21, 0x14	; 20
    aee2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefServerIP,4);
    aee6:	8a e2       	ldi	r24, 0x2A	; 42
    aee8:	92 e0       	ldi	r25, 0x02	; 2
    aeea:	6c e2       	ldi	r22, 0x2C	; 44
    aeec:	70 e0       	ldi	r23, 0x00	; 0
    aeee:	44 e0       	ldi	r20, 0x04	; 4
    aef0:	50 e0       	ldi	r21, 0x00	; 0
    aef2:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    aef6:	8d b7       	in	r24, 0x3d	; 61
    aef8:	9e b7       	in	r25, 0x3e	; 62
    aefa:	0c 97       	sbiw	r24, 0x0c	; 12
    aefc:	0f b6       	in	r0, 0x3f	; 63
    aefe:	f8 94       	cli
    af00:	9e bf       	out	0x3e, r25	; 62
    af02:	0f be       	out	0x3f, r0	; 63
    af04:	8d bf       	out	0x3d, r24	; 61
    af06:	ed b7       	in	r30, 0x3d	; 61
    af08:	fe b7       	in	r31, 0x3e	; 62
    af0a:	31 96       	adiw	r30, 0x01	; 1
    af0c:	8e 01       	movw	r16, r28
    af0e:	0f 5f       	subi	r16, 0xFF	; 255
    af10:	1f 4f       	sbci	r17, 0xFF	; 255
    af12:	ad b7       	in	r26, 0x3d	; 61
    af14:	be b7       	in	r27, 0x3e	; 62
    af16:	12 96       	adiw	r26, 0x02	; 2
    af18:	1c 93       	st	X, r17
    af1a:	0e 93       	st	-X, r16
    af1c:	11 97       	sbiw	r26, 0x01	; 1
    af1e:	82 e9       	ldi	r24, 0x92	; 146
    af20:	94 e1       	ldi	r25, 0x14	; 20
    af22:	93 83       	std	Z+3, r25	; 0x03
    af24:	82 83       	std	Z+2, r24	; 0x02
    af26:	80 91 2a 02 	lds	r24, 0x022A
    af2a:	84 83       	std	Z+4, r24	; 0x04
    af2c:	15 82       	std	Z+5, r1	; 0x05
    af2e:	80 91 2b 02 	lds	r24, 0x022B
    af32:	86 83       	std	Z+6, r24	; 0x06
    af34:	17 82       	std	Z+7, r1	; 0x07
    af36:	80 91 2c 02 	lds	r24, 0x022C
    af3a:	80 87       	std	Z+8, r24	; 0x08
    af3c:	11 86       	std	Z+9, r1	; 0x09
    af3e:	80 91 2d 02 	lds	r24, 0x022D
    af42:	82 87       	std	Z+10, r24	; 0x0a
    af44:	13 86       	std	Z+11, r1	; 0x0b
    af46:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    af4a:	ed b7       	in	r30, 0x3d	; 61
    af4c:	fe b7       	in	r31, 0x3e	; 62
    af4e:	3c 96       	adiw	r30, 0x0c	; 12
    af50:	0f b6       	in	r0, 0x3f	; 63
    af52:	f8 94       	cli
    af54:	fe bf       	out	0x3e, r31	; 62
    af56:	0f be       	out	0x3f, r0	; 63
    af58:	ed bf       	out	0x3d, r30	; 61
    af5a:	82 e0       	ldi	r24, 0x02	; 2
    af5c:	61 e0       	ldi	r22, 0x01	; 1
    af5e:	a8 01       	movw	r20, r16
    af60:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    af64:	83 e0       	ldi	r24, 0x03	; 3
    af66:	61 e0       	ldi	r22, 0x01	; 1
    af68:	4d e7       	ldi	r20, 0x7D	; 125
    af6a:	54 e1       	ldi	r21, 0x14	; 20
    af6c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    af70:	84 e0       	ldi	r24, 0x04	; 4
    af72:	61 e0       	ldi	r22, 0x01	; 1
    af74:	48 e6       	ldi	r20, 0x68	; 104
    af76:	54 e1       	ldi	r21, 0x14	; 20
    af78:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
               iLoop=0;
    af7c:	10 92 29 02 	sts	0x0229, r1
    af80:	10 92 28 02 	sts	0x0228, r1
			   y=3,x=8;
    af84:	83 e0       	ldi	r24, 0x03	; 3
    af86:	80 93 2f 02 	sts	0x022F, r24
    af8a:	88 e0       	ldi	r24, 0x08	; 8
    af8c:	80 93 30 02 	sts	0x0230, r24
			   iInput=0; iBlok=0;
    af90:	10 92 2e 02 	sts	0x022E, r1
    af94:	10 92 27 02 	sts	0x0227, r1
    af98:	10 92 26 02 	sts	0x0226, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    af9c:	80 e3       	ldi	r24, 0x30	; 48
    af9e:	80 93 33 02 	sts	0x0233, r24
    afa2:	80 93 34 02 	sts	0x0234, r24
    afa6:	80 93 35 02 	sts	0x0235, r24
			   stClientIP=cipInputIP; 
    afaa:	82 e0       	ldi	r24, 0x02	; 2
    afac:	e2 c1       	rjmp	.+964    	; 0xb372 <FMenuSettingServerIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    afae:	80 91 28 02 	lds	r24, 0x0228
    afb2:	90 91 29 02 	lds	r25, 0x0229
    afb6:	01 96       	adiw	r24, 0x01	; 1
    afb8:	90 93 29 02 	sts	0x0229, r25
    afbc:	80 93 28 02 	sts	0x0228, r24
			   if ((iLoop%2000)==0){
    afc0:	60 ed       	ldi	r22, 0xD0	; 208
    afc2:	77 e0       	ldi	r23, 0x07	; 7
    afc4:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    afc8:	89 2b       	or	r24, r25
    afca:	81 f4       	brne	.+32     	; 0xafec <FMenuSettingServerIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    afcc:	80 91 26 02 	lds	r24, 0x0226
    afd0:	90 91 27 02 	lds	r25, 0x0227
    afd4:	88 0f       	add	r24, r24
    afd6:	99 1f       	adc	r25, r25
    afd8:	88 0f       	add	r24, r24
    afda:	99 1f       	adc	r25, r25
    afdc:	60 91 30 02 	lds	r22, 0x0230
    afe0:	68 0f       	add	r22, r24
    afe2:	80 91 2f 02 	lds	r24, 0x022F
    afe6:	4f e5       	ldi	r20, 0x5F	; 95
    afe8:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    afec:	80 91 28 02 	lds	r24, 0x0228
    aff0:	90 91 29 02 	lds	r25, 0x0229
    aff4:	60 ed       	ldi	r22, 0xD0	; 208
    aff6:	77 e0       	ldi	r23, 0x07	; 7
    aff8:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    affc:	88 5e       	subi	r24, 0xE8	; 232
    affe:	93 40       	sbci	r25, 0x03	; 3
    b000:	81 f4       	brne	.+32     	; 0xb022 <FMenuSettingServerIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    b002:	80 91 26 02 	lds	r24, 0x0226
    b006:	90 91 27 02 	lds	r25, 0x0227
    b00a:	88 0f       	add	r24, r24
    b00c:	99 1f       	adc	r25, r25
    b00e:	88 0f       	add	r24, r24
    b010:	99 1f       	adc	r25, r25
    b012:	60 91 30 02 	lds	r22, 0x0230
    b016:	68 0f       	add	r22, r24
    b018:	80 91 2f 02 	lds	r24, 0x022F
    b01c:	40 e2       	ldi	r20, 0x20	; 32
    b01e:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    b022:	81 e0       	ldi	r24, 0x01	; 1
    b024:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    b028:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    b02a:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    b02e:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    b030:	80 53       	subi	r24, 0x30	; 48
    b032:	8a 30       	cpi	r24, 0x0A	; 10
    b034:	08 f0       	brcs	.+2      	; 0xb038 <FMenuSettingServerIP+0x1a4>
    b036:	d6 c0       	rjmp	.+428    	; 0xb1e4 <FMenuSettingServerIP+0x350>
    b038:	80 e5       	ldi	r24, 0x50	; 80
    b03a:	93 ec       	ldi	r25, 0xC3	; 195
    b03c:	01 97       	sbiw	r24, 0x01	; 1
    b03e:	f1 f7       	brne	.-4      	; 0xb03c <FMenuSettingServerIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    b040:	80 91 2e 02 	lds	r24, 0x022E
    b044:	e8 2f       	mov	r30, r24
    b046:	f0 e0       	ldi	r31, 0x00	; 0
    b048:	ed 5c       	subi	r30, 0xCD	; 205
    b04a:	fd 4f       	sbci	r31, 0xFD	; 253
    b04c:	20 83       	st	Z, r18
				   iInput++;                    
    b04e:	8f 5f       	subi	r24, 0xFF	; 255
    b050:	80 93 2e 02 	sts	0x022E, r24
				   for (i=1;i<(iInput+1);i++){
    b054:	81 e0       	ldi	r24, 0x01	; 1
    b056:	1c c0       	rjmp	.+56     	; 0xb090 <FMenuSettingServerIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    b058:	80 91 30 02 	lds	r24, 0x0230
    b05c:	68 0f       	add	r22, r24
    b05e:	63 50       	subi	r22, 0x03	; 3
    b060:	80 91 26 02 	lds	r24, 0x0226
    b064:	90 91 27 02 	lds	r25, 0x0227
    b068:	88 0f       	add	r24, r24
    b06a:	99 1f       	adc	r25, r25
    b06c:	88 0f       	add	r24, r24
    b06e:	99 1f       	adc	r25, r25
    b070:	68 0f       	add	r22, r24
    b072:	80 91 2f 02 	lds	r24, 0x022F
    b076:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
    b07a:	e0 91 32 02 	lds	r30, 0x0232
    b07e:	f0 e0       	ldi	r31, 0x00	; 0
    b080:	ee 5c       	subi	r30, 0xCE	; 206
    b082:	fd 4f       	sbci	r31, 0xFD	; 253
    b084:	80 81       	ld	r24, Z
    b086:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    b08a:	80 91 32 02 	lds	r24, 0x0232
    b08e:	8f 5f       	subi	r24, 0xFF	; 255
    b090:	80 93 32 02 	sts	0x0232, r24
    b094:	70 91 2e 02 	lds	r23, 0x022E
    b098:	60 91 32 02 	lds	r22, 0x0232
    b09c:	27 2f       	mov	r18, r23
    b09e:	30 e0       	ldi	r19, 0x00	; 0
    b0a0:	86 2f       	mov	r24, r22
    b0a2:	90 e0       	ldi	r25, 0x00	; 0
    b0a4:	28 17       	cp	r18, r24
    b0a6:	39 07       	cpc	r19, r25
    b0a8:	bc f6       	brge	.-82     	; 0xb058 <FMenuSettingServerIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    b0aa:	73 30       	cpi	r23, 0x03	; 3
    b0ac:	08 f4       	brcc	.+2      	; 0xb0b0 <FMenuSettingServerIP+0x21c>
    b0ae:	91 c0       	rjmp	.+290    	; 0xb1d2 <FMenuSettingServerIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b0b0:	40 91 26 02 	lds	r20, 0x0226
    b0b4:	50 91 27 02 	lds	r21, 0x0227
    b0b8:	fa 01       	movw	r30, r20
    b0ba:	e6 5d       	subi	r30, 0xD6	; 214
    b0bc:	fd 4f       	sbci	r31, 0xFD	; 253
    b0be:	20 91 35 02 	lds	r18, 0x0235
    b0c2:	20 5d       	subi	r18, 0xD0	; 208
    b0c4:	80 91 33 02 	lds	r24, 0x0233
    b0c8:	34 e6       	ldi	r19, 0x64	; 100
    b0ca:	83 9f       	mul	r24, r19
    b0cc:	c0 01       	movw	r24, r0
    b0ce:	11 24       	eor	r1, r1
    b0d0:	28 0f       	add	r18, r24
    b0d2:	80 91 34 02 	lds	r24, 0x0234
    b0d6:	3a e0       	ldi	r19, 0x0A	; 10
    b0d8:	83 9f       	mul	r24, r19
    b0da:	c0 01       	movw	r24, r0
    b0dc:	11 24       	eor	r1, r1
    b0de:	28 0f       	add	r18, r24
    b0e0:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b0e2:	80 e3       	ldi	r24, 0x30	; 48
    b0e4:	80 93 33 02 	sts	0x0233, r24
    b0e8:	80 93 34 02 	sts	0x0234, r24
    b0ec:	80 93 35 02 	sts	0x0235, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    b0f0:	44 0f       	add	r20, r20
    b0f2:	55 1f       	adc	r21, r21
    b0f4:	44 0f       	add	r20, r20
    b0f6:	55 1f       	adc	r21, r21
    b0f8:	60 91 30 02 	lds	r22, 0x0230
    b0fc:	64 0f       	add	r22, r20
    b0fe:	67 1b       	sub	r22, r23
    b100:	80 91 2f 02 	lds	r24, 0x022F
    b104:	44 e6       	ldi	r20, 0x64	; 100
    b106:	54 e1       	ldi	r21, 0x14	; 20
    b108:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b10c:	00 d0       	rcall	.+0      	; 0xb10e <FMenuSettingServerIP+0x27a>
    b10e:	00 d0       	rcall	.+0      	; 0xb110 <FMenuSettingServerIP+0x27c>
    b110:	00 d0       	rcall	.+0      	; 0xb112 <FMenuSettingServerIP+0x27e>
    b112:	ad b7       	in	r26, 0x3d	; 61
    b114:	be b7       	in	r27, 0x3e	; 62
    b116:	11 96       	adiw	r26, 0x01	; 1
    b118:	8e 01       	movw	r16, r28
    b11a:	0f 5f       	subi	r16, 0xFF	; 255
    b11c:	1f 4f       	sbci	r17, 0xFF	; 255
    b11e:	ed b7       	in	r30, 0x3d	; 61
    b120:	fe b7       	in	r31, 0x3e	; 62
    b122:	12 83       	std	Z+2, r17	; 0x02
    b124:	01 83       	std	Z+1, r16	; 0x01
    b126:	81 e6       	ldi	r24, 0x61	; 97
    b128:	94 e1       	ldi	r25, 0x14	; 20
    b12a:	13 96       	adiw	r26, 0x03	; 3
    b12c:	9c 93       	st	X, r25
    b12e:	8e 93       	st	-X, r24
    b130:	12 97       	sbiw	r26, 0x02	; 2
    b132:	e0 91 26 02 	lds	r30, 0x0226
    b136:	f0 91 27 02 	lds	r31, 0x0227
    b13a:	e6 5d       	subi	r30, 0xD6	; 214
    b13c:	fd 4f       	sbci	r31, 0xFD	; 253
    b13e:	80 81       	ld	r24, Z
    b140:	14 96       	adiw	r26, 0x04	; 4
    b142:	8c 93       	st	X, r24
    b144:	14 97       	sbiw	r26, 0x04	; 4
    b146:	15 96       	adiw	r26, 0x05	; 5
    b148:	1c 92       	st	X, r1
    b14a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b14e:	f8 01       	movw	r30, r16
    b150:	01 90       	ld	r0, Z+
    b152:	00 20       	and	r0, r0
    b154:	e9 f7       	brne	.-6      	; 0xb150 <FMenuSettingServerIP+0x2bc>
    b156:	31 97       	sbiw	r30, 0x01	; 1
    b158:	e0 1b       	sub	r30, r16
    b15a:	f1 0b       	sbc	r31, r17
    b15c:	8d b7       	in	r24, 0x3d	; 61
    b15e:	9e b7       	in	r25, 0x3e	; 62
    b160:	06 96       	adiw	r24, 0x06	; 6
    b162:	0f b6       	in	r0, 0x3f	; 63
    b164:	f8 94       	cli
    b166:	9e bf       	out	0x3e, r25	; 62
    b168:	0f be       	out	0x3f, r0	; 63
    b16a:	8d bf       	out	0x3d, r24	; 61
    b16c:	60 91 30 02 	lds	r22, 0x0230
    b170:	6f 5f       	subi	r22, 0xFF	; 255
    b172:	80 91 26 02 	lds	r24, 0x0226
    b176:	90 91 27 02 	lds	r25, 0x0227
    b17a:	88 0f       	add	r24, r24
    b17c:	99 1f       	adc	r25, r25
    b17e:	88 0f       	add	r24, r24
    b180:	99 1f       	adc	r25, r25
    b182:	68 0f       	add	r22, r24
    b184:	6e 1b       	sub	r22, r30
    b186:	80 91 2f 02 	lds	r24, 0x022F
    b18a:	a8 01       	movw	r20, r16
    b18c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b190:	80 91 26 02 	lds	r24, 0x0226
    b194:	90 91 27 02 	lds	r25, 0x0227
    b198:	00 97       	sbiw	r24, 0x00	; 0
    b19a:	81 f0       	breq	.+32     	; 0xb1bc <FMenuSettingServerIP+0x328>
    b19c:	60 91 30 02 	lds	r22, 0x0230
    b1a0:	6f 5f       	subi	r22, 0xFF	; 255
    b1a2:	81 50       	subi	r24, 0x01	; 1
    b1a4:	90 4c       	sbci	r25, 0xC0	; 192
    b1a6:	88 0f       	add	r24, r24
    b1a8:	99 1f       	adc	r25, r25
    b1aa:	88 0f       	add	r24, r24
    b1ac:	99 1f       	adc	r25, r25
    b1ae:	68 0f       	add	r22, r24
    b1b0:	80 91 2f 02 	lds	r24, 0x022F
    b1b4:	4f e5       	ldi	r20, 0x5F	; 95
    b1b6:	54 e1       	ldi	r21, 0x14	; 20
    b1b8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   iInput=0;
    b1bc:	10 92 2e 02 	sts	0x022E, r1
					   iBlok++;
    b1c0:	80 91 26 02 	lds	r24, 0x0226
    b1c4:	90 91 27 02 	lds	r25, 0x0227
    b1c8:	01 96       	adiw	r24, 0x01	; 1
    b1ca:	90 93 27 02 	sts	0x0227, r25
    b1ce:	80 93 26 02 	sts	0x0226, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b1d2:	80 91 26 02 	lds	r24, 0x0226
    b1d6:	90 91 27 02 	lds	r25, 0x0227
    b1da:	04 97       	sbiw	r24, 0x04	; 4
    b1dc:	18 f0       	brcs	.+6      	; 0xb1e4 <FMenuSettingServerIP+0x350>
    b1de:	84 e0       	ldi	r24, 0x04	; 4
    b1e0:	80 93 58 01 	sts	0x0158, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    b1e4:	97 ee       	ldi	r25, 0xE7	; 231
    b1e6:	f9 16       	cp	r15, r25
    b1e8:	09 f4       	brne	.+2      	; 0xb1ec <FMenuSettingServerIP+0x358>
    b1ea:	c2 c0       	rjmp	.+388    	; 0xb370 <FMenuSettingServerIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    b1ec:	a7 eb       	ldi	r26, 0xB7	; 183
    b1ee:	fa 16       	cp	r15, r26
    b1f0:	09 f0       	breq	.+2      	; 0xb1f4 <FMenuSettingServerIP+0x360>
    b1f2:	c7 c0       	rjmp	.+398    	; 0xb382 <FMenuSettingServerIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    b1f4:	40 91 26 02 	lds	r20, 0x0226
    b1f8:	50 91 27 02 	lds	r21, 0x0227
    b1fc:	44 30       	cpi	r20, 0x04	; 4
    b1fe:	51 05       	cpc	r21, r1
    b200:	08 f0       	brcs	.+2      	; 0xb204 <FMenuSettingServerIP+0x370>
    b202:	a6 c0       	rjmp	.+332    	; 0xb350 <FMenuSettingServerIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    b204:	80 91 2e 02 	lds	r24, 0x022E
    b208:	81 30       	cpi	r24, 0x01	; 1
    b20a:	41 f4       	brne	.+16     	; 0xb21c <FMenuSettingServerIP+0x388>
    b20c:	fa 01       	movw	r30, r20
    b20e:	e6 5d       	subi	r30, 0xD6	; 214
    b210:	fd 4f       	sbci	r31, 0xFD	; 253
    b212:	80 91 33 02 	lds	r24, 0x0233
    b216:	80 53       	subi	r24, 0x30	; 48
    b218:	80 83       	st	Z, r24
    b21a:	22 c0       	rjmp	.+68     	; 0xb260 <FMenuSettingServerIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    b21c:	82 30       	cpi	r24, 0x02	; 2
    b21e:	49 f4       	brne	.+18     	; 0xb232 <FMenuSettingServerIP+0x39e>
    b220:	fa 01       	movw	r30, r20
    b222:	e6 5d       	subi	r30, 0xD6	; 214
    b224:	fd 4f       	sbci	r31, 0xFD	; 253
    b226:	20 91 34 02 	lds	r18, 0x0234
    b22a:	20 51       	subi	r18, 0x10	; 16
    b22c:	80 91 33 02 	lds	r24, 0x0233
    b230:	11 c0       	rjmp	.+34     	; 0xb254 <FMenuSettingServerIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b232:	83 30       	cpi	r24, 0x03	; 3
    b234:	a9 f4       	brne	.+42     	; 0xb260 <FMenuSettingServerIP+0x3cc>
    b236:	fa 01       	movw	r30, r20
    b238:	e6 5d       	subi	r30, 0xD6	; 214
    b23a:	fd 4f       	sbci	r31, 0xFD	; 253
    b23c:	20 91 35 02 	lds	r18, 0x0235
    b240:	20 5d       	subi	r18, 0xD0	; 208
    b242:	80 91 33 02 	lds	r24, 0x0233
    b246:	34 e6       	ldi	r19, 0x64	; 100
    b248:	83 9f       	mul	r24, r19
    b24a:	c0 01       	movw	r24, r0
    b24c:	11 24       	eor	r1, r1
    b24e:	28 0f       	add	r18, r24
    b250:	80 91 34 02 	lds	r24, 0x0234
    b254:	3a e0       	ldi	r19, 0x0A	; 10
    b256:	83 9f       	mul	r24, r19
    b258:	c0 01       	movw	r24, r0
    b25a:	11 24       	eor	r1, r1
    b25c:	28 0f       	add	r18, r24
    b25e:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b260:	80 e3       	ldi	r24, 0x30	; 48
    b262:	80 93 33 02 	sts	0x0233, r24
    b266:	80 93 34 02 	sts	0x0234, r24
    b26a:	80 93 35 02 	sts	0x0235, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b26e:	60 91 30 02 	lds	r22, 0x0230
    b272:	63 50       	subi	r22, 0x03	; 3
    b274:	44 0f       	add	r20, r20
    b276:	55 1f       	adc	r21, r21
    b278:	44 0f       	add	r20, r20
    b27a:	55 1f       	adc	r21, r21
    b27c:	64 0f       	add	r22, r20
    b27e:	80 91 2f 02 	lds	r24, 0x022F
    b282:	4b e5       	ldi	r20, 0x5B	; 91
    b284:	54 e1       	ldi	r21, 0x14	; 20
    b286:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b28a:	00 d0       	rcall	.+0      	; 0xb28c <FMenuSettingServerIP+0x3f8>
    b28c:	00 d0       	rcall	.+0      	; 0xb28e <FMenuSettingServerIP+0x3fa>
    b28e:	00 d0       	rcall	.+0      	; 0xb290 <FMenuSettingServerIP+0x3fc>
    b290:	ad b7       	in	r26, 0x3d	; 61
    b292:	be b7       	in	r27, 0x3e	; 62
    b294:	11 96       	adiw	r26, 0x01	; 1
    b296:	8e 01       	movw	r16, r28
    b298:	0f 5f       	subi	r16, 0xFF	; 255
    b29a:	1f 4f       	sbci	r17, 0xFF	; 255
    b29c:	ed b7       	in	r30, 0x3d	; 61
    b29e:	fe b7       	in	r31, 0x3e	; 62
    b2a0:	12 83       	std	Z+2, r17	; 0x02
    b2a2:	01 83       	std	Z+1, r16	; 0x01
    b2a4:	88 e5       	ldi	r24, 0x58	; 88
    b2a6:	94 e1       	ldi	r25, 0x14	; 20
    b2a8:	13 96       	adiw	r26, 0x03	; 3
    b2aa:	9c 93       	st	X, r25
    b2ac:	8e 93       	st	-X, r24
    b2ae:	12 97       	sbiw	r26, 0x02	; 2
    b2b0:	e0 91 26 02 	lds	r30, 0x0226
    b2b4:	f0 91 27 02 	lds	r31, 0x0227
    b2b8:	e6 5d       	subi	r30, 0xD6	; 214
    b2ba:	fd 4f       	sbci	r31, 0xFD	; 253
    b2bc:	80 81       	ld	r24, Z
    b2be:	14 96       	adiw	r26, 0x04	; 4
    b2c0:	8c 93       	st	X, r24
    b2c2:	14 97       	sbiw	r26, 0x04	; 4
    b2c4:	15 96       	adiw	r26, 0x05	; 5
    b2c6:	1c 92       	st	X, r1
    b2c8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b2cc:	f8 01       	movw	r30, r16
    b2ce:	01 90       	ld	r0, Z+
    b2d0:	00 20       	and	r0, r0
    b2d2:	e9 f7       	brne	.-6      	; 0xb2ce <FMenuSettingServerIP+0x43a>
    b2d4:	31 97       	sbiw	r30, 0x01	; 1
    b2d6:	e0 1b       	sub	r30, r16
    b2d8:	f1 0b       	sbc	r31, r17
    b2da:	8d b7       	in	r24, 0x3d	; 61
    b2dc:	9e b7       	in	r25, 0x3e	; 62
    b2de:	06 96       	adiw	r24, 0x06	; 6
    b2e0:	0f b6       	in	r0, 0x3f	; 63
    b2e2:	f8 94       	cli
    b2e4:	9e bf       	out	0x3e, r25	; 62
    b2e6:	0f be       	out	0x3f, r0	; 63
    b2e8:	8d bf       	out	0x3d, r24	; 61
    b2ea:	60 91 30 02 	lds	r22, 0x0230
    b2ee:	6f 5f       	subi	r22, 0xFF	; 255
    b2f0:	80 91 26 02 	lds	r24, 0x0226
    b2f4:	90 91 27 02 	lds	r25, 0x0227
    b2f8:	88 0f       	add	r24, r24
    b2fa:	99 1f       	adc	r25, r25
    b2fc:	88 0f       	add	r24, r24
    b2fe:	99 1f       	adc	r25, r25
    b300:	68 0f       	add	r22, r24
    b302:	6e 1b       	sub	r22, r30
    b304:	80 91 2f 02 	lds	r24, 0x022F
    b308:	a8 01       	movw	r20, r16
    b30a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b30e:	80 91 26 02 	lds	r24, 0x0226
    b312:	90 91 27 02 	lds	r25, 0x0227
    b316:	00 97       	sbiw	r24, 0x00	; 0
    b318:	81 f0       	breq	.+32     	; 0xb33a <FMenuSettingServerIP+0x4a6>
    b31a:	60 91 30 02 	lds	r22, 0x0230
    b31e:	6f 5f       	subi	r22, 0xFF	; 255
    b320:	81 50       	subi	r24, 0x01	; 1
    b322:	90 4c       	sbci	r25, 0xC0	; 192
    b324:	88 0f       	add	r24, r24
    b326:	99 1f       	adc	r25, r25
    b328:	88 0f       	add	r24, r24
    b32a:	99 1f       	adc	r25, r25
    b32c:	68 0f       	add	r22, r24
    b32e:	80 91 2f 02 	lds	r24, 0x022F
    b332:	46 e5       	ldi	r20, 0x56	; 86
    b334:	54 e1       	ldi	r21, 0x14	; 20
    b336:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				       iInput=0;
    b33a:	10 92 2e 02 	sts	0x022E, r1
					   iBlok++;	   
    b33e:	80 91 26 02 	lds	r24, 0x0226
    b342:	90 91 27 02 	lds	r25, 0x0227
    b346:	01 96       	adiw	r24, 0x01	; 1
    b348:	90 93 27 02 	sts	0x0227, r25
    b34c:	80 93 26 02 	sts	0x0226, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b350:	80 91 26 02 	lds	r24, 0x0226
    b354:	90 91 27 02 	lds	r25, 0x0227
    b358:	04 97       	sbiw	r24, 0x04	; 4
    b35a:	98 f0       	brcs	.+38     	; 0xb382 <FMenuSettingServerIP+0x4ee>
    b35c:	84 e0       	ldi	r24, 0x04	; 4
    b35e:	09 c0       	rjmp	.+18     	; 0xb372 <FMenuSettingServerIP+0x4de>
			   }
		       break;
          case cipStoreIPblok:
		       //UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefServerIP,4);
    b360:	8a e2       	ldi	r24, 0x2A	; 42
    b362:	92 e0       	ldi	r25, 0x02	; 2
    b364:	6c e2       	ldi	r22, 0x2C	; 44
    b366:	70 e0       	ldi	r23, 0x00	; 0
    b368:	44 e0       	ldi	r20, 0x04	; 4
    b36a:	50 e0       	ldi	r21, 0x00	; 0
    b36c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
			   stClientIP=cipExit;
    b370:	83 e0       	ldi	r24, 0x03	; 3
    b372:	80 93 58 01 	sts	0x0158, r24
    b376:	05 c0       	rjmp	.+10     	; 0xb382 <FMenuSettingServerIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
			   stClientIP=cipInit;
    b378:	81 e0       	ldi	r24, 0x01	; 1
    b37a:	80 93 58 01 	sts	0x0158, r24
			   Result=MENU_DONE;
    b37e:	80 93 31 02 	sts	0x0231, r24
		       break;     
		  }//EndSwitch	 
	return Result;
}
    b382:	80 91 31 02 	lds	r24, 0x0231
    b386:	64 96       	adiw	r28, 0x14	; 20
    b388:	0f b6       	in	r0, 0x3f	; 63
    b38a:	f8 94       	cli
    b38c:	de bf       	out	0x3e, r29	; 62
    b38e:	0f be       	out	0x3f, r0	; 63
    b390:	cd bf       	out	0x3d, r28	; 61
    b392:	cf 91       	pop	r28
    b394:	df 91       	pop	r29
    b396:	1f 91       	pop	r17
    b398:	0f 91       	pop	r16
    b39a:	ff 90       	pop	r15
    b39c:	08 95       	ret

0000b39e <FMenuSettingClientIP>:





char FMenuSettingClientIP(){
    b39e:	ff 92       	push	r15
    b3a0:	0f 93       	push	r16
    b3a2:	1f 93       	push	r17
    b3a4:	df 93       	push	r29
    b3a6:	cf 93       	push	r28
    b3a8:	cd b7       	in	r28, 0x3d	; 61
    b3aa:	de b7       	in	r29, 0x3e	; 62
    b3ac:	64 97       	sbiw	r28, 0x14	; 20
    b3ae:	0f b6       	in	r0, 0x3f	; 63
    b3b0:	f8 94       	cli
    b3b2:	de bf       	out	0x3e, r29	; 62
    b3b4:	0f be       	out	0x3f, r0	; 63
    b3b6:	cd bf       	out	0x3d, r28	; 61
     //Client IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
     Result=MENU_NONE;
    b3b8:	10 92 41 02 	sts	0x0241, r1
	 switch(stClientIP){
    b3bc:	80 91 59 01 	lds	r24, 0x0159
    b3c0:	82 30       	cpi	r24, 0x02	; 2
    b3c2:	09 f4       	brne	.+2      	; 0xb3c6 <FMenuSettingClientIP+0x28>
    b3c4:	79 c0       	rjmp	.+242    	; 0xb4b8 <FMenuSettingClientIP+0x11a>
    b3c6:	83 30       	cpi	r24, 0x03	; 3
    b3c8:	20 f4       	brcc	.+8      	; 0xb3d2 <FMenuSettingClientIP+0x34>
    b3ca:	81 30       	cpi	r24, 0x01	; 1
    b3cc:	09 f0       	breq	.+2      	; 0xb3d0 <FMenuSettingClientIP+0x32>
    b3ce:	5e c2       	rjmp	.+1212   	; 0xb88c <FMenuSettingClientIP+0x4ee>
    b3d0:	07 c0       	rjmp	.+14     	; 0xb3e0 <FMenuSettingClientIP+0x42>
    b3d2:	83 30       	cpi	r24, 0x03	; 3
    b3d4:	09 f4       	brne	.+2      	; 0xb3d8 <FMenuSettingClientIP+0x3a>
    b3d6:	55 c2       	rjmp	.+1194   	; 0xb882 <FMenuSettingClientIP+0x4e4>
    b3d8:	84 30       	cpi	r24, 0x04	; 4
    b3da:	09 f0       	breq	.+2      	; 0xb3de <FMenuSettingClientIP+0x40>
    b3dc:	57 c2       	rjmp	.+1198   	; 0xb88c <FMenuSettingClientIP+0x4ee>
    b3de:	45 c2       	rjmp	.+1162   	; 0xb86a <FMenuSettingClientIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    b3e0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	           lcd_printf(1,1,PSTR("Client IP"));
    b3e4:	81 e0       	ldi	r24, 0x01	; 1
    b3e6:	61 e0       	ldi	r22, 0x01	; 1
    b3e8:	4a ef       	ldi	r20, 0xFA	; 250
    b3ea:	54 e1       	ldi	r21, 0x14	; 20
    b3ec:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefClientIP,4);
    b3f0:	8a e3       	ldi	r24, 0x3A	; 58
    b3f2:	92 e0       	ldi	r25, 0x02	; 2
    b3f4:	68 e2       	ldi	r22, 0x28	; 40
    b3f6:	70 e0       	ldi	r23, 0x00	; 0
    b3f8:	44 e0       	ldi	r20, 0x04	; 4
    b3fa:	50 e0       	ldi	r21, 0x00	; 0
    b3fc:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    b400:	8d b7       	in	r24, 0x3d	; 61
    b402:	9e b7       	in	r25, 0x3e	; 62
    b404:	0c 97       	sbiw	r24, 0x0c	; 12
    b406:	0f b6       	in	r0, 0x3f	; 63
    b408:	f8 94       	cli
    b40a:	9e bf       	out	0x3e, r25	; 62
    b40c:	0f be       	out	0x3f, r0	; 63
    b40e:	8d bf       	out	0x3d, r24	; 61
    b410:	ed b7       	in	r30, 0x3d	; 61
    b412:	fe b7       	in	r31, 0x3e	; 62
    b414:	31 96       	adiw	r30, 0x01	; 1
    b416:	8e 01       	movw	r16, r28
    b418:	0f 5f       	subi	r16, 0xFF	; 255
    b41a:	1f 4f       	sbci	r17, 0xFF	; 255
    b41c:	ad b7       	in	r26, 0x3d	; 61
    b41e:	be b7       	in	r27, 0x3e	; 62
    b420:	12 96       	adiw	r26, 0x02	; 2
    b422:	1c 93       	st	X, r17
    b424:	0e 93       	st	-X, r16
    b426:	11 97       	sbiw	r26, 0x01	; 1
    b428:	89 ee       	ldi	r24, 0xE9	; 233
    b42a:	94 e1       	ldi	r25, 0x14	; 20
    b42c:	93 83       	std	Z+3, r25	; 0x03
    b42e:	82 83       	std	Z+2, r24	; 0x02
    b430:	80 91 3a 02 	lds	r24, 0x023A
    b434:	84 83       	std	Z+4, r24	; 0x04
    b436:	15 82       	std	Z+5, r1	; 0x05
    b438:	80 91 3b 02 	lds	r24, 0x023B
    b43c:	86 83       	std	Z+6, r24	; 0x06
    b43e:	17 82       	std	Z+7, r1	; 0x07
    b440:	80 91 3c 02 	lds	r24, 0x023C
    b444:	80 87       	std	Z+8, r24	; 0x08
    b446:	11 86       	std	Z+9, r1	; 0x09
    b448:	80 91 3d 02 	lds	r24, 0x023D
    b44c:	82 87       	std	Z+10, r24	; 0x0a
    b44e:	13 86       	std	Z+11, r1	; 0x0b
    b450:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    b454:	ed b7       	in	r30, 0x3d	; 61
    b456:	fe b7       	in	r31, 0x3e	; 62
    b458:	3c 96       	adiw	r30, 0x0c	; 12
    b45a:	0f b6       	in	r0, 0x3f	; 63
    b45c:	f8 94       	cli
    b45e:	fe bf       	out	0x3e, r31	; 62
    b460:	0f be       	out	0x3f, r0	; 63
    b462:	ed bf       	out	0x3d, r30	; 61
    b464:	82 e0       	ldi	r24, 0x02	; 2
    b466:	61 e0       	ldi	r22, 0x01	; 1
    b468:	a8 01       	movw	r20, r16
    b46a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    b46e:	83 e0       	ldi	r24, 0x03	; 3
    b470:	61 e0       	ldi	r22, 0x01	; 1
    b472:	44 ed       	ldi	r20, 0xD4	; 212
    b474:	54 e1       	ldi	r21, 0x14	; 20
    b476:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    b47a:	84 e0       	ldi	r24, 0x04	; 4
    b47c:	61 e0       	ldi	r22, 0x01	; 1
    b47e:	4f eb       	ldi	r20, 0xBF	; 191
    b480:	54 e1       	ldi	r21, 0x14	; 20
    b482:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
               iLoop=0;
    b486:	10 92 39 02 	sts	0x0239, r1
    b48a:	10 92 38 02 	sts	0x0238, r1
			   y=3,x=8;
    b48e:	83 e0       	ldi	r24, 0x03	; 3
    b490:	80 93 3f 02 	sts	0x023F, r24
    b494:	88 e0       	ldi	r24, 0x08	; 8
    b496:	80 93 40 02 	sts	0x0240, r24
			   iInput=0; iBlok=0;
    b49a:	10 92 3e 02 	sts	0x023E, r1
    b49e:	10 92 37 02 	sts	0x0237, r1
    b4a2:	10 92 36 02 	sts	0x0236, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b4a6:	80 e3       	ldi	r24, 0x30	; 48
    b4a8:	80 93 43 02 	sts	0x0243, r24
    b4ac:	80 93 44 02 	sts	0x0244, r24
    b4b0:	80 93 45 02 	sts	0x0245, r24
			   stClientIP=cipInputIP; 
    b4b4:	82 e0       	ldi	r24, 0x02	; 2
    b4b6:	e2 c1       	rjmp	.+964    	; 0xb87c <FMenuSettingClientIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    b4b8:	80 91 38 02 	lds	r24, 0x0238
    b4bc:	90 91 39 02 	lds	r25, 0x0239
    b4c0:	01 96       	adiw	r24, 0x01	; 1
    b4c2:	90 93 39 02 	sts	0x0239, r25
    b4c6:	80 93 38 02 	sts	0x0238, r24
			   if ((iLoop%2000)==0){
    b4ca:	60 ed       	ldi	r22, 0xD0	; 208
    b4cc:	77 e0       	ldi	r23, 0x07	; 7
    b4ce:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    b4d2:	89 2b       	or	r24, r25
    b4d4:	81 f4       	brne	.+32     	; 0xb4f6 <FMenuSettingClientIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    b4d6:	80 91 36 02 	lds	r24, 0x0236
    b4da:	90 91 37 02 	lds	r25, 0x0237
    b4de:	88 0f       	add	r24, r24
    b4e0:	99 1f       	adc	r25, r25
    b4e2:	88 0f       	add	r24, r24
    b4e4:	99 1f       	adc	r25, r25
    b4e6:	60 91 40 02 	lds	r22, 0x0240
    b4ea:	68 0f       	add	r22, r24
    b4ec:	80 91 3f 02 	lds	r24, 0x023F
    b4f0:	4f e5       	ldi	r20, 0x5F	; 95
    b4f2:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    b4f6:	80 91 38 02 	lds	r24, 0x0238
    b4fa:	90 91 39 02 	lds	r25, 0x0239
    b4fe:	60 ed       	ldi	r22, 0xD0	; 208
    b500:	77 e0       	ldi	r23, 0x07	; 7
    b502:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    b506:	88 5e       	subi	r24, 0xE8	; 232
    b508:	93 40       	sbci	r25, 0x03	; 3
    b50a:	81 f4       	brne	.+32     	; 0xb52c <FMenuSettingClientIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    b50c:	80 91 36 02 	lds	r24, 0x0236
    b510:	90 91 37 02 	lds	r25, 0x0237
    b514:	88 0f       	add	r24, r24
    b516:	99 1f       	adc	r25, r25
    b518:	88 0f       	add	r24, r24
    b51a:	99 1f       	adc	r25, r25
    b51c:	60 91 40 02 	lds	r22, 0x0240
    b520:	68 0f       	add	r22, r24
    b522:	80 91 3f 02 	lds	r24, 0x023F
    b526:	40 e2       	ldi	r20, 0x20	; 32
    b528:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    b52c:	81 e0       	ldi	r24, 0x01	; 1
    b52e:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    b532:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    b534:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    b538:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    b53a:	80 53       	subi	r24, 0x30	; 48
    b53c:	8a 30       	cpi	r24, 0x0A	; 10
    b53e:	08 f0       	brcs	.+2      	; 0xb542 <FMenuSettingClientIP+0x1a4>
    b540:	d6 c0       	rjmp	.+428    	; 0xb6ee <FMenuSettingClientIP+0x350>
    b542:	80 e5       	ldi	r24, 0x50	; 80
    b544:	93 ec       	ldi	r25, 0xC3	; 195
    b546:	01 97       	sbiw	r24, 0x01	; 1
    b548:	f1 f7       	brne	.-4      	; 0xb546 <FMenuSettingClientIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    b54a:	80 91 3e 02 	lds	r24, 0x023E
    b54e:	e8 2f       	mov	r30, r24
    b550:	f0 e0       	ldi	r31, 0x00	; 0
    b552:	ed 5b       	subi	r30, 0xBD	; 189
    b554:	fd 4f       	sbci	r31, 0xFD	; 253
    b556:	20 83       	st	Z, r18
				   iInput++;                    
    b558:	8f 5f       	subi	r24, 0xFF	; 255
    b55a:	80 93 3e 02 	sts	0x023E, r24
				   for (i=1;i<(iInput+1);i++){
    b55e:	81 e0       	ldi	r24, 0x01	; 1
    b560:	1c c0       	rjmp	.+56     	; 0xb59a <FMenuSettingClientIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    b562:	80 91 40 02 	lds	r24, 0x0240
    b566:	68 0f       	add	r22, r24
    b568:	63 50       	subi	r22, 0x03	; 3
    b56a:	80 91 36 02 	lds	r24, 0x0236
    b56e:	90 91 37 02 	lds	r25, 0x0237
    b572:	88 0f       	add	r24, r24
    b574:	99 1f       	adc	r25, r25
    b576:	88 0f       	add	r24, r24
    b578:	99 1f       	adc	r25, r25
    b57a:	68 0f       	add	r22, r24
    b57c:	80 91 3f 02 	lds	r24, 0x023F
    b580:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
    b584:	e0 91 42 02 	lds	r30, 0x0242
    b588:	f0 e0       	ldi	r31, 0x00	; 0
    b58a:	ee 5b       	subi	r30, 0xBE	; 190
    b58c:	fd 4f       	sbci	r31, 0xFD	; 253
    b58e:	80 81       	ld	r24, Z
    b590:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    b594:	80 91 42 02 	lds	r24, 0x0242
    b598:	8f 5f       	subi	r24, 0xFF	; 255
    b59a:	80 93 42 02 	sts	0x0242, r24
    b59e:	70 91 3e 02 	lds	r23, 0x023E
    b5a2:	60 91 42 02 	lds	r22, 0x0242
    b5a6:	27 2f       	mov	r18, r23
    b5a8:	30 e0       	ldi	r19, 0x00	; 0
    b5aa:	86 2f       	mov	r24, r22
    b5ac:	90 e0       	ldi	r25, 0x00	; 0
    b5ae:	28 17       	cp	r18, r24
    b5b0:	39 07       	cpc	r19, r25
    b5b2:	bc f6       	brge	.-82     	; 0xb562 <FMenuSettingClientIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    b5b4:	73 30       	cpi	r23, 0x03	; 3
    b5b6:	08 f4       	brcc	.+2      	; 0xb5ba <FMenuSettingClientIP+0x21c>
    b5b8:	91 c0       	rjmp	.+290    	; 0xb6dc <FMenuSettingClientIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b5ba:	40 91 36 02 	lds	r20, 0x0236
    b5be:	50 91 37 02 	lds	r21, 0x0237
    b5c2:	fa 01       	movw	r30, r20
    b5c4:	e6 5c       	subi	r30, 0xC6	; 198
    b5c6:	fd 4f       	sbci	r31, 0xFD	; 253
    b5c8:	20 91 45 02 	lds	r18, 0x0245
    b5cc:	20 5d       	subi	r18, 0xD0	; 208
    b5ce:	80 91 43 02 	lds	r24, 0x0243
    b5d2:	34 e6       	ldi	r19, 0x64	; 100
    b5d4:	83 9f       	mul	r24, r19
    b5d6:	c0 01       	movw	r24, r0
    b5d8:	11 24       	eor	r1, r1
    b5da:	28 0f       	add	r18, r24
    b5dc:	80 91 44 02 	lds	r24, 0x0244
    b5e0:	3a e0       	ldi	r19, 0x0A	; 10
    b5e2:	83 9f       	mul	r24, r19
    b5e4:	c0 01       	movw	r24, r0
    b5e6:	11 24       	eor	r1, r1
    b5e8:	28 0f       	add	r18, r24
    b5ea:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b5ec:	80 e3       	ldi	r24, 0x30	; 48
    b5ee:	80 93 43 02 	sts	0x0243, r24
    b5f2:	80 93 44 02 	sts	0x0244, r24
    b5f6:	80 93 45 02 	sts	0x0245, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    b5fa:	44 0f       	add	r20, r20
    b5fc:	55 1f       	adc	r21, r21
    b5fe:	44 0f       	add	r20, r20
    b600:	55 1f       	adc	r21, r21
    b602:	60 91 40 02 	lds	r22, 0x0240
    b606:	64 0f       	add	r22, r20
    b608:	67 1b       	sub	r22, r23
    b60a:	80 91 3f 02 	lds	r24, 0x023F
    b60e:	4b eb       	ldi	r20, 0xBB	; 187
    b610:	54 e1       	ldi	r21, 0x14	; 20
    b612:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b616:	00 d0       	rcall	.+0      	; 0xb618 <FMenuSettingClientIP+0x27a>
    b618:	00 d0       	rcall	.+0      	; 0xb61a <FMenuSettingClientIP+0x27c>
    b61a:	00 d0       	rcall	.+0      	; 0xb61c <FMenuSettingClientIP+0x27e>
    b61c:	ad b7       	in	r26, 0x3d	; 61
    b61e:	be b7       	in	r27, 0x3e	; 62
    b620:	11 96       	adiw	r26, 0x01	; 1
    b622:	8e 01       	movw	r16, r28
    b624:	0f 5f       	subi	r16, 0xFF	; 255
    b626:	1f 4f       	sbci	r17, 0xFF	; 255
    b628:	ed b7       	in	r30, 0x3d	; 61
    b62a:	fe b7       	in	r31, 0x3e	; 62
    b62c:	12 83       	std	Z+2, r17	; 0x02
    b62e:	01 83       	std	Z+1, r16	; 0x01
    b630:	88 eb       	ldi	r24, 0xB8	; 184
    b632:	94 e1       	ldi	r25, 0x14	; 20
    b634:	13 96       	adiw	r26, 0x03	; 3
    b636:	9c 93       	st	X, r25
    b638:	8e 93       	st	-X, r24
    b63a:	12 97       	sbiw	r26, 0x02	; 2
    b63c:	e0 91 36 02 	lds	r30, 0x0236
    b640:	f0 91 37 02 	lds	r31, 0x0237
    b644:	e6 5c       	subi	r30, 0xC6	; 198
    b646:	fd 4f       	sbci	r31, 0xFD	; 253
    b648:	80 81       	ld	r24, Z
    b64a:	14 96       	adiw	r26, 0x04	; 4
    b64c:	8c 93       	st	X, r24
    b64e:	14 97       	sbiw	r26, 0x04	; 4
    b650:	15 96       	adiw	r26, 0x05	; 5
    b652:	1c 92       	st	X, r1
    b654:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b658:	f8 01       	movw	r30, r16
    b65a:	01 90       	ld	r0, Z+
    b65c:	00 20       	and	r0, r0
    b65e:	e9 f7       	brne	.-6      	; 0xb65a <FMenuSettingClientIP+0x2bc>
    b660:	31 97       	sbiw	r30, 0x01	; 1
    b662:	e0 1b       	sub	r30, r16
    b664:	f1 0b       	sbc	r31, r17
    b666:	8d b7       	in	r24, 0x3d	; 61
    b668:	9e b7       	in	r25, 0x3e	; 62
    b66a:	06 96       	adiw	r24, 0x06	; 6
    b66c:	0f b6       	in	r0, 0x3f	; 63
    b66e:	f8 94       	cli
    b670:	9e bf       	out	0x3e, r25	; 62
    b672:	0f be       	out	0x3f, r0	; 63
    b674:	8d bf       	out	0x3d, r24	; 61
    b676:	60 91 40 02 	lds	r22, 0x0240
    b67a:	6f 5f       	subi	r22, 0xFF	; 255
    b67c:	80 91 36 02 	lds	r24, 0x0236
    b680:	90 91 37 02 	lds	r25, 0x0237
    b684:	88 0f       	add	r24, r24
    b686:	99 1f       	adc	r25, r25
    b688:	88 0f       	add	r24, r24
    b68a:	99 1f       	adc	r25, r25
    b68c:	68 0f       	add	r22, r24
    b68e:	6e 1b       	sub	r22, r30
    b690:	80 91 3f 02 	lds	r24, 0x023F
    b694:	a8 01       	movw	r20, r16
    b696:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b69a:	80 91 36 02 	lds	r24, 0x0236
    b69e:	90 91 37 02 	lds	r25, 0x0237
    b6a2:	00 97       	sbiw	r24, 0x00	; 0
    b6a4:	81 f0       	breq	.+32     	; 0xb6c6 <FMenuSettingClientIP+0x328>
    b6a6:	60 91 40 02 	lds	r22, 0x0240
    b6aa:	6f 5f       	subi	r22, 0xFF	; 255
    b6ac:	81 50       	subi	r24, 0x01	; 1
    b6ae:	90 4c       	sbci	r25, 0xC0	; 192
    b6b0:	88 0f       	add	r24, r24
    b6b2:	99 1f       	adc	r25, r25
    b6b4:	88 0f       	add	r24, r24
    b6b6:	99 1f       	adc	r25, r25
    b6b8:	68 0f       	add	r22, r24
    b6ba:	80 91 3f 02 	lds	r24, 0x023F
    b6be:	46 eb       	ldi	r20, 0xB6	; 182
    b6c0:	54 e1       	ldi	r21, 0x14	; 20
    b6c2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   iInput=0;
    b6c6:	10 92 3e 02 	sts	0x023E, r1
					   iBlok++;
    b6ca:	80 91 36 02 	lds	r24, 0x0236
    b6ce:	90 91 37 02 	lds	r25, 0x0237
    b6d2:	01 96       	adiw	r24, 0x01	; 1
    b6d4:	90 93 37 02 	sts	0x0237, r25
    b6d8:	80 93 36 02 	sts	0x0236, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b6dc:	80 91 36 02 	lds	r24, 0x0236
    b6e0:	90 91 37 02 	lds	r25, 0x0237
    b6e4:	04 97       	sbiw	r24, 0x04	; 4
    b6e6:	18 f0       	brcs	.+6      	; 0xb6ee <FMenuSettingClientIP+0x350>
    b6e8:	84 e0       	ldi	r24, 0x04	; 4
    b6ea:	80 93 59 01 	sts	0x0159, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    b6ee:	97 ee       	ldi	r25, 0xE7	; 231
    b6f0:	f9 16       	cp	r15, r25
    b6f2:	09 f4       	brne	.+2      	; 0xb6f6 <FMenuSettingClientIP+0x358>
    b6f4:	c2 c0       	rjmp	.+388    	; 0xb87a <FMenuSettingClientIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    b6f6:	a7 eb       	ldi	r26, 0xB7	; 183
    b6f8:	fa 16       	cp	r15, r26
    b6fa:	09 f0       	breq	.+2      	; 0xb6fe <FMenuSettingClientIP+0x360>
    b6fc:	c7 c0       	rjmp	.+398    	; 0xb88c <FMenuSettingClientIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    b6fe:	40 91 36 02 	lds	r20, 0x0236
    b702:	50 91 37 02 	lds	r21, 0x0237
    b706:	44 30       	cpi	r20, 0x04	; 4
    b708:	51 05       	cpc	r21, r1
    b70a:	08 f0       	brcs	.+2      	; 0xb70e <FMenuSettingClientIP+0x370>
    b70c:	a6 c0       	rjmp	.+332    	; 0xb85a <FMenuSettingClientIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    b70e:	80 91 3e 02 	lds	r24, 0x023E
    b712:	81 30       	cpi	r24, 0x01	; 1
    b714:	41 f4       	brne	.+16     	; 0xb726 <FMenuSettingClientIP+0x388>
    b716:	fa 01       	movw	r30, r20
    b718:	e6 5c       	subi	r30, 0xC6	; 198
    b71a:	fd 4f       	sbci	r31, 0xFD	; 253
    b71c:	80 91 43 02 	lds	r24, 0x0243
    b720:	80 53       	subi	r24, 0x30	; 48
    b722:	80 83       	st	Z, r24
    b724:	22 c0       	rjmp	.+68     	; 0xb76a <FMenuSettingClientIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    b726:	82 30       	cpi	r24, 0x02	; 2
    b728:	49 f4       	brne	.+18     	; 0xb73c <FMenuSettingClientIP+0x39e>
    b72a:	fa 01       	movw	r30, r20
    b72c:	e6 5c       	subi	r30, 0xC6	; 198
    b72e:	fd 4f       	sbci	r31, 0xFD	; 253
    b730:	20 91 44 02 	lds	r18, 0x0244
    b734:	20 51       	subi	r18, 0x10	; 16
    b736:	80 91 43 02 	lds	r24, 0x0243
    b73a:	11 c0       	rjmp	.+34     	; 0xb75e <FMenuSettingClientIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b73c:	83 30       	cpi	r24, 0x03	; 3
    b73e:	a9 f4       	brne	.+42     	; 0xb76a <FMenuSettingClientIP+0x3cc>
    b740:	fa 01       	movw	r30, r20
    b742:	e6 5c       	subi	r30, 0xC6	; 198
    b744:	fd 4f       	sbci	r31, 0xFD	; 253
    b746:	20 91 45 02 	lds	r18, 0x0245
    b74a:	20 5d       	subi	r18, 0xD0	; 208
    b74c:	80 91 43 02 	lds	r24, 0x0243
    b750:	34 e6       	ldi	r19, 0x64	; 100
    b752:	83 9f       	mul	r24, r19
    b754:	c0 01       	movw	r24, r0
    b756:	11 24       	eor	r1, r1
    b758:	28 0f       	add	r18, r24
    b75a:	80 91 44 02 	lds	r24, 0x0244
    b75e:	3a e0       	ldi	r19, 0x0A	; 10
    b760:	83 9f       	mul	r24, r19
    b762:	c0 01       	movw	r24, r0
    b764:	11 24       	eor	r1, r1
    b766:	28 0f       	add	r18, r24
    b768:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b76a:	80 e3       	ldi	r24, 0x30	; 48
    b76c:	80 93 43 02 	sts	0x0243, r24
    b770:	80 93 44 02 	sts	0x0244, r24
    b774:	80 93 45 02 	sts	0x0245, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b778:	60 91 40 02 	lds	r22, 0x0240
    b77c:	63 50       	subi	r22, 0x03	; 3
    b77e:	44 0f       	add	r20, r20
    b780:	55 1f       	adc	r21, r21
    b782:	44 0f       	add	r20, r20
    b784:	55 1f       	adc	r21, r21
    b786:	64 0f       	add	r22, r20
    b788:	80 91 3f 02 	lds	r24, 0x023F
    b78c:	42 eb       	ldi	r20, 0xB2	; 178
    b78e:	54 e1       	ldi	r21, 0x14	; 20
    b790:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b794:	00 d0       	rcall	.+0      	; 0xb796 <FMenuSettingClientIP+0x3f8>
    b796:	00 d0       	rcall	.+0      	; 0xb798 <FMenuSettingClientIP+0x3fa>
    b798:	00 d0       	rcall	.+0      	; 0xb79a <FMenuSettingClientIP+0x3fc>
    b79a:	ad b7       	in	r26, 0x3d	; 61
    b79c:	be b7       	in	r27, 0x3e	; 62
    b79e:	11 96       	adiw	r26, 0x01	; 1
    b7a0:	8e 01       	movw	r16, r28
    b7a2:	0f 5f       	subi	r16, 0xFF	; 255
    b7a4:	1f 4f       	sbci	r17, 0xFF	; 255
    b7a6:	ed b7       	in	r30, 0x3d	; 61
    b7a8:	fe b7       	in	r31, 0x3e	; 62
    b7aa:	12 83       	std	Z+2, r17	; 0x02
    b7ac:	01 83       	std	Z+1, r16	; 0x01
    b7ae:	8f ea       	ldi	r24, 0xAF	; 175
    b7b0:	94 e1       	ldi	r25, 0x14	; 20
    b7b2:	13 96       	adiw	r26, 0x03	; 3
    b7b4:	9c 93       	st	X, r25
    b7b6:	8e 93       	st	-X, r24
    b7b8:	12 97       	sbiw	r26, 0x02	; 2
    b7ba:	e0 91 36 02 	lds	r30, 0x0236
    b7be:	f0 91 37 02 	lds	r31, 0x0237
    b7c2:	e6 5c       	subi	r30, 0xC6	; 198
    b7c4:	fd 4f       	sbci	r31, 0xFD	; 253
    b7c6:	80 81       	ld	r24, Z
    b7c8:	14 96       	adiw	r26, 0x04	; 4
    b7ca:	8c 93       	st	X, r24
    b7cc:	14 97       	sbiw	r26, 0x04	; 4
    b7ce:	15 96       	adiw	r26, 0x05	; 5
    b7d0:	1c 92       	st	X, r1
    b7d2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b7d6:	f8 01       	movw	r30, r16
    b7d8:	01 90       	ld	r0, Z+
    b7da:	00 20       	and	r0, r0
    b7dc:	e9 f7       	brne	.-6      	; 0xb7d8 <FMenuSettingClientIP+0x43a>
    b7de:	31 97       	sbiw	r30, 0x01	; 1
    b7e0:	e0 1b       	sub	r30, r16
    b7e2:	f1 0b       	sbc	r31, r17
    b7e4:	8d b7       	in	r24, 0x3d	; 61
    b7e6:	9e b7       	in	r25, 0x3e	; 62
    b7e8:	06 96       	adiw	r24, 0x06	; 6
    b7ea:	0f b6       	in	r0, 0x3f	; 63
    b7ec:	f8 94       	cli
    b7ee:	9e bf       	out	0x3e, r25	; 62
    b7f0:	0f be       	out	0x3f, r0	; 63
    b7f2:	8d bf       	out	0x3d, r24	; 61
    b7f4:	60 91 40 02 	lds	r22, 0x0240
    b7f8:	6f 5f       	subi	r22, 0xFF	; 255
    b7fa:	80 91 36 02 	lds	r24, 0x0236
    b7fe:	90 91 37 02 	lds	r25, 0x0237
    b802:	88 0f       	add	r24, r24
    b804:	99 1f       	adc	r25, r25
    b806:	88 0f       	add	r24, r24
    b808:	99 1f       	adc	r25, r25
    b80a:	68 0f       	add	r22, r24
    b80c:	6e 1b       	sub	r22, r30
    b80e:	80 91 3f 02 	lds	r24, 0x023F
    b812:	a8 01       	movw	r20, r16
    b814:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b818:	80 91 36 02 	lds	r24, 0x0236
    b81c:	90 91 37 02 	lds	r25, 0x0237
    b820:	00 97       	sbiw	r24, 0x00	; 0
    b822:	81 f0       	breq	.+32     	; 0xb844 <FMenuSettingClientIP+0x4a6>
    b824:	60 91 40 02 	lds	r22, 0x0240
    b828:	6f 5f       	subi	r22, 0xFF	; 255
    b82a:	81 50       	subi	r24, 0x01	; 1
    b82c:	90 4c       	sbci	r25, 0xC0	; 192
    b82e:	88 0f       	add	r24, r24
    b830:	99 1f       	adc	r25, r25
    b832:	88 0f       	add	r24, r24
    b834:	99 1f       	adc	r25, r25
    b836:	68 0f       	add	r22, r24
    b838:	80 91 3f 02 	lds	r24, 0x023F
    b83c:	4d ea       	ldi	r20, 0xAD	; 173
    b83e:	54 e1       	ldi	r21, 0x14	; 20
    b840:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				       iInput=0;
    b844:	10 92 3e 02 	sts	0x023E, r1
					   iBlok++;	   
    b848:	80 91 36 02 	lds	r24, 0x0236
    b84c:	90 91 37 02 	lds	r25, 0x0237
    b850:	01 96       	adiw	r24, 0x01	; 1
    b852:	90 93 37 02 	sts	0x0237, r25
    b856:	80 93 36 02 	sts	0x0236, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b85a:	80 91 36 02 	lds	r24, 0x0236
    b85e:	90 91 37 02 	lds	r25, 0x0237
    b862:	04 97       	sbiw	r24, 0x04	; 4
    b864:	98 f0       	brcs	.+38     	; 0xb88c <FMenuSettingClientIP+0x4ee>
    b866:	84 e0       	ldi	r24, 0x04	; 4
    b868:	09 c0       	rjmp	.+18     	; 0xb87c <FMenuSettingClientIP+0x4de>
			   }
		       break;
          case cipStoreIPblok://UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefClientIP,4);
    b86a:	8a e3       	ldi	r24, 0x3A	; 58
    b86c:	92 e0       	ldi	r25, 0x02	; 2
    b86e:	68 e2       	ldi	r22, 0x28	; 40
    b870:	70 e0       	ldi	r23, 0x00	; 0
    b872:	44 e0       	ldi	r20, 0x04	; 4
    b874:	50 e0       	ldi	r21, 0x00	; 0
    b876:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
			   stClientIP=cipExit;
    b87a:	83 e0       	ldi	r24, 0x03	; 3
    b87c:	80 93 59 01 	sts	0x0159, r24
    b880:	05 c0       	rjmp	.+10     	; 0xb88c <FMenuSettingClientIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
		       stClientIP=cipInit;
    b882:	81 e0       	ldi	r24, 0x01	; 1
    b884:	80 93 59 01 	sts	0x0159, r24
		       Result=MENU_DONE;
    b888:	80 93 41 02 	sts	0x0241, r24
		       break;     
		  }//EndSwitch	 
    return Result;
}
    b88c:	80 91 41 02 	lds	r24, 0x0241
    b890:	64 96       	adiw	r28, 0x14	; 20
    b892:	0f b6       	in	r0, 0x3f	; 63
    b894:	f8 94       	cli
    b896:	de bf       	out	0x3e, r29	; 62
    b898:	0f be       	out	0x3f, r0	; 63
    b89a:	cd bf       	out	0x3d, r28	; 61
    b89c:	cf 91       	pop	r28
    b89e:	df 91       	pop	r29
    b8a0:	1f 91       	pop	r17
    b8a2:	0f 91       	pop	r16
    b8a4:	ff 90       	pop	r15
    b8a6:	08 95       	ret

0000b8a8 <DisplayStandaloneSequence>:
	 i++;
     _delay_ms(6500);
  return Result;
}

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
    b8a8:	df 93       	push	r29
    b8aa:	cf 93       	push	r28
    b8ac:	cd b7       	in	r28, 0x3d	; 61
    b8ae:	de b7       	in	r29, 0x3e	; 62
    b8b0:	28 97       	sbiw	r28, 0x08	; 8
    b8b2:	0f b6       	in	r0, 0x3f	; 63
    b8b4:	f8 94       	cli
    b8b6:	de bf       	out	0x3e, r29	; 62
    b8b8:	0f be       	out	0x3f, r0	; 63
    b8ba:	cd bf       	out	0x3d, r28	; 61
    b8bc:	58 2f       	mov	r21, r24
	 MapSequence[3]='/';
	 MapSequence[4]='-';
	 MapSequence[5]=164;//0x5C;
	 MapSequence[6]='|';
	 MapSequence[7]='/';
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b8be:	80 91 83 01 	lds	r24, 0x0183
    b8c2:	88 23       	and	r24, r24
    b8c4:	a1 f4       	brne	.+40     	; 0xb8ee <DisplayStandaloneSequence+0x46>

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
     char MapSequence[8];

     //sprintf_P(MapSequence,PSTR("-\|/-|/"));
	 MapSequence[0]='-';
    b8c6:	3d e2       	ldi	r19, 0x2D	; 45
    b8c8:	39 83       	std	Y+1, r19	; 0x01
	 MapSequence[1]='`';//0x5C;
    b8ca:	80 e6       	ldi	r24, 0x60	; 96
    b8cc:	8a 83       	std	Y+2, r24	; 0x02
	 MapSequence[2]='|';
    b8ce:	2c e7       	ldi	r18, 0x7C	; 124
    b8d0:	2b 83       	std	Y+3, r18	; 0x03
	 MapSequence[3]='/';
    b8d2:	9f e2       	ldi	r25, 0x2F	; 47
    b8d4:	9c 83       	std	Y+4, r25	; 0x04
	 MapSequence[4]='-';
    b8d6:	3d 83       	std	Y+5, r19	; 0x05
	 MapSequence[5]=164;//0x5C;
    b8d8:	84 ea       	ldi	r24, 0xA4	; 164
    b8da:	8e 83       	std	Y+6, r24	; 0x06
	 MapSequence[6]='|';
    b8dc:	2f 83       	std	Y+7, r18	; 0x07
	 MapSequence[7]='/';
    b8de:	98 87       	std	Y+8, r25	; 0x08
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b8e0:	47 70       	andi	r20, 0x07	; 7
    b8e2:	fe 01       	movw	r30, r28
    b8e4:	e4 0f       	add	r30, r20
    b8e6:	f1 1d       	adc	r31, r1
    b8e8:	85 2f       	mov	r24, r21
    b8ea:	41 81       	ldd	r20, Z+1	; 0x01
    b8ec:	08 c0       	rjmp	.+16     	; 0xb8fe <DisplayStandaloneSequence+0x56>
	 else if (IsPoolingRestarted==True){
    b8ee:	80 91 83 01 	lds	r24, 0x0183
    b8f2:	81 30       	cpi	r24, 0x01	; 1
    b8f4:	31 f4       	brne	.+12     	; 0xb902 <DisplayStandaloneSequence+0x5a>
	          IsPoolingRestarted=False;
    b8f6:	10 92 83 01 	sts	0x0183, r1
	          lcd_put(x,y,'X');     
    b8fa:	85 2f       	mov	r24, r21
    b8fc:	48 e5       	ldi	r20, 0x58	; 88
    b8fe:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			  }

}
    b902:	28 96       	adiw	r28, 0x08	; 8
    b904:	0f b6       	in	r0, 0x3f	; 63
    b906:	f8 94       	cli
    b908:	de bf       	out	0x3e, r29	; 62
    b90a:	0f be       	out	0x3f, r0	; 63
    b90c:	cd bf       	out	0x3d, r28	; 61
    b90e:	cf 91       	pop	r28
    b910:	df 91       	pop	r29
    b912:	08 95       	ret

0000b914 <FSettingPumpPooling>:
	      break;
	 }
     return Result;
}

char FSettingPumpPooling(){//Parameter: PumpCount,
    b914:	ef 92       	push	r14
    b916:	ff 92       	push	r15
    b918:	0f 93       	push	r16
    b91a:	1f 93       	push	r17
    b91c:	df 93       	push	r29
    b91e:	cf 93       	push	r28
    b920:	cd b7       	in	r28, 0x3d	; 61
    b922:	de b7       	in	r29, 0x3e	; 62
    b924:	6a 97       	sbiw	r28, 0x1a	; 26
    b926:	0f b6       	in	r0, 0x3f	; 63
    b928:	f8 94       	cli
    b92a:	de bf       	out	0x3e, r29	; 62
    b92c:	0f be       	out	0x3f, r0	; 63
    b92e:	cd bf       	out	0x3d, r28	; 61
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
    b930:	80 91 1e 02 	lds	r24, 0x021E
    b934:	82 30       	cpi	r24, 0x02	; 2
    b936:	09 f4       	brne	.+2      	; 0xb93a <FSettingPumpPooling+0x26>
    b938:	18 c1       	rjmp	.+560    	; 0xbb6a <FSettingPumpPooling+0x256>
    b93a:	83 30       	cpi	r24, 0x03	; 3
    b93c:	30 f4       	brcc	.+12     	; 0xb94a <FSettingPumpPooling+0x36>
    b93e:	88 23       	and	r24, r24
    b940:	59 f0       	breq	.+22     	; 0xb958 <FSettingPumpPooling+0x44>
    b942:	81 30       	cpi	r24, 0x01	; 1
    b944:	09 f0       	breq	.+2      	; 0xb948 <FSettingPumpPooling+0x34>
    b946:	ed c1       	rjmp	.+986    	; 0xbd22 <FSettingPumpPooling+0x40e>
    b948:	06 c1       	rjmp	.+524    	; 0xbb56 <FSettingPumpPooling+0x242>
    b94a:	83 30       	cpi	r24, 0x03	; 3
    b94c:	09 f4       	brne	.+2      	; 0xb950 <FSettingPumpPooling+0x3c>
    b94e:	da c1       	rjmp	.+948    	; 0xbd04 <FSettingPumpPooling+0x3f0>
    b950:	84 30       	cpi	r24, 0x04	; 4
    b952:	09 f0       	breq	.+2      	; 0xb956 <FSettingPumpPooling+0x42>
    b954:	e6 c1       	rjmp	.+972    	; 0xbd22 <FSettingPumpPooling+0x40e>
    b956:	e1 c1       	rjmp	.+962    	; 0xbd1a <FSettingPumpPooling+0x406>
	 case ppInitMenu:
          lcd_clear();
    b958:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    b95c:	00 e0       	ldi	r16, 0x00	; 0
    b95e:	10 e0       	ldi	r17, 0x00	; 0
		  for (i=0;i<6;i++){
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
    b960:	7e 01       	movw	r14, r28
    b962:	08 94       	sec
    b964:	e1 1c       	adc	r14, r1
    b966:	f1 1c       	adc	r15, r1
    b968:	c8 01       	movw	r24, r16
    b96a:	86 5b       	subi	r24, 0xB6	; 182
    b96c:	9e 4f       	sbci	r25, 0xFE	; 254
    b96e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    b972:	f7 01       	movw	r30, r14
    b974:	e0 0f       	add	r30, r16
    b976:	f1 1f       	adc	r31, r17
    b978:	80 83       	st	Z, r24
    b97a:	0f 5f       	subi	r16, 0xFF	; 255
    b97c:	1f 4f       	sbci	r17, 0xFF	; 255
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
	 case ppInitMenu:
          lcd_clear();
		  for (i=0;i<6;i++){
    b97e:	06 30       	cpi	r16, 0x06	; 6
    b980:	11 05       	cpc	r17, r1
    b982:	91 f7       	brne	.-28     	; 0xb968 <FSettingPumpPooling+0x54>
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
		  }

		  sprintf_P(lcdteks,PSTR("1.MaxPump:%d"),PPoolingSetting[0]);lcd_print(1,1,lcdteks);
    b984:	00 d0       	rcall	.+0      	; 0xb986 <FSettingPumpPooling+0x72>
    b986:	00 d0       	rcall	.+0      	; 0xb988 <FSettingPumpPooling+0x74>
    b988:	00 d0       	rcall	.+0      	; 0xb98a <FSettingPumpPooling+0x76>
    b98a:	ed b7       	in	r30, 0x3d	; 61
    b98c:	fe b7       	in	r31, 0x3e	; 62
    b98e:	31 96       	adiw	r30, 0x01	; 1
    b990:	8e 01       	movw	r16, r28
    b992:	09 5f       	subi	r16, 0xF9	; 249
    b994:	1f 4f       	sbci	r17, 0xFF	; 255
    b996:	ad b7       	in	r26, 0x3d	; 61
    b998:	be b7       	in	r27, 0x3e	; 62
    b99a:	12 96       	adiw	r26, 0x02	; 2
    b99c:	1c 93       	st	X, r17
    b99e:	0e 93       	st	-X, r16
    b9a0:	11 97       	sbiw	r26, 0x01	; 1
    b9a2:	81 e3       	ldi	r24, 0x31	; 49
    b9a4:	9f e0       	ldi	r25, 0x0F	; 15
    b9a6:	93 83       	std	Z+3, r25	; 0x03
    b9a8:	82 83       	std	Z+2, r24	; 0x02
    b9aa:	89 81       	ldd	r24, Y+1	; 0x01
    b9ac:	84 83       	std	Z+4, r24	; 0x04
    b9ae:	15 82       	std	Z+5, r1	; 0x05
    b9b0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    b9b4:	ed b7       	in	r30, 0x3d	; 61
    b9b6:	fe b7       	in	r31, 0x3e	; 62
    b9b8:	36 96       	adiw	r30, 0x06	; 6
    b9ba:	0f b6       	in	r0, 0x3f	; 63
    b9bc:	f8 94       	cli
    b9be:	fe bf       	out	0x3e, r31	; 62
    b9c0:	0f be       	out	0x3f, r0	; 63
    b9c2:	ed bf       	out	0x3d, r30	; 61
    b9c4:	81 e0       	ldi	r24, 0x01	; 1
    b9c6:	61 e0       	ldi	r22, 0x01	; 1
    b9c8:	a8 01       	movw	r20, r16
    b9ca:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          sprintf_P(lcdteks,PSTR("2.nNoPump:%d"),PPoolingSetting[1]);lcd_print(2,1,lcdteks);
    b9ce:	00 d0       	rcall	.+0      	; 0xb9d0 <FSettingPumpPooling+0xbc>
    b9d0:	00 d0       	rcall	.+0      	; 0xb9d2 <FSettingPumpPooling+0xbe>
    b9d2:	00 d0       	rcall	.+0      	; 0xb9d4 <FSettingPumpPooling+0xc0>
    b9d4:	ed b7       	in	r30, 0x3d	; 61
    b9d6:	fe b7       	in	r31, 0x3e	; 62
    b9d8:	31 96       	adiw	r30, 0x01	; 1
    b9da:	ad b7       	in	r26, 0x3d	; 61
    b9dc:	be b7       	in	r27, 0x3e	; 62
    b9de:	12 96       	adiw	r26, 0x02	; 2
    b9e0:	1c 93       	st	X, r17
    b9e2:	0e 93       	st	-X, r16
    b9e4:	11 97       	sbiw	r26, 0x01	; 1
    b9e6:	84 e2       	ldi	r24, 0x24	; 36
    b9e8:	9f e0       	ldi	r25, 0x0F	; 15
    b9ea:	93 83       	std	Z+3, r25	; 0x03
    b9ec:	82 83       	std	Z+2, r24	; 0x02
    b9ee:	8a 81       	ldd	r24, Y+2	; 0x02
    b9f0:	84 83       	std	Z+4, r24	; 0x04
    b9f2:	15 82       	std	Z+5, r1	; 0x05
    b9f4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    b9f8:	ed b7       	in	r30, 0x3d	; 61
    b9fa:	fe b7       	in	r31, 0x3e	; 62
    b9fc:	36 96       	adiw	r30, 0x06	; 6
    b9fe:	0f b6       	in	r0, 0x3f	; 63
    ba00:	f8 94       	cli
    ba02:	fe bf       	out	0x3e, r31	; 62
    ba04:	0f be       	out	0x3f, r0	; 63
    ba06:	ed bf       	out	0x3d, r30	; 61
    ba08:	82 e0       	ldi	r24, 0x02	; 2
    ba0a:	61 e0       	ldi	r22, 0x01	; 1
    ba0c:	a8 01       	movw	r20, r16
    ba0e:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          sprintf_P(lcdteks,PSTR("3.TrySend:%d"),PPoolingSetting[2]);lcd_print(3,1,lcdteks);
    ba12:	00 d0       	rcall	.+0      	; 0xba14 <FSettingPumpPooling+0x100>
    ba14:	00 d0       	rcall	.+0      	; 0xba16 <FSettingPumpPooling+0x102>
    ba16:	00 d0       	rcall	.+0      	; 0xba18 <FSettingPumpPooling+0x104>
    ba18:	ed b7       	in	r30, 0x3d	; 61
    ba1a:	fe b7       	in	r31, 0x3e	; 62
    ba1c:	31 96       	adiw	r30, 0x01	; 1
    ba1e:	ad b7       	in	r26, 0x3d	; 61
    ba20:	be b7       	in	r27, 0x3e	; 62
    ba22:	12 96       	adiw	r26, 0x02	; 2
    ba24:	1c 93       	st	X, r17
    ba26:	0e 93       	st	-X, r16
    ba28:	11 97       	sbiw	r26, 0x01	; 1
    ba2a:	87 e1       	ldi	r24, 0x17	; 23
    ba2c:	9f e0       	ldi	r25, 0x0F	; 15
    ba2e:	93 83       	std	Z+3, r25	; 0x03
    ba30:	82 83       	std	Z+2, r24	; 0x02
    ba32:	8b 81       	ldd	r24, Y+3	; 0x03
    ba34:	84 83       	std	Z+4, r24	; 0x04
    ba36:	15 82       	std	Z+5, r1	; 0x05
    ba38:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    ba3c:	ed b7       	in	r30, 0x3d	; 61
    ba3e:	fe b7       	in	r31, 0x3e	; 62
    ba40:	36 96       	adiw	r30, 0x06	; 6
    ba42:	0f b6       	in	r0, 0x3f	; 63
    ba44:	f8 94       	cli
    ba46:	fe bf       	out	0x3e, r31	; 62
    ba48:	0f be       	out	0x3f, r0	; 63
    ba4a:	ed bf       	out	0x3d, r30	; 61
    ba4c:	83 e0       	ldi	r24, 0x03	; 3
    ba4e:	61 e0       	ldi	r22, 0x01	; 1
    ba50:	a8 01       	movw	r20, r16
    ba52:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          sprintf_P(lcdteks,PSTR("4.TimPool:%d"),PPoolingSetting[3]);lcd_print(4,1,lcdteks);
    ba56:	00 d0       	rcall	.+0      	; 0xba58 <FSettingPumpPooling+0x144>
    ba58:	00 d0       	rcall	.+0      	; 0xba5a <FSettingPumpPooling+0x146>
    ba5a:	00 d0       	rcall	.+0      	; 0xba5c <FSettingPumpPooling+0x148>
    ba5c:	ed b7       	in	r30, 0x3d	; 61
    ba5e:	fe b7       	in	r31, 0x3e	; 62
    ba60:	31 96       	adiw	r30, 0x01	; 1
    ba62:	ad b7       	in	r26, 0x3d	; 61
    ba64:	be b7       	in	r27, 0x3e	; 62
    ba66:	12 96       	adiw	r26, 0x02	; 2
    ba68:	1c 93       	st	X, r17
    ba6a:	0e 93       	st	-X, r16
    ba6c:	11 97       	sbiw	r26, 0x01	; 1
    ba6e:	8a e0       	ldi	r24, 0x0A	; 10
    ba70:	9f e0       	ldi	r25, 0x0F	; 15
    ba72:	93 83       	std	Z+3, r25	; 0x03
    ba74:	82 83       	std	Z+2, r24	; 0x02
    ba76:	8c 81       	ldd	r24, Y+4	; 0x04
    ba78:	84 83       	std	Z+4, r24	; 0x04
    ba7a:	15 82       	std	Z+5, r1	; 0x05
    ba7c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    ba80:	ed b7       	in	r30, 0x3d	; 61
    ba82:	fe b7       	in	r31, 0x3e	; 62
    ba84:	36 96       	adiw	r30, 0x06	; 6
    ba86:	0f b6       	in	r0, 0x3f	; 63
    ba88:	f8 94       	cli
    ba8a:	fe bf       	out	0x3e, r31	; 62
    ba8c:	0f be       	out	0x3f, r0	; 63
    ba8e:	ed bf       	out	0x3d, r30	; 61
    ba90:	84 e0       	ldi	r24, 0x04	; 4
    ba92:	61 e0       	ldi	r22, 0x01	; 1
    ba94:	a8 01       	movw	r20, r16
    ba96:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          sprintf_P(lcdteks,PSTR("5.Dly:%d"),PPoolingSetting[4]);lcd_print(1,13,lcdteks);
    ba9a:	00 d0       	rcall	.+0      	; 0xba9c <FSettingPumpPooling+0x188>
    ba9c:	00 d0       	rcall	.+0      	; 0xba9e <FSettingPumpPooling+0x18a>
    ba9e:	00 d0       	rcall	.+0      	; 0xbaa0 <FSettingPumpPooling+0x18c>
    baa0:	ed b7       	in	r30, 0x3d	; 61
    baa2:	fe b7       	in	r31, 0x3e	; 62
    baa4:	31 96       	adiw	r30, 0x01	; 1
    baa6:	ad b7       	in	r26, 0x3d	; 61
    baa8:	be b7       	in	r27, 0x3e	; 62
    baaa:	12 96       	adiw	r26, 0x02	; 2
    baac:	1c 93       	st	X, r17
    baae:	0e 93       	st	-X, r16
    bab0:	11 97       	sbiw	r26, 0x01	; 1
    bab2:	81 e0       	ldi	r24, 0x01	; 1
    bab4:	9f e0       	ldi	r25, 0x0F	; 15
    bab6:	93 83       	std	Z+3, r25	; 0x03
    bab8:	82 83       	std	Z+2, r24	; 0x02
    baba:	8d 81       	ldd	r24, Y+5	; 0x05
    babc:	84 83       	std	Z+4, r24	; 0x04
    babe:	15 82       	std	Z+5, r1	; 0x05
    bac0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    bac4:	ed b7       	in	r30, 0x3d	; 61
    bac6:	fe b7       	in	r31, 0x3e	; 62
    bac8:	36 96       	adiw	r30, 0x06	; 6
    baca:	0f b6       	in	r0, 0x3f	; 63
    bacc:	f8 94       	cli
    bace:	fe bf       	out	0x3e, r31	; 62
    bad0:	0f be       	out	0x3f, r0	; 63
    bad2:	ed bf       	out	0x3d, r30	; 61
    bad4:	81 e0       	ldi	r24, 0x01	; 1
    bad6:	6d e0       	ldi	r22, 0x0D	; 13
    bad8:	a8 01       	movw	r20, r16
    bada:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          sprintf_P(lcdteks,PSTR("6.Act:%d"),PPoolingSetting[5]);lcd_print(2,13,lcdteks);
    bade:	00 d0       	rcall	.+0      	; 0xbae0 <FSettingPumpPooling+0x1cc>
    bae0:	00 d0       	rcall	.+0      	; 0xbae2 <FSettingPumpPooling+0x1ce>
    bae2:	00 d0       	rcall	.+0      	; 0xbae4 <FSettingPumpPooling+0x1d0>
    bae4:	ed b7       	in	r30, 0x3d	; 61
    bae6:	fe b7       	in	r31, 0x3e	; 62
    bae8:	31 96       	adiw	r30, 0x01	; 1
    baea:	ad b7       	in	r26, 0x3d	; 61
    baec:	be b7       	in	r27, 0x3e	; 62
    baee:	12 96       	adiw	r26, 0x02	; 2
    baf0:	1c 93       	st	X, r17
    baf2:	0e 93       	st	-X, r16
    baf4:	11 97       	sbiw	r26, 0x01	; 1
    baf6:	88 ef       	ldi	r24, 0xF8	; 248
    baf8:	9e e0       	ldi	r25, 0x0E	; 14
    bafa:	93 83       	std	Z+3, r25	; 0x03
    bafc:	82 83       	std	Z+2, r24	; 0x02
    bafe:	8e 81       	ldd	r24, Y+6	; 0x06
    bb00:	84 83       	std	Z+4, r24	; 0x04
    bb02:	15 82       	std	Z+5, r1	; 0x05
    bb04:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    bb08:	ed b7       	in	r30, 0x3d	; 61
    bb0a:	fe b7       	in	r31, 0x3e	; 62
    bb0c:	36 96       	adiw	r30, 0x06	; 6
    bb0e:	0f b6       	in	r0, 0x3f	; 63
    bb10:	f8 94       	cli
    bb12:	fe bf       	out	0x3e, r31	; 62
    bb14:	0f be       	out	0x3f, r0	; 63
    bb16:	ed bf       	out	0x3d, r30	; 61
    bb18:	82 e0       	ldi	r24, 0x02	; 2
    bb1a:	6d e0       	ldi	r22, 0x0D	; 13
    bb1c:	a8 01       	movw	r20, r16
    bb1e:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          sprintf_P(lcdteks,PSTR("[*]Exit"));lcd_print(4,13,lcdteks);
    bb22:	00 d0       	rcall	.+0      	; 0xbb24 <FSettingPumpPooling+0x210>
    bb24:	00 d0       	rcall	.+0      	; 0xbb26 <FSettingPumpPooling+0x212>
    bb26:	ad b7       	in	r26, 0x3d	; 61
    bb28:	be b7       	in	r27, 0x3e	; 62
    bb2a:	12 96       	adiw	r26, 0x02	; 2
    bb2c:	1c 93       	st	X, r17
    bb2e:	0e 93       	st	-X, r16
    bb30:	11 97       	sbiw	r26, 0x01	; 1
    bb32:	80 ef       	ldi	r24, 0xF0	; 240
    bb34:	9e e0       	ldi	r25, 0x0E	; 14
    bb36:	14 96       	adiw	r26, 0x04	; 4
    bb38:	9c 93       	st	X, r25
    bb3a:	8e 93       	st	-X, r24
    bb3c:	13 97       	sbiw	r26, 0x03	; 3
    bb3e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    bb42:	0f 90       	pop	r0
    bb44:	0f 90       	pop	r0
    bb46:	0f 90       	pop	r0
    bb48:	0f 90       	pop	r0
    bb4a:	84 e0       	ldi	r24, 0x04	; 4
    bb4c:	6d e0       	ldi	r22, 0x0D	; 13
    bb4e:	a8 01       	movw	r20, r16
    bb50:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    bb54:	08 c0       	rjmp	.+16     	; 0xbb66 <FSettingPumpPooling+0x252>

          stPumpPooling=ppPoolingSettingInput;
	      break;
     case ppDisplaySequence:
          IsNewPoolingSequence=False;
    bb56:	10 92 81 01 	sts	0x0181, r1
		  DisplayStandaloneSequence(3,14,iSequencePooling);
    bb5a:	83 e0       	ldi	r24, 0x03	; 3
    bb5c:	6e e0       	ldi	r22, 0x0E	; 14
    bb5e:	40 91 80 01 	lds	r20, 0x0180
    bb62:	0e 94 54 5c 	call	0xb8a8	; 0xb8a8 <DisplayStandaloneSequence>
          stPumpPooling=ppPoolingSettingInput;
    bb66:	82 e0       	ldi	r24, 0x02	; 2
    bb68:	ca c0       	rjmp	.+404    	; 0xbcfe <FSettingPumpPooling+0x3ea>
	      break;
     case ppPoolingSettingInput:
	      if(IsNewPoolingSequence==True)stPumpPooling=ppDisplaySequence;
    bb6a:	80 91 81 01 	lds	r24, 0x0181
    bb6e:	81 30       	cpi	r24, 0x01	; 1
    bb70:	11 f4       	brne	.+4      	; 0xbb76 <FSettingPumpPooling+0x262>
    bb72:	80 93 1e 02 	sts	0x021E, r24

          KeyChar=_key_btn(_key_scan(1));
    bb76:	81 e0       	ldi	r24, 0x01	; 1
    bb78:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    bb7c:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    bb80:	08 2f       	mov	r16, r24
    bb82:	01 53       	subi	r16, 0x31	; 49
    bb84:	06 30       	cpi	r16, 0x06	; 6
    bb86:	10 f0       	brcs	.+4      	; 0xbb8c <FSettingPumpPooling+0x278>
    bb88:	00 e0       	ldi	r16, 0x00	; 0
    bb8a:	04 c0       	rjmp	.+8      	; 0xbb94 <FSettingPumpPooling+0x280>
		      Addr=KeyChar-'1';
			  TimSend=0;
    bb8c:	10 92 7e 0c 	sts	0x0C7E, r1
			  IsStandaloneAcknoledge=False;
    bb90:	10 92 82 01 	sts	0x0182, r1
          }
		  switch(KeyChar){
    bb94:	83 33       	cpi	r24, 0x33	; 51
    bb96:	09 f4       	brne	.+2      	; 0xbb9a <FSettingPumpPooling+0x286>
    bb98:	58 c0       	rjmp	.+176    	; 0xbc4a <FSettingPumpPooling+0x336>
    bb9a:	84 33       	cpi	r24, 0x34	; 52
    bb9c:	40 f4       	brcc	.+16     	; 0xbbae <FSettingPumpPooling+0x29a>
    bb9e:	81 33       	cpi	r24, 0x31	; 49
    bba0:	81 f0       	breq	.+32     	; 0xbbc2 <FSettingPumpPooling+0x2ae>
    bba2:	82 33       	cpi	r24, 0x32	; 50
    bba4:	b0 f5       	brcc	.+108    	; 0xbc12 <FSettingPumpPooling+0x2fe>
    bba6:	8a 32       	cpi	r24, 0x2A	; 42
    bba8:	09 f0       	breq	.+2      	; 0xbbac <FSettingPumpPooling+0x298>
    bbaa:	bb c0       	rjmp	.+374    	; 0xbd22 <FSettingPumpPooling+0x40e>
    bbac:	a7 c0       	rjmp	.+334    	; 0xbcfc <FSettingPumpPooling+0x3e8>
    bbae:	85 33       	cpi	r24, 0x35	; 53
    bbb0:	09 f4       	brne	.+2      	; 0xbbb4 <FSettingPumpPooling+0x2a0>
    bbb2:	7c c0       	rjmp	.+248    	; 0xbcac <FSettingPumpPooling+0x398>
    bbb4:	85 33       	cpi	r24, 0x35	; 53
    bbb6:	08 f4       	brcc	.+2      	; 0xbbba <FSettingPumpPooling+0x2a6>
    bbb8:	6a c0       	rjmp	.+212    	; 0xbc8e <FSettingPumpPooling+0x37a>
    bbba:	86 33       	cpi	r24, 0x36	; 54
    bbbc:	09 f0       	breq	.+2      	; 0xbbc0 <FSettingPumpPooling+0x2ac>
    bbbe:	b1 c0       	rjmp	.+354    	; 0xbd22 <FSettingPumpPooling+0x40e>
    bbc0:	84 c0       	rjmp	.+264    	; 0xbcca <FSettingPumpPooling+0x3b6>
		  case '1'://MaxPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
    bbc2:	20 2f       	mov	r18, r16
    bbc4:	30 e0       	ldi	r19, 0x00	; 0
    bbc6:	fe 01       	movw	r30, r28
    bbc8:	31 96       	adiw	r30, 0x01	; 1
    bbca:	e2 0f       	add	r30, r18
    bbcc:	f3 1f       	adc	r31, r19
    bbce:	80 81       	ld	r24, Z
    bbd0:	90 e0       	ldi	r25, 0x00	; 0
    bbd2:	01 96       	adiw	r24, 0x01	; 1
    bbd4:	61 e1       	ldi	r22, 0x11	; 17
    bbd6:	70 e0       	ldi	r23, 0x00	; 0
    bbd8:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    bbdc:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    bbde:	88 23       	and	r24, r24
    bbe0:	11 f4       	brne	.+4      	; 0xbbe6 <FSettingPumpPooling+0x2d2>
    bbe2:	81 e0       	ldi	r24, 0x01	; 1
    bbe4:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
    bbe6:	2c 0f       	add	r18, r28
    bbe8:	3d 1f       	adc	r19, r29
    bbea:	f9 01       	movw	r30, r18
    bbec:	11 81       	ldd	r17, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bbee:	85 e1       	ldi	r24, 0x15	; 21
    bbf0:	80 93 ad 05 	sts	0x05AD, r24
	 PoolMsg=plMsg;
    bbf4:	10 93 d9 0b 	sts	0x0BD9, r17
     IsControlPooling=True;
    bbf8:	81 e0       	ldi	r24, 0x01	; 1
    bbfa:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bbfe:	80 2f       	mov	r24, r16
    bc00:	90 e0       	ldi	r25, 0x00	; 0
    bc02:	86 5b       	subi	r24, 0xB6	; 182
    bc04:	9e 4f       	sbci	r25, 0xFE	; 254
    bc06:	61 2f       	mov	r22, r17
    bc08:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			   PumpCountMax=PPoolingSetting[Addr];
    bc0c:	10 93 5c 01 	sts	0x015C, r17
    bc10:	1a c0       	rjmp	.+52     	; 0xbc46 <FSettingPumpPooling+0x332>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bc12:	20 2f       	mov	r18, r16
    bc14:	30 e0       	ldi	r19, 0x00	; 0
    bc16:	fe 01       	movw	r30, r28
    bc18:	e2 0f       	add	r30, r18
    bc1a:	f3 1f       	adc	r31, r19
    bc1c:	81 81       	ldd	r24, Z+1	; 0x01
    bc1e:	90 e0       	ldi	r25, 0x00	; 0
    bc20:	01 96       	adiw	r24, 0x01	; 1
    bc22:	65 e1       	ldi	r22, 0x15	; 21
    bc24:	70 e0       	ldi	r23, 0x00	; 0
    bc26:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    bc2a:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bc2c:	84 e1       	ldi	r24, 0x14	; 20
    bc2e:	80 93 ad 05 	sts	0x05AD, r24
	 PoolMsg=plMsg;
    bc32:	60 93 d9 0b 	sts	0x0BD9, r22
     IsControlPooling=True;
    bc36:	81 e0       	ldi	r24, 0x01	; 1
    bc38:	80 93 84 01 	sts	0x0184, r24
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   //SendSlaveCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bc3c:	c9 01       	movw	r24, r18
    bc3e:	86 5b       	subi	r24, 0xB6	; 182
    bc40:	9e 4f       	sbci	r25, 0xFE	; 254
    bc42:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
    bc46:	83 e0       	ldi	r24, 0x03	; 3
    bc48:	5a c0       	rjmp	.+180    	; 0xbcfe <FSettingPumpPooling+0x3ea>
		       break;
		  case '3'://TrySend
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bc4a:	20 2f       	mov	r18, r16
    bc4c:	30 e0       	ldi	r19, 0x00	; 0
    bc4e:	fe 01       	movw	r30, r28
    bc50:	31 96       	adiw	r30, 0x01	; 1
    bc52:	e2 0f       	add	r30, r18
    bc54:	f3 1f       	adc	r31, r19
    bc56:	80 81       	ld	r24, Z
    bc58:	90 e0       	ldi	r25, 0x00	; 0
    bc5a:	01 96       	adiw	r24, 0x01	; 1
    bc5c:	65 e1       	ldi	r22, 0x15	; 21
    bc5e:	70 e0       	ldi	r23, 0x00	; 0
    bc60:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    bc64:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    bc66:	88 23       	and	r24, r24
    bc68:	11 f4       	brne	.+4      	; 0xbc6e <FSettingPumpPooling+0x35a>
    bc6a:	81 e0       	ldi	r24, 0x01	; 1
    bc6c:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
    bc6e:	2c 0f       	add	r18, r28
    bc70:	3d 1f       	adc	r19, r29
    bc72:	d9 01       	movw	r26, r18
    bc74:	11 96       	adiw	r26, 0x01	; 1
    bc76:	6c 91       	ld	r22, X
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bc78:	86 e1       	ldi	r24, 0x16	; 22
    bc7a:	80 93 ad 05 	sts	0x05AD, r24
	 PoolMsg=plMsg;
    bc7e:	60 93 d9 0b 	sts	0x0BD9, r22
     IsControlPooling=True;
    bc82:	81 e0       	ldi	r24, 0x01	; 1
    bc84:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bc88:	80 2f       	mov	r24, r16
    bc8a:	90 e0       	ldi	r25, 0x00	; 0
    bc8c:	d8 cf       	rjmp	.-80     	; 0xbc3e <FSettingPumpPooling+0x32a>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '4'://TimPool
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bc8e:	20 2f       	mov	r18, r16
    bc90:	30 e0       	ldi	r19, 0x00	; 0
    bc92:	fe 01       	movw	r30, r28
    bc94:	e2 0f       	add	r30, r18
    bc96:	f3 1f       	adc	r31, r19
    bc98:	81 81       	ldd	r24, Z+1	; 0x01
    bc9a:	90 e0       	ldi	r25, 0x00	; 0
    bc9c:	01 96       	adiw	r24, 0x01	; 1
    bc9e:	65 e1       	ldi	r22, 0x15	; 21
    bca0:	70 e0       	ldi	r23, 0x00	; 0
    bca2:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    bca6:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bca8:	87 e1       	ldi	r24, 0x17	; 23
    bcaa:	c1 cf       	rjmp	.-126    	; 0xbc2e <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '5'://DelayNextPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%41); 
    bcac:	20 2f       	mov	r18, r16
    bcae:	30 e0       	ldi	r19, 0x00	; 0
    bcb0:	fe 01       	movw	r30, r28
    bcb2:	e2 0f       	add	r30, r18
    bcb4:	f3 1f       	adc	r31, r19
    bcb6:	81 81       	ldd	r24, Z+1	; 0x01
    bcb8:	90 e0       	ldi	r25, 0x00	; 0
    bcba:	01 96       	adiw	r24, 0x01	; 1
    bcbc:	69 e2       	ldi	r22, 0x29	; 41
    bcbe:	70 e0       	ldi	r23, 0x00	; 0
    bcc0:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    bcc4:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bcc6:	88 e1       	ldi	r24, 0x18	; 24
    bcc8:	b2 cf       	rjmp	.-156    	; 0xbc2e <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    bcca:	8a e4       	ldi	r24, 0x4A	; 74
    bccc:	91 e0       	ldi	r25, 0x01	; 1
    bcce:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bcd2:	10 e0       	ldi	r17, 0x00	; 0
    bcd4:	fe 01       	movw	r30, r28
    bcd6:	e0 0f       	add	r30, r16
    bcd8:	f1 1f       	adc	r31, r17
    bcda:	21 81       	ldd	r18, Z+1	; 0x01
    bcdc:	30 e0       	ldi	r19, 0x00	; 0
    bcde:	68 2f       	mov	r22, r24
    bce0:	70 e0       	ldi	r23, 0x00	; 0
    bce2:	6f 5f       	subi	r22, 0xFF	; 255
    bce4:	7f 4f       	sbci	r23, 0xFF	; 255
    bce6:	c9 01       	movw	r24, r18
    bce8:	01 96       	adiw	r24, 0x01	; 1
    bcea:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    bcee:	68 2f       	mov	r22, r24
    bcf0:	c8 01       	movw	r24, r16
    bcf2:	86 5b       	subi	r24, 0xB6	; 182
    bcf4:	9e 4f       	sbci	r25, 0xFE	; 254
    bcf6:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
    bcfa:	0c c0       	rjmp	.+24     	; 0xbd14 <FSettingPumpPooling+0x400>
			   stPumpPooling=ppInitMenu;
		       break;
		  case '*'://Exit
		       stPumpPooling=ppExitSettingPooling;		            
    bcfc:	84 e0       	ldi	r24, 0x04	; 4
    bcfe:	80 93 1e 02 	sts	0x021E, r24
    bd02:	0f c0       	rjmp	.+30     	; 0xbd22 <FSettingPumpPooling+0x40e>
		       break;
		  }  
	      break;
     case ppWaitPoolingRespond:	    
	      if ((IsStandaloneAcknoledge==True)||(TimSend>5))stPumpPooling=ppInitMenu;
    bd04:	80 91 82 01 	lds	r24, 0x0182
    bd08:	81 30       	cpi	r24, 0x01	; 1
    bd0a:	21 f0       	breq	.+8      	; 0xbd14 <FSettingPumpPooling+0x400>
    bd0c:	80 91 7e 0c 	lds	r24, 0x0C7E
    bd10:	86 30       	cpi	r24, 0x06	; 6
    bd12:	38 f0       	brcs	.+14     	; 0xbd22 <FSettingPumpPooling+0x40e>
    bd14:	10 92 1e 02 	sts	0x021E, r1
    bd18:	04 c0       	rjmp	.+8      	; 0xbd22 <FSettingPumpPooling+0x40e>
	      break;
     case ppExitSettingPooling:
          stPumpPooling=ppInitMenu;
    bd1a:	10 92 1e 02 	sts	0x021E, r1
    bd1e:	81 e0       	ldi	r24, 0x01	; 1
    bd20:	01 c0       	rjmp	.+2      	; 0xbd24 <FSettingPumpPooling+0x410>
    bd22:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
    }
return Result;
}
    bd24:	6a 96       	adiw	r28, 0x1a	; 26
    bd26:	0f b6       	in	r0, 0x3f	; 63
    bd28:	f8 94       	cli
    bd2a:	de bf       	out	0x3e, r29	; 62
    bd2c:	0f be       	out	0x3f, r0	; 63
    bd2e:	cd bf       	out	0x3d, r28	; 61
    bd30:	cf 91       	pop	r28
    bd32:	df 91       	pop	r29
    bd34:	1f 91       	pop	r17
    bd36:	0f 91       	pop	r16
    bd38:	ff 90       	pop	r15
    bd3a:	ef 90       	pop	r14
    bd3c:	08 95       	ret

0000bd3e <DisplayTicker>:
	 sprintf_P(lcdteks,PSTR("%s %s"),strSystemDate,strSystemTime);
	 lcd_print(2, 1, lcdteks);
}

void DisplayTicker(){
    if (TimTicker>(TICKER_DELAY*2+1)){
    bd3e:	80 91 91 01 	lds	r24, 0x0191
    bd42:	86 31       	cpi	r24, 0x16	; 22
    bd44:	38 f0       	brcs	.+14     	; 0xbd54 <DisplayTicker+0x16>
	    lcd_put(4, 1, '>');
    bd46:	84 e0       	ldi	r24, 0x04	; 4
    bd48:	61 e0       	ldi	r22, 0x01	; 1
    bd4a:	4e e3       	ldi	r20, 0x3E	; 62
    bd4c:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
		TimTicker=0;
    bd50:	10 92 91 01 	sts	0x0191, r1
	}
    if (TimTicker==TICKER_DELAY){
    bd54:	80 91 91 01 	lds	r24, 0x0191
    bd58:	8a 30       	cpi	r24, 0x0A	; 10
    bd5a:	51 f4       	brne	.+20     	; 0xbd70 <DisplayTicker+0x32>
	    lcd_put(4, 1, '<');
    bd5c:	84 e0       	ldi	r24, 0x04	; 4
    bd5e:	61 e0       	ldi	r22, 0x01	; 1
    bd60:	4c e3       	ldi	r20, 0x3C	; 60
    bd62:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
		TimTicker++;
    bd66:	80 91 91 01 	lds	r24, 0x0191
    bd6a:	8f 5f       	subi	r24, 0xFF	; 255
    bd6c:	80 93 91 01 	sts	0x0191, r24
    bd70:	08 95       	ret

0000bd72 <DisplayIdle>:
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    bd72:	6f 92       	push	r6
    bd74:	7f 92       	push	r7
    bd76:	8f 92       	push	r8
    bd78:	9f 92       	push	r9
    bd7a:	af 92       	push	r10
    bd7c:	bf 92       	push	r11
    bd7e:	cf 92       	push	r12
    bd80:	df 92       	push	r13
    bd82:	ff 92       	push	r15
    bd84:	0f 93       	push	r16
    bd86:	1f 93       	push	r17
    bd88:	df 93       	push	r29
    bd8a:	cf 93       	push	r28
    bd8c:	cd b7       	in	r28, 0x3d	; 61
    bd8e:	de b7       	in	r29, 0x3e	; 62
    bd90:	67 97       	sbiw	r28, 0x17	; 23
    bd92:	0f b6       	in	r0, 0x3f	; 63
    bd94:	f8 94       	cli
    bd96:	de bf       	out	0x3e, r29	; 62
    bd98:	0f be       	out	0x3f, r0	; 63
    bd9a:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoopDisplayIdle=0;
static char stDispIdle=diScan;
     char i,iDisp;
     char lcdteks[20],sFIP[3];

     iLoopDisplayIdle++;
    bd9c:	80 91 85 02 	lds	r24, 0x0285
    bda0:	90 91 86 02 	lds	r25, 0x0286
    bda4:	01 96       	adiw	r24, 0x01	; 1
    bda6:	90 93 86 02 	sts	0x0286, r25
    bdaa:	80 93 85 02 	sts	0x0285, r24
     //Setting DateTime ON

	if ((iLoopDisplayIdle%50)==0){
    bdae:	62 e3       	ldi	r22, 0x32	; 50
    bdb0:	70 e0       	ldi	r23, 0x00	; 0
    bdb2:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    bdb6:	89 2b       	or	r24, r25
    bdb8:	09 f5       	brne	.+66     	; 0xbdfc <DisplayIdle+0x8a>
	   if (IFType==IT_STANDALONE)DisplayPumpStatus();
    bdba:	80 91 00 01 	lds	r24, 0x0100
    bdbe:	82 30       	cpi	r24, 0x02	; 2
    bdc0:	11 f4       	brne	.+4      	; 0xbdc6 <DisplayIdle+0x54>
    bdc2:	0e 94 24 4a 	call	0x9448	; 0x9448 <DisplayPumpStatus>
	   if(eeprom_read_byte(&DefShowDateTime)) DisplayDateTime();
    bdc6:	8b e3       	ldi	r24, 0x3B	; 59
    bdc8:	90 e0       	ldi	r25, 0x00	; 0
    bdca:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    bdce:	88 23       	and	r24, r24
    bdd0:	19 f0       	breq	.+6      	; 0xbdd8 <DisplayIdle+0x66>
    bdd2:	0e 94 64 49 	call	0x92c8	; 0x92c8 <DisplayDateTime>
    bdd6:	02 c0       	rjmp	.+4      	; 0xbddc <DisplayIdle+0x6a>
       else DisplayTicker();
    bdd8:	0e 94 9f 5e 	call	0xbd3e	; 0xbd3e <DisplayTicker>
	   //Display Standalone Sequnece
	   
	   if((IFType==IT_STANDALONE)&&(IsNewPoolingSequence==True)){
    bddc:	80 91 00 01 	lds	r24, 0x0100
    bde0:	82 30       	cpi	r24, 0x02	; 2
    bde2:	61 f4       	brne	.+24     	; 0xbdfc <DisplayIdle+0x8a>
    bde4:	80 91 81 01 	lds	r24, 0x0181
    bde8:	81 30       	cpi	r24, 0x01	; 1
    bdea:	41 f4       	brne	.+16     	; 0xbdfc <DisplayIdle+0x8a>
	       IsNewPoolingSequence=False;
    bdec:	10 92 81 01 	sts	0x0181, r1
		   DisplayStandaloneSequence(4,18,iSequencePooling);
    bdf0:	84 e0       	ldi	r24, 0x04	; 4
    bdf2:	62 e1       	ldi	r22, 0x12	; 18
    bdf4:	40 91 80 01 	lds	r20, 0x0180
    bdf8:	0e 94 54 5c 	call	0xb8a8	; 0xb8a8 <DisplayStandaloneSequence>

	 }
     //DisplayPumpStatus Standalone Mode

	 //Display Printing FIP
	 switch (stDispIdle){
    bdfc:	f0 90 84 02 	lds	r15, 0x0284
    be00:	ff 20       	and	r15, r15
    be02:	29 f0       	breq	.+10     	; 0xbe0e <DisplayIdle+0x9c>
    be04:	81 e0       	ldi	r24, 0x01	; 1
    be06:	f8 16       	cp	r15, r24
    be08:	09 f0       	breq	.+2      	; 0xbe0c <DisplayIdle+0x9a>
    be0a:	58 c0       	rjmp	.+176    	; 0xbebc <DisplayIdle+0x14a>
    be0c:	2f c0       	rjmp	.+94     	; 0xbe6c <DisplayIdle+0xfa>
	 case diScan:
	      if (IsBusyIdlePrinting==True){
    be0e:	f0 90 b4 01 	lds	r15, 0x01B4
    be12:	91 e0       	ldi	r25, 0x01	; 1
    be14:	f9 16       	cp	r15, r25
    be16:	09 f0       	breq	.+2      	; 0xbe1a <DisplayIdle+0xa8>
    be18:	51 c0       	rjmp	.+162    	; 0xbebc <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("Printing FIP%s "),strFIP_ID);
    be1a:	00 d0       	rcall	.+0      	; 0xbe1c <DisplayIdle+0xaa>
    be1c:	00 d0       	rcall	.+0      	; 0xbe1e <DisplayIdle+0xac>
    be1e:	00 d0       	rcall	.+0      	; 0xbe20 <DisplayIdle+0xae>
    be20:	ed b7       	in	r30, 0x3d	; 61
    be22:	fe b7       	in	r31, 0x3e	; 62
    be24:	31 96       	adiw	r30, 0x01	; 1
    be26:	8e 01       	movw	r16, r28
    be28:	0c 5f       	subi	r16, 0xFC	; 252
    be2a:	1f 4f       	sbci	r17, 0xFF	; 255
    be2c:	ad b7       	in	r26, 0x3d	; 61
    be2e:	be b7       	in	r27, 0x3e	; 62
    be30:	12 96       	adiw	r26, 0x02	; 2
    be32:	1c 93       	st	X, r17
    be34:	0e 93       	st	-X, r16
    be36:	11 97       	sbiw	r26, 0x01	; 1
    be38:	85 e5       	ldi	r24, 0x55	; 85
    be3a:	9e e1       	ldi	r25, 0x1E	; 30
    be3c:	93 83       	std	Z+3, r25	; 0x03
    be3e:	82 83       	std	Z+2, r24	; 0x02
    be40:	8f eb       	ldi	r24, 0xBF	; 191
    be42:	97 e0       	ldi	r25, 0x07	; 7
    be44:	95 83       	std	Z+5, r25	; 0x05
    be46:	84 83       	std	Z+4, r24	; 0x04
    be48:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    be4c:	ed b7       	in	r30, 0x3d	; 61
    be4e:	fe b7       	in	r31, 0x3e	; 62
    be50:	36 96       	adiw	r30, 0x06	; 6
    be52:	0f b6       	in	r0, 0x3f	; 63
    be54:	f8 94       	cli
    be56:	fe bf       	out	0x3e, r31	; 62
    be58:	0f be       	out	0x3f, r0	; 63
    be5a:	ed bf       	out	0x3d, r30	; 61
    be5c:	83 e0       	ldi	r24, 0x03	; 3
    be5e:	61 e0       	ldi	r22, 0x01	; 1
    be60:	a8 01       	movw	r20, r16
    be62:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   stDispIdle=diWaitNoBusy;
    be66:	f0 92 84 02 	sts	0x0284, r15
    be6a:	28 c0       	rjmp	.+80     	; 0xbebc <DisplayIdle+0x14a>
		  }         
	      break;
     case diWaitNoBusy:
	      if (IsBusyIdlePrinting==False){
    be6c:	80 91 b4 01 	lds	r24, 0x01B4
    be70:	88 23       	and	r24, r24
    be72:	21 f5       	brne	.+72     	; 0xbebc <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("                    "));
    be74:	00 d0       	rcall	.+0      	; 0xbe76 <DisplayIdle+0x104>
    be76:	00 d0       	rcall	.+0      	; 0xbe78 <DisplayIdle+0x106>
    be78:	8e 01       	movw	r16, r28
    be7a:	0c 5f       	subi	r16, 0xFC	; 252
    be7c:	1f 4f       	sbci	r17, 0xFF	; 255
    be7e:	ad b7       	in	r26, 0x3d	; 61
    be80:	be b7       	in	r27, 0x3e	; 62
    be82:	12 96       	adiw	r26, 0x02	; 2
    be84:	1c 93       	st	X, r17
    be86:	0e 93       	st	-X, r16
    be88:	11 97       	sbiw	r26, 0x01	; 1
    be8a:	80 e4       	ldi	r24, 0x40	; 64
    be8c:	9e e1       	ldi	r25, 0x1E	; 30
    be8e:	14 96       	adiw	r26, 0x04	; 4
    be90:	9c 93       	st	X, r25
    be92:	8e 93       	st	-X, r24
    be94:	13 97       	sbiw	r26, 0x03	; 3
    be96:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    be9a:	0f 90       	pop	r0
    be9c:	0f 90       	pop	r0
    be9e:	0f 90       	pop	r0
    bea0:	0f 90       	pop	r0
    bea2:	83 e0       	ldi	r24, 0x03	; 3
    bea4:	61 e0       	ldi	r22, 0x01	; 1
    bea6:	a8 01       	movw	r20, r16
    bea8:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   stDispIdle=diScan;
    beac:	10 92 84 02 	sts	0x0284, r1
			   if (nLocalAccount>0)IsViewFillingFIP=True;
    beb0:	80 91 8f 01 	lds	r24, 0x018F
    beb4:	88 23       	and	r24, r24
    beb6:	11 f0       	breq	.+4      	; 0xbebc <DisplayIdle+0x14a>
    beb8:	f0 92 98 01 	sts	0x0198, r15
		  }
	      break;     
	 }
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
    bebc:	80 91 98 01 	lds	r24, 0x0198
    bec0:	81 30       	cpi	r24, 0x01	; 1
    bec2:	09 f0       	breq	.+2      	; 0xbec6 <DisplayIdle+0x154>
    bec4:	69 c0       	rjmp	.+210    	; 0xbf98 <DisplayIdle+0x226>
	     IsViewFillingFIP=False;
    bec6:	10 92 98 01 	sts	0x0198, r1
		 if (nLocalAccount>0){
    beca:	80 91 8f 01 	lds	r24, 0x018F
    bece:	88 23       	and	r24, r24
    bed0:	09 f4       	brne	.+2      	; 0xbed4 <DisplayIdle+0x162>
    bed2:	5c c0       	rjmp	.+184    	; 0xbf8c <DisplayIdle+0x21a>
		     lcd_printf(3,1,PSTR("@FIP:"));
    bed4:	83 e0       	ldi	r24, 0x03	; 3
    bed6:	61 e0       	ldi	r22, 0x01	; 1
    bed8:	4a e3       	ldi	r20, 0x3A	; 58
    beda:	5e e1       	ldi	r21, 0x1E	; 30
    bedc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    bee0:	ff 24       	eor	r15, r15
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    bee2:	5e 01       	movw	r10, r28
    bee4:	08 94       	sec
    bee6:	a1 1c       	adc	r10, r1
    bee8:	b1 1c       	adc	r11, r1
    beea:	b5 e3       	ldi	r27, 0x35	; 53
    beec:	6b 2e       	mov	r6, r27
    beee:	be e1       	ldi	r27, 0x1E	; 30
    bef0:	7b 2e       	mov	r7, r27
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    bef2:	a4 e0       	ldi	r26, 0x04	; 4
    bef4:	ca 2e       	mov	r12, r26
    bef6:	d1 2c       	mov	r13, r1
    bef8:	cc 0e       	add	r12, r28
    befa:	dd 1e       	adc	r13, r29
    befc:	f1 e3       	ldi	r31, 0x31	; 49
    befe:	8f 2e       	mov	r8, r31
    bf00:	fe e1       	ldi	r31, 0x1E	; 30
    bf02:	9f 2e       	mov	r9, r31
    bf04:	3d c0       	rjmp	.+122    	; 0xbf80 <DisplayIdle+0x20e>
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    bf06:	0f 2d       	mov	r16, r15
    bf08:	10 e0       	ldi	r17, 0x00	; 0
    bf0a:	00 d0       	rcall	.+0      	; 0xbf0c <DisplayIdle+0x19a>
    bf0c:	00 d0       	rcall	.+0      	; 0xbf0e <DisplayIdle+0x19c>
    bf0e:	00 d0       	rcall	.+0      	; 0xbf10 <DisplayIdle+0x19e>
    bf10:	ad b7       	in	r26, 0x3d	; 61
    bf12:	be b7       	in	r27, 0x3e	; 62
    bf14:	11 96       	adiw	r26, 0x01	; 1
    bf16:	ed b7       	in	r30, 0x3d	; 61
    bf18:	fe b7       	in	r31, 0x3e	; 62
    bf1a:	b2 82       	std	Z+2, r11	; 0x02
    bf1c:	a1 82       	std	Z+1, r10	; 0x01
    bf1e:	13 96       	adiw	r26, 0x03	; 3
    bf20:	7c 92       	st	X, r7
    bf22:	6e 92       	st	-X, r6
    bf24:	12 97       	sbiw	r26, 0x02	; 2
    bf26:	f8 01       	movw	r30, r16
    bf28:	e4 5a       	subi	r30, 0xA4	; 164
    bf2a:	fc 4f       	sbci	r31, 0xFC	; 252
    bf2c:	80 81       	ld	r24, Z
    bf2e:	14 96       	adiw	r26, 0x04	; 4
    bf30:	8c 93       	st	X, r24
    bf32:	14 97       	sbiw	r26, 0x04	; 4
    bf34:	15 96       	adiw	r26, 0x05	; 5
    bf36:	1c 92       	st	X, r1
    bf38:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    bf3c:	ed b7       	in	r30, 0x3d	; 61
    bf3e:	fe b7       	in	r31, 0x3e	; 62
    bf40:	31 96       	adiw	r30, 0x01	; 1
    bf42:	ad b7       	in	r26, 0x3d	; 61
    bf44:	be b7       	in	r27, 0x3e	; 62
    bf46:	12 96       	adiw	r26, 0x02	; 2
    bf48:	dc 92       	st	X, r13
    bf4a:	ce 92       	st	-X, r12
    bf4c:	11 97       	sbiw	r26, 0x01	; 1
    bf4e:	93 82       	std	Z+3, r9	; 0x03
    bf50:	82 82       	std	Z+2, r8	; 0x02
    bf52:	b5 82       	std	Z+5, r11	; 0x05
    bf54:	a4 82       	std	Z+4, r10	; 0x04
    bf56:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			      lcd_print(3,6+(iDisp*3),lcdteks);
    bf5a:	ed b7       	in	r30, 0x3d	; 61
    bf5c:	fe b7       	in	r31, 0x3e	; 62
    bf5e:	36 96       	adiw	r30, 0x06	; 6
    bf60:	0f b6       	in	r0, 0x3f	; 63
    bf62:	f8 94       	cli
    bf64:	fe bf       	out	0x3e, r31	; 62
    bf66:	0f be       	out	0x3f, r0	; 63
    bf68:	ed bf       	out	0x3d, r30	; 61
    bf6a:	b8 01       	movw	r22, r16
    bf6c:	66 0f       	add	r22, r22
    bf6e:	77 1f       	adc	r23, r23
    bf70:	60 0f       	add	r22, r16
    bf72:	71 1f       	adc	r23, r17
    bf74:	6a 5f       	subi	r22, 0xFA	; 250
    bf76:	83 e0       	ldi	r24, 0x03	; 3
    bf78:	a6 01       	movw	r20, r12
    bf7a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    bf7e:	f3 94       	inc	r15
    bf80:	80 91 8f 01 	lds	r24, 0x018F
    bf84:	f8 16       	cp	r15, r24
    bf86:	08 f4       	brcc	.+2      	; 0xbf8a <DisplayIdle+0x218>
    bf88:	be cf       	rjmp	.-132    	; 0xbf06 <DisplayIdle+0x194>
    bf8a:	06 c0       	rjmp	.+12     	; 0xbf98 <DisplayIdle+0x226>
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
			      lcd_print(3,6+(iDisp*3),lcdteks);
		     }
		 }else{
		 lcd_printf(3,1,PSTR("                    "));
    bf8c:	83 e0       	ldi	r24, 0x03	; 3
    bf8e:	61 e0       	ldi	r22, 0x01	; 1
    bf90:	4c e1       	ldi	r20, 0x1C	; 28
    bf92:	5e e1       	ldi	r21, 0x1E	; 30
    bf94:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 }    
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
    bf98:	80 91 ab 01 	lds	r24, 0x01AB
    bf9c:	81 30       	cpi	r24, 0x01	; 1
    bf9e:	c1 f4       	brne	.+48     	; 0xbfd0 <DisplayIdle+0x25e>
	     IsCompleteFilling=False;
    bfa0:	10 92 ab 01 	sts	0x01AB, r1
	     if (nLocalAccount>0){
    bfa4:	90 91 8f 01 	lds	r25, 0x018F
    bfa8:	99 23       	and	r25, r25
    bfaa:	91 f0       	breq	.+36     	; 0xbfd0 <DisplayIdle+0x25e>
    bfac:	ec e5       	ldi	r30, 0x5C	; 92
    bfae:	f3 e0       	ldi	r31, 0x03	; 3
			 for(i=0;i<nLocalAccount;i++){//Shift data
    bfb0:	29 2f       	mov	r18, r25
    bfb2:	30 e0       	ldi	r19, 0x00	; 0
    bfb4:	2e 0f       	add	r18, r30
    bfb6:	3f 1f       	adc	r19, r31
    bfb8:	02 c0       	rjmp	.+4      	; 0xbfbe <DisplayIdle+0x24c>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
    bfba:	81 81       	ldd	r24, Z+1	; 0x01
    bfbc:	81 93       	st	Z+, r24
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
    bfbe:	e2 17       	cp	r30, r18
    bfc0:	f3 07       	cpc	r31, r19
    bfc2:	d9 f7       	brne	.-10     	; 0xbfba <DisplayIdle+0x248>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
			 }
			 nLocalAccount--;
    bfc4:	91 50       	subi	r25, 0x01	; 1
    bfc6:	90 93 8f 01 	sts	0x018F, r25
             IsViewFillingFIP=True; 
    bfca:	81 e0       	ldi	r24, 0x01	; 1
    bfcc:	80 93 98 01 	sts	0x0198, r24
		 }
	 }
}
    bfd0:	67 96       	adiw	r28, 0x17	; 23
    bfd2:	0f b6       	in	r0, 0x3f	; 63
    bfd4:	f8 94       	cli
    bfd6:	de bf       	out	0x3e, r29	; 62
    bfd8:	0f be       	out	0x3f, r0	; 63
    bfda:	cd bf       	out	0x3d, r28	; 61
    bfdc:	cf 91       	pop	r28
    bfde:	df 91       	pop	r29
    bfe0:	1f 91       	pop	r17
    bfe2:	0f 91       	pop	r16
    bfe4:	ff 90       	pop	r15
    bfe6:	df 90       	pop	r13
    bfe8:	cf 90       	pop	r12
    bfea:	bf 90       	pop	r11
    bfec:	af 90       	pop	r10
    bfee:	9f 90       	pop	r9
    bff0:	8f 90       	pop	r8
    bff2:	7f 90       	pop	r7
    bff4:	6f 90       	pop	r6
    bff6:	08 95       	ret

0000bff8 <systemMaster>:
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
}

void systemMaster(){
  	_spi_init(1, 0);         //Master
    bff8:	81 e0       	ldi	r24, 0x01	; 1
    bffa:	60 e0       	ldi	r22, 0x00	; 0
    bffc:	0e 94 dc a7 	call	0x14fb8	; 0x14fb8 <_spi_init>
    _spi_enable(_SPI_SLAVE); //Enable SS 
    c000:	81 e0       	ldi	r24, 0x01	; 1
    c002:	0e 94 ef a7 	call	0x14fde	; 0x14fde <_spi_enable>
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
    c006:	bb 98       	cbi	0x17, 3	; 23
    c008:	c3 9a       	sbi	0x18, 3	; 24
	sbi(DDRB,2);             //MOSI Output
    c00a:	ba 9a       	sbi	0x17, 2	; 23
}
    c00c:	08 95       	ret

0000c00e <systemSlave>:




void systemSlave(){
    _spi_enable(_SPI_NONE);	
    c00e:	80 e0       	ldi	r24, 0x00	; 0
    c010:	0e 94 ef a7 	call	0x14fde	; 0x14fde <_spi_enable>
  	_spi_init(0, 1);         //Slave
    c014:	80 e0       	ldi	r24, 0x00	; 0
    c016:	61 e0       	ldi	r22, 0x01	; 1
    c018:	0e 94 dc a7 	call	0x14fb8	; 0x14fb8 <_spi_init>
	sbi(DDRB,3);             //MISO Output
    c01c:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    c01e:	bb 9a       	sbi	0x17, 3	; 23
    c020:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    c022:	ba 98       	cbi	0x17, 2	; 23
    c024:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    c026:	b9 98       	cbi	0x17, 1	; 23
    c028:	c1 9a       	sbi	0x18, 1	; 24
}
    c02a:	08 95       	ret

0000c02c <EDCSendByte>:
    _spi_enable(_SPI_SLAVE); //Enable SS 
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
	sbi(DDRB,2);             //MOSI Output
}

void EDCSendByte(char EDCData){
    c02c:	1f 93       	push	r17
    c02e:	18 2f       	mov	r17, r24
     systemMaster();	 
    c030:	0e 94 fc 5f 	call	0xbff8	; 0xbff8 <systemMaster>
     _spi(EDCData);
    c034:	81 2f       	mov	r24, r17
    c036:	0e 94 06 a8 	call	0x1500c	; 0x1500c <_spi>
     systemSlave();
    c03a:	0e 94 07 60 	call	0xc00e	; 0xc00e <systemSlave>
}
    c03e:	1f 91       	pop	r17
    c040:	08 95       	ret

0000c042 <SendEDCMessage>:
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}

void SendEDCMessage(){
    c042:	cf 92       	push	r12
    c044:	df 92       	push	r13
    c046:	ef 92       	push	r14
    c048:	ff 92       	push	r15
    c04a:	0f 93       	push	r16
    c04c:	1f 93       	push	r17
    c04e:	df 93       	push	r29
    c050:	cf 93       	push	r28
    c052:	cd b7       	in	r28, 0x3d	; 61
    c054:	de b7       	in	r29, 0x3e	; 62
    c056:	ec 97       	sbiw	r28, 0x3c	; 60
    c058:	0f b6       	in	r0, 0x3f	; 63
    c05a:	f8 94       	cli
    c05c:	de bf       	out	0x3e, r29	; 62
    c05e:	0f be       	out	0x3f, r0	; 63
    c060:	cd bf       	out	0x3d, r28	; 61

     //GenerateData
	 //sprintf_P(strAmount,PSTR("%d"),100);//Testing Only
	 //AddZeroLead(strAmount,8);
	 //uart_printf(0,0,PSTR("StrStatus:"));uart_print(0,1,strStatus);
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     
    c062:	8d b7       	in	r24, 0x3d	; 61
    c064:	9e b7       	in	r25, 0x3e	; 62
    c066:	42 97       	sbiw	r24, 0x12	; 18
    c068:	0f b6       	in	r0, 0x3f	; 63
    c06a:	f8 94       	cli
    c06c:	9e bf       	out	0x3e, r25	; 62
    c06e:	0f be       	out	0x3f, r0	; 63
    c070:	8d bf       	out	0x3d, r24	; 61
    c072:	ed b7       	in	r30, 0x3d	; 61
    c074:	fe b7       	in	r31, 0x3e	; 62
    c076:	31 96       	adiw	r30, 0x01	; 1
    c078:	8e 01       	movw	r16, r28
    c07a:	0f 5f       	subi	r16, 0xFF	; 255
    c07c:	1f 4f       	sbci	r17, 0xFF	; 255
    c07e:	ad b7       	in	r26, 0x3d	; 61
    c080:	be b7       	in	r27, 0x3e	; 62
    c082:	12 96       	adiw	r26, 0x02	; 2
    c084:	1c 93       	st	X, r17
    c086:	0e 93       	st	-X, r16
    c088:	11 97       	sbiw	r26, 0x01	; 1
    c08a:	89 e0       	ldi	r24, 0x09	; 9
    c08c:	9e e1       	ldi	r25, 0x1E	; 30
    c08e:	93 83       	std	Z+3, r25	; 0x03
    c090:	82 83       	std	Z+2, r24	; 0x02
    c092:	8d e8       	ldi	r24, 0x8D	; 141
    c094:	9c e0       	ldi	r25, 0x0C	; 12
    c096:	95 83       	std	Z+5, r25	; 0x05
    c098:	84 83       	std	Z+4, r24	; 0x04
    c09a:	8f eb       	ldi	r24, 0xBF	; 191
    c09c:	97 e0       	ldi	r25, 0x07	; 7
    c09e:	97 83       	std	Z+7, r25	; 0x07
    c0a0:	86 83       	std	Z+6, r24	; 0x06
    c0a2:	82 e1       	ldi	r24, 0x12	; 18
    c0a4:	98 e0       	ldi	r25, 0x08	; 8
    c0a6:	91 87       	std	Z+9, r25	; 0x09
    c0a8:	80 87       	std	Z+8, r24	; 0x08
    c0aa:	84 ea       	ldi	r24, 0xA4	; 164
    c0ac:	95 e0       	ldi	r25, 0x05	; 5
    c0ae:	93 87       	std	Z+11, r25	; 0x0b
    c0b0:	82 87       	std	Z+10, r24	; 0x0a
    c0b2:	8b e7       	ldi	r24, 0x7B	; 123
    c0b4:	93 e0       	ldi	r25, 0x03	; 3
    c0b6:	95 87       	std	Z+13, r25	; 0x0d
    c0b8:	84 87       	std	Z+12, r24	; 0x0c
    c0ba:	89 eb       	ldi	r24, 0xB9	; 185
    c0bc:	9b e0       	ldi	r25, 0x0B	; 11
    c0be:	97 87       	std	Z+15, r25	; 0x0f
    c0c0:	86 87       	std	Z+14, r24	; 0x0e
    c0c2:	80 e9       	ldi	r24, 0x90	; 144
    c0c4:	93 e0       	ldi	r25, 0x03	; 3
    c0c6:	91 8b       	std	Z+17, r25	; 0x11
    c0c8:	80 8b       	std	Z+16, r24	; 0x10
    c0ca:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
    c0ce:	8d b7       	in	r24, 0x3d	; 61
    c0d0:	9e b7       	in	r25, 0x3e	; 62
    c0d2:	42 96       	adiw	r24, 0x12	; 18
    c0d4:	0f b6       	in	r0, 0x3f	; 63
    c0d6:	f8 94       	cli
    c0d8:	9e bf       	out	0x3e, r25	; 62
    c0da:	0f be       	out	0x3f, r0	; 63
    c0dc:	8d bf       	out	0x3d, r24	; 61
    c0de:	82 e0       	ldi	r24, 0x02	; 2
    c0e0:	0e 94 16 60 	call	0xc02c	; 0xc02c <EDCSendByte>
    c0e4:	ff 24       	eor	r15, r15
    c0e6:	92 e0       	ldi	r25, 0x02	; 2
    c0e8:	e9 2e       	mov	r14, r25
    c0ea:	84 ed       	ldi	r24, 0xD4	; 212
    c0ec:	c8 2e       	mov	r12, r24
    c0ee:	80 e3       	ldi	r24, 0x30	; 48
    c0f0:	d8 2e       	mov	r13, r24
    c0f2:	0a c0       	rjmp	.+20     	; 0xc108 <SendEDCMessage+0xc6>
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
    c0f4:	a0 0f       	add	r26, r16
    c0f6:	b1 1f       	adc	r27, r17
    c0f8:	8c 91       	ld	r24, X
     systemSlave();
}

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
    c0fa:	e8 26       	eor	r14, r24
	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
    c0fc:	0e 94 16 60 	call	0xc02c	; 0xc02c <EDCSendByte>
    c100:	c6 01       	movw	r24, r12
    c102:	01 97       	sbiw	r24, 0x01	; 1
    c104:	f1 f7       	brne	.-4      	; 0xc102 <SendEDCMessage+0xc0>
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
    c106:	f3 94       	inc	r15
    c108:	f8 01       	movw	r30, r16
    c10a:	01 90       	ld	r0, Z+
    c10c:	00 20       	and	r0, r0
    c10e:	e9 f7       	brne	.-6      	; 0xc10a <SendEDCMessage+0xc8>
    c110:	31 97       	sbiw	r30, 0x01	; 1
    c112:	e0 1b       	sub	r30, r16
    c114:	f1 0b       	sbc	r31, r17
    c116:	af 2d       	mov	r26, r15
    c118:	b0 e0       	ldi	r27, 0x00	; 0
    c11a:	ae 17       	cp	r26, r30
    c11c:	bf 07       	cpc	r27, r31
    c11e:	50 f3       	brcs	.-44     	; 0xc0f4 <SendEDCMessage+0xb2>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
		  //uart(0,1,SerialEDC[i]);
		  _delay_ms(SPI_EDC_DELAY);//min:8
	 }
     EDCSendByte(0x03);
    c120:	83 e0       	ldi	r24, 0x03	; 3
    c122:	0e 94 16 60 	call	0xc02c	; 0xc02c <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x03);	      
	 EDCSendByte(xCRC);
    c126:	83 e0       	ldi	r24, 0x03	; 3
    c128:	8e 25       	eor	r24, r14
    c12a:	0e 94 16 60 	call	0xc02c	; 0xc02c <EDCSendByte>
}
    c12e:	ec 96       	adiw	r28, 0x3c	; 60
    c130:	0f b6       	in	r0, 0x3f	; 63
    c132:	f8 94       	cli
    c134:	de bf       	out	0x3e, r29	; 62
    c136:	0f be       	out	0x3f, r0	; 63
    c138:	cd bf       	out	0x3d, r28	; 61
    c13a:	cf 91       	pop	r28
    c13c:	df 91       	pop	r29
    c13e:	1f 91       	pop	r17
    c140:	0f 91       	pop	r16
    c142:	ff 90       	pop	r15
    c144:	ef 90       	pop	r14
    c146:	df 90       	pop	r13
    c148:	cf 90       	pop	r12
    c14a:	08 95       	ret

0000c14c <SendSlaveCommand>:
void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
	 PoolMsg=plMsg;
     IsControlPooling=True;
}
void SendSlaveCommand(char SlaveCommand,char SlaveMessage){     
    c14c:	0f 93       	push	r16
    c14e:	1f 93       	push	r17
    c150:	18 2f       	mov	r17, r24
    c152:	06 2f       	mov	r16, r22
	 systemMaster();
    c154:	0e 94 fc 5f 	call	0xbff8	; 0xbff8 <systemMaster>
	 _spi(0x05);
    c158:	85 e0       	ldi	r24, 0x05	; 5
    c15a:	0e 94 06 a8 	call	0x1500c	; 0x1500c <_spi>
	 _spi(SlaveCommand);
    c15e:	81 2f       	mov	r24, r17
    c160:	0e 94 06 a8 	call	0x1500c	; 0x1500c <_spi>
	 _spi(SlaveMessage);
    c164:	80 2f       	mov	r24, r16
    c166:	0e 94 06 a8 	call	0x1500c	; 0x1500c <_spi>
	 _spi(0x06);
    c16a:	86 e0       	ldi	r24, 0x06	; 6
    c16c:	0e 94 06 a8 	call	0x1500c	; 0x1500c <_spi>
	 systemSlave();
    c170:	0e 94 07 60 	call	0xc00e	; 0xc00e <systemSlave>
}
    c174:	1f 91       	pop	r17
    c176:	0f 91       	pop	r16
    c178:	08 95       	ret

0000c17a <FSettingPumpID>:
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    c17a:	9f 92       	push	r9
    c17c:	af 92       	push	r10
    c17e:	bf 92       	push	r11
    c180:	cf 92       	push	r12
    c182:	df 92       	push	r13
    c184:	ef 92       	push	r14
    c186:	ff 92       	push	r15
    c188:	0f 93       	push	r16
    c18a:	1f 93       	push	r17
    c18c:	df 93       	push	r29
    c18e:	cf 93       	push	r28
    c190:	cd b7       	in	r28, 0x3d	; 61
    c192:	de b7       	in	r29, 0x3e	; 62
    c194:	64 97       	sbiw	r28, 0x14	; 20
    c196:	0f b6       	in	r0, 0x3f	; 63
    c198:	f8 94       	cli
    c19a:	de bf       	out	0x3e, r29	; 62
    c19c:	0f be       	out	0x3f, r0	; 63
    c19e:	cd bf       	out	0x3d, r28	; 61
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
	 switch (stMenuPumpID){
    c1a0:	80 91 1d 02 	lds	r24, 0x021D
    c1a4:	85 30       	cpi	r24, 0x05	; 5
    c1a6:	09 f4       	brne	.+2      	; 0xc1aa <FSettingPumpID+0x30>
    c1a8:	83 c1       	rjmp	.+774    	; 0xc4b0 <FSettingPumpID+0x336>
    c1aa:	86 30       	cpi	r24, 0x06	; 6
    c1ac:	90 f4       	brcc	.+36     	; 0xc1d2 <FSettingPumpID+0x58>
    c1ae:	82 30       	cpi	r24, 0x02	; 2
    c1b0:	09 f4       	brne	.+2      	; 0xc1b4 <FSettingPumpID+0x3a>
    c1b2:	8d c0       	rjmp	.+282    	; 0xc2ce <FSettingPumpID+0x154>
    c1b4:	83 30       	cpi	r24, 0x03	; 3
    c1b6:	30 f4       	brcc	.+12     	; 0xc1c4 <FSettingPumpID+0x4a>
    c1b8:	88 23       	and	r24, r24
    c1ba:	f1 f0       	breq	.+60     	; 0xc1f8 <FSettingPumpID+0x7e>
    c1bc:	81 30       	cpi	r24, 0x01	; 1
    c1be:	09 f0       	breq	.+2      	; 0xc1c2 <FSettingPumpID+0x48>
    c1c0:	5b c2       	rjmp	.+1206   	; 0xc678 <FSettingPumpID+0x4fe>
    c1c2:	2b c0       	rjmp	.+86     	; 0xc21a <FSettingPumpID+0xa0>
    c1c4:	83 30       	cpi	r24, 0x03	; 3
    c1c6:	09 f4       	brne	.+2      	; 0xc1ca <FSettingPumpID+0x50>
    c1c8:	4f c1       	rjmp	.+670    	; 0xc468 <FSettingPumpID+0x2ee>
    c1ca:	84 30       	cpi	r24, 0x04	; 4
    c1cc:	09 f0       	breq	.+2      	; 0xc1d0 <FSettingPumpID+0x56>
    c1ce:	54 c2       	rjmp	.+1192   	; 0xc678 <FSettingPumpID+0x4fe>
    c1d0:	68 c1       	rjmp	.+720    	; 0xc4a2 <FSettingPumpID+0x328>
    c1d2:	88 30       	cpi	r24, 0x08	; 8
    c1d4:	09 f4       	brne	.+2      	; 0xc1d8 <FSettingPumpID+0x5e>
    c1d6:	f3 c1       	rjmp	.+998    	; 0xc5be <FSettingPumpID+0x444>
    c1d8:	89 30       	cpi	r24, 0x09	; 9
    c1da:	38 f4       	brcc	.+14     	; 0xc1ea <FSettingPumpID+0x70>
    c1dc:	86 30       	cpi	r24, 0x06	; 6
    c1de:	09 f4       	brne	.+2      	; 0xc1e2 <FSettingPumpID+0x68>
    c1e0:	92 c1       	rjmp	.+804    	; 0xc506 <FSettingPumpID+0x38c>
    c1e2:	87 30       	cpi	r24, 0x07	; 7
    c1e4:	09 f0       	breq	.+2      	; 0xc1e8 <FSettingPumpID+0x6e>
    c1e6:	48 c2       	rjmp	.+1168   	; 0xc678 <FSettingPumpID+0x4fe>
    c1e8:	2d c2       	rjmp	.+1114   	; 0xc644 <FSettingPumpID+0x4ca>
    c1ea:	89 30       	cpi	r24, 0x09	; 9
    c1ec:	09 f4       	brne	.+2      	; 0xc1f0 <FSettingPumpID+0x76>
    c1ee:	32 c2       	rjmp	.+1124   	; 0xc654 <FSettingPumpID+0x4da>
    c1f0:	8a 30       	cpi	r24, 0x0A	; 10
    c1f2:	09 f0       	breq	.+2      	; 0xc1f6 <FSettingPumpID+0x7c>
    c1f4:	41 c2       	rjmp	.+1154   	; 0xc678 <FSettingPumpID+0x4fe>
    c1f6:	34 c2       	rjmp	.+1128   	; 0xc660 <FSettingPumpID+0x4e6>
	 case mpInitPumpId:	      
	      //Disable PumpPooling
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    c1f8:	80 91 00 01 	lds	r24, 0x0100
    c1fc:	82 30       	cpi	r24, 0x02	; 2
    c1fe:	21 f4       	brne	.+8      	; 0xc208 <FSettingPumpID+0x8e>
    c200:	8f e1       	ldi	r24, 0x1F	; 31
    c202:	60 e0       	ldi	r22, 0x00	; 0
    c204:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    c208:	83 e1       	ldi	r24, 0x13	; 19
    c20a:	92 e0       	ldi	r25, 0x02	; 2
    c20c:	6a e4       	ldi	r22, 0x4A	; 74
    c20e:	70 e0       	ldi	r23, 0x00	; 0
    c210:	48 e0       	ldi	r20, 0x08	; 8
    c212:	50 e0       	ldi	r21, 0x00	; 0
    c214:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    c218:	49 c1       	rjmp	.+658    	; 0xc4ac <FSettingPumpID+0x332>
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    c21a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    c21e:	e3 e1       	ldi	r30, 0x13	; 19
    c220:	ee 2e       	mov	r14, r30
    c222:	e2 e0       	ldi	r30, 0x02	; 2
    c224:	fe 2e       	mov	r15, r30
    c226:	01 e0       	ldi	r16, 0x01	; 1
    c228:	10 e0       	ldi	r17, 0x00	; 0
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c22a:	6e 01       	movw	r12, r28
    c22c:	08 94       	sec
    c22e:	c1 1c       	adc	r12, r1
    c230:	d1 1c       	adc	r13, r1
    c232:	7d e2       	ldi	r23, 0x2D	; 45
    c234:	a7 2e       	mov	r10, r23
    c236:	7e e0       	ldi	r23, 0x0E	; 14
    c238:	b7 2e       	mov	r11, r23
    c23a:	8d b7       	in	r24, 0x3d	; 61
    c23c:	9e b7       	in	r25, 0x3e	; 62
    c23e:	0c 97       	sbiw	r24, 0x0c	; 12
    c240:	0f b6       	in	r0, 0x3f	; 63
    c242:	f8 94       	cli
    c244:	9e bf       	out	0x3e, r25	; 62
    c246:	0f be       	out	0x3f, r0	; 63
    c248:	8d bf       	out	0x3d, r24	; 61
    c24a:	ed b7       	in	r30, 0x3d	; 61
    c24c:	fe b7       	in	r31, 0x3e	; 62
    c24e:	31 96       	adiw	r30, 0x01	; 1
    c250:	ad b7       	in	r26, 0x3d	; 61
    c252:	be b7       	in	r27, 0x3e	; 62
    c254:	12 96       	adiw	r26, 0x02	; 2
    c256:	dc 92       	st	X, r13
    c258:	ce 92       	st	-X, r12
    c25a:	11 97       	sbiw	r26, 0x01	; 1
    c25c:	b3 82       	std	Z+3, r11	; 0x03
    c25e:	a2 82       	std	Z+2, r10	; 0x02
    c260:	15 83       	std	Z+5, r17	; 0x05
    c262:	04 83       	std	Z+4, r16	; 0x04
    c264:	d7 01       	movw	r26, r14
    c266:	8c 91       	ld	r24, X
    c268:	86 83       	std	Z+6, r24	; 0x06
    c26a:	17 82       	std	Z+7, r1	; 0x07
    c26c:	0c 5f       	subi	r16, 0xFC	; 252
    c26e:	1f 4f       	sbci	r17, 0xFF	; 255
    c270:	11 87       	std	Z+9, r17	; 0x09
    c272:	00 87       	std	Z+8, r16	; 0x08
    c274:	04 50       	subi	r16, 0x04	; 4
    c276:	10 40       	sbci	r17, 0x00	; 0
    c278:	14 96       	adiw	r26, 0x04	; 4
    c27a:	8c 91       	ld	r24, X
    c27c:	82 87       	std	Z+10, r24	; 0x0a
    c27e:	13 86       	std	Z+11, r1	; 0x0b
    c280:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  lcd_print((iLoop+1),1,lcdteks);
    c284:	ed b7       	in	r30, 0x3d	; 61
    c286:	fe b7       	in	r31, 0x3e	; 62
    c288:	3c 96       	adiw	r30, 0x0c	; 12
    c28a:	0f b6       	in	r0, 0x3f	; 63
    c28c:	f8 94       	cli
    c28e:	fe bf       	out	0x3e, r31	; 62
    c290:	0f be       	out	0x3f, r0	; 63
    c292:	ed bf       	out	0x3d, r30	; 61
    c294:	80 2f       	mov	r24, r16
    c296:	61 e0       	ldi	r22, 0x01	; 1
    c298:	a6 01       	movw	r20, r12
    c29a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    c29e:	08 94       	sec
    c2a0:	e1 1c       	adc	r14, r1
    c2a2:	f1 1c       	adc	r15, r1
    c2a4:	0f 5f       	subi	r16, 0xFF	; 255
    c2a6:	1f 4f       	sbci	r17, 0xFF	; 255
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
    c2a8:	f7 e1       	ldi	r31, 0x17	; 23
    c2aa:	ef 16       	cp	r14, r31
    c2ac:	f2 e0       	ldi	r31, 0x02	; 2
    c2ae:	ff 06       	cpc	r15, r31
    c2b0:	21 f6       	brne	.-120    	; 0xc23a <FSettingPumpID+0xc0>
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
			  lcd_print((iLoop+1),1,lcdteks);
          }
          lcd_printf(3,15,PSTR("*)Back"));
    c2b2:	83 e0       	ldi	r24, 0x03	; 3
    c2b4:	6f e0       	ldi	r22, 0x0F	; 15
    c2b6:	46 e2       	ldi	r20, 0x26	; 38
    c2b8:	5e e0       	ldi	r21, 0x0E	; 14
    c2ba:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(4,15,PSTR("#)Save"));
    c2be:	84 e0       	ldi	r24, 0x04	; 4
    c2c0:	6f e0       	ldi	r22, 0x0F	; 15
    c2c2:	4f e1       	ldi	r20, 0x1F	; 31
    c2c4:	5e e0       	ldi	r21, 0x0E	; 14
    c2c6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stMenuPumpID=mpSelectInput;
    c2ca:	82 e0       	ldi	r24, 0x02	; 2
    c2cc:	c0 c1       	rjmp	.+896    	; 0xc64e <FSettingPumpID+0x4d4>
	      break;
     case mpSelectInput:
	      KeyPressed=_key_scan(1);
    c2ce:	81 e0       	ldi	r24, 0x01	; 1
    c2d0:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    c2d4:	98 2e       	mov	r9, r24
	      KeyChar=_key_btn(KeyPressed);
    c2d6:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    c2da:	98 2f       	mov	r25, r24
          if ((KeyChar>='1') && (KeyChar<='8')){
    c2dc:	81 53       	subi	r24, 0x31	; 49
    c2de:	88 30       	cpi	r24, 0x08	; 8
    c2e0:	08 f0       	brcs	.+2      	; 0xc2e4 <FSettingPumpID+0x16a>
    c2e2:	85 c0       	rjmp	.+266    	; 0xc3ee <FSettingPumpID+0x274>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
    c2e4:	80 91 00 01 	lds	r24, 0x0100
    c2e8:	81 30       	cpi	r24, 0x01	; 1
    c2ea:	19 f0       	breq	.+6      	; 0xc2f2 <FSettingPumpID+0x178>
    c2ec:	82 30       	cpi	r24, 0x02	; 2
    c2ee:	a1 f5       	brne	.+104    	; 0xc358 <FSettingPumpID+0x1de>
    c2f0:	17 c0       	rjmp	.+46     	; 0xc320 <FSettingPumpID+0x1a6>
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
    c2f2:	80 91 1c 02 	lds	r24, 0x021C
    c2f6:	88 23       	and	r24, r24
    c2f8:	41 f4       	brne	.+16     	; 0xc30a <FSettingPumpID+0x190>
    c2fa:	e9 2f       	mov	r30, r25
    c2fc:	f0 e0       	ldi	r31, 0x00	; 0
    c2fe:	ee 51       	subi	r30, 0x1E	; 30
    c300:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c302:	80 81       	ld	r24, Z
    c304:	83 36       	cpi	r24, 0x63	; 99
    c306:	c8 f4       	brcc	.+50     	; 0xc33a <FSettingPumpID+0x1c0>
    c308:	16 c0       	rjmp	.+44     	; 0xc336 <FSettingPumpID+0x1bc>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
    c30a:	81 30       	cpi	r24, 0x01	; 1
    c30c:	29 f5       	brne	.+74     	; 0xc358 <FSettingPumpID+0x1de>
    c30e:	e9 2f       	mov	r30, r25
    c310:	f0 e0       	ldi	r31, 0x00	; 0
    c312:	ee 51       	subi	r30, 0x1E	; 30
    c314:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c316:	80 81       	ld	r24, Z
    c318:	88 23       	and	r24, r24
    c31a:	d1 f4       	brne	.+52     	; 0xc350 <FSettingPumpID+0x1d6>
	     (*Value)--;
	 }else *Value=MaxValue;
    c31c:	83 e6       	ldi	r24, 0x63	; 99
    c31e:	1b c0       	rjmp	.+54     	; 0xc356 <FSettingPumpID+0x1dc>
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
    c320:	80 91 1c 02 	lds	r24, 0x021C
    c324:	88 23       	and	r24, r24
    c326:	59 f4       	brne	.+22     	; 0xc33e <FSettingPumpID+0x1c4>
    c328:	e9 2f       	mov	r30, r25
    c32a:	f0 e0       	ldi	r31, 0x00	; 0
    c32c:	ee 51       	subi	r30, 0x1E	; 30
    c32e:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c330:	80 81       	ld	r24, Z
    c332:	80 31       	cpi	r24, 0x10	; 16
    c334:	10 f4       	brcc	.+4      	; 0xc33a <FSettingPumpID+0x1c0>
	     (*Value)++;
    c336:	8f 5f       	subi	r24, 0xFF	; 255
    c338:	0e c0       	rjmp	.+28     	; 0xc356 <FSettingPumpID+0x1dc>
	 }else *Value=MinValue;
    c33a:	10 82       	st	Z, r1
    c33c:	0d c0       	rjmp	.+26     	; 0xc358 <FSettingPumpID+0x1de>
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
    c33e:	81 30       	cpi	r24, 0x01	; 1
    c340:	59 f4       	brne	.+22     	; 0xc358 <FSettingPumpID+0x1de>
    c342:	e9 2f       	mov	r30, r25
    c344:	f0 e0       	ldi	r31, 0x00	; 0
    c346:	ee 51       	subi	r30, 0x1E	; 30
    c348:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c34a:	80 81       	ld	r24, Z
    c34c:	88 23       	and	r24, r24
    c34e:	11 f0       	breq	.+4      	; 0xc354 <FSettingPumpID+0x1da>
	     (*Value)--;
    c350:	81 50       	subi	r24, 0x01	; 1
    c352:	01 c0       	rjmp	.+2      	; 0xc356 <FSettingPumpID+0x1dc>
	 }else *Value=MaxValue;
    c354:	80 e1       	ldi	r24, 0x10	; 16
    c356:	80 83       	st	Z, r24
    c358:	63 e1       	ldi	r22, 0x13	; 19
    c35a:	e6 2e       	mov	r14, r22
    c35c:	62 e0       	ldi	r22, 0x02	; 2
    c35e:	f6 2e       	mov	r15, r22
    c360:	01 e0       	ldi	r16, 0x01	; 1
    c362:	10 e0       	ldi	r17, 0x00	; 0
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c364:	6e 01       	movw	r12, r28
    c366:	08 94       	sec
    c368:	c1 1c       	adc	r12, r1
    c36a:	d1 1c       	adc	r13, r1
    c36c:	5b e0       	ldi	r21, 0x0B	; 11
    c36e:	a5 2e       	mov	r10, r21
    c370:	5e e0       	ldi	r21, 0x0E	; 14
    c372:	b5 2e       	mov	r11, r21
    c374:	8d b7       	in	r24, 0x3d	; 61
    c376:	9e b7       	in	r25, 0x3e	; 62
    c378:	0c 97       	sbiw	r24, 0x0c	; 12
    c37a:	0f b6       	in	r0, 0x3f	; 63
    c37c:	f8 94       	cli
    c37e:	9e bf       	out	0x3e, r25	; 62
    c380:	0f be       	out	0x3f, r0	; 63
    c382:	8d bf       	out	0x3d, r24	; 61
    c384:	ed b7       	in	r30, 0x3d	; 61
    c386:	fe b7       	in	r31, 0x3e	; 62
    c388:	31 96       	adiw	r30, 0x01	; 1
    c38a:	ad b7       	in	r26, 0x3d	; 61
    c38c:	be b7       	in	r27, 0x3e	; 62
    c38e:	12 96       	adiw	r26, 0x02	; 2
    c390:	dc 92       	st	X, r13
    c392:	ce 92       	st	-X, r12
    c394:	11 97       	sbiw	r26, 0x01	; 1
    c396:	b3 82       	std	Z+3, r11	; 0x03
    c398:	a2 82       	std	Z+2, r10	; 0x02
    c39a:	15 83       	std	Z+5, r17	; 0x05
    c39c:	04 83       	std	Z+4, r16	; 0x04
    c39e:	d7 01       	movw	r26, r14
    c3a0:	8c 91       	ld	r24, X
    c3a2:	86 83       	std	Z+6, r24	; 0x06
    c3a4:	17 82       	std	Z+7, r1	; 0x07
    c3a6:	0c 5f       	subi	r16, 0xFC	; 252
    c3a8:	1f 4f       	sbci	r17, 0xFF	; 255
    c3aa:	11 87       	std	Z+9, r17	; 0x09
    c3ac:	00 87       	std	Z+8, r16	; 0x08
    c3ae:	04 50       	subi	r16, 0x04	; 4
    c3b0:	10 40       	sbci	r17, 0x00	; 0
    c3b2:	14 96       	adiw	r26, 0x04	; 4
    c3b4:	8c 91       	ld	r24, X
    c3b6:	82 87       	std	Z+10, r24	; 0x0a
    c3b8:	13 86       	std	Z+11, r1	; 0x0b
    c3ba:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				  lcd_print((iLoop+1),1,lcdteks);
    c3be:	ed b7       	in	r30, 0x3d	; 61
    c3c0:	fe b7       	in	r31, 0x3e	; 62
    c3c2:	3c 96       	adiw	r30, 0x0c	; 12
    c3c4:	0f b6       	in	r0, 0x3f	; 63
    c3c6:	f8 94       	cli
    c3c8:	fe bf       	out	0x3e, r31	; 62
    c3ca:	0f be       	out	0x3f, r0	; 63
    c3cc:	ed bf       	out	0x3d, r30	; 61
    c3ce:	80 2f       	mov	r24, r16
    c3d0:	61 e0       	ldi	r22, 0x01	; 1
    c3d2:	a6 01       	movw	r20, r12
    c3d4:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    c3d8:	08 94       	sec
    c3da:	e1 1c       	adc	r14, r1
    c3dc:	f1 1c       	adc	r15, r1
    c3de:	0f 5f       	subi	r16, 0xFF	; 255
    c3e0:	1f 4f       	sbci	r17, 0xFF	; 255
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
    c3e2:	f7 e1       	ldi	r31, 0x17	; 23
    c3e4:	ef 16       	cp	r14, r31
    c3e6:	f2 e0       	ldi	r31, 0x02	; 2
    c3e8:	ff 06       	cpc	r15, r31
    c3ea:	21 f6       	brne	.-120    	; 0xc374 <FSettingPumpID+0x1fa>
    c3ec:	2b c0       	rjmp	.+86     	; 0xc444 <FSettingPumpID+0x2ca>
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
    c3ee:	93 32       	cpi	r25, 0x23	; 35
    c3f0:	21 f5       	brne	.+72     	; 0xc43a <FSettingPumpID+0x2c0>
    c3f2:	40 e0       	ldi	r20, 0x00	; 0
    c3f4:	20 e0       	ldi	r18, 0x00	; 0
    c3f6:	30 e0       	ldi	r19, 0x00	; 0
    c3f8:	52 2f       	mov	r21, r18
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
    c3fa:	f9 01       	movw	r30, r18
    c3fc:	ed 5e       	subi	r30, 0xED	; 237
    c3fe:	fd 4f       	sbci	r31, 0xFD	; 253
    c400:	e0 81       	ld	r30, Z
				   if (CheckPump>0){
    c402:	ee 23       	and	r30, r30
    c404:	69 f0       	breq	.+26     	; 0xc420 <FSettingPumpID+0x2a6>
    c406:	a3 e1       	ldi	r26, 0x13	; 19
    c408:	b2 e0       	ldi	r27, 0x02	; 2
    c40a:	90 e0       	ldi	r25, 0x00	; 0
				      for(j=0;j<8;j++){					      
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
    c40c:	59 17       	cp	r21, r25
    c40e:	21 f0       	breq	.+8      	; 0xc418 <FSettingPumpID+0x29e>
    c410:	8c 91       	ld	r24, X
    c412:	e8 17       	cp	r30, r24
    c414:	09 f4       	brne	.+2      	; 0xc418 <FSettingPumpID+0x29e>
						       PumpCount++;
    c416:	4f 5f       	subi	r20, 0xFF	; 255
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
				   if (CheckPump>0){
				      for(j=0;j<8;j++){					      
    c418:	9f 5f       	subi	r25, 0xFF	; 255
    c41a:	11 96       	adiw	r26, 0x01	; 1
    c41c:	98 30       	cpi	r25, 0x08	; 8
    c41e:	b1 f7       	brne	.-20     	; 0xc40c <FSettingPumpID+0x292>
    c420:	2f 5f       	subi	r18, 0xFF	; 255
    c422:	3f 4f       	sbci	r19, 0xFF	; 255
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
    c424:	28 30       	cpi	r18, 0x08	; 8
    c426:	31 05       	cpc	r19, r1
    c428:	39 f7       	brne	.-50     	; 0xc3f8 <FSettingPumpID+0x27e>
    c42a:	40 93 11 02 	sts	0x0211, r20
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
						       PumpCount++;
					  }
				    }				     
				  }			       			  			  
			  if (PumpCount>0) stMenuPumpID=mpSaveFailed;
    c42e:	44 23       	and	r20, r20
    c430:	11 f0       	breq	.+4      	; 0xc436 <FSettingPumpID+0x2bc>
    c432:	83 e0       	ldi	r24, 0x03	; 3
    c434:	05 c0       	rjmp	.+10     	; 0xc440 <FSettingPumpID+0x2c6>
			  else stMenuPumpID=mpSavingPumpId;
    c436:	85 e0       	ldi	r24, 0x05	; 5
    c438:	03 c0       	rjmp	.+6      	; 0xc440 <FSettingPumpID+0x2c6>
		  }	
		  else if (KeyChar=='*'){
    c43a:	9a 32       	cpi	r25, 0x2A	; 42
    c43c:	19 f4       	brne	.+6      	; 0xc444 <FSettingPumpID+0x2ca>
		      stMenuPumpID=mpExitPumpId;
    c43e:	8a e0       	ldi	r24, 0x0A	; 10
    c440:	80 93 1d 02 	sts	0x021D, r24
		  }
		  if (KeyPressed==_KEY_SHIFT){
    c444:	8b e7       	ldi	r24, 0x7B	; 123
    c446:	98 16       	cp	r9, r24
    c448:	09 f0       	breq	.+2      	; 0xc44c <FSettingPumpID+0x2d2>
    c44a:	16 c1       	rjmp	.+556    	; 0xc678 <FSettingPumpID+0x4fe>
		      if (IsShift==False)IsShift=True;
    c44c:	80 91 1c 02 	lds	r24, 0x021C
    c450:	88 23       	and	r24, r24
    c452:	21 f4       	brne	.+8      	; 0xc45c <FSettingPumpID+0x2e2>
    c454:	81 e0       	ldi	r24, 0x01	; 1
    c456:	80 93 1c 02 	sts	0x021C, r24
    c45a:	0e c1       	rjmp	.+540    	; 0xc678 <FSettingPumpID+0x4fe>
			  else
			  if (IsShift==True)IsShift=False;
    c45c:	81 30       	cpi	r24, 0x01	; 1
    c45e:	09 f0       	breq	.+2      	; 0xc462 <FSettingPumpID+0x2e8>
    c460:	0b c1       	rjmp	.+534    	; 0xc678 <FSettingPumpID+0x4fe>
    c462:	10 92 1c 02 	sts	0x021C, r1
    c466:	08 c1       	rjmp	.+528    	; 0xc678 <FSettingPumpID+0x4fe>
		  }
	      break;
     case mpSaveFailed:
	      lcd_clear();
    c468:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("      Warning!      "));
    c46c:	81 e0       	ldi	r24, 0x01	; 1
    c46e:	61 e0       	ldi	r22, 0x01	; 1
    c470:	46 ef       	ldi	r20, 0xF6	; 246
    c472:	5d e0       	ldi	r21, 0x0D	; 13
    c474:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
    c478:	82 e0       	ldi	r24, 0x02	; 2
    c47a:	61 e0       	ldi	r22, 0x01	; 1
    c47c:	41 ee       	ldi	r20, 0xE1	; 225
    c47e:	5d e0       	ldi	r21, 0x0D	; 13
    c480:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
    c484:	83 e0       	ldi	r24, 0x03	; 3
    c486:	61 e0       	ldi	r22, 0x01	; 1
    c488:	4c ec       	ldi	r20, 0xCC	; 204
    c48a:	5d e0       	ldi	r21, 0x0D	; 13
    c48c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c490:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c492:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c494:	82 e0       	ldi	r24, 0x02	; 2
    c496:	80 93 be 01 	sts	0x01BE, r24
	      lcd_clear();
		  lcd_printf(1,1,PSTR("      Warning!      "));
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
		  system_beep(2);
	      TimDisplay=0;
    c49a:	10 92 93 01 	sts	0x0193, r1
	      stMenuPumpID=mpDisplayFailed;
    c49e:	84 e0       	ldi	r24, 0x04	; 4
    c4a0:	d6 c0       	rjmp	.+428    	; 0xc64e <FSettingPumpID+0x4d4>
          break;	 
     case mpDisplayFailed:
	      if (TimDisplay>6) stMenuPumpID=mpDisplayPumpId;
    c4a2:	80 91 93 01 	lds	r24, 0x0193
    c4a6:	87 30       	cpi	r24, 0x07	; 7
    c4a8:	08 f4       	brcc	.+2      	; 0xc4ac <FSettingPumpID+0x332>
    c4aa:	e6 c0       	rjmp	.+460    	; 0xc678 <FSettingPumpID+0x4fe>
    c4ac:	81 e0       	ldi	r24, 0x01	; 1
    c4ae:	cf c0       	rjmp	.+414    	; 0xc64e <FSettingPumpID+0x4d4>
	      break;
     case mpSavingPumpId:
	      eeprom_write_block((const void*) &PPumpId, (void*) &DefPumpMap, 8);
    c4b0:	83 e1       	ldi	r24, 0x13	; 19
    c4b2:	92 e0       	ldi	r25, 0x02	; 2
    c4b4:	6a e4       	ldi	r22, 0x4A	; 74
    c4b6:	70 e0       	ldi	r23, 0x00	; 0
    c4b8:	48 e0       	ldi	r20, 0x08	; 8
    c4ba:	50 e0       	ldi	r21, 0x00	; 0
    c4bc:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		  if (IFType==IT_STANDALONE){
    c4c0:	80 91 00 01 	lds	r24, 0x0100
    c4c4:	82 30       	cpi	r24, 0x02	; 2
    c4c6:	d9 f4       	brne	.+54     	; 0xc4fe <FSettingPumpID+0x384>
		      //SendConfig to Slave
			  lcd_clear();
    c4c8:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
              lcd_printf(1,1,PSTR("-PumpID-"));
    c4cc:	81 e0       	ldi	r24, 0x01	; 1
    c4ce:	61 e0       	ldi	r22, 0x01	; 1
    c4d0:	43 ec       	ldi	r20, 0xC3	; 195
    c4d2:	5d e0       	ldi	r21, 0x0D	; 13
    c4d4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
              lcd_printf(2,1,PSTR("Saving.."));
    c4d8:	82 e0       	ldi	r24, 0x02	; 2
    c4da:	61 e0       	ldi	r22, 0x01	; 1
    c4dc:	4a eb       	ldi	r20, 0xBA	; 186
    c4de:	5d e0       	ldi	r21, 0x0D	; 13
    c4e0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			  Idx=0;
    c4e4:	10 92 1b 02 	sts	0x021B, r1
			  PumpCount=0;
    c4e8:	10 92 11 02 	sts	0x0211, r1
              eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    c4ec:	83 e1       	ldi	r24, 0x13	; 19
    c4ee:	92 e0       	ldi	r25, 0x02	; 2
    c4f0:	6a e4       	ldi	r22, 0x4A	; 74
    c4f2:	70 e0       	ldi	r23, 0x00	; 0
    c4f4:	48 e0       	ldi	r20, 0x08	; 8
    c4f6:	50 e0       	ldi	r21, 0x00	; 0
    c4f8:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
    c4fc:	a7 c0       	rjmp	.+334    	; 0xc64c <FSettingPumpID+0x4d2>
              stMenuPumpID=mpSendConfigToSlave;
		  }else if (IFType==IT_SLAVE){
    c4fe:	81 30       	cpi	r24, 0x01	; 1
    c500:	09 f0       	breq	.+2      	; 0xc504 <FSettingPumpID+0x38a>
    c502:	ba c0       	rjmp	.+372    	; 0xc678 <FSettingPumpID+0x4fe>
    c504:	ab c0       	rjmp	.+342    	; 0xc65c <FSettingPumpID+0x4e2>
		      //SendConfig to Slave              
              stMenuPumpID=mpExitPumpId;
		  }
	      break;
     case mpSendConfigToSlave:
	      IsStandaloneAcknoledge=False;
    c506:	10 92 82 01 	sts	0x0182, r1
	      if (PPumpId[Idx]!=0){
    c50a:	90 91 1b 02 	lds	r25, 0x021B
    c50e:	29 2f       	mov	r18, r25
    c510:	30 e0       	ldi	r19, 0x00	; 0
    c512:	f9 01       	movw	r30, r18
    c514:	ed 5e       	subi	r30, 0xED	; 237
    c516:	fd 4f       	sbci	r31, 0xFD	; 253
    c518:	60 81       	ld	r22, Z
    c51a:	66 23       	and	r22, r22
    c51c:	81 f0       	breq	.+32     	; 0xc53e <FSettingPumpID+0x3c4>
		      PumpCount++;
    c51e:	80 91 11 02 	lds	r24, 0x0211
    c522:	8f 5f       	subi	r24, 0xFF	; 255
    c524:	80 93 11 02 	sts	0x0211, r24
		      MsgPumpId=((Idx<<4)|(0x0F&PPumpId[Idx]));//[Idx][PumpId]
    c528:	6f 70       	andi	r22, 0x0F	; 15
    c52a:	44 e0       	ldi	r20, 0x04	; 4
    c52c:	22 0f       	add	r18, r18
    c52e:	33 1f       	adc	r19, r19
    c530:	4a 95       	dec	r20
    c532:	e1 f7       	brne	.-8      	; 0xc52c <FSettingPumpID+0x3b2>
    c534:	62 2b       	or	r22, r18
    c536:	60 93 12 02 	sts	0x0212, r22
	         //SendPoolingCommand(SC_SET_PUMPID,MsgPumpId);
			  SendSlaveCommand(SC_SET_PUMPID,MsgPumpId);
    c53a:	8d e1       	ldi	r24, 0x1D	; 29
    c53c:	02 c0       	rjmp	.+4      	; 0xc542 <FSettingPumpID+0x3c8>
		  }else SendSlaveCommand(SC_CLEAR_PUMPID,Idx);//SendPoolingCommand(SC_CLEAR_PUMPID,Idx);
    c53e:	8e e1       	ldi	r24, 0x1E	; 30
    c540:	69 2f       	mov	r22, r25
    c542:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
		  sprintf_P(lcdteks,PSTR("Id[%d]=%.2d  "),Idx+1,PPumpId[Idx]);
    c546:	e0 91 1b 02 	lds	r30, 0x021B
    c54a:	f0 e0       	ldi	r31, 0x00	; 0
    c54c:	ad b7       	in	r26, 0x3d	; 61
    c54e:	be b7       	in	r27, 0x3e	; 62
    c550:	18 97       	sbiw	r26, 0x08	; 8
    c552:	0f b6       	in	r0, 0x3f	; 63
    c554:	f8 94       	cli
    c556:	be bf       	out	0x3e, r27	; 62
    c558:	0f be       	out	0x3f, r0	; 63
    c55a:	ad bf       	out	0x3d, r26	; 61
    c55c:	2d b7       	in	r18, 0x3d	; 61
    c55e:	3e b7       	in	r19, 0x3e	; 62
    c560:	2f 5f       	subi	r18, 0xFF	; 255
    c562:	3f 4f       	sbci	r19, 0xFF	; 255
    c564:	8e 01       	movw	r16, r28
    c566:	0f 5f       	subi	r16, 0xFF	; 255
    c568:	1f 4f       	sbci	r17, 0xFF	; 255
    c56a:	12 96       	adiw	r26, 0x02	; 2
    c56c:	1c 93       	st	X, r17
    c56e:	0e 93       	st	-X, r16
    c570:	11 97       	sbiw	r26, 0x01	; 1
    c572:	8c ea       	ldi	r24, 0xAC	; 172
    c574:	9d e0       	ldi	r25, 0x0D	; 13
    c576:	d9 01       	movw	r26, r18
    c578:	13 96       	adiw	r26, 0x03	; 3
    c57a:	9c 93       	st	X, r25
    c57c:	8e 93       	st	-X, r24
    c57e:	12 97       	sbiw	r26, 0x02	; 2
    c580:	31 96       	adiw	r30, 0x01	; 1
    c582:	15 96       	adiw	r26, 0x05	; 5
    c584:	fc 93       	st	X, r31
    c586:	ee 93       	st	-X, r30
    c588:	14 97       	sbiw	r26, 0x04	; 4
    c58a:	31 97       	sbiw	r30, 0x01	; 1
    c58c:	ed 5e       	subi	r30, 0xED	; 237
    c58e:	fd 4f       	sbci	r31, 0xFD	; 253
    c590:	80 81       	ld	r24, Z
    c592:	16 96       	adiw	r26, 0x06	; 6
    c594:	8c 93       	st	X, r24
    c596:	16 97       	sbiw	r26, 0x06	; 6
    c598:	17 96       	adiw	r26, 0x07	; 7
    c59a:	1c 92       	st	X, r1
    c59c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    c5a0:	ed b7       	in	r30, 0x3d	; 61
    c5a2:	fe b7       	in	r31, 0x3e	; 62
    c5a4:	38 96       	adiw	r30, 0x08	; 8
    c5a6:	0f b6       	in	r0, 0x3f	; 63
    c5a8:	f8 94       	cli
    c5aa:	fe bf       	out	0x3e, r31	; 62
    c5ac:	0f be       	out	0x3f, r0	; 63
    c5ae:	ed bf       	out	0x3d, r30	; 61
    c5b0:	83 e0       	ldi	r24, 0x03	; 3
    c5b2:	61 e0       	ldi	r22, 0x01	; 1
    c5b4:	a8 01       	movw	r20, r16
    c5b6:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          stMenuPumpID=mpWaitSlaveReply;
    c5ba:	88 e0       	ldi	r24, 0x08	; 8
    c5bc:	48 c0       	rjmp	.+144    	; 0xc64e <FSettingPumpID+0x4d4>
	      break;
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
    c5be:	81 e0       	ldi	r24, 0x01	; 1
    c5c0:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    c5c4:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  if (KeyChar=='*'){
    c5c8:	8a 32       	cpi	r24, 0x2A	; 42
    c5ca:	79 f4       	brne	.+30     	; 0xc5ea <FSettingPumpID+0x470>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c5cc:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c5ce:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c5d0:	82 e0       	ldi	r24, 0x02	; 2
    c5d2:	80 93 be 01 	sts	0x01BE, r24
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
	      KeyChar=_key_btn(KeyPressed);
		  if (KeyChar=='*'){
		      system_beep(2);
		      lcd_printf(2,1,PSTR("Cancel     "));
    c5d6:	61 e0       	ldi	r22, 0x01	; 1
    c5d8:	40 ea       	ldi	r20, 0xA0	; 160
    c5da:	5d e0       	ldi	r21, 0x0D	; 13
    c5dc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			  TimDisplay=0;
    c5e0:	10 92 93 01 	sts	0x0193, r1
		      stMenuPumpID=mpDelayExitPumpId;
    c5e4:	89 e0       	ldi	r24, 0x09	; 9
    c5e6:	80 93 1d 02 	sts	0x021D, r24
			  }
          if (IsStandaloneAcknoledge==True){
    c5ea:	10 91 82 01 	lds	r17, 0x0182
    c5ee:	11 30       	cpi	r17, 0x01	; 1
    c5f0:	09 f0       	breq	.+2      	; 0xc5f4 <FSettingPumpID+0x47a>
    c5f2:	42 c0       	rjmp	.+132    	; 0xc678 <FSettingPumpID+0x4fe>
		      Idx++;
    c5f4:	80 91 1b 02 	lds	r24, 0x021B
    c5f8:	8f 5f       	subi	r24, 0xFF	; 255
    c5fa:	80 93 1b 02 	sts	0x021B, r24
		      if (Idx<8){//Finish, Send MaxPumpCount
    c5fe:	88 30       	cpi	r24, 0x08	; 8
    c600:	b8 f4       	brcc	.+46     	; 0xc630 <FSettingPumpID+0x4b6>
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
    c602:	8a e4       	ldi	r24, 0x4A	; 74
    c604:	91 e0       	ldi	r25, 0x01	; 1
    c606:	60 91 11 02 	lds	r22, 0x0211
    c60a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    c60e:	8a e4       	ldi	r24, 0x4A	; 74
    c610:	91 e0       	ldi	r25, 0x01	; 1
    c612:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    c616:	80 93 5c 01 	sts	0x015C, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    c61a:	95 e1       	ldi	r25, 0x15	; 21
    c61c:	90 93 ad 05 	sts	0x05AD, r25
	 PoolMsg=plMsg;
    c620:	80 93 d9 0b 	sts	0x0BD9, r24
     IsControlPooling=True;
    c624:	10 93 84 01 	sts	0x0184, r17
		      Idx++;
		      if (Idx<8){//Finish, Send MaxPumpCount
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
                  SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PumpCountMax);
			      TimDisplay=0;		 
    c628:	10 92 93 01 	sts	0x0193, r1
				  stMenuPumpID=mpDelaySaveConfig;
    c62c:	87 e0       	ldi	r24, 0x07	; 7
    c62e:	0f c0       	rjmp	.+30     	; 0xc64e <FSettingPumpID+0x4d4>
			  }else{lcd_printf(2,1,PSTR("Completed"));
    c630:	82 e0       	ldi	r24, 0x02	; 2
    c632:	61 e0       	ldi	r22, 0x01	; 1
    c634:	46 e9       	ldi	r20, 0x96	; 150
    c636:	5d e0       	ldi	r21, 0x0D	; 13
    c638:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					TimDisplay=0;
    c63c:	10 92 93 01 	sts	0x0193, r1
				    stMenuPumpID=mpDelayExitPumpId;
    c640:	89 e0       	ldi	r24, 0x09	; 9
    c642:	05 c0       	rjmp	.+10     	; 0xc64e <FSettingPumpID+0x4d4>
				   }
			  }		  
	      break;
     case mpDelaySaveConfig:
	      if (TimDisplay>2)stMenuPumpID=mpSendConfigToSlave;
    c644:	80 91 93 01 	lds	r24, 0x0193
    c648:	83 30       	cpi	r24, 0x03	; 3
    c64a:	b0 f0       	brcs	.+44     	; 0xc678 <FSettingPumpID+0x4fe>
    c64c:	86 e0       	ldi	r24, 0x06	; 6
    c64e:	80 93 1d 02 	sts	0x021D, r24
    c652:	12 c0       	rjmp	.+36     	; 0xc678 <FSettingPumpID+0x4fe>
	      break;
     case mpDelayExitPumpId:
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
    c654:	80 91 93 01 	lds	r24, 0x0193
    c658:	89 30       	cpi	r24, 0x09	; 9
    c65a:	70 f0       	brcs	.+28     	; 0xc678 <FSettingPumpID+0x4fe>
    c65c:	8a e0       	ldi	r24, 0x0A	; 10
    c65e:	f7 cf       	rjmp	.-18     	; 0xc64e <FSettingPumpID+0x4d4>
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
    c660:	80 91 00 01 	lds	r24, 0x0100
    c664:	82 30       	cpi	r24, 0x02	; 2
    c666:	21 f4       	brne	.+8      	; 0xc670 <FSettingPumpID+0x4f6>
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c668:	80 e2       	ldi	r24, 0x20	; 32
    c66a:	60 e0       	ldi	r22, 0x00	; 0
    c66c:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
    c670:	10 92 1d 02 	sts	0x021D, r1
    c674:	81 e0       	ldi	r24, 0x01	; 1
    c676:	01 c0       	rjmp	.+2      	; 0xc67a <FSettingPumpID+0x500>
    c678:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    c67a:	64 96       	adiw	r28, 0x14	; 20
    c67c:	0f b6       	in	r0, 0x3f	; 63
    c67e:	f8 94       	cli
    c680:	de bf       	out	0x3e, r29	; 62
    c682:	0f be       	out	0x3f, r0	; 63
    c684:	cd bf       	out	0x3d, r28	; 61
    c686:	cf 91       	pop	r28
    c688:	df 91       	pop	r29
    c68a:	1f 91       	pop	r17
    c68c:	0f 91       	pop	r16
    c68e:	ff 90       	pop	r15
    c690:	ef 90       	pop	r14
    c692:	df 90       	pop	r13
    c694:	cf 90       	pop	r12
    c696:	bf 90       	pop	r11
    c698:	af 90       	pop	r10
    c69a:	9f 90       	pop	r9
    c69c:	08 95       	ret

0000c69e <_menu_pumpid>:

void _menu_pumpid(void){
	while(1){
	   if (FSettingPumpID()==MENU_DONE){
    c69e:	0e 94 bd 60 	call	0xc17a	; 0xc17a <FSettingPumpID>
    c6a2:	81 30       	cpi	r24, 0x01	; 1
    c6a4:	e1 f7       	brne	.-8      	; 0xc69e <_menu_pumpid>
	       break;
	   }	   
	}
}
    c6a6:	08 95       	ret

0000c6a8 <_menu_pump>:
        lcd_printf(4,15,PSTR("*)Exit"));
}



void _menu_pump(void){
    c6a8:	cf 93       	push	r28
    c6aa:	df 93       	push	r29
    c6ac:	c4 ec       	ldi	r28, 0xC4	; 196
    c6ae:	d9 e0       	ldi	r29, 0x09	; 9
	char __key;

	while(1){
		lcd_clear();_delay_ms(10);
    c6b0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    c6b4:	ce 01       	movw	r24, r28
    c6b6:	01 97       	sbiw	r24, 0x01	; 1
    c6b8:	f1 f7       	brne	.-4      	; 0xc6b6 <_menu_pump+0xe>
		lcd_printf(1, 1, PSTR("1)ID"));
    c6ba:	81 e0       	ldi	r24, 0x01	; 1
    c6bc:	61 e0       	ldi	r22, 0x01	; 1
    c6be:	4a ec       	ldi	r20, 0xCA	; 202
    c6c0:	5e e0       	ldi	r21, 0x0E	; 14
    c6c2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		lcd_printf(2, 1, PSTR("2)Product"));
    c6c6:	82 e0       	ldi	r24, 0x02	; 2
    c6c8:	61 e0       	ldi	r22, 0x01	; 1
    c6ca:	40 ec       	ldi	r20, 0xC0	; 192
    c6cc:	5e e0       	ldi	r21, 0x0E	; 14
    c6ce:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		lcd_printf(4, 1, PSTR("*)Exit"));
    c6d2:	84 e0       	ldi	r24, 0x04	; 4
    c6d4:	61 e0       	ldi	r22, 0x01	; 1
    c6d6:	49 eb       	ldi	r20, 0xB9	; 185
    c6d8:	5e e0       	ldi	r21, 0x0E	; 14
    c6da:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>

		while(1){
			__key = _key_scan(1);
    c6de:	81 e0       	ldi	r24, 0x01	; 1
    c6e0:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
			if(__key == _KEY_CANCEL)
    c6e4:	87 3e       	cpi	r24, 0xE7	; 231
    c6e6:	51 f0       	breq	.+20     	; 0xc6fc <_menu_pump+0x54>
				return;
			if(__key == _KEY_1){
    c6e8:	8e 3e       	cpi	r24, 0xEE	; 238
    c6ea:	19 f4       	brne	.+6      	; 0xc6f2 <_menu_pump+0x4a>
				_menu_pumpid();
    c6ec:	0e 94 4f 63 	call	0xc69e	; 0xc69e <_menu_pumpid>
    c6f0:	df cf       	rjmp	.-66     	; 0xc6b0 <_menu_pump+0x8>
				break;
			}
			if(__key == _KEY_2){
    c6f2:	8e 3d       	cpi	r24, 0xDE	; 222
    c6f4:	a1 f7       	brne	.-24     	; 0xc6de <_menu_pump+0x36>
				_menu_pumpprod();
    c6f6:	0e 94 d6 50 	call	0xa1ac	; 0xa1ac <_menu_pumpprod>
    c6fa:	da cf       	rjmp	.-76     	; 0xc6b0 <_menu_pump+0x8>
				break;
			}
		}
	}
}
    c6fc:	df 91       	pop	r29
    c6fe:	cf 91       	pop	r28
    c700:	08 95       	ret

0000c702 <FMenuPumpType>:





void FMenuPumpType(){
    c702:	cf 92       	push	r12
    c704:	df 92       	push	r13
    c706:	ef 92       	push	r14
    c708:	ff 92       	push	r15
    c70a:	0f 93       	push	r16
    c70c:	1f 93       	push	r17
    c70e:	df 93       	push	r29
    c710:	cf 93       	push	r28
    c712:	cd b7       	in	r28, 0x3d	; 61
    c714:	de b7       	in	r29, 0x3e	; 62
    c716:	a8 97       	sbiw	r28, 0x28	; 40
    c718:	0f b6       	in	r0, 0x3f	; 63
    c71a:	f8 94       	cli
    c71c:	de bf       	out	0x3e, r29	; 62
    c71e:	0f be       	out	0x3f, r0	; 63
    c720:	cd bf       	out	0x3d, r28	; 61
     stPumpType=ptInitMenu;
	 IsRunPumpType=True;
	 while(IsRunPumpType==True){
		  switch(stPumpType){
		  case ptInitMenu:
		       lcd_clear();
    c722:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
			   lcd_printf(1,1,PSTR("-Dispenser Brand-"));
    c726:	81 e0       	ldi	r24, 0x01	; 1
    c728:	61 e0       	ldi	r22, 0x01	; 1
    c72a:	47 ea       	ldi	r20, 0xA7	; 167
    c72c:	5e e0       	ldi	r21, 0x0E	; 14
    c72e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   IdxType=eeprom_read_byte(&DefDispenserBrand);
    c732:	8c e3       	ldi	r24, 0x3C	; 60
    c734:	91 e0       	ldi	r25, 0x01	; 1
    c736:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
			   //Brand Selection
			   if (IdxType>=3) IdxType=0;
    c73a:	83 30       	cpi	r24, 0x03	; 3
    c73c:	08 f0       	brcs	.+2      	; 0xc740 <FMenuPumpType+0x3e>
    c73e:	80 e0       	ldi	r24, 0x00	; 0
               strcpy_P(DispenserBrandName,(PGM_P)pgm_read_word(&(DefListDispenserName[IdxType])));
    c740:	08 2f       	mov	r16, r24
    c742:	10 e0       	ldi	r17, 0x00	; 0
    c744:	f8 01       	movw	r30, r16
    c746:	ee 0f       	add	r30, r30
    c748:	ff 1f       	adc	r31, r31
    c74a:	e9 5f       	subi	r30, 0xF9	; 249
    c74c:	fc 4f       	sbci	r31, 0xFC	; 252
    c74e:	65 91       	lpm	r22, Z+
    c750:	74 91       	lpm	r23, Z+
    c752:	f5 e1       	ldi	r31, 0x15	; 21
    c754:	cf 2e       	mov	r12, r31
    c756:	d1 2c       	mov	r13, r1
    c758:	cc 0e       	add	r12, r28
    c75a:	dd 1e       	adc	r13, r29
    c75c:	c6 01       	movw	r24, r12
    c75e:	0e 94 e0 ab 	call	0x157c0	; 0x157c0 <strcpy_P>
			   sprintf_P(lcdteks,PSTR("%d.%s"),IdxType+1,DispenserBrandName);
    c762:	8d b7       	in	r24, 0x3d	; 61
    c764:	9e b7       	in	r25, 0x3e	; 62
    c766:	08 97       	sbiw	r24, 0x08	; 8
    c768:	0f b6       	in	r0, 0x3f	; 63
    c76a:	f8 94       	cli
    c76c:	9e bf       	out	0x3e, r25	; 62
    c76e:	0f be       	out	0x3f, r0	; 63
    c770:	8d bf       	out	0x3d, r24	; 61
    c772:	ed b7       	in	r30, 0x3d	; 61
    c774:	fe b7       	in	r31, 0x3e	; 62
    c776:	31 96       	adiw	r30, 0x01	; 1
    c778:	7e 01       	movw	r14, r28
    c77a:	08 94       	sec
    c77c:	e1 1c       	adc	r14, r1
    c77e:	f1 1c       	adc	r15, r1
    c780:	ad b7       	in	r26, 0x3d	; 61
    c782:	be b7       	in	r27, 0x3e	; 62
    c784:	12 96       	adiw	r26, 0x02	; 2
    c786:	fc 92       	st	X, r15
    c788:	ee 92       	st	-X, r14
    c78a:	11 97       	sbiw	r26, 0x01	; 1
    c78c:	81 ea       	ldi	r24, 0xA1	; 161
    c78e:	9e e0       	ldi	r25, 0x0E	; 14
    c790:	93 83       	std	Z+3, r25	; 0x03
    c792:	82 83       	std	Z+2, r24	; 0x02
    c794:	0f 5f       	subi	r16, 0xFF	; 255
    c796:	1f 4f       	sbci	r17, 0xFF	; 255
    c798:	15 83       	std	Z+5, r17	; 0x05
    c79a:	04 83       	std	Z+4, r16	; 0x04
    c79c:	d7 82       	std	Z+7, r13	; 0x07
    c79e:	c6 82       	std	Z+6, r12	; 0x06
    c7a0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   lcd_print(2,1,lcdteks);
    c7a4:	8d b7       	in	r24, 0x3d	; 61
    c7a6:	9e b7       	in	r25, 0x3e	; 62
    c7a8:	08 96       	adiw	r24, 0x08	; 8
    c7aa:	0f b6       	in	r0, 0x3f	; 63
    c7ac:	f8 94       	cli
    c7ae:	9e bf       	out	0x3e, r25	; 62
    c7b0:	0f be       	out	0x3f, r0	; 63
    c7b2:	8d bf       	out	0x3d, r24	; 61
    c7b4:	82 e0       	ldi	r24, 0x02	; 2
    c7b6:	61 e0       	ldi	r22, 0x01	; 1
    c7b8:	a7 01       	movw	r20, r14
    c7ba:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Exit  [#]Change "));
    c7be:	84 e0       	ldi	r24, 0x04	; 4
    c7c0:	61 e0       	ldi	r22, 0x01	; 1
    c7c2:	4d e8       	ldi	r20, 0x8D	; 141
    c7c4:	5e e0       	ldi	r21, 0x0E	; 14
    c7c6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   if (IFType==IT_STANDALONE)
    c7ca:	80 91 00 01 	lds	r24, 0x0100
    c7ce:	82 30       	cpi	r24, 0x02	; 2
    c7d0:	21 f4       	brne	.+8      	; 0xc7da <FMenuPumpType+0xd8>
			       SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    c7d2:	8f e1       	ldi	r24, 0x1F	; 31
    c7d4:	60 e0       	ldi	r22, 0x00	; 0
    c7d6:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
			   stPumpType=ptSelectBrand;
	 		   break;
          case ptSelectBrand:
		       KeyPressed = _key_scan(1);
    c7da:	81 e0       	ldi	r24, 0x01	; 1
    c7dc:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		       KeyChar    = _key_btn(KeyPressed);
    c7e0:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>

			   if (KeyChar=='#'){
    c7e4:	83 32       	cpi	r24, 0x23	; 35
    c7e6:	11 f5       	brne	.+68     	; 0xc82c <FMenuPumpType+0x12a>
			       DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    c7e8:	8c e3       	ldi	r24, 0x3C	; 60
    c7ea:	91 e0       	ldi	r25, 0x01	; 1
    c7ec:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
				   if (DispenserBrand<ST_WAYNE_DART)
    c7f0:	82 30       	cpi	r24, 0x02	; 2
    c7f2:	20 f4       	brcc	.+8      	; 0xc7fc <FMenuPumpType+0xfa>
				        DispenserBrand++;
    c7f4:	8f 5f       	subi	r24, 0xFF	; 255
    c7f6:	80 93 5e 01 	sts	0x015E, r24
    c7fa:	02 c0       	rjmp	.+4      	; 0xc800 <FMenuPumpType+0xfe>
				   else DispenserBrand=ST_NONE;
    c7fc:	10 92 5e 01 	sts	0x015E, r1
                   //Apply DecimalSetting  
				   SetDispenser(DispenserBrand);
    c800:	80 91 5e 01 	lds	r24, 0x015E
    c804:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <SetDispenser>
			       eeprom_write_byte(&DefDispenserBrand,DispenserBrand);
    c808:	8c e3       	ldi	r24, 0x3C	; 60
    c80a:	91 e0       	ldi	r25, 0x01	; 1
    c80c:	60 91 5e 01 	lds	r22, 0x015E
    c810:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
				   //SendPoolingCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
				   SendSlaveCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
    c814:	8c e3       	ldi	r24, 0x3C	; 60
    c816:	91 e0       	ldi	r25, 0x01	; 1
    c818:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    c81c:	68 2f       	mov	r22, r24
    c81e:	8c e1       	ldi	r24, 0x1C	; 28
    c820:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
				   IsSetPumpType=True;//False;
    c824:	81 e0       	ldi	r24, 0x01	; 1
    c826:	80 93 23 01 	sts	0x0123, r24
    c82a:	0b c0       	rjmp	.+22     	; 0xc842 <FMenuPumpType+0x140>
			       stPumpType=ptUpdated;			   
			   }else
			   if (KeyChar=='*'){
    c82c:	8a 32       	cpi	r24, 0x2A	; 42
    c82e:	a9 f6       	brne	.-86     	; 0xc7da <FMenuPumpType+0xd8>
			       IsRunPumpType=False;
				   if (IFType==IT_STANDALONE)SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c830:	80 91 00 01 	lds	r24, 0x0100
    c834:	82 30       	cpi	r24, 0x02	; 2
    c836:	51 f4       	brne	.+20     	; 0xc84c <FMenuPumpType+0x14a>
    c838:	80 e2       	ldi	r24, 0x20	; 32
    c83a:	60 e0       	ldi	r22, 0x00	; 0
    c83c:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
    c840:	05 c0       	rjmp	.+10     	; 0xc84c <FMenuPumpType+0x14a>
			   }
		       break;
          case ptUpdated:
		       if (IsSetPumpType==True){
    c842:	80 91 23 01 	lds	r24, 0x0123
    c846:	81 30       	cpi	r24, 0x01	; 1
    c848:	e1 f7       	brne	.-8      	; 0xc842 <FMenuPumpType+0x140>
    c84a:	6b cf       	rjmp	.-298    	; 0xc722 <FMenuPumpType+0x20>
			       stPumpType=ptInitMenu;
			   }
		       break;		         
	      }
	 }     
}
    c84c:	a8 96       	adiw	r28, 0x28	; 40
    c84e:	0f b6       	in	r0, 0x3f	; 63
    c850:	f8 94       	cli
    c852:	de bf       	out	0x3e, r29	; 62
    c854:	0f be       	out	0x3f, r0	; 63
    c856:	cd bf       	out	0x3d, r28	; 61
    c858:	cf 91       	pop	r28
    c85a:	df 91       	pop	r29
    c85c:	1f 91       	pop	r17
    c85e:	0f 91       	pop	r16
    c860:	ff 90       	pop	r15
    c862:	ef 90       	pop	r14
    c864:	df 90       	pop	r13
    c866:	cf 90       	pop	r12
    c868:	08 95       	ret

0000c86a <FSettingPump>:
	      break;
	 
	 }
*/
	 char __key,Result;
		lcd_clear();_delay_ms(10);
    c86a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    c86e:	84 ec       	ldi	r24, 0xC4	; 196
    c870:	99 e0       	ldi	r25, 0x09	; 9
    c872:	01 97       	sbiw	r24, 0x01	; 1
    c874:	f1 f7       	brne	.-4      	; 0xc872 <FSettingPump+0x8>
		lcd_printf(1,1, PSTR("1)ID     "));
    c876:	81 e0       	ldi	r24, 0x01	; 1
    c878:	61 e0       	ldi	r22, 0x01	; 1
    c87a:	46 e2       	ldi	r20, 0x26	; 38
    c87c:	53 e1       	ldi	r21, 0x13	; 19
    c87e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		lcd_printf(2,1, PSTR("2)Product"));
    c882:	82 e0       	ldi	r24, 0x02	; 2
    c884:	61 e0       	ldi	r22, 0x01	; 1
    c886:	4c e1       	ldi	r20, 0x1C	; 28
    c888:	53 e1       	ldi	r21, 0x13	; 19
    c88a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		if (IFType==IT_STANDALONE){
    c88e:	80 91 00 01 	lds	r24, 0x0100
    c892:	82 30       	cpi	r24, 0x02	; 2
    c894:	61 f4       	brne	.+24     	; 0xc8ae <FSettingPump+0x44>
		    lcd_printf(3,1, PSTR("3)Label  "));
    c896:	83 e0       	ldi	r24, 0x03	; 3
    c898:	61 e0       	ldi	r22, 0x01	; 1
    c89a:	42 e1       	ldi	r20, 0x12	; 18
    c89c:	53 e1       	ldi	r21, 0x13	; 19
    c89e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		    lcd_printf(4,1, PSTR("4)Brand  *)Exit"));
    c8a2:	84 e0       	ldi	r24, 0x04	; 4
    c8a4:	61 e0       	ldi	r22, 0x01	; 1
    c8a6:	42 e0       	ldi	r20, 0x02	; 2
    c8a8:	53 e1       	ldi	r21, 0x13	; 19
    c8aa:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		}

		while(1){
			__key = _key_scan(1);
    c8ae:	81 e0       	ldi	r24, 0x01	; 1
    c8b0:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
			if(__key == _KEY_CANCEL)
    c8b4:	87 3e       	cpi	r24, 0xE7	; 231
    c8b6:	d9 f0       	breq	.+54     	; 0xc8ee <FSettingPump+0x84>
				break;
			if(__key == _KEY_1){
    c8b8:	8e 3e       	cpi	r24, 0xEE	; 238
    c8ba:	19 f4       	brne	.+6      	; 0xc8c2 <FSettingPump+0x58>
				_menu_pumpid();
    c8bc:	0e 94 4f 63 	call	0xc69e	; 0xc69e <_menu_pumpid>
    c8c0:	16 c0       	rjmp	.+44     	; 0xc8ee <FSettingPump+0x84>
				break;
			}
			if(__key == _KEY_2){
    c8c2:	8e 3d       	cpi	r24, 0xDE	; 222
    c8c4:	19 f4       	brne	.+6      	; 0xc8cc <FSettingPump+0x62>
				_menu_pumpprod();
    c8c6:	0e 94 d6 50 	call	0xa1ac	; 0xa1ac <_menu_pumpprod>
    c8ca:	11 c0       	rjmp	.+34     	; 0xc8ee <FSettingPump+0x84>
				break;
			}

			if((__key == _KEY_3)&&(IFType==IT_STANDALONE)){
    c8cc:	8e 3b       	cpi	r24, 0xBE	; 190
    c8ce:	39 f4       	brne	.+14     	; 0xc8de <FSettingPump+0x74>
    c8d0:	80 91 00 01 	lds	r24, 0x0100
    c8d4:	82 30       	cpi	r24, 0x02	; 2
    c8d6:	59 f7       	brne	.-42     	; 0xc8ae <FSettingPump+0x44>
			    FMenuPumpLabel();
    c8d8:	0e 94 e9 50 	call	0xa1d2	; 0xa1d2 <FMenuPumpLabel>
    c8dc:	08 c0       	rjmp	.+16     	; 0xc8ee <FSettingPump+0x84>
				break;
			}
			if((__key == _KEY_4)&&(IFType==IT_STANDALONE)){
    c8de:	8d 3e       	cpi	r24, 0xED	; 237
    c8e0:	31 f7       	brne	.-52     	; 0xc8ae <FSettingPump+0x44>
    c8e2:	80 91 00 01 	lds	r24, 0x0100
    c8e6:	82 30       	cpi	r24, 0x02	; 2
    c8e8:	11 f7       	brne	.-60     	; 0xc8ae <FSettingPump+0x44>
			    FMenuPumpType();
    c8ea:	0e 94 81 63 	call	0xc702	; 0xc702 <FMenuPumpType>

		}

	Result=MENU_DONE;
	return Result;
}
    c8ee:	81 e0       	ldi	r24, 0x01	; 1
    c8f0:	08 95       	ret

0000c8f2 <StoreStandaloneTransData>:
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
}
         
			                                         //      STX     MSGID  PumpID              6        8        8
void StoreStandaloneTransData(char *strRawTransData){//  [0x50,0x05]  01      01      1       004500   00000200  00000012 [0x06,0x60] = 24
    c8f2:	3f 92       	push	r3
    c8f4:	4f 92       	push	r4
    c8f6:	5f 92       	push	r5
    c8f8:	6f 92       	push	r6
    c8fa:	7f 92       	push	r7
    c8fc:	8f 92       	push	r8
    c8fe:	9f 92       	push	r9
    c900:	af 92       	push	r10
    c902:	bf 92       	push	r11
    c904:	cf 92       	push	r12
    c906:	df 92       	push	r13
    c908:	ef 92       	push	r14
    c90a:	ff 92       	push	r15
    c90c:	0f 93       	push	r16
    c90e:	1f 93       	push	r17
    c910:	df 93       	push	r29
    c912:	cf 93       	push	r28
    c914:	cd b7       	in	r28, 0x3d	; 61
    c916:	de b7       	in	r29, 0x3e	; 62
    c918:	e0 97       	sbiw	r28, 0x30	; 48
    c91a:	0f b6       	in	r0, 0x3f	; 63
    c91c:	f8 94       	cli
    c91e:	de bf       	out	0x3e, r29	; 62
    c920:	0f be       	out	0x3f, r0	; 63
    c922:	cd bf       	out	0x3d, r28	; 61
    c924:	7c 01       	movw	r14, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    c926:	dc 01       	movw	r26, r24
    c928:	12 96       	adiw	r26, 0x02	; 2
    c92a:	8c 91       	ld	r24, X
    c92c:	12 97       	sbiw	r26, 0x02	; 2
    c92e:	89 83       	std	Y+1, r24	; 0x01
    c930:	13 96       	adiw	r26, 0x03	; 3
    c932:	8c 91       	ld	r24, X
    c934:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    c936:	1b 82       	std	Y+3, r1	; 0x03
	 char strSend[30];
	 char TransDigit;
	 char FIPAddr;
      
	 StrPosCopy(strRawTransData,strPumpID,2,2);
	 RemZeroLead(strPumpID);
    c938:	8e 01       	movw	r16, r28
    c93a:	0f 5f       	subi	r16, 0xFF	; 255
    c93c:	1f 4f       	sbci	r17, 0xFF	; 255
    c93e:	c8 01       	movw	r24, r16
    c940:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
	 iPumpID=atoi(strPumpID); 
    c944:	c8 01       	movw	r24, r16
    c946:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
    c94a:	58 2e       	mov	r5, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    c94c:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
    c950:	d8 2e       	mov	r13, r24
	 if (FIPAddr>0){
    c952:	88 23       	and	r24, r24
    c954:	09 f4       	brne	.+2      	; 0xc958 <StoreStandaloneTransData+0x66>
    c956:	01 c2       	rjmp	.+1026   	; 0xcd5a <StoreStandaloneTransData+0x468>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    c958:	f7 01       	movw	r30, r14
    c95a:	34 80       	ldd	r3, Z+4	; 0x04

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c95c:	45 80       	ldd	r4, Z+5	; 0x05
    c95e:	14 e0       	ldi	r17, 0x04	; 4
    c960:	a1 2e       	mov	r10, r17
    c962:	b1 2c       	mov	r11, r1
    c964:	ac 0e       	add	r10, r28
    c966:	bd 1e       	adc	r11, r29
    c968:	f5 01       	movw	r30, r10
    c96a:	ce 01       	movw	r24, r28
    c96c:	0b 96       	adiw	r24, 0x0b	; 11
	     strMemory[i]=data;
    c96e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c970:	e8 17       	cp	r30, r24
    c972:	f9 07       	cpc	r31, r25
    c974:	e1 f7       	brne	.-8      	; 0xc96e <StoreStandaloneTransData+0x7c>
    c976:	bd e1       	ldi	r27, 0x1D	; 29
    c978:	8b 2e       	mov	r8, r27
    c97a:	91 2c       	mov	r9, r1
    c97c:	8c 0e       	add	r8, r28
    c97e:	9d 1e       	adc	r9, r29
    c980:	94 01       	movw	r18, r8
	     strMemory[i]=data;
    c982:	ce 01       	movw	r24, r28
    c984:	87 96       	adiw	r24, 0x27	; 39
    c986:	d9 01       	movw	r26, r18
    c988:	1d 92       	st	X+, r1
    c98a:	9d 01       	movw	r18, r26

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c98c:	a8 17       	cp	r26, r24
    c98e:	b9 07       	cpc	r27, r25
    c990:	d1 f7       	brne	.-12     	; 0xc986 <StoreStandaloneTransData+0x94>
    c992:	3d 01       	movw	r6, r26
    c994:	fd 01       	movw	r30, r26
	     strMemory[i]=data;
    c996:	ce 01       	movw	r24, r28
    c998:	c1 96       	adiw	r24, 0x31	; 49
    c99a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c99c:	e8 17       	cp	r30, r24
    c99e:	f9 07       	cpc	r31, r25
    c9a0:	e1 f7       	brne	.-8      	; 0xc99a <StoreStandaloneTransData+0xa8>
    c9a2:	a7 01       	movw	r20, r14
    c9a4:	d7 01       	movw	r26, r14
    c9a6:	f5 01       	movw	r30, r10
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9a8:	be 01       	movw	r22, r28
    c9aa:	66 5f       	subi	r22, 0xF6	; 246
    c9ac:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c9ae:	16 96       	adiw	r26, 0x06	; 6
    c9b0:	8c 91       	ld	r24, X
    c9b2:	16 97       	sbiw	r26, 0x06	; 6
    c9b4:	81 93       	st	Z+, r24
    c9b6:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9b8:	e6 17       	cp	r30, r22
    c9ba:	f7 07       	cpc	r31, r23
    c9bc:	c1 f7       	brne	.-16     	; 0xc9ae <StoreStandaloneTransData+0xbc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c9be:	1a 86       	std	Y+10, r1	; 0x0a
    c9c0:	d7 01       	movw	r26, r14
    c9c2:	f4 01       	movw	r30, r8
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9c4:	be 01       	movw	r22, r28
    c9c6:	6b 5d       	subi	r22, 0xDB	; 219
    c9c8:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c9ca:	1c 96       	adiw	r26, 0x0c	; 12
    c9cc:	8c 91       	ld	r24, X
    c9ce:	1c 97       	sbiw	r26, 0x0c	; 12
    c9d0:	81 93       	st	Z+, r24
    c9d2:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9d4:	e6 17       	cp	r30, r22
    c9d6:	f7 07       	cpc	r31, r23
    c9d8:	c1 f7       	brne	.-16     	; 0xc9ca <StoreStandaloneTransData+0xd8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c9da:	1d a2       	std	Y+37, r1	; 0x25
    c9dc:	f9 01       	movw	r30, r18
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9de:	be 01       	movw	r22, r28
    c9e0:	69 5d       	subi	r22, 0xD9	; 217
    c9e2:	7f 4f       	sbci	r23, 0xFF	; 255
    c9e4:	9e 01       	movw	r18, r28
    c9e6:	21 5d       	subi	r18, 0xD1	; 209
    c9e8:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c9ea:	da 01       	movw	r26, r20
    c9ec:	54 96       	adiw	r26, 0x14	; 20
    c9ee:	8c 91       	ld	r24, X
    c9f0:	81 93       	st	Z+, r24
    c9f2:	4f 5f       	subi	r20, 0xFF	; 255
    c9f4:	5f 4f       	sbci	r21, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9f6:	e2 17       	cp	r30, r18
    c9f8:	f3 07       	cpc	r31, r19
    c9fa:	b9 f7       	brne	.-18     	; 0xc9ea <StoreStandaloneTransData+0xf8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c9fc:	1f a6       	std	Y+47, r1	; 0x2f
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    c9fe:	f7 01       	movw	r30, r14
    ca00:	84 8d       	ldd	r24, Z+28	; 0x1c
    ca02:	80 53       	subi	r24, 0x30	; 48
    ca04:	8a 30       	cpi	r24, 0x0A	; 10
    ca06:	98 f4       	brcc	.+38     	; 0xca2e <StoreStandaloneTransData+0x13c>

		 TransDigit=Ord(CharPosCopy(strRawTransData,28));
		 //Normalize7Digit
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
    ca08:	88 30       	cpi	r24, 0x08	; 8
    ca0a:	89 f4       	brne	.+34     	; 0xca2e <StoreStandaloneTransData+0x13c>
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
    ca0c:	fb 01       	movw	r30, r22
    ca0e:	01 90       	ld	r0, Z+
    ca10:	00 20       	and	r0, r0
    ca12:	e9 f7       	brne	.-6      	; 0xca0e <StoreStandaloneTransData+0x11c>
    ca14:	e6 1b       	sub	r30, r22
    ca16:	f7 0b       	sbc	r31, r23
    ca18:	32 97       	sbiw	r30, 0x02	; 2
    ca1a:	80 e0       	ldi	r24, 0x00	; 0
    ca1c:	90 e0       	ldi	r25, 0x00	; 0
    ca1e:	01 c0       	rjmp	.+2      	; 0xca22 <StoreStandaloneTransData+0x130>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca20:	01 96       	adiw	r24, 0x01	; 1
    ca22:	8e 17       	cp	r24, r30
    ca24:	9f 07       	cpc	r25, r31
    ca26:	e0 f3       	brcs	.-8      	; 0xca20 <StoreStandaloneTransData+0x12e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ca28:	ec 0f       	add	r30, r28
    ca2a:	fd 1f       	adc	r31, r29
    ca2c:	17 a2       	std	Z+39, r1	; 0x27
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
		 }
		 RemZeroLead(strPPU);
    ca2e:	ce 01       	movw	r24, r28
    ca30:	04 96       	adiw	r24, 0x04	; 4
    ca32:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		 RemZeroLead(strPVolume);
    ca36:	ce 01       	movw	r24, r28
    ca38:	4d 96       	adiw	r24, 0x1d	; 29
    ca3a:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		 RemZeroLead(strPMoney);
    ca3e:	8e 01       	movw	r16, r28
    ca40:	09 5d       	subi	r16, 0xD9	; 217
    ca42:	1f 4f       	sbci	r17, 0xFF	; 255
    ca44:	c8 01       	movw	r24, r16
    ca46:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		 //sprintf_P(strSend,PSTR("Money: %s"),strPMoney);
		 //uart_print(1,1,strSend);


		 //Void Detection
		 if (atoi(strPMoney)==0)TransactionStatus=TS_VOID;
    ca4a:	c8 01       	movw	r24, r16
    ca4c:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
    ca50:	89 2b       	or	r24, r25
    ca52:	09 f0       	breq	.+2      	; 0xca56 <StoreStandaloneTransData+0x164>
    ca54:	07 c1       	rjmp	.+526    	; 0xcc64 <StoreStandaloneTransData+0x372>
		 else TransactionStatus=TS_NEW;
		 
		 if (TransactionStatus==TS_VOID){//RejectData
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
    ca56:	85 2d       	mov	r24, r5
    ca58:	8f 70       	andi	r24, 0x0F	; 15
    ca5a:	63 e1       	ldi	r22, 0x13	; 19
    ca5c:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
    ca60:	7c c1       	rjmp	.+760    	; 0xcd5a <StoreStandaloneTransData+0x468>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    ca62:	f9 01       	movw	r30, r18
    ca64:	81 91       	ld	r24, Z+
    ca66:	9f 01       	movw	r18, r30
    ca68:	fb 01       	movw	r30, r22
    ca6a:	81 93       	st	Z+, r24
    ca6c:	bf 01       	movw	r22, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca6e:	24 17       	cp	r18, r20
    ca70:	35 07       	cpc	r19, r21
    ca72:	b9 f7       	brne	.-18     	; 0xca62 <StoreStandaloneTransData+0x170>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ca74:	85 e3       	ldi	r24, 0x35	; 53
    ca76:	90 e0       	ldi	r25, 0x00	; 0
    ca78:	9c 01       	movw	r18, r24
    ca7a:	c2 9e       	mul	r12, r18
    ca7c:	c0 01       	movw	r24, r0
    ca7e:	c3 9e       	mul	r12, r19
    ca80:	90 0d       	add	r25, r0
    ca82:	d2 9e       	mul	r13, r18
    ca84:	90 0d       	add	r25, r0
    ca86:	11 24       	eor	r1, r1
    ca88:	fc 01       	movw	r30, r24
    ca8a:	e2 55       	subi	r30, 0x52	; 82
    ca8c:	fa 4f       	sbci	r31, 0xFA	; 250
    ca8e:	ea 0f       	add	r30, r26
    ca90:	fb 1f       	adc	r31, r27
    ca92:	13 82       	std	Z+3, r1	; 0x03
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
    ca94:	fe 01       	movw	r30, r28
    ca96:	3b 96       	adiw	r30, 0x0b	; 11
    ca98:	df 01       	movw	r26, r30
    ca9a:	0d 90       	ld	r0, X+
    ca9c:	00 20       	and	r0, r0
    ca9e:	e9 f7       	brne	.-6      	; 0xca9a <StoreStandaloneTransData+0x1a8>
    caa0:	11 97       	sbiw	r26, 0x01	; 1
    caa2:	ae 1b       	sub	r26, r30
    caa4:	bf 0b       	sbc	r27, r31
    caa6:	bf 01       	movw	r22, r30
    caa8:	9c 01       	movw	r18, r24
    caaa:	28 54       	subi	r18, 0x48	; 72
    caac:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    caae:	af 01       	movw	r20, r30
    cab0:	4a 0f       	add	r20, r26
    cab2:	5b 1f       	adc	r21, r27
    cab4:	06 c0       	rjmp	.+12     	; 0xcac2 <StoreStandaloneTransData+0x1d0>
	    Dest[i]=Source[IdxSource+i];
    cab6:	fb 01       	movw	r30, r22
    cab8:	81 91       	ld	r24, Z+
    caba:	bf 01       	movw	r22, r30
    cabc:	f9 01       	movw	r30, r18
    cabe:	81 93       	st	Z+, r24
    cac0:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cac2:	64 17       	cp	r22, r20
    cac4:	75 07       	cpc	r23, r21
    cac6:	b9 f7       	brne	.-18     	; 0xcab6 <StoreStandaloneTransData+0x1c4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cac8:	85 e3       	ldi	r24, 0x35	; 53
    caca:	90 e0       	ldi	r25, 0x00	; 0
    cacc:	9c 01       	movw	r18, r24
    cace:	c2 9e       	mul	r12, r18
    cad0:	c0 01       	movw	r24, r0
    cad2:	c3 9e       	mul	r12, r19
    cad4:	90 0d       	add	r25, r0
    cad6:	d2 9e       	mul	r13, r18
    cad8:	90 0d       	add	r25, r0
    cada:	11 24       	eor	r1, r1
    cadc:	fc 01       	movw	r30, r24
    cade:	e2 55       	subi	r30, 0x52	; 82
    cae0:	fa 4f       	sbci	r31, 0xFA	; 250
    cae2:	ea 0f       	add	r30, r26
    cae4:	fb 1f       	adc	r31, r27
    cae6:	12 86       	std	Z+10, r1	; 0x0a
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
    cae8:	fe 01       	movw	r30, r28
    caea:	74 96       	adiw	r30, 0x14	; 20
    caec:	df 01       	movw	r26, r30
    caee:	0d 90       	ld	r0, X+
    caf0:	00 20       	and	r0, r0
    caf2:	e9 f7       	brne	.-6      	; 0xcaee <StoreStandaloneTransData+0x1fc>
    caf4:	11 97       	sbiw	r26, 0x01	; 1
    caf6:	ae 1b       	sub	r26, r30
    caf8:	bf 0b       	sbc	r27, r31
    cafa:	bf 01       	movw	r22, r30
    cafc:	9c 01       	movw	r18, r24
    cafe:	2f 53       	subi	r18, 0x3F	; 63
    cb00:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb02:	af 01       	movw	r20, r30
    cb04:	4a 0f       	add	r20, r26
    cb06:	5b 1f       	adc	r21, r27
    cb08:	06 c0       	rjmp	.+12     	; 0xcb16 <StoreStandaloneTransData+0x224>
	    Dest[i]=Source[IdxSource+i];
    cb0a:	fb 01       	movw	r30, r22
    cb0c:	81 91       	ld	r24, Z+
    cb0e:	bf 01       	movw	r22, r30
    cb10:	f9 01       	movw	r30, r18
    cb12:	81 93       	st	Z+, r24
    cb14:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb16:	64 17       	cp	r22, r20
    cb18:	75 07       	cpc	r23, r21
    cb1a:	b9 f7       	brne	.-18     	; 0xcb0a <StoreStandaloneTransData+0x218>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cb1c:	85 e3       	ldi	r24, 0x35	; 53
    cb1e:	90 e0       	ldi	r25, 0x00	; 0
    cb20:	c8 9e       	mul	r12, r24
    cb22:	70 01       	movw	r14, r0
    cb24:	c9 9e       	mul	r12, r25
    cb26:	f0 0c       	add	r15, r0
    cb28:	d8 9e       	mul	r13, r24
    cb2a:	f0 0c       	add	r15, r0
    cb2c:	11 24       	eor	r1, r1
    cb2e:	87 01       	movw	r16, r14
    cb30:	02 55       	subi	r16, 0x52	; 82
    cb32:	1a 4f       	sbci	r17, 0xFA	; 250
    cb34:	a0 0f       	add	r26, r16
    cb36:	b1 1f       	adc	r27, r17
    cb38:	53 96       	adiw	r26, 0x13	; 19
    cb3a:	1c 92       	st	X, r1
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
    cb3c:	f0 ed       	ldi	r31, 0xD0	; 208
    cb3e:	4f 0e       	add	r4, r31
    cb40:	d8 01       	movw	r26, r16
    cb42:	4c 92       	st	X, r4
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
    cb44:	3f 0e       	add	r3, r31
    cb46:	11 96       	adiw	r26, 0x01	; 1
    cb48:	3c 92       	st	X, r3
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
    cb4a:	8e e6       	ldi	r24, 0x6E	; 110
    cb4c:	9c e0       	ldi	r25, 0x0C	; 12
    cb4e:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
    cb52:	f8 01       	movw	r30, r16
    cb54:	82 83       	std	Z+2, r24	; 0x02
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
    cb56:	fe 01       	movw	r30, r28
    cb58:	34 96       	adiw	r30, 0x04	; 4
    cb5a:	df 01       	movw	r26, r30
    cb5c:	0d 90       	ld	r0, X+
    cb5e:	00 20       	and	r0, r0
    cb60:	e9 f7       	brne	.-6      	; 0xcb5c <StoreStandaloneTransData+0x26a>
    cb62:	11 97       	sbiw	r26, 0x01	; 1
    cb64:	ae 1b       	sub	r26, r30
    cb66:	bf 0b       	sbc	r27, r31
    cb68:	97 01       	movw	r18, r14
    cb6a:	26 53       	subi	r18, 0x36	; 54
    cb6c:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb6e:	af 01       	movw	r20, r30
    cb70:	4a 0f       	add	r20, r26
    cb72:	5b 1f       	adc	r21, r27
    cb74:	06 c0       	rjmp	.+12     	; 0xcb82 <StoreStandaloneTransData+0x290>
	    Dest[i]=Source[IdxSource+i];
    cb76:	f5 01       	movw	r30, r10
    cb78:	81 91       	ld	r24, Z+
    cb7a:	5f 01       	movw	r10, r30
    cb7c:	f9 01       	movw	r30, r18
    cb7e:	81 93       	st	Z+, r24
    cb80:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb82:	a4 16       	cp	r10, r20
    cb84:	b5 06       	cpc	r11, r21
    cb86:	b9 f7       	brne	.-18     	; 0xcb76 <StoreStandaloneTransData+0x284>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cb88:	85 e3       	ldi	r24, 0x35	; 53
    cb8a:	90 e0       	ldi	r25, 0x00	; 0
    cb8c:	9c 01       	movw	r18, r24
    cb8e:	c2 9e       	mul	r12, r18
    cb90:	c0 01       	movw	r24, r0
    cb92:	c3 9e       	mul	r12, r19
    cb94:	90 0d       	add	r25, r0
    cb96:	d2 9e       	mul	r13, r18
    cb98:	90 0d       	add	r25, r0
    cb9a:	11 24       	eor	r1, r1
    cb9c:	fc 01       	movw	r30, r24
    cb9e:	e2 55       	subi	r30, 0x52	; 82
    cba0:	fa 4f       	sbci	r31, 0xFA	; 250
    cba2:	ea 0f       	add	r30, r26
    cba4:	fb 1f       	adc	r31, r27
    cba6:	14 8e       	std	Z+28, r1	; 0x1c
			 RecPumpData[FIPAddr].Grade=PGrade;
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
    cba8:	fe 01       	movw	r30, r28
    cbaa:	7d 96       	adiw	r30, 0x1d	; 29
    cbac:	df 01       	movw	r26, r30
    cbae:	0d 90       	ld	r0, X+
    cbb0:	00 20       	and	r0, r0
    cbb2:	e9 f7       	brne	.-6      	; 0xcbae <StoreStandaloneTransData+0x2bc>
    cbb4:	11 97       	sbiw	r26, 0x01	; 1
    cbb6:	ae 1b       	sub	r26, r30
    cbb8:	bf 0b       	sbc	r27, r31
    cbba:	9c 01       	movw	r18, r24
    cbbc:	2f 52       	subi	r18, 0x2F	; 47
    cbbe:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cbc0:	af 01       	movw	r20, r30
    cbc2:	4a 0f       	add	r20, r26
    cbc4:	5b 1f       	adc	r21, r27
    cbc6:	06 c0       	rjmp	.+12     	; 0xcbd4 <StoreStandaloneTransData+0x2e2>
	    Dest[i]=Source[IdxSource+i];
    cbc8:	f4 01       	movw	r30, r8
    cbca:	81 91       	ld	r24, Z+
    cbcc:	4f 01       	movw	r8, r30
    cbce:	f9 01       	movw	r30, r18
    cbd0:	81 93       	st	Z+, r24
    cbd2:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cbd4:	84 16       	cp	r8, r20
    cbd6:	95 06       	cpc	r9, r21
    cbd8:	b9 f7       	brne	.-18     	; 0xcbc8 <StoreStandaloneTransData+0x2d6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cbda:	85 e3       	ldi	r24, 0x35	; 53
    cbdc:	90 e0       	ldi	r25, 0x00	; 0
    cbde:	9c 01       	movw	r18, r24
    cbe0:	c2 9e       	mul	r12, r18
    cbe2:	c0 01       	movw	r24, r0
    cbe4:	c3 9e       	mul	r12, r19
    cbe6:	90 0d       	add	r25, r0
    cbe8:	d2 9e       	mul	r13, r18
    cbea:	90 0d       	add	r25, r0
    cbec:	11 24       	eor	r1, r1
    cbee:	fc 01       	movw	r30, r24
    cbf0:	e2 55       	subi	r30, 0x52	; 82
    cbf2:	fa 4f       	sbci	r31, 0xFA	; 250
    cbf4:	ea 0f       	add	r30, r26
    cbf6:	fb 1f       	adc	r31, r27
    cbf8:	13 a2       	std	Z+35, r1	; 0x23
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));
    cbfa:	fe 01       	movw	r30, r28
    cbfc:	b7 96       	adiw	r30, 0x27	; 39
    cbfe:	df 01       	movw	r26, r30
    cc00:	0d 90       	ld	r0, X+
    cc02:	00 20       	and	r0, r0
    cc04:	e9 f7       	brne	.-6      	; 0xcc00 <StoreStandaloneTransData+0x30e>
    cc06:	11 97       	sbiw	r26, 0x01	; 1
    cc08:	ae 1b       	sub	r26, r30
    cc0a:	bf 0b       	sbc	r27, r31
    cc0c:	9c 01       	movw	r18, r24
    cc0e:	26 52       	subi	r18, 0x26	; 38
    cc10:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc12:	af 01       	movw	r20, r30
    cc14:	4a 0f       	add	r20, r26
    cc16:	5b 1f       	adc	r21, r27
    cc18:	06 c0       	rjmp	.+12     	; 0xcc26 <StoreStandaloneTransData+0x334>
	    Dest[i]=Source[IdxSource+i];
    cc1a:	f3 01       	movw	r30, r6
    cc1c:	81 91       	ld	r24, Z+
    cc1e:	3f 01       	movw	r6, r30
    cc20:	f9 01       	movw	r30, r18
    cc22:	81 93       	st	Z+, r24
    cc24:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc26:	64 16       	cp	r6, r20
    cc28:	75 06       	cpc	r7, r21
    cc2a:	b9 f7       	brne	.-18     	; 0xcc1a <StoreStandaloneTransData+0x328>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cc2c:	85 e3       	ldi	r24, 0x35	; 53
    cc2e:	90 e0       	ldi	r25, 0x00	; 0
    cc30:	c8 9e       	mul	r12, r24
    cc32:	f0 01       	movw	r30, r0
    cc34:	c9 9e       	mul	r12, r25
    cc36:	f0 0d       	add	r31, r0
    cc38:	d8 9e       	mul	r13, r24
    cc3a:	f0 0d       	add	r31, r0
    cc3c:	11 24       	eor	r1, r1
    cc3e:	e2 55       	subi	r30, 0x52	; 82
    cc40:	fa 4f       	sbci	r31, 0xFA	; 250
    cc42:	ea 0f       	add	r30, r26
    cc44:	fb 1f       	adc	r31, r27
    cc46:	14 a6       	std	Z+44, r1	; 0x2c
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));

			 UpdateStandaloneStatus((iPumpID&0x0F),PS_PRINT_READY);
    cc48:	85 2d       	mov	r24, r5
    cc4a:	8f 70       	andi	r24, 0x0F	; 15
    cc4c:	60 e1       	ldi	r22, 0x10	; 16
    cc4e:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
			 
			 SetIncomingTransStatus(iPumpID,TS_NEW);		 
    cc52:	85 2d       	mov	r24, r5
    cc54:	62 e0       	ldi	r22, 0x02	; 2
    cc56:	0e 94 c8 1a 	call	0x3590	; 0x3590 <SetIncomingTransStatus>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
    cc5a:	8b e0       	ldi	r24, 0x0B	; 11
    cc5c:	65 2d       	mov	r22, r5
    cc5e:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
    cc62:	7b c0       	rjmp	.+246    	; 0xcd5a <StoreStandaloneTransData+0x468>
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
		 }
		 else 
		 if (TransactionStatus=TS_NEW){ 
			 //Update ReprintReady
			 ReprintReady[FIPAddr]=True;//Ready for Printing
    cc64:	da 94       	dec	r13
    cc66:	cd 2c       	mov	r12, r13
    cc68:	dd 24       	eor	r13, r13
    cc6a:	f6 01       	movw	r30, r12
    cc6c:	ed 5e       	subi	r30, 0xED	; 237
    cc6e:	fe 4f       	sbci	r31, 0xFE	; 254
    cc70:	81 e0       	ldi	r24, 0x01	; 1
    cc72:	80 83       	st	Z, r24
			 //FormatMoney(strPMoney);
			 //FormatVolume(strPVolume);

			 //uart_print(1,1,strPVolume);
			 
			 GenerateTransactionNum(strTranNo);		 
    cc74:	0d e8       	ldi	r16, 0x8D	; 141
    cc76:	1c e0       	ldi	r17, 0x0C	; 12
    cc78:	c8 01       	movw	r24, r16
    cc7a:	0e 94 0b 3f 	call	0x7e16	; 0x7e16 <GenerateTransactionNum>
			 sprintf_P(strTransDate,PSTR("%s"),strSystemDate);
    cc7e:	00 d0       	rcall	.+0      	; 0xcc80 <StoreStandaloneTransData+0x38e>
    cc80:	00 d0       	rcall	.+0      	; 0xcc82 <StoreStandaloneTransData+0x390>
    cc82:	00 d0       	rcall	.+0      	; 0xcc84 <StoreStandaloneTransData+0x392>
    cc84:	ed b7       	in	r30, 0x3d	; 61
    cc86:	fe b7       	in	r31, 0x3e	; 62
    cc88:	31 96       	adiw	r30, 0x01	; 1
    cc8a:	ce 01       	movw	r24, r28
    cc8c:	0b 96       	adiw	r24, 0x0b	; 11
    cc8e:	ad b7       	in	r26, 0x3d	; 61
    cc90:	be b7       	in	r27, 0x3e	; 62
    cc92:	12 96       	adiw	r26, 0x02	; 2
    cc94:	9c 93       	st	X, r25
    cc96:	8e 93       	st	-X, r24
    cc98:	11 97       	sbiw	r26, 0x01	; 1
    cc9a:	8c e4       	ldi	r24, 0x4C	; 76
    cc9c:	94 e2       	ldi	r25, 0x24	; 36
    cc9e:	93 83       	std	Z+3, r25	; 0x03
    cca0:	82 83       	std	Z+2, r24	; 0x02
    cca2:	80 ec       	ldi	r24, 0xC0	; 192
    cca4:	93 e0       	ldi	r25, 0x03	; 3
    cca6:	95 83       	std	Z+5, r25	; 0x05
    cca8:	84 83       	std	Z+4, r24	; 0x04
    ccaa:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
    ccae:	ed b7       	in	r30, 0x3d	; 61
    ccb0:	fe b7       	in	r31, 0x3e	; 62
    ccb2:	31 96       	adiw	r30, 0x01	; 1
    ccb4:	ce 01       	movw	r24, r28
    ccb6:	44 96       	adiw	r24, 0x14	; 20
    ccb8:	ad b7       	in	r26, 0x3d	; 61
    ccba:	be b7       	in	r27, 0x3e	; 62
    ccbc:	12 96       	adiw	r26, 0x02	; 2
    ccbe:	9c 93       	st	X, r25
    ccc0:	8e 93       	st	-X, r24
    ccc2:	11 97       	sbiw	r26, 0x01	; 1
    ccc4:	89 e4       	ldi	r24, 0x49	; 73
    ccc6:	94 e2       	ldi	r25, 0x24	; 36
    ccc8:	93 83       	std	Z+3, r25	; 0x03
    ccca:	82 83       	std	Z+2, r24	; 0x02
    cccc:	8a e7       	ldi	r24, 0x7A	; 122
    ccce:	98 e0       	ldi	r25, 0x08	; 8
    ccd0:	95 83       	std	Z+5, r25	; 0x05
    ccd2:	84 83       	std	Z+4, r24	; 0x04
    ccd4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    ccd8:	ed b7       	in	r30, 0x3d	; 61
    ccda:	fe b7       	in	r31, 0x3e	; 62
    ccdc:	36 96       	adiw	r30, 0x06	; 6
    ccde:	0f b6       	in	r0, 0x3f	; 63
    cce0:	f8 94       	cli
    cce2:	fe bf       	out	0x3e, r31	; 62
    cce4:	0f be       	out	0x3f, r0	; 63
    cce6:	ed bf       	out	0x3d, r30	; 61
    cce8:	84 e4       	ldi	r24, 0x44	; 68
    ccea:	91 e0       	ldi	r25, 0x01	; 1
    ccec:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    ccf0:	00 d0       	rcall	.+0      	; 0xccf2 <StoreStandaloneTransData+0x400>
    ccf2:	00 d0       	rcall	.+0      	; 0xccf4 <StoreStandaloneTransData+0x402>
    ccf4:	00 d0       	rcall	.+0      	; 0xccf6 <StoreStandaloneTransData+0x404>
    ccf6:	ed b7       	in	r30, 0x3d	; 61
    ccf8:	fe b7       	in	r31, 0x3e	; 62
    ccfa:	31 96       	adiw	r30, 0x01	; 1
    ccfc:	2e e6       	ldi	r18, 0x6E	; 110
    ccfe:	3c e0       	ldi	r19, 0x0C	; 12
    cd00:	ad b7       	in	r26, 0x3d	; 61
    cd02:	be b7       	in	r27, 0x3e	; 62
    cd04:	12 96       	adiw	r26, 0x02	; 2
    cd06:	3c 93       	st	X, r19
    cd08:	2e 93       	st	-X, r18
    cd0a:	11 97       	sbiw	r26, 0x01	; 1
    cd0c:	26 e4       	ldi	r18, 0x46	; 70
    cd0e:	34 e2       	ldi	r19, 0x24	; 36
    cd10:	33 83       	std	Z+3, r19	; 0x03
    cd12:	22 83       	std	Z+2, r18	; 0x02
    cd14:	84 83       	std	Z+4, r24	; 0x04
    cd16:	15 82       	std	Z+5, r1	; 0x05
    cd18:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
    cd1c:	d8 01       	movw	r26, r16
    cd1e:	0d 90       	ld	r0, X+
    cd20:	00 20       	and	r0, r0
    cd22:	e9 f7       	brne	.-6      	; 0xcd1e <StoreStandaloneTransData+0x42c>
    cd24:	11 97       	sbiw	r26, 0x01	; 1
    cd26:	a0 1b       	sub	r26, r16
    cd28:	b1 0b       	sbc	r27, r17
    cd2a:	98 01       	movw	r18, r16
    cd2c:	85 e3       	ldi	r24, 0x35	; 53
    cd2e:	90 e0       	ldi	r25, 0x00	; 0
    cd30:	c8 9e       	mul	r12, r24
    cd32:	b0 01       	movw	r22, r0
    cd34:	c9 9e       	mul	r12, r25
    cd36:	70 0d       	add	r23, r0
    cd38:	d8 9e       	mul	r13, r24
    cd3a:	70 0d       	add	r23, r0
    cd3c:	11 24       	eor	r1, r1
    cd3e:	6f 54       	subi	r22, 0x4F	; 79
    cd40:	7a 4f       	sbci	r23, 0xFA	; 250
    cd42:	ed b7       	in	r30, 0x3d	; 61
    cd44:	fe b7       	in	r31, 0x3e	; 62
    cd46:	36 96       	adiw	r30, 0x06	; 6
    cd48:	0f b6       	in	r0, 0x3f	; 63
    cd4a:	f8 94       	cli
    cd4c:	fe bf       	out	0x3e, r31	; 62
    cd4e:	0f be       	out	0x3f, r0	; 63
    cd50:	ed bf       	out	0x3d, r30	; 61
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cd52:	ad 01       	movw	r20, r26
    cd54:	40 0f       	add	r20, r16
    cd56:	51 1f       	adc	r21, r17
    cd58:	8a ce       	rjmp	.-748    	; 0xca6e <StoreStandaloneTransData+0x17c>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
		 }		 
	 }    
     //uart_print(0,1,strRawTransData);
}
    cd5a:	e0 96       	adiw	r28, 0x30	; 48
    cd5c:	0f b6       	in	r0, 0x3f	; 63
    cd5e:	f8 94       	cli
    cd60:	de bf       	out	0x3e, r29	; 62
    cd62:	0f be       	out	0x3f, r0	; 63
    cd64:	cd bf       	out	0x3d, r28	; 61
    cd66:	cf 91       	pop	r28
    cd68:	df 91       	pop	r29
    cd6a:	1f 91       	pop	r17
    cd6c:	0f 91       	pop	r16
    cd6e:	ff 90       	pop	r15
    cd70:	ef 90       	pop	r14
    cd72:	df 90       	pop	r13
    cd74:	cf 90       	pop	r12
    cd76:	bf 90       	pop	r11
    cd78:	af 90       	pop	r10
    cd7a:	9f 90       	pop	r9
    cd7c:	8f 90       	pop	r8
    cd7e:	7f 90       	pop	r7
    cd80:	6f 90       	pop	r6
    cd82:	5f 90       	pop	r5
    cd84:	4f 90       	pop	r4
    cd86:	3f 90       	pop	r3
    cd88:	08 95       	ret

0000cd8a <StoreStandaloneTotalizerData>:
	  systemEDC();
	  systemConfigProtocol();
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}

void StoreStandaloneTotalizerData(char *strRawTransData){//Sending FlowSPI_Protocol <STX>   [MsgID][PumpID][Volume1][Amount1][Volume2][Amount2][Volume3][Amount3][Volume4][Amount4][Volume5][Amount5][Volume6][Amount6]<ETX>
    cd8a:	3f 92       	push	r3
    cd8c:	4f 92       	push	r4
    cd8e:	5f 92       	push	r5
    cd90:	6f 92       	push	r6
    cd92:	7f 92       	push	r7
    cd94:	8f 92       	push	r8
    cd96:	9f 92       	push	r9
    cd98:	af 92       	push	r10
    cd9a:	bf 92       	push	r11
    cd9c:	cf 92       	push	r12
    cd9e:	df 92       	push	r13
    cda0:	ef 92       	push	r14
    cda2:	ff 92       	push	r15
    cda4:	0f 93       	push	r16
    cda6:	1f 93       	push	r17
    cda8:	df 93       	push	r29
    cdaa:	cf 93       	push	r28
    cdac:	cd b7       	in	r28, 0x3d	; 61
    cdae:	de b7       	in	r29, 0x3e	; 62
    cdb0:	a5 97       	sbiw	r28, 0x25	; 37
    cdb2:	0f b6       	in	r0, 0x3f	; 63
    cdb4:	f8 94       	cli
    cdb6:	de bf       	out	0x3e, r29	; 62
    cdb8:	0f be       	out	0x3f, r0	; 63
    cdba:	cd bf       	out	0x3d, r28	; 61
    cdbc:	5c 01       	movw	r10, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cdbe:	fc 01       	movw	r30, r24
    cdc0:	82 81       	ldd	r24, Z+2	; 0x02
    cdc2:	89 83       	std	Y+1, r24	; 0x01
    cdc4:	83 81       	ldd	r24, Z+3	; 0x03
    cdc6:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    cdc8:	1b 82       	std	Y+3, r1	; 0x03
	 //    uart(1,1,strRawTransData[i]); 
	 // }

     StrPosCopy(strRawTransData,strPumpID,2,2);
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
    cdca:	ce 01       	movw	r24, r28
    cdcc:	01 96       	adiw	r24, 0x01	; 1
    cdce:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
    cdd2:	88 2e       	mov	r8, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    cdd4:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
	 if (FIPAddr>0){
    cdd8:	88 23       	and	r24, r24
    cdda:	09 f4       	brne	.+2      	; 0xcdde <StoreStandaloneTotalizerData+0x54>
    cddc:	56 c0       	rjmp	.+172    	; 0xce8a <StoreStandaloneTotalizerData+0x100>
	     FIPAddr=FIPAddr-1;
    cdde:	38 2e       	mov	r3, r24
    cde0:	3a 94       	dec	r3
    cde2:	34 e0       	ldi	r19, 0x04	; 4
    cde4:	c3 2e       	mov	r12, r19
    cde6:	d1 2c       	mov	r13, r1
    cde8:	ca 0c       	add	r12, r10
    cdea:	db 1c       	adc	r13, r11
    cdec:	99 24       	eor	r9, r9
    cdee:	93 94       	inc	r9
    cdf0:	2d ef       	ldi	r18, 0xFD	; 253
    cdf2:	e2 2e       	mov	r14, r18
    cdf4:	2f ef       	ldi	r18, 0xFF	; 255
    cdf6:	f2 2e       	mov	r15, r18
    cdf8:	94 e0       	ldi	r25, 0x04	; 4
    cdfa:	49 2e       	mov	r4, r25
    cdfc:	51 2c       	mov	r5, r1
    cdfe:	4c 0e       	add	r4, r28
    ce00:	5d 1e       	adc	r5, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ce02:	ce 01       	movw	r24, r28
    ce04:	40 96       	adiw	r24, 0x10	; 16
    ce06:	9b a3       	std	Y+35, r25	; 0x23
    ce08:	8a a3       	std	Y+34, r24	; 0x22
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ce0a:	83 e1       	ldi	r24, 0x13	; 19
    ce0c:	68 2e       	mov	r6, r24
    ce0e:	71 2c       	mov	r7, r1
    ce10:	6c 0e       	add	r6, r28
    ce12:	7d 1e       	adc	r7, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ce14:	fe 01       	movw	r30, r28
    ce16:	7f 96       	adiw	r30, 0x1f	; 31
    ce18:	fd a3       	std	Y+37, r31	; 0x25
    ce1a:	ec a3       	std	Y+36, r30	; 0x24
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
    ce1c:	f2 01       	movw	r30, r4
    ce1e:	d6 01       	movw	r26, r12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    ce20:	8d 91       	ld	r24, X+
    ce22:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ce24:	8a a1       	ldd	r24, Y+34	; 0x22
    ce26:	9b a1       	ldd	r25, Y+35	; 0x23
    ce28:	e8 17       	cp	r30, r24
    ce2a:	f9 07       	cpc	r31, r25
    ce2c:	c9 f7       	brne	.-14     	; 0xce20 <StoreStandaloneTotalizerData+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ce2e:	18 8a       	std	Y+16, r1	; 0x10
    ce30:	d7 01       	movw	r26, r14
    ce32:	a0 95       	com	r26
    ce34:	b0 95       	com	r27
    ce36:	03 e0       	ldi	r16, 0x03	; 3
    ce38:	aa 0f       	add	r26, r26
    ce3a:	bb 1f       	adc	r27, r27
    ce3c:	0a 95       	dec	r16
    ce3e:	e1 f7       	brne	.-8      	; 0xce38 <StoreStandaloneTotalizerData+0xae>
    ce40:	aa 0d       	add	r26, r10
    ce42:	bb 1d       	adc	r27, r11
    ce44:	f3 01       	movw	r30, r6
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    ce46:	8d 91       	ld	r24, X+
    ce48:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ce4a:	8c a1       	ldd	r24, Y+36	; 0x24
    ce4c:	9d a1       	ldd	r25, Y+37	; 0x25
    ce4e:	e8 17       	cp	r30, r24
    ce50:	f9 07       	cpc	r31, r25
    ce52:	c9 f7       	brne	.-14     	; 0xce46 <StoreStandaloneTotalizerData+0xbc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ce54:	1f 8e       	std	Y+31, r1	; 0x1f

		 for (iGrade=1;iGrade<=6;iGrade++){          
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
			  
			  SetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strGVolume);
    ce56:	80 e0       	ldi	r24, 0x00	; 0
    ce58:	61 e0       	ldi	r22, 0x01	; 1
    ce5a:	43 2d       	mov	r20, r3
    ce5c:	29 2d       	mov	r18, r9
    ce5e:	82 01       	movw	r16, r4
    ce60:	0e 94 e5 27 	call	0x4fca	; 0x4fca <SetTotalizerData>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
    ce64:	81 e0       	ldi	r24, 0x01	; 1
    ce66:	61 e0       	ldi	r22, 0x01	; 1
    ce68:	43 2d       	mov	r20, r3
    ce6a:	29 2d       	mov	r18, r9
    ce6c:	83 01       	movw	r16, r6
    ce6e:	0e 94 e5 27 	call	0x4fca	; 0x4fca <SetTotalizerData>
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
    ce72:	93 94       	inc	r9
    ce74:	ed ef       	ldi	r30, 0xFD	; 253
    ce76:	ff ef       	ldi	r31, 0xFF	; 255
    ce78:	ee 0e       	add	r14, r30
    ce7a:	ff 1e       	adc	r15, r31
    ce7c:	88 e1       	ldi	r24, 0x18	; 24
    ce7e:	90 e0       	ldi	r25, 0x00	; 0
    ce80:	c8 0e       	add	r12, r24
    ce82:	d9 1e       	adc	r13, r25
    ce84:	97 e0       	ldi	r25, 0x07	; 7
    ce86:	99 16       	cp	r9, r25
    ce88:	49 f6       	brne	.-110    	; 0xce1c <StoreStandaloneTotalizerData+0x92>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
			  //sprintf_P(strSend,PSTR("Nozzle:%d Volume:%s Money:%s"),iGrade,strGVolume,strGMoney);
			  //uart_print(0,1,strSend);
		 }	
	}
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
    ce8a:	8d e0       	ldi	r24, 0x0D	; 13
    ce8c:	68 2d       	mov	r22, r8
    ce8e:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
    ce92:	88 2d       	mov	r24, r8
    ce94:	8f 70       	andi	r24, 0x0F	; 15
    ce96:	64 e1       	ldi	r22, 0x14	; 20
    ce98:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
}
    ce9c:	a5 96       	adiw	r28, 0x25	; 37
    ce9e:	0f b6       	in	r0, 0x3f	; 63
    cea0:	f8 94       	cli
    cea2:	de bf       	out	0x3e, r29	; 62
    cea4:	0f be       	out	0x3f, r0	; 63
    cea6:	cd bf       	out	0x3d, r28	; 61
    cea8:	cf 91       	pop	r28
    ceaa:	df 91       	pop	r29
    ceac:	1f 91       	pop	r17
    ceae:	0f 91       	pop	r16
    ceb0:	ff 90       	pop	r15
    ceb2:	ef 90       	pop	r14
    ceb4:	df 90       	pop	r13
    ceb6:	cf 90       	pop	r12
    ceb8:	bf 90       	pop	r11
    ceba:	af 90       	pop	r10
    cebc:	9f 90       	pop	r9
    cebe:	8f 90       	pop	r8
    cec0:	7f 90       	pop	r7
    cec2:	6f 90       	pop	r6
    cec4:	5f 90       	pop	r5
    cec6:	4f 90       	pop	r4
    cec8:	3f 90       	pop	r3
    ceca:	08 95       	ret

0000cecc <ScanStandaloneFlow>:
	 _spi(SlaveMessage);
	 _spi(0x06);
	 systemSlave();
}

void ScanStandaloneFlow(char data){  //<STX>[PumpID][STA]<ETX> --> 0x07 0xF1 0xF2 0x08
    cecc:	0f 93       	push	r16
    cece:	1f 93       	push	r17
    ced0:	08 2f       	mov	r16, r24

      DataPumpID=0;
      DataPumpStatus=0;
	  MixData=0;
      //Shift data
      zDataFlow[4]=zDataFlow[3];
    ced2:	80 91 ae 02 	lds	r24, 0x02AE
    ced6:	80 93 af 02 	sts	0x02AF, r24
	  zDataFlow[3]=zDataFlow[2];
    ceda:	80 91 ad 02 	lds	r24, 0x02AD
    cede:	80 93 ae 02 	sts	0x02AE, r24
	  zDataFlow[2]=zDataFlow[1];
    cee2:	80 91 ac 02 	lds	r24, 0x02AC
    cee6:	80 93 ad 02 	sts	0x02AD, r24
      zDataFlow[1]=zDataFlow[0];
    ceea:	90 91 ab 02 	lds	r25, 0x02AB
    ceee:	90 93 ac 02 	sts	0x02AC, r25
      zDataFlow[0]=data;
    cef2:	00 93 ab 02 	sts	0x02AB, r16

      //Scan UpdatedPumpStatus Flow
	  //<STX>[ID][STA]<ETX>: 0x07[ID STA]0x08
	  if((zDataFlow[2]==0x07)&&(zDataFlow[0]==0x08)){
    cef6:	87 30       	cpi	r24, 0x07	; 7
    cef8:	79 f4       	brne	.+30     	; 0xcf18 <ScanStandaloneFlow+0x4c>
    cefa:	08 30       	cpi	r16, 0x08	; 8
    cefc:	69 f4       	brne	.+26     	; 0xcf18 <ScanStandaloneFlow+0x4c>
          MixData=zDataFlow[1];
	      DataPumpID=((MixData&0xF0)>>4);
		  DataPumpStatus=(MixData&0x0F);
    cefe:	19 2f       	mov	r17, r25
    cf00:	1f 70       	andi	r17, 0x0F	; 15
		  UpdateStandaloneStatus(DataPumpID,DataPumpStatus);
    cf02:	89 2f       	mov	r24, r25
    cf04:	82 95       	swap	r24
    cf06:	8f 70       	andi	r24, 0x0F	; 15
    cf08:	61 2f       	mov	r22, r17
    cf0a:	0e 94 40 20 	call	0x4080	; 0x4080 <UpdateStandaloneStatus>
		  if (DataPumpStatus!=PUMP_NONE)IsStandAloneDetected=True;
    cf0e:	1e 30       	cpi	r17, 0x0E	; 14
    cf10:	19 f0       	breq	.+6      	; 0xcf18 <ScanStandaloneFlow+0x4c>
    cf12:	81 e0       	ldi	r24, 0x01	; 1
    cf14:	80 93 9e 01 	sts	0x019E, r24
		  //sprintf_P(strSend,PSTR("PS:%d Id:%d"),MixData,DataPumpID);
		  //uart_print(0,1,strSend);
	  }

	  //Scan Transaction Completion FEOT
	  if (IsStandaloneTrans==True){
    cf18:	80 91 9f 01 	lds	r24, 0x019F
    cf1c:	81 30       	cpi	r24, 0x01	; 1
    cf1e:	69 f4       	brne	.+26     	; 0xcf3a <ScanStandaloneFlow+0x6e>
	      strStandReceived[iFlow]=data;
    cf20:	80 91 a9 02 	lds	r24, 0x02A9
    cf24:	90 91 aa 02 	lds	r25, 0x02AA
    cf28:	fc 01       	movw	r30, r24
    cf2a:	e4 5f       	subi	r30, 0xF4	; 244
    cf2c:	fc 4f       	sbci	r31, 0xFC	; 252
    cf2e:	00 83       	st	Z, r16
		  iFlow++;
    cf30:	01 96       	adiw	r24, 0x01	; 1
    cf32:	90 93 aa 02 	sts	0x02AA, r25
    cf36:	80 93 a9 02 	sts	0x02A9, r24
	  }
	  if((zDataFlow[1]==0x05)&&(zDataFlow[0]==0x50)){
    cf3a:	80 91 ac 02 	lds	r24, 0x02AC
    cf3e:	85 30       	cpi	r24, 0x05	; 5
    cf40:	61 f4       	brne	.+24     	; 0xcf5a <ScanStandaloneFlow+0x8e>
    cf42:	80 91 ab 02 	lds	r24, 0x02AB
    cf46:	80 35       	cpi	r24, 0x50	; 80
    cf48:	41 f5       	brne	.+80     	; 0xcf9a <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=True;
    cf4a:	81 e0       	ldi	r24, 0x01	; 1
    cf4c:	80 93 9f 01 	sts	0x019F, r24
		  iFlow=0;
    cf50:	10 92 aa 02 	sts	0x02AA, r1
    cf54:	10 92 a9 02 	sts	0x02A9, r1
    cf58:	20 c0       	rjmp	.+64     	; 0xcf9a <ScanStandaloneFlow+0xce>
	  }
	  if((zDataFlow[1]==0x06)&&(zDataFlow[0]==0x60)){
    cf5a:	86 30       	cpi	r24, 0x06	; 6
    cf5c:	f1 f4       	brne	.+60     	; 0xcf9a <ScanStandaloneFlow+0xce>
    cf5e:	80 91 ab 02 	lds	r24, 0x02AB
    cf62:	80 36       	cpi	r24, 0x60	; 96
    cf64:	d1 f4       	brne	.+52     	; 0xcf9a <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=False;
    cf66:	10 92 9f 01 	sts	0x019F, r1
	      strStandReceived[iFlow]=0;
    cf6a:	e0 91 a9 02 	lds	r30, 0x02A9
    cf6e:	f0 91 aa 02 	lds	r31, 0x02AA
    cf72:	e4 5f       	subi	r30, 0xF4	; 244
    cf74:	fc 4f       	sbci	r31, 0xFC	; 252
    cf76:	10 82       	st	Z, r1

		  //uart_print(1,1,strStandReceived);

		  MsgIDx=GetMessageID(strStandReceived);
    cf78:	8c e0       	ldi	r24, 0x0C	; 12
    cf7a:	93 e0       	ldi	r25, 0x03	; 3
    cf7c:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <GetMessageID>
          if (MsgIDx==0x01)StoreStandaloneTransData(strStandReceived);
    cf80:	81 30       	cpi	r24, 0x01	; 1
    cf82:	29 f4       	brne	.+10     	; 0xcf8e <ScanStandaloneFlow+0xc2>
    cf84:	8c e0       	ldi	r24, 0x0C	; 12
    cf86:	93 e0       	ldi	r25, 0x03	; 3
    cf88:	0e 94 79 64 	call	0xc8f2	; 0xc8f2 <StoreStandaloneTransData>
    cf8c:	06 c0       	rjmp	.+12     	; 0xcf9a <ScanStandaloneFlow+0xce>
		  else
          if (MsgIDx==0x02)StoreStandaloneTotalizerData(strStandReceived);
    cf8e:	82 30       	cpi	r24, 0x02	; 2
    cf90:	21 f4       	brne	.+8      	; 0xcf9a <ScanStandaloneFlow+0xce>
    cf92:	8c e0       	ldi	r24, 0x0C	; 12
    cf94:	93 e0       	ldi	r25, 0x03	; 3
    cf96:	0e 94 c5 66 	call	0xcd8a	; 0xcd8a <StoreStandaloneTotalizerData>
	  }
	  //AcknoledgeCommand
	  if ((zDataFlow[3]==0x09)&&(zDataFlow[0]==0x0A)){
    cf9a:	80 91 ae 02 	lds	r24, 0x02AE
    cf9e:	89 30       	cpi	r24, 0x09	; 9
    cfa0:	c1 f5       	brne	.+112    	; 0xd012 <ScanStandaloneFlow+0x146>
    cfa2:	80 91 ab 02 	lds	r24, 0x02AB
    cfa6:	8a 30       	cpi	r24, 0x0A	; 10
    cfa8:	a1 f5       	brne	.+104    	; 0xd012 <ScanStandaloneFlow+0x146>
	      
	      AcknoledgePump=zDataFlow[1];
    cfaa:	90 91 ac 02 	lds	r25, 0x02AC
    cfae:	90 93 f2 0b 	sts	0x0BF2, r25
	      AcknoledgeCommand=zDataFlow[2];	  
    cfb2:	80 91 ad 02 	lds	r24, 0x02AD
    cfb6:	80 93 a3 05 	sts	0x05A3, r24
		  switch(AcknoledgeCommand){
    cfba:	89 31       	cpi	r24, 0x19	; 25
    cfbc:	51 f0       	breq	.+20     	; 0xcfd2 <ScanStandaloneFlow+0x106>
    cfbe:	8a 31       	cpi	r24, 0x1A	; 26
    cfc0:	18 f4       	brcc	.+6      	; 0xcfc8 <ScanStandaloneFlow+0xfc>
    cfc2:	85 30       	cpi	r24, 0x05	; 5
    cfc4:	19 f5       	brne	.+70     	; 0xd00c <ScanStandaloneFlow+0x140>
    cfc6:	17 c0       	rjmp	.+46     	; 0xcff6 <ScanStandaloneFlow+0x12a>
    cfc8:	8a 31       	cpi	r24, 0x1A	; 26
    cfca:	c9 f0       	breq	.+50     	; 0xcffe <ScanStandaloneFlow+0x132>
    cfcc:	8c 31       	cpi	r24, 0x1C	; 28
    cfce:	f1 f4       	brne	.+60     	; 0xd00c <ScanStandaloneFlow+0x140>
    cfd0:	1a c0       	rjmp	.+52     	; 0xd006 <ScanStandaloneFlow+0x13a>
		  case SC_LIVE_SEQUENCE:
		       iSequencePooling=AcknoledgePump;
    cfd2:	90 93 80 01 	sts	0x0180, r25
			   IsNewPoolingSequence=True;
    cfd6:	81 e0       	ldi	r24, 0x01	; 1
    cfd8:	80 93 81 01 	sts	0x0181, r24
			   //SendPoolingCommand()
			   if (IsControlPooling==True){
    cfdc:	80 91 84 01 	lds	r24, 0x0184
    cfe0:	81 30       	cpi	r24, 0x01	; 1
    cfe2:	a1 f4       	brne	.+40     	; 0xd00c <ScanStandaloneFlow+0x140>
			       IsControlPooling=False;
    cfe4:	10 92 84 01 	sts	0x0184, r1
				   SendSlaveCommand(PoolCmd,PoolMsg);
    cfe8:	80 91 ad 05 	lds	r24, 0x05AD
    cfec:	60 91 d9 0b 	lds	r22, 0x0BD9
    cff0:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
    cff4:	0b c0       	rjmp	.+22     	; 0xd00c <ScanStandaloneFlow+0x140>
                }
		       break;
          case SC_TOTALIZER:
		       IsTotalizerReceived=True;
    cff6:	81 e0       	ldi	r24, 0x01	; 1
    cff8:	80 93 b1 01 	sts	0x01B1, r24
    cffc:	07 c0       	rjmp	.+14     	; 0xd00c <ScanStandaloneFlow+0x140>
		       break;
		  case SC_POOL_RESTARTED:
		       IsPoolingRestarted=True;
    cffe:	81 e0       	ldi	r24, 0x01	; 1
    d000:	80 93 83 01 	sts	0x0183, r24
    d004:	03 c0       	rjmp	.+6      	; 0xd00c <ScanStandaloneFlow+0x140>
		       break;
          case SC_SET_PUMP_TYPE:
		       IsSetPumpType=True;
    d006:	81 e0       	ldi	r24, 0x01	; 1
    d008:	80 93 23 01 	sts	0x0123, r24
		       break;
		  }
       IsStandaloneAcknoledge=True;
    d00c:	81 e0       	ldi	r24, 0x01	; 1
    d00e:	80 93 82 01 	sts	0x0182, r24
	  }
}
    d012:	1f 91       	pop	r17
    d014:	0f 91       	pop	r16
    d016:	08 95       	ret

0000d018 <__vector_17>:
//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}

ISR(SPI_STC_vect){
    d018:	1f 92       	push	r1
    d01a:	0f 92       	push	r0
    d01c:	0f b6       	in	r0, 0x3f	; 63
    d01e:	0f 92       	push	r0
    d020:	0b b6       	in	r0, 0x3b	; 59
    d022:	0f 92       	push	r0
    d024:	11 24       	eor	r1, r1
    d026:	1f 93       	push	r17
    d028:	2f 93       	push	r18
    d02a:	3f 93       	push	r19
    d02c:	4f 93       	push	r20
    d02e:	5f 93       	push	r21
    d030:	6f 93       	push	r22
    d032:	7f 93       	push	r23
    d034:	8f 93       	push	r24
    d036:	9f 93       	push	r25
    d038:	af 93       	push	r26
    d03a:	bf 93       	push	r27
    d03c:	ef 93       	push	r30
    d03e:	ff 93       	push	r31
char dataSPI;
//char Reply=0;
    //uart(0,1,SPDR);
	dataSPI=SPDR;
    d040:	1f b1       	in	r17, 0x0f	; 15
	ScanRFIDFlow(dataSPI);
    d042:	81 2f       	mov	r24, r17
    d044:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <ScanRFIDFlow>
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
    d048:	80 91 00 01 	lds	r24, 0x0100
    d04c:	81 30       	cpi	r24, 0x01	; 1
    d04e:	21 f4       	brne	.+8      	; 0xd058 <__vector_17+0x40>
    d050:	81 2f       	mov	r24, r17
    d052:	0e 94 91 14 	call	0x2922	; 0x2922 <ScanEDCFlow>
    d056:	05 c0       	rjmp	.+10     	; 0xd062 <__vector_17+0x4a>
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
    d058:	82 30       	cpi	r24, 0x02	; 2
    d05a:	19 f4       	brne	.+6      	; 0xd062 <__vector_17+0x4a>
    d05c:	81 2f       	mov	r24, r17
    d05e:	0e 94 66 67 	call	0xcecc	; 0xcecc <ScanStandaloneFlow>
}
    d062:	ff 91       	pop	r31
    d064:	ef 91       	pop	r30
    d066:	bf 91       	pop	r27
    d068:	af 91       	pop	r26
    d06a:	9f 91       	pop	r25
    d06c:	8f 91       	pop	r24
    d06e:	7f 91       	pop	r23
    d070:	6f 91       	pop	r22
    d072:	5f 91       	pop	r21
    d074:	4f 91       	pop	r20
    d076:	3f 91       	pop	r19
    d078:	2f 91       	pop	r18
    d07a:	1f 91       	pop	r17
    d07c:	0f 90       	pop	r0
    d07e:	0b be       	out	0x3b, r0	; 59
    d080:	0f 90       	pop	r0
    d082:	0f be       	out	0x3f, r0	; 63
    d084:	0f 90       	pop	r0
    d086:	1f 90       	pop	r1
    d088:	18 95       	reti

0000d08a <UserInput>:
void ShowMessage(char *Message){//Display Message on Line3
     char i;
}


char UserInput(char TypeUI,char xPos, char yPos,char *strResult, unsigned int MaxValue, char MaxLength){
    d08a:	8f 92       	push	r8
    d08c:	9f 92       	push	r9
    d08e:	af 92       	push	r10
    d090:	bf 92       	push	r11
    d092:	cf 92       	push	r12
    d094:	df 92       	push	r13
    d096:	ef 92       	push	r14
    d098:	ff 92       	push	r15
    d09a:	0f 93       	push	r16
    d09c:	1f 93       	push	r17
    d09e:	cf 93       	push	r28
    d0a0:	df 93       	push	r29
    d0a2:	f8 2e       	mov	r15, r24
    d0a4:	96 2e       	mov	r9, r22
    d0a6:	d4 2e       	mov	r13, r20
    d0a8:	e9 01       	movw	r28, r18
    d0aa:	58 01       	movw	r10, r16
    d0ac:	8e 2c       	mov	r8, r14
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
	 switch(stUserInput){// 100 ->199 500 90
    d0ae:	10 91 82 02 	lds	r17, 0x0282
    d0b2:	12 30       	cpi	r17, 0x02	; 2
    d0b4:	09 f4       	brne	.+2      	; 0xd0b8 <UserInput+0x2e>
    d0b6:	29 c2       	rjmp	.+1106   	; 0xd50a <UserInput+0x480>
    d0b8:	13 30       	cpi	r17, 0x03	; 3
    d0ba:	30 f4       	brcc	.+12     	; 0xd0c8 <UserInput+0x3e>
    d0bc:	11 23       	and	r17, r17
    d0be:	59 f0       	breq	.+22     	; 0xd0d6 <UserInput+0x4c>
    d0c0:	11 30       	cpi	r17, 0x01	; 1
    d0c2:	09 f0       	breq	.+2      	; 0xd0c6 <UserInput+0x3c>
    d0c4:	f2 c2       	rjmp	.+1508   	; 0xd6aa <UserInput+0x620>
    d0c6:	2c c0       	rjmp	.+88     	; 0xd120 <UserInput+0x96>
    d0c8:	13 30       	cpi	r17, 0x03	; 3
    d0ca:	09 f4       	brne	.+2      	; 0xd0ce <UserInput+0x44>
    d0cc:	73 c2       	rjmp	.+1254   	; 0xd5b4 <UserInput+0x52a>
    d0ce:	14 30       	cpi	r17, 0x04	; 4
    d0d0:	09 f0       	breq	.+2      	; 0xd0d4 <UserInput+0x4a>
    d0d2:	eb c2       	rjmp	.+1494   	; 0xd6aa <UserInput+0x620>
    d0d4:	ec c2       	rjmp	.+1496   	; 0xd6ae <UserInput+0x624>
	 case uiInit:
	      iLoop=0;
    d0d6:	10 92 74 02 	sts	0x0274, r1
    d0da:	10 92 73 02 	sts	0x0273, r1
		  stUserInput=uiInput;
		  xChar=xPos;yChar=yPos;
    d0de:	60 93 81 02 	sts	0x0281, r22
    d0e2:	40 93 80 02 	sts	0x0280, r20
          iValuePos=0;
    d0e6:	10 92 7f 02 	sts	0x027F, r1
		  KeyTimeout=0;
    d0ea:	10 92 72 02 	sts	0x0272, r1
    d0ee:	10 92 71 02 	sts	0x0271, r1
		  IsSameKey=False;
    d0f2:	10 92 78 02 	sts	0x0278, r1
		  IsNextKey=False;
    d0f6:	10 92 77 02 	sts	0x0277, r1
		  IsNewKey=False;
    d0fa:	10 92 76 02 	sts	0x0276, r1
		  IsShifted=True;
    d0fe:	91 e0       	ldi	r25, 0x01	; 1
    d100:	90 93 79 02 	sts	0x0279, r25
		  zKeyChar=' ';
    d104:	80 e2       	ldi	r24, 0x20	; 32
    d106:	80 93 7e 02 	sts	0x027E, r24
		  iHit=0;
    d10a:	10 92 7a 02 	sts	0x027A, r1
		  IsFirst=False;
    d10e:	10 92 75 02 	sts	0x0275, r1
		  IsDelete=False;
    d112:	10 92 7b 02 	sts	0x027B, r1
		  Result=USER_NO_DATA;
		  stUserInput=uiInput;
    d116:	90 93 82 02 	sts	0x0282, r25
    d11a:	65 e0       	ldi	r22, 0x05	; 5
    d11c:	e6 2e       	mov	r14, r22
    d11e:	cb c2       	rjmp	.+1430   	; 0xd6b6 <UserInput+0x62c>
	      break;
	 case uiInput:
	      KeyPressed=_key_scan(1);                  //  _  ABC DEF GHI JKL MNO PQRS TUV WXYZ
    d120:	81 e0       	ldi	r24, 0x01	; 1
    d122:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    d126:	c8 2e       	mov	r12, r24
		  KeyChar= _key_btn(KeyPressed);            //  1   2   3   4   5   6   7    8   9
    d128:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    d12c:	e8 2e       	mov	r14, r24
		  if (KeyPressed==_KEY_SHIFT){
    d12e:	2b e7       	ldi	r18, 0x7B	; 123
    d130:	c2 16       	cp	r12, r18
    d132:	59 f4       	brne	.+22     	; 0xd14a <UserInput+0xc0>
		      if (IsShifted==False)IsShifted=True;
    d134:	80 91 79 02 	lds	r24, 0x0279
    d138:	88 23       	and	r24, r24
    d13a:	19 f4       	brne	.+6      	; 0xd142 <UserInput+0xb8>
    d13c:	10 93 79 02 	sts	0x0279, r17
    d140:	04 c0       	rjmp	.+8      	; 0xd14a <UserInput+0xc0>
			  else
		      if (IsShifted==True)IsShifted=False;
    d142:	81 30       	cpi	r24, 0x01	; 1
    d144:	11 f4       	brne	.+4      	; 0xd14a <UserInput+0xc0>
    d146:	10 92 79 02 	sts	0x0279, r1
			  }
          
		  if (IsSameKey==True){
    d14a:	80 91 78 02 	lds	r24, 0x0278
    d14e:	81 30       	cpi	r24, 0x01	; 1
    d150:	e9 f4       	brne	.+58     	; 0xd18c <UserInput+0x102>
		      KeyTimeout++;
    d152:	80 91 71 02 	lds	r24, 0x0271
    d156:	90 91 72 02 	lds	r25, 0x0272
    d15a:	01 96       	adiw	r24, 0x01	; 1
    d15c:	90 93 72 02 	sts	0x0272, r25
    d160:	80 93 71 02 	sts	0x0271, r24
              if (KeyTimeout>1000){
    d164:	89 5e       	subi	r24, 0xE9	; 233
    d166:	93 40       	sbci	r25, 0x03	; 3
    d168:	88 f0       	brcs	.+34     	; 0xd18c <UserInput+0x102>
			      if (TypeUI==UI_ALPHANUM_PASSWORD)lcd_put(xChar,yChar,'*');
    d16a:	f5 e0       	ldi	r31, 0x05	; 5
    d16c:	ff 16       	cp	r15, r31
    d16e:	39 f4       	brne	.+14     	; 0xd17e <UserInput+0xf4>
    d170:	80 91 81 02 	lds	r24, 0x0281
    d174:	60 91 80 02 	lds	r22, 0x0280
    d178:	4a e2       	ldi	r20, 0x2A	; 42
    d17a:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>

		          IsNextKey=True;
    d17e:	81 e0       	ldi	r24, 0x01	; 1
    d180:	80 93 77 02 	sts	0x0277, r24
				  iLoop=0;
    d184:	10 92 74 02 	sts	0x0274, r1
    d188:	10 92 73 02 	sts	0x0273, r1
			     }
              }
            
 
 		  //if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<=MaxLength))||(IsNextKey==True)){
		  if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<MaxLength))||(IsNextKey==True)){
    d18c:	8e 2d       	mov	r24, r14
    d18e:	80 53       	subi	r24, 0x30	; 48
    d190:	8a 30       	cpi	r24, 0x0A	; 10
    d192:	20 f4       	brcc	.+8      	; 0xd19c <UserInput+0x112>
    d194:	80 91 7f 02 	lds	r24, 0x027F
    d198:	88 15       	cp	r24, r8
    d19a:	40 f0       	brcs	.+16     	; 0xd1ac <UserInput+0x122>
    d19c:	80 91 77 02 	lds	r24, 0x0277
    d1a0:	81 30       	cpi	r24, 0x01	; 1
    d1a2:	21 f0       	breq	.+8      	; 0xd1ac <UserInput+0x122>
    d1a4:	ee 24       	eor	r14, r14
    d1a6:	00 e0       	ldi	r16, 0x00	; 0
    d1a8:	10 e0       	ldi	r17, 0x00	; 0
    d1aa:	be c0       	rjmp	.+380    	; 0xd328 <UserInput+0x29e>
    d1ac:	84 e2       	ldi	r24, 0x24	; 36
    d1ae:	94 ef       	ldi	r25, 0xF4	; 244
    d1b0:	01 97       	sbiw	r24, 0x01	; 1
    d1b2:	f1 f7       	brne	.-4      	; 0xd1b0 <UserInput+0x126>
		       _delay_ms(250);
		       strResult[iValuePos]=KeyChar;
    d1b4:	80 91 7f 02 	lds	r24, 0x027F
    d1b8:	fe 01       	movw	r30, r28
    d1ba:	e8 0f       	add	r30, r24
    d1bc:	f1 1d       	adc	r31, r1
    d1be:	e0 82       	st	Z, r14
		       strResult[iValuePos+1]=0;
    d1c0:	11 82       	std	Z+1, r1	; 0x01

			   if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)) 
    d1c2:	8f 2d       	mov	r24, r15
    d1c4:	81 50       	subi	r24, 0x01	; 1
    d1c6:	82 30       	cpi	r24, 0x02	; 2
    d1c8:	30 f0       	brcs	.+12     	; 0xd1d6 <UserInput+0x14c>
    d1ca:	24 e0       	ldi	r18, 0x04	; 4
    d1cc:	f2 16       	cp	r15, r18
    d1ce:	19 f0       	breq	.+6      	; 0xd1d6 <UserInput+0x14c>
    d1d0:	00 e0       	ldi	r16, 0x00	; 0
    d1d2:	10 e0       	ldi	r17, 0x00	; 0
    d1d4:	04 c0       	rjmp	.+8      	; 0xd1de <UserInput+0x154>
			        NumbValue=atoi(strResult);
    d1d6:	ce 01       	movw	r24, r28
    d1d8:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
    d1dc:	8c 01       	movw	r16, r24
			   else NumbValue=0;
				
			   if ((TypeUI==UI_ALPHANUM_R)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    d1de:	83 e0       	ldi	r24, 0x03	; 3
    d1e0:	f8 16       	cp	r15, r24
    d1e2:	21 f0       	breq	.+8      	; 0xd1ec <UserInput+0x162>
    d1e4:	e5 e0       	ldi	r30, 0x05	; 5
    d1e6:	fe 16       	cp	r15, r30
    d1e8:	09 f0       	breq	.+2      	; 0xd1ec <UserInput+0x162>
    d1ea:	63 c0       	rjmp	.+198    	; 0xd2b2 <UserInput+0x228>
			       if (KeyChar!=zKeyChar){
    d1ec:	80 91 7e 02 	lds	r24, 0x027E
    d1f0:	e8 16       	cp	r14, r24
    d1f2:	71 f0       	breq	.+28     	; 0xd210 <UserInput+0x186>
					   IsSameKey=False;
    d1f4:	10 92 78 02 	sts	0x0278, r1
					   IsNewKey=True;
    d1f8:	81 e0       	ldi	r24, 0x01	; 1
    d1fa:	80 93 76 02 	sts	0x0276, r24
				       iHit=0;
    d1fe:	10 92 7a 02 	sts	0x027A, r1
					   iLoop=1000;
    d202:	88 ee       	ldi	r24, 0xE8	; 232
    d204:	93 e0       	ldi	r25, 0x03	; 3
    d206:	90 93 74 02 	sts	0x0274, r25
    d20a:	80 93 73 02 	sts	0x0273, r24
    d20e:	51 c0       	rjmp	.+162    	; 0xd2b2 <UserInput+0x228>
				   }
                   else{
				   if (IsNewKey==True){
    d210:	80 91 76 02 	lds	r24, 0x0276
    d214:	81 30       	cpi	r24, 0x01	; 1
    d216:	71 f4       	brne	.+28     	; 0xd234 <UserInput+0x1aa>
					   IsNewKey=False;
    d218:	10 92 76 02 	sts	0x0276, r1
					   yChar--;
    d21c:	80 91 80 02 	lds	r24, 0x0280
    d220:	81 50       	subi	r24, 0x01	; 1
    d222:	80 93 80 02 	sts	0x0280, r24
					   if (iValuePos>0) iValuePos--;
    d226:	80 91 7f 02 	lds	r24, 0x027F
    d22a:	88 23       	and	r24, r24
    d22c:	19 f0       	breq	.+6      	; 0xd234 <UserInput+0x1aa>
    d22e:	81 50       	subi	r24, 0x01	; 1
    d230:	80 93 7f 02 	sts	0x027F, r24
					   }
				   KeyTimeout=0;
    d234:	10 92 72 02 	sts	0x0272, r1
    d238:	10 92 71 02 	sts	0x0271, r1
				   IsSameKey=True;
    d23c:	81 e0       	ldi	r24, 0x01	; 1
    d23e:	80 93 78 02 	sts	0x0278, r24
				   if (iHit<pgm_read_byte(&MaxKeyHit[(zKeyChar-'0')])) 
    d242:	80 91 7a 02 	lds	r24, 0x027A
    d246:	e0 91 7e 02 	lds	r30, 0x027E
    d24a:	f0 e0       	ldi	r31, 0x00	; 0
    d24c:	e6 55       	subi	r30, 0x56	; 86
    d24e:	fd 4f       	sbci	r31, 0xFD	; 253
    d250:	e4 91       	lpm	r30, Z+
    d252:	8e 17       	cp	r24, r30
    d254:	20 f4       	brcc	.+8      	; 0xd25e <UserInput+0x1d4>
				        iHit++;
    d256:	8f 5f       	subi	r24, 0xFF	; 255
    d258:	80 93 7a 02 	sts	0x027A, r24
    d25c:	02 c0       	rjmp	.+4      	; 0xd262 <UserInput+0x1d8>
                   else iHit=0;
    d25e:	10 92 7a 02 	sts	0x027A, r1
				   iLoop=1000;
    d262:	88 ee       	ldi	r24, 0xE8	; 232
    d264:	93 e0       	ldi	r25, 0x03	; 3
    d266:	90 93 74 02 	sts	0x0274, r25
    d26a:	80 93 73 02 	sts	0x0273, r24

                   zAlphaChar=AlphaChar;
    d26e:	80 91 7c 02 	lds	r24, 0x027C
    d272:	80 93 7d 02 	sts	0x027D, r24
			       AlphaChar=_table_alphanum(IsShifted,KeyPressed,iHit);			   
    d276:	80 91 79 02 	lds	r24, 0x0279
    d27a:	6c 2d       	mov	r22, r12
    d27c:	40 91 7a 02 	lds	r20, 0x027A
    d280:	0e 94 1f a7 	call	0x14e3e	; 0x14e3e <_table_alphanum>
    d284:	80 93 7c 02 	sts	0x027C, r24
                   
				   if (IsNextKey==True){
    d288:	80 91 77 02 	lds	r24, 0x0277
    d28c:	81 30       	cpi	r24, 0x01	; 1
    d28e:	41 f4       	brne	.+16     	; 0xd2a0 <UserInput+0x216>
                       AlphaChar=zAlphaChar;       
    d290:	80 91 7d 02 	lds	r24, 0x027D
    d294:	80 93 7c 02 	sts	0x027C, r24
					   IsNextKey=False;
    d298:	10 92 77 02 	sts	0x0277, r1
					   IsSameKey=False;
    d29c:	10 92 78 02 	sts	0x0278, r1
				   }   
				   strResult[iValuePos]=AlphaChar;
    d2a0:	80 91 7f 02 	lds	r24, 0x027F
    d2a4:	fe 01       	movw	r30, r28
    d2a6:	e8 0f       	add	r30, r24
    d2a8:	f1 1d       	adc	r31, r1
    d2aa:	80 91 7c 02 	lds	r24, 0x027C
    d2ae:	80 83       	st	Z, r24
		           strResult[iValuePos+1]=0;
    d2b0:	11 82       	std	Z+1, r1	; 0x01
				 }//endElse 
				 
			   }//EndAlphaNum

			 if (TypeUI==UI_NUMBER_L){
    d2b2:	f2 e0       	ldi	r31, 0x02	; 2
    d2b4:	ff 16       	cp	r15, r31
    d2b6:	71 f4       	brne	.+28     	; 0xd2d4 <UserInput+0x24a>
			    if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d2b8:	a0 16       	cp	r10, r16
    d2ba:	b1 06       	cpc	r11, r17
    d2bc:	18 f4       	brcc	.+6      	; 0xd2c4 <UserInput+0x23a>
    d2be:	a1 14       	cp	r10, r1
    d2c0:	b1 04       	cpc	r11, r1
    d2c2:	71 f5       	brne	.+92     	; 0xd320 <UserInput+0x296>
				     iValuePos++;
    d2c4:	80 91 7f 02 	lds	r24, 0x027F
    d2c8:	8f 5f       	subi	r24, 0xFF	; 255
    d2ca:	80 93 7f 02 	sts	0x027F, r24
					 stUserInput=uiInputDisp;
    d2ce:	83 e0       	ldi	r24, 0x03	; 3
    d2d0:	80 93 82 02 	sts	0x0282, r24
				} 
			 }
  
			   if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d2d4:	a0 16       	cp	r10, r16
    d2d6:	b1 06       	cpc	r11, r17
    d2d8:	18 f4       	brcc	.+6      	; 0xd2e0 <UserInput+0x256>
    d2da:	a1 14       	cp	r10, r1
    d2dc:	b1 04       	cpc	r11, r1
    d2de:	01 f5       	brne	.+64     	; 0xd320 <UserInput+0x296>
			       if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d2e0:	21 e0       	ldi	r18, 0x01	; 1
    d2e2:	f2 16       	cp	r15, r18
    d2e4:	49 f0       	breq	.+18     	; 0xd2f8 <UserInput+0x26e>
    d2e6:	83 e0       	ldi	r24, 0x03	; 3
    d2e8:	f8 16       	cp	r15, r24
    d2ea:	31 f0       	breq	.+12     	; 0xd2f8 <UserInput+0x26e>
    d2ec:	e4 e0       	ldi	r30, 0x04	; 4
    d2ee:	fe 16       	cp	r15, r30
    d2f0:	19 f0       	breq	.+6      	; 0xd2f8 <UserInput+0x26e>
    d2f2:	f5 e0       	ldi	r31, 0x05	; 5
    d2f4:	ff 16       	cp	r15, r31
    d2f6:	a1 f4       	brne	.+40     	; 0xd320 <UserInput+0x296>
				       (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
				      if (IsSameKey==False){
    d2f8:	80 91 78 02 	lds	r24, 0x0278
    d2fc:	88 23       	and	r24, r24
    d2fe:	69 f4       	brne	.+26     	; 0xd31a <UserInput+0x290>
					      IsFirst=True;
    d300:	81 e0       	ldi	r24, 0x01	; 1
    d302:	80 93 75 02 	sts	0x0275, r24
					      iValuePos++;
    d306:	80 91 7f 02 	lds	r24, 0x027F
    d30a:	8f 5f       	subi	r24, 0xFF	; 255
    d30c:	80 93 7f 02 	sts	0x027F, r24
						  //FullEntry
						  if (iValuePos==MaxLength)Result=USER_FULL_ENTRY;
					      yChar++;
    d310:	80 91 80 02 	lds	r24, 0x0280
    d314:	8f 5f       	subi	r24, 0xFF	; 255
    d316:	80 93 80 02 	sts	0x0280, r24
						  //yChar=(yChar+1;//Max Display

						  }
                  stUserInput=uiInputDisp;
    d31a:	83 e0       	ldi	r24, 0x03	; 3
    d31c:	80 93 82 02 	sts	0x0282, r24
				  }
			   }
              zKeyChar=KeyChar;
    d320:	e0 92 7e 02 	sts	0x027E, r14
    d324:	54 e0       	ldi	r21, 0x04	; 4
    d326:	e5 2e       	mov	r14, r21
             Result=USER_ENTRY;
             }//EndKeyChar
			 
                 
              if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)){
    d328:	9f 2d       	mov	r25, r15
    d32a:	91 50       	subi	r25, 0x01	; 1
    d32c:	92 30       	cpi	r25, 0x02	; 2
    d32e:	18 f0       	brcs	.+6      	; 0xd336 <UserInput+0x2ac>
    d330:	24 e0       	ldi	r18, 0x04	; 4
    d332:	f2 16       	cp	r15, r18
    d334:	71 f4       	brne	.+28     	; 0xd352 <UserInput+0x2c8>
                   if((NumbValue>MaxValue)||(iValuePos==MaxLength)){
    d336:	a0 16       	cp	r10, r16
    d338:	b1 06       	cpc	r11, r17
    d33a:	20 f0       	brcs	.+8      	; 0xd344 <UserInput+0x2ba>
    d33c:	80 91 7f 02 	lds	r24, 0x027F
    d340:	88 15       	cp	r24, r8
    d342:	39 f4       	brne	.+14     	; 0xd352 <UserInput+0x2c8>
			           if (MaxValue>0)system_beep(1);
    d344:	ab 28       	or	r10, r11
    d346:	29 f0       	breq	.+10     	; 0xd352 <UserInput+0x2c8>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d348:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d34a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d34c:	81 e0       	ldi	r24, 0x01	; 1
    d34e:	80 93 be 01 	sts	0x01BE, r24
			           if (MaxValue>0)system_beep(1);
				   }
                 }
		  
		  //CANCEL OK
		  if (KeyPressed==_KEY_CANCEL){
    d352:	87 ee       	ldi	r24, 0xE7	; 231
    d354:	c8 16       	cp	r12, r24
    d356:	71 f4       	brne	.+28     	; 0xd374 <UserInput+0x2ea>
		      if (iValuePos>0){
    d358:	80 91 7f 02 	lds	r24, 0x027F
    d35c:	88 23       	and	r24, r24
    d35e:	41 f0       	breq	.+16     	; 0xd370 <UserInput+0x2e6>
			      iLoop=1999;
    d360:	8f ec       	ldi	r24, 0xCF	; 207
    d362:	97 e0       	ldi	r25, 0x07	; 7
    d364:	90 93 74 02 	sts	0x0274, r25
    d368:	80 93 73 02 	sts	0x0273, r24
				  stUserInput=uiClearDisplay;
    d36c:	82 e0       	ldi	r24, 0x02	; 2
    d36e:	26 c0       	rjmp	.+76     	; 0xd3bc <UserInput+0x332>
				  }
			  else{
			      UserInputResult=USER_CANCEL;
    d370:	81 e0       	ldi	r24, 0x01	; 1
    d372:	21 c0       	rjmp	.+66     	; 0xd3b6 <UserInput+0x32c>
			      stUserInput=uiFinished;
				  }
		  }
		  else {
		  if (KeyPressed==_KEY_ENTER){
    d374:	e7 eb       	ldi	r30, 0xB7	; 183
    d376:	ce 16       	cp	r12, r30
    d378:	19 f5       	brne	.+70     	; 0xd3c0 <UserInput+0x336>
		      strResult[iValuePos]=0;
    d37a:	80 91 7f 02 	lds	r24, 0x027F
    d37e:	fe 01       	movw	r30, r28
    d380:	e8 0f       	add	r30, r24
    d382:	f1 1d       	adc	r31, r1
    d384:	10 82       	st	Z, r1
			  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)){
    d386:	92 30       	cpi	r25, 0x02	; 2
    d388:	a8 f4       	brcc	.+42     	; 0xd3b4 <UserInput+0x32a>
			       if (iValuePos==0)sprintf_P(strResult,PSTR("0"));
    d38a:	88 23       	and	r24, r24
    d38c:	81 f4       	brne	.+32     	; 0xd3ae <UserInput+0x324>
    d38e:	00 d0       	rcall	.+0      	; 0xd390 <UserInput+0x306>
    d390:	00 d0       	rcall	.+0      	; 0xd392 <UserInput+0x308>
    d392:	ed b7       	in	r30, 0x3d	; 61
    d394:	fe b7       	in	r31, 0x3e	; 62
    d396:	d2 83       	std	Z+2, r29	; 0x02
    d398:	c1 83       	std	Z+1, r28	; 0x01
    d39a:	8a e1       	ldi	r24, 0x1A	; 26
    d39c:	9e e1       	ldi	r25, 0x1E	; 30
    d39e:	94 83       	std	Z+4, r25	; 0x04
    d3a0:	83 83       	std	Z+3, r24	; 0x03
    d3a2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    d3a6:	0f 90       	pop	r0
    d3a8:	0f 90       	pop	r0
    d3aa:	0f 90       	pop	r0
    d3ac:	0f 90       	pop	r0
			       RemZeroLead(strResult);
    d3ae:	ce 01       	movw	r24, r28
    d3b0:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
				  }
		      UserInputResult=USER_OK;
    d3b4:	83 e0       	ldi	r24, 0x03	; 3
    d3b6:	80 93 83 02 	sts	0x0283, r24
		      stUserInput=uiFinished;
    d3ba:	84 e0       	ldi	r24, 0x04	; 4
    d3bc:	80 93 82 02 	sts	0x0282, r24
			  }
		  }//EndElse

		  if ((iLoop%2000)==0){
    d3c0:	80 91 73 02 	lds	r24, 0x0273
    d3c4:	90 91 74 02 	lds	r25, 0x0274
    d3c8:	60 ed       	ldi	r22, 0xD0	; 208
    d3ca:	77 e0       	ldi	r23, 0x07	; 7
    d3cc:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    d3d0:	89 2b       	or	r24, r25
    d3d2:	09 f0       	breq	.+2      	; 0xd3d6 <UserInput+0x34c>
    d3d4:	4b c0       	rjmp	.+150    	; 0xd46c <UserInput+0x3e2>
		      if (IsSameKey==True)
    d3d6:	80 91 78 02 	lds	r24, 0x0278
    d3da:	81 30       	cpi	r24, 0x01	; 1
    d3dc:	c9 f4       	brne	.+50     	; 0xd410 <UserInput+0x386>
			      //lcd_put(xChar,yChar,AlphaChar); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),AlphaChar); 
    d3de:	20 91 7f 02 	lds	r18, 0x027F
    d3e2:	82 2f       	mov	r24, r18
    d3e4:	90 e0       	ldi	r25, 0x00	; 0
    d3e6:	01 97       	sbiw	r24, 0x01	; 1
    d3e8:	8d 0d       	add	r24, r13
    d3ea:	91 1d       	adc	r25, r1
    d3ec:	64 e1       	ldi	r22, 0x14	; 20
    d3ee:	70 e0       	ldi	r23, 0x00	; 0
    d3f0:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    d3f4:	36 2f       	mov	r19, r22
    d3f6:	82 2f       	mov	r24, r18
    d3f8:	64 e1       	ldi	r22, 0x14	; 20
    d3fa:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    d3fe:	6d 2d       	mov	r22, r13
    d400:	69 0f       	add	r22, r25
    d402:	89 2d       	mov	r24, r9
    d404:	83 0f       	add	r24, r19
    d406:	40 91 7c 02 	lds	r20, 0x027C
    d40a:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
    d40e:	2e c0       	rjmp	.+92     	; 0xd46c <UserInput+0x3e2>
			  else {
			      if((TypeUI==UI_ALPHANUM_PASSWORD)&&(iValuePos>0))lcd_put(xChar,yChar-1,'*'); 
    d410:	f5 e0       	ldi	r31, 0x05	; 5
    d412:	ff 16       	cp	r15, r31
    d414:	61 f4       	brne	.+24     	; 0xd42e <UserInput+0x3a4>
    d416:	80 91 7f 02 	lds	r24, 0x027F
    d41a:	88 23       	and	r24, r24
    d41c:	41 f0       	breq	.+16     	; 0xd42e <UserInput+0x3a4>
    d41e:	60 91 80 02 	lds	r22, 0x0280
    d422:	61 50       	subi	r22, 0x01	; 1
    d424:	80 91 81 02 	lds	r24, 0x0281
    d428:	4a e2       	ldi	r20, 0x2A	; 42
    d42a:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			      //lcd_put(xChar,yChar,'_'); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),'_'); 
    d42e:	20 91 7f 02 	lds	r18, 0x027F
    d432:	82 2f       	mov	r24, r18
    d434:	90 e0       	ldi	r25, 0x00	; 0
    d436:	01 97       	sbiw	r24, 0x01	; 1
    d438:	8d 0d       	add	r24, r13
    d43a:	91 1d       	adc	r25, r1
    d43c:	64 e1       	ldi	r22, 0x14	; 20
    d43e:	70 e0       	ldi	r23, 0x00	; 0
    d440:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    d444:	36 2f       	mov	r19, r22
    d446:	82 2f       	mov	r24, r18
    d448:	64 e1       	ldi	r22, 0x14	; 20
    d44a:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    d44e:	6d 2d       	mov	r22, r13
    d450:	69 0f       	add	r22, r25
    d452:	89 2d       	mov	r24, r9
    d454:	83 0f       	add	r24, r19
    d456:	4f e5       	ldi	r20, 0x5F	; 95
    d458:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>

				  if (IsFirst==True){
    d45c:	80 91 75 02 	lds	r24, 0x0275
    d460:	81 30       	cpi	r24, 0x01	; 1
    d462:	21 f4       	brne	.+8      	; 0xd46c <UserInput+0x3e2>
				      IsFirst=False;
    d464:	10 92 75 02 	sts	0x0275, r1
				      zKeyChar=0;
    d468:	10 92 7e 02 	sts	0x027E, r1
					  }
				  }
			  }
          if ((iLoop%2000)==1000){
    d46c:	80 91 73 02 	lds	r24, 0x0273
    d470:	90 91 74 02 	lds	r25, 0x0274
    d474:	60 ed       	ldi	r22, 0xD0	; 208
    d476:	77 e0       	ldi	r23, 0x07	; 7
    d478:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
    d47c:	88 5e       	subi	r24, 0xE8	; 232
    d47e:	93 40       	sbci	r25, 0x03	; 3
    d480:	d1 f5       	brne	.+116    	; 0xd4f6 <UserInput+0x46c>
		      if (IsSameKey==True){
    d482:	80 91 78 02 	lds	r24, 0x0278
    d486:	81 30       	cpi	r24, 0x01	; 1
    d488:	f9 f4       	brne	.+62     	; 0xd4c8 <UserInput+0x43e>
			      if (TypeUI!=UI_NUM_PASSWORD)
    d48a:	84 e0       	ldi	r24, 0x04	; 4
    d48c:	f8 16       	cp	r15, r24
    d48e:	b1 f0       	breq	.+44     	; 0xd4bc <UserInput+0x432>
				       //lcd_put(xChar,yChar,AlphaChar); 
					   lcd_put(xPos+((yPos+iValuePos-1)/20),yChar%21,AlphaChar); 
    d490:	80 91 7f 02 	lds	r24, 0x027F
    d494:	90 e0       	ldi	r25, 0x00	; 0
    d496:	01 97       	sbiw	r24, 0x01	; 1
    d498:	8d 0d       	add	r24, r13
    d49a:	91 1d       	adc	r25, r1
    d49c:	64 e1       	ldi	r22, 0x14	; 20
    d49e:	70 e0       	ldi	r23, 0x00	; 0
    d4a0:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    d4a4:	26 2f       	mov	r18, r22
    d4a6:	80 91 80 02 	lds	r24, 0x0280
    d4aa:	65 e1       	ldi	r22, 0x15	; 21
    d4ac:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    d4b0:	89 2d       	mov	r24, r9
    d4b2:	82 0f       	add	r24, r18
    d4b4:	69 2f       	mov	r22, r25
    d4b6:	40 91 7c 02 	lds	r20, 0x027C
    d4ba:	1b c0       	rjmp	.+54     	; 0xd4f2 <UserInput+0x468>
					   
				  else lcd_put(xChar,yChar,'*'); 
    d4bc:	80 91 81 02 	lds	r24, 0x0281
    d4c0:	60 91 80 02 	lds	r22, 0x0280
    d4c4:	4a e2       	ldi	r20, 0x2A	; 42
    d4c6:	15 c0       	rjmp	.+42     	; 0xd4f2 <UserInput+0x468>
			  }
			  //else lcd_put(xChar,yChar,' '); 
			  else lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); 			  
    d4c8:	20 91 7f 02 	lds	r18, 0x027F
    d4cc:	82 2f       	mov	r24, r18
    d4ce:	90 e0       	ldi	r25, 0x00	; 0
    d4d0:	01 97       	sbiw	r24, 0x01	; 1
    d4d2:	8d 0d       	add	r24, r13
    d4d4:	91 1d       	adc	r25, r1
    d4d6:	64 e1       	ldi	r22, 0x14	; 20
    d4d8:	70 e0       	ldi	r23, 0x00	; 0
    d4da:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    d4de:	36 2f       	mov	r19, r22
    d4e0:	82 2f       	mov	r24, r18
    d4e2:	64 e1       	ldi	r22, 0x14	; 20
    d4e4:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    d4e8:	d9 0e       	add	r13, r25
    d4ea:	89 2d       	mov	r24, r9
    d4ec:	83 0f       	add	r24, r19
    d4ee:	6d 2d       	mov	r22, r13
    d4f0:	40 e2       	ldi	r20, 0x20	; 32
    d4f2:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			  }
          iLoop++;
    d4f6:	80 91 73 02 	lds	r24, 0x0273
    d4fa:	90 91 74 02 	lds	r25, 0x0274
    d4fe:	01 96       	adiw	r24, 0x01	; 1
    d500:	90 93 74 02 	sts	0x0274, r25
    d504:	80 93 73 02 	sts	0x0273, r24
    d508:	d6 c0       	rjmp	.+428    	; 0xd6b6 <UserInput+0x62c>
          break;
     case uiClearDisplay:
          if (TypeUI==UI_NUMBER_L){
    d50a:	e2 e0       	ldi	r30, 0x02	; 2
    d50c:	8e 17       	cp	r24, r30
    d50e:	99 f4       	brne	.+38     	; 0xd536 <UserInput+0x4ac>
		      lcd_put(xChar,(yChar-iValuePos),' '); // 123_ 1_
    d510:	60 91 80 02 	lds	r22, 0x0280
    d514:	80 91 7f 02 	lds	r24, 0x027F
    d518:	68 1b       	sub	r22, r24
    d51a:	80 91 81 02 	lds	r24, 0x0281
    d51e:	40 e2       	ldi	r20, 0x20	; 32
    d520:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
		      strResult[iValuePos]=0;
    d524:	80 91 7f 02 	lds	r24, 0x027F
    d528:	c8 0f       	add	r28, r24
    d52a:	d1 1d       	adc	r29, r1
    d52c:	18 82       	st	Y, r1
		      iValuePos--;
    d52e:	81 50       	subi	r24, 0x01	; 1
    d530:	80 93 7f 02 	sts	0x027F, r24
    d534:	33 c0       	rjmp	.+102    	; 0xd59c <UserInput+0x512>
			  }
          else
		  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d536:	f1 e0       	ldi	r31, 0x01	; 1
    d538:	8f 17       	cp	r24, r31
    d53a:	49 f0       	breq	.+18     	; 0xd54e <UserInput+0x4c4>
    d53c:	23 e0       	ldi	r18, 0x03	; 3
    d53e:	82 17       	cp	r24, r18
    d540:	31 f0       	breq	.+12     	; 0xd54e <UserInput+0x4c4>
    d542:	84 e0       	ldi	r24, 0x04	; 4
    d544:	f8 16       	cp	r15, r24
    d546:	19 f0       	breq	.+6      	; 0xd54e <UserInput+0x4c4>
    d548:	e5 e0       	ldi	r30, 0x05	; 5
    d54a:	fe 16       	cp	r15, r30
    d54c:	39 f5       	brne	.+78     	; 0xd59c <UserInput+0x512>
		      (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
		      //lcd_put(xChar,yChar,' '); // 123_ 1_
			  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); // 123_ 1_
    d54e:	20 91 7f 02 	lds	r18, 0x027F
    d552:	82 2f       	mov	r24, r18
    d554:	90 e0       	ldi	r25, 0x00	; 0
    d556:	01 97       	sbiw	r24, 0x01	; 1
    d558:	8d 0d       	add	r24, r13
    d55a:	91 1d       	adc	r25, r1
    d55c:	64 e1       	ldi	r22, 0x14	; 20
    d55e:	70 e0       	ldi	r23, 0x00	; 0
    d560:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    d564:	36 2f       	mov	r19, r22
    d566:	82 2f       	mov	r24, r18
    d568:	64 e1       	ldi	r22, 0x14	; 20
    d56a:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    d56e:	d9 0e       	add	r13, r25
    d570:	89 2d       	mov	r24, r9
    d572:	83 0f       	add	r24, r19
    d574:	6d 2d       	mov	r22, r13
    d576:	40 e2       	ldi	r20, 0x20	; 32
    d578:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			  
		      strResult[iValuePos]=0;
    d57c:	80 91 7f 02 	lds	r24, 0x027F
    d580:	c8 0f       	add	r28, r24
    d582:	d1 1d       	adc	r29, r1
    d584:	18 82       	st	Y, r1
		      iValuePos--;
    d586:	81 50       	subi	r24, 0x01	; 1
    d588:	80 93 7f 02 	sts	0x027F, r24
			  yChar--;
    d58c:	80 91 80 02 	lds	r24, 0x0280
    d590:	81 50       	subi	r24, 0x01	; 1
    d592:	80 93 80 02 	sts	0x0280, r24
			  IsDelete=True;
    d596:	81 e0       	ldi	r24, 0x01	; 1
    d598:	80 93 7b 02 	sts	0x027B, r24
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    d59c:	80 91 7f 02 	lds	r24, 0x027F
    d5a0:	88 23       	and	r24, r24
    d5a2:	19 f4       	brne	.+6      	; 0xd5aa <UserInput+0x520>
    d5a4:	45 e0       	ldi	r20, 0x05	; 5
    d5a6:	e4 2e       	mov	r14, r20
    d5a8:	01 c0       	rjmp	.+2      	; 0xd5ac <UserInput+0x522>
    d5aa:	ee 24       	eor	r14, r14
		  stUserInput=uiInputDisp;//Redraw
    d5ac:	83 e0       	ldi	r24, 0x03	; 3
    d5ae:	80 93 82 02 	sts	0x0282, r24
    d5b2:	81 c0       	rjmp	.+258    	; 0xd6b6 <UserInput+0x62c>
	      break;      
     case uiInputDisp:
	      if(TypeUI==UI_ALPHANUM_PASSWORD){
    d5b4:	f5 e0       	ldi	r31, 0x05	; 5
    d5b6:	8f 17       	cp	r24, r31
    d5b8:	19 f5       	brne	.+70     	; 0xd600 <UserInput+0x576>
			  if (iValuePos>0){
    d5ba:	80 91 7f 02 	lds	r24, 0x027F
    d5be:	88 23       	and	r24, r24
    d5c0:	a9 f0       	breq	.+42     	; 0xd5ec <UserInput+0x562>
                  lcd_put(xChar,(yChar-2),'*');
    d5c2:	60 91 80 02 	lds	r22, 0x0280
    d5c6:	62 50       	subi	r22, 0x02	; 2
    d5c8:	80 91 81 02 	lds	r24, 0x0281
    d5cc:	4a e2       	ldi	r20, 0x2A	; 42
    d5ce:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			      if (IsDelete==True){
    d5d2:	80 91 7b 02 	lds	r24, 0x027B
    d5d6:	60 91 80 02 	lds	r22, 0x0280
    d5da:	81 30       	cpi	r24, 0x01	; 1
    d5dc:	71 f0       	breq	.+28     	; 0xd5fa <UserInput+0x570>
				      IsDelete=False;
			          lcd_put(xChar,(yChar-1),'*');
			          }
				  else lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
    d5de:	61 50       	subi	r22, 0x01	; 1
    d5e0:	80 91 7f 02 	lds	r24, 0x027F
    d5e4:	c8 0f       	add	r28, r24
    d5e6:	d1 1d       	adc	r29, r1
    d5e8:	21 97       	sbiw	r28, 0x01	; 1
    d5ea:	4d c0       	rjmp	.+154    	; 0xd686 <UserInput+0x5fc>
			      }
			  else{ if(IsDelete==True){
    d5ec:	80 91 7b 02 	lds	r24, 0x027B
    d5f0:	60 91 80 02 	lds	r22, 0x0280
    d5f4:	81 30       	cpi	r24, 0x01	; 1
    d5f6:	09 f0       	breq	.+2      	; 0xd5fa <UserInput+0x570>
    d5f8:	45 c0       	rjmp	.+138    	; 0xd684 <UserInput+0x5fa>
			           IsDelete=False;
    d5fa:	10 92 7b 02 	sts	0x027B, r1
    d5fe:	4c c0       	rjmp	.+152    	; 0xd698 <UserInput+0x60e>
					   lcd_put(xChar,(yChar-1),'*');
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
    d600:	22 e0       	ldi	r18, 0x02	; 2
    d602:	82 17       	cp	r24, r18
    d604:	a1 f4       	brne	.+40     	; 0xd62e <UserInput+0x5a4>
    d606:	10 e0       	ldi	r17, 0x00	; 0
    d608:	0d c0       	rjmp	.+26     	; 0xd624 <UserInput+0x59a>
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
    d60a:	60 91 80 02 	lds	r22, 0x0280
    d60e:	68 1b       	sub	r22, r24
    d610:	61 0f       	add	r22, r17
    d612:	fe 01       	movw	r30, r28
    d614:	e1 0f       	add	r30, r17
    d616:	f1 1d       	adc	r31, r1
    d618:	80 91 81 02 	lds	r24, 0x0281
    d61c:	40 81       	ld	r20, Z
    d61e:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
    d622:	1f 5f       	subi	r17, 0xFF	; 255
    d624:	80 91 7f 02 	lds	r24, 0x027F
    d628:	18 17       	cp	r17, r24
    d62a:	78 f3       	brcs	.-34     	; 0xd60a <UserInput+0x580>
    d62c:	3b c0       	rjmp	.+118    	; 0xd6a4 <UserInput+0x61a>
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
		      }
		  }else
	      if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)){
    d62e:	81 e0       	ldi	r24, 0x01	; 1
    d630:	f8 16       	cp	r15, r24
    d632:	19 f0       	breq	.+6      	; 0xd63a <UserInput+0x5b0>
    d634:	e3 e0       	ldi	r30, 0x03	; 3
    d636:	fe 16       	cp	r15, r30
    d638:	51 f5       	brne	.+84     	; 0xd68e <UserInput+0x604>
		      
			  //if (iValuePos>0) lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
			  if (iValuePos>0) lcd_put(xPos+((yPos+iValuePos-1)/21),yPos+((iValuePos-1)%20),strResult[iValuePos-1]);			  
    d63a:	20 91 7f 02 	lds	r18, 0x027F
    d63e:	4d 2d       	mov	r20, r13
    d640:	50 e0       	ldi	r21, 0x00	; 0
    d642:	22 23       	and	r18, r18
    d644:	c1 f0       	breq	.+48     	; 0xd676 <UserInput+0x5ec>
    d646:	30 e0       	ldi	r19, 0x00	; 0
    d648:	f9 01       	movw	r30, r18
    d64a:	31 97       	sbiw	r30, 0x01	; 1
    d64c:	cf 01       	movw	r24, r30
    d64e:	84 0f       	add	r24, r20
    d650:	95 1f       	adc	r25, r21
    d652:	65 e1       	ldi	r22, 0x15	; 21
    d654:	70 e0       	ldi	r23, 0x00	; 0
    d656:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    d65a:	46 2f       	mov	r20, r22
    d65c:	cf 01       	movw	r24, r30
    d65e:	64 e1       	ldi	r22, 0x14	; 20
    d660:	70 e0       	ldi	r23, 0x00	; 0
    d662:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    d666:	d8 0e       	add	r13, r24
    d668:	c2 0f       	add	r28, r18
    d66a:	d3 1f       	adc	r29, r19
    d66c:	21 97       	sbiw	r28, 0x01	; 1
    d66e:	89 2d       	mov	r24, r9
    d670:	84 0f       	add	r24, r20
    d672:	6d 2d       	mov	r22, r13
    d674:	0a c0       	rjmp	.+20     	; 0xd68a <UserInput+0x600>
			  else{ if ((yChar-1)>=yPos)lcd_put(xChar,(yChar-1),strResult[iValuePos]);
    d676:	60 91 80 02 	lds	r22, 0x0280
    d67a:	86 2f       	mov	r24, r22
    d67c:	90 e0       	ldi	r25, 0x00	; 0
    d67e:	48 17       	cp	r20, r24
    d680:	59 07       	cpc	r21, r25
    d682:	84 f4       	brge	.+32     	; 0xd6a4 <UserInput+0x61a>
    d684:	61 50       	subi	r22, 0x01	; 1
    d686:	80 91 81 02 	lds	r24, 0x0281
    d68a:	48 81       	ld	r20, Y
    d68c:	09 c0       	rjmp	.+18     	; 0xd6a0 <UserInput+0x616>
			  }
		  }else
		  //DisplayAsterik *
		  if (TypeUI==UI_NUM_PASSWORD){
    d68e:	f4 e0       	ldi	r31, 0x04	; 4
    d690:	ff 16       	cp	r15, r31
    d692:	41 f4       	brne	.+16     	; 0xd6a4 <UserInput+0x61a>
		      lcd_put(xChar,(yChar-1),'*');
    d694:	60 91 80 02 	lds	r22, 0x0280
    d698:	61 50       	subi	r22, 0x01	; 1
    d69a:	80 91 81 02 	lds	r24, 0x0281
    d69e:	4a e2       	ldi	r20, 0x2A	; 42
    d6a0:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
		  }

          stUserInput=uiInput;
    d6a4:	81 e0       	ldi	r24, 0x01	; 1
    d6a6:	80 93 82 02 	sts	0x0282, r24
    d6aa:	ee 24       	eor	r14, r14
    d6ac:	04 c0       	rjmp	.+8      	; 0xd6b6 <UserInput+0x62c>
	      break;	 
     case uiFinished:
	      Result=UserInputResult;
    d6ae:	e0 90 83 02 	lds	r14, 0x0283
	      stUserInput=uiInit;
    d6b2:	10 92 82 02 	sts	0x0282, r1
	      break;
	 }
	 return Result;
}
    d6b6:	8e 2d       	mov	r24, r14
    d6b8:	df 91       	pop	r29
    d6ba:	cf 91       	pop	r28
    d6bc:	1f 91       	pop	r17
    d6be:	0f 91       	pop	r16
    d6c0:	ff 90       	pop	r15
    d6c2:	ef 90       	pop	r14
    d6c4:	df 90       	pop	r13
    d6c6:	cf 90       	pop	r12
    d6c8:	bf 90       	pop	r11
    d6ca:	af 90       	pop	r10
    d6cc:	9f 90       	pop	r9
    d6ce:	8f 90       	pop	r8
    d6d0:	08 95       	ret

0000d6d2 <FSettingOperator>:
char FSettingHost(){
     _menu_host();
	 return MENU_DONE;
}

char FSettingOperator(){//Change Active Operator, Change Password
    d6d2:	ef 92       	push	r14
    d6d4:	0f 93       	push	r16
    d6d6:	1f 93       	push	r17
    d6d8:	df 93       	push	r29
    d6da:	cf 93       	push	r28
    d6dc:	cd b7       	in	r28, 0x3d	; 61
    d6de:	de b7       	in	r29, 0x3e	; 62
    d6e0:	e5 97       	sbiw	r28, 0x35	; 53
    d6e2:	0f b6       	in	r0, 0x3f	; 63
    d6e4:	f8 94       	cli
    d6e6:	de bf       	out	0x3e, r29	; 62
    d6e8:	0f be       	out	0x3f, r0	; 63
    d6ea:	cd bf       	out	0x3d, r28	; 61
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
	 switch(stSettingOperator){
    d6ec:	80 91 21 02 	lds	r24, 0x0221
    d6f0:	87 30       	cpi	r24, 0x07	; 7
    d6f2:	09 f4       	brne	.+2      	; 0xd6f6 <FSettingOperator+0x24>
    d6f4:	74 c1       	rjmp	.+744    	; 0xd9de <FSettingOperator+0x30c>
    d6f6:	88 30       	cpi	r24, 0x08	; 8
    d6f8:	90 f4       	brcc	.+36     	; 0xd71e <FSettingOperator+0x4c>
    d6fa:	83 30       	cpi	r24, 0x03	; 3
    d6fc:	09 f4       	brne	.+2      	; 0xd700 <FSettingOperator+0x2e>
    d6fe:	9e c0       	rjmp	.+316    	; 0xd83c <FSettingOperator+0x16a>
    d700:	84 30       	cpi	r24, 0x04	; 4
    d702:	30 f4       	brcc	.+12     	; 0xd710 <FSettingOperator+0x3e>
    d704:	81 30       	cpi	r24, 0x01	; 1
    d706:	d1 f1       	breq	.+116    	; 0xd77c <FSettingOperator+0xaa>
    d708:	82 30       	cpi	r24, 0x02	; 2
    d70a:	08 f0       	brcs	.+2      	; 0xd70e <FSettingOperator+0x3c>
    d70c:	4a c0       	rjmp	.+148    	; 0xd7a2 <FSettingOperator+0xd0>
    d70e:	20 c0       	rjmp	.+64     	; 0xd750 <FSettingOperator+0x7e>
    d710:	85 30       	cpi	r24, 0x05	; 5
    d712:	09 f4       	brne	.+2      	; 0xd716 <FSettingOperator+0x44>
    d714:	35 c1       	rjmp	.+618    	; 0xd980 <FSettingOperator+0x2ae>
    d716:	86 30       	cpi	r24, 0x06	; 6
    d718:	08 f0       	brcs	.+2      	; 0xd71c <FSettingOperator+0x4a>
    d71a:	4e c1       	rjmp	.+668    	; 0xd9b8 <FSettingOperator+0x2e6>
    d71c:	fd c0       	rjmp	.+506    	; 0xd918 <FSettingOperator+0x246>
    d71e:	8b 30       	cpi	r24, 0x0B	; 11
    d720:	09 f4       	brne	.+2      	; 0xd724 <FSettingOperator+0x52>
    d722:	1f c2       	rjmp	.+1086   	; 0xdb62 <FSettingOperator+0x490>
    d724:	8c 30       	cpi	r24, 0x0C	; 12
    d726:	38 f4       	brcc	.+14     	; 0xd736 <FSettingOperator+0x64>
    d728:	89 30       	cpi	r24, 0x09	; 9
    d72a:	09 f4       	brne	.+2      	; 0xd72e <FSettingOperator+0x5c>
    d72c:	a6 c1       	rjmp	.+844    	; 0xda7a <FSettingOperator+0x3a8>
    d72e:	8a 30       	cpi	r24, 0x0A	; 10
    d730:	08 f0       	brcs	.+2      	; 0xd734 <FSettingOperator+0x62>
    d732:	d6 c1       	rjmp	.+940    	; 0xdae0 <FSettingOperator+0x40e>
    d734:	74 c1       	rjmp	.+744    	; 0xda1e <FSettingOperator+0x34c>
    d736:	8d 30       	cpi	r24, 0x0D	; 13
    d738:	09 f4       	brne	.+2      	; 0xd73c <FSettingOperator+0x6a>
    d73a:	95 c2       	rjmp	.+1322   	; 0xdc66 <FSettingOperator+0x594>
    d73c:	8d 30       	cpi	r24, 0x0D	; 13
    d73e:	08 f4       	brcc	.+2      	; 0xd742 <FSettingOperator+0x70>
    d740:	17 c2       	rjmp	.+1070   	; 0xdb70 <FSettingOperator+0x49e>
    d742:	8e 30       	cpi	r24, 0x0E	; 14
    d744:	09 f4       	brne	.+2      	; 0xd748 <FSettingOperator+0x76>
    d746:	94 c2       	rjmp	.+1320   	; 0xdc70 <FSettingOperator+0x59e>
    d748:	8f 30       	cpi	r24, 0x0F	; 15
    d74a:	09 f0       	breq	.+2      	; 0xd74e <FSettingOperator+0x7c>
    d74c:	9c c2       	rjmp	.+1336   	; 0xdc86 <FSettingOperator+0x5b4>
    d74e:	97 c2       	rjmp	.+1326   	; 0xdc7e <FSettingOperator+0x5ac>
	 case soMenuOption:
	      lcd_clear();
    d750:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Change Operator"));
    d754:	81 e0       	ldi	r24, 0x01	; 1
    d756:	61 e0       	ldi	r22, 0x01	; 1
    d758:	48 e7       	ldi	r20, 0x78	; 120
    d75a:	52 e1       	ldi	r21, 0x12	; 18
    d75c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Change Password"));
    d760:	82 e0       	ldi	r24, 0x02	; 2
    d762:	61 e0       	ldi	r22, 0x01	; 1
    d764:	46 e6       	ldi	r20, 0x66	; 102
    d766:	52 e1       	ldi	r21, 0x12	; 18
    d768:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back          "));
    d76c:	84 e0       	ldi	r24, 0x04	; 4
    d76e:	61 e0       	ldi	r22, 0x01	; 1
    d770:	44 e5       	ldi	r20, 0x54	; 84
    d772:	52 e1       	ldi	r21, 0x12	; 18
    d774:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stSettingOperator=soMenuOptionInput;
    d778:	81 e0       	ldi	r24, 0x01	; 1
    d77a:	5e c2       	rjmp	.+1212   	; 0xdc38 <FSettingOperator+0x566>
	      break;
     case soMenuOptionInput:
	      KeyPressed=_key_scan(1);
    d77c:	81 e0       	ldi	r24, 0x01	; 1
    d77e:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d782:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  switch(KeyChar){
    d786:	81 33       	cpi	r24, 0x31	; 49
    d788:	31 f0       	breq	.+12     	; 0xd796 <FSettingOperator+0xc4>
    d78a:	82 33       	cpi	r24, 0x32	; 50
    d78c:	31 f0       	breq	.+12     	; 0xd79a <FSettingOperator+0xc8>
    d78e:	8a 32       	cpi	r24, 0x2A	; 42
    d790:	09 f0       	breq	.+2      	; 0xd794 <FSettingOperator+0xc2>
    d792:	79 c2       	rjmp	.+1266   	; 0xdc86 <FSettingOperator+0x5b4>
    d794:	04 c0       	rjmp	.+8      	; 0xd79e <FSettingOperator+0xcc>
		  case '1':
		       stSettingOperator=soChangeOperatorInit;
    d796:	82 e0       	ldi	r24, 0x02	; 2
    d798:	4f c2       	rjmp	.+1182   	; 0xdc38 <FSettingOperator+0x566>
		       break;
          case '2':
		       stSettingOperator=soChangePasswordInit;
    d79a:	85 e0       	ldi	r24, 0x05	; 5
    d79c:	4d c2       	rjmp	.+1178   	; 0xdc38 <FSettingOperator+0x566>
		       break;
          case '*':
		       stSettingOperator=soExitSettingOperator;
    d79e:	8f e0       	ldi	r24, 0x0F	; 15
    d7a0:	4b c2       	rjmp	.+1174   	; 0xdc38 <FSettingOperator+0x566>
		       break;
		  }
	      break;
     case soChangeOperatorInit:
	      lcd_clear();		  
    d7a2:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    d7a6:	8e 01       	movw	r16, r28
    d7a8:	00 5f       	subi	r16, 0xF0	; 240
    d7aa:	1f 4f       	sbci	r17, 0xFF	; 255
    d7ac:	c8 01       	movw	r24, r16
    d7ae:	65 e1       	ldi	r22, 0x15	; 21
    d7b0:	70 e0       	ldi	r23, 0x00	; 0
    d7b2:	42 e1       	ldi	r20, 0x12	; 18
    d7b4:	50 e0       	ldi	r21, 0x00	; 0
    d7b6:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d7ba:	98 01       	movw	r18, r16
    d7bc:	ce 01       	movw	r24, r28
    d7be:	4f 96       	adiw	r24, 0x1f	; 31
	    Dest[i]=Source[IdxSource+i];
    d7c0:	0f 5f       	subi	r16, 0xFF	; 255
    d7c2:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d7c4:	08 17       	cp	r16, r24
    d7c6:	19 07       	cpc	r17, r25
    d7c8:	d9 f7       	brne	.-10     	; 0xd7c0 <FSettingOperator+0xee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d7ca:	1f 8e       	std	Y+31, r1	; 0x1f
     case soChangeOperatorInit:
	      lcd_clear();		  
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);

		  sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d7cc:	00 d0       	rcall	.+0      	; 0xd7ce <FSettingOperator+0xfc>
    d7ce:	00 d0       	rcall	.+0      	; 0xd7d0 <FSettingOperator+0xfe>
    d7d0:	00 d0       	rcall	.+0      	; 0xd7d2 <FSettingOperator+0x100>
    d7d2:	ed b7       	in	r30, 0x3d	; 61
    d7d4:	fe b7       	in	r31, 0x3e	; 62
    d7d6:	31 96       	adiw	r30, 0x01	; 1
    d7d8:	8e 01       	movw	r16, r28
    d7da:	0e 5d       	subi	r16, 0xDE	; 222
    d7dc:	1f 4f       	sbci	r17, 0xFF	; 255
    d7de:	ad b7       	in	r26, 0x3d	; 61
    d7e0:	be b7       	in	r27, 0x3e	; 62
    d7e2:	12 96       	adiw	r26, 0x02	; 2
    d7e4:	1c 93       	st	X, r17
    d7e6:	0e 93       	st	-X, r16
    d7e8:	11 97       	sbiw	r26, 0x01	; 1
    d7ea:	81 e5       	ldi	r24, 0x51	; 81
    d7ec:	92 e1       	ldi	r25, 0x12	; 18
    d7ee:	93 83       	std	Z+3, r25	; 0x03
    d7f0:	82 83       	std	Z+2, r24	; 0x02
    d7f2:	24 83       	std	Z+4, r18	; 0x04
    d7f4:	35 83       	std	Z+5, r19	; 0x05
    d7f6:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_printf(1,1,PSTR("Name:"));
    d7fa:	8d b7       	in	r24, 0x3d	; 61
    d7fc:	9e b7       	in	r25, 0x3e	; 62
    d7fe:	06 96       	adiw	r24, 0x06	; 6
    d800:	0f b6       	in	r0, 0x3f	; 63
    d802:	f8 94       	cli
    d804:	9e bf       	out	0x3e, r25	; 62
    d806:	0f be       	out	0x3f, r0	; 63
    d808:	8d bf       	out	0x3d, r24	; 61
    d80a:	81 e0       	ldi	r24, 0x01	; 1
    d80c:	61 e0       	ldi	r22, 0x01	; 1
    d80e:	4b e4       	ldi	r20, 0x4B	; 75
    d810:	52 e1       	ldi	r21, 0x12	; 18
    d812:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_print (1,6,lcdteks);
    d816:	81 e0       	ldi	r24, 0x01	; 1
    d818:	66 e0       	ldi	r22, 0x06	; 6
    d81a:	a8 01       	movw	r20, r16
    d81c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(2,1,PSTR("New :_              "));
    d820:	82 e0       	ldi	r24, 0x02	; 2
    d822:	61 e0       	ldi	r22, 0x01	; 1
    d824:	46 e3       	ldi	r20, 0x36	; 54
    d826:	52 e1       	ldi	r21, 0x12	; 18
    d828:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d82c:	84 e0       	ldi	r24, 0x04	; 4
    d82e:	61 e0       	ldi	r22, 0x01	; 1
    d830:	41 e2       	ldi	r20, 0x21	; 33
    d832:	52 e1       	ldi	r21, 0x12	; 18
    d834:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stSettingOperator=soOperatorNameInput;
    d838:	83 e0       	ldi	r24, 0x03	; 3
    d83a:	fe c1       	rjmp	.+1020   	; 0xdc38 <FSettingOperator+0x566>
	      break;
     case soOperatorNameInput:
          uiResult=USER_NONE;
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
    d83c:	83 e0       	ldi	r24, 0x03	; 3
    d83e:	62 e0       	ldi	r22, 0x02	; 2
    d840:	46 e0       	ldi	r20, 0x06	; 6
    d842:	28 e9       	ldi	r18, 0x98	; 152
    d844:	38 e0       	ldi	r19, 0x08	; 8
    d846:	00 e0       	ldi	r16, 0x00	; 0
    d848:	10 e0       	ldi	r17, 0x00	; 0
    d84a:	a0 e1       	ldi	r26, 0x10	; 16
    d84c:	ea 2e       	mov	r14, r26
    d84e:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  switch(uiResult){
    d852:	83 30       	cpi	r24, 0x03	; 3
    d854:	51 f0       	breq	.+20     	; 0xd86a <FSettingOperator+0x198>
    d856:	84 30       	cpi	r24, 0x04	; 4
    d858:	08 f4       	brcc	.+2      	; 0xd85c <FSettingOperator+0x18a>
    d85a:	f0 c0       	rjmp	.+480    	; 0xda3c <FSettingOperator+0x36a>
    d85c:	84 30       	cpi	r24, 0x04	; 4
    d85e:	09 f4       	brne	.+2      	; 0xd862 <FSettingOperator+0x190>
    d860:	51 c0       	rjmp	.+162    	; 0xd904 <FSettingOperator+0x232>
    d862:	85 30       	cpi	r24, 0x05	; 5
    d864:	09 f0       	breq	.+2      	; 0xd868 <FSettingOperator+0x196>
    d866:	0f c2       	rjmp	.+1054   	; 0xdc86 <FSettingOperator+0x5b4>
    d868:	52 c0       	rjmp	.+164    	; 0xd90e <FSettingOperator+0x23c>
		  case USER_OK:
		       lcd_clear();
    d86a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    d86e:	20 e0       	ldi	r18, 0x00	; 0
    d870:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d872:	ae 01       	movw	r20, r28
    d874:	40 5f       	subi	r20, 0xF0	; 240
    d876:	5f 4f       	sbci	r21, 0xFF	; 255
    d878:	fa 01       	movw	r30, r20
    d87a:	e2 0f       	add	r30, r18
    d87c:	f3 1f       	adc	r31, r19
    d87e:	d9 01       	movw	r26, r18
    d880:	a8 56       	subi	r26, 0x68	; 104
    d882:	b7 4f       	sbci	r27, 0xF7	; 247
    d884:	8c 91       	ld	r24, X
    d886:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d888:	2f 5f       	subi	r18, 0xFF	; 255
    d88a:	3f 4f       	sbci	r19, 0xFF	; 255
    d88c:	2f 30       	cpi	r18, 0x0F	; 15
    d88e:	31 05       	cpc	r19, r1
    d890:	99 f7       	brne	.-26     	; 0xd878 <FSettingOperator+0x1a6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d892:	1f 8e       	std	Y+31, r1	; 0x1f
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
		  switch(uiResult){
		  case USER_OK:
		       lcd_clear();
			   StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
		       sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d894:	00 d0       	rcall	.+0      	; 0xd896 <FSettingOperator+0x1c4>
    d896:	00 d0       	rcall	.+0      	; 0xd898 <FSettingOperator+0x1c6>
    d898:	00 d0       	rcall	.+0      	; 0xd89a <FSettingOperator+0x1c8>
    d89a:	ed b7       	in	r30, 0x3d	; 61
    d89c:	fe b7       	in	r31, 0x3e	; 62
    d89e:	31 96       	adiw	r30, 0x01	; 1
    d8a0:	8e 01       	movw	r16, r28
    d8a2:	0e 5d       	subi	r16, 0xDE	; 222
    d8a4:	1f 4f       	sbci	r17, 0xFF	; 255
    d8a6:	ad b7       	in	r26, 0x3d	; 61
    d8a8:	be b7       	in	r27, 0x3e	; 62
    d8aa:	12 96       	adiw	r26, 0x02	; 2
    d8ac:	1c 93       	st	X, r17
    d8ae:	0e 93       	st	-X, r16
    d8b0:	11 97       	sbiw	r26, 0x01	; 1
    d8b2:	8e e1       	ldi	r24, 0x1E	; 30
    d8b4:	92 e1       	ldi	r25, 0x12	; 18
    d8b6:	93 83       	std	Z+3, r25	; 0x03
    d8b8:	82 83       	std	Z+2, r24	; 0x02
    d8ba:	55 83       	std	Z+5, r21	; 0x05
    d8bc:	44 83       	std	Z+4, r20	; 0x04
    d8be:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   lcd_printf(1,1,PSTR("New Operator:"));
    d8c2:	8d b7       	in	r24, 0x3d	; 61
    d8c4:	9e b7       	in	r25, 0x3e	; 62
    d8c6:	06 96       	adiw	r24, 0x06	; 6
    d8c8:	0f b6       	in	r0, 0x3f	; 63
    d8ca:	f8 94       	cli
    d8cc:	9e bf       	out	0x3e, r25	; 62
    d8ce:	0f be       	out	0x3f, r0	; 63
    d8d0:	8d bf       	out	0x3d, r24	; 61
    d8d2:	81 e0       	ldi	r24, 0x01	; 1
    d8d4:	61 e0       	ldi	r22, 0x01	; 1
    d8d6:	40 e1       	ldi	r20, 0x10	; 16
    d8d8:	52 e1       	ldi	r21, 0x12	; 18
    d8da:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   lcd_print (2,1,lcdteks);
    d8de:	82 e0       	ldi	r24, 0x02	; 2
    d8e0:	61 e0       	ldi	r22, 0x01	; 1
    d8e2:	a8 01       	movw	r20, r16
    d8e4:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   lcd_printf(3,1,PSTR("Save?"));
    d8e8:	83 e0       	ldi	r24, 0x03	; 3
    d8ea:	61 e0       	ldi	r22, 0x01	; 1
    d8ec:	4a e0       	ldi	r20, 0x0A	; 10
    d8ee:	52 e1       	ldi	r21, 0x12	; 18
    d8f0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]No    [#]Yes"));
    d8f4:	84 e0       	ldi	r24, 0x04	; 4
    d8f6:	61 e0       	ldi	r22, 0x01	; 1
    d8f8:	4a ef       	ldi	r20, 0xFA	; 250
    d8fa:	51 e1       	ldi	r21, 0x11	; 17
    d8fc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
               stSettingOperator=soIsSaveOperatorName;
    d900:	84 e0       	ldi	r24, 0x04	; 4
    d902:	9a c1       	rjmp	.+820    	; 0xdc38 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d904:	84 e0       	ldi	r24, 0x04	; 4
    d906:	61 e0       	ldi	r22, 0x01	; 1
    d908:	45 ee       	ldi	r20, 0xE5	; 229
    d90a:	51 e1       	ldi	r21, 0x11	; 17
    d90c:	27 c1       	rjmp	.+590    	; 0xdb5c <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d90e:	84 e0       	ldi	r24, 0x04	; 4
    d910:	61 e0       	ldi	r22, 0x01	; 1
    d912:	40 ed       	ldi	r20, 0xD0	; 208
    d914:	51 e1       	ldi	r21, 0x11	; 17
    d916:	22 c1       	rjmp	.+580    	; 0xdb5c <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soIsSaveOperatorName:
          KeyPressed=_key_scan(1);
    d918:	81 e0       	ldi	r24, 0x01	; 1
    d91a:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d91e:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  switch(KeyChar){
    d922:	83 32       	cpi	r24, 0x23	; 35
    d924:	09 f0       	breq	.+2      	; 0xd928 <FSettingOperator+0x256>
    d926:	51 c0       	rjmp	.+162    	; 0xd9ca <FSettingOperator+0x2f8>
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
    d928:	20 e0       	ldi	r18, 0x00	; 0
    d92a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d92c:	8e 01       	movw	r16, r28
    d92e:	00 5f       	subi	r16, 0xF0	; 240
    d930:	1f 4f       	sbci	r17, 0xFF	; 255
    d932:	f8 01       	movw	r30, r16
    d934:	e2 0f       	add	r30, r18
    d936:	f3 1f       	adc	r31, r19
    d938:	d9 01       	movw	r26, r18
    d93a:	a8 56       	subi	r26, 0x68	; 104
    d93c:	b7 4f       	sbci	r27, 0xF7	; 247
    d93e:	8c 91       	ld	r24, X
    d940:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d942:	2f 5f       	subi	r18, 0xFF	; 255
    d944:	3f 4f       	sbci	r19, 0xFF	; 255
    d946:	2f 30       	cpi	r18, 0x0F	; 15
    d948:	31 05       	cpc	r19, r1
    d94a:	99 f7       	brne	.-26     	; 0xd932 <FSettingOperator+0x260>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d94c:	1f 8e       	std	Y+31, r1	; 0x1f
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
          case '#':
		       StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
               AddSpaceLag(strOperatorName,18); 
    d94e:	c8 01       	movw	r24, r16
    d950:	62 e1       	ldi	r22, 0x12	; 18
    d952:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
		       eeprom_write_block((const void*) &strOperatorName, (void*) &DefOperatorName,18);
    d956:	c8 01       	movw	r24, r16
    d958:	65 e1       	ldi	r22, 0x15	; 21
    d95a:	70 e0       	ldi	r23, 0x00	; 0
    d95c:	42 e1       	ldi	r20, 0x12	; 18
    d95e:	50 e0       	ldi	r21, 0x00	; 0
    d960:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		       lcd_printf(3,1,PSTR("Saved "));
    d964:	83 e0       	ldi	r24, 0x03	; 3
    d966:	61 e0       	ldi	r22, 0x01	; 1
    d968:	49 ec       	ldi	r20, 0xC9	; 201
    d96a:	51 e1       	ldi	r21, 0x11	; 17
    d96c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   TimDisplay=0;
    d970:	10 92 93 01 	sts	0x0193, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d974:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d976:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d978:	81 e0       	ldi	r24, 0x01	; 1
    d97a:	80 93 be 01 	sts	0x01BE, r24
    d97e:	44 c1       	rjmp	.+648    	; 0xdc08 <FSettingOperator+0x536>
		       stSettingOperator=soDelayDisplaySaved;
		       break;
		  }	      
		  break;
     case soChangePasswordInit:
	      lcd_clear();
    d980:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Change Password-"));
    d984:	81 e0       	ldi	r24, 0x01	; 1
    d986:	61 e0       	ldi	r22, 0x01	; 1
    d988:	47 eb       	ldi	r20, 0xB7	; 183
    d98a:	51 e1       	ldi	r21, 0x11	; 17
    d98c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Supervisor"));
    d990:	82 e0       	ldi	r24, 0x02	; 2
    d992:	61 e0       	ldi	r22, 0x01	; 1
    d994:	4a ea       	ldi	r20, 0xAA	; 170
    d996:	51 e1       	ldi	r21, 0x11	; 17
    d998:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Administrator"));
    d99c:	83 e0       	ldi	r24, 0x03	; 3
    d99e:	61 e0       	ldi	r22, 0x01	; 1
    d9a0:	4a e9       	ldi	r20, 0x9A	; 154
    d9a2:	51 e1       	ldi	r21, 0x11	; 17
    d9a4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back     "));
    d9a8:	84 e0       	ldi	r24, 0x04	; 4
    d9aa:	61 e0       	ldi	r22, 0x01	; 1
    d9ac:	4d e8       	ldi	r20, 0x8D	; 141
    d9ae:	51 e1       	ldi	r21, 0x11	; 17
    d9b0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stSettingOperator=soChangePasswordInput; 
    d9b4:	86 e0       	ldi	r24, 0x06	; 6
    d9b6:	40 c1       	rjmp	.+640    	; 0xdc38 <FSettingOperator+0x566>
	      break;
     case soChangePasswordInput:
          KeyPressed=_key_scan(1);
    d9b8:	81 e0       	ldi	r24, 0x01	; 1
    d9ba:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d9be:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  switch(KeyChar){
    d9c2:	81 33       	cpi	r24, 0x31	; 49
    d9c4:	31 f0       	breq	.+12     	; 0xd9d2 <FSettingOperator+0x300>
    d9c6:	82 33       	cpi	r24, 0x32	; 50
    d9c8:	31 f0       	breq	.+12     	; 0xd9d6 <FSettingOperator+0x304>
    d9ca:	8a 32       	cpi	r24, 0x2A	; 42
    d9cc:	09 f0       	breq	.+2      	; 0xd9d0 <FSettingOperator+0x2fe>
    d9ce:	5b c1       	rjmp	.+694    	; 0xdc86 <FSettingOperator+0x5b4>
    d9d0:	53 c1       	rjmp	.+678    	; 0xdc78 <FSettingOperator+0x5a6>
		  case '1':		 
		       PassType=PT_SUPERVISOR;
    d9d2:	81 e0       	ldi	r24, 0x01	; 1
    d9d4:	01 c0       	rjmp	.+2      	; 0xd9d8 <FSettingOperator+0x306>
		       stSettingOperator=soOldPasswordDisplay;
		       break;
          case '2':		       
		       PassType=PT_ADMINISTRATOR;
    d9d6:	82 e0       	ldi	r24, 0x02	; 2
    d9d8:	80 93 20 02 	sts	0x0220, r24
    d9dc:	75 c0       	rjmp	.+234    	; 0xdac8 <FSettingOperator+0x3f6>
		       stSettingOperator=soMenuOption;
		       break;
		  }	      
	      break;
     case soOldPasswordDisplay:
	 	  lcd_clear();
    d9de:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	      if (PassType==PT_SUPERVISOR){
    d9e2:	80 91 20 02 	lds	r24, 0x0220
    d9e6:	81 30       	cpi	r24, 0x01	; 1
    d9e8:	21 f4       	brne	.+8      	; 0xd9f2 <FSettingOperator+0x320>
		      lcd_printf(1,1,PSTR("-Supervisor-"));              
    d9ea:	61 e0       	ldi	r22, 0x01	; 1
    d9ec:	40 e8       	ldi	r20, 0x80	; 128
    d9ee:	51 e1       	ldi	r21, 0x11	; 17
    d9f0:	06 c0       	rjmp	.+12     	; 0xd9fe <FSettingOperator+0x32c>
		  }else if (PassType==PT_ADMINISTRATOR){		       
    d9f2:	82 30       	cpi	r24, 0x02	; 2
    d9f4:	31 f4       	brne	.+12     	; 0xda02 <FSettingOperator+0x330>
		       lcd_printf(1,1,PSTR("-Administrator-"));			   
    d9f6:	81 e0       	ldi	r24, 0x01	; 1
    d9f8:	61 e0       	ldi	r22, 0x01	; 1
    d9fa:	40 e7       	ldi	r20, 0x70	; 112
    d9fc:	51 e1       	ldi	r21, 0x11	; 17
    d9fe:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  }
		      lcd_printf(2,1,PSTR("Old:_"));
    da02:	82 e0       	ldi	r24, 0x02	; 2
    da04:	61 e0       	ldi	r22, 0x01	; 1
    da06:	4a e6       	ldi	r20, 0x6A	; 106
    da08:	51 e1       	ldi	r21, 0x11	; 17
    da0a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da0e:	84 e0       	ldi	r24, 0x04	; 4
    da10:	61 e0       	ldi	r22, 0x01	; 1
    da12:	45 e5       	ldi	r20, 0x55	; 85
    da14:	51 e1       	ldi	r21, 0x11	; 17
    da16:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>

          stSettingOperator=soOldPasswordEntry;
    da1a:	88 e0       	ldi	r24, 0x08	; 8
    da1c:	0d c1       	rjmp	.+538    	; 0xdc38 <FSettingOperator+0x566>
	      break;
     case soOldPasswordEntry:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine1,0,8);           
    da1e:	84 e0       	ldi	r24, 0x04	; 4
    da20:	62 e0       	ldi	r22, 0x02	; 2
    da22:	45 e0       	ldi	r20, 0x05	; 5
    da24:	28 e9       	ldi	r18, 0x98	; 152
    da26:	38 e0       	ldi	r19, 0x08	; 8
    da28:	00 e0       	ldi	r16, 0x00	; 0
    da2a:	10 e0       	ldi	r17, 0x00	; 0
    da2c:	f8 e0       	ldi	r31, 0x08	; 8
    da2e:	ef 2e       	mov	r14, r31
    da30:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  switch(uiResult){
    da34:	83 30       	cpi	r24, 0x03	; 3
    da36:	61 f0       	breq	.+24     	; 0xda50 <FSettingOperator+0x37e>
    da38:	84 30       	cpi	r24, 0x04	; 4
    da3a:	20 f4       	brcc	.+8      	; 0xda44 <FSettingOperator+0x372>
    da3c:	81 30       	cpi	r24, 0x01	; 1
    da3e:	09 f0       	breq	.+2      	; 0xda42 <FSettingOperator+0x370>
    da40:	22 c1       	rjmp	.+580    	; 0xdc86 <FSettingOperator+0x5b4>
    da42:	1a c1       	rjmp	.+564    	; 0xdc78 <FSettingOperator+0x5a6>
    da44:	84 30       	cpi	r24, 0x04	; 4
    da46:	79 f0       	breq	.+30     	; 0xda66 <FSettingOperator+0x394>
    da48:	85 30       	cpi	r24, 0x05	; 5
    da4a:	09 f0       	breq	.+2      	; 0xda4e <FSettingOperator+0x37c>
    da4c:	1c c1       	rjmp	.+568    	; 0xdc86 <FSettingOperator+0x5b4>
    da4e:	10 c0       	rjmp	.+32     	; 0xda70 <FSettingOperator+0x39e>
		  case USER_OK:
		       lcd_printf(2,1,PSTR("New:_               "));
    da50:	82 e0       	ldi	r24, 0x02	; 2
    da52:	61 e0       	ldi	r22, 0x01	; 1
    da54:	40 e4       	ldi	r20, 0x40	; 64
    da56:	51 e1       	ldi	r21, 0x11	; 17
    da58:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da5c:	84 e0       	ldi	r24, 0x04	; 4
    da5e:	61 e0       	ldi	r22, 0x01	; 1
    da60:	4b e2       	ldi	r20, 0x2B	; 43
    da62:	51 e1       	ldi	r21, 0x11	; 17
    da64:	6e c0       	rjmp	.+220    	; 0xdb42 <FSettingOperator+0x470>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    da66:	84 e0       	ldi	r24, 0x04	; 4
    da68:	61 e0       	ldi	r22, 0x01	; 1
    da6a:	46 e1       	ldi	r20, 0x16	; 22
    da6c:	51 e1       	ldi	r21, 0x11	; 17
    da6e:	76 c0       	rjmp	.+236    	; 0xdb5c <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da70:	84 e0       	ldi	r24, 0x04	; 4
    da72:	61 e0       	ldi	r22, 0x01	; 1
    da74:	41 e0       	ldi	r20, 0x01	; 1
    da76:	51 e1       	ldi	r21, 0x11	; 17
    da78:	71 c0       	rjmp	.+226    	; 0xdb5c <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soNewPasswordEntry1:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine2,0,8);           
    da7a:	84 e0       	ldi	r24, 0x04	; 4
    da7c:	62 e0       	ldi	r22, 0x02	; 2
    da7e:	45 e0       	ldi	r20, 0x05	; 5
    da80:	29 ea       	ldi	r18, 0xA9	; 169
    da82:	37 e0       	ldi	r19, 0x07	; 7
    da84:	00 e0       	ldi	r16, 0x00	; 0
    da86:	10 e0       	ldi	r17, 0x00	; 0
    da88:	e8 e0       	ldi	r30, 0x08	; 8
    da8a:	ee 2e       	mov	r14, r30
    da8c:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  switch(uiResult){
    da90:	83 30       	cpi	r24, 0x03	; 3
    da92:	61 f0       	breq	.+24     	; 0xdaac <FSettingOperator+0x3da>
    da94:	84 30       	cpi	r24, 0x04	; 4
    da96:	20 f4       	brcc	.+8      	; 0xdaa0 <FSettingOperator+0x3ce>
    da98:	81 30       	cpi	r24, 0x01	; 1
    da9a:	09 f0       	breq	.+2      	; 0xda9e <FSettingOperator+0x3cc>
    da9c:	f4 c0       	rjmp	.+488    	; 0xdc86 <FSettingOperator+0x5b4>
    da9e:	14 c0       	rjmp	.+40     	; 0xdac8 <FSettingOperator+0x3f6>
    daa0:	84 30       	cpi	r24, 0x04	; 4
    daa2:	a1 f0       	breq	.+40     	; 0xdacc <FSettingOperator+0x3fa>
    daa4:	85 30       	cpi	r24, 0x05	; 5
    daa6:	09 f0       	breq	.+2      	; 0xdaaa <FSettingOperator+0x3d8>
    daa8:	ee c0       	rjmp	.+476    	; 0xdc86 <FSettingOperator+0x5b4>
    daaa:	15 c0       	rjmp	.+42     	; 0xdad6 <FSettingOperator+0x404>
		  case USER_OK:
		       lcd_printf(3,1,PSTR("New:_               "));
    daac:	83 e0       	ldi	r24, 0x03	; 3
    daae:	61 e0       	ldi	r22, 0x01	; 1
    dab0:	4c ee       	ldi	r20, 0xEC	; 236
    dab2:	50 e1       	ldi	r21, 0x10	; 16
    dab4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    dab8:	84 e0       	ldi	r24, 0x04	; 4
    daba:	61 e0       	ldi	r22, 0x01	; 1
    dabc:	47 ed       	ldi	r20, 0xD7	; 215
    dabe:	50 e1       	ldi	r21, 0x10	; 16
    dac0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		       stSettingOperator=soNewPasswordEntry2;
    dac4:	8a e0       	ldi	r24, 0x0A	; 10
    dac6:	b8 c0       	rjmp	.+368    	; 0xdc38 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:		       
			   stSettingOperator=soOldPasswordDisplay;
    dac8:	87 e0       	ldi	r24, 0x07	; 7
    daca:	b6 c0       	rjmp	.+364    	; 0xdc38 <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    dacc:	84 e0       	ldi	r24, 0x04	; 4
    dace:	61 e0       	ldi	r22, 0x01	; 1
    dad0:	42 ec       	ldi	r20, 0xC2	; 194
    dad2:	50 e1       	ldi	r21, 0x10	; 16
    dad4:	43 c0       	rjmp	.+134    	; 0xdb5c <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    dad6:	84 e0       	ldi	r24, 0x04	; 4
    dad8:	61 e0       	ldi	r22, 0x01	; 1
    dada:	4d ea       	ldi	r20, 0xAD	; 173
    dadc:	50 e1       	ldi	r21, 0x10	; 16
    dade:	3e c0       	rjmp	.+124    	; 0xdb5c <FSettingOperator+0x48a>
		       break;
		  }	      
	      break;
     case soNewPasswordEntry2:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,3,5,strFreeMessageLine3,0,8);           
    dae0:	84 e0       	ldi	r24, 0x04	; 4
    dae2:	63 e0       	ldi	r22, 0x03	; 3
    dae4:	45 e0       	ldi	r20, 0x05	; 5
    dae6:	22 e2       	ldi	r18, 0x22	; 34
    dae8:	38 e0       	ldi	r19, 0x08	; 8
    daea:	00 e0       	ldi	r16, 0x00	; 0
    daec:	10 e0       	ldi	r17, 0x00	; 0
    daee:	78 e0       	ldi	r23, 0x08	; 8
    daf0:	e7 2e       	mov	r14, r23
    daf2:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  switch(uiResult){
    daf6:	83 30       	cpi	r24, 0x03	; 3
    daf8:	61 f0       	breq	.+24     	; 0xdb12 <FSettingOperator+0x440>
    dafa:	84 30       	cpi	r24, 0x04	; 4
    dafc:	20 f4       	brcc	.+8      	; 0xdb06 <FSettingOperator+0x434>
    dafe:	81 30       	cpi	r24, 0x01	; 1
    db00:	09 f0       	breq	.+2      	; 0xdb04 <FSettingOperator+0x432>
    db02:	c1 c0       	rjmp	.+386    	; 0xdc86 <FSettingOperator+0x5b4>
    db04:	12 c0       	rjmp	.+36     	; 0xdb2a <FSettingOperator+0x458>
    db06:	84 30       	cpi	r24, 0x04	; 4
    db08:	01 f1       	breq	.+64     	; 0xdb4a <FSettingOperator+0x478>
    db0a:	85 30       	cpi	r24, 0x05	; 5
    db0c:	09 f0       	breq	.+2      	; 0xdb10 <FSettingOperator+0x43e>
    db0e:	bb c0       	rjmp	.+374    	; 0xdc86 <FSettingOperator+0x5b4>
    db10:	21 c0       	rjmp	.+66     	; 0xdb54 <FSettingOperator+0x482>
		  case USER_OK:
		       lcd_clear();
    db12:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
               lcd_printf(2,1,PSTR("Validating.."));
    db16:	82 e0       	ldi	r24, 0x02	; 2
    db18:	61 e0       	ldi	r22, 0x01	; 1
    db1a:	40 ea       	ldi	r20, 0xA0	; 160
    db1c:	50 e1       	ldi	r21, 0x10	; 16
    db1e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   TimDisplay=0;
    db22:	10 92 93 01 	sts	0x0193, r1
		       stSettingOperator=soDispValidatePassword;
    db26:	8b e0       	ldi	r24, 0x0B	; 11
    db28:	87 c0       	rjmp	.+270    	; 0xdc38 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               lcd_clear();
    db2a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
               lcd_printf(2,1,PSTR("New:_               "));
    db2e:	82 e0       	ldi	r24, 0x02	; 2
    db30:	61 e0       	ldi	r22, 0x01	; 1
    db32:	4b e8       	ldi	r20, 0x8B	; 139
    db34:	50 e1       	ldi	r21, 0x10	; 16
    db36:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    db3a:	84 e0       	ldi	r24, 0x04	; 4
    db3c:	61 e0       	ldi	r22, 0x01	; 1
    db3e:	46 e7       	ldi	r20, 0x76	; 118
    db40:	50 e1       	ldi	r21, 0x10	; 16
    db42:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		       stSettingOperator=soNewPasswordEntry1;
    db46:	89 e0       	ldi	r24, 0x09	; 9
    db48:	77 c0       	rjmp	.+238    	; 0xdc38 <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    db4a:	84 e0       	ldi	r24, 0x04	; 4
    db4c:	61 e0       	ldi	r22, 0x01	; 1
    db4e:	41 e6       	ldi	r20, 0x61	; 97
    db50:	50 e1       	ldi	r21, 0x10	; 16
    db52:	04 c0       	rjmp	.+8      	; 0xdb5c <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    db54:	84 e0       	ldi	r24, 0x04	; 4
    db56:	61 e0       	ldi	r22, 0x01	; 1
    db58:	4c e4       	ldi	r20, 0x4C	; 76
    db5a:	50 e1       	ldi	r21, 0x10	; 16
    db5c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    db60:	92 c0       	rjmp	.+292    	; 0xdc86 <FSettingOperator+0x5b4>
		       break;
		  }	      
	      break;
     case soDispValidatePassword:
	      if (TimDisplay>3)stSettingOperator=soValidatePassword;
    db62:	80 91 93 01 	lds	r24, 0x0193
    db66:	84 30       	cpi	r24, 0x04	; 4
    db68:	08 f4       	brcc	.+2      	; 0xdb6c <FSettingOperator+0x49a>
    db6a:	8d c0       	rjmp	.+282    	; 0xdc86 <FSettingOperator+0x5b4>
    db6c:	8c e0       	ldi	r24, 0x0C	; 12
    db6e:	64 c0       	rjmp	.+200    	; 0xdc38 <FSettingOperator+0x566>
	      break;
     case soValidatePassword:
          if (PassType==PT_SUPERVISOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSysPassword, 10);		      			   
    db70:	80 91 20 02 	lds	r24, 0x0220
    db74:	81 30       	cpi	r24, 0x01	; 1
    db76:	29 f4       	brne	.+10     	; 0xdb82 <FSettingOperator+0x4b0>
    db78:	ce 01       	movw	r24, r28
    db7a:	01 96       	adiw	r24, 0x01	; 1
    db7c:	6b e0       	ldi	r22, 0x0B	; 11
    db7e:	70 e0       	ldi	r23, 0x00	; 0
    db80:	06 c0       	rjmp	.+12     	; 0xdb8e <FSettingOperator+0x4bc>
		  else 
		  if (PassType==PT_ADMINISTRATOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSpvPassword, 10);    
    db82:	82 30       	cpi	r24, 0x02	; 2
    db84:	41 f4       	brne	.+16     	; 0xdb96 <FSettingOperator+0x4c4>
    db86:	ce 01       	movw	r24, r28
    db88:	01 96       	adiw	r24, 0x01	; 1
    db8a:	61 e0       	ldi	r22, 0x01	; 1
    db8c:	70 e0       	ldi	r23, 0x00	; 0
    db8e:	4a e0       	ldi	r20, 0x0A	; 10
    db90:	50 e0       	ldi	r21, 0x00	; 0
    db92:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  
		  //Check Old Validity
		  if (strcmp(strPassword,strFreeMessageLine1)==0){//OldMessage Valid
    db96:	ce 01       	movw	r24, r28
    db98:	01 96       	adiw	r24, 0x01	; 1
    db9a:	68 e9       	ldi	r22, 0x98	; 152
    db9c:	78 e0       	ldi	r23, 0x08	; 8
    db9e:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    dba2:	00 97       	sbiw	r24, 0x00	; 0
    dba4:	09 f0       	breq	.+2      	; 0xdba8 <FSettingOperator+0x4d6>
    dba6:	4b c0       	rjmp	.+150    	; 0xdc3e <FSettingOperator+0x56c>
              if (strcmp(strFreeMessageLine2,strFreeMessageLine3)==0){
    dba8:	89 ea       	ldi	r24, 0xA9	; 169
    dbaa:	97 e0       	ldi	r25, 0x07	; 7
    dbac:	62 e2       	ldi	r22, 0x22	; 34
    dbae:	78 e0       	ldi	r23, 0x08	; 8
    dbb0:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    dbb4:	00 97       	sbiw	r24, 0x00	; 0
    dbb6:	51 f5       	brne	.+84     	; 0xdc0c <FSettingOperator+0x53a>
                  
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
    dbb8:	80 91 20 02 	lds	r24, 0x0220
    dbbc:	81 30       	cpi	r24, 0x01	; 1
    dbbe:	29 f4       	brne	.+10     	; 0xdbca <FSettingOperator+0x4f8>
    dbc0:	89 ea       	ldi	r24, 0xA9	; 169
    dbc2:	97 e0       	ldi	r25, 0x07	; 7
    dbc4:	6b e0       	ldi	r22, 0x0B	; 11
    dbc6:	70 e0       	ldi	r23, 0x00	; 0
    dbc8:	06 c0       	rjmp	.+12     	; 0xdbd6 <FSettingOperator+0x504>
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    
    dbca:	82 30       	cpi	r24, 0x02	; 2
    dbcc:	41 f4       	brne	.+16     	; 0xdbde <FSettingOperator+0x50c>
    dbce:	89 ea       	ldi	r24, 0xA9	; 169
    dbd0:	97 e0       	ldi	r25, 0x07	; 7
    dbd2:	61 e0       	ldi	r22, 0x01	; 1
    dbd4:	70 e0       	ldi	r23, 0x00	; 0
    dbd6:	4a e0       	ldi	r20, 0x0A	; 10
    dbd8:	50 e0       	ldi	r21, 0x00	; 0
    dbda:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    dbde:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    dbe0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    dbe2:	81 e0       	ldi	r24, 0x01	; 1
    dbe4:	80 93 be 01 	sts	0x01BE, r24
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    

			      system_beep(1);
				  lcd_clear();
    dbe8:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
			      lcd_printf(2,1,PSTR("     Completed      "));
    dbec:	82 e0       	ldi	r24, 0x02	; 2
    dbee:	61 e0       	ldi	r22, 0x01	; 1
    dbf0:	47 e3       	ldi	r20, 0x37	; 55
    dbf2:	50 e1       	ldi	r21, 0x10	; 16
    dbf4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
    dbf8:	83 e0       	ldi	r24, 0x03	; 3
    dbfa:	61 e0       	ldi	r22, 0x01	; 1
    dbfc:	42 e2       	ldi	r20, 0x22	; 34
    dbfe:	50 e1       	ldi	r21, 0x10	; 16
    dc00:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				  TimDisplay=0;
    dc04:	10 92 93 01 	sts	0x0193, r1
				  stSettingOperator=soDelayDisplaySaved;
    dc08:	8e e0       	ldi	r24, 0x0E	; 14
    dc0a:	16 c0       	rjmp	.+44     	; 0xdc38 <FSettingOperator+0x566>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    dc0c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    dc0e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    dc10:	82 e0       	ldi	r24, 0x02	; 2
    dc12:	80 93 be 01 	sts	0x01BE, r24
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
				  TimDisplay=0;
				  stSettingOperator=soDelayDisplaySaved;
			  }else {
			  system_beep(2);
		      TimDisplay=0;
    dc16:	10 92 93 01 	sts	0x0193, r1
		      lcd_clear();
    dc1a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		      lcd_printf(2,1,PSTR("      ERROR         "));
    dc1e:	82 e0       	ldi	r24, 0x02	; 2
    dc20:	61 e0       	ldi	r22, 0x01	; 1
    dc22:	4d e0       	ldi	r20, 0x0D	; 13
    dc24:	50 e1       	ldi	r21, 0x10	; 16
    dc26:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      lcd_printf(3,1,PSTR("Invalid New Password"));
    dc2a:	83 e0       	ldi	r24, 0x03	; 3
    dc2c:	61 e0       	ldi	r22, 0x01	; 1
    dc2e:	48 ef       	ldi	r20, 0xF8	; 248
    dc30:	5f e0       	ldi	r21, 0x0F	; 15
    dc32:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      stSettingOperator=soDisplayInvalidPassword;
    dc36:	8d e0       	ldi	r24, 0x0D	; 13
    dc38:	80 93 21 02 	sts	0x0221, r24
    dc3c:	24 c0       	rjmp	.+72     	; 0xdc86 <FSettingOperator+0x5b4>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    dc3e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    dc40:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    dc42:	82 e0       	ldi	r24, 0x02	; 2
    dc44:	80 93 be 01 	sts	0x01BE, r24
		      stSettingOperator=soDisplayInvalidPassword;
			  }
		  }else {
		   //InvalidOld Password
		   system_beep(2);
		   TimDisplay=0;
    dc48:	10 92 93 01 	sts	0x0193, r1
		   lcd_clear();
    dc4c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		   lcd_printf(2,1,PSTR("      ERROR         "));
    dc50:	82 e0       	ldi	r24, 0x02	; 2
    dc52:	61 e0       	ldi	r22, 0x01	; 1
    dc54:	43 ee       	ldi	r20, 0xE3	; 227
    dc56:	5f e0       	ldi	r21, 0x0F	; 15
    dc58:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		   lcd_printf(3,1,PSTR("Invalid Old Password"));
    dc5c:	83 e0       	ldi	r24, 0x03	; 3
    dc5e:	61 e0       	ldi	r22, 0x01	; 1
    dc60:	4e ec       	ldi	r20, 0xCE	; 206
    dc62:	5f e0       	ldi	r21, 0x0F	; 15
    dc64:	e6 cf       	rjmp	.-52     	; 0xdc32 <FSettingOperator+0x560>
		   stSettingOperator=soDisplayInvalidPassword;
		   }
	      break;
     case soDisplayInvalidPassword:
	      if (TimDisplay>6)stSettingOperator=soMenuOption;
    dc66:	80 91 93 01 	lds	r24, 0x0193
    dc6a:	87 30       	cpi	r24, 0x07	; 7
    dc6c:	60 f0       	brcs	.+24     	; 0xdc86 <FSettingOperator+0x5b4>
    dc6e:	04 c0       	rjmp	.+8      	; 0xdc78 <FSettingOperator+0x5a6>
	      break;
     case soDelayDisplaySaved:
	      if (TimDisplay>4)stSettingOperator=soMenuOption;
    dc70:	80 91 93 01 	lds	r24, 0x0193
    dc74:	85 30       	cpi	r24, 0x05	; 5
    dc76:	38 f0       	brcs	.+14     	; 0xdc86 <FSettingOperator+0x5b4>
    dc78:	10 92 21 02 	sts	0x0221, r1
    dc7c:	04 c0       	rjmp	.+8      	; 0xdc86 <FSettingOperator+0x5b4>
	      break;
	 case soExitSettingOperator:
	      stSettingOperator=soMenuOption;
    dc7e:	10 92 21 02 	sts	0x0221, r1
    dc82:	81 e0       	ldi	r24, 0x01	; 1
    dc84:	01 c0       	rjmp	.+2      	; 0xdc88 <FSettingOperator+0x5b6>
    dc86:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    dc88:	e5 96       	adiw	r28, 0x35	; 53
    dc8a:	0f b6       	in	r0, 0x3f	; 63
    dc8c:	f8 94       	cli
    dc8e:	de bf       	out	0x3e, r29	; 62
    dc90:	0f be       	out	0x3f, r0	; 63
    dc92:	cd bf       	out	0x3d, r28	; 61
    dc94:	cf 91       	pop	r28
    dc96:	df 91       	pop	r29
    dc98:	1f 91       	pop	r17
    dc9a:	0f 91       	pop	r16
    dc9c:	ef 90       	pop	r14
    dc9e:	08 95       	ret

0000dca0 <FSettingProduct>:

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    dca0:	6f 92       	push	r6
    dca2:	7f 92       	push	r7
    dca4:	8f 92       	push	r8
    dca6:	9f 92       	push	r9
    dca8:	af 92       	push	r10
    dcaa:	bf 92       	push	r11
    dcac:	cf 92       	push	r12
    dcae:	df 92       	push	r13
    dcb0:	ef 92       	push	r14
    dcb2:	ff 92       	push	r15
    dcb4:	0f 93       	push	r16
    dcb6:	1f 93       	push	r17
    dcb8:	df 93       	push	r29
    dcba:	cf 93       	push	r28
    dcbc:	cd b7       	in	r28, 0x3d	; 61
    dcbe:	de b7       	in	r29, 0x3e	; 62
    dcc0:	a1 97       	sbiw	r28, 0x21	; 33
    dcc2:	0f b6       	in	r0, 0x3f	; 63
    dcc4:	f8 94       	cli
    dcc6:	de bf       	out	0x3e, r29	; 62
    dcc8:	0f be       	out	0x3f, r0	; 63
    dcca:	cd bf       	out	0x3d, r28	; 61
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
    dccc:	80 91 24 02 	lds	r24, 0x0224
    dcd0:	83 30       	cpi	r24, 0x03	; 3
    dcd2:	09 f4       	brne	.+2      	; 0xdcd6 <FSettingProduct+0x36>
    dcd4:	f9 c0       	rjmp	.+498    	; 0xdec8 <FSettingProduct+0x228>
    dcd6:	84 30       	cpi	r24, 0x04	; 4
    dcd8:	38 f4       	brcc	.+14     	; 0xdce8 <FSettingProduct+0x48>
    dcda:	81 30       	cpi	r24, 0x01	; 1
    dcdc:	09 f4       	brne	.+2      	; 0xdce0 <FSettingProduct+0x40>
    dcde:	70 c0       	rjmp	.+224    	; 0xddc0 <FSettingProduct+0x120>
    dce0:	82 30       	cpi	r24, 0x02	; 2
    dce2:	08 f0       	brcs	.+2      	; 0xdce6 <FSettingProduct+0x46>
    dce4:	80 c0       	rjmp	.+256    	; 0xdde6 <FSettingProduct+0x146>
    dce6:	0a c0       	rjmp	.+20     	; 0xdcfc <FSettingProduct+0x5c>
    dce8:	85 30       	cpi	r24, 0x05	; 5
    dcea:	09 f4       	brne	.+2      	; 0xdcee <FSettingProduct+0x4e>
    dcec:	79 c1       	rjmp	.+754    	; 0xdfe0 <FSettingProduct+0x340>
    dcee:	85 30       	cpi	r24, 0x05	; 5
    dcf0:	08 f4       	brcc	.+2      	; 0xdcf4 <FSettingProduct+0x54>
    dcf2:	94 c1       	rjmp	.+808    	; 0xe01c <FSettingProduct+0x37c>
    dcf4:	86 30       	cpi	r24, 0x06	; 6
    dcf6:	09 f0       	breq	.+2      	; 0xdcfa <FSettingProduct+0x5a>
    dcf8:	b7 c1       	rjmp	.+878    	; 0xe068 <FSettingProduct+0x3c8>
    dcfa:	b2 c1       	rjmp	.+868    	; 0xe060 <FSettingProduct+0x3c0>
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    dcfc:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    dd00:	70 ec       	ldi	r23, 0xC0	; 192
    dd02:	c7 2e       	mov	r12, r23
    dd04:	70 e0       	ldi	r23, 0x00	; 0
    dd06:	d7 2e       	mov	r13, r23
    dd08:	61 e0       	ldi	r22, 0x01	; 1
    dd0a:	e6 2e       	mov	r14, r22
    dd0c:	f1 2c       	mov	r15, r1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    dd0e:	4e 01       	movw	r8, r28
    dd10:	08 94       	sec
    dd12:	81 1c       	adc	r8, r1
    dd14:	91 1c       	adc	r9, r1
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    dd16:	5e e0       	ldi	r21, 0x0E	; 14
    dd18:	a5 2e       	mov	r10, r21
    dd1a:	b1 2c       	mov	r11, r1
    dd1c:	ac 0e       	add	r10, r28
    dd1e:	bd 1e       	adc	r11, r29
    dd20:	48 ea       	ldi	r20, 0xA8	; 168
    dd22:	64 2e       	mov	r6, r20
    dd24:	43 e1       	ldi	r20, 0x13	; 19
    dd26:	74 2e       	mov	r7, r20
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    dd28:	0a e0       	ldi	r16, 0x0A	; 10
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    dd2a:	1e 2d       	mov	r17, r14
    dd2c:	11 50       	subi	r17, 0x01	; 1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    dd2e:	c4 01       	movw	r24, r8
    dd30:	b6 01       	movw	r22, r12
    dd32:	4d e0       	ldi	r20, 0x0D	; 13
    dd34:	50 e0       	ldi	r21, 0x00	; 0
    dd36:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    dd3a:	8d b7       	in	r24, 0x3d	; 61
    dd3c:	9e b7       	in	r25, 0x3e	; 62
    dd3e:	08 97       	sbiw	r24, 0x08	; 8
    dd40:	0f b6       	in	r0, 0x3f	; 63
    dd42:	f8 94       	cli
    dd44:	9e bf       	out	0x3e, r25	; 62
    dd46:	0f be       	out	0x3f, r0	; 63
    dd48:	8d bf       	out	0x3d, r24	; 61
    dd4a:	ed b7       	in	r30, 0x3d	; 61
    dd4c:	fe b7       	in	r31, 0x3e	; 62
    dd4e:	31 96       	adiw	r30, 0x01	; 1
    dd50:	ad b7       	in	r26, 0x3d	; 61
    dd52:	be b7       	in	r27, 0x3e	; 62
    dd54:	12 96       	adiw	r26, 0x02	; 2
    dd56:	bc 92       	st	X, r11
    dd58:	ae 92       	st	-X, r10
    dd5a:	11 97       	sbiw	r26, 0x01	; 1
    dd5c:	73 82       	std	Z+3, r7	; 0x03
    dd5e:	62 82       	std	Z+2, r6	; 0x02
    dd60:	f5 82       	std	Z+5, r15	; 0x05
    dd62:	e4 82       	std	Z+4, r14	; 0x04
    dd64:	97 82       	std	Z+7, r9	; 0x07
    dd66:	86 82       	std	Z+6, r8	; 0x06
    dd68:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    dd6c:	8d b7       	in	r24, 0x3d	; 61
    dd6e:	9e b7       	in	r25, 0x3e	; 62
    dd70:	08 96       	adiw	r24, 0x08	; 8
    dd72:	0f b6       	in	r0, 0x3f	; 63
    dd74:	f8 94       	cli
    dd76:	9e bf       	out	0x3e, r25	; 62
    dd78:	0f be       	out	0x3f, r0	; 63
    dd7a:	8d bf       	out	0x3d, r24	; 61
    dd7c:	61 2f       	mov	r22, r17
    dd7e:	66 95       	lsr	r22
    dd80:	66 95       	lsr	r22
    dd82:	60 9f       	mul	r22, r16
    dd84:	b0 01       	movw	r22, r0
    dd86:	11 24       	eor	r1, r1
    dd88:	6f 5f       	subi	r22, 0xFF	; 255
    dd8a:	13 70       	andi	r17, 0x03	; 3
    dd8c:	81 2f       	mov	r24, r17
    dd8e:	8f 5f       	subi	r24, 0xFF	; 255
    dd90:	a5 01       	movw	r20, r10
    dd92:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    dd96:	ad e0       	ldi	r26, 0x0D	; 13
    dd98:	b0 e0       	ldi	r27, 0x00	; 0
    dd9a:	ca 0e       	add	r12, r26
    dd9c:	db 1e       	adc	r13, r27
    dd9e:	08 94       	sec
    dda0:	e1 1c       	adc	r14, r1
    dda2:	f1 1c       	adc	r15, r1
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
    dda4:	be e0       	ldi	r27, 0x0E	; 14
    dda6:	cb 16       	cp	r12, r27
    dda8:	b1 e0       	ldi	r27, 0x01	; 1
    ddaa:	db 06       	cpc	r13, r27
    ddac:	09 f0       	breq	.+2      	; 0xddb0 <FSettingProduct+0x110>
    ddae:	bd cf       	rjmp	.-134    	; 0xdd2a <FSettingProduct+0x8a>
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
		  }
		  lcd_printf(4,11,PSTR("*)Back"));
    ddb0:	84 e0       	ldi	r24, 0x04	; 4
    ddb2:	6b e0       	ldi	r22, 0x0B	; 11
    ddb4:	41 ea       	ldi	r20, 0xA1	; 161
    ddb6:	53 e1       	ldi	r21, 0x13	; 19
    ddb8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stMenuProduct=mpChangeProduct;
    ddbc:	81 e0       	ldi	r24, 0x01	; 1
    ddbe:	4a c1       	rjmp	.+660    	; 0xe054 <FSettingProduct+0x3b4>
	      break;
     case mpChangeProduct:
		  KeyPressed=_key_scan(1);
    ddc0:	81 e0       	ldi	r24, 0x01	; 1
    ddc2:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    ddc6:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
    ddc8:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    ddcc:	81 53       	subi	r24, 0x31	; 49
    ddce:	86 30       	cpi	r24, 0x06	; 6
    ddd0:	28 f4       	brcc	.+10     	; 0xdddc <FSettingProduct+0x13c>
		      ProdID=KeyChar-'1';
    ddd2:	80 93 23 02 	sts	0x0223, r24
			  stMenuProduct=mpDispPrice;
    ddd6:	82 e0       	ldi	r24, 0x02	; 2
    ddd8:	80 93 24 02 	sts	0x0224, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
    dddc:	17 3e       	cpi	r17, 0xE7	; 231
    ddde:	09 f0       	breq	.+2      	; 0xdde2 <FSettingProduct+0x142>
    dde0:	43 c1       	rjmp	.+646    	; 0xe068 <FSettingProduct+0x3c8>
		      stMenuProduct=mpExitMenuProduct;
    dde2:	86 e0       	ldi	r24, 0x06	; 6
    dde4:	37 c1       	rjmp	.+622    	; 0xe054 <FSettingProduct+0x3b4>
		  }
	      break;
     case mpDispPrice:
	 	  eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    dde6:	60 91 23 02 	lds	r22, 0x0223
    ddea:	8d e0       	ldi	r24, 0x0D	; 13
    ddec:	68 9f       	mul	r22, r24
    ddee:	b0 01       	movw	r22, r0
    ddf0:	11 24       	eor	r1, r1
    ddf2:	60 54       	subi	r22, 0x40	; 64
    ddf4:	7f 4f       	sbci	r23, 0xFF	; 255
    ddf6:	7e 01       	movw	r14, r28
    ddf8:	08 94       	sec
    ddfa:	e1 1c       	adc	r14, r1
    ddfc:	f1 1c       	adc	r15, r1
    ddfe:	c7 01       	movw	r24, r14
    de00:	4d e0       	ldi	r20, 0x0D	; 13
    de02:	50 e0       	ldi	r21, 0x00	; 0
    de04:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[ProdID], 9);
    de08:	34 ea       	ldi	r19, 0xA4	; 164
    de0a:	c3 2e       	mov	r12, r19
    de0c:	35 e0       	ldi	r19, 0x05	; 5
    de0e:	d3 2e       	mov	r13, r19
    de10:	60 91 23 02 	lds	r22, 0x0223
    de14:	89 e0       	ldi	r24, 0x09	; 9
    de16:	68 9f       	mul	r22, r24
    de18:	b0 01       	movw	r22, r0
    de1a:	11 24       	eor	r1, r1
    de1c:	66 57       	subi	r22, 0x76	; 118
    de1e:	7f 4f       	sbci	r23, 0xFF	; 255
    de20:	c6 01       	movw	r24, r12
    de22:	49 e0       	ldi	r20, 0x09	; 9
    de24:	50 e0       	ldi	r21, 0x00	; 0
    de26:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("1)%s"),strProductName);
    de2a:	00 d0       	rcall	.+0      	; 0xde2c <FSettingProduct+0x18c>
    de2c:	00 d0       	rcall	.+0      	; 0xde2e <FSettingProduct+0x18e>
    de2e:	00 d0       	rcall	.+0      	; 0xde30 <FSettingProduct+0x190>
    de30:	ed b7       	in	r30, 0x3d	; 61
    de32:	fe b7       	in	r31, 0x3e	; 62
    de34:	31 96       	adiw	r30, 0x01	; 1
    de36:	8e 01       	movw	r16, r28
    de38:	02 5f       	subi	r16, 0xF2	; 242
    de3a:	1f 4f       	sbci	r17, 0xFF	; 255
    de3c:	ad b7       	in	r26, 0x3d	; 61
    de3e:	be b7       	in	r27, 0x3e	; 62
    de40:	12 96       	adiw	r26, 0x02	; 2
    de42:	1c 93       	st	X, r17
    de44:	0e 93       	st	-X, r16
    de46:	11 97       	sbiw	r26, 0x01	; 1
    de48:	8c e9       	ldi	r24, 0x9C	; 156
    de4a:	93 e1       	ldi	r25, 0x13	; 19
    de4c:	93 83       	std	Z+3, r25	; 0x03
    de4e:	82 83       	std	Z+2, r24	; 0x02
    de50:	f5 82       	std	Z+5, r15	; 0x05
    de52:	e4 82       	std	Z+4, r14	; 0x04
    de54:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_clear();lcd_print(1,1,lcdteks);
    de58:	8d b7       	in	r24, 0x3d	; 61
    de5a:	9e b7       	in	r25, 0x3e	; 62
    de5c:	06 96       	adiw	r24, 0x06	; 6
    de5e:	0f b6       	in	r0, 0x3f	; 63
    de60:	f8 94       	cli
    de62:	9e bf       	out	0x3e, r25	; 62
    de64:	0f be       	out	0x3f, r0	; 63
    de66:	8d bf       	out	0x3d, r24	; 61
    de68:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    de6c:	81 e0       	ldi	r24, 0x01	; 1
    de6e:	61 e0       	ldi	r22, 0x01	; 1
    de70:	a8 01       	movw	r20, r16
    de72:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2)%s"),strPrice);
    de76:	00 d0       	rcall	.+0      	; 0xde78 <FSettingProduct+0x1d8>
    de78:	00 d0       	rcall	.+0      	; 0xde7a <FSettingProduct+0x1da>
    de7a:	00 d0       	rcall	.+0      	; 0xde7c <FSettingProduct+0x1dc>
    de7c:	ed b7       	in	r30, 0x3d	; 61
    de7e:	fe b7       	in	r31, 0x3e	; 62
    de80:	31 96       	adiw	r30, 0x01	; 1
    de82:	ad b7       	in	r26, 0x3d	; 61
    de84:	be b7       	in	r27, 0x3e	; 62
    de86:	12 96       	adiw	r26, 0x02	; 2
    de88:	1c 93       	st	X, r17
    de8a:	0e 93       	st	-X, r16
    de8c:	11 97       	sbiw	r26, 0x01	; 1
    de8e:	87 e9       	ldi	r24, 0x97	; 151
    de90:	93 e1       	ldi	r25, 0x13	; 19
    de92:	93 83       	std	Z+3, r25	; 0x03
    de94:	82 83       	std	Z+2, r24	; 0x02
    de96:	d5 82       	std	Z+5, r13	; 0x05
    de98:	c4 82       	std	Z+4, r12	; 0x04
    de9a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    de9e:	8d b7       	in	r24, 0x3d	; 61
    dea0:	9e b7       	in	r25, 0x3e	; 62
    dea2:	06 96       	adiw	r24, 0x06	; 6
    dea4:	0f b6       	in	r0, 0x3f	; 63
    dea6:	f8 94       	cli
    dea8:	9e bf       	out	0x3e, r25	; 62
    deaa:	0f be       	out	0x3f, r0	; 63
    deac:	8d bf       	out	0x3d, r24	; 61
    deae:	82 e0       	ldi	r24, 0x02	; 2
    deb0:	61 e0       	ldi	r22, 0x01	; 1
    deb2:	a8 01       	movw	r20, r16
    deb4:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(4,1,PSTR("*)Back       "));
    deb8:	84 e0       	ldi	r24, 0x04	; 4
    deba:	61 e0       	ldi	r22, 0x01	; 1
    debc:	49 e8       	ldi	r20, 0x89	; 137
    debe:	53 e1       	ldi	r21, 0x13	; 19
    dec0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stMenuProduct=mpIsEdit;
    dec4:	83 e0       	ldi	r24, 0x03	; 3
    dec6:	c6 c0       	rjmp	.+396    	; 0xe054 <FSettingProduct+0x3b4>
	      break;
     case mpIsEdit:
		  KeyPressed=_key_scan(1);
    dec8:	81 e0       	ldi	r24, 0x01	; 1
    deca:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    dece:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  if (KeyChar=='*'){
    ded2:	8a 32       	cpi	r24, 0x2A	; 42
    ded4:	09 f4       	brne	.+2      	; 0xded8 <FSettingProduct+0x238>
    ded6:	9f c0       	rjmp	.+318    	; 0xe016 <FSettingProduct+0x376>
		      stMenuProduct=mpInitProduct;
		  }else
		  if (KeyChar=='1'){
    ded8:	81 33       	cpi	r24, 0x31	; 49
    deda:	09 f0       	breq	.+2      	; 0xdede <FSettingProduct+0x23e>
    dedc:	4a c0       	rjmp	.+148    	; 0xdf72 <FSettingProduct+0x2d2>
		      eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    dede:	60 91 23 02 	lds	r22, 0x0223
    dee2:	8d e0       	ldi	r24, 0x0D	; 13
    dee4:	68 9f       	mul	r22, r24
    dee6:	b0 01       	movw	r22, r0
    dee8:	11 24       	eor	r1, r1
    deea:	60 54       	subi	r22, 0x40	; 64
    deec:	7f 4f       	sbci	r23, 0xFF	; 255
    deee:	8e 01       	movw	r16, r28
    def0:	0f 5f       	subi	r16, 0xFF	; 255
    def2:	1f 4f       	sbci	r17, 0xFF	; 255
    def4:	c8 01       	movw	r24, r16
    def6:	4d e0       	ldi	r20, 0x0D	; 13
    def8:	50 e0       	ldi	r21, 0x00	; 0
    defa:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		      sprintf_P(lcdteks,PSTR("Old:%s"),strProductName);
    defe:	00 d0       	rcall	.+0      	; 0xdf00 <FSettingProduct+0x260>
    df00:	00 d0       	rcall	.+0      	; 0xdf02 <FSettingProduct+0x262>
    df02:	00 d0       	rcall	.+0      	; 0xdf04 <FSettingProduct+0x264>
    df04:	ed b7       	in	r30, 0x3d	; 61
    df06:	fe b7       	in	r31, 0x3e	; 62
    df08:	31 96       	adiw	r30, 0x01	; 1
    df0a:	2e e0       	ldi	r18, 0x0E	; 14
    df0c:	e2 2e       	mov	r14, r18
    df0e:	f1 2c       	mov	r15, r1
    df10:	ec 0e       	add	r14, r28
    df12:	fd 1e       	adc	r15, r29
    df14:	ad b7       	in	r26, 0x3d	; 61
    df16:	be b7       	in	r27, 0x3e	; 62
    df18:	12 96       	adiw	r26, 0x02	; 2
    df1a:	fc 92       	st	X, r15
    df1c:	ee 92       	st	-X, r14
    df1e:	11 97       	sbiw	r26, 0x01	; 1
    df20:	82 e8       	ldi	r24, 0x82	; 130
    df22:	93 e1       	ldi	r25, 0x13	; 19
    df24:	93 83       	std	Z+3, r25	; 0x03
    df26:	82 83       	std	Z+2, r24	; 0x02
    df28:	15 83       	std	Z+5, r17	; 0x05
    df2a:	04 83       	std	Z+4, r16	; 0x04
    df2c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  lcd_printf(1,1,PSTR("Edit Product Name   "));
    df30:	8d b7       	in	r24, 0x3d	; 61
    df32:	9e b7       	in	r25, 0x3e	; 62
    df34:	06 96       	adiw	r24, 0x06	; 6
    df36:	0f b6       	in	r0, 0x3f	; 63
    df38:	f8 94       	cli
    df3a:	9e bf       	out	0x3e, r25	; 62
    df3c:	0f be       	out	0x3f, r0	; 63
    df3e:	8d bf       	out	0x3d, r24	; 61
    df40:	81 e0       	ldi	r24, 0x01	; 1
    df42:	61 e0       	ldi	r22, 0x01	; 1
    df44:	4d e6       	ldi	r20, 0x6D	; 109
    df46:	53 e1       	ldi	r21, 0x13	; 19
    df48:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		       lcd_print(2,1,lcdteks);
    df4c:	82 e0       	ldi	r24, 0x02	; 2
    df4e:	61 e0       	ldi	r22, 0x01	; 1
    df50:	a7 01       	movw	r20, r14
    df52:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    df56:	83 e0       	ldi	r24, 0x03	; 3
    df58:	61 e0       	ldi	r22, 0x01	; 1
    df5a:	47 e6       	ldi	r20, 0x67	; 103
    df5c:	53 e1       	ldi	r21, 0x13	; 19
    df5e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    df62:	84 e0       	ldi	r24, 0x04	; 4
    df64:	61 e0       	ldi	r22, 0x01	; 1
    df66:	42 e5       	ldi	r20, 0x52	; 82
    df68:	53 e1       	ldi	r21, 0x13	; 19
    df6a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      stMenuProduct=mpEditProductName;
    df6e:	85 e0       	ldi	r24, 0x05	; 5
    df70:	71 c0       	rjmp	.+226    	; 0xe054 <FSettingProduct+0x3b4>
		  }else
		  if (KeyChar=='2'){
    df72:	82 33       	cpi	r24, 0x32	; 50
    df74:	09 f0       	breq	.+2      	; 0xdf78 <FSettingProduct+0x2d8>
    df76:	78 c0       	rjmp	.+240    	; 0xe068 <FSettingProduct+0x3c8>
		      uiResult=USER_NONE;
		      sprintf_P(lcdteks,PSTR("Old:%s"),strPrice);
    df78:	00 d0       	rcall	.+0      	; 0xdf7a <FSettingProduct+0x2da>
    df7a:	00 d0       	rcall	.+0      	; 0xdf7c <FSettingProduct+0x2dc>
    df7c:	00 d0       	rcall	.+0      	; 0xdf7e <FSettingProduct+0x2de>
    df7e:	ed b7       	in	r30, 0x3d	; 61
    df80:	fe b7       	in	r31, 0x3e	; 62
    df82:	31 96       	adiw	r30, 0x01	; 1
    df84:	8e 01       	movw	r16, r28
    df86:	02 5f       	subi	r16, 0xF2	; 242
    df88:	1f 4f       	sbci	r17, 0xFF	; 255
    df8a:	ad b7       	in	r26, 0x3d	; 61
    df8c:	be b7       	in	r27, 0x3e	; 62
    df8e:	12 96       	adiw	r26, 0x02	; 2
    df90:	1c 93       	st	X, r17
    df92:	0e 93       	st	-X, r16
    df94:	11 97       	sbiw	r26, 0x01	; 1
    df96:	8b e4       	ldi	r24, 0x4B	; 75
    df98:	93 e1       	ldi	r25, 0x13	; 19
    df9a:	93 83       	std	Z+3, r25	; 0x03
    df9c:	82 83       	std	Z+2, r24	; 0x02
    df9e:	84 ea       	ldi	r24, 0xA4	; 164
    dfa0:	95 e0       	ldi	r25, 0x05	; 5
    dfa2:	95 83       	std	Z+5, r25	; 0x05
    dfa4:	84 83       	std	Z+4, r24	; 0x04
    dfa6:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		       lcd_print(2,1,lcdteks);
    dfaa:	8d b7       	in	r24, 0x3d	; 61
    dfac:	9e b7       	in	r25, 0x3e	; 62
    dfae:	06 96       	adiw	r24, 0x06	; 6
    dfb0:	0f b6       	in	r0, 0x3f	; 63
    dfb2:	f8 94       	cli
    dfb4:	9e bf       	out	0x3e, r25	; 62
    dfb6:	0f be       	out	0x3f, r0	; 63
    dfb8:	8d bf       	out	0x3d, r24	; 61
    dfba:	82 e0       	ldi	r24, 0x02	; 2
    dfbc:	61 e0       	ldi	r22, 0x01	; 1
    dfbe:	a8 01       	movw	r20, r16
    dfc0:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    dfc4:	83 e0       	ldi	r24, 0x03	; 3
    dfc6:	61 e0       	ldi	r22, 0x01	; 1
    dfc8:	45 e4       	ldi	r20, 0x45	; 69
    dfca:	53 e1       	ldi	r21, 0x13	; 19
    dfcc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    dfd0:	84 e0       	ldi	r24, 0x04	; 4
    dfd2:	61 e0       	ldi	r22, 0x01	; 1
    dfd4:	40 e3       	ldi	r20, 0x30	; 48
    dfd6:	53 e1       	ldi	r21, 0x13	; 19
    dfd8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      stMenuProduct=mpEditPrice;
    dfdc:	84 e0       	ldi	r24, 0x04	; 4
    dfde:	3a c0       	rjmp	.+116    	; 0xe054 <FSettingProduct+0x3b4>
		  }
	      break;
     case mpEditProductName:
	      uiResult=UserInput(UI_ALPHANUM_R,3,5,strDescription,0,10);
    dfe0:	83 e0       	ldi	r24, 0x03	; 3
    dfe2:	63 e0       	ldi	r22, 0x03	; 3
    dfe4:	45 e0       	ldi	r20, 0x05	; 5
    dfe6:	22 e1       	ldi	r18, 0x12	; 18
    dfe8:	38 e0       	ldi	r19, 0x08	; 8
    dfea:	00 e0       	ldi	r16, 0x00	; 0
    dfec:	10 e0       	ldi	r17, 0x00	; 0
    dfee:	9a e0       	ldi	r25, 0x0A	; 10
    dff0:	e9 2e       	mov	r14, r25
    dff2:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  if (uiResult==USER_OK){
    dff6:	83 30       	cpi	r24, 0x03	; 3
    dff8:	81 f5       	brne	.+96     	; 0xe05a <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strDescription,(void*)&DefProductName[ProdID], 13);
    dffa:	60 91 23 02 	lds	r22, 0x0223
    dffe:	8d e0       	ldi	r24, 0x0D	; 13
    e000:	68 9f       	mul	r22, r24
    e002:	b0 01       	movw	r22, r0
    e004:	11 24       	eor	r1, r1
    e006:	60 54       	subi	r22, 0x40	; 64
    e008:	7f 4f       	sbci	r23, 0xFF	; 255
    e00a:	82 e1       	ldi	r24, 0x12	; 18
    e00c:	98 e0       	ldi	r25, 0x08	; 8
    e00e:	4d e0       	ldi	r20, 0x0D	; 13
    e010:	50 e0       	ldi	r21, 0x00	; 0
    e012:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		      stMenuProduct=mpInitProduct;
    e016:	10 92 24 02 	sts	0x0224, r1
    e01a:	26 c0       	rjmp	.+76     	; 0xe068 <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
	      break;
     case mpEditPrice:
	      uiResult=UserInput(UI_NUMBER_R,3,5,strPrice,0,7);
    e01c:	81 e0       	ldi	r24, 0x01	; 1
    e01e:	63 e0       	ldi	r22, 0x03	; 3
    e020:	45 e0       	ldi	r20, 0x05	; 5
    e022:	24 ea       	ldi	r18, 0xA4	; 164
    e024:	35 e0       	ldi	r19, 0x05	; 5
    e026:	00 e0       	ldi	r16, 0x00	; 0
    e028:	10 e0       	ldi	r17, 0x00	; 0
    e02a:	b7 e0       	ldi	r27, 0x07	; 7
    e02c:	eb 2e       	mov	r14, r27
    e02e:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  if (uiResult==USER_OK){
    e032:	83 30       	cpi	r24, 0x03	; 3
    e034:	91 f4       	brne	.+36     	; 0xe05a <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strPrice,(void*)&DefProductPrice[ProdID], 9);
    e036:	60 91 23 02 	lds	r22, 0x0223
    e03a:	89 e0       	ldi	r24, 0x09	; 9
    e03c:	68 9f       	mul	r22, r24
    e03e:	b0 01       	movw	r22, r0
    e040:	11 24       	eor	r1, r1
    e042:	66 57       	subi	r22, 0x76	; 118
    e044:	7f 4f       	sbci	r23, 0xFF	; 255
    e046:	84 ea       	ldi	r24, 0xA4	; 164
    e048:	95 e0       	ldi	r25, 0x05	; 5
    e04a:	49 e0       	ldi	r20, 0x09	; 9
    e04c:	50 e0       	ldi	r21, 0x00	; 0
    e04e:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		      stMenuProduct=mpDispPrice;//stMenuProduct=mpInit;
    e052:	82 e0       	ldi	r24, 0x02	; 2
    e054:	80 93 24 02 	sts	0x0224, r24
    e058:	07 c0       	rjmp	.+14     	; 0xe068 <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
    e05a:	81 30       	cpi	r24, 0x01	; 1
    e05c:	29 f4       	brne	.+10     	; 0xe068 <FSettingProduct+0x3c8>
    e05e:	f9 cf       	rjmp	.-14     	; 0xe052 <FSettingProduct+0x3b2>
	      break;
     case mpExitMenuProduct:
	      stMenuProduct=mpInitProduct;
    e060:	10 92 24 02 	sts	0x0224, r1
    e064:	81 e0       	ldi	r24, 0x01	; 1
    e066:	01 c0       	rjmp	.+2      	; 0xe06a <FSettingProduct+0x3ca>
    e068:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    e06a:	a1 96       	adiw	r28, 0x21	; 33
    e06c:	0f b6       	in	r0, 0x3f	; 63
    e06e:	f8 94       	cli
    e070:	de bf       	out	0x3e, r29	; 62
    e072:	0f be       	out	0x3f, r0	; 63
    e074:	cd bf       	out	0x3d, r28	; 61
    e076:	cf 91       	pop	r28
    e078:	df 91       	pop	r29
    e07a:	1f 91       	pop	r17
    e07c:	0f 91       	pop	r16
    e07e:	ff 90       	pop	r15
    e080:	ef 90       	pop	r14
    e082:	df 90       	pop	r13
    e084:	cf 90       	pop	r12
    e086:	bf 90       	pop	r11
    e088:	af 90       	pop	r10
    e08a:	9f 90       	pop	r9
    e08c:	8f 90       	pop	r8
    e08e:	7f 90       	pop	r7
    e090:	6f 90       	pop	r6
    e092:	08 95       	ret

0000e094 <FMenuSettingFooter>:
	 }
   //_menu_header();   
   return Result;
}

char FMenuSettingFooter(){
    e094:	ef 92       	push	r14
    e096:	0f 93       	push	r16
    e098:	1f 93       	push	r17
    e09a:	df 93       	push	r29
    e09c:	cf 93       	push	r28
    e09e:	cd b7       	in	r28, 0x3d	; 61
    e0a0:	de b7       	in	r29, 0x3e	; 62
    e0a2:	c6 54       	subi	r28, 0x46	; 70
    e0a4:	d0 40       	sbci	r29, 0x00	; 0
    e0a6:	0f b6       	in	r0, 0x3f	; 63
    e0a8:	f8 94       	cli
    e0aa:	de bf       	out	0x3e, r29	; 62
    e0ac:	0f be       	out	0x3f, r0	; 63
    e0ae:	cd bf       	out	0x3d, r28	; 61
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    e0b0:	80 91 47 02 	lds	r24, 0x0247
    e0b4:	84 30       	cpi	r24, 0x04	; 4
    e0b6:	09 f4       	brne	.+2      	; 0xe0ba <FMenuSettingFooter+0x26>
    e0b8:	3b c1       	rjmp	.+630    	; 0xe330 <FMenuSettingFooter+0x29c>
    e0ba:	85 30       	cpi	r24, 0x05	; 5
    e0bc:	40 f4       	brcc	.+16     	; 0xe0ce <FMenuSettingFooter+0x3a>
    e0be:	81 30       	cpi	r24, 0x01	; 1
    e0c0:	79 f1       	breq	.+94     	; 0xe120 <FMenuSettingFooter+0x8c>
    e0c2:	81 30       	cpi	r24, 0x01	; 1
    e0c4:	88 f0       	brcs	.+34     	; 0xe0e8 <FMenuSettingFooter+0x54>
    e0c6:	82 30       	cpi	r24, 0x02	; 2
    e0c8:	09 f0       	breq	.+2      	; 0xe0cc <FMenuSettingFooter+0x38>
    e0ca:	7c c1       	rjmp	.+760    	; 0xe3c4 <FMenuSettingFooter+0x330>
    e0cc:	74 c0       	rjmp	.+232    	; 0xe1b6 <FMenuSettingFooter+0x122>
    e0ce:	86 30       	cpi	r24, 0x06	; 6
    e0d0:	09 f4       	brne	.+2      	; 0xe0d4 <FMenuSettingFooter+0x40>
    e0d2:	d3 c0       	rjmp	.+422    	; 0xe27a <FMenuSettingFooter+0x1e6>
    e0d4:	86 30       	cpi	r24, 0x06	; 6
    e0d6:	08 f4       	brcc	.+2      	; 0xe0da <FMenuSettingFooter+0x46>
    e0d8:	bd c0       	rjmp	.+378    	; 0xe254 <FMenuSettingFooter+0x1c0>
    e0da:	87 30       	cpi	r24, 0x07	; 7
    e0dc:	09 f4       	brne	.+2      	; 0xe0e0 <FMenuSettingFooter+0x4c>
    e0de:	36 c1       	rjmp	.+620    	; 0xe34c <FMenuSettingFooter+0x2b8>
    e0e0:	88 30       	cpi	r24, 0x08	; 8
    e0e2:	09 f0       	breq	.+2      	; 0xe0e6 <FMenuSettingFooter+0x52>
    e0e4:	6f c1       	rjmp	.+734    	; 0xe3c4 <FMenuSettingFooter+0x330>
    e0e6:	6a c1       	rjmp	.+724    	; 0xe3bc <FMenuSettingFooter+0x328>
	 case shInitHeader:
	      lcd_clear();
    e0e8:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Footer1  3)Footer3"));
    e0ec:	81 e0       	ldi	r24, 0x01	; 1
    e0ee:	61 e0       	ldi	r22, 0x01	; 1
    e0f0:	4f e9       	ldi	r20, 0x9F	; 159
    e0f2:	55 e1       	ldi	r21, 0x15	; 21
    e0f4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Footer2  4)Footer4"));
    e0f8:	82 e0       	ldi	r24, 0x02	; 2
    e0fa:	61 e0       	ldi	r22, 0x01	; 1
    e0fc:	4a e8       	ldi	r20, 0x8A	; 138
    e0fe:	55 e1       	ldi	r21, 0x15	; 21
    e100:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("                    "));
    e104:	83 e0       	ldi	r24, 0x03	; 3
    e106:	61 e0       	ldi	r22, 0x01	; 1
    e108:	45 e7       	ldi	r20, 0x75	; 117
    e10a:	55 e1       	ldi	r21, 0x15	; 21
    e10c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    e110:	84 e0       	ldi	r24, 0x04	; 4
    e112:	61 e0       	ldi	r22, 0x01	; 1
    e114:	40 e6       	ldi	r20, 0x60	; 96
    e116:	55 e1       	ldi	r21, 0x15	; 21
    e118:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    e11c:	81 e0       	ldi	r24, 0x01	; 1
    e11e:	10 c1       	rjmp	.+544    	; 0xe340 <FMenuSettingFooter+0x2ac>
	      break;
      case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    e120:	81 e0       	ldi	r24, 0x01	; 1
    e122:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    e126:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    e12a:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    e12c:	81 53       	subi	r24, 0x31	; 49
    e12e:	86 30       	cpi	r24, 0x06	; 6
    e130:	e0 f5       	brcc	.+120    	; 0xe1aa <FMenuSettingFooter+0x116>
		       HeaderIdx=KeyChar-'1';//
    e132:	80 93 46 02 	sts	0x0246, r24
			   lcd_clear();
    e136:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
    e13a:	00 d0       	rcall	.+0      	; 0xe13c <FMenuSettingFooter+0xa8>
    e13c:	00 d0       	rcall	.+0      	; 0xe13e <FMenuSettingFooter+0xaa>
    e13e:	00 d0       	rcall	.+0      	; 0xe140 <FMenuSettingFooter+0xac>
    e140:	ed b7       	in	r30, 0x3d	; 61
    e142:	fe b7       	in	r31, 0x3e	; 62
    e144:	31 96       	adiw	r30, 0x01	; 1
    e146:	8e 01       	movw	r16, r28
    e148:	0f 5f       	subi	r16, 0xFF	; 255
    e14a:	1f 4f       	sbci	r17, 0xFF	; 255
    e14c:	ad b7       	in	r26, 0x3d	; 61
    e14e:	be b7       	in	r27, 0x3e	; 62
    e150:	12 96       	adiw	r26, 0x02	; 2
    e152:	1c 93       	st	X, r17
    e154:	0e 93       	st	-X, r16
    e156:	11 97       	sbiw	r26, 0x01	; 1
    e158:	81 e5       	ldi	r24, 0x51	; 81
    e15a:	95 e1       	ldi	r25, 0x15	; 21
    e15c:	93 83       	std	Z+3, r25	; 0x03
    e15e:	82 83       	std	Z+2, r24	; 0x02
    e160:	80 91 46 02 	lds	r24, 0x0246
    e164:	90 e0       	ldi	r25, 0x00	; 0
    e166:	01 96       	adiw	r24, 0x01	; 1
    e168:	95 83       	std	Z+5, r25	; 0x05
    e16a:	84 83       	std	Z+4, r24	; 0x04
    e16c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    e170:	8d b7       	in	r24, 0x3d	; 61
    e172:	9e b7       	in	r25, 0x3e	; 62
    e174:	06 96       	adiw	r24, 0x06	; 6
    e176:	0f b6       	in	r0, 0x3f	; 63
    e178:	f8 94       	cli
    e17a:	9e bf       	out	0x3e, r25	; 62
    e17c:	0f be       	out	0x3f, r0	; 63
    e17e:	8d bf       	out	0x3d, r24	; 61
    e180:	81 e0       	ldi	r24, 0x01	; 1
    e182:	61 e0       	ldi	r22, 0x01	; 1
    e184:	a8 01       	movw	r20, r16
    e186:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    e18a:	84 e0       	ldi	r24, 0x04	; 4
    e18c:	61 e0       	ldi	r22, 0x01	; 1
    e18e:	42 e4       	ldi	r20, 0x42	; 66
    e190:	55 e1       	ldi	r21, 0x15	; 21
    e192:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    e196:	e2 ef       	ldi	r30, 0xF2	; 242
    e198:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    e19a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    e19c:	95 e0       	ldi	r25, 0x05	; 5
    e19e:	e3 38       	cpi	r30, 0x83	; 131
    e1a0:	f9 07       	cpc	r31, r25
    e1a2:	d9 f7       	brne	.-10     	; 0xe19a <FMenuSettingFooter+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    e1a4:	82 e0       	ldi	r24, 0x02	; 2
    e1a6:	80 93 47 02 	sts	0x0247, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    e1aa:	aa e2       	ldi	r26, 0x2A	; 42
    e1ac:	ea 16       	cp	r14, r26
    e1ae:	09 f0       	breq	.+2      	; 0xe1b2 <FMenuSettingFooter+0x11e>
    e1b0:	09 c1       	rjmp	.+530    	; 0xe3c4 <FMenuSettingFooter+0x330>
    e1b2:	88 e0       	ldi	r24, 0x08	; 8
    e1b4:	c5 c0       	rjmp	.+394    	; 0xe340 <FMenuSettingFooter+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    e1b6:	83 e0       	ldi	r24, 0x03	; 3
    e1b8:	62 e0       	ldi	r22, 0x02	; 2
    e1ba:	41 e0       	ldi	r20, 0x01	; 1
    e1bc:	22 ef       	ldi	r18, 0xF2	; 242
    e1be:	33 e0       	ldi	r19, 0x03	; 3
    e1c0:	00 e0       	ldi	r16, 0x00	; 0
    e1c2:	10 e0       	ldi	r17, 0x00	; 0
    e1c4:	e8 e2       	ldi	r30, 0x28	; 40
    e1c6:	ee 2e       	mov	r14, r30
    e1c8:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  if (uiResult==USER_OK){
    e1cc:	83 30       	cpi	r24, 0x03	; 3
    e1ce:	f1 f5       	brne	.+124    	; 0xe24c <FMenuSettingFooter+0x1b8>
			  lcd_clear();
    e1d0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    e1d4:	82 ef       	ldi	r24, 0xF2	; 242
    e1d6:	93 e0       	ldi	r25, 0x03	; 3
    e1d8:	68 e2       	ldi	r22, 0x28	; 40
    e1da:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
    e1de:	20 e0       	ldi	r18, 0x00	; 0
    e1e0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e1e2:	f9 01       	movw	r30, r18
    e1e4:	e8 56       	subi	r30, 0x68	; 104
    e1e6:	f7 4f       	sbci	r31, 0xF7	; 247
    e1e8:	d9 01       	movw	r26, r18
    e1ea:	ae 50       	subi	r26, 0x0E	; 14
    e1ec:	bc 4f       	sbci	r27, 0xFC	; 252
    e1ee:	8c 91       	ld	r24, X
    e1f0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e1f2:	2f 5f       	subi	r18, 0xFF	; 255
    e1f4:	3f 4f       	sbci	r19, 0xFF	; 255
    e1f6:	24 31       	cpi	r18, 0x14	; 20
    e1f8:	31 05       	cpc	r19, r1
    e1fa:	99 f7       	brne	.-26     	; 0xe1e2 <FMenuSettingFooter+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e1fc:	10 92 ac 08 	sts	0x08AC, r1
    e200:	e6 e0       	ldi	r30, 0x06	; 6
    e202:	f4 e0       	ldi	r31, 0x04	; 4
    e204:	a9 ea       	ldi	r26, 0xA9	; 169
    e206:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e208:	81 91       	ld	r24, Z+
    e20a:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e20c:	84 e0       	ldi	r24, 0x04	; 4
    e20e:	ea 31       	cpi	r30, 0x1A	; 26
    e210:	f8 07       	cpc	r31, r24
    e212:	d1 f7       	brne	.-12     	; 0xe208 <FMenuSettingFooter+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e214:	10 92 bd 07 	sts	0x07BD, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e218:	81 e0       	ldi	r24, 0x01	; 1
    e21a:	61 e0       	ldi	r22, 0x01	; 1
    e21c:	48 e9       	ldi	r20, 0x98	; 152
    e21e:	58 e0       	ldi	r21, 0x08	; 8
    e220:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e224:	82 e0       	ldi	r24, 0x02	; 2
    e226:	61 e0       	ldi	r22, 0x01	; 1
    e228:	49 ea       	ldi	r20, 0xA9	; 169
    e22a:	57 e0       	ldi	r21, 0x07	; 7
    e22c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e230:	83 e0       	ldi	r24, 0x03	; 3
    e232:	61 e0       	ldi	r22, 0x01	; 1
    e234:	44 e3       	ldi	r20, 0x34	; 52
    e236:	55 e1       	ldi	r21, 0x15	; 21
    e238:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e23c:	84 e0       	ldi	r24, 0x04	; 4
    e23e:	61 e0       	ldi	r22, 0x01	; 1
    e240:	46 e2       	ldi	r20, 0x26	; 38
    e242:	55 e1       	ldi	r21, 0x15	; 21
    e244:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e248:	85 e0       	ldi	r24, 0x05	; 5
    e24a:	7a c0       	rjmp	.+244    	; 0xe340 <FMenuSettingFooter+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e24c:	81 30       	cpi	r24, 0x01	; 1
    e24e:	09 f0       	breq	.+2      	; 0xe252 <FMenuSettingFooter+0x1be>
    e250:	b9 c0       	rjmp	.+370    	; 0xe3c4 <FMenuSettingFooter+0x330>
    e252:	b1 c0       	rjmp	.+354    	; 0xe3b6 <FMenuSettingFooter+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e254:	81 e0       	ldi	r24, 0x01	; 1
    e256:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    e25a:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
          if(KeyChar=='#'){
    e25e:	83 32       	cpi	r24, 0x23	; 35
    e260:	39 f4       	brne	.+14     	; 0xe270 <FMenuSettingFooter+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e262:	82 ef       	ldi	r24, 0xF2	; 242
    e264:	93 e0       	ldi	r25, 0x03	; 3
    e266:	68 e2       	ldi	r22, 0x28	; 40
    e268:	70 e0       	ldi	r23, 0x00	; 0
    e26a:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <StrAlignCenter>
    e26e:	03 c0       	rjmp	.+6      	; 0xe276 <FMenuSettingFooter+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e270:	8a 32       	cpi	r24, 0x2A	; 42
    e272:	09 f0       	breq	.+2      	; 0xe276 <FMenuSettingFooter+0x1e2>
    e274:	a7 c0       	rjmp	.+334    	; 0xe3c4 <FMenuSettingFooter+0x330>
    e276:	86 e0       	ldi	r24, 0x06	; 6
    e278:	63 c0       	rjmp	.+198    	; 0xe340 <FMenuSettingFooter+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e27a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    e27e:	20 e0       	ldi	r18, 0x00	; 0
    e280:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e282:	f9 01       	movw	r30, r18
    e284:	e8 56       	subi	r30, 0x68	; 104
    e286:	f7 4f       	sbci	r31, 0xF7	; 247
    e288:	d9 01       	movw	r26, r18
    e28a:	ae 50       	subi	r26, 0x0E	; 14
    e28c:	bc 4f       	sbci	r27, 0xFC	; 252
    e28e:	8c 91       	ld	r24, X
    e290:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e292:	2f 5f       	subi	r18, 0xFF	; 255
    e294:	3f 4f       	sbci	r19, 0xFF	; 255
    e296:	24 31       	cpi	r18, 0x14	; 20
    e298:	31 05       	cpc	r19, r1
    e29a:	99 f7       	brne	.-26     	; 0xe282 <FMenuSettingFooter+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e29c:	10 92 ac 08 	sts	0x08AC, r1
    e2a0:	e6 e0       	ldi	r30, 0x06	; 6
    e2a2:	f4 e0       	ldi	r31, 0x04	; 4
    e2a4:	a9 ea       	ldi	r26, 0xA9	; 169
    e2a6:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e2a8:	81 91       	ld	r24, Z+
    e2aa:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e2ac:	94 e0       	ldi	r25, 0x04	; 4
    e2ae:	ea 31       	cpi	r30, 0x1A	; 26
    e2b0:	f9 07       	cpc	r31, r25
    e2b2:	d1 f7       	brne	.-12     	; 0xe2a8 <FMenuSettingFooter+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e2b4:	10 92 bd 07 	sts	0x07BD, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e2b8:	81 e0       	ldi	r24, 0x01	; 1
    e2ba:	61 e0       	ldi	r22, 0x01	; 1
    e2bc:	48 e9       	ldi	r20, 0x98	; 152
    e2be:	58 e0       	ldi	r21, 0x08	; 8
    e2c0:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e2c4:	82 e0       	ldi	r24, 0x02	; 2
    e2c6:	61 e0       	ldi	r22, 0x01	; 1
    e2c8:	49 ea       	ldi	r20, 0xA9	; 169
    e2ca:	57 e0       	ldi	r21, 0x07	; 7
    e2cc:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Footer%d ?"),HeaderIdx+1);
    e2d0:	00 d0       	rcall	.+0      	; 0xe2d2 <FMenuSettingFooter+0x23e>
    e2d2:	00 d0       	rcall	.+0      	; 0xe2d4 <FMenuSettingFooter+0x240>
    e2d4:	00 d0       	rcall	.+0      	; 0xe2d6 <FMenuSettingFooter+0x242>
    e2d6:	ed b7       	in	r30, 0x3d	; 61
    e2d8:	fe b7       	in	r31, 0x3e	; 62
    e2da:	31 96       	adiw	r30, 0x01	; 1
    e2dc:	8e 01       	movw	r16, r28
    e2de:	0f 5f       	subi	r16, 0xFF	; 255
    e2e0:	1f 4f       	sbci	r17, 0xFF	; 255
    e2e2:	ad b7       	in	r26, 0x3d	; 61
    e2e4:	be b7       	in	r27, 0x3e	; 62
    e2e6:	12 96       	adiw	r26, 0x02	; 2
    e2e8:	1c 93       	st	X, r17
    e2ea:	0e 93       	st	-X, r16
    e2ec:	11 97       	sbiw	r26, 0x01	; 1
    e2ee:	86 e1       	ldi	r24, 0x16	; 22
    e2f0:	95 e1       	ldi	r25, 0x15	; 21
    e2f2:	93 83       	std	Z+3, r25	; 0x03
    e2f4:	82 83       	std	Z+2, r24	; 0x02
    e2f6:	80 91 46 02 	lds	r24, 0x0246
    e2fa:	90 e0       	ldi	r25, 0x00	; 0
    e2fc:	01 96       	adiw	r24, 0x01	; 1
    e2fe:	95 83       	std	Z+5, r25	; 0x05
    e300:	84 83       	std	Z+4, r24	; 0x04
    e302:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e306:	8d b7       	in	r24, 0x3d	; 61
    e308:	9e b7       	in	r25, 0x3e	; 62
    e30a:	06 96       	adiw	r24, 0x06	; 6
    e30c:	0f b6       	in	r0, 0x3f	; 63
    e30e:	f8 94       	cli
    e310:	9e bf       	out	0x3e, r25	; 62
    e312:	0f be       	out	0x3f, r0	; 63
    e314:	8d bf       	out	0x3d, r24	; 61
    e316:	83 e0       	ldi	r24, 0x03	; 3
    e318:	61 e0       	ldi	r22, 0x01	; 1
    e31a:	a8 01       	movw	r20, r16
    e31c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e320:	84 e0       	ldi	r24, 0x04	; 4
    e322:	61 e0       	ldi	r22, 0x01	; 1
    e324:	49 e0       	ldi	r20, 0x09	; 9
    e326:	55 e1       	ldi	r21, 0x15	; 21
    e328:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e32c:	84 e0       	ldi	r24, 0x04	; 4
    e32e:	08 c0       	rjmp	.+16     	; 0xe340 <FMenuSettingFooter+0x2ac>
	      break;       
     case shSaveHeaderQuestions:
          KeyChar=_key_btn(_key_scan(1));
    e330:	81 e0       	ldi	r24, 0x01	; 1
    e332:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    e336:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e33a:	83 32       	cpi	r24, 0x23	; 35
    e33c:	21 f4       	brne	.+8      	; 0xe346 <FMenuSettingFooter+0x2b2>
    e33e:	87 e0       	ldi	r24, 0x07	; 7
    e340:	80 93 47 02 	sts	0x0247, r24
    e344:	3f c0       	rjmp	.+126    	; 0xe3c4 <FMenuSettingFooter+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e346:	8a 32       	cpi	r24, 0x2A	; 42
    e348:	e9 f5       	brne	.+122    	; 0xe3c4 <FMenuSettingFooter+0x330>
    e34a:	35 c0       	rjmp	.+106    	; 0xe3b6 <FMenuSettingFooter+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e34c:	ad b7       	in	r26, 0x3d	; 61
    e34e:	be b7       	in	r27, 0x3e	; 62
    e350:	18 97       	sbiw	r26, 0x08	; 8
    e352:	0f b6       	in	r0, 0x3f	; 63
    e354:	f8 94       	cli
    e356:	be bf       	out	0x3e, r27	; 62
    e358:	0f be       	out	0x3f, r0	; 63
    e35a:	ad bf       	out	0x3d, r26	; 61
    e35c:	ed b7       	in	r30, 0x3d	; 61
    e35e:	fe b7       	in	r31, 0x3e	; 62
    e360:	31 96       	adiw	r30, 0x01	; 1
    e362:	8e 01       	movw	r16, r28
    e364:	0b 5e       	subi	r16, 0xEB	; 235
    e366:	1f 4f       	sbci	r17, 0xFF	; 255
    e368:	12 96       	adiw	r26, 0x02	; 2
    e36a:	1c 93       	st	X, r17
    e36c:	0e 93       	st	-X, r16
    e36e:	11 97       	sbiw	r26, 0x01	; 1
    e370:	84 e0       	ldi	r24, 0x04	; 4
    e372:	95 e1       	ldi	r25, 0x15	; 21
    e374:	93 83       	std	Z+3, r25	; 0x03
    e376:	82 83       	std	Z+2, r24	; 0x02
    e378:	88 e9       	ldi	r24, 0x98	; 152
    e37a:	98 e0       	ldi	r25, 0x08	; 8
    e37c:	95 83       	std	Z+5, r25	; 0x05
    e37e:	84 83       	std	Z+4, r24	; 0x04
    e380:	89 ea       	ldi	r24, 0xA9	; 169
    e382:	97 e0       	ldi	r25, 0x07	; 7
    e384:	97 83       	std	Z+7, r25	; 0x07
    e386:	86 83       	std	Z+6, r24	; 0x06
    e388:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx+6],40);
    e38c:	8d b7       	in	r24, 0x3d	; 61
    e38e:	9e b7       	in	r25, 0x3e	; 62
    e390:	08 96       	adiw	r24, 0x08	; 8
    e392:	0f b6       	in	r0, 0x3f	; 63
    e394:	f8 94       	cli
    e396:	9e bf       	out	0x3e, r25	; 62
    e398:	0f be       	out	0x3f, r0	; 63
    e39a:	8d bf       	out	0x3d, r24	; 61
    e39c:	60 91 46 02 	lds	r22, 0x0246
    e3a0:	89 e2       	ldi	r24, 0x29	; 41
    e3a2:	68 9f       	mul	r22, r24
    e3a4:	b0 01       	movw	r22, r0
    e3a6:	11 24       	eor	r1, r1
    e3a8:	6d 5d       	subi	r22, 0xDD	; 221
    e3aa:	7c 4f       	sbci	r23, 0xFC	; 252
    e3ac:	c8 01       	movw	r24, r16
    e3ae:	48 e2       	ldi	r20, 0x28	; 40
    e3b0:	50 e0       	ldi	r21, 0x00	; 0
    e3b2:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx+6],40);

          stSettingHeader=shInitHeader;
    e3b6:	10 92 47 02 	sts	0x0247, r1
    e3ba:	04 c0       	rjmp	.+8      	; 0xe3c4 <FMenuSettingFooter+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e3bc:	10 92 47 02 	sts	0x0247, r1
    e3c0:	81 e0       	ldi	r24, 0x01	; 1
    e3c2:	01 c0       	rjmp	.+2      	; 0xe3c6 <FMenuSettingFooter+0x332>
    e3c4:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   return Result;
}
    e3c6:	ca 5b       	subi	r28, 0xBA	; 186
    e3c8:	df 4f       	sbci	r29, 0xFF	; 255
    e3ca:	0f b6       	in	r0, 0x3f	; 63
    e3cc:	f8 94       	cli
    e3ce:	de bf       	out	0x3e, r29	; 62
    e3d0:	0f be       	out	0x3f, r0	; 63
    e3d2:	cd bf       	out	0x3d, r28	; 61
    e3d4:	cf 91       	pop	r28
    e3d6:	df 91       	pop	r29
    e3d8:	1f 91       	pop	r17
    e3da:	0f 91       	pop	r16
    e3dc:	ef 90       	pop	r14
    e3de:	08 95       	ret

0000e3e0 <FMenuSettingHeader>:
	      break;
	 }
   return Result;
}

char FMenuSettingHeader(){
    e3e0:	ef 92       	push	r14
    e3e2:	0f 93       	push	r16
    e3e4:	1f 93       	push	r17
    e3e6:	df 93       	push	r29
    e3e8:	cf 93       	push	r28
    e3ea:	cd b7       	in	r28, 0x3d	; 61
    e3ec:	de b7       	in	r29, 0x3e	; 62
    e3ee:	c6 54       	subi	r28, 0x46	; 70
    e3f0:	d0 40       	sbci	r29, 0x00	; 0
    e3f2:	0f b6       	in	r0, 0x3f	; 63
    e3f4:	f8 94       	cli
    e3f6:	de bf       	out	0x3e, r29	; 62
    e3f8:	0f be       	out	0x3f, r0	; 63
    e3fa:	cd bf       	out	0x3d, r28	; 61
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    e3fc:	80 91 49 02 	lds	r24, 0x0249
    e400:	84 30       	cpi	r24, 0x04	; 4
    e402:	09 f4       	brne	.+2      	; 0xe406 <FMenuSettingHeader+0x26>
    e404:	3b c1       	rjmp	.+630    	; 0xe67c <FMenuSettingHeader+0x29c>
    e406:	85 30       	cpi	r24, 0x05	; 5
    e408:	40 f4       	brcc	.+16     	; 0xe41a <FMenuSettingHeader+0x3a>
    e40a:	81 30       	cpi	r24, 0x01	; 1
    e40c:	79 f1       	breq	.+94     	; 0xe46c <FMenuSettingHeader+0x8c>
    e40e:	81 30       	cpi	r24, 0x01	; 1
    e410:	88 f0       	brcs	.+34     	; 0xe434 <FMenuSettingHeader+0x54>
    e412:	82 30       	cpi	r24, 0x02	; 2
    e414:	09 f0       	breq	.+2      	; 0xe418 <FMenuSettingHeader+0x38>
    e416:	7c c1       	rjmp	.+760    	; 0xe710 <FMenuSettingHeader+0x330>
    e418:	74 c0       	rjmp	.+232    	; 0xe502 <FMenuSettingHeader+0x122>
    e41a:	86 30       	cpi	r24, 0x06	; 6
    e41c:	09 f4       	brne	.+2      	; 0xe420 <FMenuSettingHeader+0x40>
    e41e:	d3 c0       	rjmp	.+422    	; 0xe5c6 <FMenuSettingHeader+0x1e6>
    e420:	86 30       	cpi	r24, 0x06	; 6
    e422:	08 f4       	brcc	.+2      	; 0xe426 <FMenuSettingHeader+0x46>
    e424:	bd c0       	rjmp	.+378    	; 0xe5a0 <FMenuSettingHeader+0x1c0>
    e426:	87 30       	cpi	r24, 0x07	; 7
    e428:	09 f4       	brne	.+2      	; 0xe42c <FMenuSettingHeader+0x4c>
    e42a:	36 c1       	rjmp	.+620    	; 0xe698 <FMenuSettingHeader+0x2b8>
    e42c:	88 30       	cpi	r24, 0x08	; 8
    e42e:	09 f0       	breq	.+2      	; 0xe432 <FMenuSettingHeader+0x52>
    e430:	6f c1       	rjmp	.+734    	; 0xe710 <FMenuSettingHeader+0x330>
    e432:	6a c1       	rjmp	.+724    	; 0xe708 <FMenuSettingHeader+0x328>
	 case shInitHeader:
	      lcd_clear();
    e434:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Header1  4)Header4"));
    e438:	81 e0       	ldi	r24, 0x01	; 1
    e43a:	61 e0       	ldi	r22, 0x01	; 1
    e43c:	4f e4       	ldi	r20, 0x4F	; 79
    e43e:	56 e1       	ldi	r21, 0x16	; 22
    e440:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Header2  5)Header5"));
    e444:	82 e0       	ldi	r24, 0x02	; 2
    e446:	61 e0       	ldi	r22, 0x01	; 1
    e448:	4a e3       	ldi	r20, 0x3A	; 58
    e44a:	56 e1       	ldi	r21, 0x16	; 22
    e44c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("3)Header3  6)Header6"));
    e450:	83 e0       	ldi	r24, 0x03	; 3
    e452:	61 e0       	ldi	r22, 0x01	; 1
    e454:	45 e2       	ldi	r20, 0x25	; 37
    e456:	56 e1       	ldi	r21, 0x16	; 22
    e458:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    e45c:	84 e0       	ldi	r24, 0x04	; 4
    e45e:	61 e0       	ldi	r22, 0x01	; 1
    e460:	40 e1       	ldi	r20, 0x10	; 16
    e462:	56 e1       	ldi	r21, 0x16	; 22
    e464:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    e468:	81 e0       	ldi	r24, 0x01	; 1
    e46a:	10 c1       	rjmp	.+544    	; 0xe68c <FMenuSettingHeader+0x2ac>
	      break;
     case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    e46c:	81 e0       	ldi	r24, 0x01	; 1
    e46e:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    e472:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    e476:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    e478:	81 53       	subi	r24, 0x31	; 49
    e47a:	86 30       	cpi	r24, 0x06	; 6
    e47c:	e0 f5       	brcc	.+120    	; 0xe4f6 <FMenuSettingHeader+0x116>
		       HeaderIdx=KeyChar-'1';//
    e47e:	80 93 48 02 	sts	0x0248, r24
			   lcd_clear();
    e482:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
    e486:	00 d0       	rcall	.+0      	; 0xe488 <FMenuSettingHeader+0xa8>
    e488:	00 d0       	rcall	.+0      	; 0xe48a <FMenuSettingHeader+0xaa>
    e48a:	00 d0       	rcall	.+0      	; 0xe48c <FMenuSettingHeader+0xac>
    e48c:	ed b7       	in	r30, 0x3d	; 61
    e48e:	fe b7       	in	r31, 0x3e	; 62
    e490:	31 96       	adiw	r30, 0x01	; 1
    e492:	8e 01       	movw	r16, r28
    e494:	0f 5f       	subi	r16, 0xFF	; 255
    e496:	1f 4f       	sbci	r17, 0xFF	; 255
    e498:	ad b7       	in	r26, 0x3d	; 61
    e49a:	be b7       	in	r27, 0x3e	; 62
    e49c:	12 96       	adiw	r26, 0x02	; 2
    e49e:	1c 93       	st	X, r17
    e4a0:	0e 93       	st	-X, r16
    e4a2:	11 97       	sbiw	r26, 0x01	; 1
    e4a4:	81 e0       	ldi	r24, 0x01	; 1
    e4a6:	96 e1       	ldi	r25, 0x16	; 22
    e4a8:	93 83       	std	Z+3, r25	; 0x03
    e4aa:	82 83       	std	Z+2, r24	; 0x02
    e4ac:	80 91 48 02 	lds	r24, 0x0248
    e4b0:	90 e0       	ldi	r25, 0x00	; 0
    e4b2:	01 96       	adiw	r24, 0x01	; 1
    e4b4:	95 83       	std	Z+5, r25	; 0x05
    e4b6:	84 83       	std	Z+4, r24	; 0x04
    e4b8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    e4bc:	8d b7       	in	r24, 0x3d	; 61
    e4be:	9e b7       	in	r25, 0x3e	; 62
    e4c0:	06 96       	adiw	r24, 0x06	; 6
    e4c2:	0f b6       	in	r0, 0x3f	; 63
    e4c4:	f8 94       	cli
    e4c6:	9e bf       	out	0x3e, r25	; 62
    e4c8:	0f be       	out	0x3f, r0	; 63
    e4ca:	8d bf       	out	0x3d, r24	; 61
    e4cc:	81 e0       	ldi	r24, 0x01	; 1
    e4ce:	61 e0       	ldi	r22, 0x01	; 1
    e4d0:	a8 01       	movw	r20, r16
    e4d2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    e4d6:	84 e0       	ldi	r24, 0x04	; 4
    e4d8:	61 e0       	ldi	r22, 0x01	; 1
    e4da:	42 ef       	ldi	r20, 0xF2	; 242
    e4dc:	55 e1       	ldi	r21, 0x15	; 21
    e4de:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    e4e2:	e2 ef       	ldi	r30, 0xF2	; 242
    e4e4:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    e4e6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    e4e8:	95 e0       	ldi	r25, 0x05	; 5
    e4ea:	e3 38       	cpi	r30, 0x83	; 131
    e4ec:	f9 07       	cpc	r31, r25
    e4ee:	d9 f7       	brne	.-10     	; 0xe4e6 <FMenuSettingHeader+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    e4f0:	82 e0       	ldi	r24, 0x02	; 2
    e4f2:	80 93 49 02 	sts	0x0249, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    e4f6:	aa e2       	ldi	r26, 0x2A	; 42
    e4f8:	ea 16       	cp	r14, r26
    e4fa:	09 f0       	breq	.+2      	; 0xe4fe <FMenuSettingHeader+0x11e>
    e4fc:	09 c1       	rjmp	.+530    	; 0xe710 <FMenuSettingHeader+0x330>
    e4fe:	88 e0       	ldi	r24, 0x08	; 8
    e500:	c5 c0       	rjmp	.+394    	; 0xe68c <FMenuSettingHeader+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    e502:	83 e0       	ldi	r24, 0x03	; 3
    e504:	62 e0       	ldi	r22, 0x02	; 2
    e506:	41 e0       	ldi	r20, 0x01	; 1
    e508:	22 ef       	ldi	r18, 0xF2	; 242
    e50a:	33 e0       	ldi	r19, 0x03	; 3
    e50c:	00 e0       	ldi	r16, 0x00	; 0
    e50e:	10 e0       	ldi	r17, 0x00	; 0
    e510:	f8 e2       	ldi	r31, 0x28	; 40
    e512:	ef 2e       	mov	r14, r31
    e514:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  if (uiResult==USER_OK){
    e518:	83 30       	cpi	r24, 0x03	; 3
    e51a:	f1 f5       	brne	.+124    	; 0xe598 <FMenuSettingHeader+0x1b8>
			  lcd_clear();
    e51c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    e520:	82 ef       	ldi	r24, 0xF2	; 242
    e522:	93 e0       	ldi	r25, 0x03	; 3
    e524:	68 e2       	ldi	r22, 0x28	; 40
    e526:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
    e52a:	20 e0       	ldi	r18, 0x00	; 0
    e52c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e52e:	f9 01       	movw	r30, r18
    e530:	e8 56       	subi	r30, 0x68	; 104
    e532:	f7 4f       	sbci	r31, 0xF7	; 247
    e534:	d9 01       	movw	r26, r18
    e536:	ae 50       	subi	r26, 0x0E	; 14
    e538:	bc 4f       	sbci	r27, 0xFC	; 252
    e53a:	8c 91       	ld	r24, X
    e53c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e53e:	2f 5f       	subi	r18, 0xFF	; 255
    e540:	3f 4f       	sbci	r19, 0xFF	; 255
    e542:	24 31       	cpi	r18, 0x14	; 20
    e544:	31 05       	cpc	r19, r1
    e546:	99 f7       	brne	.-26     	; 0xe52e <FMenuSettingHeader+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e548:	10 92 ac 08 	sts	0x08AC, r1
    e54c:	e6 e0       	ldi	r30, 0x06	; 6
    e54e:	f4 e0       	ldi	r31, 0x04	; 4
    e550:	a9 ea       	ldi	r26, 0xA9	; 169
    e552:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e554:	81 91       	ld	r24, Z+
    e556:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e558:	84 e0       	ldi	r24, 0x04	; 4
    e55a:	ea 31       	cpi	r30, 0x1A	; 26
    e55c:	f8 07       	cpc	r31, r24
    e55e:	d1 f7       	brne	.-12     	; 0xe554 <FMenuSettingHeader+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e560:	10 92 bd 07 	sts	0x07BD, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e564:	81 e0       	ldi	r24, 0x01	; 1
    e566:	61 e0       	ldi	r22, 0x01	; 1
    e568:	48 e9       	ldi	r20, 0x98	; 152
    e56a:	58 e0       	ldi	r21, 0x08	; 8
    e56c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e570:	82 e0       	ldi	r24, 0x02	; 2
    e572:	61 e0       	ldi	r22, 0x01	; 1
    e574:	49 ea       	ldi	r20, 0xA9	; 169
    e576:	57 e0       	ldi	r21, 0x07	; 7
    e578:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e57c:	83 e0       	ldi	r24, 0x03	; 3
    e57e:	61 e0       	ldi	r22, 0x01	; 1
    e580:	44 ee       	ldi	r20, 0xE4	; 228
    e582:	55 e1       	ldi	r21, 0x15	; 21
    e584:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e588:	84 e0       	ldi	r24, 0x04	; 4
    e58a:	61 e0       	ldi	r22, 0x01	; 1
    e58c:	46 ed       	ldi	r20, 0xD6	; 214
    e58e:	55 e1       	ldi	r21, 0x15	; 21
    e590:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e594:	85 e0       	ldi	r24, 0x05	; 5
    e596:	7a c0       	rjmp	.+244    	; 0xe68c <FMenuSettingHeader+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e598:	81 30       	cpi	r24, 0x01	; 1
    e59a:	09 f0       	breq	.+2      	; 0xe59e <FMenuSettingHeader+0x1be>
    e59c:	b9 c0       	rjmp	.+370    	; 0xe710 <FMenuSettingHeader+0x330>
    e59e:	b1 c0       	rjmp	.+354    	; 0xe702 <FMenuSettingHeader+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e5a0:	81 e0       	ldi	r24, 0x01	; 1
    e5a2:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    e5a6:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
          if(KeyChar=='#'){
    e5aa:	83 32       	cpi	r24, 0x23	; 35
    e5ac:	39 f4       	brne	.+14     	; 0xe5bc <FMenuSettingHeader+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e5ae:	82 ef       	ldi	r24, 0xF2	; 242
    e5b0:	93 e0       	ldi	r25, 0x03	; 3
    e5b2:	68 e2       	ldi	r22, 0x28	; 40
    e5b4:	70 e0       	ldi	r23, 0x00	; 0
    e5b6:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <StrAlignCenter>
    e5ba:	03 c0       	rjmp	.+6      	; 0xe5c2 <FMenuSettingHeader+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e5bc:	8a 32       	cpi	r24, 0x2A	; 42
    e5be:	09 f0       	breq	.+2      	; 0xe5c2 <FMenuSettingHeader+0x1e2>
    e5c0:	a7 c0       	rjmp	.+334    	; 0xe710 <FMenuSettingHeader+0x330>
    e5c2:	86 e0       	ldi	r24, 0x06	; 6
    e5c4:	63 c0       	rjmp	.+198    	; 0xe68c <FMenuSettingHeader+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e5c6:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
    e5ca:	20 e0       	ldi	r18, 0x00	; 0
    e5cc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e5ce:	f9 01       	movw	r30, r18
    e5d0:	e8 56       	subi	r30, 0x68	; 104
    e5d2:	f7 4f       	sbci	r31, 0xF7	; 247
    e5d4:	d9 01       	movw	r26, r18
    e5d6:	ae 50       	subi	r26, 0x0E	; 14
    e5d8:	bc 4f       	sbci	r27, 0xFC	; 252
    e5da:	8c 91       	ld	r24, X
    e5dc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e5de:	2f 5f       	subi	r18, 0xFF	; 255
    e5e0:	3f 4f       	sbci	r19, 0xFF	; 255
    e5e2:	24 31       	cpi	r18, 0x14	; 20
    e5e4:	31 05       	cpc	r19, r1
    e5e6:	99 f7       	brne	.-26     	; 0xe5ce <FMenuSettingHeader+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e5e8:	10 92 ac 08 	sts	0x08AC, r1
    e5ec:	e6 e0       	ldi	r30, 0x06	; 6
    e5ee:	f4 e0       	ldi	r31, 0x04	; 4
    e5f0:	a9 ea       	ldi	r26, 0xA9	; 169
    e5f2:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e5f4:	81 91       	ld	r24, Z+
    e5f6:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e5f8:	94 e0       	ldi	r25, 0x04	; 4
    e5fa:	ea 31       	cpi	r30, 0x1A	; 26
    e5fc:	f9 07       	cpc	r31, r25
    e5fe:	d1 f7       	brne	.-12     	; 0xe5f4 <FMenuSettingHeader+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e600:	10 92 bd 07 	sts	0x07BD, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e604:	81 e0       	ldi	r24, 0x01	; 1
    e606:	61 e0       	ldi	r22, 0x01	; 1
    e608:	48 e9       	ldi	r20, 0x98	; 152
    e60a:	58 e0       	ldi	r21, 0x08	; 8
    e60c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e610:	82 e0       	ldi	r24, 0x02	; 2
    e612:	61 e0       	ldi	r22, 0x01	; 1
    e614:	49 ea       	ldi	r20, 0xA9	; 169
    e616:	57 e0       	ldi	r21, 0x07	; 7
    e618:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Header%d ?"),HeaderIdx+1);
    e61c:	00 d0       	rcall	.+0      	; 0xe61e <FMenuSettingHeader+0x23e>
    e61e:	00 d0       	rcall	.+0      	; 0xe620 <FMenuSettingHeader+0x240>
    e620:	00 d0       	rcall	.+0      	; 0xe622 <FMenuSettingHeader+0x242>
    e622:	ed b7       	in	r30, 0x3d	; 61
    e624:	fe b7       	in	r31, 0x3e	; 62
    e626:	31 96       	adiw	r30, 0x01	; 1
    e628:	8e 01       	movw	r16, r28
    e62a:	0f 5f       	subi	r16, 0xFF	; 255
    e62c:	1f 4f       	sbci	r17, 0xFF	; 255
    e62e:	ad b7       	in	r26, 0x3d	; 61
    e630:	be b7       	in	r27, 0x3e	; 62
    e632:	12 96       	adiw	r26, 0x02	; 2
    e634:	1c 93       	st	X, r17
    e636:	0e 93       	st	-X, r16
    e638:	11 97       	sbiw	r26, 0x01	; 1
    e63a:	86 ec       	ldi	r24, 0xC6	; 198
    e63c:	95 e1       	ldi	r25, 0x15	; 21
    e63e:	93 83       	std	Z+3, r25	; 0x03
    e640:	82 83       	std	Z+2, r24	; 0x02
    e642:	80 91 48 02 	lds	r24, 0x0248
    e646:	90 e0       	ldi	r25, 0x00	; 0
    e648:	01 96       	adiw	r24, 0x01	; 1
    e64a:	95 83       	std	Z+5, r25	; 0x05
    e64c:	84 83       	std	Z+4, r24	; 0x04
    e64e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e652:	8d b7       	in	r24, 0x3d	; 61
    e654:	9e b7       	in	r25, 0x3e	; 62
    e656:	06 96       	adiw	r24, 0x06	; 6
    e658:	0f b6       	in	r0, 0x3f	; 63
    e65a:	f8 94       	cli
    e65c:	9e bf       	out	0x3e, r25	; 62
    e65e:	0f be       	out	0x3f, r0	; 63
    e660:	8d bf       	out	0x3d, r24	; 61
    e662:	83 e0       	ldi	r24, 0x03	; 3
    e664:	61 e0       	ldi	r22, 0x01	; 1
    e666:	a8 01       	movw	r20, r16
    e668:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e66c:	84 e0       	ldi	r24, 0x04	; 4
    e66e:	61 e0       	ldi	r22, 0x01	; 1
    e670:	49 eb       	ldi	r20, 0xB9	; 185
    e672:	55 e1       	ldi	r21, 0x15	; 21
    e674:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e678:	84 e0       	ldi	r24, 0x04	; 4
    e67a:	08 c0       	rjmp	.+16     	; 0xe68c <FMenuSettingHeader+0x2ac>
	      break;    
     case shSaveHeaderQuestions:
	      KeyChar=_key_btn(_key_scan(1));
    e67c:	81 e0       	ldi	r24, 0x01	; 1
    e67e:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    e682:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e686:	83 32       	cpi	r24, 0x23	; 35
    e688:	21 f4       	brne	.+8      	; 0xe692 <FMenuSettingHeader+0x2b2>
    e68a:	87 e0       	ldi	r24, 0x07	; 7
    e68c:	80 93 49 02 	sts	0x0249, r24
    e690:	3f c0       	rjmp	.+126    	; 0xe710 <FMenuSettingHeader+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e692:	8a 32       	cpi	r24, 0x2A	; 42
    e694:	e9 f5       	brne	.+122    	; 0xe710 <FMenuSettingHeader+0x330>
    e696:	35 c0       	rjmp	.+106    	; 0xe702 <FMenuSettingHeader+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e698:	ad b7       	in	r26, 0x3d	; 61
    e69a:	be b7       	in	r27, 0x3e	; 62
    e69c:	18 97       	sbiw	r26, 0x08	; 8
    e69e:	0f b6       	in	r0, 0x3f	; 63
    e6a0:	f8 94       	cli
    e6a2:	be bf       	out	0x3e, r27	; 62
    e6a4:	0f be       	out	0x3f, r0	; 63
    e6a6:	ad bf       	out	0x3d, r26	; 61
    e6a8:	ed b7       	in	r30, 0x3d	; 61
    e6aa:	fe b7       	in	r31, 0x3e	; 62
    e6ac:	31 96       	adiw	r30, 0x01	; 1
    e6ae:	8e 01       	movw	r16, r28
    e6b0:	0b 5e       	subi	r16, 0xEB	; 235
    e6b2:	1f 4f       	sbci	r17, 0xFF	; 255
    e6b4:	12 96       	adiw	r26, 0x02	; 2
    e6b6:	1c 93       	st	X, r17
    e6b8:	0e 93       	st	-X, r16
    e6ba:	11 97       	sbiw	r26, 0x01	; 1
    e6bc:	84 eb       	ldi	r24, 0xB4	; 180
    e6be:	95 e1       	ldi	r25, 0x15	; 21
    e6c0:	93 83       	std	Z+3, r25	; 0x03
    e6c2:	82 83       	std	Z+2, r24	; 0x02
    e6c4:	88 e9       	ldi	r24, 0x98	; 152
    e6c6:	98 e0       	ldi	r25, 0x08	; 8
    e6c8:	95 83       	std	Z+5, r25	; 0x05
    e6ca:	84 83       	std	Z+4, r24	; 0x04
    e6cc:	89 ea       	ldi	r24, 0xA9	; 169
    e6ce:	97 e0       	ldi	r25, 0x07	; 7
    e6d0:	97 83       	std	Z+7, r25	; 0x07
    e6d2:	86 83       	std	Z+6, r24	; 0x06
    e6d4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx],40);
    e6d8:	8d b7       	in	r24, 0x3d	; 61
    e6da:	9e b7       	in	r25, 0x3e	; 62
    e6dc:	08 96       	adiw	r24, 0x08	; 8
    e6de:	0f b6       	in	r0, 0x3f	; 63
    e6e0:	f8 94       	cli
    e6e2:	9e bf       	out	0x3e, r25	; 62
    e6e4:	0f be       	out	0x3f, r0	; 63
    e6e6:	8d bf       	out	0x3d, r24	; 61
    e6e8:	60 91 48 02 	lds	r22, 0x0248
    e6ec:	89 e2       	ldi	r24, 0x29	; 41
    e6ee:	68 9f       	mul	r22, r24
    e6f0:	b0 01       	movw	r22, r0
    e6f2:	11 24       	eor	r1, r1
    e6f4:	63 5d       	subi	r22, 0xD3	; 211
    e6f6:	7d 4f       	sbci	r23, 0xFD	; 253
    e6f8:	c8 01       	movw	r24, r16
    e6fa:	48 e2       	ldi	r20, 0x28	; 40
    e6fc:	50 e0       	ldi	r21, 0x00	; 0
    e6fe:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx],40);
          stSettingHeader=shInitHeader;
    e702:	10 92 49 02 	sts	0x0249, r1
    e706:	04 c0       	rjmp	.+8      	; 0xe710 <FMenuSettingHeader+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e708:	10 92 49 02 	sts	0x0249, r1
    e70c:	81 e0       	ldi	r24, 0x01	; 1
    e70e:	01 c0       	rjmp	.+2      	; 0xe712 <FMenuSettingHeader+0x332>
    e710:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   //_menu_header();   
   return Result;
}
    e712:	ca 5b       	subi	r28, 0xBA	; 186
    e714:	df 4f       	sbci	r29, 0xFF	; 255
    e716:	0f b6       	in	r0, 0x3f	; 63
    e718:	f8 94       	cli
    e71a:	de bf       	out	0x3e, r29	; 62
    e71c:	0f be       	out	0x3f, r0	; 63
    e71e:	cd bf       	out	0x3d, r28	; 61
    e720:	cf 91       	pop	r28
    e722:	df 91       	pop	r29
    e724:	1f 91       	pop	r17
    e726:	0f 91       	pop	r16
    e728:	ef 90       	pop	r14
    e72a:	08 95       	ret

0000e72c <FMenuAdminSettings>:

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
	 switch(stAdminSettings){
    e72c:	80 91 4a 02 	lds	r24, 0x024A
    e730:	83 30       	cpi	r24, 0x03	; 3
    e732:	09 f4       	brne	.+2      	; 0xe736 <FMenuAdminSettings+0xa>
    e734:	6e c0       	rjmp	.+220    	; 0xe812 <FMenuAdminSettings+0xe6>
    e736:	84 30       	cpi	r24, 0x04	; 4
    e738:	30 f4       	brcc	.+12     	; 0xe746 <FMenuAdminSettings+0x1a>
    e73a:	81 30       	cpi	r24, 0x01	; 1
    e73c:	e9 f1       	breq	.+122    	; 0xe7b8 <FMenuAdminSettings+0x8c>
    e73e:	82 30       	cpi	r24, 0x02	; 2
    e740:	08 f0       	brcs	.+2      	; 0xe744 <FMenuAdminSettings+0x18>
    e742:	64 c0       	rjmp	.+200    	; 0xe80c <FMenuAdminSettings+0xe0>
    e744:	0d c0       	rjmp	.+26     	; 0xe760 <FMenuAdminSettings+0x34>
    e746:	85 30       	cpi	r24, 0x05	; 5
    e748:	09 f4       	brne	.+2      	; 0xe74c <FMenuAdminSettings+0x20>
    e74a:	66 c0       	rjmp	.+204    	; 0xe818 <FMenuAdminSettings+0xec>
    e74c:	85 30       	cpi	r24, 0x05	; 5
    e74e:	08 f4       	brcc	.+2      	; 0xe752 <FMenuAdminSettings+0x26>
    e750:	6a c0       	rjmp	.+212    	; 0xe826 <FMenuAdminSettings+0xfa>
    e752:	86 30       	cpi	r24, 0x06	; 6
    e754:	09 f4       	brne	.+2      	; 0xe758 <FMenuAdminSettings+0x2c>
    e756:	63 c0       	rjmp	.+198    	; 0xe81e <FMenuAdminSettings+0xf2>
    e758:	87 30       	cpi	r24, 0x07	; 7
    e75a:	09 f0       	breq	.+2      	; 0xe75e <FMenuAdminSettings+0x32>
    e75c:	6c c0       	rjmp	.+216    	; 0xe836 <FMenuAdminSettings+0x10a>
    e75e:	67 c0       	rjmp	.+206    	; 0xe82e <FMenuAdminSettings+0x102>
	 case asInitMenu:
          lcd_clear();
    e760:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  if (IFType==IT_SLAVE){
    e764:	80 91 00 01 	lds	r24, 0x0100
    e768:	81 30       	cpi	r24, 0x01	; 1
    e76a:	51 f4       	brne	.+20     	; 0xe780 <FMenuAdminSettings+0x54>
		      lcd_printf(1,1, PSTR("1)Header    4)Client"));
    e76c:	61 e0       	ldi	r22, 0x01	; 1
    e76e:	4f eb       	ldi	r20, 0xBF	; 191
    e770:	56 e1       	ldi	r21, 0x16	; 22
    e772:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer    5)Server"));
    e776:	82 e0       	ldi	r24, 0x02	; 2
    e778:	61 e0       	ldi	r22, 0x01	; 1
    e77a:	4a ea       	ldi	r20, 0xAA	; 170
    e77c:	56 e1       	ldi	r21, 0x16	; 22
    e77e:	0c c0       	rjmp	.+24     	; 0xe798 <FMenuAdminSettings+0x6c>
		  }else
		  if (IFType==IT_STANDALONE){
    e780:	82 30       	cpi	r24, 0x02	; 2
    e782:	61 f4       	brne	.+24     	; 0xe79c <FMenuAdminSettings+0x70>
		      lcd_printf(1,1, PSTR("1)Header            "));
    e784:	81 e0       	ldi	r24, 0x01	; 1
    e786:	61 e0       	ldi	r22, 0x01	; 1
    e788:	45 e9       	ldi	r20, 0x95	; 149
    e78a:	56 e1       	ldi	r21, 0x16	; 22
    e78c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer            "));
    e790:	82 e0       	ldi	r24, 0x02	; 2
    e792:	61 e0       	ldi	r22, 0x01	; 1
    e794:	40 e8       	ldi	r20, 0x80	; 128
    e796:	56 e1       	ldi	r21, 0x16	; 22
    e798:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  }
		  lcd_printf(3,1, PSTR("3)Password          "));
    e79c:	83 e0       	ldi	r24, 0x03	; 3
    e79e:	61 e0       	ldi	r22, 0x01	; 1
    e7a0:	4b e6       	ldi	r20, 0x6B	; 107
    e7a2:	56 e1       	ldi	r21, 0x16	; 22
    e7a4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1, PSTR("*)Exit"));
    e7a8:	84 e0       	ldi	r24, 0x04	; 4
    e7aa:	61 e0       	ldi	r22, 0x01	; 1
    e7ac:	44 e6       	ldi	r20, 0x64	; 100
    e7ae:	56 e1       	ldi	r21, 0x16	; 22
    e7b0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stAdminSettings=asAdminSettingsOption;
    e7b4:	81 e0       	ldi	r24, 0x01	; 1
    e7b6:	27 c0       	rjmp	.+78     	; 0xe806 <FMenuAdminSettings+0xda>
		  break;
     case asAdminSettingsOption:
	      KeyChar=_key_btn(_key_scan(1));
    e7b8:	81 e0       	ldi	r24, 0x01	; 1
    e7ba:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    e7be:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    e7c2:	98 2f       	mov	r25, r24
		  switch(KeyChar){
    e7c4:	82 33       	cpi	r24, 0x32	; 50
    e7c6:	61 f0       	breq	.+24     	; 0xe7e0 <FMenuAdminSettings+0xb4>
    e7c8:	83 33       	cpi	r24, 0x33	; 51
    e7ca:	28 f4       	brcc	.+10     	; 0xe7d6 <FMenuAdminSettings+0xaa>
    e7cc:	8a 32       	cpi	r24, 0x2A	; 42
    e7ce:	61 f0       	breq	.+24     	; 0xe7e8 <FMenuAdminSettings+0xbc>
    e7d0:	81 33       	cpi	r24, 0x31	; 49
    e7d2:	69 f4       	brne	.+26     	; 0xe7ee <FMenuAdminSettings+0xc2>
    e7d4:	03 c0       	rjmp	.+6      	; 0xe7dc <FMenuAdminSettings+0xb0>
    e7d6:	83 33       	cpi	r24, 0x33	; 51
    e7d8:	51 f4       	brne	.+20     	; 0xe7ee <FMenuAdminSettings+0xc2>
    e7da:	04 c0       	rjmp	.+8      	; 0xe7e4 <FMenuAdminSettings+0xb8>
		  case '1':stAdminSettings=asAdminSettingHeader;
    e7dc:	82 e0       	ldi	r24, 0x02	; 2
    e7de:	05 c0       	rjmp	.+10     	; 0xe7ea <FMenuAdminSettings+0xbe>
		       break;
		  case '2':stAdminSettings=asAdminSettingFooter;
    e7e0:	83 e0       	ldi	r24, 0x03	; 3
    e7e2:	03 c0       	rjmp	.+6      	; 0xe7ea <FMenuAdminSettings+0xbe>
		       break;
		  case '3':stAdminSettings=asAdminSettingPassword;
    e7e4:	84 e0       	ldi	r24, 0x04	; 4
    e7e6:	01 c0       	rjmp	.+2      	; 0xe7ea <FMenuAdminSettings+0xbe>
		       break;
		  case '*':stAdminSettings=asExitAdminSetting;
    e7e8:	87 e0       	ldi	r24, 0x07	; 7
    e7ea:	80 93 4a 02 	sts	0x024A, r24
		       break;			   
		  }
		  if (IFType==IT_SLAVE){
    e7ee:	80 91 00 01 	lds	r24, 0x0100
    e7f2:	81 30       	cpi	r24, 0x01	; 1
    e7f4:	01 f5       	brne	.+64     	; 0xe836 <FMenuAdminSettings+0x10a>
			  switch(KeyChar){
    e7f6:	94 33       	cpi	r25, 0x34	; 52
    e7f8:	19 f0       	breq	.+6      	; 0xe800 <FMenuAdminSettings+0xd4>
    e7fa:	95 33       	cpi	r25, 0x35	; 53
    e7fc:	e1 f4       	brne	.+56     	; 0xe836 <FMenuAdminSettings+0x10a>
    e7fe:	02 c0       	rjmp	.+4      	; 0xe804 <FMenuAdminSettings+0xd8>
			  case '4':stAdminSettings=asAdminSettingClientIP;
    e800:	85 e0       	ldi	r24, 0x05	; 5
    e802:	01 c0       	rjmp	.+2      	; 0xe806 <FMenuAdminSettings+0xda>
				   break;
			  case '5':stAdminSettings=asAdminSettingServerIP;
    e804:	86 e0       	ldi	r24, 0x06	; 6
    e806:	80 93 4a 02 	sts	0x024A, r24
    e80a:	0f c0       	rjmp	.+30     	; 0xe82a <FMenuAdminSettings+0xfe>
				   break;
			  }
		  }
	      break;
	 case asAdminSettingHeader:
	      SubMenu=FMenuSettingHeader();
    e80c:	0e 94 f0 71 	call	0xe3e0	; 0xe3e0 <FMenuSettingHeader>
    e810:	08 c0       	rjmp	.+16     	; 0xe822 <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;
	      break;
	 case asAdminSettingFooter:
	      SubMenu=FMenuSettingFooter();
    e812:	0e 94 4a 70 	call	0xe094	; 0xe094 <FMenuSettingFooter>
    e816:	05 c0       	rjmp	.+10     	; 0xe822 <FMenuAdminSettings+0xf6>
	 case asAdminSettingPassword:
	      SubMenu=FMenuSettingPassword();
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
     case asAdminSettingClientIP:
	      SubMenu=FMenuSettingClientIP();
    e818:	0e 94 cf 59 	call	0xb39e	; 0xb39e <FMenuSettingClientIP>
    e81c:	02 c0       	rjmp	.+4      	; 0xe822 <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
	 case asAdminSettingServerIP:
	      SubMenu=FMenuSettingServerIP();
    e81e:	0e 94 4a 57 	call	0xae94	; 0xae94 <FMenuSettingServerIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    e822:	81 30       	cpi	r24, 0x01	; 1
    e824:	41 f4       	brne	.+16     	; 0xe836 <FMenuAdminSettings+0x10a>
    e826:	10 92 4a 02 	sts	0x024A, r1
    e82a:	80 e0       	ldi	r24, 0x00	; 0
    e82c:	08 95       	ret
	      break;
     case asExitAdminSetting:
	      stAdminSettings=asInitMenu;
    e82e:	10 92 4a 02 	sts	0x024A, r1
    e832:	81 e0       	ldi	r24, 0x01	; 1
    e834:	08 95       	ret
    e836:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    e838:	08 95       	ret

0000e83a <FMenuMaster>:
     else Result=RC_INVALID;

   return Result;
}

char FMenuMaster(){ 
    e83a:	cf 92       	push	r12
    e83c:	df 92       	push	r13
    e83e:	ef 92       	push	r14
    e840:	ff 92       	push	r15
    e842:	0f 93       	push	r16
    e844:	1f 93       	push	r17
    e846:	df 93       	push	r29
    e848:	cf 93       	push	r28
    e84a:	cd b7       	in	r28, 0x3d	; 61
    e84c:	de b7       	in	r29, 0x3e	; 62
    e84e:	e2 97       	sbiw	r28, 0x32	; 50
    e850:	0f b6       	in	r0, 0x3f	; 63
    e852:	f8 94       	cli
    e854:	de bf       	out	0x3e, r29	; 62
    e856:	0f be       	out	0x3f, r0	; 63
    e858:	cd bf       	out	0x3d, r28	; 61
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
	 char uiResult,lcdteks[20],PTime[10],PDate[10],strNewPassword[10];
	 char strSend[20];

	 switch(stMenuMaster){
    e85a:	80 91 4f 02 	lds	r24, 0x024F
    e85e:	e8 2f       	mov	r30, r24
    e860:	f0 e0       	ldi	r31, 0x00	; 0
    e862:	e9 31       	cpi	r30, 0x19	; 25
    e864:	f1 05       	cpc	r31, r1
    e866:	08 f0       	brcs	.+2      	; 0xe86a <FMenuMaster+0x30>
    e868:	dc c2       	rjmp	.+1464   	; 0xee22 <FMenuMaster+0x5e8>
    e86a:	ec 59       	subi	r30, 0x9C	; 156
    e86c:	ff 4f       	sbci	r31, 0xFF	; 255
    e86e:	ee 0f       	add	r30, r30
    e870:	ff 1f       	adc	r31, r31
    e872:	05 90       	lpm	r0, Z+
    e874:	f4 91       	lpm	r31, Z+
    e876:	e0 2d       	mov	r30, r0
    e878:	09 94       	ijmp
	 case mmInitMaster:
	      lcd_clear();
    e87a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("-System Admin Level-"));
    e87e:	81 e0       	ldi	r24, 0x01	; 1
    e880:	61 e0       	ldi	r22, 0x01	; 1
    e882:	41 ef       	ldi	r20, 0xF1	; 241
    e884:	59 e1       	ldi	r21, 0x19	; 25
    e886:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Restore Password  "));
    e88a:	82 e0       	ldi	r24, 0x02	; 2
    e88c:	61 e0       	ldi	r22, 0x01	; 1
    e88e:	4c ed       	ldi	r20, 0xDC	; 220
    e890:	59 e1       	ldi	r21, 0x19	; 25
    e892:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Master Reset      "));
    e896:	83 e0       	ldi	r24, 0x03	; 3
    e898:	61 e0       	ldi	r22, 0x01	; 1
    e89a:	47 ec       	ldi	r20, 0xC7	; 199
    e89c:	59 e1       	ldi	r21, 0x19	; 25
    e89e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Exit             "));
    e8a2:	84 e0       	ldi	r24, 0x04	; 4
    e8a4:	61 e0       	ldi	r22, 0x01	; 1
    e8a6:	42 eb       	ldi	r20, 0xB2	; 178
    e8a8:	59 e1       	ldi	r21, 0x19	; 25
    e8aa:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>

		  //uart_printf(1,1,PSTR("-System Admin Level-"));

		  stMenuMaster=mmMasterSelect;
    e8ae:	81 e0       	ldi	r24, 0x01	; 1
    e8b0:	11 c0       	rjmp	.+34     	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmMasterSelect:
	 	  KeyPressed=_key_scan(1);
    e8b2:	81 e0       	ldi	r24, 0x01	; 1
    e8b4:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    e8b8:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
          switch(KeyChar){
    e8bc:	81 33       	cpi	r24, 0x31	; 49
    e8be:	09 f4       	brne	.+2      	; 0xe8c2 <FMenuMaster+0x88>
    e8c0:	e0 c1       	rjmp	.+960    	; 0xec82 <FMenuMaster+0x448>
    e8c2:	82 33       	cpi	r24, 0x32	; 50
    e8c4:	21 f0       	breq	.+8      	; 0xe8ce <FMenuMaster+0x94>
    e8c6:	8a 32       	cpi	r24, 0x2A	; 42
    e8c8:	09 f0       	breq	.+2      	; 0xe8cc <FMenuMaster+0x92>
    e8ca:	ab c2       	rjmp	.+1366   	; 0xee22 <FMenuMaster+0x5e8>
    e8cc:	02 c0       	rjmp	.+4      	; 0xe8d2 <FMenuMaster+0x98>
		  case '1':
               stMenuMaster=mmRestorePasswordMenu;
		       break;
		  case '2':
		       stMenuMaster=mmMasterReset;
    e8ce:	81 e1       	ldi	r24, 0x11	; 17
    e8d0:	01 c0       	rjmp	.+2      	; 0xe8d4 <FMenuMaster+0x9a>
		       break;
          case '*':
		       stMenuMaster=mmExitMaster;
    e8d2:	80 e1       	ldi	r24, 0x10	; 16
    e8d4:	80 93 4f 02 	sts	0x024F, r24
    e8d8:	a4 c2       	rjmp	.+1352   	; 0xee22 <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmMasterReset:
		  
	      _datetime(0, strSystemDate, strSystemTime);
    e8da:	0a e7       	ldi	r16, 0x7A	; 122
    e8dc:	18 e0       	ldi	r17, 0x08	; 8
    e8de:	80 e0       	ldi	r24, 0x00	; 0
    e8e0:	60 ec       	ldi	r22, 0xC0	; 192
    e8e2:	73 e0       	ldi	r23, 0x03	; 3
    e8e4:	a8 01       	movw	r20, r16
    e8e6:	0e 94 cd a8 	call	0x1519a	; 0x1519a <_datetime>
	      sprintf_P(PTime,PSTR("%s"),strSystemTime);
    e8ea:	00 d0       	rcall	.+0      	; 0xe8ec <FMenuMaster+0xb2>
    e8ec:	00 d0       	rcall	.+0      	; 0xe8ee <FMenuMaster+0xb4>
    e8ee:	00 d0       	rcall	.+0      	; 0xe8f0 <FMenuMaster+0xb6>
    e8f0:	ed b7       	in	r30, 0x3d	; 61
    e8f2:	fe b7       	in	r31, 0x3e	; 62
    e8f4:	31 96       	adiw	r30, 0x01	; 1
    e8f6:	7e 01       	movw	r14, r28
    e8f8:	08 94       	sec
    e8fa:	e1 1c       	adc	r14, r1
    e8fc:	f1 1c       	adc	r15, r1
    e8fe:	ad b7       	in	r26, 0x3d	; 61
    e900:	be b7       	in	r27, 0x3e	; 62
    e902:	12 96       	adiw	r26, 0x02	; 2
    e904:	fc 92       	st	X, r15
    e906:	ee 92       	st	-X, r14
    e908:	11 97       	sbiw	r26, 0x01	; 1
    e90a:	8f ea       	ldi	r24, 0xAF	; 175
    e90c:	99 e1       	ldi	r25, 0x19	; 25
    e90e:	93 83       	std	Z+3, r25	; 0x03
    e910:	82 83       	std	Z+2, r24	; 0x02
    e912:	15 83       	std	Z+5, r17	; 0x05
    e914:	04 83       	std	Z+4, r16	; 0x04
    e916:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  sprintf_P(strGeniusCode,PSTR("22345678"));		  
    e91a:	0f 90       	pop	r0
    e91c:	0f 90       	pop	r0
    e91e:	78 e9       	ldi	r23, 0x98	; 152
    e920:	c7 2e       	mov	r12, r23
    e922:	75 e0       	ldi	r23, 0x05	; 5
    e924:	d7 2e       	mov	r13, r23
    e926:	ed b7       	in	r30, 0x3d	; 61
    e928:	fe b7       	in	r31, 0x3e	; 62
    e92a:	d2 82       	std	Z+2, r13	; 0x02
    e92c:	c1 82       	std	Z+1, r12	; 0x01
    e92e:	86 ea       	ldi	r24, 0xA6	; 166
    e930:	99 e1       	ldi	r25, 0x19	; 25
    e932:	94 83       	std	Z+4, r25	; 0x04
    e934:	83 83       	std	Z+3, r24	; 0x03
    e936:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    e93a:	0f 90       	pop	r0
    e93c:	0f 90       	pop	r0
    e93e:	0f 90       	pop	r0
    e940:	0f 90       	pop	r0
    e942:	c7 01       	movw	r24, r14
    e944:	6a e3       	ldi	r22, 0x3A	; 58
    e946:	0e 94 a9 30 	call	0x6152	; 0x6152 <RemoveChar>
    e94a:	00 d0       	rcall	.+0      	; 0xe94c <FMenuMaster+0x112>
    e94c:	00 d0       	rcall	.+0      	; 0xe94e <FMenuMaster+0x114>
    e94e:	06 ed       	ldi	r16, 0xD6	; 214
    e950:	17 e0       	ldi	r17, 0x07	; 7
    e952:	ad b7       	in	r26, 0x3d	; 61
    e954:	be b7       	in	r27, 0x3e	; 62
    e956:	12 96       	adiw	r26, 0x02	; 2
    e958:	1c 93       	st	X, r17
    e95a:	0e 93       	st	-X, r16
    e95c:	11 97       	sbiw	r26, 0x01	; 1
    e95e:	85 ea       	ldi	r24, 0xA5	; 165
    e960:	99 e1       	ldi	r25, 0x19	; 25
    e962:	14 96       	adiw	r26, 0x04	; 4
    e964:	9c 93       	st	X, r25
    e966:	8e 93       	st	-X, r24
    e968:	13 97       	sbiw	r26, 0x03	; 3
    e96a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);
    e96e:	0f 90       	pop	r0
    e970:	0f 90       	pop	r0
    e972:	0f 90       	pop	r0
    e974:	0f 90       	pop	r0
    e976:	c7 01       	movw	r24, r14
    e978:	b6 01       	movw	r22, r12
    e97a:	a8 01       	movw	r20, r16
    e97c:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <GenerateKeyStamp>

		  lcd_clear();
    e980:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Master Reset-"));
    e984:	81 e0       	ldi	r24, 0x01	; 1
    e986:	61 e0       	ldi	r22, 0x01	; 1
    e988:	46 e9       	ldi	r20, 0x96	; 150
    e98a:	59 e1       	ldi	r21, 0x19	; 25
    e98c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  sprintf_P(lcdteks,PSTR("Seed Code:%s"),strKeyStamp);
    e990:	00 d0       	rcall	.+0      	; 0xe992 <FMenuMaster+0x158>
    e992:	00 d0       	rcall	.+0      	; 0xe994 <FMenuMaster+0x15a>
    e994:	00 d0       	rcall	.+0      	; 0xe996 <FMenuMaster+0x15c>
    e996:	ed b7       	in	r30, 0x3d	; 61
    e998:	fe b7       	in	r31, 0x3e	; 62
    e99a:	31 96       	adiw	r30, 0x01	; 1
    e99c:	6f e1       	ldi	r22, 0x1F	; 31
    e99e:	e6 2e       	mov	r14, r22
    e9a0:	f1 2c       	mov	r15, r1
    e9a2:	ec 0e       	add	r14, r28
    e9a4:	fd 1e       	adc	r15, r29
    e9a6:	ad b7       	in	r26, 0x3d	; 61
    e9a8:	be b7       	in	r27, 0x3e	; 62
    e9aa:	12 96       	adiw	r26, 0x02	; 2
    e9ac:	fc 92       	st	X, r15
    e9ae:	ee 92       	st	-X, r14
    e9b0:	11 97       	sbiw	r26, 0x01	; 1
    e9b2:	89 e8       	ldi	r24, 0x89	; 137
    e9b4:	99 e1       	ldi	r25, 0x19	; 25
    e9b6:	93 83       	std	Z+3, r25	; 0x03
    e9b8:	82 83       	std	Z+2, r24	; 0x02
    e9ba:	15 83       	std	Z+5, r17	; 0x05
    e9bc:	04 83       	std	Z+4, r16	; 0x04
    e9be:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    e9c2:	ed b7       	in	r30, 0x3d	; 61
    e9c4:	fe b7       	in	r31, 0x3e	; 62
    e9c6:	36 96       	adiw	r30, 0x06	; 6
    e9c8:	0f b6       	in	r0, 0x3f	; 63
    e9ca:	f8 94       	cli
    e9cc:	fe bf       	out	0x3e, r31	; 62
    e9ce:	0f be       	out	0x3f, r0	; 63
    e9d0:	ed bf       	out	0x3d, r30	; 61
    e9d2:	82 e0       	ldi	r24, 0x02	; 2
    e9d4:	61 e0       	ldi	r22, 0x01	; 1
    e9d6:	a7 01       	movw	r20, r14
    e9d8:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(3,1,   PSTR("ResetCode:_         "));
    e9dc:	83 e0       	ldi	r24, 0x03	; 3
    e9de:	61 e0       	ldi	r22, 0x01	; 1
    e9e0:	44 e7       	ldi	r20, 0x74	; 116
    e9e2:	59 e1       	ldi	r21, 0x19	; 25
    e9e4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,   PSTR("[*]Cancel   [#]Enter"));		          
    e9e8:	84 e0       	ldi	r24, 0x04	; 4
    e9ea:	61 e0       	ldi	r22, 0x01	; 1
    e9ec:	4f e5       	ldi	r20, 0x5F	; 95
    e9ee:	59 e1       	ldi	r21, 0x19	; 25
    e9f0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      stMenuMaster=mmResetCodeEntry;
    e9f4:	82 e1       	ldi	r24, 0x12	; 18
    e9f6:	6e cf       	rjmp	.-292    	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmResetCodeEntry:
          uiResult=UserInput(UI_NUMBER_R,3,11,strRestoreCode,0,9);
    e9f8:	81 e0       	ldi	r24, 0x01	; 1
    e9fa:	63 e0       	ldi	r22, 0x03	; 3
    e9fc:	4b e0       	ldi	r20, 0x0B	; 11
    e9fe:	21 e6       	ldi	r18, 0x61	; 97
    ea00:	3c e0       	ldi	r19, 0x0C	; 12
    ea02:	00 e0       	ldi	r16, 0x00	; 0
    ea04:	10 e0       	ldi	r17, 0x00	; 0
    ea06:	59 e0       	ldi	r21, 0x09	; 9
    ea08:	e5 2e       	mov	r14, r21
    ea0a:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  switch(uiResult){
    ea0e:	83 30       	cpi	r24, 0x03	; 3
    ea10:	49 f0       	breq	.+18     	; 0xea24 <FMenuMaster+0x1ea>
    ea12:	84 30       	cpi	r24, 0x04	; 4
    ea14:	08 f4       	brcc	.+2      	; 0xea18 <FMenuMaster+0x1de>
    ea16:	82 c1       	rjmp	.+772    	; 0xed1c <FMenuMaster+0x4e2>
    ea18:	84 30       	cpi	r24, 0x04	; 4
    ea1a:	31 f0       	breq	.+12     	; 0xea28 <FMenuMaster+0x1ee>
    ea1c:	85 30       	cpi	r24, 0x05	; 5
    ea1e:	09 f0       	breq	.+2      	; 0xea22 <FMenuMaster+0x1e8>
    ea20:	00 c2       	rjmp	.+1024   	; 0xee22 <FMenuMaster+0x5e8>
    ea22:	07 c0       	rjmp	.+14     	; 0xea32 <FMenuMaster+0x1f8>
		  case USER_OK:
               stMenuMaster=mmIsValidResetCode;
    ea24:	83 e1       	ldi	r24, 0x13	; 19
    ea26:	56 cf       	rjmp	.-340    	; 0xe8d4 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ea28:	84 e0       	ldi	r24, 0x04	; 4
    ea2a:	61 e0       	ldi	r22, 0x01	; 1
    ea2c:	4a e4       	ldi	r20, 0x4A	; 74
    ea2e:	59 e1       	ldi	r21, 0x19	; 25
    ea30:	8a c1       	rjmp	.+788    	; 0xed46 <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ea32:	84 e0       	ldi	r24, 0x04	; 4
    ea34:	61 e0       	ldi	r22, 0x01	; 1
    ea36:	45 e3       	ldi	r20, 0x35	; 53
    ea38:	59 e1       	ldi	r21, 0x19	; 25
    ea3a:	85 c1       	rjmp	.+778    	; 0xed46 <FMenuMaster+0x50c>
		       break;
		  }	      
	      break;
     case mmIsValidResetCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    ea3c:	86 ed       	ldi	r24, 0xD6	; 214
    ea3e:	97 e0       	ldi	r25, 0x07	; 7
    ea40:	61 e6       	ldi	r22, 0x61	; 97
    ea42:	7c e0       	ldi	r23, 0x0C	; 12
    ea44:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <ValidateRestoreCode>
    ea48:	81 30       	cpi	r24, 0x01	; 1
    ea4a:	11 f4       	brne	.+4      	; 0xea50 <FMenuMaster+0x216>
		      stMenuMaster=mmMasterResetExec;
    ea4c:	84 e1       	ldi	r24, 0x14	; 20
    ea4e:	42 cf       	rjmp	.-380    	; 0xe8d4 <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidResetCode;
    ea50:	86 e1       	ldi	r24, 0x16	; 22
    ea52:	40 cf       	rjmp	.-384    	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmMasterResetExec:
	      lcd_clear();
    ea54:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	      lcd_printf(1,1,PSTR("Reset EEPROM"));
    ea58:	81 e0       	ldi	r24, 0x01	; 1
    ea5a:	61 e0       	ldi	r22, 0x01	; 1
    ea5c:	48 e2       	ldi	r20, 0x28	; 40
    ea5e:	59 e1       	ldi	r21, 0x19	; 25
    ea60:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(2,1,PSTR("Please Wait.."));
    ea64:	82 e0       	ldi	r24, 0x02	; 2
    ea66:	61 e0       	ldi	r22, 0x01	; 1
    ea68:	4a e1       	ldi	r20, 0x1A	; 26
    ea6a:	59 e1       	ldi	r21, 0x19	; 25
    ea6c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      MasterReset();
    ea70:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <MasterReset>
          stMenuMaster=mmSuccesfullReset;
    ea74:	85 e1       	ldi	r24, 0x15	; 21
    ea76:	2e cf       	rjmp	.-420    	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
    ea78:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    ea7c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ea7e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ea80:	81 e0       	ldi	r24, 0x01	; 1
    ea82:	80 93 be 01 	sts	0x01BE, r24
          stMenuMaster=mmSuccesfullReset;
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
		  system_beep(1);
	      lcd_printf(2,1,PSTR("Reset Complete"));
    ea86:	82 e0       	ldi	r24, 0x02	; 2
    ea88:	61 e0       	ldi	r22, 0x01	; 1
    ea8a:	4b e0       	ldi	r20, 0x0B	; 11
    ea8c:	59 e1       	ldi	r21, 0x19	; 25
    ea8e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      TimDisplay=0; 
    ea92:	10 92 93 01 	sts	0x0193, r1
		  stMenuMaster=mmDelayDisplayComplete;
    ea96:	88 e1       	ldi	r24, 0x18	; 24
    ea98:	1d cf       	rjmp	.-454    	; 0xe8d4 <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    ea9a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ea9c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ea9e:	81 e0       	ldi	r24, 0x01	; 1
    eaa0:	80 93 be 01 	sts	0x01BE, r24
	      TimDisplay=0; 
		  stMenuMaster=mmDelayDisplayComplete;
	      break;
     case mmDisplayInvalidResetCode:
          system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    eaa4:	83 e0       	ldi	r24, 0x03	; 3
    eaa6:	61 e0       	ldi	r22, 0x01	; 1
    eaa8:	46 ef       	ldi	r20, 0xF6	; 246
    eaaa:	58 e1       	ldi	r21, 0x18	; 24
    eaac:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          TimDisplay=0; 
    eab0:	10 92 93 01 	sts	0x0193, r1
		  stMenuMaster=mmDelayDisplayInvalidResetCode;
    eab4:	87 e1       	ldi	r24, 0x17	; 23
    eab6:	0e cf       	rjmp	.-484    	; 0xe8d4 <FMenuMaster+0x9a>
     case mmDelayDisplayInvalidResetCode:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
	      break;
     
	 case mmDelayDisplayComplete:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
    eab8:	80 91 93 01 	lds	r24, 0x0193
    eabc:	86 30       	cpi	r24, 0x06	; 6
    eabe:	08 f4       	brcc	.+2      	; 0xeac2 <FMenuMaster+0x288>
    eac0:	b0 c1       	rjmp	.+864    	; 0xee22 <FMenuMaster+0x5e8>
    eac2:	07 cf       	rjmp	.-498    	; 0xe8d2 <FMenuMaster+0x98>
	      break;

     case mmRestorePasswordMenu:	      
	      lcd_clear();
    eac4:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("Enter GeNiUs Code   "));
    eac8:	81 e0       	ldi	r24, 0x01	; 1
    eaca:	61 e0       	ldi	r22, 0x01	; 1
    eacc:	41 ee       	ldi	r20, 0xE1	; 225
    eace:	58 e1       	ldi	r21, 0x18	; 24
    ead0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("_                   "));
    ead4:	82 e0       	ldi	r24, 0x02	; 2
    ead6:	61 e0       	ldi	r22, 0x01	; 1
    ead8:	4c ec       	ldi	r20, 0xCC	; 204
    eada:	58 e1       	ldi	r21, 0x18	; 24
    eadc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,4,PSTR("[*]Cancel   [#]Enter"));
    eae0:	84 e0       	ldi	r24, 0x04	; 4
    eae2:	64 e0       	ldi	r22, 0x04	; 4
    eae4:	47 eb       	ldi	r20, 0xB7	; 183
    eae6:	58 e1       	ldi	r21, 0x18	; 24
    eae8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  sprintf_P(strGeniusCode,PSTR(""));
    eaec:	00 d0       	rcall	.+0      	; 0xeaee <FMenuMaster+0x2b4>
    eaee:	00 d0       	rcall	.+0      	; 0xeaf0 <FMenuMaster+0x2b6>
    eaf0:	88 e9       	ldi	r24, 0x98	; 152
    eaf2:	95 e0       	ldi	r25, 0x05	; 5
    eaf4:	ad b7       	in	r26, 0x3d	; 61
    eaf6:	be b7       	in	r27, 0x3e	; 62
    eaf8:	12 96       	adiw	r26, 0x02	; 2
    eafa:	9c 93       	st	X, r25
    eafc:	8e 93       	st	-X, r24
    eafe:	11 97       	sbiw	r26, 0x01	; 1
    eb00:	86 eb       	ldi	r24, 0xB6	; 182
    eb02:	98 e1       	ldi	r25, 0x18	; 24
    eb04:	14 96       	adiw	r26, 0x04	; 4
    eb06:	9c 93       	st	X, r25
    eb08:	8e 93       	st	-X, r24
    eb0a:	13 97       	sbiw	r26, 0x03	; 3
    eb0c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
          stMenuMaster=mmGeniusCodeEntry;
    eb10:	83 e0       	ldi	r24, 0x03	; 3
    eb12:	80 93 4f 02 	sts	0x024F, r24
    eb16:	80 e0       	ldi	r24, 0x00	; 0
    eb18:	0f 90       	pop	r0
    eb1a:	0f 90       	pop	r0
    eb1c:	0f 90       	pop	r0
    eb1e:	0f 90       	pop	r0
    eb20:	81 c1       	rjmp	.+770    	; 0xee24 <FMenuMaster+0x5ea>
	      break;
     case mmGeniusCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,2,1,strGeniusCode,0,10);
    eb22:	81 e0       	ldi	r24, 0x01	; 1
    eb24:	62 e0       	ldi	r22, 0x02	; 2
    eb26:	41 e0       	ldi	r20, 0x01	; 1
    eb28:	28 e9       	ldi	r18, 0x98	; 152
    eb2a:	35 e0       	ldi	r19, 0x05	; 5
    eb2c:	00 e0       	ldi	r16, 0x00	; 0
    eb2e:	10 e0       	ldi	r17, 0x00	; 0
    eb30:	9a e0       	ldi	r25, 0x0A	; 10
    eb32:	e9 2e       	mov	r14, r25
    eb34:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  switch(uiResult){
    eb38:	83 30       	cpi	r24, 0x03	; 3
    eb3a:	49 f0       	breq	.+18     	; 0xeb4e <FMenuMaster+0x314>
    eb3c:	84 30       	cpi	r24, 0x04	; 4
    eb3e:	08 f4       	brcc	.+2      	; 0xeb42 <FMenuMaster+0x308>
    eb40:	ed c0       	rjmp	.+474    	; 0xed1c <FMenuMaster+0x4e2>
    eb42:	84 30       	cpi	r24, 0x04	; 4
    eb44:	69 f0       	breq	.+26     	; 0xeb60 <FMenuMaster+0x326>
    eb46:	85 30       	cpi	r24, 0x05	; 5
    eb48:	09 f0       	breq	.+2      	; 0xeb4c <FMenuMaster+0x312>
    eb4a:	6b c1       	rjmp	.+726    	; 0xee22 <FMenuMaster+0x5e8>
    eb4c:	0e c0       	rjmp	.+28     	; 0xeb6a <FMenuMaster+0x330>
		  case USER_OK:               
			   //uart_printf(1,0,PSTR("GeniusCode: "));
			   //uart_print(1,1,strGeniusCode);
		       _datetime(0, strSystemDate, strSystemTime);
    eb4e:	80 e0       	ldi	r24, 0x00	; 0
    eb50:	60 ec       	ldi	r22, 0xC0	; 192
    eb52:	73 e0       	ldi	r23, 0x03	; 3
    eb54:	4a e7       	ldi	r20, 0x7A	; 122
    eb56:	58 e0       	ldi	r21, 0x08	; 8
    eb58:	0e 94 cd a8 	call	0x1519a	; 0x1519a <_datetime>
               stMenuMaster=mmIsValidGeniusCode;
    eb5c:	84 e0       	ldi	r24, 0x04	; 4
    eb5e:	ba ce       	rjmp	.-652    	; 0xe8d4 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    eb60:	84 e0       	ldi	r24, 0x04	; 4
    eb62:	61 e0       	ldi	r22, 0x01	; 1
    eb64:	41 ea       	ldi	r20, 0xA1	; 161
    eb66:	58 e1       	ldi	r21, 0x18	; 24
    eb68:	ee c0       	rjmp	.+476    	; 0xed46 <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    eb6a:	84 e0       	ldi	r24, 0x04	; 4
    eb6c:	61 e0       	ldi	r22, 0x01	; 1
    eb6e:	4c e8       	ldi	r20, 0x8C	; 140
    eb70:	58 e1       	ldi	r21, 0x18	; 24
    eb72:	e9 c0       	rjmp	.+466    	; 0xed46 <FMenuMaster+0x50c>
		       break;
		  }
	      break;
     case mmIsValidGeniusCode:
	      //GetDate
		      sprintf_P(PDate,PSTR("%s"),strSystemDate);
    eb74:	00 d0       	rcall	.+0      	; 0xeb76 <FMenuMaster+0x33c>
    eb76:	00 d0       	rcall	.+0      	; 0xeb78 <FMenuMaster+0x33e>
    eb78:	00 d0       	rcall	.+0      	; 0xeb7a <FMenuMaster+0x340>
    eb7a:	ed b7       	in	r30, 0x3d	; 61
    eb7c:	fe b7       	in	r31, 0x3e	; 62
    eb7e:	31 96       	adiw	r30, 0x01	; 1
    eb80:	8e 01       	movw	r16, r28
    eb82:	05 5f       	subi	r16, 0xF5	; 245
    eb84:	1f 4f       	sbci	r17, 0xFF	; 255
    eb86:	ad b7       	in	r26, 0x3d	; 61
    eb88:	be b7       	in	r27, 0x3e	; 62
    eb8a:	12 96       	adiw	r26, 0x02	; 2
    eb8c:	1c 93       	st	X, r17
    eb8e:	0e 93       	st	-X, r16
    eb90:	11 97       	sbiw	r26, 0x01	; 1
    eb92:	89 e8       	ldi	r24, 0x89	; 137
    eb94:	98 e1       	ldi	r25, 0x18	; 24
    eb96:	93 83       	std	Z+3, r25	; 0x03
    eb98:	82 83       	std	Z+2, r24	; 0x02
    eb9a:	80 ec       	ldi	r24, 0xC0	; 192
    eb9c:	93 e0       	ldi	r25, 0x03	; 3
    eb9e:	95 83       	std	Z+5, r25	; 0x05
    eba0:	84 83       	std	Z+4, r24	; 0x04
    eba2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  RemoveChar(PDate,'/');
    eba6:	ed b7       	in	r30, 0x3d	; 61
    eba8:	fe b7       	in	r31, 0x3e	; 62
    ebaa:	36 96       	adiw	r30, 0x06	; 6
    ebac:	0f b6       	in	r0, 0x3f	; 63
    ebae:	f8 94       	cli
    ebb0:	fe bf       	out	0x3e, r31	; 62
    ebb2:	0f be       	out	0x3f, r0	; 63
    ebb4:	ed bf       	out	0x3d, r30	; 61
    ebb6:	c8 01       	movw	r24, r16
    ebb8:	6f e2       	ldi	r22, 0x2F	; 47
    ebba:	0e 94 a9 30 	call	0x6152	; 0x6152 <RemoveChar>
		  if (ValidateGeniusCode(PDate,strGeniusCode)==GC_VALID){
    ebbe:	c8 01       	movw	r24, r16
    ebc0:	68 e9       	ldi	r22, 0x98	; 152
    ebc2:	75 e0       	ldi	r23, 0x05	; 5
    ebc4:	0e 94 1f 48 	call	0x903e	; 0x903e <ValidateGeniusCode>
    ebc8:	81 30       	cpi	r24, 0x01	; 1
    ebca:	09 f0       	breq	.+2      	; 0xebce <FMenuMaster+0x394>
    ebcc:	44 c0       	rjmp	.+136    	; 0xec56 <FMenuMaster+0x41c>

		  	  sprintf_P(PTime,PSTR("%s"),strSystemTime);
    ebce:	00 d0       	rcall	.+0      	; 0xebd0 <FMenuMaster+0x396>
    ebd0:	00 d0       	rcall	.+0      	; 0xebd2 <FMenuMaster+0x398>
    ebd2:	00 d0       	rcall	.+0      	; 0xebd4 <FMenuMaster+0x39a>
    ebd4:	ed b7       	in	r30, 0x3d	; 61
    ebd6:	fe b7       	in	r31, 0x3e	; 62
    ebd8:	31 96       	adiw	r30, 0x01	; 1
    ebda:	8e 01       	movw	r16, r28
    ebdc:	0f 5f       	subi	r16, 0xFF	; 255
    ebde:	1f 4f       	sbci	r17, 0xFF	; 255
    ebe0:	ad b7       	in	r26, 0x3d	; 61
    ebe2:	be b7       	in	r27, 0x3e	; 62
    ebe4:	12 96       	adiw	r26, 0x02	; 2
    ebe6:	1c 93       	st	X, r17
    ebe8:	0e 93       	st	-X, r16
    ebea:	11 97       	sbiw	r26, 0x01	; 1
    ebec:	86 e8       	ldi	r24, 0x86	; 134
    ebee:	98 e1       	ldi	r25, 0x18	; 24
    ebf0:	93 83       	std	Z+3, r25	; 0x03
    ebf2:	82 83       	std	Z+2, r24	; 0x02
    ebf4:	8a e7       	ldi	r24, 0x7A	; 122
    ebf6:	98 e0       	ldi	r25, 0x08	; 8
    ebf8:	95 83       	std	Z+5, r25	; 0x05
    ebfa:	84 83       	std	Z+4, r24	; 0x04
    ebfc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    ec00:	ed b7       	in	r30, 0x3d	; 61
    ec02:	fe b7       	in	r31, 0x3e	; 62
    ec04:	36 96       	adiw	r30, 0x06	; 6
    ec06:	0f b6       	in	r0, 0x3f	; 63
    ec08:	f8 94       	cli
    ec0a:	fe bf       	out	0x3e, r31	; 62
    ec0c:	0f be       	out	0x3f, r0	; 63
    ec0e:	ed bf       	out	0x3d, r30	; 61
    ec10:	c8 01       	movw	r24, r16
    ec12:	6a e3       	ldi	r22, 0x3A	; 58
    ec14:	0e 94 a9 30 	call	0x6152	; 0x6152 <RemoveChar>
    ec18:	00 d0       	rcall	.+0      	; 0xec1a <FMenuMaster+0x3e0>
    ec1a:	00 d0       	rcall	.+0      	; 0xec1c <FMenuMaster+0x3e2>
    ec1c:	b6 ed       	ldi	r27, 0xD6	; 214
    ec1e:	eb 2e       	mov	r14, r27
    ec20:	b7 e0       	ldi	r27, 0x07	; 7
    ec22:	fb 2e       	mov	r15, r27
    ec24:	ad b7       	in	r26, 0x3d	; 61
    ec26:	be b7       	in	r27, 0x3e	; 62
    ec28:	12 96       	adiw	r26, 0x02	; 2
    ec2a:	fc 92       	st	X, r15
    ec2c:	ee 92       	st	-X, r14
    ec2e:	11 97       	sbiw	r26, 0x01	; 1
    ec30:	85 e8       	ldi	r24, 0x85	; 133
    ec32:	98 e1       	ldi	r25, 0x18	; 24
    ec34:	14 96       	adiw	r26, 0x04	; 4
    ec36:	9c 93       	st	X, r25
    ec38:	8e 93       	st	-X, r24
    ec3a:	13 97       	sbiw	r26, 0x03	; 3
    ec3c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>

              //sprintf_P(strSend,PSTR("Time:%s"),PTime);
			  // uart_print(1,1,strSend);

		      GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);			  
    ec40:	0f 90       	pop	r0
    ec42:	0f 90       	pop	r0
    ec44:	0f 90       	pop	r0
    ec46:	0f 90       	pop	r0
    ec48:	c8 01       	movw	r24, r16
    ec4a:	68 e9       	ldi	r22, 0x98	; 152
    ec4c:	75 e0       	ldi	r23, 0x05	; 5
    ec4e:	a7 01       	movw	r20, r14
    ec50:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <GenerateKeyStamp>
    ec54:	cc c0       	rjmp	.+408    	; 0xedee <FMenuMaster+0x5b4>
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
    ec56:	85 e0       	ldi	r24, 0x05	; 5
    ec58:	3d ce       	rjmp	.-902    	; 0xe8d4 <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    ec5a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ec5c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ec5e:	81 e0       	ldi	r24, 0x01	; 1
    ec60:	80 93 be 01 	sts	0x01BE, r24
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
	      break;
     case mmDisplayInvalidCode:
	      system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    ec64:	83 e0       	ldi	r24, 0x03	; 3
    ec66:	61 e0       	ldi	r22, 0x01	; 1
    ec68:	40 e7       	ldi	r20, 0x70	; 112
    ec6a:	58 e1       	ldi	r21, 0x18	; 24
    ec6c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          TimDisplay=0; 
    ec70:	10 92 93 01 	sts	0x0193, r1
		  stMenuMaster=mmDelayDisplayInvalidCode;
    ec74:	86 e0       	ldi	r24, 0x06	; 6
    ec76:	2e ce       	rjmp	.-932    	; 0xe8d4 <FMenuMaster+0x9a>
	      break;

     case mmDelayDisplayInvalidCode:
	      if (TimDisplay>5)stMenuMaster=mmRestorePasswordMenu;
    ec78:	80 91 93 01 	lds	r24, 0x0193
    ec7c:	86 30       	cpi	r24, 0x06	; 6
    ec7e:	08 f4       	brcc	.+2      	; 0xec82 <FMenuMaster+0x448>
    ec80:	d0 c0       	rjmp	.+416    	; 0xee22 <FMenuMaster+0x5e8>
    ec82:	82 e0       	ldi	r24, 0x02	; 2
    ec84:	27 ce       	rjmp	.-946    	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmDisplayKeyStamp:
	      lcd_clear();
    ec86:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("Key Stamp:%s "),strKeyStamp);
    ec8a:	00 d0       	rcall	.+0      	; 0xec8c <FMenuMaster+0x452>
    ec8c:	00 d0       	rcall	.+0      	; 0xec8e <FMenuMaster+0x454>
    ec8e:	00 d0       	rcall	.+0      	; 0xec90 <FMenuMaster+0x456>
    ec90:	ed b7       	in	r30, 0x3d	; 61
    ec92:	fe b7       	in	r31, 0x3e	; 62
    ec94:	31 96       	adiw	r30, 0x01	; 1
    ec96:	8e 01       	movw	r16, r28
    ec98:	01 5e       	subi	r16, 0xE1	; 225
    ec9a:	1f 4f       	sbci	r17, 0xFF	; 255
    ec9c:	ad b7       	in	r26, 0x3d	; 61
    ec9e:	be b7       	in	r27, 0x3e	; 62
    eca0:	12 96       	adiw	r26, 0x02	; 2
    eca2:	1c 93       	st	X, r17
    eca4:	0e 93       	st	-X, r16
    eca6:	11 97       	sbiw	r26, 0x01	; 1
    eca8:	82 e6       	ldi	r24, 0x62	; 98
    ecaa:	98 e1       	ldi	r25, 0x18	; 24
    ecac:	93 83       	std	Z+3, r25	; 0x03
    ecae:	82 83       	std	Z+2, r24	; 0x02
    ecb0:	86 ed       	ldi	r24, 0xD6	; 214
    ecb2:	97 e0       	ldi	r25, 0x07	; 7
    ecb4:	95 83       	std	Z+5, r25	; 0x05
    ecb6:	84 83       	std	Z+4, r24	; 0x04
    ecb8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    ecbc:	ed b7       	in	r30, 0x3d	; 61
    ecbe:	fe b7       	in	r31, 0x3e	; 62
    ecc0:	36 96       	adiw	r30, 0x06	; 6
    ecc2:	0f b6       	in	r0, 0x3f	; 63
    ecc4:	f8 94       	cli
    ecc6:	fe bf       	out	0x3e, r31	; 62
    ecc8:	0f be       	out	0x3f, r0	; 63
    ecca:	ed bf       	out	0x3d, r30	; 61
    eccc:	81 e0       	ldi	r24, 0x01	; 1
    ecce:	61 e0       	ldi	r22, 0x01	; 1
    ecd0:	a8 01       	movw	r20, r16
    ecd2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(2,1,PSTR("Enter Restore Code  "));
    ecd6:	82 e0       	ldi	r24, 0x02	; 2
    ecd8:	61 e0       	ldi	r22, 0x01	; 1
    ecda:	4d e4       	ldi	r20, 0x4D	; 77
    ecdc:	58 e1       	ldi	r21, 0x18	; 24
    ecde:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("_                   "));
    ece2:	83 e0       	ldi	r24, 0x03	; 3
    ece4:	61 e0       	ldi	r22, 0x01	; 1
    ece6:	48 e3       	ldi	r20, 0x38	; 56
    ece8:	58 e1       	ldi	r21, 0x18	; 24
    ecea:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ecee:	84 e0       	ldi	r24, 0x04	; 4
    ecf0:	61 e0       	ldi	r22, 0x01	; 1
    ecf2:	43 e2       	ldi	r20, 0x23	; 35
    ecf4:	58 e1       	ldi	r21, 0x18	; 24
    ecf6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stMenuMaster=mmRestoreCodeEntry;
    ecfa:	88 e0       	ldi	r24, 0x08	; 8
    ecfc:	eb cd       	rjmp	.-1066   	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmRestoreCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,3,1,strRestoreCode,0,10);
    ecfe:	81 e0       	ldi	r24, 0x01	; 1
    ed00:	63 e0       	ldi	r22, 0x03	; 3
    ed02:	41 e0       	ldi	r20, 0x01	; 1
    ed04:	21 e6       	ldi	r18, 0x61	; 97
    ed06:	3c e0       	ldi	r19, 0x0C	; 12
    ed08:	00 e0       	ldi	r16, 0x00	; 0
    ed0a:	10 e0       	ldi	r17, 0x00	; 0
    ed0c:	aa e0       	ldi	r26, 0x0A	; 10
    ed0e:	ea 2e       	mov	r14, r26
    ed10:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  switch(uiResult){
    ed14:	83 30       	cpi	r24, 0x03	; 3
    ed16:	61 f0       	breq	.+24     	; 0xed30 <FMenuMaster+0x4f6>
    ed18:	84 30       	cpi	r24, 0x04	; 4
    ed1a:	20 f4       	brcc	.+8      	; 0xed24 <FMenuMaster+0x4ea>
    ed1c:	81 30       	cpi	r24, 0x01	; 1
    ed1e:	09 f0       	breq	.+2      	; 0xed22 <FMenuMaster+0x4e8>
    ed20:	80 c0       	rjmp	.+256    	; 0xee22 <FMenuMaster+0x5e8>
    ed22:	d7 cd       	rjmp	.-1106   	; 0xe8d2 <FMenuMaster+0x98>
    ed24:	84 30       	cpi	r24, 0x04	; 4
    ed26:	31 f0       	breq	.+12     	; 0xed34 <FMenuMaster+0x4fa>
    ed28:	85 30       	cpi	r24, 0x05	; 5
    ed2a:	09 f0       	breq	.+2      	; 0xed2e <FMenuMaster+0x4f4>
    ed2c:	7a c0       	rjmp	.+244    	; 0xee22 <FMenuMaster+0x5e8>
    ed2e:	07 c0       	rjmp	.+14     	; 0xed3e <FMenuMaster+0x504>
		  case USER_OK:
               stMenuMaster=mmIsValidRestoreCode;
    ed30:	89 e0       	ldi	r24, 0x09	; 9
    ed32:	d0 cd       	rjmp	.-1120   	; 0xe8d4 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ed34:	84 e0       	ldi	r24, 0x04	; 4
    ed36:	61 e0       	ldi	r22, 0x01	; 1
    ed38:	4e e0       	ldi	r20, 0x0E	; 14
    ed3a:	58 e1       	ldi	r21, 0x18	; 24
    ed3c:	04 c0       	rjmp	.+8      	; 0xed46 <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ed3e:	84 e0       	ldi	r24, 0x04	; 4
    ed40:	61 e0       	ldi	r22, 0x01	; 1
    ed42:	49 ef       	ldi	r20, 0xF9	; 249
    ed44:	57 e1       	ldi	r21, 0x17	; 23
    ed46:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    ed4a:	6b c0       	rjmp	.+214    	; 0xee22 <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmIsValidRestoreCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    ed4c:	86 ed       	ldi	r24, 0xD6	; 214
    ed4e:	97 e0       	ldi	r25, 0x07	; 7
    ed50:	61 e6       	ldi	r22, 0x61	; 97
    ed52:	7c e0       	ldi	r23, 0x0C	; 12
    ed54:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <ValidateRestoreCode>
    ed58:	81 30       	cpi	r24, 0x01	; 1
    ed5a:	11 f4       	brne	.+4      	; 0xed60 <FMenuMaster+0x526>
		      stMenuMaster=mmRestorePassword;
    ed5c:	8c e0       	ldi	r24, 0x0C	; 12
    ed5e:	ba cd       	rjmp	.-1164   	; 0xe8d4 <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidRestoreCode;
    ed60:	8a e0       	ldi	r24, 0x0A	; 10
    ed62:	b8 cd       	rjmp	.-1168   	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmRestorePassword:
	      sprintf_P(strNewPassword,PSTR(SPV_DEFAULT_PASS));
    ed64:	00 d0       	rcall	.+0      	; 0xed66 <FMenuMaster+0x52c>
    ed66:	00 d0       	rcall	.+0      	; 0xed68 <FMenuMaster+0x52e>
    ed68:	8e 01       	movw	r16, r28
    ed6a:	0b 5e       	subi	r16, 0xEB	; 235
    ed6c:	1f 4f       	sbci	r17, 0xFF	; 255
    ed6e:	ad b7       	in	r26, 0x3d	; 61
    ed70:	be b7       	in	r27, 0x3e	; 62
    ed72:	12 96       	adiw	r26, 0x02	; 2
    ed74:	1c 93       	st	X, r17
    ed76:	0e 93       	st	-X, r16
    ed78:	11 97       	sbiw	r26, 0x01	; 1
    ed7a:	83 ef       	ldi	r24, 0xF3	; 243
    ed7c:	97 e1       	ldi	r25, 0x17	; 23
    ed7e:	14 96       	adiw	r26, 0x04	; 4
    ed80:	9c 93       	st	X, r25
    ed82:	8e 93       	st	-X, r24
    ed84:	13 97       	sbiw	r26, 0x03	; 3
    ed86:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSpvPassword,sizeof(DefSpvPassword));
    ed8a:	0f 90       	pop	r0
    ed8c:	0f 90       	pop	r0
    ed8e:	0f 90       	pop	r0
    ed90:	0f 90       	pop	r0
    ed92:	c8 01       	movw	r24, r16
    ed94:	61 e0       	ldi	r22, 0x01	; 1
    ed96:	70 e0       	ldi	r23, 0x00	; 0
    ed98:	4a e0       	ldi	r20, 0x0A	; 10
    ed9a:	50 e0       	ldi	r21, 0x00	; 0
    ed9c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
		  sprintf_P(strNewPassword,PSTR(SYS_DEFAULT_PASS));
    eda0:	00 d0       	rcall	.+0      	; 0xeda2 <FMenuMaster+0x568>
    eda2:	00 d0       	rcall	.+0      	; 0xeda4 <FMenuMaster+0x56a>
    eda4:	ed b7       	in	r30, 0x3d	; 61
    eda6:	fe b7       	in	r31, 0x3e	; 62
    eda8:	12 83       	std	Z+2, r17	; 0x02
    edaa:	01 83       	std	Z+1, r16	; 0x01
    edac:	8d ee       	ldi	r24, 0xED	; 237
    edae:	97 e1       	ldi	r25, 0x17	; 23
    edb0:	94 83       	std	Z+4, r25	; 0x04
    edb2:	83 83       	std	Z+3, r24	; 0x03
    edb4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSysPassword,sizeof(DefSysPassword));	      		  
    edb8:	0f 90       	pop	r0
    edba:	0f 90       	pop	r0
    edbc:	0f 90       	pop	r0
    edbe:	0f 90       	pop	r0
    edc0:	c8 01       	movw	r24, r16
    edc2:	6b e0       	ldi	r22, 0x0B	; 11
    edc4:	70 e0       	ldi	r23, 0x00	; 0
    edc6:	4a e0       	ldi	r20, 0x0A	; 10
    edc8:	50 e0       	ldi	r21, 0x00	; 0
    edca:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
	      stMenuMaster=mmDisplaySuccess;
    edce:	8d e0       	ldi	r24, 0x0D	; 13
    edd0:	81 cd       	rjmp	.-1278   	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmDisplayInvalidRestoreCode:
	      lcd_printf(3,1,PSTR("Invalid Restore  "));
    edd2:	83 e0       	ldi	r24, 0x03	; 3
    edd4:	61 e0       	ldi	r22, 0x01	; 1
    edd6:	4b ed       	ldi	r20, 0xDB	; 219
    edd8:	57 e1       	ldi	r21, 0x17	; 23
    edda:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  TimDisplay=0;
    edde:	10 92 93 01 	sts	0x0193, r1
          stMenuMaster=mmDelayInvalidRestoreCode;
    ede2:	8b e0       	ldi	r24, 0x0B	; 11
    ede4:	77 cd       	rjmp	.-1298   	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmDelayInvalidRestoreCode:
	      if (TimDisplay>5)stMenuMaster=mmDisplayKeyStamp;
    ede6:	80 91 93 01 	lds	r24, 0x0193
    edea:	86 30       	cpi	r24, 0x06	; 6
    edec:	d0 f0       	brcs	.+52     	; 0xee22 <FMenuMaster+0x5e8>
    edee:	87 e0       	ldi	r24, 0x07	; 7
    edf0:	71 cd       	rjmp	.-1310   	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
    edf2:	83 e0       	ldi	r24, 0x03	; 3
    edf4:	61 e0       	ldi	r22, 0x01	; 1
    edf6:	49 ec       	ldi	r20, 0xC9	; 201
    edf8:	57 e1       	ldi	r21, 0x17	; 23
    edfa:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    edfe:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ee00:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ee02:	81 e0       	ldi	r24, 0x01	; 1
    ee04:	80 93 be 01 	sts	0x01BE, r24
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
		  system_beep(1);
		  TimDisplay=0;
    ee08:	10 92 93 01 	sts	0x0193, r1
          stMenuMaster=mmDelayExit;
    ee0c:	8f e0       	ldi	r24, 0x0F	; 15
    ee0e:	62 cd       	rjmp	.-1340   	; 0xe8d4 <FMenuMaster+0x9a>
	      break;
     case mmDelayExit:
	      if (TimDisplay>=5)stMenuMaster=mmExitMaster;
    ee10:	80 91 93 01 	lds	r24, 0x0193
    ee14:	85 30       	cpi	r24, 0x05	; 5
    ee16:	28 f0       	brcs	.+10     	; 0xee22 <FMenuMaster+0x5e8>
    ee18:	5c cd       	rjmp	.-1352   	; 0xe8d2 <FMenuMaster+0x98>
	      break;
     case mmExitMaster:
	      stMenuMaster=mmInitMaster;
    ee1a:	10 92 4f 02 	sts	0x024F, r1
    ee1e:	81 e0       	ldi	r24, 0x01	; 1
    ee20:	01 c0       	rjmp	.+2      	; 0xee24 <FMenuMaster+0x5ea>
    ee22:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;

}
    ee24:	e2 96       	adiw	r28, 0x32	; 50
    ee26:	0f b6       	in	r0, 0x3f	; 63
    ee28:	f8 94       	cli
    ee2a:	de bf       	out	0x3e, r29	; 62
    ee2c:	0f be       	out	0x3f, r0	; 63
    ee2e:	cd bf       	out	0x3d, r28	; 61
    ee30:	cf 91       	pop	r28
    ee32:	df 91       	pop	r29
    ee34:	1f 91       	pop	r17
    ee36:	0f 91       	pop	r16
    ee38:	ff 90       	pop	r15
    ee3a:	ef 90       	pop	r14
    ee3c:	df 90       	pop	r13
    ee3e:	cf 90       	pop	r12
    ee40:	08 95       	ret

0000ee42 <FMenuPassword>:
   return Result;	 
}



char FMenuPassword(){
    ee42:	af 92       	push	r10
    ee44:	bf 92       	push	r11
    ee46:	cf 92       	push	r12
    ee48:	df 92       	push	r13
    ee4a:	ef 92       	push	r14
    ee4c:	0f 93       	push	r16
    ee4e:	1f 93       	push	r17
    ee50:	df 93       	push	r29
    ee52:	cf 93       	push	r28
    ee54:	cd b7       	in	r28, 0x3d	; 61
    ee56:	de b7       	in	r29, 0x3e	; 62
    ee58:	6e 97       	sbiw	r28, 0x1e	; 30
    ee5a:	0f b6       	in	r0, 0x3f	; 63
    ee5c:	f8 94       	cli
    ee5e:	de bf       	out	0x3e, r29	; 62
    ee60:	0f be       	out	0x3f, r0	; 63
    ee62:	cd bf       	out	0x3d, r28	; 61
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
     switch(stMenuPasword){
    ee64:	e0 90 5b 02 	lds	r14, 0x025B
    ee68:	81 e0       	ldi	r24, 0x01	; 1
    ee6a:	e8 16       	cp	r14, r24
    ee6c:	01 f1       	breq	.+64     	; 0xeeae <FMenuPassword+0x6c>
    ee6e:	e8 16       	cp	r14, r24
    ee70:	40 f0       	brcs	.+16     	; 0xee82 <FMenuPassword+0x40>
    ee72:	e2 e0       	ldi	r30, 0x02	; 2
    ee74:	ee 16       	cp	r14, r30
    ee76:	e9 f1       	breq	.+122    	; 0xeef2 <FMenuPassword+0xb0>
    ee78:	f3 e0       	ldi	r31, 0x03	; 3
    ee7a:	ef 16       	cp	r14, r31
    ee7c:	09 f0       	breq	.+2      	; 0xee80 <FMenuPassword+0x3e>
    ee7e:	8c c0       	rjmp	.+280    	; 0xef98 <FMenuPassword+0x156>
    ee80:	86 c0       	rjmp	.+268    	; 0xef8e <FMenuPassword+0x14c>
	 case mpInitPassword:
	      lcd_clear();
    ee82:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("PASSWORD:"));
    ee86:	81 e0       	ldi	r24, 0x01	; 1
    ee88:	61 e0       	ldi	r22, 0x01	; 1
    ee8a:	42 e6       	ldi	r20, 0x62	; 98
    ee8c:	5a e1       	ldi	r21, 0x1A	; 26
    ee8e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    ee92:	82 e0       	ldi	r24, 0x02	; 2
    ee94:	61 e0       	ldi	r22, 0x01	; 1
    ee96:	40 e6       	ldi	r20, 0x60	; 96
    ee98:	5a e1       	ldi	r21, 0x1A	; 26
    ee9a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ee9e:	84 e0       	ldi	r24, 0x04	; 4
    eea0:	61 e0       	ldi	r22, 0x01	; 1
    eea2:	4b e4       	ldi	r20, 0x4B	; 75
    eea4:	5a e1       	ldi	r21, 0x1A	; 26
    eea6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  FillChar(strPassword,0,sizeof(strPassword));
		  stMenuPasword=mpInputPasword;
    eeaa:	81 e0       	ldi	r24, 0x01	; 1
    eeac:	6d c0       	rjmp	.+218    	; 0xef88 <FMenuPassword+0x146>
	      break;
     case mpInputPasword:
	 	      uiResult=UserInput(UI_NUM_PASSWORD,2,1,strPassword,0,8);
    eeae:	84 e0       	ldi	r24, 0x04	; 4
    eeb0:	62 e0       	ldi	r22, 0x02	; 2
    eeb2:	41 e0       	ldi	r20, 0x01	; 1
    eeb4:	21 e5       	ldi	r18, 0x51	; 81
    eeb6:	32 e0       	ldi	r19, 0x02	; 2
    eeb8:	00 e0       	ldi	r16, 0x00	; 0
    eeba:	10 e0       	ldi	r17, 0x00	; 0
    eebc:	a8 e0       	ldi	r26, 0x08	; 8
    eebe:	ea 2e       	mov	r14, r26
    eec0:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		  if (uiResult==USER_OK){
    eec4:	83 30       	cpi	r24, 0x03	; 3
    eec6:	11 f4       	brne	.+4      	; 0xeecc <FMenuPassword+0x8a>
		      stMenuPasword=mpProcessPassword;
    eec8:	82 e0       	ldi	r24, 0x02	; 2
    eeca:	5e c0       	rjmp	.+188    	; 0xef88 <FMenuPassword+0x146>
			  }
		  else
		  if (uiResult==USER_CANCEL){
    eecc:	81 30       	cpi	r24, 0x01	; 1
    eece:	09 f4       	brne	.+2      	; 0xeed2 <FMenuPassword+0x90>
    eed0:	4c c0       	rjmp	.+152    	; 0xef6a <FMenuPassword+0x128>
		      PassStatus=MP_CANCEL;
		      stMenuPasword=mpExit;
			  }
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    eed2:	84 30       	cpi	r24, 0x04	; 4
    eed4:	21 f4       	brne	.+8      	; 0xeede <FMenuPassword+0x9c>
    eed6:	61 e0       	ldi	r22, 0x01	; 1
    eed8:	46 e3       	ldi	r20, 0x36	; 54
    eeda:	5a e1       	ldi	r21, 0x1A	; 26
    eedc:	07 c0       	rjmp	.+14     	; 0xeeec <FMenuPassword+0xaa>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    eede:	85 30       	cpi	r24, 0x05	; 5
    eee0:	09 f0       	breq	.+2      	; 0xeee4 <FMenuPassword+0xa2>
    eee2:	5a c0       	rjmp	.+180    	; 0xef98 <FMenuPassword+0x156>
    eee4:	84 e0       	ldi	r24, 0x04	; 4
    eee6:	61 e0       	ldi	r22, 0x01	; 1
    eee8:	41 e2       	ldi	r20, 0x21	; 33
    eeea:	5a e1       	ldi	r21, 0x1A	; 26
    eeec:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    eef0:	53 c0       	rjmp	.+166    	; 0xef98 <FMenuPassword+0x156>
          break;	 
	 case mpProcessPassword:
		      
	      sprintf_P(strMasterPass,PSTR(MASTER_PASSWORD)); 
    eef2:	00 d0       	rcall	.+0      	; 0xeef4 <FMenuPassword+0xb2>
    eef4:	00 d0       	rcall	.+0      	; 0xeef6 <FMenuPassword+0xb4>
    eef6:	8e 01       	movw	r16, r28
    eef8:	0f 5f       	subi	r16, 0xFF	; 255
    eefa:	1f 4f       	sbci	r17, 0xFF	; 255
    eefc:	ed b7       	in	r30, 0x3d	; 61
    eefe:	fe b7       	in	r31, 0x3e	; 62
    ef00:	12 83       	std	Z+2, r17	; 0x02
    ef02:	01 83       	std	Z+1, r16	; 0x01
    ef04:	89 e1       	ldi	r24, 0x19	; 25
    ef06:	9a e1       	ldi	r25, 0x1A	; 26
    ef08:	94 83       	std	Z+4, r25	; 0x04
    ef0a:	83 83       	std	Z+3, r24	; 0x03
    ef0c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      eeprom_read_block((void*) &strAdminPass, (const void*) &DefSpvPassword, 10);
    ef10:	0f 90       	pop	r0
    ef12:	0f 90       	pop	r0
    ef14:	0f 90       	pop	r0
    ef16:	0f 90       	pop	r0
    ef18:	f5 e1       	ldi	r31, 0x15	; 21
    ef1a:	cf 2e       	mov	r12, r31
    ef1c:	d1 2c       	mov	r13, r1
    ef1e:	cc 0e       	add	r12, r28
    ef20:	dd 1e       	adc	r13, r29
    ef22:	c6 01       	movw	r24, r12
    ef24:	61 e0       	ldi	r22, 0x01	; 1
    ef26:	70 e0       	ldi	r23, 0x00	; 0
    ef28:	4a e0       	ldi	r20, 0x0A	; 10
    ef2a:	50 e0       	ldi	r21, 0x00	; 0
    ef2c:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	      eeprom_read_block((void*) &strSystemPass, (const void*) &DefSysPassword, 10);
    ef30:	eb e0       	ldi	r30, 0x0B	; 11
    ef32:	ae 2e       	mov	r10, r30
    ef34:	b1 2c       	mov	r11, r1
    ef36:	ac 0e       	add	r10, r28
    ef38:	bd 1e       	adc	r11, r29
    ef3a:	c5 01       	movw	r24, r10
    ef3c:	6b e0       	ldi	r22, 0x0B	; 11
    ef3e:	70 e0       	ldi	r23, 0x00	; 0
    ef40:	4a e0       	ldi	r20, 0x0A	; 10
    ef42:	50 e0       	ldi	r21, 0x00	; 0
    ef44:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  
		  if (strcmp(strMasterPass,strPassword)==0)
    ef48:	c8 01       	movw	r24, r16
    ef4a:	61 e5       	ldi	r22, 0x51	; 81
    ef4c:	72 e0       	ldi	r23, 0x02	; 2
    ef4e:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    ef52:	00 97       	sbiw	r24, 0x00	; 0
    ef54:	11 f4       	brne	.+4      	; 0xef5a <FMenuPassword+0x118>
		       PassStatus=MP_VALID_MASTER;
    ef56:	83 e0       	ldi	r24, 0x03	; 3
    ef58:	08 c0       	rjmp	.+16     	; 0xef6a <FMenuPassword+0x128>
		  else
	      if (strcmp(strAdminPass,strPassword)==0){
    ef5a:	c6 01       	movw	r24, r12
    ef5c:	61 e5       	ldi	r22, 0x51	; 81
    ef5e:	72 e0       	ldi	r23, 0x02	; 2
    ef60:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    ef64:	00 97       	sbiw	r24, 0x00	; 0
    ef66:	21 f4       	brne	.+8      	; 0xef70 <FMenuPassword+0x12e>
		       PassStatus=MP_VALID_ADMIN;
    ef68:	84 e0       	ldi	r24, 0x04	; 4
    ef6a:	80 93 50 02 	sts	0x0250, r24
    ef6e:	0b c0       	rjmp	.+22     	; 0xef86 <FMenuPassword+0x144>
               //lcd_printf(3,1,PSTR("Admin"));
               //_delay_ms(5000);
			   }
		  else if (strcmp(strSystemPass,strPassword)==0){
    ef70:	c5 01       	movw	r24, r10
    ef72:	61 e5       	ldi	r22, 0x51	; 81
    ef74:	72 e0       	ldi	r23, 0x02	; 2
    ef76:	0e 94 e7 ab 	call	0x157ce	; 0x157ce <strcmp>
    ef7a:	00 97       	sbiw	r24, 0x00	; 0
    ef7c:	11 f4       	brne	.+4      	; 0xef82 <FMenuPassword+0x140>
		       PassStatus=MP_VALID_SYSTEM;
    ef7e:	85 e0       	ldi	r24, 0x05	; 5
    ef80:	f4 cf       	rjmp	.-24     	; 0xef6a <FMenuPassword+0x128>
			   //lcd_printf(3,1,PSTR("System"));
               //_delay_ms(5000);
			   }
		  else PassStatus=MP_INVALID;
    ef82:	e0 92 50 02 	sts	0x0250, r14
		  stMenuPasword=mpExit;
    ef86:	83 e0       	ldi	r24, 0x03	; 3
    ef88:	80 93 5b 02 	sts	0x025B, r24
    ef8c:	05 c0       	rjmp	.+10     	; 0xef98 <FMenuPassword+0x156>
	      break;
	 case mpExit:
	      //lcd_print(3,1,strPassword);
		  //_delay_ms(5000);
	      stMenuPasword=mpInitPassword;
    ef8e:	10 92 5b 02 	sts	0x025B, r1
	      Result=PassStatus;
    ef92:	80 91 50 02 	lds	r24, 0x0250
    ef96:	01 c0       	rjmp	.+2      	; 0xef9a <FMenuPassword+0x158>
    ef98:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    ef9a:	6e 96       	adiw	r28, 0x1e	; 30
    ef9c:	0f b6       	in	r0, 0x3f	; 63
    ef9e:	f8 94       	cli
    efa0:	de bf       	out	0x3e, r29	; 62
    efa2:	0f be       	out	0x3f, r0	; 63
    efa4:	cd bf       	out	0x3d, r28	; 61
    efa6:	cf 91       	pop	r28
    efa8:	df 91       	pop	r29
    efaa:	1f 91       	pop	r17
    efac:	0f 91       	pop	r16
    efae:	ef 90       	pop	r14
    efb0:	df 90       	pop	r13
    efb2:	cf 90       	pop	r12
    efb4:	bf 90       	pop	r11
    efb6:	af 90       	pop	r10
    efb8:	08 95       	ret

0000efba <SetBaudRate>:
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
	 IsFreePrinting=True;
}

void SetBaudRate(char ComAddr,char brMap){//Com1..Com4
    efba:	1f 93       	push	r17
    efbc:	28 2f       	mov	r18, r24
    efbe:	96 2f       	mov	r25, r22
unsigned int brValue=9600;
char brMessage=0;

     if ((ComAddr>=1)&&(ComAddr<=2)){
    efc0:	18 2f       	mov	r17, r24
    efc2:	11 50       	subi	r17, 0x01	; 1
    efc4:	12 30       	cpi	r17, 0x02	; 2
    efc6:	50 f4       	brcc	.+20     	; 0xefdc <SetBaudRate+0x22>
	     brValue=GetBaudrate(brMap);
    efc8:	86 2f       	mov	r24, r22
    efca:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <GetBaudrate>
	      uart_init((ComAddr-1),brValue);
    efce:	ac 01       	movw	r20, r24
    efd0:	60 e0       	ldi	r22, 0x00	; 0
    efd2:	70 e0       	ldi	r23, 0x00	; 0
    efd4:	81 2f       	mov	r24, r17
    efd6:	0e 94 be a9 	call	0x1537c	; 0x1537c <uart_init>
    efda:	18 c0       	rjmp	.+48     	; 0xf00c <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
    efdc:	83 50       	subi	r24, 0x03	; 3
    efde:	82 30       	cpi	r24, 0x02	; 2
    efe0:	a8 f4       	brcc	.+42     	; 0xf00c <SetBaudRate+0x52>
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
    efe2:	9f 70       	andi	r25, 0x0F	; 15
    efe4:	62 2f       	mov	r22, r18
    efe6:	62 95       	swap	r22
    efe8:	60 7f       	andi	r22, 0xF0	; 240
    efea:	69 2b       	or	r22, r25
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
    efec:	80 91 80 01 	lds	r24, 0x0180
    eff0:	88 23       	and	r24, r24
    eff2:	49 f0       	breq	.+18     	; 0xf006 <SetBaudRate+0x4c>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    eff4:	86 e0       	ldi	r24, 0x06	; 6
    eff6:	80 93 ad 05 	sts	0x05AD, r24
	 PoolMsg=plMsg;
    effa:	60 93 d9 0b 	sts	0x0BD9, r22
     IsControlPooling=True;
    effe:	81 e0       	ldi	r24, 0x01	; 1
    f000:	80 93 84 01 	sts	0x0184, r24
    f004:	03 c0       	rjmp	.+6      	; 0xf00c <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
    f006:	86 e0       	ldi	r24, 0x06	; 6
    f008:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
		 
	 }
}
    f00c:	1f 91       	pop	r17
    f00e:	08 95       	ret

0000f010 <FSettingSystem>:
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    f010:	af 92       	push	r10
    f012:	bf 92       	push	r11
    f014:	cf 92       	push	r12
    f016:	df 92       	push	r13
    f018:	ef 92       	push	r14
    f01a:	ff 92       	push	r15
    f01c:	0f 93       	push	r16
    f01e:	1f 93       	push	r17
    f020:	df 93       	push	r29
    f022:	cf 93       	push	r28
    f024:	cd b7       	in	r28, 0x3d	; 61
    f026:	de b7       	in	r29, 0x3e	; 62
    f028:	64 97       	sbiw	r28, 0x14	; 20
    f02a:	0f b6       	in	r0, 0x3f	; 63
    f02c:	f8 94       	cli
    f02e:	de bf       	out	0x3e, r29	; 62
    f030:	0f be       	out	0x3f, r0	; 63
    f032:	cd bf       	out	0x3d, r28	; 61
       char SubMenu,Result=MENU_NONE;
	   char HGMode;
       char lcdteks[20];
	   int bValue;

     switch(stSettingSytem){
    f034:	80 91 1f 02 	lds	r24, 0x021F
    f038:	82 30       	cpi	r24, 0x02	; 2
    f03a:	09 f4       	brne	.+2      	; 0xf03e <FSettingSystem+0x2e>
    f03c:	b9 c0       	rjmp	.+370    	; 0xf1b0 <FSettingSystem+0x1a0>
    f03e:	83 30       	cpi	r24, 0x03	; 3
    f040:	30 f4       	brcc	.+12     	; 0xf04e <FSettingSystem+0x3e>
    f042:	88 23       	and	r24, r24
    f044:	71 f0       	breq	.+28     	; 0xf062 <FSettingSystem+0x52>
    f046:	81 30       	cpi	r24, 0x01	; 1
    f048:	09 f0       	breq	.+2      	; 0xf04c <FSettingSystem+0x3c>
    f04a:	44 c1       	rjmp	.+648    	; 0xf2d4 <FSettingSystem+0x2c4>
    f04c:	79 c0       	rjmp	.+242    	; 0xf140 <FSettingSystem+0x130>
    f04e:	84 30       	cpi	r24, 0x04	; 4
    f050:	09 f4       	brne	.+2      	; 0xf054 <FSettingSystem+0x44>
    f052:	35 c1       	rjmp	.+618    	; 0xf2be <FSettingSystem+0x2ae>
    f054:	84 30       	cpi	r24, 0x04	; 4
    f056:	08 f4       	brcc	.+2      	; 0xf05a <FSettingSystem+0x4a>
    f058:	08 c1       	rjmp	.+528    	; 0xf26a <FSettingSystem+0x25a>
    f05a:	85 30       	cpi	r24, 0x05	; 5
    f05c:	09 f0       	breq	.+2      	; 0xf060 <FSettingSystem+0x50>
    f05e:	3a c1       	rjmp	.+628    	; 0xf2d4 <FSettingSystem+0x2c4>
    f060:	35 c1       	rjmp	.+618    	; 0xf2cc <FSettingSystem+0x2bc>
	 case ssInitSettingSystem:
	      IFType=eeprom_read_byte(&DefInitIFT);
    f062:	8b e3       	ldi	r24, 0x3B	; 59
    f064:	91 e0       	ldi	r25, 0x01	; 1
    f066:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    f06a:	18 2f       	mov	r17, r24
    f06c:	80 93 00 01 	sts	0x0100, r24
		  HGMode=eeprom_read_byte(&DefHGMode);
    f070:	88 ec       	ldi	r24, 0xC8	; 200
    f072:	93 e0       	ldi	r25, 0x03	; 3
    f074:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    f078:	08 2f       	mov	r16, r24

	      if (IFType==IT_NONE)sprintf_P(lcdteks,PSTR("1.Mode:None"));
    f07a:	11 23       	and	r17, r17
    f07c:	69 f4       	brne	.+26     	; 0xf098 <FSettingSystem+0x88>
    f07e:	00 d0       	rcall	.+0      	; 0xf080 <FSettingSystem+0x70>
    f080:	00 d0       	rcall	.+0      	; 0xf082 <FSettingSystem+0x72>
    f082:	ce 01       	movw	r24, r28
    f084:	01 96       	adiw	r24, 0x01	; 1
    f086:	ad b7       	in	r26, 0x3d	; 61
    f088:	be b7       	in	r27, 0x3e	; 62
    f08a:	12 96       	adiw	r26, 0x02	; 2
    f08c:	9c 93       	st	X, r25
    f08e:	8e 93       	st	-X, r24
    f090:	11 97       	sbiw	r26, 0x01	; 1
    f092:	82 ec       	ldi	r24, 0xC2	; 194
    f094:	9f e0       	ldi	r25, 0x0F	; 15
    f096:	1d c0       	rjmp	.+58     	; 0xf0d2 <FSettingSystem+0xc2>
		  else
	      if (IFType==IT_SLAVE)sprintf_P(lcdteks,PSTR("1.Mode:Slave"));
    f098:	11 30       	cpi	r17, 0x01	; 1
    f09a:	69 f4       	brne	.+26     	; 0xf0b6 <FSettingSystem+0xa6>
    f09c:	00 d0       	rcall	.+0      	; 0xf09e <FSettingSystem+0x8e>
    f09e:	00 d0       	rcall	.+0      	; 0xf0a0 <FSettingSystem+0x90>
    f0a0:	ce 01       	movw	r24, r28
    f0a2:	01 96       	adiw	r24, 0x01	; 1
    f0a4:	ed b7       	in	r30, 0x3d	; 61
    f0a6:	fe b7       	in	r31, 0x3e	; 62
    f0a8:	92 83       	std	Z+2, r25	; 0x02
    f0aa:	81 83       	std	Z+1, r24	; 0x01
    f0ac:	85 eb       	ldi	r24, 0xB5	; 181
    f0ae:	9f e0       	ldi	r25, 0x0F	; 15
    f0b0:	94 83       	std	Z+4, r25	; 0x04
    f0b2:	83 83       	std	Z+3, r24	; 0x03
    f0b4:	12 c0       	rjmp	.+36     	; 0xf0da <FSettingSystem+0xca>
		  else
	      if (IFType==IT_STANDALONE)sprintf_P(lcdteks,PSTR("1.Mode:Standalone"));
    f0b6:	12 30       	cpi	r17, 0x02	; 2
    f0b8:	b1 f4       	brne	.+44     	; 0xf0e6 <FSettingSystem+0xd6>
    f0ba:	00 d0       	rcall	.+0      	; 0xf0bc <FSettingSystem+0xac>
    f0bc:	00 d0       	rcall	.+0      	; 0xf0be <FSettingSystem+0xae>
    f0be:	ce 01       	movw	r24, r28
    f0c0:	01 96       	adiw	r24, 0x01	; 1
    f0c2:	ad b7       	in	r26, 0x3d	; 61
    f0c4:	be b7       	in	r27, 0x3e	; 62
    f0c6:	12 96       	adiw	r26, 0x02	; 2
    f0c8:	9c 93       	st	X, r25
    f0ca:	8e 93       	st	-X, r24
    f0cc:	11 97       	sbiw	r26, 0x01	; 1
    f0ce:	83 ea       	ldi	r24, 0xA3	; 163
    f0d0:	9f e0       	ldi	r25, 0x0F	; 15
    f0d2:	14 96       	adiw	r26, 0x04	; 4
    f0d4:	9c 93       	st	X, r25
    f0d6:	8e 93       	st	-X, r24
    f0d8:	13 97       	sbiw	r26, 0x03	; 3
    f0da:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
    f0de:	0f 90       	pop	r0
    f0e0:	0f 90       	pop	r0
    f0e2:	0f 90       	pop	r0
    f0e4:	0f 90       	pop	r0

	      lcd_clear();
    f0e6:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_print(1,1,lcdteks);
    f0ea:	81 e0       	ldi	r24, 0x01	; 1
    f0ec:	61 e0       	ldi	r22, 0x01	; 1
    f0ee:	ae 01       	movw	r20, r28
    f0f0:	4f 5f       	subi	r20, 0xFF	; 255
    f0f2:	5f 4f       	sbci	r21, 0xFF	; 255
    f0f4:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(2,1,PSTR("2.Baudrate"));
    f0f8:	82 e0       	ldi	r24, 0x02	; 2
    f0fa:	61 e0       	ldi	r22, 0x01	; 1
    f0fc:	48 e9       	ldi	r20, 0x98	; 152
    f0fe:	5f e0       	ldi	r21, 0x0F	; 15
    f100:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>

		  if (HGMode==HM_TTL)lcd_printf(3,1,PSTR("3.COM3:TTL"));
    f104:	00 23       	and	r16, r16
    f106:	29 f4       	brne	.+10     	; 0xf112 <FSettingSystem+0x102>
    f108:	83 e0       	ldi	r24, 0x03	; 3
    f10a:	61 e0       	ldi	r22, 0x01	; 1
    f10c:	4d e8       	ldi	r20, 0x8D	; 141
    f10e:	5f e0       	ldi	r21, 0x0F	; 15
    f110:	0d c0       	rjmp	.+26     	; 0xf12c <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_232)lcd_printf(3,1,PSTR("3.COM3:232"));
    f112:	01 30       	cpi	r16, 0x01	; 1
    f114:	29 f4       	brne	.+10     	; 0xf120 <FSettingSystem+0x110>
    f116:	83 e0       	ldi	r24, 0x03	; 3
    f118:	61 e0       	ldi	r22, 0x01	; 1
    f11a:	42 e8       	ldi	r20, 0x82	; 130
    f11c:	5f e0       	ldi	r21, 0x0F	; 15
    f11e:	06 c0       	rjmp	.+12     	; 0xf12c <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_485)lcd_printf(3,1,PSTR("3.COM3:485"));		  
    f120:	02 30       	cpi	r16, 0x02	; 2
    f122:	31 f4       	brne	.+12     	; 0xf130 <FSettingSystem+0x120>
    f124:	83 e0       	ldi	r24, 0x03	; 3
    f126:	61 e0       	ldi	r22, 0x01	; 1
    f128:	47 e7       	ldi	r20, 0x77	; 119
    f12a:	5f e0       	ldi	r21, 0x0F	; 15
    f12c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back      "));
    f130:	84 e0       	ldi	r24, 0x04	; 4
    f132:	61 e0       	ldi	r22, 0x01	; 1
    f134:	49 e6       	ldi	r20, 0x69	; 105
    f136:	5f e0       	ldi	r21, 0x0F	; 15
    f138:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stSettingSytem=ssMenuSelect;
    f13c:	81 e0       	ldi	r24, 0x01	; 1
    f13e:	bc c0       	rjmp	.+376    	; 0xf2b8 <FSettingSystem+0x2a8>
	      break;
     case ssMenuSelect:
          KeyPressed=_key_scan(1);
    f140:	81 e0       	ldi	r24, 0x01	; 1
    f142:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f146:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  if (KeyChar=='1'){
    f14a:	81 33       	cpi	r24, 0x31	; 49
    f14c:	99 f4       	brne	.+38     	; 0xf174 <FSettingSystem+0x164>
		      IFType=((IFType+1)%3);
    f14e:	80 91 00 01 	lds	r24, 0x0100
    f152:	90 e0       	ldi	r25, 0x00	; 0
    f154:	01 96       	adiw	r24, 0x01	; 1
    f156:	63 e0       	ldi	r22, 0x03	; 3
    f158:	70 e0       	ldi	r23, 0x00	; 0
    f15a:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    f15e:	80 93 00 01 	sts	0x0100, r24
			  SendSlaveCommand(IFType,DispenserBrand);
    f162:	60 91 5e 01 	lds	r22, 0x015E
    f166:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
			  eeprom_write_byte(&DefInitIFT,IFType);
    f16a:	8b e3       	ldi	r24, 0x3B	; 59
    f16c:	91 e0       	ldi	r25, 0x01	; 1
    f16e:	60 91 00 01 	lds	r22, 0x0100
    f172:	17 c0       	rjmp	.+46     	; 0xf1a2 <FSettingSystem+0x192>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  else
		  if (KeyChar=='2'){
    f174:	82 33       	cpi	r24, 0x32	; 50
    f176:	09 f4       	brne	.+2      	; 0xf17a <FSettingSystem+0x16a>
    f178:	99 c0       	rjmp	.+306    	; 0xf2ac <FSettingSystem+0x29c>
		      stSettingSytem=ssComSettings;
		  }
		  else
		  if (KeyChar=='3'){
    f17a:	83 33       	cpi	r24, 0x33	; 51
    f17c:	a9 f4       	brne	.+42     	; 0xf1a8 <FSettingSystem+0x198>
		      HGMode=eeprom_read_byte(&DefHGMode);
    f17e:	88 ec       	ldi	r24, 0xC8	; 200
    f180:	93 e0       	ldi	r25, 0x03	; 3
    f182:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
		      HGMode=((HGMode+1)%3);
    f186:	90 e0       	ldi	r25, 0x00	; 0
    f188:	01 96       	adiw	r24, 0x01	; 1
    f18a:	63 e0       	ldi	r22, 0x03	; 3
    f18c:	70 e0       	ldi	r23, 0x00	; 0
    f18e:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    f192:	18 2f       	mov	r17, r24
			  SendSlaveCommand(SC_HGM_MODE,HGMode);
    f194:	81 e2       	ldi	r24, 0x21	; 33
    f196:	61 2f       	mov	r22, r17
    f198:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
			  eeprom_write_byte(&DefHGMode,HGMode);
    f19c:	88 ec       	ldi	r24, 0xC8	; 200
    f19e:	93 e0       	ldi	r25, 0x03	; 3
    f1a0:	61 2f       	mov	r22, r17
    f1a2:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
    f1a6:	8f c0       	rjmp	.+286    	; 0xf2c6 <FSettingSystem+0x2b6>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  //else
		  if (KeyChar=='*'){
    f1a8:	8a 32       	cpi	r24, 0x2A	; 42
    f1aa:	09 f4       	brne	.+2      	; 0xf1ae <FSettingSystem+0x19e>
    f1ac:	84 c0       	rjmp	.+264    	; 0xf2b6 <FSettingSystem+0x2a6>
    f1ae:	92 c0       	rjmp	.+292    	; 0xf2d4 <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
    f1b0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    f1b4:	81 e0       	ldi	r24, 0x01	; 1
    f1b6:	61 e0       	ldi	r22, 0x01	; 1
    f1b8:	44 e5       	ldi	r20, 0x54	; 84
    f1ba:	5f e0       	ldi	r21, 0x0F	; 15
    f1bc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    f1c0:	01 e0       	ldi	r16, 0x01	; 1
    f1c2:	10 e0       	ldi	r17, 0x00	; 0

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    f1c4:	6e 01       	movw	r12, r28
    f1c6:	08 94       	sec
    f1c8:	c1 1c       	adc	r12, r1
    f1ca:	d1 1c       	adc	r13, r1
    f1cc:	8b e4       	ldi	r24, 0x4B	; 75
    f1ce:	a8 2e       	mov	r10, r24
    f1d0:	8f e0       	ldi	r24, 0x0F	; 15
    f1d2:	b8 2e       	mov	r11, r24
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    f1d4:	bb e0       	ldi	r27, 0x0B	; 11
    f1d6:	eb 2e       	mov	r14, r27
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    f1d8:	f0 2e       	mov	r15, r16
    f1da:	fa 94       	dec	r15

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
    f1dc:	c8 01       	movw	r24, r16
    f1de:	8c 5b       	subi	r24, 0xBC	; 188
    f1e0:	9e 4f       	sbci	r25, 0xFE	; 254
    f1e2:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    f1e6:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <GetBaudrate>
			   if (bValue==5787)bValue=12213;
    f1ea:	b6 e1       	ldi	r27, 0x16	; 22
    f1ec:	8b 39       	cpi	r24, 0x9B	; 155
    f1ee:	9b 07       	cpc	r25, r27
    f1f0:	11 f4       	brne	.+4      	; 0xf1f6 <FSettingSystem+0x1e6>
    f1f2:	85 eb       	ldi	r24, 0xB5	; 181
    f1f4:	9f e2       	ldi	r25, 0x2F	; 47
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    f1f6:	ed b7       	in	r30, 0x3d	; 61
    f1f8:	fe b7       	in	r31, 0x3e	; 62
    f1fa:	38 97       	sbiw	r30, 0x08	; 8
    f1fc:	0f b6       	in	r0, 0x3f	; 63
    f1fe:	f8 94       	cli
    f200:	fe bf       	out	0x3e, r31	; 62
    f202:	0f be       	out	0x3f, r0	; 63
    f204:	ed bf       	out	0x3d, r30	; 61
    f206:	31 96       	adiw	r30, 0x01	; 1
    f208:	ad b7       	in	r26, 0x3d	; 61
    f20a:	be b7       	in	r27, 0x3e	; 62
    f20c:	12 96       	adiw	r26, 0x02	; 2
    f20e:	dc 92       	st	X, r13
    f210:	ce 92       	st	-X, r12
    f212:	11 97       	sbiw	r26, 0x01	; 1
    f214:	b3 82       	std	Z+3, r11	; 0x03
    f216:	a2 82       	std	Z+2, r10	; 0x02
    f218:	15 83       	std	Z+5, r17	; 0x05
    f21a:	04 83       	std	Z+4, r16	; 0x04
    f21c:	97 83       	std	Z+7, r25	; 0x07
    f21e:	86 83       	std	Z+6, r24	; 0x06
    f220:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    f224:	ed b7       	in	r30, 0x3d	; 61
    f226:	fe b7       	in	r31, 0x3e	; 62
    f228:	38 96       	adiw	r30, 0x08	; 8
    f22a:	0f b6       	in	r0, 0x3f	; 63
    f22c:	f8 94       	cli
    f22e:	fe bf       	out	0x3e, r31	; 62
    f230:	0f be       	out	0x3f, r0	; 63
    f232:	ed bf       	out	0x3d, r30	; 61
    f234:	6f 2d       	mov	r22, r15
    f236:	66 95       	lsr	r22
    f238:	6e 9d       	mul	r22, r14
    f23a:	b0 01       	movw	r22, r0
    f23c:	11 24       	eor	r1, r1
    f23e:	6f 5f       	subi	r22, 0xFF	; 255
    f240:	f1 e0       	ldi	r31, 0x01	; 1
    f242:	ff 22       	and	r15, r31
    f244:	8f 2d       	mov	r24, r15
    f246:	8e 5f       	subi	r24, 0xFE	; 254
    f248:	a6 01       	movw	r20, r12
    f24a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
    f24e:	0f 5f       	subi	r16, 0xFF	; 255
    f250:	1f 4f       	sbci	r17, 0xFF	; 255
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
    f252:	05 30       	cpi	r16, 0x05	; 5
    f254:	11 05       	cpc	r17, r1
    f256:	09 f0       	breq	.+2      	; 0xf25a <FSettingSystem+0x24a>
    f258:	bf cf       	rjmp	.-130    	; 0xf1d8 <FSettingSystem+0x1c8>
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
		  }
		  lcd_printf(4,1,PSTR("[*]Back     "));
    f25a:	84 e0       	ldi	r24, 0x04	; 4
    f25c:	61 e0       	ldi	r22, 0x01	; 1
    f25e:	4e e3       	ldi	r20, 0x3E	; 62
    f260:	5f e0       	ldi	r21, 0x0F	; 15
    f262:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stSettingSytem=ssBaudrateInput;
    f266:	83 e0       	ldi	r24, 0x03	; 3
    f268:	27 c0       	rjmp	.+78     	; 0xf2b8 <FSettingSystem+0x2a8>
	      break;
     case ssBaudrateInput:
	      KeyPressed=_key_scan(1);
    f26a:	81 e0       	ldi	r24, 0x01	; 1
    f26c:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f270:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    f274:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    f276:	81 53       	subi	r24, 0x31	; 49
    f278:	84 30       	cpi	r24, 0x04	; 4
    f27a:	d0 f4       	brcc	.+52     	; 0xf2b0 <FSettingSystem+0x2a0>
		       brVal=eeprom_read_byte(&DefBaudrate[KeyChar-'1']);
    f27c:	0e 2d       	mov	r16, r14
    f27e:	10 e0       	ldi	r17, 0x00	; 0
    f280:	0c 5e       	subi	r16, 0xEC	; 236
    f282:	1e 4f       	sbci	r17, 0xFE	; 254
    f284:	c8 01       	movw	r24, r16
    f286:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
			   brVal=((brVal+1)%3)+1;
    f28a:	90 e0       	ldi	r25, 0x00	; 0
    f28c:	01 96       	adiw	r24, 0x01	; 1
    f28e:	63 e0       	ldi	r22, 0x03	; 3
    f290:	70 e0       	ldi	r23, 0x00	; 0
    f292:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    f296:	f8 2e       	mov	r15, r24
    f298:	f3 94       	inc	r15
			   SetBaudRate(KeyChar-'0',brVal);
    f29a:	8e 2d       	mov	r24, r14
    f29c:	80 53       	subi	r24, 0x30	; 48
    f29e:	6f 2d       	mov	r22, r15
    f2a0:	0e 94 dd 77 	call	0xefba	; 0xefba <SetBaudRate>
			   eeprom_write_byte(&DefBaudrate[KeyChar-'1'],brVal);
    f2a4:	c8 01       	movw	r24, r16
    f2a6:	6f 2d       	mov	r22, r15
    f2a8:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
               stSettingSytem=ssComSettings;
    f2ac:	82 e0       	ldi	r24, 0x02	; 2
    f2ae:	04 c0       	rjmp	.+8      	; 0xf2b8 <FSettingSystem+0x2a8>
		  }else if (KeyChar=='*')
    f2b0:	2a e2       	ldi	r18, 0x2A	; 42
    f2b2:	e2 16       	cp	r14, r18
    f2b4:	79 f4       	brne	.+30     	; 0xf2d4 <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;		  	
    f2b6:	85 e0       	ldi	r24, 0x05	; 5
    f2b8:	80 93 1f 02 	sts	0x021F, r24
    f2bc:	0b c0       	rjmp	.+22     	; 0xf2d4 <FSettingSystem+0x2c4>
	      break;
	 case ssPumpPoolingSettings:
          SubMenu=FSettingPumpPooling();
    f2be:	0e 94 8a 5c 	call	0xb914	; 0xb914 <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stSettingSytem=ssInitSettingSystem;
    f2c2:	81 30       	cpi	r24, 0x01	; 1
    f2c4:	39 f4       	brne	.+14     	; 0xf2d4 <FSettingSystem+0x2c4>
    f2c6:	10 92 1f 02 	sts	0x021F, r1
    f2ca:	04 c0       	rjmp	.+8      	; 0xf2d4 <FSettingSystem+0x2c4>
	      break;
     case ssExitSystemSettings:
	      stSettingSytem=ssInitSettingSystem;
    f2cc:	10 92 1f 02 	sts	0x021F, r1
    f2d0:	81 e0       	ldi	r24, 0x01	; 1
    f2d2:	01 c0       	rjmp	.+2      	; 0xf2d6 <FSettingSystem+0x2c6>
    f2d4:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    f2d6:	64 96       	adiw	r28, 0x14	; 20
    f2d8:	0f b6       	in	r0, 0x3f	; 63
    f2da:	f8 94       	cli
    f2dc:	de bf       	out	0x3e, r29	; 62
    f2de:	0f be       	out	0x3f, r0	; 63
    f2e0:	cd bf       	out	0x3d, r28	; 61
    f2e2:	cf 91       	pop	r28
    f2e4:	df 91       	pop	r29
    f2e6:	1f 91       	pop	r17
    f2e8:	0f 91       	pop	r16
    f2ea:	ff 90       	pop	r15
    f2ec:	ef 90       	pop	r14
    f2ee:	df 90       	pop	r13
    f2f0:	cf 90       	pop	r12
    f2f2:	bf 90       	pop	r11
    f2f4:	af 90       	pop	r10
    f2f6:	08 95       	ret

0000f2f8 <FMenuSettings>:
char FMenuSettings(){
char Result=MENU_NONE;
static char stMenuSettings=msInit,PageSetting=1;
     char KeyPressed,KeyChar,SubMenu;

     switch(stMenuSettings){
    f2f8:	80 91 25 02 	lds	r24, 0x0225
    f2fc:	e8 2f       	mov	r30, r24
    f2fe:	f0 e0       	ldi	r31, 0x00	; 0
    f300:	e3 31       	cpi	r30, 0x13	; 19
    f302:	f1 05       	cpc	r31, r1
    f304:	08 f0       	brcs	.+2      	; 0xf308 <FMenuSettings+0x10>
    f306:	bf c0       	rjmp	.+382    	; 0xf486 <FMenuSettings+0x18e>
    f308:	e3 58       	subi	r30, 0x83	; 131
    f30a:	ff 4f       	sbci	r31, 0xFF	; 255
    f30c:	ee 0f       	add	r30, r30
    f30e:	ff 1f       	adc	r31, r31
    f310:	05 90       	lpm	r0, Z+
    f312:	f4 91       	lpm	r31, Z+
    f314:	e0 2d       	mov	r30, r0
    f316:	09 94       	ijmp
	 case msInit:
		  lcd_clear();
    f318:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  PageSetting=1;
    f31c:	81 e0       	ldi	r24, 0x01	; 1
    f31e:	80 93 57 01 	sts	0x0157, r24
    f322:	a9 c0       	rjmp	.+338    	; 0xf476 <FMenuSettings+0x17e>
		  stMenuSettings=msDisplayPage;
		  break;
	 case msDisplayPage:
	      stMenuSettings=msDisplayPage+PageSetting;
    f324:	80 91 57 01 	lds	r24, 0x0157
    f328:	8f 5f       	subi	r24, 0xFF	; 255
    f32a:	a5 c0       	rjmp	.+330    	; 0xf476 <FMenuSettings+0x17e>
          break; 	 
	 case msDisplayPage1:
		  lcd_printf(1, 1, PSTR("1)Product  5)Printer"));
    f32c:	81 e0       	ldi	r24, 0x01	; 1
    f32e:	61 e0       	ldi	r22, 0x01	; 1
    f330:	41 e4       	ldi	r20, 0x41	; 65
    f332:	54 e1       	ldi	r21, 0x14	; 20
    f334:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)Pump     6)Host   "));
    f338:	82 e0       	ldi	r24, 0x02	; 2
    f33a:	61 e0       	ldi	r22, 0x01	; 1
    f33c:	4c e2       	ldi	r20, 0x2C	; 44
    f33e:	54 e1       	ldi	r21, 0x14	; 20
    f340:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)Decimal  7)Next   "));
    f344:	83 e0       	ldi	r24, 0x03	; 3
    f346:	61 e0       	ldi	r22, 0x01	; 1
    f348:	47 e1       	ldi	r20, 0x17	; 23
    f34a:	54 e1       	ldi	r21, 0x14	; 20
    f34c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4, 1, PSTR("4)Datetime *)Exit   "));
    f350:	84 e0       	ldi	r24, 0x04	; 4
    f352:	61 e0       	ldi	r22, 0x01	; 1
    f354:	42 e0       	ldi	r20, 0x02	; 2
    f356:	54 e1       	ldi	r21, 0x14	; 20
    f358:	16 c0       	rjmp	.+44     	; 0xf386 <FMenuSettings+0x8e>
		  stMenuSettings=msSelection;
	      break;
	 case msDisplayPage2:
		  lcd_printf(1, 1, PSTR("1)Operator          "));
    f35a:	81 e0       	ldi	r24, 0x01	; 1
    f35c:	61 e0       	ldi	r22, 0x01	; 1
    f35e:	4d ee       	ldi	r20, 0xED	; 237
    f360:	53 e1       	ldi	r21, 0x13	; 19
    f362:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)System            "));
    f366:	82 e0       	ldi	r24, 0x02	; 2
    f368:	61 e0       	ldi	r22, 0x01	; 1
    f36a:	48 ed       	ldi	r20, 0xD8	; 216
    f36c:	53 e1       	ldi	r21, 0x13	; 19
    f36e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)PumpPooling       "));
    f372:	83 e0       	ldi	r24, 0x03	; 3
    f374:	61 e0       	ldi	r22, 0x01	; 1
    f376:	43 ec       	ldi	r20, 0xC3	; 195
    f378:	53 e1       	ldi	r21, 0x13	; 19
    f37a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4, 1, PSTR("*)Back              "));
    f37e:	84 e0       	ldi	r24, 0x04	; 4
    f380:	61 e0       	ldi	r22, 0x01	; 1
    f382:	4e ea       	ldi	r20, 0xAE	; 174
    f384:	53 e1       	ldi	r21, 0x13	; 19
    f386:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stMenuSettings=msSelection;
    f38a:	84 e0       	ldi	r24, 0x04	; 4
    f38c:	74 c0       	rjmp	.+232    	; 0xf476 <FMenuSettings+0x17e>
	      break;
	 case msSelection:
	      stMenuSettings=msSelection+PageSetting;
    f38e:	80 91 57 01 	lds	r24, 0x0157
    f392:	8c 5f       	subi	r24, 0xFC	; 252
    f394:	70 c0       	rjmp	.+224    	; 0xf476 <FMenuSettings+0x17e>
          break;	 
	 case msSelectionPage1:
		  KeyPressed=_key_scan(1);
    f396:	81 e0       	ldi	r24, 0x01	; 1
    f398:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f39c:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  switch(KeyChar){
    f3a0:	84 33       	cpi	r24, 0x34	; 52
    f3a2:	d1 f0       	breq	.+52     	; 0xf3d8 <FMenuSettings+0xe0>
    f3a4:	85 33       	cpi	r24, 0x35	; 53
    f3a6:	50 f4       	brcc	.+20     	; 0xf3bc <FMenuSettings+0xc4>
    f3a8:	82 33       	cpi	r24, 0x32	; 50
    f3aa:	91 f0       	breq	.+36     	; 0xf3d0 <FMenuSettings+0xd8>
    f3ac:	83 33       	cpi	r24, 0x33	; 51
    f3ae:	90 f4       	brcc	.+36     	; 0xf3d4 <FMenuSettings+0xdc>
    f3b0:	8a 32       	cpi	r24, 0x2A	; 42
    f3b2:	d1 f0       	breq	.+52     	; 0xf3e8 <FMenuSettings+0xf0>
    f3b4:	81 33       	cpi	r24, 0x31	; 49
    f3b6:	09 f0       	breq	.+2      	; 0xf3ba <FMenuSettings+0xc2>
    f3b8:	66 c0       	rjmp	.+204    	; 0xf486 <FMenuSettings+0x18e>
    f3ba:	08 c0       	rjmp	.+16     	; 0xf3cc <FMenuSettings+0xd4>
    f3bc:	86 33       	cpi	r24, 0x36	; 54
    f3be:	81 f0       	breq	.+32     	; 0xf3e0 <FMenuSettings+0xe8>
    f3c0:	86 33       	cpi	r24, 0x36	; 54
    f3c2:	60 f0       	brcs	.+24     	; 0xf3dc <FMenuSettings+0xe4>
    f3c4:	87 33       	cpi	r24, 0x37	; 55
    f3c6:	09 f0       	breq	.+2      	; 0xf3ca <FMenuSettings+0xd2>
    f3c8:	5e c0       	rjmp	.+188    	; 0xf486 <FMenuSettings+0x18e>
    f3ca:	0c c0       	rjmp	.+24     	; 0xf3e4 <FMenuSettings+0xec>
		  case '1':
		       stMenuSettings=msMenuSettingProduct;
    f3cc:	89 e0       	ldi	r24, 0x09	; 9
    f3ce:	53 c0       	rjmp	.+166    	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '2': 
		       stMenuSettings=msMenuSettingPump;
    f3d0:	8a e0       	ldi	r24, 0x0A	; 10
    f3d2:	51 c0       	rjmp	.+162    	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingDec;
    f3d4:	8b e0       	ldi	r24, 0x0B	; 11
    f3d6:	4f c0       	rjmp	.+158    	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '4':
		       stMenuSettings=msMenuSettingDatetime;
    f3d8:	8c e0       	ldi	r24, 0x0C	; 12
    f3da:	4d c0       	rjmp	.+154    	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '5':
		       stMenuSettings=msMenuSettingPrinter;
    f3dc:	8d e0       	ldi	r24, 0x0D	; 13
    f3de:	4b c0       	rjmp	.+150    	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '6':
		       stMenuSettings=msMenuSettingHost;
    f3e0:	8e e0       	ldi	r24, 0x0E	; 14
    f3e2:	49 c0       	rjmp	.+146    	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '7':
		       stMenuSettings=msMenuSettingNextPage;
    f3e4:	87 e0       	ldi	r24, 0x07	; 7
    f3e6:	47 c0       	rjmp	.+142    	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingExit;
    f3e8:	82 e1       	ldi	r24, 0x12	; 18
    f3ea:	45 c0       	rjmp	.+138    	; 0xf476 <FMenuSettings+0x17e>
		       break;			   
		  }
	      break;
	 case msSelectionPage2:
	 	  KeyPressed=_key_scan(1);
    f3ec:	81 e0       	ldi	r24, 0x01	; 1
    f3ee:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f3f2:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  switch(KeyChar){
    f3f6:	82 33       	cpi	r24, 0x32	; 50
    f3f8:	69 f0       	breq	.+26     	; 0xf414 <FMenuSettings+0x11c>
    f3fa:	83 33       	cpi	r24, 0x33	; 51
    f3fc:	30 f4       	brcc	.+12     	; 0xf40a <FMenuSettings+0x112>
    f3fe:	8a 32       	cpi	r24, 0x2A	; 42
    f400:	69 f0       	breq	.+26     	; 0xf41c <FMenuSettings+0x124>
    f402:	81 33       	cpi	r24, 0x31	; 49
    f404:	09 f0       	breq	.+2      	; 0xf408 <FMenuSettings+0x110>
    f406:	3f c0       	rjmp	.+126    	; 0xf486 <FMenuSettings+0x18e>
    f408:	03 c0       	rjmp	.+6      	; 0xf410 <FMenuSettings+0x118>
    f40a:	83 33       	cpi	r24, 0x33	; 51
    f40c:	e1 f5       	brne	.+120    	; 0xf486 <FMenuSettings+0x18e>
    f40e:	04 c0       	rjmp	.+8      	; 0xf418 <FMenuSettings+0x120>
		  case '1':
		       stMenuSettings=msMenuSettingOperator;
    f410:	8f e0       	ldi	r24, 0x0F	; 15
    f412:	31 c0       	rjmp	.+98     	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '2':
		       stMenuSettings=msMenuSettingSystem;
    f414:	80 e1       	ldi	r24, 0x10	; 16
    f416:	2f c0       	rjmp	.+94     	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingPumpPooling;
    f418:	81 e1       	ldi	r24, 0x11	; 17
    f41a:	2d c0       	rjmp	.+90     	; 0xf476 <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingBackPage;
    f41c:	88 e0       	ldi	r24, 0x08	; 8
    f41e:	2b c0       	rjmp	.+86     	; 0xf476 <FMenuSettings+0x17e>
		       break;		  
		  }
	      break;
		  
	 case msMenuSettingNextPage:
	      if (PageSetting<2)PageSetting++;
    f420:	80 91 57 01 	lds	r24, 0x0157
    f424:	82 30       	cpi	r24, 0x02	; 2
    f426:	d8 f4       	brcc	.+54     	; 0xf45e <FMenuSettings+0x166>
    f428:	8f 5f       	subi	r24, 0xFF	; 255
    f42a:	05 c0       	rjmp	.+10     	; 0xf436 <FMenuSettings+0x13e>
		  stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingBackPage:
	      if (PageSetting>1)PageSetting--;
    f42c:	80 91 57 01 	lds	r24, 0x0157
    f430:	82 30       	cpi	r24, 0x02	; 2
    f432:	a8 f0       	brcs	.+42     	; 0xf45e <FMenuSettings+0x166>
    f434:	81 50       	subi	r24, 0x01	; 1
    f436:	80 93 57 01 	sts	0x0157, r24
    f43a:	11 c0       	rjmp	.+34     	; 0xf45e <FMenuSettings+0x166>
		  stMenuSettings=msDisplayPage;
	      break;
//---Sub Menu Operations--------------------------------------------		  
     case msMenuSettingProduct:
	      SubMenu=FSettingProduct();
    f43c:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <FSettingProduct>
    f440:	18 c0       	rjmp	.+48     	; 0xf472 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingPump:
	      SubMenu=FSettingPump();
    f442:	0e 94 35 64 	call	0xc86a	; 0xc86a <FSettingPump>
    f446:	15 c0       	rjmp	.+42     	; 0xf472 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingDec:
	      SubMenu=FSettingDec();
    f448:	0e 94 da 51 	call	0xa3b4	; 0xa3b4 <FSettingDec>
    f44c:	12 c0       	rjmp	.+36     	; 0xf472 <FMenuSettings+0x17a>
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    f44e:	0e 94 1d 54 	call	0xa83a	; 0xa83a <_menu_datetime>
    f452:	05 c0       	rjmp	.+10     	; 0xf45e <FMenuSettings+0x166>
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    f454:	0e 94 2f 4e 	call	0x9c5e	; 0x9c5e <_menu_printer>
    f458:	02 c0       	rjmp	.+4      	; 0xf45e <FMenuSettings+0x166>
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    f45a:	0e 94 bc 4c 	call	0x9978	; 0x9978 <_menu_host>
	      SubMenu=FSettingPrinter();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingHost:
	      SubMenu=FSettingHost();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f45e:	81 e0       	ldi	r24, 0x01	; 1
    f460:	0a c0       	rjmp	.+20     	; 0xf476 <FMenuSettings+0x17e>
	      break;
     case msMenuSettingOperator:
          SubMenu=FSettingOperator();
    f462:	0e 94 69 6b 	call	0xd6d2	; 0xd6d2 <FSettingOperator>
    f466:	05 c0       	rjmp	.+10     	; 0xf472 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingSystem:
	      SubMenu=FSettingSystem();
    f468:	0e 94 08 78 	call	0xf010	; 0xf010 <FSettingSystem>
    f46c:	02 c0       	rjmp	.+4      	; 0xf472 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;	 
     case msMenuSettingPumpPooling:
	      SubMenu=FSettingPumpPooling();
    f46e:	0e 94 8a 5c 	call	0xb914	; 0xb914 <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f472:	81 30       	cpi	r24, 0x01	; 1
    f474:	41 f4       	brne	.+16     	; 0xf486 <FMenuSettings+0x18e>
    f476:	80 93 25 02 	sts	0x0225, r24
    f47a:	80 e0       	ldi	r24, 0x00	; 0
    f47c:	08 95       	ret
	      break;
//------------------------------------------------------------------
     case msMenuSettingExit:
	      stMenuSettings=msInit;
    f47e:	10 92 25 02 	sts	0x0225, r1
    f482:	81 e0       	ldi	r24, 0x01	; 1
    f484:	08 95       	ret
    f486:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    f488:	08 95       	ret

0000f48a <InitComport>:
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    f48a:	af 92       	push	r10
    f48c:	bf 92       	push	r11
    f48e:	cf 92       	push	r12
    f490:	df 92       	push	r13
    f492:	ff 92       	push	r15
    f494:	0f 93       	push	r16
    f496:	1f 93       	push	r17
    f498:	df 93       	push	r29
    f49a:	cf 93       	push	r28
    f49c:	cd b7       	in	r28, 0x3d	; 61
    f49e:	de b7       	in	r29, 0x3e	; 62
    f4a0:	64 97       	sbiw	r28, 0x14	; 20
    f4a2:	0f b6       	in	r0, 0x3f	; 63
    f4a4:	f8 94       	cli
    f4a6:	de bf       	out	0x3e, r29	; 62
    f4a8:	0f be       	out	0x3f, r0	; 63
    f4aa:	cd bf       	out	0x3d, r28	; 61
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
    f4ac:	83 e0       	ldi	r24, 0x03	; 3
    f4ae:	61 e0       	ldi	r22, 0x01	; 1
    f4b0:	40 e1       	ldi	r20, 0x10	; 16
    f4b2:	5f e1       	ldi	r21, 0x1F	; 31
    f4b4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    f4b8:	01 e0       	ldi	r16, 0x01	; 1
    f4ba:	10 e0       	ldi	r17, 0x00	; 0
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f4bc:	6e 01       	movw	r12, r28
    f4be:	08 94       	sec
    f4c0:	c1 1c       	adc	r12, r1
    f4c2:	d1 1c       	adc	r13, r1
    f4c4:	9c ef       	ldi	r25, 0xFC	; 252
    f4c6:	a9 2e       	mov	r10, r25
    f4c8:	9e e1       	ldi	r25, 0x1E	; 30
    f4ca:	b9 2e       	mov	r11, r25
void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
    f4cc:	c8 01       	movw	r24, r16
    f4ce:	8c 5b       	subi	r24, 0xBC	; 188
    f4d0:	9e 4f       	sbci	r25, 0xFE	; 254
    f4d2:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
    f4d6:	f8 2e       	mov	r15, r24
		 bValue=GetBaudrate(brMap);
    f4d8:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <GetBaudrate>
		 if (bValue==5787)bValue=12213;
    f4dc:	26 e1       	ldi	r18, 0x16	; 22
    f4de:	8b 39       	cpi	r24, 0x9B	; 155
    f4e0:	92 07       	cpc	r25, r18
    f4e2:	11 f4       	brne	.+4      	; 0xf4e8 <InitComport+0x5e>
    f4e4:	85 eb       	ldi	r24, 0xB5	; 181
    f4e6:	9f e2       	ldi	r25, 0x2F	; 47
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f4e8:	ad b7       	in	r26, 0x3d	; 61
    f4ea:	be b7       	in	r27, 0x3e	; 62
    f4ec:	18 97       	sbiw	r26, 0x08	; 8
    f4ee:	0f b6       	in	r0, 0x3f	; 63
    f4f0:	f8 94       	cli
    f4f2:	be bf       	out	0x3e, r27	; 62
    f4f4:	0f be       	out	0x3f, r0	; 63
    f4f6:	ad bf       	out	0x3d, r26	; 61
    f4f8:	ed b7       	in	r30, 0x3d	; 61
    f4fa:	fe b7       	in	r31, 0x3e	; 62
    f4fc:	31 96       	adiw	r30, 0x01	; 1
    f4fe:	12 96       	adiw	r26, 0x02	; 2
    f500:	dc 92       	st	X, r13
    f502:	ce 92       	st	-X, r12
    f504:	11 97       	sbiw	r26, 0x01	; 1
    f506:	b3 82       	std	Z+3, r11	; 0x03
    f508:	a2 82       	std	Z+2, r10	; 0x02
    f50a:	15 83       	std	Z+5, r17	; 0x05
    f50c:	04 83       	std	Z+4, r16	; 0x04
    f50e:	97 83       	std	Z+7, r25	; 0x07
    f510:	86 83       	std	Z+6, r24	; 0x06
    f512:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 lcd_print(4,1,lcdteks);
    f516:	2d b7       	in	r18, 0x3d	; 61
    f518:	3e b7       	in	r19, 0x3e	; 62
    f51a:	28 5f       	subi	r18, 0xF8	; 248
    f51c:	3f 4f       	sbci	r19, 0xFF	; 255
    f51e:	0f b6       	in	r0, 0x3f	; 63
    f520:	f8 94       	cli
    f522:	3e bf       	out	0x3e, r19	; 62
    f524:	0f be       	out	0x3f, r0	; 63
    f526:	2d bf       	out	0x3d, r18	; 61
    f528:	84 e0       	ldi	r24, 0x04	; 4
    f52a:	61 e0       	ldi	r22, 0x01	; 1
    f52c:	a6 01       	movw	r20, r12
    f52e:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		 SetBaudRate(i+1,brMap);
    f532:	80 2f       	mov	r24, r16
    f534:	6f 2d       	mov	r22, r15
    f536:	0e 94 dd 77 	call	0xefba	; 0xefba <SetBaudRate>
 	     TimDisplay=0;
    f53a:	10 92 93 01 	sts	0x0193, r1
    f53e:	04 c0       	rjmp	.+8      	; 0xf548 <InitComport+0xbe>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
    f540:	80 91 93 01 	lds	r24, 0x0193
    f544:	82 30       	cpi	r24, 0x02	; 2
    f546:	20 f4       	brcc	.+8      	; 0xf550 <InitComport+0xc6>
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
		 lcd_print(4,1,lcdteks);
		 SetBaudRate(i+1,brMap);
 	     TimDisplay=0;
	     while(TimDisplay<2){
    f548:	80 91 93 01 	lds	r24, 0x0193
    f54c:	82 30       	cpi	r24, 0x02	; 2
    f54e:	c0 f3       	brcs	.-16     	; 0xf540 <InitComport+0xb6>
    f550:	0f 5f       	subi	r16, 0xFF	; 255
    f552:	1f 4f       	sbci	r17, 0xFF	; 255

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    f554:	05 30       	cpi	r16, 0x05	; 5
    f556:	11 05       	cpc	r17, r1
    f558:	09 f0       	breq	.+2      	; 0xf55c <InitComport+0xd2>
    f55a:	b8 cf       	rjmp	.-144    	; 0xf4cc <InitComport+0x42>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
		 };

	 }
}
    f55c:	64 96       	adiw	r28, 0x14	; 20
    f55e:	0f b6       	in	r0, 0x3f	; 63
    f560:	f8 94       	cli
    f562:	de bf       	out	0x3e, r29	; 62
    f564:	0f be       	out	0x3f, r0	; 63
    f566:	cd bf       	out	0x3d, r28	; 61
    f568:	cf 91       	pop	r28
    f56a:	df 91       	pop	r29
    f56c:	1f 91       	pop	r17
    f56e:	0f 91       	pop	r16
    f570:	ff 90       	pop	r15
    f572:	df 90       	pop	r13
    f574:	cf 90       	pop	r12
    f576:	bf 90       	pop	r11
    f578:	af 90       	pop	r10
    f57a:	08 95       	ret

0000f57c <IFTSendMessage>:
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;

}

void IFTSendMessage(char MsgCode){//<STX>[IFTID][Seq][No][SrceIP][DestIP][MsgCode]
    f57c:	af 92       	push	r10
    f57e:	bf 92       	push	r11
    f580:	cf 92       	push	r12
    f582:	df 92       	push	r13
    f584:	ef 92       	push	r14
    f586:	ff 92       	push	r15
    f588:	0f 93       	push	r16
    f58a:	df 93       	push	r29
    f58c:	cf 93       	push	r28
    f58e:	cd b7       	in	r28, 0x3d	; 61
    f590:	de b7       	in	r29, 0x3e	; 62
    f592:	c0 54       	subi	r28, 0x40	; 64
    f594:	d0 40       	sbci	r29, 0x00	; 0
    f596:	0f b6       	in	r0, 0x3f	; 63
    f598:	f8 94       	cli
    f59a:	de bf       	out	0x3e, r29	; 62
    f59c:	0f be       	out	0x3f, r0	; 63
    f59e:	cd bf       	out	0x3d, r28	; 61
    f5a0:	08 2f       	mov	r16, r24
	 char strSeqNum[3];
	 char ReadIP[4];
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
    f5a2:	81 e0       	ldi	r24, 0x01	; 1
    f5a4:	61 e0       	ldi	r22, 0x01	; 1
    f5a6:	41 e0       	ldi	r20, 0x01	; 1
    f5a8:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    f5ac:	80 e0       	ldi	r24, 0x00	; 0
    f5ae:	90 e0       	ldi	r25, 0x00	; 0
    f5b0:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    f5b4:	00 d0       	rcall	.+0      	; 0xf5b6 <IFTSendMessage+0x3a>
    f5b6:	00 d0       	rcall	.+0      	; 0xf5b8 <IFTSendMessage+0x3c>
    f5b8:	00 d0       	rcall	.+0      	; 0xf5ba <IFTSendMessage+0x3e>
    f5ba:	ed b7       	in	r30, 0x3d	; 61
    f5bc:	fe b7       	in	r31, 0x3e	; 62
    f5be:	31 96       	adiw	r30, 0x01	; 1
    f5c0:	45 e0       	ldi	r20, 0x05	; 5
    f5c2:	c4 2e       	mov	r12, r20
    f5c4:	d1 2c       	mov	r13, r1
    f5c6:	cc 0e       	add	r12, r28
    f5c8:	dd 1e       	adc	r13, r29
    f5ca:	ad b7       	in	r26, 0x3d	; 61
    f5cc:	be b7       	in	r27, 0x3e	; 62
    f5ce:	12 96       	adiw	r26, 0x02	; 2
    f5d0:	dc 92       	st	X, r13
    f5d2:	ce 92       	st	-X, r12
    f5d4:	11 97       	sbiw	r26, 0x01	; 1
    f5d6:	22 e9       	ldi	r18, 0x92	; 146
    f5d8:	33 e2       	ldi	r19, 0x23	; 35
    f5da:	33 83       	std	Z+3, r19	; 0x03
    f5dc:	22 83       	std	Z+2, r18	; 0x02
    f5de:	64 e6       	ldi	r22, 0x64	; 100
    f5e0:	0e 94 60 ab 	call	0x156c0	; 0x156c0 <__udivmodqi4>
    f5e4:	94 83       	std	Z+4, r25	; 0x04
    f5e6:	15 82       	std	Z+5, r1	; 0x05
    f5e8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(1, 0,strSend);
    f5ec:	8d b7       	in	r24, 0x3d	; 61
    f5ee:	9e b7       	in	r25, 0x3e	; 62
    f5f0:	06 96       	adiw	r24, 0x06	; 6
    f5f2:	0f b6       	in	r0, 0x3f	; 63
    f5f4:	f8 94       	cli
    f5f6:	9e bf       	out	0x3e, r25	; 62
    f5f8:	0f be       	out	0x3f, r0	; 63
    f5fa:	8d bf       	out	0x3d, r24	; 61
    f5fc:	81 e0       	ldi	r24, 0x01	; 1
    f5fe:	60 e0       	ldi	r22, 0x00	; 0
    f600:	a6 01       	movw	r20, r12
    f602:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
     //[Seq]
	 SeqNum=((SeqNum+1)%100);
    f606:	80 91 b0 01 	lds	r24, 0x01B0
    f60a:	90 e0       	ldi	r25, 0x00	; 0
    f60c:	01 96       	adiw	r24, 0x01	; 1
    f60e:	64 e6       	ldi	r22, 0x64	; 100
    f610:	70 e0       	ldi	r23, 0x00	; 0
    f612:	0e 94 8d ab 	call	0x1571a	; 0x1571a <__divmodhi4>
    f616:	80 93 b0 01 	sts	0x01B0, r24
	 sprintf_P(strSend,PSTR("%.2d"),SeqNum);	 
    f61a:	00 d0       	rcall	.+0      	; 0xf61c <IFTSendMessage+0xa0>
    f61c:	00 d0       	rcall	.+0      	; 0xf61e <IFTSendMessage+0xa2>
    f61e:	00 d0       	rcall	.+0      	; 0xf620 <IFTSendMessage+0xa4>
    f620:	ed b7       	in	r30, 0x3d	; 61
    f622:	fe b7       	in	r31, 0x3e	; 62
    f624:	31 96       	adiw	r30, 0x01	; 1
    f626:	ad b7       	in	r26, 0x3d	; 61
    f628:	be b7       	in	r27, 0x3e	; 62
    f62a:	12 96       	adiw	r26, 0x02	; 2
    f62c:	dc 92       	st	X, r13
    f62e:	ce 92       	st	-X, r12
    f630:	11 97       	sbiw	r26, 0x01	; 1
    f632:	2d e8       	ldi	r18, 0x8D	; 141
    f634:	33 e2       	ldi	r19, 0x23	; 35
    f636:	33 83       	std	Z+3, r19	; 0x03
    f638:	22 83       	std	Z+2, r18	; 0x02
    f63a:	84 83       	std	Z+4, r24	; 0x04
    f63c:	15 82       	std	Z+5, r1	; 0x05
    f63e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(1, 0,strSend);
    f642:	8d b7       	in	r24, 0x3d	; 61
    f644:	9e b7       	in	r25, 0x3e	; 62
    f646:	06 96       	adiw	r24, 0x06	; 6
    f648:	0f b6       	in	r0, 0x3f	; 63
    f64a:	f8 94       	cli
    f64c:	9e bf       	out	0x3e, r25	; 62
    f64e:	0f be       	out	0x3f, r0	; 63
    f650:	8d bf       	out	0x3d, r24	; 61
    f652:	81 e0       	ldi	r24, 0x01	; 1
    f654:	60 e0       	ldi	r22, 0x00	; 0
    f656:	a6 01       	movw	r20, r12
    f658:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
	 //[ClientIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefClientIP,4);
    f65c:	7e 01       	movw	r14, r28
    f65e:	08 94       	sec
    f660:	e1 1c       	adc	r14, r1
    f662:	f1 1c       	adc	r15, r1
    f664:	c7 01       	movw	r24, r14
    f666:	68 e2       	ldi	r22, 0x28	; 40
    f668:	70 e0       	ldi	r23, 0x00	; 0
    f66a:	44 e0       	ldi	r20, 0x04	; 4
    f66c:	50 e0       	ldi	r21, 0x00	; 0
    f66e:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f672:	ad b7       	in	r26, 0x3d	; 61
    f674:	be b7       	in	r27, 0x3e	; 62
    f676:	1c 97       	sbiw	r26, 0x0c	; 12
    f678:	0f b6       	in	r0, 0x3f	; 63
    f67a:	f8 94       	cli
    f67c:	be bf       	out	0x3e, r27	; 62
    f67e:	0f be       	out	0x3f, r0	; 63
    f680:	ad bf       	out	0x3d, r26	; 61
    f682:	ed b7       	in	r30, 0x3d	; 61
    f684:	fe b7       	in	r31, 0x3e	; 62
    f686:	31 96       	adiw	r30, 0x01	; 1
    f688:	12 96       	adiw	r26, 0x02	; 2
    f68a:	dc 92       	st	X, r13
    f68c:	ce 92       	st	-X, r12
    f68e:	11 97       	sbiw	r26, 0x01	; 1
    f690:	89 e7       	ldi	r24, 0x79	; 121
    f692:	93 e2       	ldi	r25, 0x23	; 35
    f694:	93 83       	std	Z+3, r25	; 0x03
    f696:	82 83       	std	Z+2, r24	; 0x02
    f698:	89 81       	ldd	r24, Y+1	; 0x01
    f69a:	84 83       	std	Z+4, r24	; 0x04
    f69c:	15 82       	std	Z+5, r1	; 0x05
    f69e:	8a 81       	ldd	r24, Y+2	; 0x02
    f6a0:	86 83       	std	Z+6, r24	; 0x06
    f6a2:	17 82       	std	Z+7, r1	; 0x07
    f6a4:	8b 81       	ldd	r24, Y+3	; 0x03
    f6a6:	80 87       	std	Z+8, r24	; 0x08
    f6a8:	11 86       	std	Z+9, r1	; 0x09
    f6aa:	8c 81       	ldd	r24, Y+4	; 0x04
    f6ac:	82 87       	std	Z+10, r24	; 0x0a
    f6ae:	13 86       	std	Z+11, r1	; 0x0b
    f6b0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(1, 0,strSend);
    f6b4:	8d b7       	in	r24, 0x3d	; 61
    f6b6:	9e b7       	in	r25, 0x3e	; 62
    f6b8:	0c 96       	adiw	r24, 0x0c	; 12
    f6ba:	0f b6       	in	r0, 0x3f	; 63
    f6bc:	f8 94       	cli
    f6be:	9e bf       	out	0x3e, r25	; 62
    f6c0:	0f be       	out	0x3f, r0	; 63
    f6c2:	8d bf       	out	0x3d, r24	; 61
    f6c4:	81 e0       	ldi	r24, 0x01	; 1
    f6c6:	60 e0       	ldi	r22, 0x00	; 0
    f6c8:	a6 01       	movw	r20, r12
    f6ca:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
	 //[ServerIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefServerIP,4);
    f6ce:	c7 01       	movw	r24, r14
    f6d0:	6c e2       	ldi	r22, 0x2C	; 44
    f6d2:	70 e0       	ldi	r23, 0x00	; 0
    f6d4:	44 e0       	ldi	r20, 0x04	; 4
    f6d6:	50 e0       	ldi	r21, 0x00	; 0
    f6d8:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f6dc:	ad b7       	in	r26, 0x3d	; 61
    f6de:	be b7       	in	r27, 0x3e	; 62
    f6e0:	1c 97       	sbiw	r26, 0x0c	; 12
    f6e2:	0f b6       	in	r0, 0x3f	; 63
    f6e4:	f8 94       	cli
    f6e6:	be bf       	out	0x3e, r27	; 62
    f6e8:	0f be       	out	0x3f, r0	; 63
    f6ea:	ad bf       	out	0x3d, r26	; 61
    f6ec:	ed b7       	in	r30, 0x3d	; 61
    f6ee:	fe b7       	in	r31, 0x3e	; 62
    f6f0:	31 96       	adiw	r30, 0x01	; 1
    f6f2:	12 96       	adiw	r26, 0x02	; 2
    f6f4:	dc 92       	st	X, r13
    f6f6:	ce 92       	st	-X, r12
    f6f8:	11 97       	sbiw	r26, 0x01	; 1
    f6fa:	85 e6       	ldi	r24, 0x65	; 101
    f6fc:	93 e2       	ldi	r25, 0x23	; 35
    f6fe:	93 83       	std	Z+3, r25	; 0x03
    f700:	82 83       	std	Z+2, r24	; 0x02
    f702:	89 81       	ldd	r24, Y+1	; 0x01
    f704:	84 83       	std	Z+4, r24	; 0x04
    f706:	15 82       	std	Z+5, r1	; 0x05
    f708:	8a 81       	ldd	r24, Y+2	; 0x02
    f70a:	86 83       	std	Z+6, r24	; 0x06
    f70c:	17 82       	std	Z+7, r1	; 0x07
    f70e:	8b 81       	ldd	r24, Y+3	; 0x03
    f710:	80 87       	std	Z+8, r24	; 0x08
    f712:	11 86       	std	Z+9, r1	; 0x09
    f714:	8c 81       	ldd	r24, Y+4	; 0x04
    f716:	82 87       	std	Z+10, r24	; 0x0a
    f718:	13 86       	std	Z+11, r1	; 0x0b
    f71a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(1, 0,strSend);
    f71e:	8d b7       	in	r24, 0x3d	; 61
    f720:	9e b7       	in	r25, 0x3e	; 62
    f722:	0c 96       	adiw	r24, 0x0c	; 12
    f724:	0f b6       	in	r0, 0x3f	; 63
    f726:	f8 94       	cli
    f728:	9e bf       	out	0x3e, r25	; 62
    f72a:	0f be       	out	0x3f, r0	; 63
    f72c:	8d bf       	out	0x3d, r24	; 61
    f72e:	81 e0       	ldi	r24, 0x01	; 1
    f730:	60 e0       	ldi	r22, 0x00	; 0
    f732:	a6 01       	movw	r20, r12
    f734:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
	 //[MsgCode]
	 sprintf_P(strSend,PSTR("%.2X"),MsgCode);	 
    f738:	00 d0       	rcall	.+0      	; 0xf73a <IFTSendMessage+0x1be>
    f73a:	00 d0       	rcall	.+0      	; 0xf73c <IFTSendMessage+0x1c0>
    f73c:	00 d0       	rcall	.+0      	; 0xf73e <IFTSendMessage+0x1c2>
    f73e:	ed b7       	in	r30, 0x3d	; 61
    f740:	fe b7       	in	r31, 0x3e	; 62
    f742:	31 96       	adiw	r30, 0x01	; 1
    f744:	ad b7       	in	r26, 0x3d	; 61
    f746:	be b7       	in	r27, 0x3e	; 62
    f748:	12 96       	adiw	r26, 0x02	; 2
    f74a:	dc 92       	st	X, r13
    f74c:	ce 92       	st	-X, r12
    f74e:	11 97       	sbiw	r26, 0x01	; 1
    f750:	80 e6       	ldi	r24, 0x60	; 96
    f752:	93 e2       	ldi	r25, 0x23	; 35
    f754:	93 83       	std	Z+3, r25	; 0x03
    f756:	82 83       	std	Z+2, r24	; 0x02
    f758:	04 83       	std	Z+4, r16	; 0x04
    f75a:	15 82       	std	Z+5, r1	; 0x05
    f75c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(1, 0,strSend);
    f760:	8d b7       	in	r24, 0x3d	; 61
    f762:	9e b7       	in	r25, 0x3e	; 62
    f764:	06 96       	adiw	r24, 0x06	; 6
    f766:	0f b6       	in	r0, 0x3f	; 63
    f768:	f8 94       	cli
    f76a:	9e bf       	out	0x3e, r25	; 62
    f76c:	0f be       	out	0x3f, r0	; 63
    f76e:	8d bf       	out	0x3d, r24	; 61
    f770:	81 e0       	ldi	r24, 0x01	; 1
    f772:	60 e0       	ldi	r22, 0x00	; 0
    f774:	a6 01       	movw	r20, r12
    f776:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>

     switch(MsgCode){
    f77a:	02 33       	cpi	r16, 0x32	; 50
    f77c:	09 f4       	brne	.+2      	; 0xf780 <IFTSendMessage+0x204>
    f77e:	7f c0       	rjmp	.+254    	; 0xf87e <IFTSendMessage+0x302>
    f780:	03 33       	cpi	r16, 0x33	; 51
    f782:	70 f4       	brcc	.+28     	; 0xf7a0 <IFTSendMessage+0x224>
    f784:	02 32       	cpi	r16, 0x22	; 34
    f786:	91 f1       	breq	.+100    	; 0xf7ec <IFTSendMessage+0x270>
    f788:	03 32       	cpi	r16, 0x23	; 35
    f78a:	20 f4       	brcc	.+8      	; 0xf794 <IFTSendMessage+0x218>
    f78c:	04 30       	cpi	r16, 0x04	; 4
    f78e:	09 f0       	breq	.+2      	; 0xf792 <IFTSendMessage+0x216>
    f790:	1d c2       	rjmp	.+1082   	; 0xfbcc <IFTSendMessage+0x650>
    f792:	19 c0       	rjmp	.+50     	; 0xf7c6 <IFTSendMessage+0x24a>
    f794:	04 32       	cpi	r16, 0x24	; 36
    f796:	d9 f1       	breq	.+118    	; 0xf80e <IFTSendMessage+0x292>
    f798:	08 32       	cpi	r16, 0x28	; 40
    f79a:	09 f0       	breq	.+2      	; 0xf79e <IFTSendMessage+0x222>
    f79c:	17 c2       	rjmp	.+1070   	; 0xfbcc <IFTSendMessage+0x650>
    f79e:	53 c0       	rjmp	.+166    	; 0xf846 <IFTSendMessage+0x2ca>
    f7a0:	00 39       	cpi	r16, 0x90	; 144
    f7a2:	09 f4       	brne	.+2      	; 0xf7a6 <IFTSendMessage+0x22a>
    f7a4:	78 c1       	rjmp	.+752    	; 0xfa96 <IFTSendMessage+0x51a>
    f7a6:	01 39       	cpi	r16, 0x91	; 145
    f7a8:	38 f4       	brcc	.+14     	; 0xf7b8 <IFTSendMessage+0x23c>
    f7aa:	06 35       	cpi	r16, 0x56	; 86
    f7ac:	09 f4       	brne	.+2      	; 0xf7b0 <IFTSendMessage+0x234>
    f7ae:	d7 c0       	rjmp	.+430    	; 0xf95e <IFTSendMessage+0x3e2>
    f7b0:	08 35       	cpi	r16, 0x58	; 88
    f7b2:	09 f0       	breq	.+2      	; 0xf7b6 <IFTSendMessage+0x23a>
    f7b4:	0b c2       	rjmp	.+1046   	; 0xfbcc <IFTSendMessage+0x650>
    f7b6:	e8 c0       	rjmp	.+464    	; 0xf988 <IFTSendMessage+0x40c>
    f7b8:	02 39       	cpi	r16, 0x92	; 146
    f7ba:	09 f4       	brne	.+2      	; 0xf7be <IFTSendMessage+0x242>
    f7bc:	8d c1       	rjmp	.+794    	; 0xfad8 <IFTSendMessage+0x55c>
    f7be:	08 39       	cpi	r16, 0x98	; 152
    f7c0:	09 f0       	breq	.+2      	; 0xf7c4 <IFTSendMessage+0x248>
    f7c2:	04 c2       	rjmp	.+1032   	; 0xfbcc <IFTSendMessage+0x650>
    f7c4:	e0 c1       	rjmp	.+960    	; 0xfb86 <IFTSendMessage+0x60a>
	 case MSG_04://Transaction Number
	      sprintf_P(strSend,PSTR("%s1"),strTranNo);
    f7c6:	00 d0       	rcall	.+0      	; 0xf7c8 <IFTSendMessage+0x24c>
    f7c8:	00 d0       	rcall	.+0      	; 0xf7ca <IFTSendMessage+0x24e>
    f7ca:	00 d0       	rcall	.+0      	; 0xf7cc <IFTSendMessage+0x250>
    f7cc:	ed b7       	in	r30, 0x3d	; 61
    f7ce:	fe b7       	in	r31, 0x3e	; 62
    f7d0:	31 96       	adiw	r30, 0x01	; 1
    f7d2:	ad b7       	in	r26, 0x3d	; 61
    f7d4:	be b7       	in	r27, 0x3e	; 62
    f7d6:	12 96       	adiw	r26, 0x02	; 2
    f7d8:	dc 92       	st	X, r13
    f7da:	ce 92       	st	-X, r12
    f7dc:	11 97       	sbiw	r26, 0x01	; 1
    f7de:	8c e5       	ldi	r24, 0x5C	; 92
    f7e0:	93 e2       	ldi	r25, 0x23	; 35
    f7e2:	93 83       	std	Z+3, r25	; 0x03
    f7e4:	82 83       	std	Z+2, r24	; 0x02
    f7e6:	8d e8       	ldi	r24, 0x8D	; 141
    f7e8:	9c e0       	ldi	r25, 0x0C	; 12
    f7ea:	df c1       	rjmp	.+958    	; 0xfbaa <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_10://No Additional Parameter
	      break;
	 case MSG_22://strCardID
	      UpdateCardID();
    f7ec:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f7f0:	00 d0       	rcall	.+0      	; 0xf7f2 <IFTSendMessage+0x276>
    f7f2:	00 d0       	rcall	.+0      	; 0xf7f4 <IFTSendMessage+0x278>
    f7f4:	00 d0       	rcall	.+0      	; 0xf7f6 <IFTSendMessage+0x27a>
    f7f6:	ed b7       	in	r30, 0x3d	; 61
    f7f8:	fe b7       	in	r31, 0x3e	; 62
    f7fa:	31 96       	adiw	r30, 0x01	; 1
    f7fc:	ad b7       	in	r26, 0x3d	; 61
    f7fe:	be b7       	in	r27, 0x3e	; 62
    f800:	12 96       	adiw	r26, 0x02	; 2
    f802:	dc 92       	st	X, r13
    f804:	ce 92       	st	-X, r12
    f806:	11 97       	sbiw	r26, 0x01	; 1
    f808:	89 e5       	ldi	r24, 0x59	; 89
    f80a:	93 e2       	ldi	r25, 0x23	; 35
    f80c:	b8 c0       	rjmp	.+368    	; 0xf97e <IFTSendMessage+0x402>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_24://strCardID, FIP_ID
	      UpdateCardID();
    f80e:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strCardID,strFIP_ID);
    f812:	ad b7       	in	r26, 0x3d	; 61
    f814:	be b7       	in	r27, 0x3e	; 62
    f816:	18 97       	sbiw	r26, 0x08	; 8
    f818:	0f b6       	in	r0, 0x3f	; 63
    f81a:	f8 94       	cli
    f81c:	be bf       	out	0x3e, r27	; 62
    f81e:	0f be       	out	0x3f, r0	; 63
    f820:	ad bf       	out	0x3d, r26	; 61
    f822:	ed b7       	in	r30, 0x3d	; 61
    f824:	fe b7       	in	r31, 0x3e	; 62
    f826:	31 96       	adiw	r30, 0x01	; 1
    f828:	12 96       	adiw	r26, 0x02	; 2
    f82a:	dc 92       	st	X, r13
    f82c:	ce 92       	st	-X, r12
    f82e:	11 97       	sbiw	r26, 0x01	; 1
    f830:	84 e5       	ldi	r24, 0x54	; 84
    f832:	93 e2       	ldi	r25, 0x23	; 35
    f834:	93 83       	std	Z+3, r25	; 0x03
    f836:	82 83       	std	Z+2, r24	; 0x02
    f838:	8f e8       	ldi	r24, 0x8F	; 143
    f83a:	9b e0       	ldi	r25, 0x0B	; 11
    f83c:	95 83       	std	Z+5, r25	; 0x05
    f83e:	84 83       	std	Z+4, r24	; 0x04
    f840:	8f eb       	ldi	r24, 0xBF	; 191
    f842:	97 e0       	ldi	r25, 0x07	; 7
    f844:	41 c1       	rjmp	.+642    	; 0xfac8 <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;

	 case MSG_28://strCardID, FIP_ID
	      UpdateCardID();
    f846:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strCardID);
    f84a:	ad b7       	in	r26, 0x3d	; 61
    f84c:	be b7       	in	r27, 0x3e	; 62
    f84e:	18 97       	sbiw	r26, 0x08	; 8
    f850:	0f b6       	in	r0, 0x3f	; 63
    f852:	f8 94       	cli
    f854:	be bf       	out	0x3e, r27	; 62
    f856:	0f be       	out	0x3f, r0	; 63
    f858:	ad bf       	out	0x3d, r26	; 61
    f85a:	ed b7       	in	r30, 0x3d	; 61
    f85c:	fe b7       	in	r31, 0x3e	; 62
    f85e:	31 96       	adiw	r30, 0x01	; 1
    f860:	12 96       	adiw	r26, 0x02	; 2
    f862:	dc 92       	st	X, r13
    f864:	ce 92       	st	-X, r12
    f866:	11 97       	sbiw	r26, 0x01	; 1
    f868:	8f e4       	ldi	r24, 0x4F	; 79
    f86a:	93 e2       	ldi	r25, 0x23	; 35
    f86c:	93 83       	std	Z+3, r25	; 0x03
    f86e:	82 83       	std	Z+2, r24	; 0x02
    f870:	8f eb       	ldi	r24, 0xBF	; 191
    f872:	97 e0       	ldi	r25, 0x07	; 7
    f874:	95 83       	std	Z+5, r25	; 0x05
    f876:	84 83       	std	Z+4, r24	; 0x04
    f878:	8f e8       	ldi	r24, 0x8F	; 143
    f87a:	9b e0       	ldi	r25, 0x0B	; 11
    f87c:	25 c1       	rjmp	.+586    	; 0xfac8 <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_32://Change MOP
	      UpdateCardID();
    f87e:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strPaymentType);
    f882:	ad b7       	in	r26, 0x3d	; 61
    f884:	be b7       	in	r27, 0x3e	; 62
    f886:	18 97       	sbiw	r26, 0x08	; 8
    f888:	0f b6       	in	r0, 0x3f	; 63
    f88a:	f8 94       	cli
    f88c:	be bf       	out	0x3e, r27	; 62
    f88e:	0f be       	out	0x3f, r0	; 63
    f890:	ad bf       	out	0x3d, r26	; 61
    f892:	ed b7       	in	r30, 0x3d	; 61
    f894:	fe b7       	in	r31, 0x3e	; 62
    f896:	31 96       	adiw	r30, 0x01	; 1
    f898:	12 96       	adiw	r26, 0x02	; 2
    f89a:	dc 92       	st	X, r13
    f89c:	ce 92       	st	-X, r12
    f89e:	11 97       	sbiw	r26, 0x01	; 1
    f8a0:	8a e4       	ldi	r24, 0x4A	; 74
    f8a2:	93 e2       	ldi	r25, 0x23	; 35
    f8a4:	93 83       	std	Z+3, r25	; 0x03
    f8a6:	82 83       	std	Z+2, r24	; 0x02
    f8a8:	8f eb       	ldi	r24, 0xBF	; 191
    f8aa:	97 e0       	ldi	r25, 0x07	; 7
    f8ac:	95 83       	std	Z+5, r25	; 0x05
    f8ae:	84 83       	std	Z+4, r24	; 0x04
    f8b0:	86 e5       	ldi	r24, 0x56	; 86
    f8b2:	97 e0       	ldi	r25, 0x07	; 7
    f8b4:	97 83       	std	Z+7, r25	; 0x07
    f8b6:	86 83       	std	Z+6, r24	; 0x06
    f8b8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      uart_print(1,0,strSend);
    f8bc:	8d b7       	in	r24, 0x3d	; 61
    f8be:	9e b7       	in	r25, 0x3e	; 62
    f8c0:	08 96       	adiw	r24, 0x08	; 8
    f8c2:	0f b6       	in	r0, 0x3f	; 63
    f8c4:	f8 94       	cli
    f8c6:	9e bf       	out	0x3e, r25	; 62
    f8c8:	0f be       	out	0x3f, r0	; 63
    f8ca:	8d bf       	out	0x3d, r24	; 61
    f8cc:	81 e0       	ldi	r24, 0x01	; 1
    f8ce:	60 e0       	ldi	r22, 0x00	; 0
    f8d0:	a6 01       	movw	r20, r12
    f8d2:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef1,strRef2);
    f8d6:	ad b7       	in	r26, 0x3d	; 61
    f8d8:	be b7       	in	r27, 0x3e	; 62
    f8da:	18 97       	sbiw	r26, 0x08	; 8
    f8dc:	0f b6       	in	r0, 0x3f	; 63
    f8de:	f8 94       	cli
    f8e0:	be bf       	out	0x3e, r27	; 62
    f8e2:	0f be       	out	0x3f, r0	; 63
    f8e4:	ad bf       	out	0x3d, r26	; 61
    f8e6:	ed b7       	in	r30, 0x3d	; 61
    f8e8:	fe b7       	in	r31, 0x3e	; 62
    f8ea:	31 96       	adiw	r30, 0x01	; 1
    f8ec:	12 96       	adiw	r26, 0x02	; 2
    f8ee:	dc 92       	st	X, r13
    f8f0:	ce 92       	st	-X, r12
    f8f2:	11 97       	sbiw	r26, 0x01	; 1
    f8f4:	85 e4       	ldi	r24, 0x45	; 69
    f8f6:	93 e2       	ldi	r25, 0x23	; 35
    f8f8:	93 83       	std	Z+3, r25	; 0x03
    f8fa:	82 83       	std	Z+2, r24	; 0x02
    f8fc:	84 e9       	ldi	r24, 0x94	; 148
    f8fe:	9c e0       	ldi	r25, 0x0C	; 12
    f900:	95 83       	std	Z+5, r25	; 0x05
    f902:	84 83       	std	Z+4, r24	; 0x04
    f904:	84 ea       	ldi	r24, 0xA4	; 164
    f906:	9b e0       	ldi	r25, 0x0B	; 11
    f908:	97 83       	std	Z+7, r25	; 0x07
    f90a:	86 83       	std	Z+6, r24	; 0x06
    f90c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  uart_print(1,0,strSend);
    f910:	8d b7       	in	r24, 0x3d	; 61
    f912:	9e b7       	in	r25, 0x3e	; 62
    f914:	08 96       	adiw	r24, 0x08	; 8
    f916:	0f b6       	in	r0, 0x3f	; 63
    f918:	f8 94       	cli
    f91a:	9e bf       	out	0x3e, r25	; 62
    f91c:	0f be       	out	0x3f, r0	; 63
    f91e:	8d bf       	out	0x3d, r24	; 61
    f920:	81 e0       	ldi	r24, 0x01	; 1
    f922:	60 e0       	ldi	r22, 0x00	; 0
    f924:	a6 01       	movw	r20, r12
    f926:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    f92a:	ad b7       	in	r26, 0x3d	; 61
    f92c:	be b7       	in	r27, 0x3e	; 62
    f92e:	18 97       	sbiw	r26, 0x08	; 8
    f930:	0f b6       	in	r0, 0x3f	; 63
    f932:	f8 94       	cli
    f934:	be bf       	out	0x3e, r27	; 62
    f936:	0f be       	out	0x3f, r0	; 63
    f938:	ad bf       	out	0x3d, r26	; 61
    f93a:	ed b7       	in	r30, 0x3d	; 61
    f93c:	fe b7       	in	r31, 0x3e	; 62
    f93e:	31 96       	adiw	r30, 0x01	; 1
    f940:	12 96       	adiw	r26, 0x02	; 2
    f942:	dc 92       	st	X, r13
    f944:	ce 92       	st	-X, r12
    f946:	11 97       	sbiw	r26, 0x01	; 1
    f948:	80 e4       	ldi	r24, 0x40	; 64
    f94a:	93 e2       	ldi	r25, 0x23	; 35
    f94c:	93 83       	std	Z+3, r25	; 0x03
    f94e:	82 83       	std	Z+2, r24	; 0x02
    f950:	83 e8       	ldi	r24, 0x83	; 131
    f952:	98 e0       	ldi	r25, 0x08	; 8
    f954:	95 83       	std	Z+5, r25	; 0x05
    f956:	84 83       	std	Z+4, r24	; 0x04
    f958:	8b ea       	ldi	r24, 0xAB	; 171
    f95a:	93 e0       	ldi	r25, 0x03	; 3
    f95c:	b5 c0       	rjmp	.+362    	; 0xfac8 <IFTSendMessage+0x54c>
		  uart_print(1,0,strSend);
	      break;

	 case MSG_56://strCardID, FIP_ID
	      UpdateCardID();
    f95e:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f962:	00 d0       	rcall	.+0      	; 0xf964 <IFTSendMessage+0x3e8>
    f964:	00 d0       	rcall	.+0      	; 0xf966 <IFTSendMessage+0x3ea>
    f966:	00 d0       	rcall	.+0      	; 0xf968 <IFTSendMessage+0x3ec>
    f968:	ed b7       	in	r30, 0x3d	; 61
    f96a:	fe b7       	in	r31, 0x3e	; 62
    f96c:	31 96       	adiw	r30, 0x01	; 1
    f96e:	ad b7       	in	r26, 0x3d	; 61
    f970:	be b7       	in	r27, 0x3e	; 62
    f972:	12 96       	adiw	r26, 0x02	; 2
    f974:	dc 92       	st	X, r13
    f976:	ce 92       	st	-X, r12
    f978:	11 97       	sbiw	r26, 0x01	; 1
    f97a:	8d e3       	ldi	r24, 0x3D	; 61
    f97c:	93 e2       	ldi	r25, 0x23	; 35
    f97e:	93 83       	std	Z+3, r25	; 0x03
    f980:	82 83       	std	Z+2, r24	; 0x02
    f982:	8f e8       	ldi	r24, 0x8F	; 143
    f984:	9b e0       	ldi	r25, 0x0B	; 11
    f986:	11 c1       	rjmp	.+546    	; 0xfbaa <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_58://Request Local Account Transaction
	      UpdateCardID();
    f988:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <UpdateCardID>
		  AddSpaceLead(strBalanceValue,13);
    f98c:	35 e2       	ldi	r19, 0x25	; 37
    f98e:	a3 2e       	mov	r10, r19
    f990:	3c e0       	ldi	r19, 0x0C	; 12
    f992:	b3 2e       	mov	r11, r19
    f994:	c5 01       	movw	r24, r10
    f996:	6d e0       	ldi	r22, 0x0D	; 13
    f998:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <AddSpaceLead>
		  AddSpaceLead(strOdometer,10);
    f99c:	29 ec       	ldi	r18, 0xC9	; 201
    f99e:	e2 2e       	mov	r14, r18
    f9a0:	23 e0       	ldi	r18, 0x03	; 3
    f9a2:	f2 2e       	mov	r15, r18
    f9a4:	c7 01       	movw	r24, r14
    f9a6:	6a e0       	ldi	r22, 0x0A	; 10
    f9a8:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <AddSpaceLead>
		  CardType=0;
    f9ac:	10 92 8f 03 	sts	0x038F, r1
		  sprintf_P(strSend,PSTR("%s%s%d"),strCardID,strFIP_ID,NozzleID);
    f9b0:	ad b7       	in	r26, 0x3d	; 61
    f9b2:	be b7       	in	r27, 0x3e	; 62
    f9b4:	1a 97       	sbiw	r26, 0x0a	; 10
    f9b6:	0f b6       	in	r0, 0x3f	; 63
    f9b8:	f8 94       	cli
    f9ba:	be bf       	out	0x3e, r27	; 62
    f9bc:	0f be       	out	0x3f, r0	; 63
    f9be:	ad bf       	out	0x3d, r26	; 61
    f9c0:	ed b7       	in	r30, 0x3d	; 61
    f9c2:	fe b7       	in	r31, 0x3e	; 62
    f9c4:	31 96       	adiw	r30, 0x01	; 1
    f9c6:	12 96       	adiw	r26, 0x02	; 2
    f9c8:	dc 92       	st	X, r13
    f9ca:	ce 92       	st	-X, r12
    f9cc:	11 97       	sbiw	r26, 0x01	; 1
    f9ce:	86 e3       	ldi	r24, 0x36	; 54
    f9d0:	93 e2       	ldi	r25, 0x23	; 35
    f9d2:	93 83       	std	Z+3, r25	; 0x03
    f9d4:	82 83       	std	Z+2, r24	; 0x02
    f9d6:	8f e8       	ldi	r24, 0x8F	; 143
    f9d8:	9b e0       	ldi	r25, 0x0B	; 11
    f9da:	95 83       	std	Z+5, r25	; 0x05
    f9dc:	84 83       	std	Z+4, r24	; 0x04
    f9de:	8f eb       	ldi	r24, 0xBF	; 191
    f9e0:	97 e0       	ldi	r25, 0x07	; 7
    f9e2:	97 83       	std	Z+7, r25	; 0x07
    f9e4:	86 83       	std	Z+6, r24	; 0x06
    f9e6:	80 91 73 07 	lds	r24, 0x0773
    f9ea:	80 87       	std	Z+8, r24	; 0x08
    f9ec:	11 86       	std	Z+9, r1	; 0x09
    f9ee:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  uart_print(1,0,strSend);
    f9f2:	8d b7       	in	r24, 0x3d	; 61
    f9f4:	9e b7       	in	r25, 0x3e	; 62
    f9f6:	0a 96       	adiw	r24, 0x0a	; 10
    f9f8:	0f b6       	in	r0, 0x3f	; 63
    f9fa:	f8 94       	cli
    f9fc:	9e bf       	out	0x3e, r25	; 62
    f9fe:	0f be       	out	0x3f, r0	; 63
    fa00:	8d bf       	out	0x3d, r24	; 61
    fa02:	81 e0       	ldi	r24, 0x01	; 1
    fa04:	60 e0       	ldi	r22, 0x00	; 0
    fa06:	a6 01       	movw	r20, r12
    fa08:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%d"),strBalanceType,strBalanceValue,CardType);
    fa0c:	ad b7       	in	r26, 0x3d	; 61
    fa0e:	be b7       	in	r27, 0x3e	; 62
    fa10:	1a 97       	sbiw	r26, 0x0a	; 10
    fa12:	0f b6       	in	r0, 0x3f	; 63
    fa14:	f8 94       	cli
    fa16:	be bf       	out	0x3e, r27	; 62
    fa18:	0f be       	out	0x3f, r0	; 63
    fa1a:	ad bf       	out	0x3d, r26	; 61
    fa1c:	ed b7       	in	r30, 0x3d	; 61
    fa1e:	fe b7       	in	r31, 0x3e	; 62
    fa20:	31 96       	adiw	r30, 0x01	; 1
    fa22:	12 96       	adiw	r26, 0x02	; 2
    fa24:	dc 92       	st	X, r13
    fa26:	ce 92       	st	-X, r12
    fa28:	11 97       	sbiw	r26, 0x01	; 1
    fa2a:	8f e2       	ldi	r24, 0x2F	; 47
    fa2c:	93 e2       	ldi	r25, 0x23	; 35
    fa2e:	93 83       	std	Z+3, r25	; 0x03
    fa30:	82 83       	std	Z+2, r24	; 0x02
    fa32:	89 ea       	ldi	r24, 0xA9	; 169
    fa34:	93 e0       	ldi	r25, 0x03	; 3
    fa36:	95 83       	std	Z+5, r25	; 0x05
    fa38:	84 83       	std	Z+4, r24	; 0x04
    fa3a:	b7 82       	std	Z+7, r11	; 0x07
    fa3c:	a6 82       	std	Z+6, r10	; 0x06
    fa3e:	80 91 8f 03 	lds	r24, 0x038F
    fa42:	80 87       	std	Z+8, r24	; 0x08
    fa44:	11 86       	std	Z+9, r1	; 0x09
    fa46:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  uart_print(1,0,strSend);
    fa4a:	8d b7       	in	r24, 0x3d	; 61
    fa4c:	9e b7       	in	r25, 0x3e	; 62
    fa4e:	0a 96       	adiw	r24, 0x0a	; 10
    fa50:	0f b6       	in	r0, 0x3f	; 63
    fa52:	f8 94       	cli
    fa54:	9e bf       	out	0x3e, r25	; 62
    fa56:	0f be       	out	0x3f, r0	; 63
    fa58:	8d bf       	out	0x3d, r24	; 61
    fa5a:	81 e0       	ldi	r24, 0x01	; 1
    fa5c:	60 e0       	ldi	r22, 0x00	; 0
    fa5e:	a6 01       	movw	r20, r12
    fa60:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
		  uart_printf(1,0,PSTR("F0000000E123456FFFFF"));
    fa64:	81 e0       	ldi	r24, 0x01	; 1
    fa66:	60 e0       	ldi	r22, 0x00	; 0
    fa68:	4a e1       	ldi	r20, 0x1A	; 26
    fa6a:	53 e2       	ldi	r21, 0x23	; 35
    fa6c:	0e 94 16 aa 	call	0x1542c	; 0x1542c <uart_printf>
		  sprintf_P(strSend,PSTR("%s"),strOdometer);
    fa70:	00 d0       	rcall	.+0      	; 0xfa72 <IFTSendMessage+0x4f6>
    fa72:	00 d0       	rcall	.+0      	; 0xfa74 <IFTSendMessage+0x4f8>
    fa74:	00 d0       	rcall	.+0      	; 0xfa76 <IFTSendMessage+0x4fa>
    fa76:	ed b7       	in	r30, 0x3d	; 61
    fa78:	fe b7       	in	r31, 0x3e	; 62
    fa7a:	31 96       	adiw	r30, 0x01	; 1
    fa7c:	ad b7       	in	r26, 0x3d	; 61
    fa7e:	be b7       	in	r27, 0x3e	; 62
    fa80:	12 96       	adiw	r26, 0x02	; 2
    fa82:	dc 92       	st	X, r13
    fa84:	ce 92       	st	-X, r12
    fa86:	11 97       	sbiw	r26, 0x01	; 1
    fa88:	87 e1       	ldi	r24, 0x17	; 23
    fa8a:	93 e2       	ldi	r25, 0x23	; 35
    fa8c:	93 83       	std	Z+3, r25	; 0x03
    fa8e:	82 83       	std	Z+2, r24	; 0x02
    fa90:	f5 82       	std	Z+5, r15	; 0x05
    fa92:	e4 82       	std	Z+4, r14	; 0x04
    fa94:	8c c0       	rjmp	.+280    	; 0xfbae <IFTSendMessage+0x632>
		  uart_print(1,0,strSend);
		  break;
	 case MSG_90://Request EDC
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strRef1);
    fa96:	ad b7       	in	r26, 0x3d	; 61
    fa98:	be b7       	in	r27, 0x3e	; 62
    fa9a:	18 97       	sbiw	r26, 0x08	; 8
    fa9c:	0f b6       	in	r0, 0x3f	; 63
    fa9e:	f8 94       	cli
    faa0:	be bf       	out	0x3e, r27	; 62
    faa2:	0f be       	out	0x3f, r0	; 63
    faa4:	ad bf       	out	0x3d, r26	; 61
    faa6:	ed b7       	in	r30, 0x3d	; 61
    faa8:	fe b7       	in	r31, 0x3e	; 62
    faaa:	31 96       	adiw	r30, 0x01	; 1
    faac:	12 96       	adiw	r26, 0x02	; 2
    faae:	dc 92       	st	X, r13
    fab0:	ce 92       	st	-X, r12
    fab2:	11 97       	sbiw	r26, 0x01	; 1
    fab4:	82 e1       	ldi	r24, 0x12	; 18
    fab6:	93 e2       	ldi	r25, 0x23	; 35
    fab8:	93 83       	std	Z+3, r25	; 0x03
    faba:	82 83       	std	Z+2, r24	; 0x02
    fabc:	8f eb       	ldi	r24, 0xBF	; 191
    fabe:	97 e0       	ldi	r25, 0x07	; 7
    fac0:	95 83       	std	Z+5, r25	; 0x05
    fac2:	84 83       	std	Z+4, r24	; 0x04
    fac4:	84 e9       	ldi	r24, 0x94	; 148
    fac6:	9c e0       	ldi	r25, 0x0C	; 12
    fac8:	97 83       	std	Z+7, r25	; 0x07
    faca:	86 83       	std	Z+6, r24	; 0x06
    facc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      uart_print(1, 0,strSend);
    fad0:	8d b7       	in	r24, 0x3d	; 61
    fad2:	9e b7       	in	r25, 0x3e	; 62
    fad4:	08 96       	adiw	r24, 0x08	; 8
    fad6:	70 c0       	rjmp	.+224    	; 0xfbb8 <IFTSendMessage+0x63c>
	      break;
	 case MSG_92://EDC Approval
		  sprintf_P(strSend,PSTR("%s%s%s%s"),strTranNo,strFIP_ID,strCardType,strCardID);
    fad8:	ad b7       	in	r26, 0x3d	; 61
    fada:	be b7       	in	r27, 0x3e	; 62
    fadc:	1c 97       	sbiw	r26, 0x0c	; 12
    fade:	0f b6       	in	r0, 0x3f	; 63
    fae0:	f8 94       	cli
    fae2:	be bf       	out	0x3e, r27	; 62
    fae4:	0f be       	out	0x3f, r0	; 63
    fae6:	ad bf       	out	0x3d, r26	; 61
    fae8:	ed b7       	in	r30, 0x3d	; 61
    faea:	fe b7       	in	r31, 0x3e	; 62
    faec:	31 96       	adiw	r30, 0x01	; 1
    faee:	12 96       	adiw	r26, 0x02	; 2
    faf0:	dc 92       	st	X, r13
    faf2:	ce 92       	st	-X, r12
    faf4:	11 97       	sbiw	r26, 0x01	; 1
    faf6:	89 e0       	ldi	r24, 0x09	; 9
    faf8:	93 e2       	ldi	r25, 0x23	; 35
    fafa:	93 83       	std	Z+3, r25	; 0x03
    fafc:	82 83       	std	Z+2, r24	; 0x02
    fafe:	8d e8       	ldi	r24, 0x8D	; 141
    fb00:	9c e0       	ldi	r25, 0x0C	; 12
    fb02:	95 83       	std	Z+5, r25	; 0x05
    fb04:	84 83       	std	Z+4, r24	; 0x04
    fb06:	8f eb       	ldi	r24, 0xBF	; 191
    fb08:	97 e0       	ldi	r25, 0x07	; 7
    fb0a:	97 83       	std	Z+7, r25	; 0x07
    fb0c:	86 83       	std	Z+6, r24	; 0x06
    fb0e:	89 ea       	ldi	r24, 0xA9	; 169
    fb10:	9c e0       	ldi	r25, 0x0C	; 12
    fb12:	91 87       	std	Z+9, r25	; 0x09
    fb14:	80 87       	std	Z+8, r24	; 0x08
    fb16:	8f e8       	ldi	r24, 0x8F	; 143
    fb18:	9b e0       	ldi	r25, 0x0B	; 11
    fb1a:	93 87       	std	Z+11, r25	; 0x0b
    fb1c:	82 87       	std	Z+10, r24	; 0x0a
    fb1e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      uart_print(1,0,strSend);	    
    fb22:	8d b7       	in	r24, 0x3d	; 61
    fb24:	9e b7       	in	r25, 0x3e	; 62
    fb26:	0c 96       	adiw	r24, 0x0c	; 12
    fb28:	0f b6       	in	r0, 0x3f	; 63
    fb2a:	f8 94       	cli
    fb2c:	9e bf       	out	0x3e, r25	; 62
    fb2e:	0f be       	out	0x3f, r0	; 63
    fb30:	8d bf       	out	0x3d, r24	; 61
    fb32:	81 e0       	ldi	r24, 0x01	; 1
    fb34:	60 e0       	ldi	r22, 0x00	; 0
    fb36:	a6 01       	movw	r20, r12
    fb38:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%s"),strApprovalCode,strInvoiceNumber,strDateTime);
    fb3c:	ad b7       	in	r26, 0x3d	; 61
    fb3e:	be b7       	in	r27, 0x3e	; 62
    fb40:	1a 97       	sbiw	r26, 0x0a	; 10
    fb42:	0f b6       	in	r0, 0x3f	; 63
    fb44:	f8 94       	cli
    fb46:	be bf       	out	0x3e, r27	; 62
    fb48:	0f be       	out	0x3f, r0	; 63
    fb4a:	ad bf       	out	0x3d, r26	; 61
    fb4c:	ed b7       	in	r30, 0x3d	; 61
    fb4e:	fe b7       	in	r31, 0x3e	; 62
    fb50:	31 96       	adiw	r30, 0x01	; 1
    fb52:	12 96       	adiw	r26, 0x02	; 2
    fb54:	dc 92       	st	X, r13
    fb56:	ce 92       	st	-X, r12
    fb58:	11 97       	sbiw	r26, 0x01	; 1
    fb5a:	82 e0       	ldi	r24, 0x02	; 2
    fb5c:	93 e2       	ldi	r25, 0x23	; 35
    fb5e:	93 83       	std	Z+3, r25	; 0x03
    fb60:	82 83       	std	Z+2, r24	; 0x02
    fb62:	86 ef       	ldi	r24, 0xF6	; 246
    fb64:	97 e0       	ldi	r25, 0x07	; 7
    fb66:	95 83       	std	Z+5, r25	; 0x05
    fb68:	84 83       	std	Z+4, r24	; 0x04
    fb6a:	89 e5       	ldi	r24, 0x59	; 89
    fb6c:	97 e0       	ldi	r25, 0x07	; 7
    fb6e:	97 83       	std	Z+7, r25	; 0x07
    fb70:	86 83       	std	Z+6, r24	; 0x06
    fb72:	85 ec       	ldi	r24, 0xC5	; 197
    fb74:	9b e0       	ldi	r25, 0x0B	; 11
    fb76:	91 87       	std	Z+9, r25	; 0x09
    fb78:	80 87       	std	Z+8, r24	; 0x08
    fb7a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      uart_print(1,0,strSend);
    fb7e:	8d b7       	in	r24, 0x3d	; 61
    fb80:	9e b7       	in	r25, 0x3e	; 62
    fb82:	0a 96       	adiw	r24, 0x0a	; 10
    fb84:	19 c0       	rjmp	.+50     	; 0xfbb8 <IFTSendMessage+0x63c>
	      break;	 
	 case MSG_98://Request Transaction Info
	      sprintf_P(strSend,PSTR("%s"),strFIP_ID);
    fb86:	00 d0       	rcall	.+0      	; 0xfb88 <IFTSendMessage+0x60c>
    fb88:	00 d0       	rcall	.+0      	; 0xfb8a <IFTSendMessage+0x60e>
    fb8a:	00 d0       	rcall	.+0      	; 0xfb8c <IFTSendMessage+0x610>
    fb8c:	ed b7       	in	r30, 0x3d	; 61
    fb8e:	fe b7       	in	r31, 0x3e	; 62
    fb90:	31 96       	adiw	r30, 0x01	; 1
    fb92:	ad b7       	in	r26, 0x3d	; 61
    fb94:	be b7       	in	r27, 0x3e	; 62
    fb96:	12 96       	adiw	r26, 0x02	; 2
    fb98:	dc 92       	st	X, r13
    fb9a:	ce 92       	st	-X, r12
    fb9c:	11 97       	sbiw	r26, 0x01	; 1
    fb9e:	8f ef       	ldi	r24, 0xFF	; 255
    fba0:	92 e2       	ldi	r25, 0x22	; 34
    fba2:	93 83       	std	Z+3, r25	; 0x03
    fba4:	82 83       	std	Z+2, r24	; 0x02
    fba6:	8f eb       	ldi	r24, 0xBF	; 191
    fba8:	97 e0       	ldi	r25, 0x07	; 7
    fbaa:	95 83       	std	Z+5, r25	; 0x05
    fbac:	84 83       	std	Z+4, r24	; 0x04
    fbae:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      uart_print(1, 0,strSend);
    fbb2:	8d b7       	in	r24, 0x3d	; 61
    fbb4:	9e b7       	in	r25, 0x3e	; 62
    fbb6:	06 96       	adiw	r24, 0x06	; 6
    fbb8:	0f b6       	in	r0, 0x3f	; 63
    fbba:	f8 94       	cli
    fbbc:	9e bf       	out	0x3e, r25	; 62
    fbbe:	0f be       	out	0x3f, r0	; 63
    fbc0:	8d bf       	out	0x3d, r24	; 61
    fbc2:	81 e0       	ldi	r24, 0x01	; 1
    fbc4:	60 e0       	ldi	r22, 0x00	; 0
    fbc6:	a6 01       	movw	r20, r12
    fbc8:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
	      break;

	 }     
     //[Checksum]
	 uart_printf(1,0,PSTR("F968CFFB"));
    fbcc:	81 e0       	ldi	r24, 0x01	; 1
    fbce:	60 e0       	ldi	r22, 0x00	; 0
    fbd0:	46 ef       	ldi	r20, 0xF6	; 246
    fbd2:	52 e2       	ldi	r21, 0x22	; 34
    fbd4:	0e 94 16 aa 	call	0x1542c	; 0x1542c <uart_printf>
	 //ETX
	 uart(1, 1,0x02);
    fbd8:	81 e0       	ldi	r24, 0x01	; 1
    fbda:	61 e0       	ldi	r22, 0x01	; 1
    fbdc:	42 e0       	ldi	r20, 0x02	; 2
    fbde:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
}
    fbe2:	c0 5c       	subi	r28, 0xC0	; 192
    fbe4:	df 4f       	sbci	r29, 0xFF	; 255
    fbe6:	0f b6       	in	r0, 0x3f	; 63
    fbe8:	f8 94       	cli
    fbea:	de bf       	out	0x3e, r29	; 62
    fbec:	0f be       	out	0x3f, r0	; 63
    fbee:	cd bf       	out	0x3d, r28	; 61
    fbf0:	cf 91       	pop	r28
    fbf2:	df 91       	pop	r29
    fbf4:	0f 91       	pop	r16
    fbf6:	ff 90       	pop	r15
    fbf8:	ef 90       	pop	r14
    fbfa:	df 90       	pop	r13
    fbfc:	cf 90       	pop	r12
    fbfe:	bf 90       	pop	r11
    fc00:	af 90       	pop	r10
    fc02:	08 95       	ret

0000fc04 <sendMessage98>:
	//if (xFIP_ID>16)xFIP_ID=16;
	sprintf_P(strSend,PSTR("%s%s%s%s98%.2dF968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,xFIP_ID);
	uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/
    sprintf_P(strFIP_ID,PSTR("%.2d"),GetPumpID(FIPAddr));
    fc04:	0e 94 9a 20 	call	0x4134	; 0x4134 <GetPumpID>
    fc08:	00 d0       	rcall	.+0      	; 0xfc0a <sendMessage98+0x6>
    fc0a:	00 d0       	rcall	.+0      	; 0xfc0c <sendMessage98+0x8>
    fc0c:	00 d0       	rcall	.+0      	; 0xfc0e <sendMessage98+0xa>
    fc0e:	ed b7       	in	r30, 0x3d	; 61
    fc10:	fe b7       	in	r31, 0x3e	; 62
    fc12:	31 96       	adiw	r30, 0x01	; 1
    fc14:	2f eb       	ldi	r18, 0xBF	; 191
    fc16:	37 e0       	ldi	r19, 0x07	; 7
    fc18:	ad b7       	in	r26, 0x3d	; 61
    fc1a:	be b7       	in	r27, 0x3e	; 62
    fc1c:	12 96       	adiw	r26, 0x02	; 2
    fc1e:	3c 93       	st	X, r19
    fc20:	2e 93       	st	-X, r18
    fc22:	11 97       	sbiw	r26, 0x01	; 1
    fc24:	21 ef       	ldi	r18, 0xF1	; 241
    fc26:	32 e2       	ldi	r19, 0x22	; 34
    fc28:	33 83       	std	Z+3, r19	; 0x03
    fc2a:	22 83       	std	Z+2, r18	; 0x02
    fc2c:	84 83       	std	Z+4, r24	; 0x04
    fc2e:	15 82       	std	Z+5, r1	; 0x05
    fc30:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	IFTSendMessage(MSG_98);
    fc34:	8d b7       	in	r24, 0x3d	; 61
    fc36:	9e b7       	in	r25, 0x3e	; 62
    fc38:	06 96       	adiw	r24, 0x06	; 6
    fc3a:	0f b6       	in	r0, 0x3f	; 63
    fc3c:	f8 94       	cli
    fc3e:	9e bf       	out	0x3e, r25	; 62
    fc40:	0f be       	out	0x3f, r0	; 63
    fc42:	8d bf       	out	0x3d, r24	; 61
    fc44:	88 e9       	ldi	r24, 0x98	; 152
    fc46:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
	IsBusyMsg11=True;
    fc4a:	81 e0       	ldi	r24, 0x01	; 1
    fc4c:	80 93 af 01 	sts	0x01AF, r24
}
    fc50:	08 95       	ret

0000fc52 <FMenuTicket>:
	    StrResult[2]='0'+Val;
	    StrResult[3]=0;
		}   
}

char FMenuTicket(){
    fc52:	ef 92       	push	r14
    fc54:	0f 93       	push	r16
    fc56:	1f 93       	push	r17
    fc58:	df 93       	push	r29
    fc5a:	cf 93       	push	r28
    fc5c:	cd b7       	in	r28, 0x3d	; 61
    fc5e:	de b7       	in	r29, 0x3e	; 62
    fc60:	64 97       	sbiw	r28, 0x14	; 20
    fc62:	0f b6       	in	r0, 0x3f	; 63
    fc64:	f8 94       	cli
    fc66:	de bf       	out	0x3e, r29	; 62
    fc68:	0f be       	out	0x3f, r0	; 63
    fc6a:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
    switch(stMenuTicket){
    fc6c:	80 91 10 02 	lds	r24, 0x0210
    fc70:	86 30       	cpi	r24, 0x06	; 6
    fc72:	09 f4       	brne	.+2      	; 0xfc76 <FMenuTicket+0x24>
    fc74:	bf c0       	rjmp	.+382    	; 0xfdf4 <FMenuTicket+0x1a2>
    fc76:	87 30       	cpi	r24, 0x07	; 7
    fc78:	88 f4       	brcc	.+34     	; 0xfc9c <FMenuTicket+0x4a>
    fc7a:	82 30       	cpi	r24, 0x02	; 2
    fc7c:	e9 f1       	breq	.+122    	; 0xfcf8 <FMenuTicket+0xa6>
    fc7e:	83 30       	cpi	r24, 0x03	; 3
    fc80:	30 f4       	brcc	.+12     	; 0xfc8e <FMenuTicket+0x3c>
    fc82:	88 23       	and	r24, r24
    fc84:	09 f1       	breq	.+66     	; 0xfcc8 <FMenuTicket+0x76>
    fc86:	81 30       	cpi	r24, 0x01	; 1
    fc88:	09 f0       	breq	.+2      	; 0xfc8c <FMenuTicket+0x3a>
    fc8a:	21 c1       	rjmp	.+578    	; 0xfece <FMenuTicket+0x27c>
    fc8c:	1f c0       	rjmp	.+62     	; 0xfccc <FMenuTicket+0x7a>
    fc8e:	84 30       	cpi	r24, 0x04	; 4
    fc90:	09 f4       	brne	.+2      	; 0xfc94 <FMenuTicket+0x42>
    fc92:	87 c0       	rjmp	.+270    	; 0xfda2 <FMenuTicket+0x150>
    fc94:	85 30       	cpi	r24, 0x05	; 5
    fc96:	08 f0       	brcs	.+2      	; 0xfc9a <FMenuTicket+0x48>
    fc98:	a7 c0       	rjmp	.+334    	; 0xfde8 <FMenuTicket+0x196>
    fc9a:	4d c0       	rjmp	.+154    	; 0xfd36 <FMenuTicket+0xe4>
    fc9c:	89 30       	cpi	r24, 0x09	; 9
    fc9e:	09 f4       	brne	.+2      	; 0xfca2 <FMenuTicket+0x50>
    fca0:	f4 c0       	rjmp	.+488    	; 0xfe8a <FMenuTicket+0x238>
    fca2:	8a 30       	cpi	r24, 0x0A	; 10
    fca4:	38 f4       	brcc	.+14     	; 0xfcb4 <FMenuTicket+0x62>
    fca6:	87 30       	cpi	r24, 0x07	; 7
    fca8:	09 f4       	brne	.+2      	; 0xfcac <FMenuTicket+0x5a>
    fcaa:	d2 c0       	rjmp	.+420    	; 0xfe50 <FMenuTicket+0x1fe>
    fcac:	88 30       	cpi	r24, 0x08	; 8
    fcae:	09 f0       	breq	.+2      	; 0xfcb2 <FMenuTicket+0x60>
    fcb0:	0e c1       	rjmp	.+540    	; 0xfece <FMenuTicket+0x27c>
    fcb2:	be c0       	rjmp	.+380    	; 0xfe30 <FMenuTicket+0x1de>
    fcb4:	8b 30       	cpi	r24, 0x0B	; 11
    fcb6:	09 f4       	brne	.+2      	; 0xfcba <FMenuTicket+0x68>
    fcb8:	ee c0       	rjmp	.+476    	; 0xfe96 <FMenuTicket+0x244>
    fcba:	8b 30       	cpi	r24, 0x0B	; 11
    fcbc:	08 f4       	brcc	.+2      	; 0xfcc0 <FMenuTicket+0x6e>
    fcbe:	01 c1       	rjmp	.+514    	; 0xfec2 <FMenuTicket+0x270>
    fcc0:	8c 30       	cpi	r24, 0x0C	; 12
    fcc2:	09 f0       	breq	.+2      	; 0xfcc6 <FMenuTicket+0x74>
    fcc4:	04 c1       	rjmp	.+520    	; 0xfece <FMenuTicket+0x27c>
    fcc6:	ff c0       	rjmp	.+510    	; 0xfec6 <FMenuTicket+0x274>
	case mtInit:
		 stMenuTicket=mtPlatNo;
    fcc8:	81 e0       	ldi	r24, 0x01	; 1
    fcca:	79 c0       	rjmp	.+242    	; 0xfdbe <FMenuTicket+0x16c>
	     break;
    case mtPlatNo:
	     lcd_clear();
    fccc:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	     lcd_printf(1,1,PSTR("Input Plat No: "));
    fcd0:	81 e0       	ldi	r24, 0x01	; 1
    fcd2:	61 e0       	ldi	r22, 0x01	; 1
    fcd4:	41 e6       	ldi	r20, 0x61	; 97
    fcd6:	5c e0       	ldi	r21, 0x0C	; 12
    fcd8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	     lcd_printf(2,1,PSTR("_"));
    fcdc:	82 e0       	ldi	r24, 0x02	; 2
    fcde:	61 e0       	ldi	r22, 0x01	; 1
    fce0:	4f e5       	ldi	r20, 0x5F	; 95
    fce2:	5c e0       	ldi	r21, 0x0C	; 12
    fce4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    fce8:	84 e0       	ldi	r24, 0x04	; 4
    fcea:	61 e0       	ldi	r22, 0x01	; 1
    fcec:	4a e4       	ldi	r20, 0x4A	; 74
    fcee:	5c e0       	ldi	r21, 0x0C	; 12
    fcf0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputPlatNo;
    fcf4:	82 e0       	ldi	r24, 0x02	; 2
    fcf6:	63 c0       	rjmp	.+198    	; 0xfdbe <FMenuTicket+0x16c>
	     break;
    case mtInputPlatNo:
	     uiResult=UserInput(UI_ALPHANUM_R,2,1,strLicPlate,0,10);
    fcf8:	83 e0       	ldi	r24, 0x03	; 3
    fcfa:	62 e0       	ldi	r22, 0x02	; 2
    fcfc:	41 e0       	ldi	r20, 0x01	; 1
    fcfe:	20 e0       	ldi	r18, 0x00	; 0
    fd00:	39 e0       	ldi	r19, 0x09	; 9
    fd02:	00 e0       	ldi	r16, 0x00	; 0
    fd04:	10 e0       	ldi	r17, 0x00	; 0
    fd06:	7a e0       	ldi	r23, 0x0A	; 10
    fd08:	e7 2e       	mov	r14, r23
    fd0a:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtOdometer;
    fd0e:	83 30       	cpi	r24, 0x03	; 3
    fd10:	09 f4       	brne	.+2      	; 0xfd14 <FMenuTicket+0xc2>
    fd12:	55 c0       	rjmp	.+170    	; 0xfdbe <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtExitMenuTicket;
    fd14:	81 30       	cpi	r24, 0x01	; 1
    fd16:	09 f4       	brne	.+2      	; 0xfd1a <FMenuTicket+0xc8>
    fd18:	d4 c0       	rjmp	.+424    	; 0xfec2 <FMenuTicket+0x270>
         else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fd1a:	84 30       	cpi	r24, 0x04	; 4
    fd1c:	21 f4       	brne	.+8      	; 0xfd26 <FMenuTicket+0xd4>
    fd1e:	61 e0       	ldi	r22, 0x01	; 1
    fd20:	45 e3       	ldi	r20, 0x35	; 53
    fd22:	5c e0       	ldi	r21, 0x0C	; 12
    fd24:	5e c0       	rjmp	.+188    	; 0xfde2 <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fd26:	85 30       	cpi	r24, 0x05	; 5
    fd28:	09 f0       	breq	.+2      	; 0xfd2c <FMenuTicket+0xda>
    fd2a:	d1 c0       	rjmp	.+418    	; 0xfece <FMenuTicket+0x27c>
    fd2c:	84 e0       	ldi	r24, 0x04	; 4
    fd2e:	61 e0       	ldi	r22, 0x01	; 1
    fd30:	40 e2       	ldi	r20, 0x20	; 32
    fd32:	5c e0       	ldi	r21, 0x0C	; 12
    fd34:	56 c0       	rjmp	.+172    	; 0xfde2 <FMenuTicket+0x190>
	     break;
    case mtOdometer:
	     lcd_clear();
    fd36:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		 sprintf_P(lcdteks,PSTR("Plat No: %s "),strLicPlate);
    fd3a:	00 d0       	rcall	.+0      	; 0xfd3c <FMenuTicket+0xea>
    fd3c:	00 d0       	rcall	.+0      	; 0xfd3e <FMenuTicket+0xec>
    fd3e:	00 d0       	rcall	.+0      	; 0xfd40 <FMenuTicket+0xee>
    fd40:	ed b7       	in	r30, 0x3d	; 61
    fd42:	fe b7       	in	r31, 0x3e	; 62
    fd44:	31 96       	adiw	r30, 0x01	; 1
    fd46:	8e 01       	movw	r16, r28
    fd48:	0f 5f       	subi	r16, 0xFF	; 255
    fd4a:	1f 4f       	sbci	r17, 0xFF	; 255
    fd4c:	ad b7       	in	r26, 0x3d	; 61
    fd4e:	be b7       	in	r27, 0x3e	; 62
    fd50:	12 96       	adiw	r26, 0x02	; 2
    fd52:	1c 93       	st	X, r17
    fd54:	0e 93       	st	-X, r16
    fd56:	11 97       	sbiw	r26, 0x01	; 1
    fd58:	83 e1       	ldi	r24, 0x13	; 19
    fd5a:	9c e0       	ldi	r25, 0x0C	; 12
    fd5c:	93 83       	std	Z+3, r25	; 0x03
    fd5e:	82 83       	std	Z+2, r24	; 0x02
    fd60:	80 e0       	ldi	r24, 0x00	; 0
    fd62:	99 e0       	ldi	r25, 0x09	; 9
    fd64:	95 83       	std	Z+5, r25	; 0x05
    fd66:	84 83       	std	Z+4, r24	; 0x04
    fd68:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	     lcd_print(1,1,lcdteks);
    fd6c:	8d b7       	in	r24, 0x3d	; 61
    fd6e:	9e b7       	in	r25, 0x3e	; 62
    fd70:	06 96       	adiw	r24, 0x06	; 6
    fd72:	0f b6       	in	r0, 0x3f	; 63
    fd74:	f8 94       	cli
    fd76:	9e bf       	out	0x3e, r25	; 62
    fd78:	0f be       	out	0x3f, r0	; 63
    fd7a:	8d bf       	out	0x3d, r24	; 61
    fd7c:	81 e0       	ldi	r24, 0x01	; 1
    fd7e:	61 e0       	ldi	r22, 0x01	; 1
    fd80:	a8 01       	movw	r20, r16
    fd82:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	     lcd_printf(2,1,PSTR("Odometer:_ "));
    fd86:	82 e0       	ldi	r24, 0x02	; 2
    fd88:	61 e0       	ldi	r22, 0x01	; 1
    fd8a:	47 e0       	ldi	r20, 0x07	; 7
    fd8c:	5c e0       	ldi	r21, 0x0C	; 12
    fd8e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    fd92:	84 e0       	ldi	r24, 0x04	; 4
    fd94:	61 e0       	ldi	r22, 0x01	; 1
    fd96:	42 ef       	ldi	r20, 0xF2	; 242
    fd98:	5b e0       	ldi	r21, 0x0B	; 11
    fd9a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputOdometer;
    fd9e:	84 e0       	ldi	r24, 0x04	; 4
    fda0:	0e c0       	rjmp	.+28     	; 0xfdbe <FMenuTicket+0x16c>
	     break;
    case mtInputOdometer:
	     uiResult=UserInput(UI_NUMBER_R,2,10,strOdometer,0,10);
    fda2:	81 e0       	ldi	r24, 0x01	; 1
    fda4:	62 e0       	ldi	r22, 0x02	; 2
    fda6:	4a e0       	ldi	r20, 0x0A	; 10
    fda8:	29 ec       	ldi	r18, 0xC9	; 201
    fdaa:	33 e0       	ldi	r19, 0x03	; 3
    fdac:	00 e0       	ldi	r16, 0x00	; 0
    fdae:	10 e0       	ldi	r17, 0x00	; 0
    fdb0:	5a e0       	ldi	r21, 0x0A	; 10
    fdb2:	e5 2e       	mov	r14, r21
    fdb4:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtFIP;
    fdb8:	83 30       	cpi	r24, 0x03	; 3
    fdba:	21 f4       	brne	.+8      	; 0xfdc4 <FMenuTicket+0x172>
    fdbc:	85 e0       	ldi	r24, 0x05	; 5
    fdbe:	80 93 10 02 	sts	0x0210, r24
    fdc2:	85 c0       	rjmp	.+266    	; 0xfece <FMenuTicket+0x27c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtPlatNo;
    fdc4:	81 30       	cpi	r24, 0x01	; 1
    fdc6:	d9 f3       	breq	.-10     	; 0xfdbe <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fdc8:	84 30       	cpi	r24, 0x04	; 4
    fdca:	21 f4       	brne	.+8      	; 0xfdd4 <FMenuTicket+0x182>
    fdcc:	61 e0       	ldi	r22, 0x01	; 1
    fdce:	4d ed       	ldi	r20, 0xDD	; 221
    fdd0:	5b e0       	ldi	r21, 0x0B	; 11
    fdd2:	07 c0       	rjmp	.+14     	; 0xfde2 <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fdd4:	85 30       	cpi	r24, 0x05	; 5
    fdd6:	09 f0       	breq	.+2      	; 0xfdda <FMenuTicket+0x188>
    fdd8:	7a c0       	rjmp	.+244    	; 0xfece <FMenuTicket+0x27c>
    fdda:	84 e0       	ldi	r24, 0x04	; 4
    fddc:	61 e0       	ldi	r22, 0x01	; 1
    fdde:	48 ec       	ldi	r20, 0xC8	; 200
    fde0:	5b e0       	ldi	r21, 0x0B	; 11
    fde2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
    fde6:	73 c0       	rjmp	.+230    	; 0xfece <FMenuTicket+0x27c>
	     break;
    case mtFIP:
	     lcd_clear();
    fde8:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		 _scr_pump();
    fdec:	0e 94 56 48 	call	0x90ac	; 0x90ac <_scr_pump>
		 stMenuTicket=mtInputFIP;
    fdf0:	86 e0       	ldi	r24, 0x06	; 6
    fdf2:	e5 cf       	rjmp	.-54     	; 0xfdbe <FMenuTicket+0x16c>
	     break;
    case mtInputFIP:
	     KeyPressed=_key_scan(1);
    fdf4:	81 e0       	ldi	r24, 0x01	; 1
    fdf6:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    fdfa:	18 2f       	mov	r17, r24
		 KeyChar=_key_btn(KeyPressed);
    fdfc:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		 if ((KeyChar>='1')&&(KeyChar<='8')){
    fe00:	81 53       	subi	r24, 0x31	; 49
    fe02:	88 30       	cpi	r24, 0x08	; 8
    fe04:	40 f4       	brcc	.+16     	; 0xfe16 <FMenuTicket+0x1c4>
		     FIP_Used=KeyChar-'0';
    fe06:	8f 5f       	subi	r24, 0xFF	; 255
    fe08:	80 93 0d 02 	sts	0x020D, r24
			 zFIP_Used=FIP_Used;
    fe0c:	80 93 0c 02 	sts	0x020C, r24
		     stMenuTicket=mtSendMsg98;
    fe10:	87 e0       	ldi	r24, 0x07	; 7
    fe12:	80 93 10 02 	sts	0x0210, r24
		 }
		 if (KeyPressed==_KEY_CANCEL){
    fe16:	17 3e       	cpi	r17, 0xE7	; 231
    fe18:	11 f4       	brne	.+4      	; 0xfe1e <FMenuTicket+0x1cc>
             stMenuTicket=mtOdometer;
    fe1a:	83 e0       	ldi	r24, 0x03	; 3
    fe1c:	d0 cf       	rjmp	.-96     	; 0xfdbe <FMenuTicket+0x16c>
		 }else
		 if (KeyPressed==_KEY_ENTER){
    fe1e:	17 3b       	cpi	r17, 0xB7	; 183
    fe20:	09 f0       	breq	.+2      	; 0xfe24 <FMenuTicket+0x1d2>
    fe22:	55 c0       	rjmp	.+170    	; 0xfece <FMenuTicket+0x27c>
		     FIP_Used=zFIP_Used;
    fe24:	80 91 0c 02 	lds	r24, 0x020C
    fe28:	80 93 0d 02 	sts	0x020D, r24
             stMenuTicket=mtInitWaitMessage99;
    fe2c:	88 e0       	ldi	r24, 0x08	; 8
    fe2e:	c7 cf       	rjmp	.-114    	; 0xfdbe <FMenuTicket+0x16c>
		 }
	     break;	
    case mtInitWaitMessage99:
	     lcd_clear();
    fe30:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		 lcd_printf(2,1,PSTR("Send Request"));
    fe34:	82 e0       	ldi	r24, 0x02	; 2
    fe36:	61 e0       	ldi	r22, 0x01	; 1
    fe38:	4b eb       	ldi	r20, 0xBB	; 187
    fe3a:	5b e0       	ldi	r21, 0x0B	; 11
    fe3c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 lcd_printf(3,1,PSTR("Proses"));
    fe40:	83 e0       	ldi	r24, 0x03	; 3
    fe42:	61 e0       	ldi	r22, 0x01	; 1
    fe44:	44 eb       	ldi	r20, 0xB4	; 180
    fe46:	5b e0       	ldi	r21, 0x0B	; 11
    fe48:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
         stMenuTicket=mtSendMsg98;
    fe4c:	87 e0       	ldi	r24, 0x07	; 7
    fe4e:	b7 cf       	rjmp	.-146    	; 0xfdbe <FMenuTicket+0x16c>
	     break;
    case mtSendMsg98:
	     iPos=0;
    fe50:	10 92 0f 02 	sts	0x020F, r1
		 iSend=0;
    fe54:	10 92 0e 02 	sts	0x020E, r1
		 IsMessage99=False;
    fe58:	10 92 a1 01 	sts	0x01A1, r1
		 TimSend=0;
    fe5c:	10 92 7e 0c 	sts	0x0C7E, r1
		 iLoop=0;
    fe60:	10 92 0b 02 	sts	0x020B, r1
    fe64:	10 92 0a 02 	sts	0x020A, r1
		 if (IFType==IT_SLAVE)sendMessage98(FIP_Used);
    fe68:	80 91 00 01 	lds	r24, 0x0100
    fe6c:	81 30       	cpi	r24, 0x01	; 1
    fe6e:	29 f4       	brne	.+10     	; 0xfe7a <FMenuTicket+0x228>
    fe70:	80 91 0d 02 	lds	r24, 0x020D
    fe74:	0e 94 02 7e 	call	0xfc04	; 0xfc04 <sendMessage98>
    fe78:	24 c0       	rjmp	.+72     	; 0xfec2 <FMenuTicket+0x270>
		 else 
		 if (IFType==IT_STANDALONE)PrintStandalone(FIP_Used,False);
    fe7a:	82 30       	cpi	r24, 0x02	; 2
    fe7c:	11 f5       	brne	.+68     	; 0xfec2 <FMenuTicket+0x270>
    fe7e:	80 91 0d 02 	lds	r24, 0x020D
    fe82:	60 e0       	ldi	r22, 0x00	; 0
    fe84:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <PrintStandalone>
    fe88:	1c c0       	rjmp	.+56     	; 0xfec2 <FMenuTicket+0x270>
	                     stMenuTicket=mtSendMsg98;
				  }
			 }
		 }
		 */
		 if (IsMessage99==True){ 
    fe8a:	80 91 a1 01 	lds	r24, 0x01A1
    fe8e:	81 30       	cpi	r24, 0x01	; 1
    fe90:	f1 f4       	brne	.+60     	; 0xfece <FMenuTicket+0x27c>
		    stMenuTicket=mtMessage99Received;
    fe92:	8a e0       	ldi	r24, 0x0A	; 10
    fe94:	94 cf       	rjmp	.-216    	; 0xfdbe <FMenuTicket+0x16c>
	     break;
    case mtMessage99Received:
	     stMenuTicket=mtExitMenuTicket;
		 break;
    case mtNoConnection:
	     lcd_clear();
    fe96:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		 lcd_printf(2,1,PSTR("Error No Connection"));
    fe9a:	82 e0       	ldi	r24, 0x02	; 2
    fe9c:	61 e0       	ldi	r22, 0x01	; 1
    fe9e:	40 ea       	ldi	r20, 0xA0	; 160
    fea0:	5b e0       	ldi	r21, 0x0B	; 11
    fea2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    fea6:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    fea8:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    feaa:	82 e0       	ldi	r24, 0x02	; 2
    feac:	80 93 be 01 	sts	0x01BE, r24
    feb0:	80 e2       	ldi	r24, 0x20	; 32
    feb2:	9e e4       	ldi	r25, 0x4E	; 78
    feb4:	29 e1       	ldi	r18, 0x19	; 25
    feb6:	30 e0       	ldi	r19, 0x00	; 0
    feb8:	f9 01       	movw	r30, r18
    feba:	31 97       	sbiw	r30, 0x01	; 1
    febc:	f1 f7       	brne	.-4      	; 0xfeba <FMenuTicket+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    febe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fec0:	d9 f7       	brne	.-10     	; 0xfeb8 <FMenuTicket+0x266>
    case mtNoConnection:
	     lcd_clear();
		 lcd_printf(2,1,PSTR("Error No Connection"));
		 system_beep(2);
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
    fec2:	8c e0       	ldi	r24, 0x0C	; 12
    fec4:	7c cf       	rjmp	.-264    	; 0xfdbe <FMenuTicket+0x16c>
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
    fec6:	10 92 10 02 	sts	0x0210, r1
    feca:	81 e0       	ldi	r24, 0x01	; 1
    fecc:	01 c0       	rjmp	.+2      	; 0xfed0 <FMenuTicket+0x27e>
    fece:	80 e0       	ldi	r24, 0x00	; 0
	     break;
	}
  return Result;
}
    fed0:	64 96       	adiw	r28, 0x14	; 20
    fed2:	0f b6       	in	r0, 0x3f	; 63
    fed4:	f8 94       	cli
    fed6:	de bf       	out	0x3e, r29	; 62
    fed8:	0f be       	out	0x3f, r0	; 63
    feda:	cd bf       	out	0x3d, r28	; 61
    fedc:	cf 91       	pop	r28
    fede:	df 91       	pop	r29
    fee0:	1f 91       	pop	r17
    fee2:	0f 91       	pop	r16
    fee4:	ef 90       	pop	r14
    fee6:	08 95       	ret

0000fee8 <sendMessage94>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_94);
    fee8:	84 e9       	ldi	r24, 0x94	; 148
    feea:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
    feee:	08 95       	ret

0000fef0 <sendMessage92>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_92);
    fef0:	82 e9       	ldi	r24, 0x92	; 146
    fef2:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
    fef6:	08 95       	ret

0000fef8 <sendMessage90>:
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("E9445512"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_90);
    fef8:	80 e9       	ldi	r24, 0x90	; 144
    fefa:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
    fefe:	08 95       	ret

0000ff00 <FMenuEDCTransaction>:
	      break;
	 }
	 return Result;
}

char FMenuEDCTransaction(){
    ff00:	0f 93       	push	r16
    ff02:	1f 93       	push	r17
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
	 switch(stEtransaction){
    ff04:	80 91 65 02 	lds	r24, 0x0265
    ff08:	85 30       	cpi	r24, 0x05	; 5
    ff0a:	09 f4       	brne	.+2      	; 0xff0e <FMenuEDCTransaction+0xe>
    ff0c:	96 c0       	rjmp	.+300    	; 0x1003a <FMenuEDCTransaction+0x13a>
    ff0e:	86 30       	cpi	r24, 0x06	; 6
    ff10:	90 f4       	brcc	.+36     	; 0xff36 <FMenuEDCTransaction+0x36>
    ff12:	82 30       	cpi	r24, 0x02	; 2
    ff14:	09 f4       	brne	.+2      	; 0xff18 <FMenuEDCTransaction+0x18>
    ff16:	52 c0       	rjmp	.+164    	; 0xffbc <FMenuEDCTransaction+0xbc>
    ff18:	83 30       	cpi	r24, 0x03	; 3
    ff1a:	30 f4       	brcc	.+12     	; 0xff28 <FMenuEDCTransaction+0x28>
    ff1c:	88 23       	and	r24, r24
    ff1e:	f1 f0       	breq	.+60     	; 0xff5c <FMenuEDCTransaction+0x5c>
    ff20:	81 30       	cpi	r24, 0x01	; 1
    ff22:	09 f0       	breq	.+2      	; 0xff26 <FMenuEDCTransaction+0x26>
    ff24:	d2 c0       	rjmp	.+420    	; 0x100ca <FMenuEDCTransaction+0x1ca>
    ff26:	36 c0       	rjmp	.+108    	; 0xff94 <FMenuEDCTransaction+0x94>
    ff28:	83 30       	cpi	r24, 0x03	; 3
    ff2a:	09 f4       	brne	.+2      	; 0xff2e <FMenuEDCTransaction+0x2e>
    ff2c:	57 c0       	rjmp	.+174    	; 0xffdc <FMenuEDCTransaction+0xdc>
    ff2e:	84 30       	cpi	r24, 0x04	; 4
    ff30:	09 f0       	breq	.+2      	; 0xff34 <FMenuEDCTransaction+0x34>
    ff32:	cb c0       	rjmp	.+406    	; 0x100ca <FMenuEDCTransaction+0x1ca>
    ff34:	7c c0       	rjmp	.+248    	; 0x1002e <FMenuEDCTransaction+0x12e>
    ff36:	88 30       	cpi	r24, 0x08	; 8
    ff38:	09 f4       	brne	.+2      	; 0xff3c <FMenuEDCTransaction+0x3c>
    ff3a:	b7 c0       	rjmp	.+366    	; 0x100aa <FMenuEDCTransaction+0x1aa>
    ff3c:	89 30       	cpi	r24, 0x09	; 9
    ff3e:	38 f4       	brcc	.+14     	; 0xff4e <FMenuEDCTransaction+0x4e>
    ff40:	86 30       	cpi	r24, 0x06	; 6
    ff42:	09 f4       	brne	.+2      	; 0xff46 <FMenuEDCTransaction+0x46>
    ff44:	8d c0       	rjmp	.+282    	; 0x10060 <FMenuEDCTransaction+0x160>
    ff46:	87 30       	cpi	r24, 0x07	; 7
    ff48:	09 f0       	breq	.+2      	; 0xff4c <FMenuEDCTransaction+0x4c>
    ff4a:	bf c0       	rjmp	.+382    	; 0x100ca <FMenuEDCTransaction+0x1ca>
    ff4c:	8b c0       	rjmp	.+278    	; 0x10064 <FMenuEDCTransaction+0x164>
    ff4e:	89 30       	cpi	r24, 0x09	; 9
    ff50:	09 f4       	brne	.+2      	; 0xff54 <FMenuEDCTransaction+0x54>
    ff52:	b1 c0       	rjmp	.+354    	; 0x100b6 <FMenuEDCTransaction+0x1b6>
    ff54:	8a 30       	cpi	r24, 0x0A	; 10
    ff56:	09 f0       	breq	.+2      	; 0xff5a <FMenuEDCTransaction+0x5a>
    ff58:	b8 c0       	rjmp	.+368    	; 0x100ca <FMenuEDCTransaction+0x1ca>
    ff5a:	b3 c0       	rjmp	.+358    	; 0x100c2 <FMenuEDCTransaction+0x1c2>
	 case etInit:
	      lcd_clear();
    ff5c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Card Type"));
    ff60:	81 e0       	ldi	r24, 0x01	; 1
    ff62:	61 e0       	ldi	r22, 0x01	; 1
    ff64:	46 e6       	ldi	r20, 0x66	; 102
    ff66:	5c e1       	ldi	r21, 0x1C	; 28
    ff68:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          lcd_printf(1,1,PSTR("1.Debit/Flash Card  "));
    ff6c:	81 e0       	ldi	r24, 0x01	; 1
    ff6e:	61 e0       	ldi	r22, 0x01	; 1
    ff70:	41 e5       	ldi	r20, 0x51	; 81
    ff72:	5c e1       	ldi	r21, 0x1C	; 28
    ff74:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Credit Card       "));
    ff78:	82 e0       	ldi	r24, 0x02	; 2
    ff7a:	61 e0       	ldi	r22, 0x01	; 1
    ff7c:	4c e3       	ldi	r20, 0x3C	; 60
    ff7e:	5c e1       	ldi	r21, 0x1C	; 28
    ff80:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    ff84:	84 e0       	ldi	r24, 0x04	; 4
    ff86:	61 e0       	ldi	r22, 0x01	; 1
    ff88:	47 e2       	ldi	r20, 0x27	; 39
    ff8a:	5c e1       	ldi	r21, 0x1C	; 28
    ff8c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stEtransaction=etInputEDC;
    ff90:	81 e0       	ldi	r24, 0x01	; 1
    ff92:	63 c0       	rjmp	.+198    	; 0x1005a <FMenuEDCTransaction+0x15a>
	      break;
     case etInputEDC:
	 	  KeyPressed=_key_scan(1);
    ff94:	81 e0       	ldi	r24, 0x01	; 1
    ff96:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
    ff9a:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    ff9c:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
    ffa0:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    ffa2:	81 53       	subi	r24, 0x31	; 49
    ffa4:	82 30       	cpi	r24, 0x02	; 2
    ffa6:	30 f4       	brcc	.+12     	; 0xffb4 <FMenuEDCTransaction+0xb4>
		       EDCType=KeyChar-'0';
    ffa8:	90 53       	subi	r25, 0x30	; 48
    ffaa:	90 93 11 08 	sts	0x0811, r25
		       stEtransaction=etSelectFIP;
    ffae:	82 e0       	ldi	r24, 0x02	; 2
    ffb0:	80 93 65 02 	sts	0x0265, r24
		     }
		  if (KeyPressed==_KEY_CANCEL)stEtransaction=etExitEDCTransaction;
    ffb4:	07 3e       	cpi	r16, 0xE7	; 231
    ffb6:	09 f0       	breq	.+2      	; 0xffba <FMenuEDCTransaction+0xba>
    ffb8:	88 c0       	rjmp	.+272    	; 0x100ca <FMenuEDCTransaction+0x1ca>
    ffba:	81 c0       	rjmp	.+258    	; 0x100be <FMenuEDCTransaction+0x1be>
	      break;
	 case etSelectFIP:
	      FIPResult=menu_FIP(FIP_Used,strFIP_ID);
    ffbc:	80 e0       	ldi	r24, 0x00	; 0
    ffbe:	90 e0       	ldi	r25, 0x00	; 0
    ffc0:	6f eb       	ldi	r22, 0xBF	; 191
    ffc2:	77 e0       	ldi	r23, 0x07	; 7
    ffc4:	0e 94 bc 55 	call	0xab78	; 0xab78 <menu_FIP>
		  if (FIPResult==FIP_DONE)stEtransaction=etInitMessage90;
    ffc8:	88 23       	and	r24, r24
    ffca:	11 f4       	brne	.+4      	; 0xffd0 <FMenuEDCTransaction+0xd0>
    ffcc:	83 e0       	ldi	r24, 0x03	; 3
    ffce:	45 c0       	rjmp	.+138    	; 0x1005a <FMenuEDCTransaction+0x15a>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
    ffd0:	82 30       	cpi	r24, 0x02	; 2
    ffd2:	09 f0       	breq	.+2      	; 0xffd6 <FMenuEDCTransaction+0xd6>
    ffd4:	7a c0       	rjmp	.+244    	; 0x100ca <FMenuEDCTransaction+0x1ca>
    ffd6:	10 92 65 02 	sts	0x0265, r1
    ffda:	77 c0       	rjmp	.+238    	; 0x100ca <FMenuEDCTransaction+0x1ca>
    ffdc:	e4 e9       	ldi	r30, 0x94	; 148
    ffde:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    ffe0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    ffe2:	8c e0       	ldi	r24, 0x0C	; 12
    ffe4:	e9 3a       	cpi	r30, 0xA9	; 169
    ffe6:	f8 07       	cpc	r31, r24
    ffe8:	d9 f7       	brne	.-10     	; 0xffe0 <FMenuEDCTransaction+0xe0>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
	      break;
     case etInitMessage90:
	      FillChar(strRef1,sizeof(strRef1),0);
	      if (EDCType==1){
    ffea:	80 91 11 08 	lds	r24, 0x0811
    ffee:	81 30       	cpi	r24, 0x01	; 1
    fff0:	19 f4       	brne	.+6      	; 0xfff8 <FMenuEDCTransaction+0xf8>
		      AddSpaceLag(strRef1,20);
    fff2:	cf 01       	movw	r24, r30
    fff4:	45 97       	sbiw	r24, 0x15	; 21
    fff6:	16 c0       	rjmp	.+44     	; 0x10024 <FMenuEDCTransaction+0x124>
          }
		  else
	      if (EDCType==2){
    fff8:	82 30       	cpi	r24, 0x02	; 2
    fffa:	b9 f4       	brne	.+46     	; 0x1002a <FMenuEDCTransaction+0x12a>
		      sprintf_P(strRef1,PSTR("CREDITCARD"));
    fffc:	00 d0       	rcall	.+0      	; 0xfffe <FMenuEDCTransaction+0xfe>
    fffe:	00 d0       	rcall	.+0      	; 0x10000 <FMenuEDCTransaction+0x100>
   10000:	8f 01       	movw	r16, r30
   10002:	05 51       	subi	r16, 0x15	; 21
   10004:	10 40       	sbci	r17, 0x00	; 0
   10006:	ed b7       	in	r30, 0x3d	; 61
   10008:	fe b7       	in	r31, 0x3e	; 62
   1000a:	12 83       	std	Z+2, r17	; 0x02
   1000c:	01 83       	std	Z+1, r16	; 0x01
   1000e:	8c e1       	ldi	r24, 0x1C	; 28
   10010:	9c e1       	ldi	r25, 0x1C	; 28
   10012:	94 83       	std	Z+4, r25	; 0x04
   10014:	83 83       	std	Z+3, r24	; 0x03
   10016:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			  AddSpaceLag(strRef1,20);
   1001a:	0f 90       	pop	r0
   1001c:	0f 90       	pop	r0
   1001e:	0f 90       	pop	r0
   10020:	0f 90       	pop	r0
   10022:	c8 01       	movw	r24, r16
   10024:	64 e1       	ldi	r22, 0x14	; 20
   10026:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
		  }	 
	      stEtransaction=etSendingMessage90;
   1002a:	84 e0       	ldi	r24, 0x04	; 4
   1002c:	16 c0       	rjmp	.+44     	; 0x1005a <FMenuEDCTransaction+0x15a>
	      break;
     case etSendingMessage90:
          sendMessage90();
   1002e:	0e 94 7c 7f 	call	0xfef8	; 0xfef8 <sendMessage90>
		  TimSend=0;
   10032:	10 92 7e 0c 	sts	0x0C7E, r1
          stEtransaction=etWaitReply;
   10036:	85 e0       	ldi	r24, 0x05	; 5
   10038:	10 c0       	rjmp	.+32     	; 0x1005a <FMenuEDCTransaction+0x15a>
	      break;
     case etWaitReply:
	      if (TimSend>TIM_SEND*2)stEtransaction=etNoConnection;
   1003a:	80 91 7e 0c 	lds	r24, 0x0C7E
   1003e:	85 31       	cpi	r24, 0x15	; 21
   10040:	18 f0       	brcs	.+6      	; 0x10048 <FMenuEDCTransaction+0x148>
   10042:	88 e0       	ldi	r24, 0x08	; 8
   10044:	80 93 65 02 	sts	0x0265, r24
		  if ((IsMessage91==True)||(IsMessage09==True))
   10048:	80 91 a9 01 	lds	r24, 0x01A9
   1004c:	81 30       	cpi	r24, 0x01	; 1
   1004e:	21 f0       	breq	.+8      	; 0x10058 <FMenuEDCTransaction+0x158>
   10050:	80 91 a5 01 	lds	r24, 0x01A5
   10054:	81 30       	cpi	r24, 0x01	; 1
   10056:	c9 f5       	brne	.+114    	; 0x100ca <FMenuEDCTransaction+0x1ca>
		       stEtransaction=etSuccesEDC;
   10058:	86 e0       	ldi	r24, 0x06	; 6
   1005a:	80 93 65 02 	sts	0x0265, r24
   1005e:	35 c0       	rjmp	.+106    	; 0x100ca <FMenuEDCTransaction+0x1ca>
	      break;
     case etSuccesEDC:
	      stEtransaction=etDisplayFreeMessage;
   10060:	87 e0       	ldi	r24, 0x07	; 7
   10062:	fb cf       	rjmp	.-10     	; 0x1005a <FMenuEDCTransaction+0x15a>
	      break;
     case etDisplayFreeMessage:
	      if (IsMessage09==True){
   10064:	80 91 a5 01 	lds	r24, 0x01A5
   10068:	81 30       	cpi	r24, 0x01	; 1
   1006a:	19 f5       	brne	.+70     	; 0x100b2 <FMenuEDCTransaction+0x1b2>
		      IsMessage09=False;
   1006c:	10 92 a5 01 	sts	0x01A5, r1
	          procMessage09();
   10070:	0e 94 dd 17 	call	0x2fba	; 0x2fba <procMessage09>
		      lcd_clear();
   10074:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		      lcd_print(1,1,strFreeMessageLine1);
   10078:	81 e0       	ldi	r24, 0x01	; 1
   1007a:	61 e0       	ldi	r22, 0x01	; 1
   1007c:	48 e9       	ldi	r20, 0x98	; 152
   1007e:	58 e0       	ldi	r21, 0x08	; 8
   10080:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		      lcd_print(2,1,strFreeMessageLine2);
   10084:	82 e0       	ldi	r24, 0x02	; 2
   10086:	61 e0       	ldi	r22, 0x01	; 1
   10088:	49 ea       	ldi	r20, 0xA9	; 169
   1008a:	57 e0       	ldi	r21, 0x07	; 7
   1008c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		      lcd_print(3,1,strFreeMessageLine3);
   10090:	83 e0       	ldi	r24, 0x03	; 3
   10092:	61 e0       	ldi	r22, 0x01	; 1
   10094:	42 e2       	ldi	r20, 0x22	; 34
   10096:	58 e0       	ldi	r21, 0x08	; 8
   10098:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
			  lcd_print(4,1,strFreeMessageLine4);
   1009c:	84 e0       	ldi	r24, 0x04	; 4
   1009e:	61 e0       	ldi	r22, 0x01	; 1
   100a0:	4c ed       	ldi	r20, 0xDC	; 220
   100a2:	5b e0       	ldi	r21, 0x0B	; 11
   100a4:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
   100a8:	02 c0       	rjmp	.+4      	; 0x100ae <FMenuEDCTransaction+0x1ae>
			  TimDisplay=0;
			  }
		  stEtransaction=etDelayExit;
	      break;
     case etNoConnection:
	      lcd_clear();
   100aa:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  TimDisplay=0;
   100ae:	10 92 93 01 	sts	0x0193, r1
		  stEtransaction=etDelayExit;
   100b2:	89 e0       	ldi	r24, 0x09	; 9
   100b4:	d2 cf       	rjmp	.-92     	; 0x1005a <FMenuEDCTransaction+0x15a>
	      break;
     case etDelayExit:
	      if (TimDisplay>8)stEtransaction=etExitEDCTransaction;
   100b6:	80 91 93 01 	lds	r24, 0x0193
   100ba:	89 30       	cpi	r24, 0x09	; 9
   100bc:	30 f0       	brcs	.+12     	; 0x100ca <FMenuEDCTransaction+0x1ca>
   100be:	8a e0       	ldi	r24, 0x0A	; 10
   100c0:	cc cf       	rjmp	.-104    	; 0x1005a <FMenuEDCTransaction+0x15a>
	      break;
     case etExitEDCTransaction:
	      stEtransaction=etInit;
   100c2:	10 92 65 02 	sts	0x0265, r1
   100c6:	81 e0       	ldi	r24, 0x01	; 1
   100c8:	01 c0       	rjmp	.+2      	; 0x100cc <FMenuEDCTransaction+0x1cc>
   100ca:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
   100cc:	1f 91       	pop	r17
   100ce:	0f 91       	pop	r16
   100d0:	08 95       	ret

000100d2 <sendMessage58>:
	CardType=0;
	sprintf_P(strSend,PSTR("%dF0000000E123456FFFFF%sE9445512"),CardType,strOdometer);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_58);
   100d2:	88 e5       	ldi	r24, 0x58	; 88
   100d4:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   100d8:	08 95       	ret

000100da <sendMessage56>:
    uart_print(1, 0,strSend);	

	uart_printf(1,0,PSTR("AF968CFFB"));
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_56);
   100da:	86 e5       	ldi	r24, 0x56	; 86
   100dc:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   100e0:	08 95       	ret

000100e2 <FMenuLocalAccount>:
	 __key_lgtcnt = 0; 
	 PORTG=PORTG&0b11111101;
}


char FMenuLocalAccount(){
   100e2:	6f 92       	push	r6
   100e4:	7f 92       	push	r7
   100e6:	8f 92       	push	r8
   100e8:	9f 92       	push	r9
   100ea:	af 92       	push	r10
   100ec:	bf 92       	push	r11
   100ee:	cf 92       	push	r12
   100f0:	df 92       	push	r13
   100f2:	ef 92       	push	r14
   100f4:	ff 92       	push	r15
   100f6:	0f 93       	push	r16
   100f8:	1f 93       	push	r17
   100fa:	df 93       	push	r29
   100fc:	cf 93       	push	r28
   100fe:	cd b7       	in	r28, 0x3d	; 61
   10100:	de b7       	in	r29, 0x3e	; 62
   10102:	e4 97       	sbiw	r28, 0x34	; 52
   10104:	0f b6       	in	r0, 0x3f	; 63
   10106:	f8 94       	cli
   10108:	de bf       	out	0x3e, r29	; 62
   1010a:	0f be       	out	0x3f, r0	; 63
   1010c:	cd bf       	out	0x3d, r28	; 61
		  uart_print(0,1,strSend);	      	   
	   }
	   #endif

	   //Timeout detection
	   if (stLocalAccount>laDispValid){
   1010e:	80 91 5b 01 	lds	r24, 0x015B
   10112:	88 30       	cpi	r24, 0x08	; 8
   10114:	60 f1       	brcs	.+88     	; 0x1016e <FMenuLocalAccount+0x8c>
	       //Timeout reached
           if (TimLocalAccount>MaxLATim){
   10116:	90 91 94 01 	lds	r25, 0x0194
   1011a:	80 91 87 02 	lds	r24, 0x0287
   1011e:	89 17       	cp	r24, r25
   10120:	a0 f4       	brcc	.+40     	; 0x1014a <FMenuLocalAccount+0x68>
		       TimLocalAccount=0;
   10122:	10 92 94 01 	sts	0x0194, r1
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
   10126:	81 e0       	ldi	r24, 0x01	; 1
   10128:	80 93 b3 02 	sts	0x02B3, r24
	 __key_lgtcnt = 0; 
   1012c:	10 92 b4 02 	sts	0x02B4, r1
	 PORTG=PORTG&0b11111101;
   10130:	80 91 65 00 	lds	r24, 0x0065
   10134:	8d 7f       	andi	r24, 0xFD	; 253
   10136:	80 93 65 00 	sts	0x0065, r24
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1013a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1013c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1013e:	82 e0       	ldi	r24, 0x02	; 2
   10140:	80 93 be 01 	sts	0x01BE, r24
	       //Timeout reached
           if (TimLocalAccount>MaxLATim){
		       TimLocalAccount=0;
			   BackLightTrig();
			   system_beep(2);
               stLocalAccount = laMenuTimeout;
   10144:	8e e1       	ldi	r24, 0x1E	; 30
   10146:	80 93 5b 01 	sts	0x015B, r24
		   }

	       if ((IsKeyPressed==True)||(zstLocalAccount!=stLocalAccount)){
   1014a:	80 91 b8 02 	lds	r24, 0x02B8
   1014e:	81 30       	cpi	r24, 0x01	; 1
   10150:	31 f0       	breq	.+12     	; 0x1015e <FMenuLocalAccount+0x7c>
   10152:	90 91 88 02 	lds	r25, 0x0288
   10156:	80 91 5b 01 	lds	r24, 0x015B
   1015a:	98 17       	cp	r25, r24
   1015c:	41 f0       	breq	.+16     	; 0x1016e <FMenuLocalAccount+0x8c>
		        IsKeyPressed=False;
   1015e:	10 92 b8 02 	sts	0x02B8, r1
				TimLocalAccount=0;
   10162:	10 92 94 01 	sts	0x0194, r1
		        zstLocalAccount=stLocalAccount;
   10166:	80 91 5b 01 	lds	r24, 0x015B
   1016a:	80 93 88 02 	sts	0x0288, r24
		   }	       
	   }
	                                 //|   Local Account   |          
	       switch(stLocalAccount){   //|ID: ACD12345       |
   1016e:	80 91 5b 01 	lds	r24, 0x015B
   10172:	90 e0       	ldi	r25, 0x00	; 0
   10174:	fc 01       	movw	r30, r24
   10176:	31 97       	sbiw	r30, 0x01	; 1
   10178:	e0 32       	cpi	r30, 0x20	; 32
   1017a:	f1 05       	cpc	r31, r1
   1017c:	10 f0       	brcs	.+4      	; 0x10182 <FMenuLocalAccount+0xa0>
   1017e:	0c 94 54 89 	jmp	0x112a8	; 0x112a8 <FMenuLocalAccount+0x11c6>
   10182:	e0 57       	subi	r30, 0x70	; 112
   10184:	ff 4f       	sbci	r31, 0xFF	; 255
   10186:	ee 0f       	add	r30, r30
   10188:	ff 1f       	adc	r31, r31
   1018a:	05 90       	lpm	r0, Z+
   1018c:	f4 91       	lpm	r31, Z+
   1018e:	e0 2d       	mov	r30, r0
   10190:	09 94       	ijmp
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
   10192:	81 e0       	ldi	r24, 0x01	; 1
   10194:	80 93 b3 02 	sts	0x02B3, r24
	 __key_lgtcnt = 0; 
   10198:	10 92 b4 02 	sts	0x02B4, r1
	 PORTG=PORTG&0b11111101;
   1019c:	80 91 65 00 	lds	r24, 0x0065
   101a0:	8d 7f       	andi	r24, 0xFD	; 253
   101a2:	80 93 65 00 	sts	0x0065, r24
   101a6:	20 e0       	ldi	r18, 0x00	; 0
   101a8:	30 e0       	ldi	r19, 0x00	; 0


void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
   101aa:	f9 01       	movw	r30, r18
   101ac:	e1 57       	subi	r30, 0x71	; 113
   101ae:	f4 4f       	sbci	r31, 0xF4	; 244
   101b0:	d9 01       	movw	r26, r18
   101b2:	a9 5a       	subi	r26, 0xA9	; 169
   101b4:	b3 4f       	sbci	r27, 0xF3	; 243
   101b6:	8c 91       	ld	r24, X
   101b8:	80 83       	st	Z, r24
   101ba:	2f 5f       	subi	r18, 0xFF	; 255
   101bc:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
   101be:	28 30       	cpi	r18, 0x08	; 8
   101c0:	31 05       	cpc	r19, r1
   101c2:	99 f7       	brne	.-26     	; 0x101aa <FMenuLocalAccount+0xc8>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
   101c4:	10 92 97 0b 	sts	0x0B97, r1
	       switch(stLocalAccount){   //|ID: ACD12345       |
	       case laInit:              //|Process ...        |
		        //Process RFID Data  //|                   |
				//UpdateCardID();
                BackLightTrig();ViewCardID();
	            lcd_clear();
   101c8:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	            lcd_printf(1,1,PSTR("   Local Account   "));
   101cc:	81 e0       	ldi	r24, 0x01	; 1
   101ce:	61 e0       	ldi	r22, 0x01	; 1
   101d0:	4d ed       	ldi	r20, 0xDD	; 221
   101d2:	52 e2       	ldi	r21, 0x22	; 34
   101d4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	            sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
   101d8:	00 d0       	rcall	.+0      	; 0x101da <FMenuLocalAccount+0xf8>
   101da:	00 d0       	rcall	.+0      	; 0x101dc <FMenuLocalAccount+0xfa>
   101dc:	00 d0       	rcall	.+0      	; 0x101de <FMenuLocalAccount+0xfc>
   101de:	ed b7       	in	r30, 0x3d	; 61
   101e0:	fe b7       	in	r31, 0x3e	; 62
   101e2:	31 96       	adiw	r30, 0x01	; 1
   101e4:	8e 01       	movw	r16, r28
   101e6:	04 5f       	subi	r16, 0xF4	; 244
   101e8:	1f 4f       	sbci	r17, 0xFF	; 255
   101ea:	ad b7       	in	r26, 0x3d	; 61
   101ec:	be b7       	in	r27, 0x3e	; 62
   101ee:	12 96       	adiw	r26, 0x02	; 2
   101f0:	1c 93       	st	X, r17
   101f2:	0e 93       	st	-X, r16
   101f4:	11 97       	sbiw	r26, 0x01	; 1
   101f6:	87 ed       	ldi	r24, 0xD7	; 215
   101f8:	92 e2       	ldi	r25, 0x22	; 34
   101fa:	93 83       	std	Z+3, r25	; 0x03
   101fc:	82 83       	std	Z+2, r24	; 0x02
   101fe:	8f e8       	ldi	r24, 0x8F	; 143
   10200:	9b e0       	ldi	r25, 0x0B	; 11
   10202:	95 83       	std	Z+5, r25	; 0x05
   10204:	84 83       	std	Z+4, r24	; 0x04
   10206:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   1020a:	ed b7       	in	r30, 0x3d	; 61
   1020c:	fe b7       	in	r31, 0x3e	; 62
   1020e:	36 96       	adiw	r30, 0x06	; 6
   10210:	0f b6       	in	r0, 0x3f	; 63
   10212:	f8 94       	cli
   10214:	fe bf       	out	0x3e, r31	; 62
   10216:	0f be       	out	0x3f, r0	; 63
   10218:	ed bf       	out	0x3d, r30	; 61
   1021a:	82 e0       	ldi	r24, 0x02	; 2
   1021c:	61 e0       	ldi	r22, 0x01	; 1
   1021e:	a8 01       	movw	r20, r16
   10220:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
                lcd_printf(3,1,PSTR("Proses"));
   10224:	83 e0       	ldi	r24, 0x03	; 3
   10226:	61 e0       	ldi	r22, 0x01	; 1
   10228:	40 ed       	ldi	r20, 0xD0	; 208
   1022a:	52 e2       	ldi	r21, 0x22	; 34
   1022c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				iPos=0;//iLoop=0;
   10230:	10 92 9b 02 	sts	0x029B, r1
				IsFullAuthorized=False;
   10234:	10 92 8b 02 	sts	0x028B, r1
				MaxLATim=eeprom_read_byte(&DefLocalAccountTimeout);
   10238:	89 e4       	ldi	r24, 0x49	; 73
   1023a:	91 e0       	ldi	r25, 0x01	; 1
   1023c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   10240:	80 93 87 02 	sts	0x0287, r24
				TimLocalAccount=0;
   10244:	10 92 94 01 	sts	0x0194, r1
		        stLocalAccount=laSendID;
   10248:	82 e0       	ldi	r24, 0x02	; 2
   1024a:	0b c0       	rjmp	.+22     	; 0x10262 <FMenuLocalAccount+0x180>
				break;         
           case laSendID://sendMessage56 
				IsMessage57=False;
   1024c:	10 92 a7 01 	sts	0x01A7, r1
                sendMessage56();
   10250:	0e 94 6d 80 	call	0x100da	; 0x100da <sendMessage56>
				iWait=0;iPos=0;
   10254:	10 92 9a 02 	sts	0x029A, r1
   10258:	10 92 9b 02 	sts	0x029B, r1
				TimSend=0;
   1025c:	10 92 7e 0c 	sts	0x0C7E, r1
				stLocalAccount=laWaitMessage57;
   10260:	83 e0       	ldi	r24, 0x03	; 3
   10262:	80 93 5b 01 	sts	0x015B, r24
   10266:	0c 94 54 89 	jmp	0x112a8	; 0x112a8 <FMenuLocalAccount+0x11c6>
		        break;
           case laWaitMessage57:
		        iLoop++;
   1026a:	80 91 89 02 	lds	r24, 0x0289
   1026e:	90 91 8a 02 	lds	r25, 0x028A
   10272:	01 96       	adiw	r24, 0x01	; 1
   10274:	90 93 8a 02 	sts	0x028A, r25
   10278:	80 93 89 02 	sts	0x0289, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   1027c:	68 e9       	ldi	r22, 0x98	; 152
   1027e:	7a e3       	ldi	r23, 0x3A	; 58
   10280:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
   10284:	89 2b       	or	r24, r25
   10286:	e1 f4       	brne	.+56     	; 0x102c0 <FMenuLocalAccount+0x1de>
				   if (iPos<5){
   10288:	60 91 9b 02 	lds	r22, 0x029B
   1028c:	65 30       	cpi	r22, 0x05	; 5
   1028e:	58 f4       	brcc	.+22     	; 0x102a6 <FMenuLocalAccount+0x1c4>
					   lcd_put(3,(8+iPos),'.');
   10290:	68 5f       	subi	r22, 0xF8	; 248
   10292:	83 e0       	ldi	r24, 0x03	; 3
   10294:	4e e2       	ldi	r20, 0x2E	; 46
   10296:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
				       iPos++;
   1029a:	80 91 9b 02 	lds	r24, 0x029B
   1029e:	8f 5f       	subi	r24, 0xFF	; 255
   102a0:	80 93 9b 02 	sts	0x029B, r24
   102a4:	0d c0       	rjmp	.+26     	; 0x102c0 <FMenuLocalAccount+0x1de>
					   }
				   else{
				       iPos=0;
   102a6:	10 92 9b 02 	sts	0x029B, r1
					   lcd_printf(3,(9+iPos),PSTR("       "));
   102aa:	83 e0       	ldi	r24, 0x03	; 3
   102ac:	69 e0       	ldi	r22, 0x09	; 9
   102ae:	48 ec       	ldi	r20, 0xC8	; 200
   102b0:	52 e2       	ldi	r21, 0x22	; 34
   102b2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   iWait++;
   102b6:	80 91 9a 02 	lds	r24, 0x029A
   102ba:	8f 5f       	subi	r24, 0xFF	; 255
   102bc:	80 93 9a 02 	sts	0x029A, r24
					   }
				}
				if (iWait>3){
   102c0:	80 91 9a 02 	lds	r24, 0x029A
   102c4:	84 30       	cpi	r24, 0x04	; 4
   102c6:	b0 f0       	brcs	.+44     	; 0x102f4 <FMenuLocalAccount+0x212>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   102c8:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   102ca:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   102cc:	82 e0       	ldi	r24, 0x02	; 2
   102ce:	80 93 be 01 	sts	0x01BE, r24
					   iWait++;
					   }
				}
				if (iWait>3){
				    system_beep(2);
					TimLocAcc=0;
   102d2:	10 92 bc 01 	sts	0x01BC, r1
				    lcd_printf(3,1,PSTR("Sending Failed      "));
   102d6:	83 e0       	ldi	r24, 0x03	; 3
   102d8:	61 e0       	ldi	r22, 0x01	; 1
   102da:	43 eb       	ldi	r20, 0xB3	; 179
   102dc:	52 e2       	ldi	r21, 0x22	; 34
   102de:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				    lcd_printf(4,1,PSTR("TCP/IP Error        "));
   102e2:	84 e0       	ldi	r24, 0x04	; 4
   102e4:	61 e0       	ldi	r22, 0x01	; 1
   102e6:	4e e9       	ldi	r20, 0x9E	; 158
   102e8:	52 e2       	ldi	r21, 0x22	; 34
   102ea:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				    stLocalAccount=laConTimout;
   102ee:	84 e0       	ldi	r24, 0x04	; 4
   102f0:	80 93 5b 01 	sts	0x015B, r24
				    }
                 
				if (IsMessage57==True){
   102f4:	80 91 a7 01 	lds	r24, 0x01A7
   102f8:	81 30       	cpi	r24, 0x01	; 1
   102fa:	09 f0       	breq	.+2      	; 0x102fe <FMenuLocalAccount+0x21c>
   102fc:	d5 c7       	rjmp	.+4010   	; 0x112a8 <FMenuLocalAccount+0x11c6>
				    IsMessage57=False;
   102fe:	10 92 a7 01 	sts	0x01A7, r1
				    stLocalAccount=laProcMessage57;
   10302:	85 e0       	ldi	r24, 0x05	; 5
   10304:	ae cf       	rjmp	.-164    	; 0x10262 <FMenuLocalAccount+0x180>
					}
		        break;
           case laConTimout:
		        //IsErrorTCPIP=True;
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
   10306:	80 91 bc 01 	lds	r24, 0x01BC
   1030a:	83 30       	cpi	r24, 0x03	; 3
   1030c:	08 f4       	brcc	.+2      	; 0x10310 <FMenuLocalAccount+0x22e>
   1030e:	cc c7       	rjmp	.+3992   	; 0x112a8 <FMenuLocalAccount+0x11c6>
   10310:	b9 c7       	rjmp	.+3954   	; 0x11284 <FMenuLocalAccount+0x11a2>
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
   10312:	83 e0       	ldi	r24, 0x03	; 3
   10314:	61 e0       	ldi	r22, 0x01	; 1
   10316:	49 e8       	ldi	r20, 0x89	; 137
   10318:	52 e2       	ldi	r21, 0x22	; 34
   1031a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				LocAccStatus=GetLocAccStatus(procMessage57());
   1031e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <procMessage57>


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
   10322:	81 30       	cpi	r24, 0x01	; 1
   10324:	29 f0       	breq	.+10     	; 0x10330 <FMenuLocalAccount+0x24e>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
   10326:	82 30       	cpi	r24, 0x02	; 2
   10328:	19 f0       	breq	.+6      	; 0x10330 <FMenuLocalAccount+0x24e>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
   1032a:	83 30       	cpi	r24, 0x03	; 3
   1032c:	09 f0       	breq	.+2      	; 0x10330 <FMenuLocalAccount+0x24e>
   1032e:	80 e0       	ldi	r24, 0x00	; 0
		        //IsErrorTCPIP=True;
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
				LocAccStatus=GetLocAccStatus(procMessage57());
   10330:	80 93 9c 02 	sts	0x029C, r24
				TimLocAcc=0;
   10334:	10 92 bc 01 	sts	0x01BC, r1
				stLocalAccount=laDispStatus;
   10338:	86 e0       	ldi	r24, 0x06	; 6
   1033a:	93 cf       	rjmp	.-218    	; 0x10262 <FMenuLocalAccount+0x180>
		        break;
           case laDispStatus://Display Status
		        if (LocAccStatus==LA_INVALID){
   1033c:	80 91 9c 02 	lds	r24, 0x029C
   10340:	81 30       	cpi	r24, 0x01	; 1
   10342:	29 f4       	brne	.+10     	; 0x1034e <FMenuLocalAccount+0x26c>
					lcd_printf(3,1,PSTR("Tidak Terdaftar     "));    
   10344:	83 e0       	ldi	r24, 0x03	; 3
   10346:	61 e0       	ldi	r22, 0x01	; 1
   10348:	44 e7       	ldi	r20, 0x74	; 116
   1034a:	52 e2       	ldi	r21, 0x22	; 34
   1034c:	0d c0       	rjmp	.+26     	; 0x10368 <FMenuLocalAccount+0x286>
					TimLocAcc=0;
				    stLocalAccount=laDelayExit;
				}
				else
                if (LocAccStatus==LA_VALID) {
   1034e:	82 30       	cpi	r24, 0x02	; 2
   10350:	31 f4       	brne	.+12     	; 0x1035e <FMenuLocalAccount+0x27c>
				    stLocalAccount=laDispValid; 
   10352:	87 e0       	ldi	r24, 0x07	; 7
   10354:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   10358:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
   1035c:	0c c0       	rjmp	.+24     	; 0x10376 <FMenuLocalAccount+0x294>
					}
				else
                if (LocAccStatus==LA_LIMITED){
   1035e:	83 30       	cpi	r24, 0x03	; 3
   10360:	51 f4       	brne	.+20     	; 0x10376 <FMenuLocalAccount+0x294>
					lcd_printf(3,1,PSTR("Kartu Terbatas      "));    
   10362:	61 e0       	ldi	r22, 0x01	; 1
   10364:	4f e5       	ldi	r20, 0x5F	; 95
   10366:	52 e2       	ldi	r21, 0x22	; 34
   10368:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					TimLocAcc=0;
   1036c:	10 92 bc 01 	sts	0x01BC, r1
				    stLocalAccount=laDelayExit;
   10370:	8f e1       	ldi	r24, 0x1F	; 31
   10372:	80 93 5b 01 	sts	0x015B, r24
				}
                if (TimLocAcc>5)stLocalAccount=laExitLocAcc;
   10376:	80 91 bc 01 	lds	r24, 0x01BC
   1037a:	86 30       	cpi	r24, 0x06	; 6
   1037c:	08 f4       	brcc	.+2      	; 0x10380 <FMenuLocalAccount+0x29e>
   1037e:	94 c7       	rjmp	.+3880   	; 0x112a8 <FMenuLocalAccount+0x11c6>
   10380:	81 c7       	rjmp	.+3842   	; 0x11284 <FMenuLocalAccount+0x11a2>
		        break;
           case laDispValid://Display VALID ID
		        lcd_clear();
   10382:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
   10386:	00 d0       	rcall	.+0      	; 0x10388 <FMenuLocalAccount+0x2a6>
   10388:	00 d0       	rcall	.+0      	; 0x1038a <FMenuLocalAccount+0x2a8>
   1038a:	00 d0       	rcall	.+0      	; 0x1038c <FMenuLocalAccount+0x2aa>
   1038c:	ed b7       	in	r30, 0x3d	; 61
   1038e:	fe b7       	in	r31, 0x3e	; 62
   10390:	31 96       	adiw	r30, 0x01	; 1
   10392:	85 e2       	ldi	r24, 0x25	; 37
   10394:	9c e0       	ldi	r25, 0x0C	; 12
   10396:	ad b7       	in	r26, 0x3d	; 61
   10398:	be b7       	in	r27, 0x3e	; 62
   1039a:	12 96       	adiw	r26, 0x02	; 2
   1039c:	9c 93       	st	X, r25
   1039e:	8e 93       	st	-X, r24
   103a0:	11 97       	sbiw	r26, 0x01	; 1
   103a2:	8c e5       	ldi	r24, 0x5C	; 92
   103a4:	92 e2       	ldi	r25, 0x22	; 34
   103a6:	93 83       	std	Z+3, r25	; 0x03
   103a8:	82 83       	std	Z+2, r24	; 0x02
   103aa:	0e ef       	ldi	r16, 0xFE	; 254
   103ac:	1b e0       	ldi	r17, 0x0B	; 11
   103ae:	15 83       	std	Z+5, r17	; 0x05
   103b0:	04 83       	std	Z+4, r16	; 0x04
   103b2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				FormatCurrency(strBalance);
   103b6:	ed b7       	in	r30, 0x3d	; 61
   103b8:	fe b7       	in	r31, 0x3e	; 62
   103ba:	36 96       	adiw	r30, 0x06	; 6
   103bc:	0f b6       	in	r0, 0x3f	; 63
   103be:	f8 94       	cli
   103c0:	fe bf       	out	0x3e, r31	; 62
   103c2:	0f be       	out	0x3f, r0	; 63
   103c4:	ed bf       	out	0x3d, r30	; 61
   103c6:	c8 01       	movw	r24, r16
   103c8:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
   103cc:	20 e0       	ldi	r18, 0x00	; 0
   103ce:	30 e0       	ldi	r19, 0x00	; 0


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
   103d0:	80 e2       	ldi	r24, 0x20	; 32
   103d2:	e8 2e       	mov	r14, r24
   103d4:	f1 2c       	mov	r15, r1
   103d6:	ec 0e       	add	r14, r28
   103d8:	fd 1e       	adc	r15, r29
   103da:	f7 01       	movw	r30, r14
   103dc:	e2 0f       	add	r30, r18
   103de:	f3 1f       	adc	r31, r19
   103e0:	d9 01       	movw	r26, r18
   103e2:	a6 5d       	subi	r26, 0xD6	; 214
   103e4:	bc 4f       	sbci	r27, 0xFC	; 252
   103e6:	8c 91       	ld	r24, X
   103e8:	80 83       	st	Z, r24
   103ea:	2f 5f       	subi	r18, 0xFF	; 255
   103ec:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
   103ee:	24 31       	cpi	r18, 0x14	; 20
   103f0:	31 05       	cpc	r19, r1
   103f2:	99 f7       	brne	.-26     	; 0x103da <FMenuLocalAccount+0x2f8>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
   103f4:	1c aa       	std	Y+52, r1	; 0x34
		        lcd_clear();
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
				FormatCurrency(strBalance);

		        StringCopy(strCardHolder,strName,20);  				                                                        
		        sprintf_P(lcdteks,PSTR("%s"),strCompName);               lcd_print(1,1,lcdteks);   //[CompName]
   103f6:	00 d0       	rcall	.+0      	; 0x103f8 <FMenuLocalAccount+0x316>
   103f8:	00 d0       	rcall	.+0      	; 0x103fa <FMenuLocalAccount+0x318>
   103fa:	00 d0       	rcall	.+0      	; 0x103fc <FMenuLocalAccount+0x31a>
   103fc:	ed b7       	in	r30, 0x3d	; 61
   103fe:	fe b7       	in	r31, 0x3e	; 62
   10400:	31 96       	adiw	r30, 0x01	; 1
   10402:	8e 01       	movw	r16, r28
   10404:	04 5f       	subi	r16, 0xF4	; 244
   10406:	1f 4f       	sbci	r17, 0xFF	; 255
   10408:	ad b7       	in	r26, 0x3d	; 61
   1040a:	be b7       	in	r27, 0x3e	; 62
   1040c:	12 96       	adiw	r26, 0x02	; 2
   1040e:	1c 93       	st	X, r17
   10410:	0e 93       	st	-X, r16
   10412:	11 97       	sbiw	r26, 0x01	; 1
   10414:	89 e5       	ldi	r24, 0x59	; 89
   10416:	92 e2       	ldi	r25, 0x22	; 34
   10418:	93 83       	std	Z+3, r25	; 0x03
   1041a:	82 83       	std	Z+2, r24	; 0x02
   1041c:	8f e7       	ldi	r24, 0x7F	; 127
   1041e:	97 e0       	ldi	r25, 0x07	; 7
   10420:	95 83       	std	Z+5, r25	; 0x05
   10422:	84 83       	std	Z+4, r24	; 0x04
   10424:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10428:	ed b7       	in	r30, 0x3d	; 61
   1042a:	fe b7       	in	r31, 0x3e	; 62
   1042c:	36 96       	adiw	r30, 0x06	; 6
   1042e:	0f b6       	in	r0, 0x3f	; 63
   10430:	f8 94       	cli
   10432:	fe bf       	out	0x3e, r31	; 62
   10434:	0f be       	out	0x3f, r0	; 63
   10436:	ed bf       	out	0x3d, r30	; 61
   10438:	81 e0       	ldi	r24, 0x01	; 1
   1043a:	61 e0       	ldi	r22, 0x01	; 1
   1043c:	a8 01       	movw	r20, r16
   1043e:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
                //sprintf(lcdteks,"%s %s",strCardID,strName);    lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
				sprintf_P(lcdteks,PSTR("%s"),strName);                   lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
   10442:	00 d0       	rcall	.+0      	; 0x10444 <FMenuLocalAccount+0x362>
   10444:	00 d0       	rcall	.+0      	; 0x10446 <FMenuLocalAccount+0x364>
   10446:	00 d0       	rcall	.+0      	; 0x10448 <FMenuLocalAccount+0x366>
   10448:	ed b7       	in	r30, 0x3d	; 61
   1044a:	fe b7       	in	r31, 0x3e	; 62
   1044c:	31 96       	adiw	r30, 0x01	; 1
   1044e:	ad b7       	in	r26, 0x3d	; 61
   10450:	be b7       	in	r27, 0x3e	; 62
   10452:	12 96       	adiw	r26, 0x02	; 2
   10454:	1c 93       	st	X, r17
   10456:	0e 93       	st	-X, r16
   10458:	11 97       	sbiw	r26, 0x01	; 1
   1045a:	86 e5       	ldi	r24, 0x56	; 86
   1045c:	92 e2       	ldi	r25, 0x22	; 34
   1045e:	93 83       	std	Z+3, r25	; 0x03
   10460:	82 83       	std	Z+2, r24	; 0x02
   10462:	f5 82       	std	Z+5, r15	; 0x05
   10464:	e4 82       	std	Z+4, r14	; 0x04
   10466:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   1046a:	ed b7       	in	r30, 0x3d	; 61
   1046c:	fe b7       	in	r31, 0x3e	; 62
   1046e:	36 96       	adiw	r30, 0x06	; 6
   10470:	0f b6       	in	r0, 0x3f	; 63
   10472:	f8 94       	cli
   10474:	fe bf       	out	0x3e, r31	; 62
   10476:	0f be       	out	0x3f, r0	; 63
   10478:	ed bf       	out	0x3d, r30	; 61
   1047a:	82 e0       	ldi	r24, 0x02	; 2
   1047c:	61 e0       	ldi	r22, 0x01	; 1
   1047e:	a8 01       	movw	r20, r16
   10480:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
				sprintf_P(lcdteks,PSTR("%s %s"),strLicPlate,strBalance); lcd_print(3,1,lcdteks);   //[LicPlate][Balance] 
   10484:	2d b7       	in	r18, 0x3d	; 61
   10486:	3e b7       	in	r19, 0x3e	; 62
   10488:	28 50       	subi	r18, 0x08	; 8
   1048a:	30 40       	sbci	r19, 0x00	; 0
   1048c:	0f b6       	in	r0, 0x3f	; 63
   1048e:	f8 94       	cli
   10490:	3e bf       	out	0x3e, r19	; 62
   10492:	0f be       	out	0x3f, r0	; 63
   10494:	2d bf       	out	0x3d, r18	; 61
   10496:	ed b7       	in	r30, 0x3d	; 61
   10498:	fe b7       	in	r31, 0x3e	; 62
   1049a:	31 96       	adiw	r30, 0x01	; 1
   1049c:	ad b7       	in	r26, 0x3d	; 61
   1049e:	be b7       	in	r27, 0x3e	; 62
   104a0:	12 96       	adiw	r26, 0x02	; 2
   104a2:	1c 93       	st	X, r17
   104a4:	0e 93       	st	-X, r16
   104a6:	11 97       	sbiw	r26, 0x01	; 1
   104a8:	80 e5       	ldi	r24, 0x50	; 80
   104aa:	92 e2       	ldi	r25, 0x22	; 34
   104ac:	93 83       	std	Z+3, r25	; 0x03
   104ae:	82 83       	std	Z+2, r24	; 0x02
   104b0:	80 e0       	ldi	r24, 0x00	; 0
   104b2:	99 e0       	ldi	r25, 0x09	; 9
   104b4:	95 83       	std	Z+5, r25	; 0x05
   104b6:	84 83       	std	Z+4, r24	; 0x04
   104b8:	8e ef       	ldi	r24, 0xFE	; 254
   104ba:	9b e0       	ldi	r25, 0x0B	; 11
   104bc:	97 83       	std	Z+7, r25	; 0x07
   104be:	86 83       	std	Z+6, r24	; 0x06
   104c0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   104c4:	ed b7       	in	r30, 0x3d	; 61
   104c6:	fe b7       	in	r31, 0x3e	; 62
   104c8:	38 96       	adiw	r30, 0x08	; 8
   104ca:	0f b6       	in	r0, 0x3f	; 63
   104cc:	f8 94       	cli
   104ce:	fe bf       	out	0x3e, r31	; 62
   104d0:	0f be       	out	0x3f, r0	; 63
   104d2:	ed bf       	out	0x3d, r30	; 61
   104d4:	83 e0       	ldi	r24, 0x03	; 3
   104d6:	61 e0       	ldi	r22, 0x01	; 1
   104d8:	a8 01       	movw	r20, r16
   104da:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
	            lcd_printf(4,1,PSTR("[*]Batal       [#]OK"));   //[*]Batal       [#]OK
   104de:	84 e0       	ldi	r24, 0x04	; 4
   104e0:	61 e0       	ldi	r22, 0x01	; 1
   104e2:	4b e3       	ldi	r20, 0x3B	; 59
   104e4:	52 e2       	ldi	r21, 0x22	; 34
   104e6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
                IsMenuFIPInit=True;
   104ea:	81 e0       	ldi	r24, 0x01	; 1
   104ec:	80 93 90 01 	sts	0x0190, r24
				stLocalAccount=laDispValidInput;
   104f0:	88 e0       	ldi	r24, 0x08	; 8
   104f2:	b7 ce       	rjmp	.-658    	; 0x10262 <FMenuLocalAccount+0x180>
		        break;
           case laDispValidInput:
                KeyPressed=_key_scan(1);
   104f4:	81 e0       	ldi	r24, 0x01	; 1
   104f6:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
				if (KeyPressed==_KEY_ENTER) stLocalAccount=laSelectFIP;
   104fa:	87 3b       	cpi	r24, 0xB7	; 183
   104fc:	09 f4       	brne	.+2      	; 0x10500 <FMenuLocalAccount+0x41e>
   104fe:	b3 c1       	rjmp	.+870    	; 0x10866 <FMenuLocalAccount+0x784>
				else
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laExitLocAcc;
   10500:	87 3e       	cpi	r24, 0xE7	; 231
   10502:	09 f0       	breq	.+2      	; 0x10506 <FMenuLocalAccount+0x424>
   10504:	d1 c6       	rjmp	.+3490   	; 0x112a8 <FMenuLocalAccount+0x11c6>
   10506:	be c6       	rjmp	.+3452   	; 0x11284 <FMenuLocalAccount+0x11a2>
		        break;
           case laSelectFIP:      
			    FIPResult=menu_FIP(&FIP_Used,strFIP);
   10508:	06 e9       	ldi	r16, 0x96	; 150
   1050a:	12 e0       	ldi	r17, 0x02	; 2
   1050c:	8d e8       	ldi	r24, 0x8D	; 141
   1050e:	92 e0       	ldi	r25, 0x02	; 2
   10510:	b8 01       	movw	r22, r16
   10512:	0e 94 bc 55 	call	0xab78	; 0xab78 <menu_FIP>

			    if ((FIPResult==FIP_DONE)&&(FIP_Used>0)){
   10516:	88 23       	and	r24, r24
   10518:	09 f0       	breq	.+2      	; 0x1051c <FMenuLocalAccount+0x43a>
   1051a:	4e c0       	rjmp	.+156    	; 0x105b8 <FMenuLocalAccount+0x4d6>
   1051c:	20 91 8d 02 	lds	r18, 0x028D
   10520:	22 23       	and	r18, r18
   10522:	09 f4       	brne	.+2      	; 0x10526 <FMenuLocalAccount+0x444>
   10524:	c1 c6       	rjmp	.+3458   	; 0x112a8 <FMenuLocalAccount+0x11c6>
                    sprintf_P(strFIP,PSTR("%.2d"),FIP_Used);
   10526:	00 d0       	rcall	.+0      	; 0x10528 <FMenuLocalAccount+0x446>
   10528:	00 d0       	rcall	.+0      	; 0x1052a <FMenuLocalAccount+0x448>
   1052a:	00 d0       	rcall	.+0      	; 0x1052c <FMenuLocalAccount+0x44a>
   1052c:	ed b7       	in	r30, 0x3d	; 61
   1052e:	fe b7       	in	r31, 0x3e	; 62
   10530:	31 96       	adiw	r30, 0x01	; 1
   10532:	ad b7       	in	r26, 0x3d	; 61
   10534:	be b7       	in	r27, 0x3e	; 62
   10536:	12 96       	adiw	r26, 0x02	; 2
   10538:	1c 93       	st	X, r17
   1053a:	0e 93       	st	-X, r16
   1053c:	11 97       	sbiw	r26, 0x01	; 1
   1053e:	86 e3       	ldi	r24, 0x36	; 54
   10540:	92 e2       	ldi	r25, 0x22	; 34
   10542:	93 83       	std	Z+3, r25	; 0x03
   10544:	82 83       	std	Z+2, r24	; 0x02
   10546:	24 83       	std	Z+4, r18	; 0x04
   10548:	15 82       	std	Z+5, r1	; 0x05
   1054a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
					sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
   1054e:	ed b7       	in	r30, 0x3d	; 61
   10550:	fe b7       	in	r31, 0x3e	; 62
   10552:	31 96       	adiw	r30, 0x01	; 1
   10554:	8f eb       	ldi	r24, 0xBF	; 191
   10556:	97 e0       	ldi	r25, 0x07	; 7
   10558:	ad b7       	in	r26, 0x3d	; 61
   1055a:	be b7       	in	r27, 0x3e	; 62
   1055c:	12 96       	adiw	r26, 0x02	; 2
   1055e:	9c 93       	st	X, r25
   10560:	8e 93       	st	-X, r24
   10562:	11 97       	sbiw	r26, 0x01	; 1
   10564:	81 e3       	ldi	r24, 0x31	; 49
   10566:	92 e2       	ldi	r25, 0x22	; 34
   10568:	93 83       	std	Z+3, r25	; 0x03
   1056a:	82 83       	std	Z+2, r24	; 0x02
   1056c:	80 91 8d 02 	lds	r24, 0x028D
   10570:	84 83       	std	Z+4, r24	; 0x04
   10572:	15 82       	std	Z+5, r1	; 0x05
   10574:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
                    //Load Product Info
					if (GetFIPAddr(FIP_Used)>0) 
   10578:	ed b7       	in	r30, 0x3d	; 61
   1057a:	fe b7       	in	r31, 0x3e	; 62
   1057c:	36 96       	adiw	r30, 0x06	; 6
   1057e:	0f b6       	in	r0, 0x3f	; 63
   10580:	f8 94       	cli
   10582:	fe bf       	out	0x3e, r31	; 62
   10584:	0f be       	out	0x3f, r0	; 63
   10586:	ed bf       	out	0x3d, r30	; 61
   10588:	80 91 8d 02 	lds	r24, 0x028D
   1058c:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
   10590:	88 23       	and	r24, r24
   10592:	81 f0       	breq	.+32     	; 0x105b4 <FMenuLocalAccount+0x4d2>
					    eeprom_read_block((void*) &ProductID, (const void*) &DefNozzleMap[GetFIPAddr(FIP_Used)-1], 6);
   10594:	80 91 8d 02 	lds	r24, 0x028D
   10598:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
   1059c:	96 e0       	ldi	r25, 0x06	; 6
   1059e:	89 9f       	mul	r24, r25
   105a0:	b0 01       	movw	r22, r0
   105a2:	11 24       	eor	r1, r1
   105a4:	6c 5a       	subi	r22, 0xAC	; 172
   105a6:	7f 4f       	sbci	r23, 0xFF	; 255
   105a8:	8e e8       	ldi	r24, 0x8E	; 142
   105aa:	92 e0       	ldi	r25, 0x02	; 2
   105ac:	46 e0       	ldi	r20, 0x06	; 6
   105ae:	50 e0       	ldi	r21, 0x00	; 0
   105b0:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
				    stLocalAccount=laSelectProduct;
   105b4:	8b e0       	ldi	r24, 0x0B	; 11
   105b6:	55 ce       	rjmp	.-854    	; 0x10262 <FMenuLocalAccount+0x180>
				}
			    else if (FIPResult==FIP_CANCEL){
   105b8:	82 30       	cpi	r24, 0x02	; 2
   105ba:	09 f0       	breq	.+2      	; 0x105be <FMenuLocalAccount+0x4dc>
   105bc:	75 c6       	rjmp	.+3306   	; 0x112a8 <FMenuLocalAccount+0x11c6>
				    stLocalAccount=laDispValid;
   105be:	87 e0       	ldi	r24, 0x07	; 7
   105c0:	50 ce       	rjmp	.-864    	; 0x10262 <FMenuLocalAccount+0x180>
		        break; 
           case laSelectFIPInput:

		        break;
           case laSelectProduct://NozzleID
				lcd_clear();
   105c2:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("Pompa-%s"),strFIP);lcd_print(1,1,lcdteks);
   105c6:	00 d0       	rcall	.+0      	; 0x105c8 <FMenuLocalAccount+0x4e6>
   105c8:	00 d0       	rcall	.+0      	; 0x105ca <FMenuLocalAccount+0x4e8>
   105ca:	00 d0       	rcall	.+0      	; 0x105cc <FMenuLocalAccount+0x4ea>
   105cc:	ed b7       	in	r30, 0x3d	; 61
   105ce:	fe b7       	in	r31, 0x3e	; 62
   105d0:	31 96       	adiw	r30, 0x01	; 1
   105d2:	8e 01       	movw	r16, r28
   105d4:	04 5f       	subi	r16, 0xF4	; 244
   105d6:	1f 4f       	sbci	r17, 0xFF	; 255
   105d8:	ad b7       	in	r26, 0x3d	; 61
   105da:	be b7       	in	r27, 0x3e	; 62
   105dc:	12 96       	adiw	r26, 0x02	; 2
   105de:	1c 93       	st	X, r17
   105e0:	0e 93       	st	-X, r16
   105e2:	11 97       	sbiw	r26, 0x01	; 1
   105e4:	88 e2       	ldi	r24, 0x28	; 40
   105e6:	92 e2       	ldi	r25, 0x22	; 34
   105e8:	93 83       	std	Z+3, r25	; 0x03
   105ea:	82 83       	std	Z+2, r24	; 0x02
   105ec:	86 e9       	ldi	r24, 0x96	; 150
   105ee:	92 e0       	ldi	r25, 0x02	; 2
   105f0:	95 83       	std	Z+5, r25	; 0x05
   105f2:	84 83       	std	Z+4, r24	; 0x04
   105f4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   105f8:	ed b7       	in	r30, 0x3d	; 61
   105fa:	fe b7       	in	r31, 0x3e	; 62
   105fc:	36 96       	adiw	r30, 0x06	; 6
   105fe:	0f b6       	in	r0, 0x3f	; 63
   10600:	f8 94       	cli
   10602:	fe bf       	out	0x3e, r31	; 62
   10604:	0f be       	out	0x3f, r0	; 63
   10606:	ed bf       	out	0x3d, r30	; 61
   10608:	81 e0       	ldi	r24, 0x01	; 1
   1060a:	61 e0       	ldi	r22, 0x01	; 1
   1060c:	a8 01       	movw	r20, r16
   1060e:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
				//Not MPD->Single Product
				if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&
   10612:	90 91 8e 02 	lds	r25, 0x028E
   10616:	89 2f       	mov	r24, r25
   10618:	81 50       	subi	r24, 0x01	; 1
   1061a:	86 30       	cpi	r24, 0x06	; 6
   1061c:	08 f0       	brcs	.+2      	; 0x10620 <FMenuLocalAccount+0x53e>
   1061e:	4b c0       	rjmp	.+150    	; 0x106b6 <FMenuLocalAccount+0x5d4>
   10620:	80 91 8f 02 	lds	r24, 0x028F
   10624:	88 23       	and	r24, r24
   10626:	09 f0       	breq	.+2      	; 0x1062a <FMenuLocalAccount+0x548>
   10628:	46 c0       	rjmp	.+140    	; 0x106b6 <FMenuLocalAccount+0x5d4>
   1062a:	80 91 90 02 	lds	r24, 0x0290
   1062e:	88 23       	and	r24, r24
   10630:	09 f0       	breq	.+2      	; 0x10634 <FMenuLocalAccount+0x552>
   10632:	41 c0       	rjmp	.+130    	; 0x106b6 <FMenuLocalAccount+0x5d4>
   10634:	80 91 91 02 	lds	r24, 0x0291
   10638:	88 23       	and	r24, r24
   1063a:	e9 f5       	brne	.+122    	; 0x106b6 <FMenuLocalAccount+0x5d4>
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
   1063c:	90 93 8c 02 	sts	0x028C, r25
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   10640:	6d e0       	ldi	r22, 0x0D	; 13
   10642:	96 9f       	mul	r25, r22
   10644:	b0 01       	movw	r22, r0
   10646:	11 24       	eor	r1, r1
   10648:	6d 54       	subi	r22, 0x4D	; 77
   1064a:	7f 4f       	sbci	r23, 0xFF	; 255
   1064c:	8e 01       	movw	r16, r28
   1064e:	0f 5f       	subi	r16, 0xFF	; 255
   10650:	1f 4f       	sbci	r17, 0xFF	; 255
   10652:	c8 01       	movw	r24, r16
   10654:	4a e0       	ldi	r20, 0x0A	; 10
   10656:	50 e0       	ldi	r21, 0x00	; 0
   10658:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1065c:	ce 01       	movw	r24, r28
   1065e:	09 96       	adiw	r24, 0x09	; 9
	    Dest[i]=Source[IdxSource+i];
   10660:	0f 5f       	subi	r16, 0xFF	; 255
   10662:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   10664:	08 17       	cp	r16, r24
   10666:	19 07       	cpc	r17, r25
   10668:	d9 f7       	brne	.-10     	; 0x10660 <FMenuLocalAccount+0x57e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   1066a:	19 86       	std	Y+9, r1	; 0x09
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
					 StrPosCopy(ProductName,ProductName,0,8);
					 sprintf_P(strProduct,PSTR("%s"),ProductName);
   1066c:	00 d0       	rcall	.+0      	; 0x1066e <FMenuLocalAccount+0x58c>
   1066e:	00 d0       	rcall	.+0      	; 0x10670 <FMenuLocalAccount+0x58e>
   10670:	00 d0       	rcall	.+0      	; 0x10672 <FMenuLocalAccount+0x590>
   10672:	ed b7       	in	r30, 0x3d	; 61
   10674:	fe b7       	in	r31, 0x3e	; 62
   10676:	31 96       	adiw	r30, 0x01	; 1
   10678:	84 e6       	ldi	r24, 0x64	; 100
   1067a:	97 e0       	ldi	r25, 0x07	; 7
   1067c:	ad b7       	in	r26, 0x3d	; 61
   1067e:	be b7       	in	r27, 0x3e	; 62
   10680:	12 96       	adiw	r26, 0x02	; 2
   10682:	9c 93       	st	X, r25
   10684:	8e 93       	st	-X, r24
   10686:	11 97       	sbiw	r26, 0x01	; 1
   10688:	85 e2       	ldi	r24, 0x25	; 37
   1068a:	92 e2       	ldi	r25, 0x22	; 34
   1068c:	93 83       	std	Z+3, r25	; 0x03
   1068e:	82 83       	std	Z+2, r24	; 0x02
   10690:	ce 01       	movw	r24, r28
   10692:	01 96       	adiw	r24, 0x01	; 1
   10694:	95 83       	std	Z+5, r25	; 0x05
   10696:	84 83       	std	Z+4, r24	; 0x04
   10698:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
                     stLocalAccount=laSelectBalanceType;
   1069c:	8d e0       	ldi	r24, 0x0D	; 13
   1069e:	80 93 5b 01 	sts	0x015B, r24
   106a2:	80 e0       	ldi	r24, 0x00	; 0
   106a4:	ed b7       	in	r30, 0x3d	; 61
   106a6:	fe b7       	in	r31, 0x3e	; 62
   106a8:	36 96       	adiw	r30, 0x06	; 6
   106aa:	0f b6       	in	r0, 0x3f	; 63
   106ac:	f8 94       	cli
   106ae:	fe bf       	out	0x3e, r31	; 62
   106b0:	0f be       	out	0x3f, r0	; 63
   106b2:	ed bf       	out	0x3d, r30	; 61
   106b4:	fa c5       	rjmp	.+3060   	; 0x112aa <FMenuLocalAccount+0x11c8>
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   106b6:	10 92 94 02 	sts	0x0294, r1
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   106ba:	0c e0       	ldi	r16, 0x0C	; 12
   106bc:	e0 2e       	mov	r14, r16
   106be:	f1 2c       	mov	r15, r1
   106c0:	ec 0e       	add	r14, r28
   106c2:	fd 1e       	adc	r15, r29
   106c4:	19 e1       	ldi	r17, 0x19	; 25
   106c6:	81 2e       	mov	r8, r17
   106c8:	12 e2       	ldi	r17, 0x22	; 34
   106ca:	91 2e       	mov	r9, r17
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   106cc:	bd e0       	ldi	r27, 0x0D	; 13
   106ce:	6b 2e       	mov	r6, r27
   106d0:	8e 01       	movw	r16, r28
   106d2:	0f 5f       	subi	r16, 0xFF	; 255
   106d4:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   106d6:	a9 e0       	ldi	r26, 0x09	; 9
   106d8:	aa 2e       	mov	r10, r26
   106da:	b1 2c       	mov	r11, r1
   106dc:	ac 0e       	add	r10, r28
   106de:	bd 1e       	adc	r11, r29
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   106e0:	ff e1       	ldi	r31, 0x1F	; 31
   106e2:	cf 2e       	mov	r12, r31
   106e4:	f2 e2       	ldi	r31, 0x22	; 34
   106e6:	df 2e       	mov	r13, r31
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   106e8:	eb e0       	ldi	r30, 0x0B	; 11
   106ea:	7e 2e       	mov	r7, r30
   106ec:	65 c0       	rjmp	.+202    	; 0x107b8 <FMenuLocalAccount+0x6d6>
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
   106ee:	f0 e0       	ldi	r31, 0x00	; 0
   106f0:	e2 57       	subi	r30, 0x72	; 114
   106f2:	fd 4f       	sbci	r31, 0xFD	; 253
   106f4:	e0 81       	ld	r30, Z
   106f6:	e0 93 8c 02 	sts	0x028C, r30
					if ((ProdId>=1)&&(ProdId<=6)){
   106fa:	8e 2f       	mov	r24, r30
   106fc:	81 50       	subi	r24, 0x01	; 1
   106fe:	86 30       	cpi	r24, 0x06	; 6
   10700:	b8 f5       	brcc	.+110    	; 0x10770 <FMenuLocalAccount+0x68e>
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   10702:	e6 9d       	mul	r30, r6
   10704:	b0 01       	movw	r22, r0
   10706:	11 24       	eor	r1, r1
   10708:	6d 54       	subi	r22, 0x4D	; 77
   1070a:	7f 4f       	sbci	r23, 0xFF	; 255
   1070c:	c8 01       	movw	r24, r16
   1070e:	4a e0       	ldi	r20, 0x0A	; 10
   10710:	50 e0       	ldi	r21, 0x00	; 0
   10712:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
   10716:	c8 01       	movw	r24, r16
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   10718:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1071a:	8a 15       	cp	r24, r10
   1071c:	9b 05       	cpc	r25, r11
   1071e:	e1 f7       	brne	.-8      	; 0x10718 <FMenuLocalAccount+0x636>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   10720:	19 86       	std	Y+9, r1	; 0x09
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   10722:	2d b7       	in	r18, 0x3d	; 61
   10724:	3e b7       	in	r19, 0x3e	; 62
   10726:	28 50       	subi	r18, 0x08	; 8
   10728:	30 40       	sbci	r19, 0x00	; 0
   1072a:	0f b6       	in	r0, 0x3f	; 63
   1072c:	f8 94       	cli
   1072e:	3e bf       	out	0x3e, r19	; 62
   10730:	0f be       	out	0x3f, r0	; 63
   10732:	2d bf       	out	0x3d, r18	; 61
   10734:	ed b7       	in	r30, 0x3d	; 61
   10736:	fe b7       	in	r31, 0x3e	; 62
   10738:	31 96       	adiw	r30, 0x01	; 1
   1073a:	ad b7       	in	r26, 0x3d	; 61
   1073c:	be b7       	in	r27, 0x3e	; 62
   1073e:	12 96       	adiw	r26, 0x02	; 2
   10740:	fc 92       	st	X, r15
   10742:	ee 92       	st	-X, r14
   10744:	11 97       	sbiw	r26, 0x01	; 1
   10746:	d3 82       	std	Z+3, r13	; 0x03
   10748:	c2 82       	std	Z+2, r12	; 0x02
   1074a:	80 91 94 02 	lds	r24, 0x0294
   1074e:	90 e0       	ldi	r25, 0x00	; 0
   10750:	01 96       	adiw	r24, 0x01	; 1
   10752:	95 83       	std	Z+5, r25	; 0x05
   10754:	84 83       	std	Z+4, r24	; 0x04
   10756:	17 83       	std	Z+7, r17	; 0x07
   10758:	06 83       	std	Z+6, r16	; 0x06
   1075a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   1075e:	ed b7       	in	r30, 0x3d	; 61
   10760:	fe b7       	in	r31, 0x3e	; 62
   10762:	38 96       	adiw	r30, 0x08	; 8
   10764:	0f b6       	in	r0, 0x3f	; 63
   10766:	f8 94       	cli
   10768:	fe bf       	out	0x3e, r31	; 62
   1076a:	0f be       	out	0x3f, r0	; 63
   1076c:	ed bf       	out	0x3d, r30	; 61
   1076e:	12 c0       	rjmp	.+36     	; 0x10794 <FMenuLocalAccount+0x6b2>
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   10770:	00 d0       	rcall	.+0      	; 0x10772 <FMenuLocalAccount+0x690>
   10772:	00 d0       	rcall	.+0      	; 0x10774 <FMenuLocalAccount+0x692>
   10774:	ad b7       	in	r26, 0x3d	; 61
   10776:	be b7       	in	r27, 0x3e	; 62
   10778:	12 96       	adiw	r26, 0x02	; 2
   1077a:	fc 92       	st	X, r15
   1077c:	ee 92       	st	-X, r14
   1077e:	11 97       	sbiw	r26, 0x01	; 1
   10780:	14 96       	adiw	r26, 0x04	; 4
   10782:	9c 92       	st	X, r9
   10784:	8e 92       	st	-X, r8
   10786:	13 97       	sbiw	r26, 0x03	; 3
   10788:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   1078c:	0f 90       	pop	r0
   1078e:	0f 90       	pop	r0
   10790:	0f 90       	pop	r0
   10792:	0f 90       	pop	r0
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   10794:	80 91 94 02 	lds	r24, 0x0294
   10798:	68 2f       	mov	r22, r24
   1079a:	66 95       	lsr	r22
   1079c:	67 9d       	mul	r22, r7
   1079e:	b0 01       	movw	r22, r0
   107a0:	11 24       	eor	r1, r1
   107a2:	6f 5f       	subi	r22, 0xFF	; 255
   107a4:	81 70       	andi	r24, 0x01	; 1
   107a6:	8e 5f       	subi	r24, 0xFE	; 254
   107a8:	a7 01       	movw	r20, r14
   107aa:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   107ae:	80 91 94 02 	lds	r24, 0x0294
   107b2:	8f 5f       	subi	r24, 0xFF	; 255
   107b4:	80 93 94 02 	sts	0x0294, r24
   107b8:	e0 91 94 02 	lds	r30, 0x0294
   107bc:	e4 30       	cpi	r30, 0x04	; 4
   107be:	08 f4       	brcc	.+2      	; 0x107c2 <FMenuLocalAccount+0x6e0>
   107c0:	96 cf       	rjmp	.-212    	; 0x106ee <FMenuLocalAccount+0x60c>
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
				}
	            lcd_printf(4,1,PSTR("[*]Back             "));   //"[*]Back             "				
   107c2:	84 e0       	ldi	r24, 0x04	; 4
   107c4:	61 e0       	ldi	r22, 0x01	; 1
   107c6:	44 e0       	ldi	r20, 0x04	; 4
   107c8:	52 e2       	ldi	r21, 0x22	; 34
   107ca:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				stLocalAccount=laSelectProductInput;
   107ce:	8c e0       	ldi	r24, 0x0C	; 12
   107d0:	48 cd       	rjmp	.-1392   	; 0x10262 <FMenuLocalAccount+0x180>
				}
		        break; 
           case laSelectProductInput:
				KeyPressed=_key_scan(1);
   107d2:	81 e0       	ldi	r24, 0x01	; 1
   107d4:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   107d8:	e8 2e       	mov	r14, r24
			    KeyChar=_key_btn(KeyPressed);
   107da:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='4')){
   107de:	81 53       	subi	r24, 0x31	; 49
   107e0:	84 30       	cpi	r24, 0x04	; 4
   107e2:	e8 f5       	brcc	.+122    	; 0x1085e <FMenuLocalAccount+0x77c>
				    iNozzle=KeyChar-'1';
   107e4:	80 93 94 02 	sts	0x0294, r24
				    eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProductID[iNozzle]-1],10);
   107e8:	e8 2f       	mov	r30, r24
   107ea:	f0 e0       	ldi	r31, 0x00	; 0
   107ec:	e2 57       	subi	r30, 0x72	; 114
   107ee:	fd 4f       	sbci	r31, 0xFD	; 253
   107f0:	60 81       	ld	r22, Z
   107f2:	7d e0       	ldi	r23, 0x0D	; 13
   107f4:	f7 2e       	mov	r15, r23
   107f6:	6f 9d       	mul	r22, r15
   107f8:	b0 01       	movw	r22, r0
   107fa:	11 24       	eor	r1, r1
   107fc:	6d 54       	subi	r22, 0x4D	; 77
   107fe:	7f 4f       	sbci	r23, 0xFF	; 255
   10800:	8e 01       	movw	r16, r28
   10802:	0f 5f       	subi	r16, 0xFF	; 255
   10804:	1f 4f       	sbci	r17, 0xFF	; 255
   10806:	c8 01       	movw	r24, r16
   10808:	4a e0       	ldi	r20, 0x0A	; 10
   1080a:	50 e0       	ldi	r21, 0x00	; 0
   1080c:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
					sprintf_P(strProduct,PSTR("%s"),ProductName);
   10810:	00 d0       	rcall	.+0      	; 0x10812 <FMenuLocalAccount+0x730>
   10812:	00 d0       	rcall	.+0      	; 0x10814 <FMenuLocalAccount+0x732>
   10814:	00 d0       	rcall	.+0      	; 0x10816 <FMenuLocalAccount+0x734>
   10816:	ed b7       	in	r30, 0x3d	; 61
   10818:	fe b7       	in	r31, 0x3e	; 62
   1081a:	31 96       	adiw	r30, 0x01	; 1
   1081c:	84 e6       	ldi	r24, 0x64	; 100
   1081e:	97 e0       	ldi	r25, 0x07	; 7
   10820:	ad b7       	in	r26, 0x3d	; 61
   10822:	be b7       	in	r27, 0x3e	; 62
   10824:	12 96       	adiw	r26, 0x02	; 2
   10826:	9c 93       	st	X, r25
   10828:	8e 93       	st	-X, r24
   1082a:	11 97       	sbiw	r26, 0x01	; 1
   1082c:	81 e0       	ldi	r24, 0x01	; 1
   1082e:	92 e2       	ldi	r25, 0x22	; 34
   10830:	93 83       	std	Z+3, r25	; 0x03
   10832:	82 83       	std	Z+2, r24	; 0x02
   10834:	15 83       	std	Z+5, r17	; 0x05
   10836:	04 83       	std	Z+4, r16	; 0x04
   10838:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
					NozzleID=iNozzle+1;
   1083c:	80 91 94 02 	lds	r24, 0x0294
   10840:	8f 5f       	subi	r24, 0xFF	; 255
   10842:	80 93 73 07 	sts	0x0773, r24
                    stLocalAccount=laSelectBalanceType;
   10846:	f0 92 5b 01 	sts	0x015B, r15
					lcd_clear();
   1084a:	ed b7       	in	r30, 0x3d	; 61
   1084c:	fe b7       	in	r31, 0x3e	; 62
   1084e:	36 96       	adiw	r30, 0x06	; 6
   10850:	0f b6       	in	r0, 0x3f	; 63
   10852:	f8 94       	cli
   10854:	fe bf       	out	0x3e, r31	; 62
   10856:	0f be       	out	0x3f, r0	; 63
   10858:	ed bf       	out	0x3d, r30	; 61
   1085a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
					}                
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laSelectFIP;//Back To Pump Selection
   1085e:	f7 ee       	ldi	r31, 0xE7	; 231
   10860:	ef 16       	cp	r14, r31
   10862:	09 f0       	breq	.+2      	; 0x10866 <FMenuLocalAccount+0x784>
   10864:	21 c5       	rjmp	.+2626   	; 0x112a8 <FMenuLocalAccount+0x11c6>
   10866:	89 e0       	ldi	r24, 0x09	; 9
   10868:	fc cc       	rjmp	.-1544   	; 0x10262 <FMenuLocalAccount+0x180>
		        break;
           case laSelectBalanceType:
		        lcd_clear();
   1086a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   1086e:	2d b7       	in	r18, 0x3d	; 61
   10870:	3e b7       	in	r19, 0x3e	; 62
   10872:	28 50       	subi	r18, 0x08	; 8
   10874:	30 40       	sbci	r19, 0x00	; 0
   10876:	0f b6       	in	r0, 0x3f	; 63
   10878:	f8 94       	cli
   1087a:	3e bf       	out	0x3e, r19	; 62
   1087c:	0f be       	out	0x3f, r0	; 63
   1087e:	2d bf       	out	0x3d, r18	; 61
   10880:	ed b7       	in	r30, 0x3d	; 61
   10882:	fe b7       	in	r31, 0x3e	; 62
   10884:	31 96       	adiw	r30, 0x01	; 1
   10886:	8e 01       	movw	r16, r28
   10888:	04 5f       	subi	r16, 0xF4	; 244
   1088a:	1f 4f       	sbci	r17, 0xFF	; 255
   1088c:	ad b7       	in	r26, 0x3d	; 61
   1088e:	be b7       	in	r27, 0x3e	; 62
   10890:	12 96       	adiw	r26, 0x02	; 2
   10892:	1c 93       	st	X, r17
   10894:	0e 93       	st	-X, r16
   10896:	11 97       	sbiw	r26, 0x01	; 1
   10898:	89 ef       	ldi	r24, 0xF9	; 249
   1089a:	91 e2       	ldi	r25, 0x21	; 33
   1089c:	93 83       	std	Z+3, r25	; 0x03
   1089e:	82 83       	std	Z+2, r24	; 0x02
   108a0:	86 e9       	ldi	r24, 0x96	; 150
   108a2:	92 e0       	ldi	r25, 0x02	; 2
   108a4:	95 83       	std	Z+5, r25	; 0x05
   108a6:	84 83       	std	Z+4, r24	; 0x04
   108a8:	84 e6       	ldi	r24, 0x64	; 100
   108aa:	97 e0       	ldi	r25, 0x07	; 7
   108ac:	97 83       	std	Z+7, r25	; 0x07
   108ae:	86 83       	std	Z+6, r24	; 0x06
   108b0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				 lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   108b4:	ed b7       	in	r30, 0x3d	; 61
   108b6:	fe b7       	in	r31, 0x3e	; 62
   108b8:	38 96       	adiw	r30, 0x08	; 8
   108ba:	0f b6       	in	r0, 0x3f	; 63
   108bc:	f8 94       	cli
   108be:	fe bf       	out	0x3e, r31	; 62
   108c0:	0f be       	out	0x3f, r0	; 63
   108c2:	ed bf       	out	0x3d, r30	; 61
   108c4:	81 e0       	ldi	r24, 0x01	; 1
   108c6:	61 e0       	ldi	r22, 0x01	; 1
   108c8:	a8 01       	movw	r20, r16
   108ca:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		        lcd_printf(2,1,PSTR("[1]Volume           "));   //"[1]Premium          "                                                                      
   108ce:	82 e0       	ldi	r24, 0x02	; 2
   108d0:	61 e0       	ldi	r22, 0x01	; 1
   108d2:	44 ee       	ldi	r20, 0xE4	; 228
   108d4:	51 e2       	ldi	r21, 0x21	; 33
   108d6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				lcd_printf(3,1,PSTR("[2]Amount           "));   //"[2]Pertamax         "
   108da:	83 e0       	ldi	r24, 0x03	; 3
   108dc:	61 e0       	ldi	r22, 0x01	; 1
   108de:	4f ec       	ldi	r20, 0xCF	; 207
   108e0:	51 e2       	ldi	r21, 0x21	; 33
   108e2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
   108e6:	84 e0       	ldi	r24, 0x04	; 4
   108e8:	61 e0       	ldi	r22, 0x01	; 1
   108ea:	4a eb       	ldi	r20, 0xBA	; 186
   108ec:	51 e2       	ldi	r21, 0x21	; 33
   108ee:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	            //lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
                stLocalAccount=laSelectBalanceTypeInput;   
   108f2:	8e e0       	ldi	r24, 0x0E	; 14
   108f4:	b6 cc       	rjmp	.-1684   	; 0x10262 <FMenuLocalAccount+0x180>
		        break;
           case laSelectBalanceTypeInput:
				KeyPressed=_key_scan(1);
   108f6:	81 e0       	ldi	r24, 0x01	; 1
   108f8:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   108fc:	18 2f       	mov	r17, r24
			    KeyChar=_key_btn(KeyPressed);
   108fe:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
   10902:	98 2f       	mov	r25, r24
				if ((KeyChar>='1')&&(KeyChar<='2')){
   10904:	81 53       	subi	r24, 0x31	; 49
   10906:	82 30       	cpi	r24, 0x02	; 2
   10908:	80 f5       	brcc	.+96     	; 0x1096a <FMenuLocalAccount+0x888>
                    if(KeyChar=='1'){
   1090a:	91 33       	cpi	r25, 0x31	; 49
   1090c:	a1 f4       	brne	.+40     	; 0x10936 <FMenuLocalAccount+0x854>
					   BalanceType=1;
   1090e:	81 e0       	ldi	r24, 0x01	; 1
   10910:	80 93 99 02 	sts	0x0299, r24
					   sprintf_P(strBalanceType,PSTR("V"));
   10914:	00 d0       	rcall	.+0      	; 0x10916 <FMenuLocalAccount+0x834>
   10916:	00 d0       	rcall	.+0      	; 0x10918 <FMenuLocalAccount+0x836>
   10918:	89 ea       	ldi	r24, 0xA9	; 169
   1091a:	93 e0       	ldi	r25, 0x03	; 3
   1091c:	ad b7       	in	r26, 0x3d	; 61
   1091e:	be b7       	in	r27, 0x3e	; 62
   10920:	12 96       	adiw	r26, 0x02	; 2
   10922:	9c 93       	st	X, r25
   10924:	8e 93       	st	-X, r24
   10926:	11 97       	sbiw	r26, 0x01	; 1
   10928:	88 eb       	ldi	r24, 0xB8	; 184
   1092a:	91 e2       	ldi	r25, 0x21	; 33
   1092c:	14 96       	adiw	r26, 0x04	; 4
   1092e:	9c 93       	st	X, r25
   10930:	8e 93       	st	-X, r24
   10932:	13 97       	sbiw	r26, 0x03	; 3
   10934:	11 c0       	rjmp	.+34     	; 0x10958 <FMenuLocalAccount+0x876>
					   }
					else
                    if(KeyChar=='2'){
   10936:	92 33       	cpi	r25, 0x32	; 50
   10938:	a9 f4       	brne	.+42     	; 0x10964 <FMenuLocalAccount+0x882>
					   BalanceType=2;
   1093a:	82 e0       	ldi	r24, 0x02	; 2
   1093c:	80 93 99 02 	sts	0x0299, r24
                       sprintf_P(strBalanceType,PSTR("A"));
   10940:	00 d0       	rcall	.+0      	; 0x10942 <FMenuLocalAccount+0x860>
   10942:	00 d0       	rcall	.+0      	; 0x10944 <FMenuLocalAccount+0x862>
   10944:	89 ea       	ldi	r24, 0xA9	; 169
   10946:	93 e0       	ldi	r25, 0x03	; 3
   10948:	ed b7       	in	r30, 0x3d	; 61
   1094a:	fe b7       	in	r31, 0x3e	; 62
   1094c:	92 83       	std	Z+2, r25	; 0x02
   1094e:	81 83       	std	Z+1, r24	; 0x01
   10950:	86 eb       	ldi	r24, 0xB6	; 182
   10952:	91 e2       	ldi	r25, 0x21	; 33
   10954:	94 83       	std	Z+4, r25	; 0x04
   10956:	83 83       	std	Z+3, r24	; 0x03
   10958:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   1095c:	0f 90       	pop	r0
   1095e:	0f 90       	pop	r0
   10960:	0f 90       	pop	r0
   10962:	0f 90       	pop	r0
					   }
				    stLocalAccount=laBalanceValue;  
   10964:	8f e0       	ldi	r24, 0x0F	; 15
   10966:	80 93 5b 01 	sts	0x015B, r24
					}              
				if (KeyPressed==_KEY_CANCEL){
   1096a:	17 3e       	cpi	r17, 0xE7	; 231
   1096c:	c9 f4       	brne	.+50     	; 0x109a0 <FMenuLocalAccount+0x8be>
				    if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&(ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0))
   1096e:	80 91 8e 02 	lds	r24, 0x028E
   10972:	81 50       	subi	r24, 0x01	; 1
   10974:	86 30       	cpi	r24, 0x06	; 6
   10976:	70 f4       	brcc	.+28     	; 0x10994 <FMenuLocalAccount+0x8b2>
   10978:	80 91 8f 02 	lds	r24, 0x028F
   1097c:	88 23       	and	r24, r24
   1097e:	51 f4       	brne	.+20     	; 0x10994 <FMenuLocalAccount+0x8b2>
   10980:	80 91 90 02 	lds	r24, 0x0290
   10984:	88 23       	and	r24, r24
   10986:	31 f4       	brne	.+12     	; 0x10994 <FMenuLocalAccount+0x8b2>
   10988:	80 91 91 02 	lds	r24, 0x0291
   1098c:	88 23       	and	r24, r24
   1098e:	11 f4       	brne	.+4      	; 0x10994 <FMenuLocalAccount+0x8b2>
					     stLocalAccount=laSelectFIP;//Back To FIP Select Non MPD
   10990:	89 e0       	ldi	r24, 0x09	; 9
   10992:	01 c0       	rjmp	.+2      	; 0x10996 <FMenuLocalAccount+0x8b4>
                    else stLocalAccount=laSelectProduct;//Back To Product Selection MPD
   10994:	8b e0       	ldi	r24, 0x0B	; 11
   10996:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   1099a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
   1099e:	84 c4       	rjmp	.+2312   	; 0x112a8 <FMenuLocalAccount+0x11c6>
					}
                else
				if (KeyPressed==_KEY_ENTER){
   109a0:	17 3b       	cpi	r17, 0xB7	; 183
   109a2:	09 f0       	breq	.+2      	; 0x109a6 <FMenuLocalAccount+0x8c4>
   109a4:	81 c4       	rjmp	.+2306   	; 0x112a8 <FMenuLocalAccount+0x11c6>
				    BalanceType=1;
   109a6:	11 e0       	ldi	r17, 0x01	; 1
   109a8:	10 93 99 02 	sts	0x0299, r17
					sprintf_P(strBalanceType,PSTR("A"));
   109ac:	00 d0       	rcall	.+0      	; 0x109ae <FMenuLocalAccount+0x8cc>
   109ae:	00 d0       	rcall	.+0      	; 0x109b0 <FMenuLocalAccount+0x8ce>
   109b0:	89 ea       	ldi	r24, 0xA9	; 169
   109b2:	93 e0       	ldi	r25, 0x03	; 3
   109b4:	ad b7       	in	r26, 0x3d	; 61
   109b6:	be b7       	in	r27, 0x3e	; 62
   109b8:	12 96       	adiw	r26, 0x02	; 2
   109ba:	9c 93       	st	X, r25
   109bc:	8e 93       	st	-X, r24
   109be:	11 97       	sbiw	r26, 0x01	; 1
   109c0:	84 eb       	ldi	r24, 0xB4	; 180
   109c2:	91 e2       	ldi	r25, 0x21	; 33
   109c4:	14 96       	adiw	r26, 0x04	; 4
   109c6:	9c 93       	st	X, r25
   109c8:	8e 93       	st	-X, r24
   109ca:	13 97       	sbiw	r26, 0x03	; 3
   109cc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
					//sprintf_P(strBalanceValue,PSTR("999"));
					IsFullAuthorized=True;
   109d0:	10 93 8b 02 	sts	0x028B, r17
                    stLocalAccount=laOdometer;//FullAuthorized
   109d4:	81 e1       	ldi	r24, 0x11	; 17
   109d6:	80 93 5b 01 	sts	0x015B, r24
   109da:	80 e0       	ldi	r24, 0x00	; 0
   109dc:	0f 90       	pop	r0
   109de:	0f 90       	pop	r0
   109e0:	0f 90       	pop	r0
   109e2:	0f 90       	pop	r0
   109e4:	62 c4       	rjmp	.+2244   	; 0x112aa <FMenuLocalAccount+0x11c8>
					}

		        break;
           case laBalanceValue:
		        lcd_clear();
   109e6:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		        if(BalanceType==1){
   109ea:	80 91 99 02 	lds	r24, 0x0299
   109ee:	81 30       	cpi	r24, 0x01	; 1
   109f0:	f1 f5       	brne	.+124    	; 0x10a6e <FMenuLocalAccount+0x98c>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   109f2:	ed b7       	in	r30, 0x3d	; 61
   109f4:	fe b7       	in	r31, 0x3e	; 62
   109f6:	38 97       	sbiw	r30, 0x08	; 8
   109f8:	0f b6       	in	r0, 0x3f	; 63
   109fa:	f8 94       	cli
   109fc:	fe bf       	out	0x3e, r31	; 62
   109fe:	0f be       	out	0x3f, r0	; 63
   10a00:	ed bf       	out	0x3d, r30	; 61
   10a02:	31 96       	adiw	r30, 0x01	; 1
   10a04:	8e 01       	movw	r16, r28
   10a06:	04 5f       	subi	r16, 0xF4	; 244
   10a08:	1f 4f       	sbci	r17, 0xFF	; 255
   10a0a:	ad b7       	in	r26, 0x3d	; 61
   10a0c:	be b7       	in	r27, 0x3e	; 62
   10a0e:	12 96       	adiw	r26, 0x02	; 2
   10a10:	1c 93       	st	X, r17
   10a12:	0e 93       	st	-X, r16
   10a14:	11 97       	sbiw	r26, 0x01	; 1
   10a16:	8c ea       	ldi	r24, 0xAC	; 172
   10a18:	91 e2       	ldi	r25, 0x21	; 33
   10a1a:	93 83       	std	Z+3, r25	; 0x03
   10a1c:	82 83       	std	Z+2, r24	; 0x02
   10a1e:	86 e9       	ldi	r24, 0x96	; 150
   10a20:	92 e0       	ldi	r25, 0x02	; 2
   10a22:	95 83       	std	Z+5, r25	; 0x05
   10a24:	84 83       	std	Z+4, r24	; 0x04
   10a26:	84 e6       	ldi	r24, 0x64	; 100
   10a28:	97 e0       	ldi	r25, 0x07	; 7
   10a2a:	97 83       	std	Z+7, r25	; 0x07
   10a2c:	86 83       	std	Z+6, r24	; 0x06
   10a2e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				    lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   10a32:	ed b7       	in	r30, 0x3d	; 61
   10a34:	fe b7       	in	r31, 0x3e	; 62
   10a36:	38 96       	adiw	r30, 0x08	; 8
   10a38:	0f b6       	in	r0, 0x3f	; 63
   10a3a:	f8 94       	cli
   10a3c:	fe bf       	out	0x3e, r31	; 62
   10a3e:	0f be       	out	0x3f, r0	; 63
   10a40:	ed bf       	out	0x3d, r30	; 61
   10a42:	81 e0       	ldi	r24, 0x01	; 1
   10a44:	61 e0       	ldi	r22, 0x01	; 1
   10a46:	a8 01       	movw	r20, r16
   10a48:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		           lcd_printf(2,1,PSTR("[1]Volume:_         "));   //"[1]Volume:_         "                                                                      
   10a4c:	82 e0       	ldi	r24, 0x02	; 2
   10a4e:	61 e0       	ldi	r22, 0x01	; 1
   10a50:	47 e9       	ldi	r20, 0x97	; 151
   10a52:	51 e2       	ldi	r21, 0x21	; 33
   10a54:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				   lcd_printf(3,1,PSTR("                    "));   //"                    "
   10a58:	83 e0       	ldi	r24, 0x03	; 3
   10a5a:	61 e0       	ldi	r22, 0x01	; 1
   10a5c:	42 e8       	ldi	r20, 0x82	; 130
   10a5e:	51 e2       	ldi	r21, 0x21	; 33
   10a60:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK     "						        
   10a64:	84 e0       	ldi	r24, 0x04	; 4
   10a66:	61 e0       	ldi	r22, 0x01	; 1
   10a68:	4d e6       	ldi	r20, 0x6D	; 109
   10a6a:	51 e2       	ldi	r21, 0x21	; 33
   10a6c:	43 c0       	rjmp	.+134    	; 0x10af4 <FMenuLocalAccount+0xa12>
				   }
                else
		        if(BalanceType==2){
   10a6e:	82 30       	cpi	r24, 0x02	; 2
   10a70:	09 f0       	breq	.+2      	; 0x10a74 <FMenuLocalAccount+0x992>
   10a72:	42 c0       	rjmp	.+132    	; 0x10af8 <FMenuLocalAccount+0xa16>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   10a74:	2d b7       	in	r18, 0x3d	; 61
   10a76:	3e b7       	in	r19, 0x3e	; 62
   10a78:	28 50       	subi	r18, 0x08	; 8
   10a7a:	30 40       	sbci	r19, 0x00	; 0
   10a7c:	0f b6       	in	r0, 0x3f	; 63
   10a7e:	f8 94       	cli
   10a80:	3e bf       	out	0x3e, r19	; 62
   10a82:	0f be       	out	0x3f, r0	; 63
   10a84:	2d bf       	out	0x3d, r18	; 61
   10a86:	ed b7       	in	r30, 0x3d	; 61
   10a88:	fe b7       	in	r31, 0x3e	; 62
   10a8a:	31 96       	adiw	r30, 0x01	; 1
   10a8c:	8e 01       	movw	r16, r28
   10a8e:	04 5f       	subi	r16, 0xF4	; 244
   10a90:	1f 4f       	sbci	r17, 0xFF	; 255
   10a92:	ad b7       	in	r26, 0x3d	; 61
   10a94:	be b7       	in	r27, 0x3e	; 62
   10a96:	12 96       	adiw	r26, 0x02	; 2
   10a98:	1c 93       	st	X, r17
   10a9a:	0e 93       	st	-X, r16
   10a9c:	11 97       	sbiw	r26, 0x01	; 1
   10a9e:	85 e6       	ldi	r24, 0x65	; 101
   10aa0:	91 e2       	ldi	r25, 0x21	; 33
   10aa2:	93 83       	std	Z+3, r25	; 0x03
   10aa4:	82 83       	std	Z+2, r24	; 0x02
   10aa6:	86 e9       	ldi	r24, 0x96	; 150
   10aa8:	92 e0       	ldi	r25, 0x02	; 2
   10aaa:	95 83       	std	Z+5, r25	; 0x05
   10aac:	84 83       	std	Z+4, r24	; 0x04
   10aae:	84 e6       	ldi	r24, 0x64	; 100
   10ab0:	97 e0       	ldi	r25, 0x07	; 7
   10ab2:	97 83       	std	Z+7, r25	; 0x07
   10ab4:	86 83       	std	Z+6, r24	; 0x06
   10ab6:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				   lcd_print(1,1,lcdteks);                         //"P01-Pertamax        "                                                                      
   10aba:	ed b7       	in	r30, 0x3d	; 61
   10abc:	fe b7       	in	r31, 0x3e	; 62
   10abe:	38 96       	adiw	r30, 0x08	; 8
   10ac0:	0f b6       	in	r0, 0x3f	; 63
   10ac2:	f8 94       	cli
   10ac4:	fe bf       	out	0x3e, r31	; 62
   10ac6:	0f be       	out	0x3f, r0	; 63
   10ac8:	ed bf       	out	0x3d, r30	; 61
   10aca:	81 e0       	ldi	r24, 0x01	; 1
   10acc:	61 e0       	ldi	r22, 0x01	; 1
   10ace:	a8 01       	movw	r20, r16
   10ad0:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		           lcd_printf(2,1,PSTR("                    "));   //"                    "                                                                      
   10ad4:	82 e0       	ldi	r24, 0x02	; 2
   10ad6:	61 e0       	ldi	r22, 0x01	; 1
   10ad8:	40 e5       	ldi	r20, 0x50	; 80
   10ada:	51 e2       	ldi	r21, 0x21	; 33
   10adc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				   lcd_printf(3,1,PSTR("[2]Amount:_         "));   //"[2]Amount:_         "
   10ae0:	83 e0       	ldi	r24, 0x03	; 3
   10ae2:	61 e0       	ldi	r22, 0x01	; 1
   10ae4:	4b e3       	ldi	r20, 0x3B	; 59
   10ae6:	51 e2       	ldi	r21, 0x21	; 33
   10ae8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK      "			        
   10aec:	84 e0       	ldi	r24, 0x04	; 4
   10aee:	61 e0       	ldi	r22, 0x01	; 1
   10af0:	46 e2       	ldi	r20, 0x26	; 38
   10af2:	51 e2       	ldi	r21, 0x21	; 33
   10af4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				   }
                iLoop=0;
   10af8:	10 92 8a 02 	sts	0x028A, r1
   10afc:	10 92 89 02 	sts	0x0289, r1
				iValuePos=0;
   10b00:	10 92 95 02 	sts	0x0295, r1
				//ValueChar[iValuePos]=' ';
		        stLocalAccount=laBalanceValueInput;  
   10b04:	80 e1       	ldi	r24, 0x10	; 16
   10b06:	ad cb       	rjmp	.-2214   	; 0x10262 <FMenuLocalAccount+0x180>
		        break; 
           case laBalanceValueInput:
		        uiResult=UserInput(UI_NUMBER_R,(1+BalanceType),11,strBalanceValue,0,10); 
   10b08:	60 91 99 02 	lds	r22, 0x0299
   10b0c:	6f 5f       	subi	r22, 0xFF	; 255
   10b0e:	81 e0       	ldi	r24, 0x01	; 1
   10b10:	4b e0       	ldi	r20, 0x0B	; 11
   10b12:	25 e2       	ldi	r18, 0x25	; 37
   10b14:	3c e0       	ldi	r19, 0x0C	; 12
   10b16:	00 e0       	ldi	r16, 0x00	; 0
   10b18:	10 e0       	ldi	r17, 0x00	; 0
   10b1a:	5a e0       	ldi	r21, 0x0A	; 10
   10b1c:	e5 2e       	mov	r14, r21
   10b1e:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
				if (uiResult==USER_CANCEL){
   10b22:	81 30       	cpi	r24, 0x01	; 1
   10b24:	39 f4       	brne	.+14     	; 0x10b34 <FMenuLocalAccount+0xa52>
				    lcd_clear();
   10b26:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
   10b2a:	88 ea       	ldi	r24, 0xA8	; 168
   10b2c:	91 e6       	ldi	r25, 0x61	; 97
   10b2e:	01 97       	sbiw	r24, 0x01	; 1
   10b30:	f1 f7       	brne	.-4      	; 0x10b2e <FMenuLocalAccount+0xa4c>
   10b32:	f9 c0       	rjmp	.+498    	; 0x10d26 <FMenuLocalAccount+0xc44>
					_delay_ms(100);		        
				    stLocalAccount=laSelectBalanceType;		        
					}
				else
				if (uiResult==USER_OK){				    
   10b34:	83 30       	cpi	r24, 0x03	; 3
   10b36:	09 f0       	breq	.+2      	; 0x10b3a <FMenuLocalAccount+0xa58>
   10b38:	b7 c3       	rjmp	.+1902   	; 0x112a8 <FMenuLocalAccount+0x11c6>
				    stLocalAccount=laOdometer;
   10b3a:	81 e1       	ldi	r24, 0x11	; 17
   10b3c:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   10b40:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
   10b44:	88 ea       	ldi	r24, 0xA8	; 168
   10b46:	91 e6       	ldi	r25, 0x61	; 97
   10b48:	01 97       	sbiw	r24, 0x01	; 1
   10b4a:	f1 f7       	brne	.-4      	; 0x10b48 <FMenuLocalAccount+0xa66>
   10b4c:	ad c3       	rjmp	.+1882   	; 0x112a8 <FMenuLocalAccount+0x11c6>
					_delay_ms(100);		        
					}
		        break;
           case laOdometer://GetOdometer			
		        lcd_clear();
   10b4e:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
				if (IsFullAuthorized==True){
   10b52:	80 91 8b 02 	lds	r24, 0x028B
   10b56:	81 30       	cpi	r24, 0x01	; 1
   10b58:	09 f0       	breq	.+2      	; 0x10b5c <FMenuLocalAccount+0xa7a>
   10b5a:	4a c0       	rjmp	.+148    	; 0x10bf0 <FMenuLocalAccount+0xb0e>
				    lcd_printf(1,1,PSTR("Pump Product   Full"));
   10b5c:	61 e0       	ldi	r22, 0x01	; 1
   10b5e:	42 e1       	ldi	r20, 0x12	; 18
   10b60:	51 e2       	ldi	r21, 0x21	; 33
   10b62:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   10b66:	2d b7       	in	r18, 0x3d	; 61
   10b68:	3e b7       	in	r19, 0x3e	; 62
   10b6a:	28 50       	subi	r18, 0x08	; 8
   10b6c:	30 40       	sbci	r19, 0x00	; 0
   10b6e:	0f b6       	in	r0, 0x3f	; 63
   10b70:	f8 94       	cli
   10b72:	3e bf       	out	0x3e, r19	; 62
   10b74:	0f be       	out	0x3f, r0	; 63
   10b76:	2d bf       	out	0x3d, r18	; 61
   10b78:	ed b7       	in	r30, 0x3d	; 61
   10b7a:	fe b7       	in	r31, 0x3e	; 62
   10b7c:	31 96       	adiw	r30, 0x01	; 1
   10b7e:	8e 01       	movw	r16, r28
   10b80:	04 5f       	subi	r16, 0xF4	; 244
   10b82:	1f 4f       	sbci	r17, 0xFF	; 255
   10b84:	ad b7       	in	r26, 0x3d	; 61
   10b86:	be b7       	in	r27, 0x3e	; 62
   10b88:	12 96       	adiw	r26, 0x02	; 2
   10b8a:	1c 93       	st	X, r17
   10b8c:	0e 93       	st	-X, r16
   10b8e:	11 97       	sbiw	r26, 0x01	; 1
   10b90:	89 e0       	ldi	r24, 0x09	; 9
   10b92:	91 e2       	ldi	r25, 0x21	; 33
   10b94:	93 83       	std	Z+3, r25	; 0x03
   10b96:	82 83       	std	Z+2, r24	; 0x02
   10b98:	86 e9       	ldi	r24, 0x96	; 150
   10b9a:	92 e0       	ldi	r25, 0x02	; 2
   10b9c:	95 83       	std	Z+5, r25	; 0x05
   10b9e:	84 83       	std	Z+4, r24	; 0x04
   10ba0:	84 e6       	ldi	r24, 0x64	; 100
   10ba2:	97 e0       	ldi	r25, 0x07	; 7
   10ba4:	97 83       	std	Z+7, r25	; 0x07
   10ba6:	86 83       	std	Z+6, r24	; 0x06
   10ba8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10bac:	ed b7       	in	r30, 0x3d	; 61
   10bae:	fe b7       	in	r31, 0x3e	; 62
   10bb0:	38 96       	adiw	r30, 0x08	; 8
   10bb2:	0f b6       	in	r0, 0x3f	; 63
   10bb4:	f8 94       	cli
   10bb6:	fe bf       	out	0x3e, r31	; 62
   10bb8:	0f be       	out	0x3f, r0	; 63
   10bba:	ed bf       	out	0x3d, r30	; 61
   10bbc:	82 e0       	ldi	r24, 0x02	; 2
   10bbe:	61 e0       	ldi	r22, 0x01	; 1
   10bc0:	a8 01       	movw	r20, r16
   10bc2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		            sprintf_P(lcdteks,PSTR("  Tank"));            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   10bc6:	00 d0       	rcall	.+0      	; 0x10bc8 <FMenuLocalAccount+0xae6>
   10bc8:	00 d0       	rcall	.+0      	; 0x10bca <FMenuLocalAccount+0xae8>
   10bca:	ad b7       	in	r26, 0x3d	; 61
   10bcc:	be b7       	in	r27, 0x3e	; 62
   10bce:	12 96       	adiw	r26, 0x02	; 2
   10bd0:	1c 93       	st	X, r17
   10bd2:	0e 93       	st	-X, r16
   10bd4:	11 97       	sbiw	r26, 0x01	; 1
   10bd6:	82 e0       	ldi	r24, 0x02	; 2
   10bd8:	91 e2       	ldi	r25, 0x21	; 33
   10bda:	14 96       	adiw	r26, 0x04	; 4
   10bdc:	9c 93       	st	X, r25
   10bde:	8e 93       	st	-X, r24
   10be0:	13 97       	sbiw	r26, 0x03	; 3
   10be2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10be6:	0f 90       	pop	r0
   10be8:	0f 90       	pop	r0
   10bea:	0f 90       	pop	r0
   10bec:	0f 90       	pop	r0
   10bee:	5e c0       	rjmp	.+188    	; 0x10cac <FMenuLocalAccount+0xbca>
				}
                else{
		            if (BalanceType==1) lcd_printf(1,1,PSTR("Pump Product Volume"));
   10bf0:	80 91 99 02 	lds	r24, 0x0299
   10bf4:	81 30       	cpi	r24, 0x01	; 1
   10bf6:	29 f4       	brne	.+10     	; 0x10c02 <FMenuLocalAccount+0xb20>
   10bf8:	61 e0       	ldi	r22, 0x01	; 1
   10bfa:	4e ee       	ldi	r20, 0xEE	; 238
   10bfc:	50 e2       	ldi	r21, 0x20	; 32
   10bfe:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
                    if (BalanceType==2) lcd_printf(1,1,PSTR("Pump Product Amount"));//"Pump Product  Amount" 
   10c02:	80 91 99 02 	lds	r24, 0x0299
   10c06:	82 30       	cpi	r24, 0x02	; 2
   10c08:	31 f4       	brne	.+12     	; 0x10c16 <FMenuLocalAccount+0xb34>
   10c0a:	81 e0       	ldi	r24, 0x01	; 1
   10c0c:	61 e0       	ldi	r22, 0x01	; 1
   10c0e:	4a ed       	ldi	r20, 0xDA	; 218
   10c10:	50 e2       	ldi	r21, 0x20	; 32
   10c12:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   10c16:	ed b7       	in	r30, 0x3d	; 61
   10c18:	fe b7       	in	r31, 0x3e	; 62
   10c1a:	38 97       	sbiw	r30, 0x08	; 8
   10c1c:	0f b6       	in	r0, 0x3f	; 63
   10c1e:	f8 94       	cli
   10c20:	fe bf       	out	0x3e, r31	; 62
   10c22:	0f be       	out	0x3f, r0	; 63
   10c24:	ed bf       	out	0x3d, r30	; 61
   10c26:	31 96       	adiw	r30, 0x01	; 1
   10c28:	8e 01       	movw	r16, r28
   10c2a:	04 5f       	subi	r16, 0xF4	; 244
   10c2c:	1f 4f       	sbci	r17, 0xFF	; 255
   10c2e:	ad b7       	in	r26, 0x3d	; 61
   10c30:	be b7       	in	r27, 0x3e	; 62
   10c32:	12 96       	adiw	r26, 0x02	; 2
   10c34:	1c 93       	st	X, r17
   10c36:	0e 93       	st	-X, r16
   10c38:	11 97       	sbiw	r26, 0x01	; 1
   10c3a:	81 ed       	ldi	r24, 0xD1	; 209
   10c3c:	90 e2       	ldi	r25, 0x20	; 32
   10c3e:	93 83       	std	Z+3, r25	; 0x03
   10c40:	82 83       	std	Z+2, r24	; 0x02
   10c42:	86 e9       	ldi	r24, 0x96	; 150
   10c44:	92 e0       	ldi	r25, 0x02	; 2
   10c46:	95 83       	std	Z+5, r25	; 0x05
   10c48:	84 83       	std	Z+4, r24	; 0x04
   10c4a:	84 e6       	ldi	r24, 0x64	; 100
   10c4c:	97 e0       	ldi	r25, 0x07	; 7
   10c4e:	97 83       	std	Z+7, r25	; 0x07
   10c50:	86 83       	std	Z+6, r24	; 0x06
   10c52:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10c56:	ed b7       	in	r30, 0x3d	; 61
   10c58:	fe b7       	in	r31, 0x3e	; 62
   10c5a:	38 96       	adiw	r30, 0x08	; 8
   10c5c:	0f b6       	in	r0, 0x3f	; 63
   10c5e:	f8 94       	cli
   10c60:	fe bf       	out	0x3e, r31	; 62
   10c62:	0f be       	out	0x3f, r0	; 63
   10c64:	ed bf       	out	0x3d, r30	; 61
   10c66:	82 e0       	ldi	r24, 0x02	; 2
   10c68:	61 e0       	ldi	r22, 0x01	; 1
   10c6a:	a8 01       	movw	r20, r16
   10c6c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		            sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   10c70:	00 d0       	rcall	.+0      	; 0x10c72 <FMenuLocalAccount+0xb90>
   10c72:	00 d0       	rcall	.+0      	; 0x10c74 <FMenuLocalAccount+0xb92>
   10c74:	00 d0       	rcall	.+0      	; 0x10c76 <FMenuLocalAccount+0xb94>
   10c76:	ed b7       	in	r30, 0x3d	; 61
   10c78:	fe b7       	in	r31, 0x3e	; 62
   10c7a:	31 96       	adiw	r30, 0x01	; 1
   10c7c:	ad b7       	in	r26, 0x3d	; 61
   10c7e:	be b7       	in	r27, 0x3e	; 62
   10c80:	12 96       	adiw	r26, 0x02	; 2
   10c82:	1c 93       	st	X, r17
   10c84:	0e 93       	st	-X, r16
   10c86:	11 97       	sbiw	r26, 0x01	; 1
   10c88:	8d ec       	ldi	r24, 0xCD	; 205
   10c8a:	90 e2       	ldi	r25, 0x20	; 32
   10c8c:	93 83       	std	Z+3, r25	; 0x03
   10c8e:	82 83       	std	Z+2, r24	; 0x02
   10c90:	85 e2       	ldi	r24, 0x25	; 37
   10c92:	9c e0       	ldi	r25, 0x0C	; 12
   10c94:	95 83       	std	Z+5, r25	; 0x05
   10c96:	84 83       	std	Z+4, r24	; 0x04
   10c98:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10c9c:	ed b7       	in	r30, 0x3d	; 61
   10c9e:	fe b7       	in	r31, 0x3e	; 62
   10ca0:	36 96       	adiw	r30, 0x06	; 6
   10ca2:	0f b6       	in	r0, 0x3f	; 63
   10ca4:	f8 94       	cli
   10ca6:	fe bf       	out	0x3e, r31	; 62
   10ca8:	0f be       	out	0x3f, r0	; 63
   10caa:	ed bf       	out	0x3d, r30	; 61
   10cac:	82 e0       	ldi	r24, 0x02	; 2
   10cae:	6e e0       	ldi	r22, 0x0E	; 14
   10cb0:	a8 01       	movw	r20, r16
   10cb2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>

				}
				lcd_printf(3,1,PSTR("Odometer:_       "));                                //"Odometer:_          "
   10cb6:	83 e0       	ldi	r24, 0x03	; 3
   10cb8:	61 e0       	ldi	r22, 0x01	; 1
   10cba:	4b eb       	ldi	r20, 0xBB	; 187
   10cbc:	50 e2       	ldi	r21, 0x20	; 32
   10cbe:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	            lcd_printf(4,1,PSTR("[*]Back  [#]OK   "));                                //"[*]Back  [#]OK      "						        
   10cc2:	84 e0       	ldi	r24, 0x04	; 4
   10cc4:	61 e0       	ldi	r22, 0x01	; 1
   10cc6:	49 ea       	ldi	r20, 0xA9	; 169
   10cc8:	50 e2       	ldi	r21, 0x20	; 32
   10cca:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				ClearMem(strOdometer);
   10cce:	89 ec       	ldi	r24, 0xC9	; 201
   10cd0:	93 e0       	ldi	r25, 0x03	; 3
   10cd2:	0e 94 61 a6 	call	0x14cc2	; 0x14cc2 <ClearMem>
		        stLocalAccount=laOdometerInput;
   10cd6:	82 e1       	ldi	r24, 0x12	; 18
   10cd8:	c4 ca       	rjmp	.-2680   	; 0x10262 <FMenuLocalAccount+0x180>
		        break;
           case laOdometerInput:
				uiResult=UserInput(UI_NUMBER_R,3,10,strOdometer,0,10);
   10cda:	29 ec       	ldi	r18, 0xC9	; 201
   10cdc:	c2 2e       	mov	r12, r18
   10cde:	23 e0       	ldi	r18, 0x03	; 3
   10ce0:	d2 2e       	mov	r13, r18
   10ce2:	81 e0       	ldi	r24, 0x01	; 1
   10ce4:	63 e0       	ldi	r22, 0x03	; 3
   10ce6:	4a e0       	ldi	r20, 0x0A	; 10
   10ce8:	96 01       	movw	r18, r12
   10cea:	00 e0       	ldi	r16, 0x00	; 0
   10cec:	10 e0       	ldi	r17, 0x00	; 0
   10cee:	9a e0       	ldi	r25, 0x0A	; 10
   10cf0:	e9 2e       	mov	r14, r25
   10cf2:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
				if (uiResult==USER_OK){
   10cf6:	83 30       	cpi	r24, 0x03	; 3
   10cf8:	79 f4       	brne	.+30     	; 0x10d18 <FMenuLocalAccount+0xc36>
				    if ((strlen(strOdometer)==1)&&(strOdometer[0]=='0'))
   10cfa:	f6 01       	movw	r30, r12
   10cfc:	01 90       	ld	r0, Z+
   10cfe:	00 20       	and	r0, r0
   10d00:	e9 f7       	brne	.-6      	; 0x10cfc <FMenuLocalAccount+0xc1a>
   10d02:	eb 5c       	subi	r30, 0xCB	; 203
   10d04:	f3 40       	sbci	r31, 0x03	; 3
   10d06:	31 f4       	brne	.+12     	; 0x10d14 <FMenuLocalAccount+0xc32>
   10d08:	80 91 c9 03 	lds	r24, 0x03C9
   10d0c:	80 33       	cpi	r24, 0x30	; 48
   10d0e:	11 f4       	brne	.+4      	; 0x10d14 <FMenuLocalAccount+0xc32>
					    strOdometer[0]=0;
   10d10:	10 92 c9 03 	sts	0x03C9, r1
				    stLocalAccount=laDataConfirm;
   10d14:	83 e1       	ldi	r24, 0x13	; 19
   10d16:	a5 ca       	rjmp	.-2742   	; 0x10262 <FMenuLocalAccount+0x180>
					}
			    else
			    if (uiResult==USER_CANCEL){
   10d18:	81 30       	cpi	r24, 0x01	; 1
   10d1a:	09 f0       	breq	.+2      	; 0x10d1e <FMenuLocalAccount+0xc3c>
   10d1c:	c5 c2       	rjmp	.+1418   	; 0x112a8 <FMenuLocalAccount+0x11c6>
				    if (IsFullAuthorized==True)
   10d1e:	80 91 8b 02 	lds	r24, 0x028B
   10d22:	81 30       	cpi	r24, 0x01	; 1
   10d24:	11 f4       	brne	.+4      	; 0x10d2a <FMenuLocalAccount+0xc48>
					     stLocalAccount=laSelectBalanceType;
   10d26:	8d e0       	ldi	r24, 0x0D	; 13
   10d28:	9c ca       	rjmp	.-2760   	; 0x10262 <FMenuLocalAccount+0x180>
					else stLocalAccount=laBalanceValue;		        
   10d2a:	8f e0       	ldi	r24, 0x0F	; 15
   10d2c:	9a ca       	rjmp	.-2764   	; 0x10262 <FMenuLocalAccount+0x180>
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
   10d2e:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
   10d32:	e3 e3       	ldi	r30, 0x33	; 51
   10d34:	f3 e0       	ldi	r31, 0x03	; 3
   10d36:	de 01       	movw	r26, r28
   10d38:	90 96       	adiw	r26, 0x20	; 32
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
   10d3a:	81 91       	ld	r24, Z+
   10d3c:	8d 93       	st	X+, r24
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
   10d3e:	33 e0       	ldi	r19, 0x03	; 3
   10d40:	ed 33       	cpi	r30, 0x3D	; 61
   10d42:	f3 07       	cpc	r31, r19
   10d44:	d1 f7       	brne	.-12     	; 0x10d3a <FMenuLocalAccount+0xc58>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
   10d46:	1a a6       	std	Y+42, r1	; 0x2a
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
		        StringCopyPos(strCardHolder,strName,9,10);                                          //Data Confirmation   
                sprintf_P(lcdteks,PSTR("%s "),strName);                  lcd_print(1,1,lcdteks);    //"Iyan The Man        "
   10d48:	00 d0       	rcall	.+0      	; 0x10d4a <FMenuLocalAccount+0xc68>
   10d4a:	00 d0       	rcall	.+0      	; 0x10d4c <FMenuLocalAccount+0xc6a>
   10d4c:	00 d0       	rcall	.+0      	; 0x10d4e <FMenuLocalAccount+0xc6c>
   10d4e:	ed b7       	in	r30, 0x3d	; 61
   10d50:	fe b7       	in	r31, 0x3e	; 62
   10d52:	31 96       	adiw	r30, 0x01	; 1
   10d54:	8e 01       	movw	r16, r28
   10d56:	04 5f       	subi	r16, 0xF4	; 244
   10d58:	1f 4f       	sbci	r17, 0xFF	; 255
   10d5a:	ad b7       	in	r26, 0x3d	; 61
   10d5c:	be b7       	in	r27, 0x3e	; 62
   10d5e:	12 96       	adiw	r26, 0x02	; 2
   10d60:	1c 93       	st	X, r17
   10d62:	0e 93       	st	-X, r16
   10d64:	11 97       	sbiw	r26, 0x01	; 1
   10d66:	85 ea       	ldi	r24, 0xA5	; 165
   10d68:	90 e2       	ldi	r25, 0x20	; 32
   10d6a:	93 83       	std	Z+3, r25	; 0x03
   10d6c:	82 83       	std	Z+2, r24	; 0x02
   10d6e:	ce 01       	movw	r24, r28
   10d70:	80 96       	adiw	r24, 0x20	; 32
   10d72:	95 83       	std	Z+5, r25	; 0x05
   10d74:	84 83       	std	Z+4, r24	; 0x04
   10d76:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10d7a:	ed b7       	in	r30, 0x3d	; 61
   10d7c:	fe b7       	in	r31, 0x3e	; 62
   10d7e:	36 96       	adiw	r30, 0x06	; 6
   10d80:	0f b6       	in	r0, 0x3f	; 63
   10d82:	f8 94       	cli
   10d84:	fe bf       	out	0x3e, r31	; 62
   10d86:	0f be       	out	0x3f, r0	; 63
   10d88:	ed bf       	out	0x3d, r30	; 61
   10d8a:	81 e0       	ldi	r24, 0x01	; 1
   10d8c:	61 e0       	ldi	r22, 0x01	; 1
   10d8e:	a8 01       	movw	r20, r16
   10d90:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		        sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);             lcd_print(2,1,lcdteks);    //"ID1CCDA565 OD:123456"
   10d94:	00 d0       	rcall	.+0      	; 0x10d96 <FMenuLocalAccount+0xcb4>
   10d96:	00 d0       	rcall	.+0      	; 0x10d98 <FMenuLocalAccount+0xcb6>
   10d98:	00 d0       	rcall	.+0      	; 0x10d9a <FMenuLocalAccount+0xcb8>
   10d9a:	ed b7       	in	r30, 0x3d	; 61
   10d9c:	fe b7       	in	r31, 0x3e	; 62
   10d9e:	31 96       	adiw	r30, 0x01	; 1
   10da0:	ad b7       	in	r26, 0x3d	; 61
   10da2:	be b7       	in	r27, 0x3e	; 62
   10da4:	12 96       	adiw	r26, 0x02	; 2
   10da6:	1c 93       	st	X, r17
   10da8:	0e 93       	st	-X, r16
   10daa:	11 97       	sbiw	r26, 0x01	; 1
   10dac:	8e e9       	ldi	r24, 0x9E	; 158
   10dae:	90 e2       	ldi	r25, 0x20	; 32
   10db0:	93 83       	std	Z+3, r25	; 0x03
   10db2:	82 83       	std	Z+2, r24	; 0x02
   10db4:	8f e8       	ldi	r24, 0x8F	; 143
   10db6:	9b e0       	ldi	r25, 0x0B	; 11
   10db8:	95 83       	std	Z+5, r25	; 0x05
   10dba:	84 83       	std	Z+4, r24	; 0x04
   10dbc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10dc0:	ed b7       	in	r30, 0x3d	; 61
   10dc2:	fe b7       	in	r31, 0x3e	; 62
   10dc4:	36 96       	adiw	r30, 0x06	; 6
   10dc6:	0f b6       	in	r0, 0x3f	; 63
   10dc8:	f8 94       	cli
   10dca:	fe bf       	out	0x3e, r31	; 62
   10dcc:	0f be       	out	0x3f, r0	; 63
   10dce:	ed bf       	out	0x3d, r30	; 61
   10dd0:	82 e0       	ldi	r24, 0x02	; 2
   10dd2:	61 e0       	ldi	r22, 0x01	; 1
   10dd4:	a8 01       	movw	r20, r16
   10dd6:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
				sprintf_P(lcdteks,PSTR("%s  %s "),strFIP,strProduct);    lcd_print(3,1,lcdteks);    //"P01  Pertamax 500000"
   10dda:	2d b7       	in	r18, 0x3d	; 61
   10ddc:	3e b7       	in	r19, 0x3e	; 62
   10dde:	28 50       	subi	r18, 0x08	; 8
   10de0:	30 40       	sbci	r19, 0x00	; 0
   10de2:	0f b6       	in	r0, 0x3f	; 63
   10de4:	f8 94       	cli
   10de6:	3e bf       	out	0x3e, r19	; 62
   10de8:	0f be       	out	0x3f, r0	; 63
   10dea:	2d bf       	out	0x3d, r18	; 61
   10dec:	ed b7       	in	r30, 0x3d	; 61
   10dee:	fe b7       	in	r31, 0x3e	; 62
   10df0:	31 96       	adiw	r30, 0x01	; 1
   10df2:	ad b7       	in	r26, 0x3d	; 61
   10df4:	be b7       	in	r27, 0x3e	; 62
   10df6:	12 96       	adiw	r26, 0x02	; 2
   10df8:	1c 93       	st	X, r17
   10dfa:	0e 93       	st	-X, r16
   10dfc:	11 97       	sbiw	r26, 0x01	; 1
   10dfe:	86 e9       	ldi	r24, 0x96	; 150
   10e00:	90 e2       	ldi	r25, 0x20	; 32
   10e02:	93 83       	std	Z+3, r25	; 0x03
   10e04:	82 83       	std	Z+2, r24	; 0x02
   10e06:	86 e9       	ldi	r24, 0x96	; 150
   10e08:	92 e0       	ldi	r25, 0x02	; 2
   10e0a:	95 83       	std	Z+5, r25	; 0x05
   10e0c:	84 83       	std	Z+4, r24	; 0x04
   10e0e:	84 e6       	ldi	r24, 0x64	; 100
   10e10:	97 e0       	ldi	r25, 0x07	; 7
   10e12:	97 83       	std	Z+7, r25	; 0x07
   10e14:	86 83       	std	Z+6, r24	; 0x06
   10e16:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10e1a:	ed b7       	in	r30, 0x3d	; 61
   10e1c:	fe b7       	in	r31, 0x3e	; 62
   10e1e:	38 96       	adiw	r30, 0x08	; 8
   10e20:	0f b6       	in	r0, 0x3f	; 63
   10e22:	f8 94       	cli
   10e24:	fe bf       	out	0x3e, r31	; 62
   10e26:	0f be       	out	0x3f, r0	; 63
   10e28:	ed bf       	out	0x3d, r30	; 61
   10e2a:	83 e0       	ldi	r24, 0x03	; 3
   10e2c:	61 e0       	ldi	r22, 0x01	; 1
   10e2e:	a8 01       	movw	r20, r16
   10e30:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		        if (IsFullAuthorized==True){
   10e34:	80 91 8b 02 	lds	r24, 0x028B
   10e38:	81 30       	cpi	r24, 0x01	; 1
   10e3a:	39 f4       	brne	.+14     	; 0x10e4a <FMenuLocalAccount+0xd68>
                    lcd_printf(3,15,PSTR(" Full"));
   10e3c:	83 e0       	ldi	r24, 0x03	; 3
   10e3e:	6f e0       	ldi	r22, 0x0F	; 15
   10e40:	40 e9       	ldi	r20, 0x90	; 144
   10e42:	50 e2       	ldi	r21, 0x20	; 32
   10e44:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
   10e48:	23 c0       	rjmp	.+70     	; 0x10e90 <FMenuLocalAccount+0xdae>
				}
				else {
				    sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);          lcd_print(3,15,lcdteks);   //"[*]Back [0]ESC [#]OK " 
   10e4a:	00 d0       	rcall	.+0      	; 0x10e4c <FMenuLocalAccount+0xd6a>
   10e4c:	00 d0       	rcall	.+0      	; 0x10e4e <FMenuLocalAccount+0xd6c>
   10e4e:	00 d0       	rcall	.+0      	; 0x10e50 <FMenuLocalAccount+0xd6e>
   10e50:	ed b7       	in	r30, 0x3d	; 61
   10e52:	fe b7       	in	r31, 0x3e	; 62
   10e54:	31 96       	adiw	r30, 0x01	; 1
   10e56:	ad b7       	in	r26, 0x3d	; 61
   10e58:	be b7       	in	r27, 0x3e	; 62
   10e5a:	12 96       	adiw	r26, 0x02	; 2
   10e5c:	1c 93       	st	X, r17
   10e5e:	0e 93       	st	-X, r16
   10e60:	11 97       	sbiw	r26, 0x01	; 1
   10e62:	8c e8       	ldi	r24, 0x8C	; 140
   10e64:	90 e2       	ldi	r25, 0x20	; 32
   10e66:	93 83       	std	Z+3, r25	; 0x03
   10e68:	82 83       	std	Z+2, r24	; 0x02
   10e6a:	85 e2       	ldi	r24, 0x25	; 37
   10e6c:	9c e0       	ldi	r25, 0x0C	; 12
   10e6e:	95 83       	std	Z+5, r25	; 0x05
   10e70:	84 83       	std	Z+4, r24	; 0x04
   10e72:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10e76:	ed b7       	in	r30, 0x3d	; 61
   10e78:	fe b7       	in	r31, 0x3e	; 62
   10e7a:	36 96       	adiw	r30, 0x06	; 6
   10e7c:	0f b6       	in	r0, 0x3f	; 63
   10e7e:	f8 94       	cli
   10e80:	fe bf       	out	0x3e, r31	; 62
   10e82:	0f be       	out	0x3f, r0	; 63
   10e84:	ed bf       	out	0x3d, r30	; 61
   10e86:	83 e0       	ldi	r24, 0x03	; 3
   10e88:	6f e0       	ldi	r22, 0x0F	; 15
   10e8a:	a8 01       	movw	r20, r16
   10e8c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
					}
	            lcd_printf(4,1,PSTR("[*]Back [0]ESC [#]OK"));    
   10e90:	84 e0       	ldi	r24, 0x04	; 4
   10e92:	61 e0       	ldi	r22, 0x01	; 1
   10e94:	47 e7       	ldi	r20, 0x77	; 119
   10e96:	50 e2       	ldi	r21, 0x20	; 32
   10e98:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
                stLocalAccount=laDataConfirmInput;
   10e9c:	84 e1       	ldi	r24, 0x14	; 20
   10e9e:	e1 c9       	rjmp	.-3134   	; 0x10262 <FMenuLocalAccount+0x180>
                //while(1){};   
		        break;
           case laDataConfirmInput:
                KeyPressed=_key_scan(1);
   10ea0:	81 e0       	ldi	r24, 0x01	; 1
   10ea2:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
                if (KeyPressed==_KEY_CANCEL)stLocalAccount=laOdometer;		        
   10ea6:	87 3e       	cpi	r24, 0xE7	; 231
   10ea8:	11 f4       	brne	.+4      	; 0x10eae <FMenuLocalAccount+0xdcc>
   10eaa:	81 e1       	ldi	r24, 0x11	; 17
   10eac:	da c9       	rjmp	.-3148   	; 0x10262 <FMenuLocalAccount+0x180>
				else
				if (KeyPressed==_KEY_ENTER)stLocalAccount=laProceedTransaction;
   10eae:	87 3b       	cpi	r24, 0xB7	; 183
   10eb0:	11 f4       	brne	.+4      	; 0x10eb6 <FMenuLocalAccount+0xdd4>
   10eb2:	85 e1       	ldi	r24, 0x15	; 21
   10eb4:	d6 c9       	rjmp	.-3156   	; 0x10262 <FMenuLocalAccount+0x180>
				else
				if (KeyPressed==_KEY_0){
   10eb6:	87 3d       	cpi	r24, 0xD7	; 215
   10eb8:	09 f0       	breq	.+2      	; 0x10ebc <FMenuLocalAccount+0xdda>
   10eba:	f6 c1       	rjmp	.+1004   	; 0x112a8 <FMenuLocalAccount+0x11c6>
				   //ShowCancel
				   TimLocAcc=0;
   10ebc:	10 92 bc 01 	sts	0x01BC, r1
                   lcd_clear();
   10ec0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
				   lcd_printf(1,1,PSTR("Cancel Transaction  "));    //"Cancel Transaction"
   10ec4:	81 e0       	ldi	r24, 0x01	; 1
   10ec6:	61 e0       	ldi	r22, 0x01	; 1
   10ec8:	42 e6       	ldi	r20, 0x62	; 98
   10eca:	50 e2       	ldi	r21, 0x20	; 32
   10ecc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
   10ed0:	d2 c1       	rjmp	.+932    	; 0x11276 <FMenuLocalAccount+0x1194>
				   stLocalAccount=laDelayExit;
				   }
		        break;
           case laProceedTransaction:
		        sendMessage58();
   10ed2:	0e 94 69 80 	call	0x100d2	; 0x100d2 <sendMessage58>
                RemZeroLead(strCardID);
   10ed6:	8f e8       	ldi	r24, 0x8F	; 143
   10ed8:	9b e0       	ldi	r25, 0x0B	; 11
   10eda:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
                RemZeroLead(strBalanceValue);
   10ede:	b5 e2       	ldi	r27, 0x25	; 37
   10ee0:	eb 2e       	mov	r14, r27
   10ee2:	bc e0       	ldi	r27, 0x0C	; 12
   10ee4:	fb 2e       	mov	r15, r27
   10ee6:	c7 01       	movw	r24, r14
   10ee8:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
				sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct);       lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10eec:	2d b7       	in	r18, 0x3d	; 61
   10eee:	3e b7       	in	r19, 0x3e	; 62
   10ef0:	28 50       	subi	r18, 0x08	; 8
   10ef2:	30 40       	sbci	r19, 0x00	; 0
   10ef4:	0f b6       	in	r0, 0x3f	; 63
   10ef6:	f8 94       	cli
   10ef8:	3e bf       	out	0x3e, r19	; 62
   10efa:	0f be       	out	0x3f, r0	; 63
   10efc:	2d bf       	out	0x3d, r18	; 61
   10efe:	ed b7       	in	r30, 0x3d	; 61
   10f00:	fe b7       	in	r31, 0x3e	; 62
   10f02:	31 96       	adiw	r30, 0x01	; 1
   10f04:	8e 01       	movw	r16, r28
   10f06:	04 5f       	subi	r16, 0xF4	; 244
   10f08:	1f 4f       	sbci	r17, 0xFF	; 255
   10f0a:	ad b7       	in	r26, 0x3d	; 61
   10f0c:	be b7       	in	r27, 0x3e	; 62
   10f0e:	12 96       	adiw	r26, 0x02	; 2
   10f10:	1c 93       	st	X, r17
   10f12:	0e 93       	st	-X, r16
   10f14:	11 97       	sbiw	r26, 0x01	; 1
   10f16:	8a e5       	ldi	r24, 0x5A	; 90
   10f18:	90 e2       	ldi	r25, 0x20	; 32
   10f1a:	93 83       	std	Z+3, r25	; 0x03
   10f1c:	82 83       	std	Z+2, r24	; 0x02
   10f1e:	86 e9       	ldi	r24, 0x96	; 150
   10f20:	92 e0       	ldi	r25, 0x02	; 2
   10f22:	95 83       	std	Z+5, r25	; 0x05
   10f24:	84 83       	std	Z+4, r24	; 0x04
   10f26:	84 e6       	ldi	r24, 0x64	; 100
   10f28:	97 e0       	ldi	r25, 0x07	; 7
   10f2a:	97 83       	std	Z+7, r25	; 0x07
   10f2c:	86 83       	std	Z+6, r24	; 0x06
   10f2e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10f32:	ed b7       	in	r30, 0x3d	; 61
   10f34:	fe b7       	in	r31, 0x3e	; 62
   10f36:	38 96       	adiw	r30, 0x08	; 8
   10f38:	0f b6       	in	r0, 0x3f	; 63
   10f3a:	f8 94       	cli
   10f3c:	fe bf       	out	0x3e, r31	; 62
   10f3e:	0f be       	out	0x3f, r0	; 63
   10f40:	ed bf       	out	0x3d, r30	; 61
   10f42:	81 e0       	ldi	r24, 0x01	; 1
   10f44:	61 e0       	ldi	r22, 0x01	; 1
   10f46:	a8 01       	movw	r20, r16
   10f48:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);              lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10f4c:	00 d0       	rcall	.+0      	; 0x10f4e <FMenuLocalAccount+0xe6c>
   10f4e:	00 d0       	rcall	.+0      	; 0x10f50 <FMenuLocalAccount+0xe6e>
   10f50:	00 d0       	rcall	.+0      	; 0x10f52 <FMenuLocalAccount+0xe70>
   10f52:	ed b7       	in	r30, 0x3d	; 61
   10f54:	fe b7       	in	r31, 0x3e	; 62
   10f56:	31 96       	adiw	r30, 0x01	; 1
   10f58:	ad b7       	in	r26, 0x3d	; 61
   10f5a:	be b7       	in	r27, 0x3e	; 62
   10f5c:	12 96       	adiw	r26, 0x02	; 2
   10f5e:	1c 93       	st	X, r17
   10f60:	0e 93       	st	-X, r16
   10f62:	11 97       	sbiw	r26, 0x01	; 1
   10f64:	87 e5       	ldi	r24, 0x57	; 87
   10f66:	90 e2       	ldi	r25, 0x20	; 32
   10f68:	93 83       	std	Z+3, r25	; 0x03
   10f6a:	82 83       	std	Z+2, r24	; 0x02
   10f6c:	f5 82       	std	Z+5, r15	; 0x05
   10f6e:	e4 82       	std	Z+4, r14	; 0x04
   10f70:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   10f74:	ed b7       	in	r30, 0x3d	; 61
   10f76:	fe b7       	in	r31, 0x3e	; 62
   10f78:	36 96       	adiw	r30, 0x06	; 6
   10f7a:	0f b6       	in	r0, 0x3f	; 63
   10f7c:	f8 94       	cli
   10f7e:	fe bf       	out	0x3e, r31	; 62
   10f80:	0f be       	out	0x3f, r0	; 63
   10f82:	ed bf       	out	0x3d, r30	; 61
   10f84:	81 e0       	ldi	r24, 0x01	; 1
   10f86:	6f e0       	ldi	r22, 0x0F	; 15
   10f88:	a8 01       	movw	r20, r16
   10f8a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
                lcd_printf(3,1,PSTR("Mohon Tunggu        "));                                         //"Mohon Tunggu ...    "
   10f8e:	83 e0       	ldi	r24, 0x03	; 3
   10f90:	61 e0       	ldi	r22, 0x01	; 1
   10f92:	42 e4       	ldi	r20, 0x42	; 66
   10f94:	50 e2       	ldi	r21, 0x20	; 32
   10f96:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		        lcd_printf(4,1,PSTR("                    "));                                  //"                    "
   10f9a:	84 e0       	ldi	r24, 0x04	; 4
   10f9c:	61 e0       	ldi	r22, 0x01	; 1
   10f9e:	4d e2       	ldi	r20, 0x2D	; 45
   10fa0:	50 e2       	ldi	r21, 0x20	; 32
   10fa2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				IsMessage00=False;
   10fa6:	10 92 a0 01 	sts	0x01A0, r1
				TimLocAcc=0;
   10faa:	10 92 bc 01 	sts	0x01BC, r1
				iLoop=0;iPos=0;iWait=0;
   10fae:	10 92 8a 02 	sts	0x028A, r1
   10fb2:	10 92 89 02 	sts	0x0289, r1
   10fb6:	10 92 9b 02 	sts	0x029B, r1
   10fba:	10 92 9a 02 	sts	0x029A, r1
				stLocalAccount=laWaitMessage00;
   10fbe:	87 e1       	ldi	r24, 0x17	; 23
   10fc0:	50 c9       	rjmp	.-3424   	; 0x10262 <FMenuLocalAccount+0x180>
		        break;
           case laWaitMessage00:
                iLoop++;
   10fc2:	80 91 89 02 	lds	r24, 0x0289
   10fc6:	90 91 8a 02 	lds	r25, 0x028A
   10fca:	01 96       	adiw	r24, 0x01	; 1
   10fcc:	90 93 8a 02 	sts	0x028A, r25
   10fd0:	80 93 89 02 	sts	0x0289, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   10fd4:	68 e9       	ldi	r22, 0x98	; 152
   10fd6:	7a e3       	ldi	r23, 0x3A	; 58
   10fd8:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
   10fdc:	89 2b       	or	r24, r25
   10fde:	e1 f4       	brne	.+56     	; 0x11018 <FMenuLocalAccount+0xf36>
				   if (iPos<5){
   10fe0:	60 91 9b 02 	lds	r22, 0x029B
   10fe4:	65 30       	cpi	r22, 0x05	; 5
   10fe6:	58 f4       	brcc	.+22     	; 0x10ffe <FMenuLocalAccount+0xf1c>
				       iPos++;
   10fe8:	6f 5f       	subi	r22, 0xFF	; 255
   10fea:	60 93 9b 02 	sts	0x029B, r22
					   lcd_xy(3,(14+iPos));_lcd('.');
   10fee:	62 5f       	subi	r22, 0xF2	; 242
   10ff0:	83 e0       	ldi	r24, 0x03	; 3
   10ff2:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
   10ff6:	8e e2       	ldi	r24, 0x2E	; 46
   10ff8:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
   10ffc:	0d c0       	rjmp	.+26     	; 0x11018 <FMenuLocalAccount+0xf36>
					   }
				   else{
				       iPos=0;
   10ffe:	10 92 9b 02 	sts	0x029B, r1
					   lcd_printf(3,(14+iPos),PSTR("       "));
   11002:	83 e0       	ldi	r24, 0x03	; 3
   11004:	6e e0       	ldi	r22, 0x0E	; 14
   11006:	45 e2       	ldi	r20, 0x25	; 37
   11008:	50 e2       	ldi	r21, 0x20	; 32
   1100a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					   iWait++;
   1100e:	80 91 9a 02 	lds	r24, 0x029A
   11012:	8f 5f       	subi	r24, 0xFF	; 255
   11014:	80 93 9a 02 	sts	0x029A, r24
					   }
				}
				if (iWait>5){
   11018:	80 91 9a 02 	lds	r24, 0x029A
   1101c:	86 30       	cpi	r24, 0x06	; 6
   1101e:	50 f0       	brcs	.+20     	; 0x11034 <FMenuLocalAccount+0xf52>
				    stLocalAccount=laConTimout;
   11020:	84 e0       	ldi	r24, 0x04	; 4
   11022:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   11026:	10 92 bc 01 	sts	0x01BC, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1102a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1102c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1102e:	82 e0       	ldi	r24, 0x02	; 2
   11030:	80 93 be 01 	sts	0x01BE, r24
				if (iWait>5){
				    stLocalAccount=laConTimout;
					TimLocAcc=0;
					system_beep(2);
				    }
				if (IsMessage00==True){
   11034:	80 91 a0 01 	lds	r24, 0x01A0
   11038:	81 30       	cpi	r24, 0x01	; 1
   1103a:	09 f0       	breq	.+2      	; 0x1103e <FMenuLocalAccount+0xf5c>
   1103c:	35 c1       	rjmp	.+618    	; 0x112a8 <FMenuLocalAccount+0x11c6>
                    IsMessage00=False;
   1103e:	10 92 a0 01 	sts	0x01A0, r1
				    stLocalAccount=laProcMessage00;
   11042:	88 e1       	ldi	r24, 0x18	; 24
   11044:	0e c9       	rjmp	.-3556   	; 0x10262 <FMenuLocalAccount+0x180>
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   11046:	80 91 23 09 	lds	r24, 0x0923
   1104a:	81 30       	cpi	r24, 0x01	; 1
   1104c:	51 f4       	brne	.+20     	; 0x11062 <FMenuLocalAccount+0xf80>
   1104e:	80 91 8b 01 	lds	r24, 0x018B
   11052:	90 91 8c 01 	lds	r25, 0x018C
   11056:	8f 97       	sbiw	r24, 0x2f	; 47
   11058:	21 f4       	brne	.+8      	; 0x11062 <FMenuLocalAccount+0xf80>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
   1105a:	80 91 48 09 	lds	r24, 0x0948
   1105e:	80 53       	subi	r24, 0x30	; 48
   11060:	01 c0       	rjmp	.+2      	; 0x11064 <FMenuLocalAccount+0xf82>
   11062:	80 e0       	ldi	r24, 0x00	; 0
                    IsMessage00=False;
				    stLocalAccount=laProcMessage00;
					}
		        break;
           case laProcMessage00:
		        LocAccStatus=procMessage00();
   11064:	80 93 9c 02 	sts	0x029C, r24
                lcd_clear();
   11068:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		        switch(LocAccStatus){
   1106c:	10 91 9c 02 	lds	r17, 0x029C
   11070:	11 30       	cpi	r17, 0x01	; 1
   11072:	59 f0       	breq	.+22     	; 0x1108a <FMenuLocalAccount+0xfa8>
   11074:	11 30       	cpi	r17, 0x01	; 1
   11076:	20 f0       	brcs	.+8      	; 0x11080 <FMenuLocalAccount+0xf9e>
   11078:	13 30       	cpi	r17, 0x03	; 3
   1107a:	09 f0       	breq	.+2      	; 0x1107e <FMenuLocalAccount+0xf9c>
   1107c:	c0 c0       	rjmp	.+384    	; 0x111fe <FMenuLocalAccount+0x111c>
   1107e:	1b c0       	rjmp	.+54     	; 0x110b6 <FMenuLocalAccount+0xfd4>
				case MSG00_NACK:
                     lcd_printf(2,1,PSTR("Authorisasi Gagal   "));
   11080:	82 e0       	ldi	r24, 0x02	; 2
   11082:	61 e0       	ldi	r22, 0x01	; 1
   11084:	40 e1       	ldi	r20, 0x10	; 16
   11086:	50 e2       	ldi	r21, 0x20	; 32
   11088:	1a c0       	rjmp	.+52     	; 0x110be <FMenuLocalAccount+0xfdc>
					 system_beep(2); 
					 stLocalAccount=laDelayExit;
				     break;
                case MSG00_ACK:
				     lcd_printf(2,1,PSTR("Authorisasi Berhasil"));
   1108a:	82 e0       	ldi	r24, 0x02	; 2
   1108c:	61 e0       	ldi	r22, 0x01	; 1
   1108e:	4b ef       	ldi	r20, 0xFB	; 251
   11090:	5f e1       	ldi	r21, 0x1F	; 31
   11092:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				     LocalAccountFIP[nLocalAccount]=FIP_Used;
   11096:	90 91 8f 01 	lds	r25, 0x018F
   1109a:	e9 2f       	mov	r30, r25
   1109c:	f0 e0       	ldi	r31, 0x00	; 0
   1109e:	e4 5a       	subi	r30, 0xA4	; 164
   110a0:	fc 4f       	sbci	r31, 0xFC	; 252
   110a2:	80 91 8d 02 	lds	r24, 0x028D
   110a6:	80 83       	st	Z, r24
					 nLocalAccount++;
   110a8:	9f 5f       	subi	r25, 0xFF	; 255
   110aa:	90 93 8f 01 	sts	0x018F, r25
					 IsViewFillingFIP=True;
   110ae:	10 93 98 01 	sts	0x0198, r17
					 stLocalAccount=laViewStatus;
   110b2:	86 e1       	ldi	r24, 0x16	; 22
   110b4:	a2 c0       	rjmp	.+324    	; 0x111fa <FMenuLocalAccount+0x1118>
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
   110b6:	82 e0       	ldi	r24, 0x02	; 2
   110b8:	61 e0       	ldi	r22, 0x01	; 1
   110ba:	48 ee       	ldi	r20, 0xE8	; 232
   110bc:	5f e1       	ldi	r21, 0x1F	; 31
   110be:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   110c2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   110c4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   110c6:	82 e0       	ldi	r24, 0x02	; 2
   110c8:	80 93 be 01 	sts	0x01BE, r24
					 stLocalAccount=laViewStatus;
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
					 system_beep(2);
					 stLocalAccount=laDelayExit;
   110cc:	8f e1       	ldi	r24, 0x1F	; 31
   110ce:	95 c0       	rjmp	.+298    	; 0x111fa <FMenuLocalAccount+0x1118>
				     break;
				}
				TimLocAcc=0;				
		        break;
           case laViewStatus:
                if (TimLocAcc>20)stLocalAccount=laExitLocAcc;//laDisplayTransaction;
   110d0:	80 91 bc 01 	lds	r24, 0x01BC
   110d4:	85 31       	cpi	r24, 0x15	; 21
   110d6:	08 f4       	brcc	.+2      	; 0x110da <FMenuLocalAccount+0xff8>
   110d8:	e7 c0       	rjmp	.+462    	; 0x112a8 <FMenuLocalAccount+0x11c6>
   110da:	d4 c0       	rjmp	.+424    	; 0x11284 <FMenuLocalAccount+0x11a2>
		        break; 
           case laDisplayTransaction:
		        lcd_clear();
   110dc:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
                sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct); lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   110e0:	2d b7       	in	r18, 0x3d	; 61
   110e2:	3e b7       	in	r19, 0x3e	; 62
   110e4:	28 50       	subi	r18, 0x08	; 8
   110e6:	30 40       	sbci	r19, 0x00	; 0
   110e8:	0f b6       	in	r0, 0x3f	; 63
   110ea:	f8 94       	cli
   110ec:	3e bf       	out	0x3e, r19	; 62
   110ee:	0f be       	out	0x3f, r0	; 63
   110f0:	2d bf       	out	0x3d, r18	; 61
   110f2:	ed b7       	in	r30, 0x3d	; 61
   110f4:	fe b7       	in	r31, 0x3e	; 62
   110f6:	31 96       	adiw	r30, 0x01	; 1
   110f8:	ac e0       	ldi	r26, 0x0C	; 12
   110fa:	ea 2e       	mov	r14, r26
   110fc:	f1 2c       	mov	r15, r1
   110fe:	ec 0e       	add	r14, r28
   11100:	fd 1e       	adc	r15, r29
   11102:	ad b7       	in	r26, 0x3d	; 61
   11104:	be b7       	in	r27, 0x3e	; 62
   11106:	12 96       	adiw	r26, 0x02	; 2
   11108:	fc 92       	st	X, r15
   1110a:	ee 92       	st	-X, r14
   1110c:	11 97       	sbiw	r26, 0x01	; 1
   1110e:	80 ee       	ldi	r24, 0xE0	; 224
   11110:	9f e1       	ldi	r25, 0x1F	; 31
   11112:	93 83       	std	Z+3, r25	; 0x03
   11114:	82 83       	std	Z+2, r24	; 0x02
   11116:	86 e9       	ldi	r24, 0x96	; 150
   11118:	92 e0       	ldi	r25, 0x02	; 2
   1111a:	95 83       	std	Z+5, r25	; 0x05
   1111c:	84 83       	std	Z+4, r24	; 0x04
   1111e:	84 e6       	ldi	r24, 0x64	; 100
   11120:	97 e0       	ldi	r25, 0x07	; 7
   11122:	97 83       	std	Z+7, r25	; 0x07
   11124:	86 83       	std	Z+6, r24	; 0x06
   11126:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   1112a:	ed b7       	in	r30, 0x3d	; 61
   1112c:	fe b7       	in	r31, 0x3e	; 62
   1112e:	38 96       	adiw	r30, 0x08	; 8
   11130:	0f b6       	in	r0, 0x3f	; 63
   11132:	f8 94       	cli
   11134:	fe bf       	out	0x3e, r31	; 62
   11136:	0f be       	out	0x3f, r0	; 63
   11138:	ed bf       	out	0x3d, r30	; 61
   1113a:	81 e0       	ldi	r24, 0x01	; 1
   1113c:	61 e0       	ldi	r22, 0x01	; 1
   1113e:	a7 01       	movw	r20, r14
   11140:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);        lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   11144:	00 d0       	rcall	.+0      	; 0x11146 <FMenuLocalAccount+0x1064>
   11146:	00 d0       	rcall	.+0      	; 0x11148 <FMenuLocalAccount+0x1066>
   11148:	00 d0       	rcall	.+0      	; 0x1114a <FMenuLocalAccount+0x1068>
   1114a:	ed b7       	in	r30, 0x3d	; 61
   1114c:	fe b7       	in	r31, 0x3e	; 62
   1114e:	31 96       	adiw	r30, 0x01	; 1
   11150:	ad b7       	in	r26, 0x3d	; 61
   11152:	be b7       	in	r27, 0x3e	; 62
   11154:	12 96       	adiw	r26, 0x02	; 2
   11156:	fc 92       	st	X, r15
   11158:	ee 92       	st	-X, r14
   1115a:	11 97       	sbiw	r26, 0x01	; 1
   1115c:	8d ed       	ldi	r24, 0xDD	; 221
   1115e:	9f e1       	ldi	r25, 0x1F	; 31
   11160:	93 83       	std	Z+3, r25	; 0x03
   11162:	82 83       	std	Z+2, r24	; 0x02
   11164:	85 e2       	ldi	r24, 0x25	; 37
   11166:	9c e0       	ldi	r25, 0x0C	; 12
   11168:	95 83       	std	Z+5, r25	; 0x05
   1116a:	84 83       	std	Z+4, r24	; 0x04
   1116c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   11170:	ed b7       	in	r30, 0x3d	; 61
   11172:	fe b7       	in	r31, 0x3e	; 62
   11174:	36 96       	adiw	r30, 0x06	; 6
   11176:	0f b6       	in	r0, 0x3f	; 63
   11178:	f8 94       	cli
   1117a:	fe bf       	out	0x3e, r31	; 62
   1117c:	0f be       	out	0x3f, r0	; 63
   1117e:	ed bf       	out	0x3d, r30	; 61
   11180:	81 e0       	ldi	r24, 0x01	; 1
   11182:	6f e0       	ldi	r22, 0x0F	; 15
   11184:	a7 01       	movw	r20, r14
   11186:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
                RemSpaceLead(strCardID);
   1118a:	0f e8       	ldi	r16, 0x8F	; 143
   1118c:	1b e0       	ldi	r17, 0x0B	; 11
   1118e:	c8 01       	movw	r24, r16
   11190:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <RemSpaceLead>
				sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);          lcd_print(2,1,lcdteks);
   11194:	00 d0       	rcall	.+0      	; 0x11196 <FMenuLocalAccount+0x10b4>
   11196:	00 d0       	rcall	.+0      	; 0x11198 <FMenuLocalAccount+0x10b6>
   11198:	00 d0       	rcall	.+0      	; 0x1119a <FMenuLocalAccount+0x10b8>
   1119a:	ed b7       	in	r30, 0x3d	; 61
   1119c:	fe b7       	in	r31, 0x3e	; 62
   1119e:	31 96       	adiw	r30, 0x01	; 1
   111a0:	ad b7       	in	r26, 0x3d	; 61
   111a2:	be b7       	in	r27, 0x3e	; 62
   111a4:	12 96       	adiw	r26, 0x02	; 2
   111a6:	fc 92       	st	X, r15
   111a8:	ee 92       	st	-X, r14
   111aa:	11 97       	sbiw	r26, 0x01	; 1
   111ac:	86 ed       	ldi	r24, 0xD6	; 214
   111ae:	9f e1       	ldi	r25, 0x1F	; 31
   111b0:	93 83       	std	Z+3, r25	; 0x03
   111b2:	82 83       	std	Z+2, r24	; 0x02
   111b4:	15 83       	std	Z+5, r17	; 0x05
   111b6:	04 83       	std	Z+4, r16	; 0x04
   111b8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   111bc:	ed b7       	in	r30, 0x3d	; 61
   111be:	fe b7       	in	r31, 0x3e	; 62
   111c0:	36 96       	adiw	r30, 0x06	; 6
   111c2:	0f b6       	in	r0, 0x3f	; 63
   111c4:	f8 94       	cli
   111c6:	fe bf       	out	0x3e, r31	; 62
   111c8:	0f be       	out	0x3f, r0	; 63
   111ca:	ed bf       	out	0x3d, r30	; 61
   111cc:	82 e0       	ldi	r24, 0x02	; 2
   111ce:	61 e0       	ldi	r22, 0x01	; 1
   111d0:	a7 01       	movw	r20, r14
   111d2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
				TimLocAcc=0;
   111d6:	10 92 bc 01 	sts	0x01BC, r1
		        IsCompleteFilling=False;
   111da:	10 92 ab 01 	sts	0x01AB, r1
				stLocalAccount=laWaitFilling;
   111de:	8d e1       	ldi	r24, 0x1D	; 29
   111e0:	40 c8       	rjmp	.-3968   	; 0x10262 <FMenuLocalAccount+0x180>
		        break; 
           case laWaitFilling:
				if ((IsCompleteFilling==True)||(TimLocAcc>FILLING_TIMOUT)){
   111e2:	80 91 ab 01 	lds	r24, 0x01AB
   111e6:	81 30       	cpi	r24, 0x01	; 1
   111e8:	29 f0       	breq	.+10     	; 0x111f4 <FMenuLocalAccount+0x1112>
   111ea:	80 91 bc 01 	lds	r24, 0x01BC
   111ee:	8b 30       	cpi	r24, 0x0B	; 11
   111f0:	08 f4       	brcc	.+2      	; 0x111f4 <FMenuLocalAccount+0x1112>
   111f2:	5a c0       	rjmp	.+180    	; 0x112a8 <FMenuLocalAccount+0x11c6>
				    IsCompleteFilling=False;
   111f4:	10 92 ab 01 	sts	0x01AB, r1
				    stLocalAccount=laSuccessTransaction;
   111f8:	89 e1       	ldi	r24, 0x19	; 25
   111fa:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   111fe:	10 92 bc 01 	sts	0x01BC, r1
   11202:	52 c0       	rjmp	.+164    	; 0x112a8 <FMenuLocalAccount+0x11c6>
					}
		        break;
           case laSuccessTransaction:
				lcd_clear();lcd_printf(2,1,PSTR("Transaksi Selesai"));
   11204:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
   11208:	82 e0       	ldi	r24, 0x02	; 2
   1120a:	61 e0       	ldi	r22, 0x01	; 1
   1120c:	44 ec       	ldi	r20, 0xC4	; 196
   1120e:	5f e1       	ldi	r21, 0x1F	; 31
   11210:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				//Show Status FIP
				sprintf_P(lcdteks,PSTR("Fueling @FIP:#%d"),FIP_Used);
   11214:	00 d0       	rcall	.+0      	; 0x11216 <FMenuLocalAccount+0x1134>
   11216:	00 d0       	rcall	.+0      	; 0x11218 <FMenuLocalAccount+0x1136>
   11218:	00 d0       	rcall	.+0      	; 0x1121a <FMenuLocalAccount+0x1138>
   1121a:	ed b7       	in	r30, 0x3d	; 61
   1121c:	fe b7       	in	r31, 0x3e	; 62
   1121e:	31 96       	adiw	r30, 0x01	; 1
   11220:	8e 01       	movw	r16, r28
   11222:	04 5f       	subi	r16, 0xF4	; 244
   11224:	1f 4f       	sbci	r17, 0xFF	; 255
   11226:	ad b7       	in	r26, 0x3d	; 61
   11228:	be b7       	in	r27, 0x3e	; 62
   1122a:	12 96       	adiw	r26, 0x02	; 2
   1122c:	1c 93       	st	X, r17
   1122e:	0e 93       	st	-X, r16
   11230:	11 97       	sbiw	r26, 0x01	; 1
   11232:	83 eb       	ldi	r24, 0xB3	; 179
   11234:	9f e1       	ldi	r25, 0x1F	; 31
   11236:	93 83       	std	Z+3, r25	; 0x03
   11238:	82 83       	std	Z+2, r24	; 0x02
   1123a:	80 91 8d 02 	lds	r24, 0x028D
   1123e:	84 83       	std	Z+4, r24	; 0x04
   11240:	15 82       	std	Z+5, r1	; 0x05
   11242:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				lcd_print(3,1,lcdteks);
   11246:	ed b7       	in	r30, 0x3d	; 61
   11248:	fe b7       	in	r31, 0x3e	; 62
   1124a:	36 96       	adiw	r30, 0x06	; 6
   1124c:	0f b6       	in	r0, 0x3f	; 63
   1124e:	f8 94       	cli
   11250:	fe bf       	out	0x3e, r31	; 62
   11252:	0f be       	out	0x3f, r0	; 63
   11254:	ed bf       	out	0x3d, r30	; 61
   11256:	83 e0       	ldi	r24, 0x03	; 3
   11258:	61 e0       	ldi	r22, 0x01	; 1
   1125a:	a8 01       	movw	r20, r16
   1125c:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
   11260:	08 c0       	rjmp	.+16     	; 0x11272 <FMenuLocalAccount+0x1190>
		        TimLocAcc=0;
		        //Show Failed Report
				stLocalAccount=laDelayExit;
		        break;
           case laMenuTimeout:
		        lcd_clear();
   11262:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
				lcd_printf(2,1,PSTR("  Timeout..! "));
   11266:	82 e0       	ldi	r24, 0x02	; 2
   11268:	61 e0       	ldi	r22, 0x01	; 1
   1126a:	45 ea       	ldi	r20, 0xA5	; 165
   1126c:	5f e1       	ldi	r21, 0x1F	; 31
   1126e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
                TimLocAcc=0;
   11272:	10 92 bc 01 	sts	0x01BC, r1
				stLocalAccount=laDelayExit;
   11276:	8f e1       	ldi	r24, 0x1F	; 31
   11278:	0c 94 31 81 	jmp	0x10262	; 0x10262 <FMenuLocalAccount+0x180>
				break;
           case laDelayExit:
		        if (TimLocAcc>15)
   1127c:	80 91 bc 01 	lds	r24, 0x01BC
   11280:	80 31       	cpi	r24, 0x10	; 16
   11282:	90 f0       	brcs	.+36     	; 0x112a8 <FMenuLocalAccount+0x11c6>
				    stLocalAccount=laExitLocAcc;
   11284:	80 e2       	ldi	r24, 0x20	; 32
   11286:	0c 94 31 81 	jmp	0x10262	; 0x10262 <FMenuLocalAccount+0x180>
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
				ClearMem(strOdometer);
   1128a:	89 ec       	ldi	r24, 0xC9	; 201
   1128c:	93 e0       	ldi	r25, 0x03	; 3
   1128e:	0e 94 61 a6 	call	0x14cc2	; 0x14cc2 <ClearMem>
	            ClearMem(strLicPlate);
   11292:	80 e0       	ldi	r24, 0x00	; 0
   11294:	99 e0       	ldi	r25, 0x09	; 9
   11296:	0e 94 61 a6 	call	0x14cc2	; 0x14cc2 <ClearMem>
				stLocalAccount=laInit;
   1129a:	81 e0       	ldi	r24, 0x01	; 1
   1129c:	80 93 5b 01 	sts	0x015B, r24
				lcd_clear();
   112a0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
   112a4:	81 e0       	ldi	r24, 0x01	; 1
   112a6:	01 c0       	rjmp	.+2      	; 0x112aa <FMenuLocalAccount+0x11c8>
   112a8:	80 e0       	ldi	r24, 0x00	; 0
		        break;
	       }//EndSwitch
    return Result;
}
   112aa:	e4 96       	adiw	r28, 0x34	; 52
   112ac:	0f b6       	in	r0, 0x3f	; 63
   112ae:	f8 94       	cli
   112b0:	de bf       	out	0x3e, r29	; 62
   112b2:	0f be       	out	0x3f, r0	; 63
   112b4:	cd bf       	out	0x3d, r28	; 61
   112b6:	cf 91       	pop	r28
   112b8:	df 91       	pop	r29
   112ba:	1f 91       	pop	r17
   112bc:	0f 91       	pop	r16
   112be:	ff 90       	pop	r15
   112c0:	ef 90       	pop	r14
   112c2:	df 90       	pop	r13
   112c4:	cf 90       	pop	r12
   112c6:	bf 90       	pop	r11
   112c8:	af 90       	pop	r10
   112ca:	9f 90       	pop	r9
   112cc:	8f 90       	pop	r8
   112ce:	7f 90       	pop	r7
   112d0:	6f 90       	pop	r6
   112d2:	08 95       	ret

000112d4 <sendMessage32>:
	sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("F968CFFB"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/IFTSendMessage(MSG_32);
   112d4:	82 e3       	ldi	r24, 0x32	; 50
   112d6:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   112da:	08 95       	ret

000112dc <FMenuChangeMOP>:
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
   112dc:	af 92       	push	r10
   112de:	bf 92       	push	r11
   112e0:	cf 92       	push	r12
   112e2:	df 92       	push	r13
   112e4:	ef 92       	push	r14
   112e6:	ff 92       	push	r15
   112e8:	0f 93       	push	r16
   112ea:	1f 93       	push	r17
   112ec:	df 93       	push	r29
   112ee:	cf 93       	push	r28
   112f0:	cd b7       	in	r28, 0x3d	; 61
   112f2:	de b7       	in	r29, 0x3e	; 62
   112f4:	a3 97       	sbiw	r28, 0x23	; 35
   112f6:	0f b6       	in	r0, 0x3f	; 63
   112f8:	f8 94       	cli
   112fa:	de bf       	out	0x3e, r29	; 62
   112fc:	0f be       	out	0x3f, r0	; 63
   112fe:	cd bf       	out	0x3d, r28	; 61
       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
	 switch(stChangeMOP){
   11300:	80 91 64 02 	lds	r24, 0x0264
   11304:	e8 2f       	mov	r30, r24
   11306:	f0 e0       	ldi	r31, 0x00	; 0
   11308:	ee 31       	cpi	r30, 0x1E	; 30
   1130a:	f1 05       	cpc	r31, r1
   1130c:	08 f0       	brcs	.+2      	; 0x11310 <FMenuChangeMOP+0x34>
   1130e:	fe c3       	rjmp	.+2044   	; 0x11b0c <FMenuChangeMOP+0x830>
   11310:	e0 55       	subi	r30, 0x50	; 80
   11312:	ff 4f       	sbci	r31, 0xFF	; 255
   11314:	ee 0f       	add	r30, r30
   11316:	ff 1f       	adc	r31, r31
   11318:	05 90       	lpm	r0, Z+
   1131a:	f4 91       	lpm	r31, Z+
   1131c:	e0 2d       	mov	r30, r0
   1131e:	09 94       	ijmp
	 case cmInit:
	      MOPType=PAY_NONE;
   11320:	85 e0       	ldi	r24, 0x05	; 5
   11322:	80 93 ba 01 	sts	0x01BA, r24
   11326:	30 c1       	rjmp	.+608    	; 0x11588 <FMenuChangeMOP+0x2ac>
		  stChangeMOP=cmDisplayMOPOption;
	      break;
	 case cmDisplayMOPOption: //12345678901234567890
	      lcd_clear();
   11328:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	      lcd_printf(1,1,PSTR("   Select Payment   "));
   1132c:	81 e0       	ldi	r24, 0x01	; 1
   1132e:	61 e0       	ldi	r22, 0x01	; 1
   11330:	47 e0       	ldi	r20, 0x07	; 7
   11332:	5c e1       	ldi	r21, 0x1C	; 28
   11334:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(2,1,PSTR("1.Account 3.Voucher "));
   11338:	82 e0       	ldi	r24, 0x02	; 2
   1133a:	61 e0       	ldi	r22, 0x01	; 1
   1133c:	42 ef       	ldi	r20, 0xF2	; 242
   1133e:	5b e1       	ldi	r21, 0x1B	; 27
   11340:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(3,1,PSTR("2.Bank    4.PumpTest"));
   11344:	83 e0       	ldi	r24, 0x03	; 3
   11346:	61 e0       	ldi	r22, 0x01	; 1
   11348:	4d ed       	ldi	r20, 0xDD	; 221
   1134a:	5b e1       	ldi	r21, 0x1B	; 27
   1134c:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
   11350:	84 e0       	ldi	r24, 0x04	; 4
   11352:	61 e0       	ldi	r22, 0x01	; 1
   11354:	48 ec       	ldi	r20, 0xC8	; 200
   11356:	5b e1       	ldi	r21, 0x1B	; 27
   11358:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stChangeMOP=cmInputMOP;		 
   1135c:	82 e0       	ldi	r24, 0x02	; 2
   1135e:	94 c1       	rjmp	.+808    	; 0x11688 <FMenuChangeMOP+0x3ac>
		  break;
	 case cmInputMOP:
	      KeyPressed=_key_scan(1);
   11360:	81 e0       	ldi	r24, 0x01	; 1
   11362:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   11366:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   11368:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
   1136c:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
   1136e:	81 53       	subi	r24, 0x31	; 49
   11370:	84 30       	cpi	r24, 0x04	; 4
   11372:	f0 f4       	brcc	.+60     	; 0x113b0 <FMenuChangeMOP+0xd4>
              switch(KeyChar){
   11374:	92 33       	cpi	r25, 0x32	; 50
   11376:	61 f0       	breq	.+24     	; 0x11390 <FMenuChangeMOP+0xb4>
   11378:	93 33       	cpi	r25, 0x33	; 51
   1137a:	18 f4       	brcc	.+6      	; 0x11382 <FMenuChangeMOP+0xa6>
   1137c:	91 33       	cpi	r25, 0x31	; 49
   1137e:	c1 f4       	brne	.+48     	; 0x113b0 <FMenuChangeMOP+0xd4>
   11380:	05 c0       	rjmp	.+10     	; 0x1138c <FMenuChangeMOP+0xb0>
   11382:	93 33       	cpi	r25, 0x33	; 51
   11384:	51 f0       	breq	.+20     	; 0x1139a <FMenuChangeMOP+0xbe>
   11386:	94 33       	cpi	r25, 0x34	; 52
   11388:	99 f4       	brne	.+38     	; 0x113b0 <FMenuChangeMOP+0xd4>
   1138a:	0c c0       	rjmp	.+24     	; 0x113a4 <FMenuChangeMOP+0xc8>
		        case '1':MOPType=PAY_ACCOUNT; stChangeMOP=cmSelectFIP;         break;
   1138c:	81 e0       	ldi	r24, 0x01	; 1
   1138e:	0b c0       	rjmp	.+22     	; 0x113a6 <FMenuChangeMOP+0xca>
		        case '2':MOPType=PAY_BANK;    stChangeMOP=cmSelectBankName;    break;
   11390:	82 e0       	ldi	r24, 0x02	; 2
   11392:	80 93 ba 01 	sts	0x01BA, r24
   11396:	8b e0       	ldi	r24, 0x0B	; 11
   11398:	09 c0       	rjmp	.+18     	; 0x113ac <FMenuChangeMOP+0xd0>
		        case '3':MOPType=PAY_VOUCHER; stChangeMOP=cmDispInputVoucher;  break;
   1139a:	83 e0       	ldi	r24, 0x03	; 3
   1139c:	80 93 ba 01 	sts	0x01BA, r24
   113a0:	8f e0       	ldi	r24, 0x0F	; 15
   113a2:	04 c0       	rjmp	.+8      	; 0x113ac <FMenuChangeMOP+0xd0>
		        case '4':MOPType=PAY_PUMPTEST;stChangeMOP=cmSelectFIP;         break;
   113a4:	84 e0       	ldi	r24, 0x04	; 4
   113a6:	80 93 ba 01 	sts	0x01BA, r24
   113aa:	89 e0       	ldi	r24, 0x09	; 9
   113ac:	80 93 64 02 	sts	0x0264, r24
		     }
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmExitChangeMOP;
   113b0:	17 3e       	cpi	r17, 0xE7	; 231
   113b2:	09 f0       	breq	.+2      	; 0x113b6 <FMenuChangeMOP+0xda>
   113b4:	ab c3       	rjmp	.+1878   	; 0x11b0c <FMenuChangeMOP+0x830>
   113b6:	a2 c3       	rjmp	.+1860   	; 0x11afc <FMenuChangeMOP+0x820>
	      break;
	 case cmDispInputVoucher://Enter Voucher number
          lcd_clear();
   113b8:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("Kode Voucher"));
   113bc:	81 e0       	ldi	r24, 0x01	; 1
   113be:	61 e0       	ldi	r22, 0x01	; 1
   113c0:	4b eb       	ldi	r20, 0xBB	; 187
   113c2:	5b e1       	ldi	r21, 0x1B	; 27
   113c4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
   113c8:	82 e0       	ldi	r24, 0x02	; 2
   113ca:	61 e0       	ldi	r22, 0x01	; 1
   113cc:	49 eb       	ldi	r20, 0xB9	; 185
   113ce:	5b e1       	ldi	r21, 0x1B	; 27
   113d0:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   113d4:	84 e0       	ldi	r24, 0x04	; 4
   113d6:	61 e0       	ldi	r22, 0x01	; 1
   113d8:	44 ea       	ldi	r20, 0xA4	; 164
   113da:	5b e1       	ldi	r21, 0x1B	; 27
   113dc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
   113e0:	e2 e4       	ldi	r30, 0x42	; 66
   113e2:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   113e4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   113e6:	8c e0       	ldi	r24, 0x0C	; 12
   113e8:	e7 35       	cpi	r30, 0x57	; 87
   113ea:	f8 07       	cpc	r31, r24
   113ec:	d9 f7       	brne	.-10     	; 0x113e4 <FMenuChangeMOP+0x108>
          lcd_clear();
		  lcd_printf(1,1,PSTR("Kode Voucher"));
		  lcd_printf(2,1,PSTR("_"));
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
		  FillChar(strVoucherNum,sizeof(strVoucherNum),0);
          stChangeMOP=cmInputVoucher;		  
   113ee:	87 e0       	ldi	r24, 0x07	; 7
   113f0:	4b c1       	rjmp	.+662    	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
     case cmInputVoucher:
          uiResult=UserInput(UI_NUMBER_R,2,1,strVoucherNum,0,13);
   113f2:	81 e0       	ldi	r24, 0x01	; 1
   113f4:	62 e0       	ldi	r22, 0x02	; 2
   113f6:	41 e0       	ldi	r20, 0x01	; 1
   113f8:	22 e4       	ldi	r18, 0x42	; 66
   113fa:	3c e0       	ldi	r19, 0x0C	; 12
   113fc:	00 e0       	ldi	r16, 0x00	; 0
   113fe:	10 e0       	ldi	r17, 0x00	; 0
   11400:	9d e0       	ldi	r25, 0x0D	; 13
   11402:	e9 2e       	mov	r14, r25
   11404:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
	      if (uiResult==USER_OK){
   11408:	83 30       	cpi	r24, 0x03	; 3
   1140a:	11 f4       	brne	.+4      	; 0x11410 <FMenuChangeMOP+0x134>
		     stChangeMOP=cmSelectFIP;
   1140c:	89 e0       	ldi	r24, 0x09	; 9
   1140e:	3c c1       	rjmp	.+632    	; 0x11688 <FMenuChangeMOP+0x3ac>
			 }
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmDisplayMOPOption;
   11410:	81 30       	cpi	r24, 0x01	; 1
   11412:	09 f4       	brne	.+2      	; 0x11416 <FMenuChangeMOP+0x13a>
   11414:	39 c1       	rjmp	.+626    	; 0x11688 <FMenuChangeMOP+0x3ac>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   11416:	84 30       	cpi	r24, 0x04	; 4
   11418:	21 f4       	brne	.+8      	; 0x11422 <FMenuChangeMOP+0x146>
   1141a:	61 e0       	ldi	r22, 0x01	; 1
   1141c:	4f e8       	ldi	r20, 0x8F	; 143
   1141e:	5b e1       	ldi	r21, 0x1B	; 27
   11420:	1b c1       	rjmp	.+566    	; 0x11658 <FMenuChangeMOP+0x37c>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11422:	85 30       	cpi	r24, 0x05	; 5
   11424:	09 f0       	breq	.+2      	; 0x11428 <FMenuChangeMOP+0x14c>
   11426:	72 c3       	rjmp	.+1764   	; 0x11b0c <FMenuChangeMOP+0x830>
   11428:	84 e0       	ldi	r24, 0x04	; 4
   1142a:	61 e0       	ldi	r22, 0x01	; 1
   1142c:	4a e7       	ldi	r20, 0x7A	; 122
   1142e:	5b e1       	ldi	r21, 0x1B	; 27
   11430:	13 c1       	rjmp	.+550    	; 0x11658 <FMenuChangeMOP+0x37c>
	      break;
	 case cmSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11432:	83 e6       	ldi	r24, 0x63	; 99
   11434:	92 e0       	ldi	r25, 0x02	; 2
   11436:	6f eb       	ldi	r22, 0xBF	; 191
   11438:	77 e0       	ldi	r23, 0x07	; 7
   1143a:	0e 94 bc 55 	call	0xab78	; 0xab78 <menu_FIP>
		  if (FIPResult==FIP_DONE){
   1143e:	88 23       	and	r24, r24
   11440:	11 f4       	brne	.+4      	; 0x11446 <FMenuChangeMOP+0x16a>
		      //sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
		      stChangeMOP=cmFlowFIP;
   11442:	8e e0       	ldi	r24, 0x0E	; 14
   11444:	21 c1       	rjmp	.+578    	; 0x11688 <FMenuChangeMOP+0x3ac>
		  }
		  else
		  if (FIPResult==FIP_CANCEL){
   11446:	82 30       	cpi	r24, 0x02	; 2
   11448:	09 f0       	breq	.+2      	; 0x1144c <FMenuChangeMOP+0x170>
   1144a:	60 c3       	rjmp	.+1728   	; 0x11b0c <FMenuChangeMOP+0x830>
		      if (MOPType==PAY_ACCOUNT)stChangeMOP=cmDisplayMOPOption;
   1144c:	80 91 ba 01 	lds	r24, 0x01BA
   11450:	81 30       	cpi	r24, 0x01	; 1
   11452:	09 f4       	brne	.+2      	; 0x11456 <FMenuChangeMOP+0x17a>
   11454:	19 c1       	rjmp	.+562    	; 0x11688 <FMenuChangeMOP+0x3ac>
		      if (MOPType==PAY_BANK)stChangeMOP=cmSelectBankName;
   11456:	82 30       	cpi	r24, 0x02	; 2
   11458:	09 f4       	brne	.+2      	; 0x1145c <FMenuChangeMOP+0x180>
   1145a:	ef c0       	rjmp	.+478    	; 0x1163a <FMenuChangeMOP+0x35e>
		      if (MOPType==PAY_VOUCHER)stChangeMOP=cmDispInputVoucher;
   1145c:	83 30       	cpi	r24, 0x03	; 3
   1145e:	11 f4       	brne	.+4      	; 0x11464 <FMenuChangeMOP+0x188>
   11460:	8f e0       	ldi	r24, 0x0F	; 15
   11462:	12 c1       	rjmp	.+548    	; 0x11688 <FMenuChangeMOP+0x3ac>
		      if (MOPType==PAY_PUMPTEST)stChangeMOP=cmDisplayMOPOption;		  
   11464:	84 30       	cpi	r24, 0x04	; 4
   11466:	09 f4       	brne	.+2      	; 0x1146a <FMenuChangeMOP+0x18e>
   11468:	8f c0       	rjmp	.+286    	; 0x11588 <FMenuChangeMOP+0x2ac>
   1146a:	50 c3       	rjmp	.+1696   	; 0x11b0c <FMenuChangeMOP+0x830>
     case cmSelectFIPInput:
		
	      break;
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
   1146c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Bank"));
   11470:	81 e0       	ldi	r24, 0x01	; 1
   11472:	61 e0       	ldi	r22, 0x01	; 1
   11474:	4e e6       	ldi	r20, 0x6E	; 110
   11476:	5b e1       	ldi	r21, 0x1B	; 27
   11478:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   1147c:	10 92 5f 02 	sts	0x025F, r1
   11480:	10 92 5e 02 	sts	0x025E, r1
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   11484:	05 e0       	ldi	r16, 0x05	; 5
   11486:	e0 2e       	mov	r14, r16
   11488:	f1 2c       	mov	r15, r1
   1148a:	ec 0e       	add	r14, r28
   1148c:	fd 1e       	adc	r15, r29
   1148e:	1b e0       	ldi	r17, 0x0B	; 11
   11490:	a1 2e       	mov	r10, r17
   11492:	b1 2c       	mov	r11, r1
			  //if (strlen(strBankName<=10)){ Removed Checking
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   11494:	8e 01       	movw	r16, r28
   11496:	00 5f       	subi	r16, 0xF0	; 240
   11498:	1f 4f       	sbci	r17, 0xFF	; 255
   1149a:	b8 e6       	ldi	r27, 0x68	; 104
   1149c:	cb 2e       	mov	r12, r27
   1149e:	bb e1       	ldi	r27, 0x1B	; 27
   114a0:	db 2e       	mov	r13, r27
   114a2:	51 c0       	rjmp	.+162    	; 0x11546 <FMenuChangeMOP+0x26a>
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   114a4:	8a 9d       	mul	r24, r10
   114a6:	b0 01       	movw	r22, r0
   114a8:	8b 9d       	mul	r24, r11
   114aa:	70 0d       	add	r23, r0
   114ac:	9a 9d       	mul	r25, r10
   114ae:	70 0d       	add	r23, r0
   114b0:	11 24       	eor	r1, r1
   114b2:	62 5f       	subi	r22, 0xF2	; 242
   114b4:	7e 4f       	sbci	r23, 0xFE	; 254
   114b6:	c7 01       	movw	r24, r14
   114b8:	4b e0       	ldi	r20, 0x0B	; 11
   114ba:	50 e0       	ldi	r21, 0x00	; 0
   114bc:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
			  //if (strlen(strBankName<=10)){ Removed Checking
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   114c0:	ad b7       	in	r26, 0x3d	; 61
   114c2:	be b7       	in	r27, 0x3e	; 62
   114c4:	18 97       	sbiw	r26, 0x08	; 8
   114c6:	0f b6       	in	r0, 0x3f	; 63
   114c8:	f8 94       	cli
   114ca:	be bf       	out	0x3e, r27	; 62
   114cc:	0f be       	out	0x3f, r0	; 63
   114ce:	ad bf       	out	0x3d, r26	; 61
   114d0:	ed b7       	in	r30, 0x3d	; 61
   114d2:	fe b7       	in	r31, 0x3e	; 62
   114d4:	31 96       	adiw	r30, 0x01	; 1
   114d6:	12 96       	adiw	r26, 0x02	; 2
   114d8:	1c 93       	st	X, r17
   114da:	0e 93       	st	-X, r16
   114dc:	11 97       	sbiw	r26, 0x01	; 1
   114de:	d3 82       	std	Z+3, r13	; 0x03
   114e0:	c2 82       	std	Z+2, r12	; 0x02
   114e2:	80 91 5e 02 	lds	r24, 0x025E
   114e6:	90 91 5f 02 	lds	r25, 0x025F
   114ea:	01 96       	adiw	r24, 0x01	; 1
   114ec:	95 83       	std	Z+5, r25	; 0x05
   114ee:	84 83       	std	Z+4, r24	; 0x04
   114f0:	f7 82       	std	Z+7, r15	; 0x07
   114f2:	e6 82       	std	Z+6, r14	; 0x06
   114f4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
   114f8:	20 91 5e 02 	lds	r18, 0x025E
   114fc:	30 91 5f 02 	lds	r19, 0x025F
   11500:	ed b7       	in	r30, 0x3d	; 61
   11502:	fe b7       	in	r31, 0x3e	; 62
   11504:	38 96       	adiw	r30, 0x08	; 8
   11506:	0f b6       	in	r0, 0x3f	; 63
   11508:	f8 94       	cli
   1150a:	fe bf       	out	0x3e, r31	; 62
   1150c:	0f be       	out	0x3f, r0	; 63
   1150e:	ed bf       	out	0x3d, r30	; 61
   11510:	82 2f       	mov	r24, r18
   11512:	81 70       	andi	r24, 0x01	; 1
   11514:	36 95       	lsr	r19
   11516:	27 95       	ror	r18
   11518:	b9 01       	movw	r22, r18
   1151a:	66 0f       	add	r22, r22
   1151c:	77 1f       	adc	r23, r23
   1151e:	62 0f       	add	r22, r18
   11520:	73 1f       	adc	r23, r19
   11522:	66 0f       	add	r22, r22
   11524:	77 1f       	adc	r23, r23
   11526:	66 0f       	add	r22, r22
   11528:	77 1f       	adc	r23, r23
   1152a:	6f 5f       	subi	r22, 0xFF	; 255
   1152c:	8e 5f       	subi	r24, 0xFE	; 254
   1152e:	a8 01       	movw	r20, r16
   11530:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   11534:	80 91 5e 02 	lds	r24, 0x025E
   11538:	90 91 5f 02 	lds	r25, 0x025F
   1153c:	01 96       	adiw	r24, 0x01	; 1
   1153e:	90 93 5f 02 	sts	0x025F, r25
   11542:	80 93 5e 02 	sts	0x025E, r24
   11546:	80 91 5e 02 	lds	r24, 0x025E
   1154a:	90 91 5f 02 	lds	r25, 0x025F
   1154e:	84 30       	cpi	r24, 0x04	; 4
   11550:	91 05       	cpc	r25, r1
   11552:	08 f4       	brcc	.+2      	; 0x11556 <FMenuChangeMOP+0x27a>
   11554:	a7 cf       	rjmp	.-178    	; 0x114a4 <FMenuChangeMOP+0x1c8>
			  //if (strlen(strBankName<=10)){ Removed Checking
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
				// }
		  }
	      lcd_printf(4,1,PSTR("[*]Back"));
   11556:	84 e0       	ldi	r24, 0x04	; 4
   11558:	61 e0       	ldi	r22, 0x01	; 1
   1155a:	40 e6       	ldi	r20, 0x60	; 96
   1155c:	5b e1       	ldi	r21, 0x1B	; 27
   1155e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stChangeMOP=cmSelectBankNameInput;
   11562:	8c e0       	ldi	r24, 0x0C	; 12
   11564:	91 c0       	rjmp	.+290    	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
     case cmSelectBankNameInput:
		  KeyPressed=_key_scan(1);
   11566:	81 e0       	ldi	r24, 0x01	; 1
   11568:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   1156c:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   1156e:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
          if ((KeyChar>='1')&&(KeyChar<='4')){
   11572:	81 53       	subi	r24, 0x31	; 49
   11574:	84 30       	cpi	r24, 0x04	; 4
   11576:	28 f4       	brcc	.+10     	; 0x11582 <FMenuChangeMOP+0x2a6>
		      BankIdx=KeyChar-'1';
   11578:	80 93 62 02 	sts	0x0262, r24
			  stChangeMOP=cmSelectFIP;
   1157c:	89 e0       	ldi	r24, 0x09	; 9
   1157e:	80 93 64 02 	sts	0x0264, r24
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmDisplayMOPOption;
   11582:	17 3e       	cpi	r17, 0xE7	; 231
   11584:	09 f0       	breq	.+2      	; 0x11588 <FMenuChangeMOP+0x2ac>
   11586:	c2 c2       	rjmp	.+1412   	; 0x11b0c <FMenuChangeMOP+0x830>
   11588:	81 e0       	ldi	r24, 0x01	; 1
   1158a:	7e c0       	rjmp	.+252    	; 0x11688 <FMenuChangeMOP+0x3ac>

	      break;
     case cmDispBankSurcharge:
	      lcd_clear();
   1158c:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   11590:	65 e0       	ldi	r22, 0x05	; 5
   11592:	e6 2e       	mov	r14, r22
   11594:	f1 2c       	mov	r15, r1
   11596:	ec 0e       	add	r14, r28
   11598:	fd 1e       	adc	r15, r29
   1159a:	60 91 62 02 	lds	r22, 0x0262
   1159e:	8b e0       	ldi	r24, 0x0B	; 11
   115a0:	68 9f       	mul	r22, r24
   115a2:	b0 01       	movw	r22, r0
   115a4:	11 24       	eor	r1, r1
   115a6:	62 5f       	subi	r22, 0xF2	; 242
   115a8:	7e 4f       	sbci	r23, 0xFE	; 254
   115aa:	c7 01       	movw	r24, r14
   115ac:	4b e0       	ldi	r20, 0x0B	; 11
   115ae:	50 e0       	ldi	r21, 0x00	; 0
   115b0:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("%s"),strBankName);
   115b4:	00 d0       	rcall	.+0      	; 0x115b6 <FMenuChangeMOP+0x2da>
   115b6:	00 d0       	rcall	.+0      	; 0x115b8 <FMenuChangeMOP+0x2dc>
   115b8:	00 d0       	rcall	.+0      	; 0x115ba <FMenuChangeMOP+0x2de>
   115ba:	ed b7       	in	r30, 0x3d	; 61
   115bc:	fe b7       	in	r31, 0x3e	; 62
   115be:	31 96       	adiw	r30, 0x01	; 1
   115c0:	8e 01       	movw	r16, r28
   115c2:	00 5f       	subi	r16, 0xF0	; 240
   115c4:	1f 4f       	sbci	r17, 0xFF	; 255
   115c6:	ad b7       	in	r26, 0x3d	; 61
   115c8:	be b7       	in	r27, 0x3e	; 62
   115ca:	12 96       	adiw	r26, 0x02	; 2
   115cc:	1c 93       	st	X, r17
   115ce:	0e 93       	st	-X, r16
   115d0:	11 97       	sbiw	r26, 0x01	; 1
   115d2:	8d e5       	ldi	r24, 0x5D	; 93
   115d4:	9b e1       	ldi	r25, 0x1B	; 27
   115d6:	93 83       	std	Z+3, r25	; 0x03
   115d8:	82 83       	std	Z+2, r24	; 0x02
   115da:	f5 82       	std	Z+5, r15	; 0x05
   115dc:	e4 82       	std	Z+4, r14	; 0x04
   115de:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(1,1,lcdteks);
   115e2:	ed b7       	in	r30, 0x3d	; 61
   115e4:	fe b7       	in	r31, 0x3e	; 62
   115e6:	36 96       	adiw	r30, 0x06	; 6
   115e8:	0f b6       	in	r0, 0x3f	; 63
   115ea:	f8 94       	cli
   115ec:	fe bf       	out	0x3e, r31	; 62
   115ee:	0f be       	out	0x3f, r0	; 63
   115f0:	ed bf       	out	0x3d, r30	; 61
   115f2:	81 e0       	ldi	r24, 0x01	; 1
   115f4:	61 e0       	ldi	r22, 0x01	; 1
   115f6:	a8 01       	movw	r20, r16
   115f8:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(2,1,PSTR("Surcharge:   _%"));
   115fc:	82 e0       	ldi	r24, 0x02	; 2
   115fe:	61 e0       	ldi	r22, 0x01	; 1
   11600:	4d e4       	ldi	r20, 0x4D	; 77
   11602:	5b e1       	ldi	r21, 0x1B	; 27
   11604:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11608:	84 e0       	ldi	r24, 0x04	; 4
   1160a:	61 e0       	ldi	r22, 0x01	; 1
   1160c:	48 e3       	ldi	r20, 0x38	; 56
   1160e:	5b e1       	ldi	r21, 0x1B	; 27
   11610:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          stChangeMOP=cmInputBankSurcharge;
   11614:	8d e0       	ldi	r24, 0x0D	; 13
   11616:	38 c0       	rjmp	.+112    	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
	 case cmInputBankSurcharge:
	      //uiResult=UserInput(UI_NUMBER_L,2,14,ValueChar,100,3);
		  uiResult=UserInput(UI_NUMBER_L,2,14,strSurcharge,100,3);
   11618:	82 e0       	ldi	r24, 0x02	; 2
   1161a:	62 e0       	ldi	r22, 0x02	; 2
   1161c:	4e e0       	ldi	r20, 0x0E	; 14
   1161e:	9e 01       	movw	r18, r28
   11620:	2f 5f       	subi	r18, 0xFF	; 255
   11622:	3f 4f       	sbci	r19, 0xFF	; 255
   11624:	04 e6       	ldi	r16, 0x64	; 100
   11626:	10 e0       	ldi	r17, 0x00	; 0
   11628:	53 e0       	ldi	r21, 0x03	; 3
   1162a:	e5 2e       	mov	r14, r21
   1162c:	0e 94 45 68 	call	0xd08a	; 0xd08a <UserInput>
	      if (uiResult==USER_OK)stChangeMOP=cmGenerateData;
   11630:	83 30       	cpi	r24, 0x03	; 3
   11632:	09 f4       	brne	.+2      	; 0x11636 <FMenuChangeMOP+0x35a>
   11634:	c6 c0       	rjmp	.+396    	; 0x117c2 <FMenuChangeMOP+0x4e6>
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmSelectBankName;
   11636:	81 30       	cpi	r24, 0x01	; 1
   11638:	11 f4       	brne	.+4      	; 0x1163e <FMenuChangeMOP+0x362>
   1163a:	8b e0       	ldi	r24, 0x0B	; 11
   1163c:	25 c0       	rjmp	.+74     	; 0x11688 <FMenuChangeMOP+0x3ac>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   1163e:	84 30       	cpi	r24, 0x04	; 4
   11640:	21 f4       	brne	.+8      	; 0x1164a <FMenuChangeMOP+0x36e>
   11642:	61 e0       	ldi	r22, 0x01	; 1
   11644:	43 e2       	ldi	r20, 0x23	; 35
   11646:	5b e1       	ldi	r21, 0x1B	; 27
   11648:	07 c0       	rjmp	.+14     	; 0x11658 <FMenuChangeMOP+0x37c>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   1164a:	85 30       	cpi	r24, 0x05	; 5
   1164c:	09 f0       	breq	.+2      	; 0x11650 <FMenuChangeMOP+0x374>
   1164e:	5e c2       	rjmp	.+1212   	; 0x11b0c <FMenuChangeMOP+0x830>
   11650:	84 e0       	ldi	r24, 0x04	; 4
   11652:	61 e0       	ldi	r22, 0x01	; 1
   11654:	4e e0       	ldi	r20, 0x0E	; 14
   11656:	5b e1       	ldi	r21, 0x1B	; 27
   11658:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
   1165c:	57 c2       	rjmp	.+1198   	; 0x11b0c <FMenuChangeMOP+0x830>
	      break;
     case cmFlowFIP:
          switch(MOPType){
   1165e:	80 91 ba 01 	lds	r24, 0x01BA
   11662:	82 30       	cpi	r24, 0x02	; 2
   11664:	61 f0       	breq	.+24     	; 0x1167e <FMenuChangeMOP+0x3a2>
   11666:	83 30       	cpi	r24, 0x03	; 3
   11668:	20 f4       	brcc	.+8      	; 0x11672 <FMenuChangeMOP+0x396>
   1166a:	81 30       	cpi	r24, 0x01	; 1
   1166c:	09 f0       	breq	.+2      	; 0x11670 <FMenuChangeMOP+0x394>
   1166e:	4e c2       	rjmp	.+1180   	; 0x11b0c <FMenuChangeMOP+0x830>
   11670:	0a c0       	rjmp	.+20     	; 0x11686 <FMenuChangeMOP+0x3aa>
   11672:	83 30       	cpi	r24, 0x03	; 3
   11674:	31 f0       	breq	.+12     	; 0x11682 <FMenuChangeMOP+0x3a6>
   11676:	84 30       	cpi	r24, 0x04	; 4
   11678:	09 f0       	breq	.+2      	; 0x1167c <FMenuChangeMOP+0x3a0>
   1167a:	48 c2       	rjmp	.+1168   	; 0x11b0c <FMenuChangeMOP+0x830>
   1167c:	04 c0       	rjmp	.+8      	; 0x11686 <FMenuChangeMOP+0x3aa>
		  case PAY_ACCOUNT: stChangeMOP=cmDispCardTap;       break;
		  case PAY_BANK:    stChangeMOP=cmDispBankSurcharge; break;
   1167e:	81 e1       	ldi	r24, 0x11	; 17
   11680:	03 c0       	rjmp	.+6      	; 0x11688 <FMenuChangeMOP+0x3ac>
		  case PAY_VOUCHER: stChangeMOP=cmProsesVoucher;      break;
   11682:	85 e1       	ldi	r24, 0x15	; 21
   11684:	01 c0       	rjmp	.+2      	; 0x11688 <FMenuChangeMOP+0x3ac>
		  case PAY_PUMPTEST:stChangeMOP=cmDispCardTap;       break;
   11686:	82 e1       	ldi	r24, 0x12	; 18
   11688:	80 93 64 02 	sts	0x0264, r24
   1168c:	3f c2       	rjmp	.+1150   	; 0x11b0c <FMenuChangeMOP+0x830>
		  }
	      break;
     case cmDispCardTap:
	      lcd_clear();
   1168e:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	      lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11692:	81 e0       	ldi	r24, 0x01	; 1
   11694:	61 e0       	ldi	r22, 0x01	; 1
   11696:	4f ef       	ldi	r20, 0xFF	; 255
   11698:	5a e1       	ldi	r21, 0x1A	; 26
   1169a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  sprintf_P(lcdteks,PSTR("FIP%s"),strFIP_ID);
   1169e:	00 d0       	rcall	.+0      	; 0x116a0 <FMenuChangeMOP+0x3c4>
   116a0:	00 d0       	rcall	.+0      	; 0x116a2 <FMenuChangeMOP+0x3c6>
   116a2:	00 d0       	rcall	.+0      	; 0x116a4 <FMenuChangeMOP+0x3c8>
   116a4:	ed b7       	in	r30, 0x3d	; 61
   116a6:	fe b7       	in	r31, 0x3e	; 62
   116a8:	31 96       	adiw	r30, 0x01	; 1
   116aa:	8e 01       	movw	r16, r28
   116ac:	00 5f       	subi	r16, 0xF0	; 240
   116ae:	1f 4f       	sbci	r17, 0xFF	; 255
   116b0:	ad b7       	in	r26, 0x3d	; 61
   116b2:	be b7       	in	r27, 0x3e	; 62
   116b4:	12 96       	adiw	r26, 0x02	; 2
   116b6:	1c 93       	st	X, r17
   116b8:	0e 93       	st	-X, r16
   116ba:	11 97       	sbiw	r26, 0x01	; 1
   116bc:	89 ef       	ldi	r24, 0xF9	; 249
   116be:	9a e1       	ldi	r25, 0x1A	; 26
   116c0:	93 83       	std	Z+3, r25	; 0x03
   116c2:	82 83       	std	Z+2, r24	; 0x02
   116c4:	8f eb       	ldi	r24, 0xBF	; 191
   116c6:	97 e0       	ldi	r25, 0x07	; 7
   116c8:	95 83       	std	Z+5, r25	; 0x05
   116ca:	84 83       	std	Z+4, r24	; 0x04
   116cc:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(2,1,lcdteks);
   116d0:	ed b7       	in	r30, 0x3d	; 61
   116d2:	fe b7       	in	r31, 0x3e	; 62
   116d4:	36 96       	adiw	r30, 0x06	; 6
   116d6:	0f b6       	in	r0, 0x3f	; 63
   116d8:	f8 94       	cli
   116da:	fe bf       	out	0x3e, r31	; 62
   116dc:	0f be       	out	0x3f, r0	; 63
   116de:	ed bf       	out	0x3d, r30	; 61
   116e0:	82 e0       	ldi	r24, 0x02	; 2
   116e2:	61 e0       	ldi	r22, 0x01	; 1
   116e4:	a8 01       	movw	r20, r16
   116e6:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   116ea:	84 e0       	ldi	r24, 0x04	; 4
   116ec:	61 e0       	ldi	r22, 0x01	; 1
   116ee:	46 ee       	ldi	r20, 0xE6	; 230
   116f0:	5a e1       	ldi	r21, 0x1A	; 26
   116f2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  IsRFIDDetected=False;
   116f6:	10 92 9a 01 	sts	0x019A, r1
          stChangeMOP=cmRFIDCardInput;
   116fa:	83 e1       	ldi	r24, 0x13	; 19
   116fc:	c5 cf       	rjmp	.-118    	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
	 case cmRFIDCardInput:
		  KeyPressed=_key_scan(1);
   116fe:	81 e0       	ldi	r24, 0x01	; 1
   11700:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   11704:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   11706:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  if (KeyPressed==_KEY_ENTER){
   1170a:	17 3b       	cpi	r17, 0xB7	; 183
   1170c:	11 f4       	brne	.+4      	; 0x11712 <FMenuChangeMOP+0x436>
		      stChangeMOP=cmExitChangeMOP;
   1170e:	8c e1       	ldi	r24, 0x1C	; 28
   11710:	03 c0       	rjmp	.+6      	; 0x11718 <FMenuChangeMOP+0x43c>
		  }
		  else
		  if (KeyPressed==_KEY_CANCEL){
   11712:	17 3e       	cpi	r17, 0xE7	; 231
   11714:	19 f4       	brne	.+6      	; 0x1171c <FMenuChangeMOP+0x440>
   		      stChangeMOP=cmSelectFIP;
   11716:	89 e0       	ldi	r24, 0x09	; 9
   11718:	80 93 64 02 	sts	0x0264, r24
			 }
          if (IsRFIDDetected==True){
   1171c:	80 91 9a 01 	lds	r24, 0x019A
   11720:	81 30       	cpi	r24, 0x01	; 1
   11722:	09 f0       	breq	.+2      	; 0x11726 <FMenuChangeMOP+0x44a>
   11724:	f3 c1       	rjmp	.+998    	; 0x11b0c <FMenuChangeMOP+0x830>
		      IsRFIDDetected=False;
   11726:	10 92 9a 01 	sts	0x019A, r1
			   stChangeMOP=cmProsesRFID;
   1172a:	84 e1       	ldi	r24, 0x14	; 20
   1172c:	ad cf       	rjmp	.-166    	; 0x11688 <FMenuChangeMOP+0x3ac>
   1172e:	20 e0       	ldi	r18, 0x00	; 0
   11730:	30 e0       	ldi	r19, 0x00	; 0


void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
   11732:	f9 01       	movw	r30, r18
   11734:	e1 57       	subi	r30, 0x71	; 113
   11736:	f4 4f       	sbci	r31, 0xF4	; 244
   11738:	d9 01       	movw	r26, r18
   1173a:	a9 5a       	subi	r26, 0xA9	; 169
   1173c:	b3 4f       	sbci	r27, 0xF3	; 243
   1173e:	8c 91       	ld	r24, X
   11740:	80 83       	st	Z, r24
   11742:	2f 5f       	subi	r18, 0xFF	; 255
   11744:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
   11746:	28 30       	cpi	r18, 0x08	; 8
   11748:	31 05       	cpc	r19, r1
   1174a:	99 f7       	brne	.-26     	; 0x11732 <FMenuChangeMOP+0x456>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
   1174c:	10 92 97 0b 	sts	0x0B97, r1
			   stChangeMOP=cmProsesRFID;
			 }
	      break;
     case cmProsesRFID:
	      ViewCardID();
          sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
   11750:	00 d0       	rcall	.+0      	; 0x11752 <FMenuChangeMOP+0x476>
   11752:	00 d0       	rcall	.+0      	; 0x11754 <FMenuChangeMOP+0x478>
   11754:	00 d0       	rcall	.+0      	; 0x11756 <FMenuChangeMOP+0x47a>
   11756:	ed b7       	in	r30, 0x3d	; 61
   11758:	fe b7       	in	r31, 0x3e	; 62
   1175a:	31 96       	adiw	r30, 0x01	; 1
   1175c:	8e 01       	movw	r16, r28
   1175e:	00 5f       	subi	r16, 0xF0	; 240
   11760:	1f 4f       	sbci	r17, 0xFF	; 255
   11762:	ad b7       	in	r26, 0x3d	; 61
   11764:	be b7       	in	r27, 0x3e	; 62
   11766:	12 96       	adiw	r26, 0x02	; 2
   11768:	1c 93       	st	X, r17
   1176a:	0e 93       	st	-X, r16
   1176c:	11 97       	sbiw	r26, 0x01	; 1
   1176e:	80 ee       	ldi	r24, 0xE0	; 224
   11770:	9a e1       	ldi	r25, 0x1A	; 26
   11772:	93 83       	std	Z+3, r25	; 0x03
   11774:	82 83       	std	Z+2, r24	; 0x02
   11776:	8f e8       	ldi	r24, 0x8F	; 143
   11778:	9b e0       	ldi	r25, 0x0B	; 11
   1177a:	95 83       	std	Z+5, r25	; 0x05
   1177c:	84 83       	std	Z+4, r24	; 0x04
   1177e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   11782:	ed b7       	in	r30, 0x3d	; 61
   11784:	fe b7       	in	r31, 0x3e	; 62
   11786:	36 96       	adiw	r30, 0x06	; 6
   11788:	0f b6       	in	r0, 0x3f	; 63
   1178a:	f8 94       	cli
   1178c:	fe bf       	out	0x3e, r31	; 62
   1178e:	0f be       	out	0x3f, r0	; 63
   11790:	ed bf       	out	0x3d, r30	; 61
   11792:	82 e0       	ldi	r24, 0x02	; 2
   11794:	61 e0       	ldi	r22, 0x01	; 1
   11796:	a8 01       	movw	r20, r16
   11798:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          lcd_printf(3,1,PSTR("Proses"));
   1179c:	83 e0       	ldi	r24, 0x03	; 3
   1179e:	61 e0       	ldi	r22, 0x01	; 1
   117a0:	49 ed       	ldi	r20, 0xD9	; 217
   117a2:	5a e1       	ldi	r21, 0x1A	; 26
   117a4:	0c c0       	rjmp	.+24     	; 0x117be <FMenuChangeMOP+0x4e2>
		  stChangeMOP=cmGenerateData;
	      break;
     case cmProsesVoucher:
          lcd_clear();
   117a6:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
          lcd_printf(1,1,PSTR("-MOP Voucher-")); 
   117aa:	81 e0       	ldi	r24, 0x01	; 1
   117ac:	61 e0       	ldi	r22, 0x01	; 1
   117ae:	4b ec       	ldi	r20, 0xCB	; 203
   117b0:	5a e1       	ldi	r21, 0x1A	; 26
   117b2:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          lcd_printf(3,1,PSTR("Proses"));
   117b6:	83 e0       	ldi	r24, 0x03	; 3
   117b8:	61 e0       	ldi	r22, 0x01	; 1
   117ba:	44 ec       	ldi	r20, 0xC4	; 196
   117bc:	5a e1       	ldi	r21, 0x1A	; 26
   117be:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stChangeMOP=cmGenerateData;
   117c2:	86 e1       	ldi	r24, 0x16	; 22
   117c4:	61 cf       	rjmp	.-318    	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
   117c6:	e4 e9       	ldi	r30, 0x94	; 148
   117c8:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   117ca:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   117cc:	8c e0       	ldi	r24, 0x0C	; 12
   117ce:	e9 3a       	cpi	r30, 0xA9	; 169
   117d0:	f8 07       	cpc	r31, r24
   117d2:	d9 f7       	brne	.-10     	; 0x117ca <FMenuChangeMOP+0x4ee>
   117d4:	e4 ea       	ldi	r30, 0xA4	; 164
   117d6:	fb e0       	ldi	r31, 0x0B	; 11
	     strMemory[i]=data;
   117d8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   117da:	9b e0       	ldi	r25, 0x0B	; 11
   117dc:	e9 3b       	cpi	r30, 0xB9	; 185
   117de:	f9 07       	cpc	r31, r25
   117e0:	d9 f7       	brne	.-10     	; 0x117d8 <FMenuChangeMOP+0x4fc>
   117e2:	e3 e8       	ldi	r30, 0x83	; 131
   117e4:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
   117e6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   117e8:	a8 e0       	ldi	r26, 0x08	; 8
   117ea:	e8 39       	cpi	r30, 0x98	; 152
   117ec:	fa 07       	cpc	r31, r26
   117ee:	d9 f7       	brne	.-10     	; 0x117e6 <FMenuChangeMOP+0x50a>
   117f0:	9b ea       	ldi	r25, 0xAB	; 171
   117f2:	e9 2e       	mov	r14, r25
   117f4:	93 e0       	ldi	r25, 0x03	; 3
   117f6:	f9 2e       	mov	r15, r25
	     strMemory[i]=data;
   117f8:	f7 01       	movw	r30, r14
   117fa:	11 92       	st	Z+, r1
   117fc:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   117fe:	f0 ec       	ldi	r31, 0xC0	; 192
   11800:	ef 16       	cp	r14, r31
   11802:	f3 e0       	ldi	r31, 0x03	; 3
   11804:	ff 06       	cpc	r15, r31
   11806:	c1 f7       	brne	.-16     	; 0x117f8 <FMenuChangeMOP+0x51c>
     case cmGenerateData:
	      FillChar(strRef1,sizeof(strRef1),0);
	      FillChar(strRef2,sizeof(strRef2),0);
	      FillChar(strRef3,sizeof(strRef3),0);
	      FillChar(strRef4,sizeof(strRef4),0);
          switch(MOPType){
   11808:	80 91 ba 01 	lds	r24, 0x01BA
   1180c:	82 30       	cpi	r24, 0x02	; 2
   1180e:	f1 f0       	breq	.+60     	; 0x1184c <FMenuChangeMOP+0x570>
   11810:	83 30       	cpi	r24, 0x03	; 3
   11812:	20 f4       	brcc	.+8      	; 0x1181c <FMenuChangeMOP+0x540>
   11814:	81 30       	cpi	r24, 0x01	; 1
   11816:	09 f0       	breq	.+2      	; 0x1181a <FMenuChangeMOP+0x53e>
   11818:	ab c0       	rjmp	.+342    	; 0x11970 <FMenuChangeMOP+0x694>
   1181a:	07 c0       	rjmp	.+14     	; 0x1182a <FMenuChangeMOP+0x54e>
   1181c:	83 30       	cpi	r24, 0x03	; 3
   1181e:	09 f4       	brne	.+2      	; 0x11822 <FMenuChangeMOP+0x546>
   11820:	62 c0       	rjmp	.+196    	; 0x118e6 <FMenuChangeMOP+0x60a>
   11822:	84 30       	cpi	r24, 0x04	; 4
   11824:	09 f0       	breq	.+2      	; 0x11828 <FMenuChangeMOP+0x54c>
   11826:	a4 c0       	rjmp	.+328    	; 0x11970 <FMenuChangeMOP+0x694>
   11828:	73 c0       	rjmp	.+230    	; 0x11910 <FMenuChangeMOP+0x634>
		  case PAY_ACCOUNT:
		       sprintf_P(strRef1,PSTR("%s"),strCardID); 
   1182a:	00 d0       	rcall	.+0      	; 0x1182c <FMenuChangeMOP+0x550>
   1182c:	00 d0       	rcall	.+0      	; 0x1182e <FMenuChangeMOP+0x552>
   1182e:	00 d0       	rcall	.+0      	; 0x11830 <FMenuChangeMOP+0x554>
   11830:	ed b7       	in	r30, 0x3d	; 61
   11832:	fe b7       	in	r31, 0x3e	; 62
   11834:	31 96       	adiw	r30, 0x01	; 1
   11836:	84 e9       	ldi	r24, 0x94	; 148
   11838:	9c e0       	ldi	r25, 0x0C	; 12
   1183a:	ad b7       	in	r26, 0x3d	; 61
   1183c:	be b7       	in	r27, 0x3e	; 62
   1183e:	12 96       	adiw	r26, 0x02	; 2
   11840:	9c 93       	st	X, r25
   11842:	8e 93       	st	-X, r24
   11844:	11 97       	sbiw	r26, 0x01	; 1
   11846:	81 ec       	ldi	r24, 0xC1	; 193
   11848:	9a e1       	ldi	r25, 0x1A	; 26
   1184a:	82 c0       	rjmp	.+260    	; 0x11950 <FMenuChangeMOP+0x674>
		       break;
		  case PAY_BANK:
		  	   eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   1184c:	8e 01       	movw	r16, r28
   1184e:	0b 5f       	subi	r16, 0xFB	; 251
   11850:	1f 4f       	sbci	r17, 0xFF	; 255
   11852:	60 91 62 02 	lds	r22, 0x0262
   11856:	8b e0       	ldi	r24, 0x0B	; 11
   11858:	68 9f       	mul	r22, r24
   1185a:	b0 01       	movw	r22, r0
   1185c:	11 24       	eor	r1, r1
   1185e:	62 5f       	subi	r22, 0xF2	; 242
   11860:	7e 4f       	sbci	r23, 0xFE	; 254
   11862:	c8 01       	movw	r24, r16
   11864:	4b e0       	ldi	r20, 0x0B	; 11
   11866:	50 e0       	ldi	r21, 0x00	; 0
   11868:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		       sprintf_P(lcdteks,PSTR("%s"),strBankName);
   1186c:	00 d0       	rcall	.+0      	; 0x1186e <FMenuChangeMOP+0x592>
   1186e:	00 d0       	rcall	.+0      	; 0x11870 <FMenuChangeMOP+0x594>
   11870:	00 d0       	rcall	.+0      	; 0x11872 <FMenuChangeMOP+0x596>
   11872:	ed b7       	in	r30, 0x3d	; 61
   11874:	fe b7       	in	r31, 0x3e	; 62
   11876:	31 96       	adiw	r30, 0x01	; 1
   11878:	ce 01       	movw	r24, r28
   1187a:	40 96       	adiw	r24, 0x10	; 16
   1187c:	ad b7       	in	r26, 0x3d	; 61
   1187e:	be b7       	in	r27, 0x3e	; 62
   11880:	12 96       	adiw	r26, 0x02	; 2
   11882:	9c 93       	st	X, r25
   11884:	8e 93       	st	-X, r24
   11886:	11 97       	sbiw	r26, 0x01	; 1
   11888:	8e eb       	ldi	r24, 0xBE	; 190
   1188a:	9a e1       	ldi	r25, 0x1A	; 26
   1188c:	93 83       	std	Z+3, r25	; 0x03
   1188e:	82 83       	std	Z+2, r24	; 0x02
   11890:	15 83       	std	Z+5, r17	; 0x05
   11892:	04 83       	std	Z+4, r16	; 0x04
   11894:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		       sprintf_P(strRef1,PSTR("%s"),strBankName); 
   11898:	ed b7       	in	r30, 0x3d	; 61
   1189a:	fe b7       	in	r31, 0x3e	; 62
   1189c:	31 96       	adiw	r30, 0x01	; 1
   1189e:	84 e9       	ldi	r24, 0x94	; 148
   118a0:	9c e0       	ldi	r25, 0x0C	; 12
   118a2:	ad b7       	in	r26, 0x3d	; 61
   118a4:	be b7       	in	r27, 0x3e	; 62
   118a6:	12 96       	adiw	r26, 0x02	; 2
   118a8:	9c 93       	st	X, r25
   118aa:	8e 93       	st	-X, r24
   118ac:	11 97       	sbiw	r26, 0x01	; 1
   118ae:	8b eb       	ldi	r24, 0xBB	; 187
   118b0:	9a e1       	ldi	r25, 0x1A	; 26
   118b2:	93 83       	std	Z+3, r25	; 0x03
   118b4:	82 83       	std	Z+2, r24	; 0x02
   118b6:	15 83       	std	Z+5, r17	; 0x05
   118b8:	04 83       	std	Z+4, r16	; 0x04
   118ba:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		       sprintf_P(strRef4,PSTR("%s"),strSurcharge); 
   118be:	ed b7       	in	r30, 0x3d	; 61
   118c0:	fe b7       	in	r31, 0x3e	; 62
   118c2:	31 96       	adiw	r30, 0x01	; 1
   118c4:	8b ee       	ldi	r24, 0xEB	; 235
   118c6:	9f ef       	ldi	r25, 0xFF	; 255
   118c8:	e8 0e       	add	r14, r24
   118ca:	f9 1e       	adc	r15, r25
   118cc:	ad b7       	in	r26, 0x3d	; 61
   118ce:	be b7       	in	r27, 0x3e	; 62
   118d0:	12 96       	adiw	r26, 0x02	; 2
   118d2:	fc 92       	st	X, r15
   118d4:	ee 92       	st	-X, r14
   118d6:	11 97       	sbiw	r26, 0x01	; 1
   118d8:	88 eb       	ldi	r24, 0xB8	; 184
   118da:	9a e1       	ldi	r25, 0x1A	; 26
   118dc:	93 83       	std	Z+3, r25	; 0x03
   118de:	82 83       	std	Z+2, r24	; 0x02
   118e0:	ce 01       	movw	r24, r28
   118e2:	01 96       	adiw	r24, 0x01	; 1
   118e4:	39 c0       	rjmp	.+114    	; 0x11958 <FMenuChangeMOP+0x67c>
		       break;
		  case PAY_VOUCHER://Load data Ref1=Voucher on cmVoucherInput
		  	   sprintf_P(strRef1,PSTR("%s"),strVoucherNum); 
   118e6:	00 d0       	rcall	.+0      	; 0x118e8 <FMenuChangeMOP+0x60c>
   118e8:	00 d0       	rcall	.+0      	; 0x118ea <FMenuChangeMOP+0x60e>
   118ea:	00 d0       	rcall	.+0      	; 0x118ec <FMenuChangeMOP+0x610>
   118ec:	ed b7       	in	r30, 0x3d	; 61
   118ee:	fe b7       	in	r31, 0x3e	; 62
   118f0:	31 96       	adiw	r30, 0x01	; 1
   118f2:	84 e9       	ldi	r24, 0x94	; 148
   118f4:	9c e0       	ldi	r25, 0x0C	; 12
   118f6:	ad b7       	in	r26, 0x3d	; 61
   118f8:	be b7       	in	r27, 0x3e	; 62
   118fa:	12 96       	adiw	r26, 0x02	; 2
   118fc:	9c 93       	st	X, r25
   118fe:	8e 93       	st	-X, r24
   11900:	11 97       	sbiw	r26, 0x01	; 1
   11902:	85 eb       	ldi	r24, 0xB5	; 181
   11904:	9a e1       	ldi	r25, 0x1A	; 26
   11906:	93 83       	std	Z+3, r25	; 0x03
   11908:	82 83       	std	Z+2, r24	; 0x02
   1190a:	82 e4       	ldi	r24, 0x42	; 66
   1190c:	9c e0       	ldi	r25, 0x0C	; 12
   1190e:	24 c0       	rjmp	.+72     	; 0x11958 <FMenuChangeMOP+0x67c>
		       break;
		  case PAY_PUMPTEST:
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
   11910:	00 d0       	rcall	.+0      	; 0x11912 <FMenuChangeMOP+0x636>
   11912:	00 d0       	rcall	.+0      	; 0x11914 <FMenuChangeMOP+0x638>
   11914:	84 e9       	ldi	r24, 0x94	; 148
   11916:	9c e0       	ldi	r25, 0x0C	; 12
   11918:	ad b7       	in	r26, 0x3d	; 61
   1191a:	be b7       	in	r27, 0x3e	; 62
   1191c:	12 96       	adiw	r26, 0x02	; 2
   1191e:	9c 93       	st	X, r25
   11920:	8e 93       	st	-X, r24
   11922:	11 97       	sbiw	r26, 0x01	; 1
   11924:	8b ea       	ldi	r24, 0xAB	; 171
   11926:	9a e1       	ldi	r25, 0x1A	; 26
   11928:	14 96       	adiw	r26, 0x04	; 4
   1192a:	9c 93       	st	X, r25
   1192c:	8e 93       	st	-X, r24
   1192e:	13 97       	sbiw	r26, 0x03	; 3
   11930:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
   11934:	00 d0       	rcall	.+0      	; 0x11936 <FMenuChangeMOP+0x65a>
   11936:	ed b7       	in	r30, 0x3d	; 61
   11938:	fe b7       	in	r31, 0x3e	; 62
   1193a:	31 96       	adiw	r30, 0x01	; 1
   1193c:	84 ea       	ldi	r24, 0xA4	; 164
   1193e:	9b e0       	ldi	r25, 0x0B	; 11
   11940:	ad b7       	in	r26, 0x3d	; 61
   11942:	be b7       	in	r27, 0x3e	; 62
   11944:	12 96       	adiw	r26, 0x02	; 2
   11946:	9c 93       	st	X, r25
   11948:	8e 93       	st	-X, r24
   1194a:	11 97       	sbiw	r26, 0x01	; 1
   1194c:	88 ea       	ldi	r24, 0xA8	; 168
   1194e:	9a e1       	ldi	r25, 0x1A	; 26
   11950:	93 83       	std	Z+3, r25	; 0x03
   11952:	82 83       	std	Z+2, r24	; 0x02
   11954:	8f e8       	ldi	r24, 0x8F	; 143
   11956:	9b e0       	ldi	r25, 0x0B	; 11
   11958:	95 83       	std	Z+5, r25	; 0x05
   1195a:	84 83       	std	Z+4, r24	; 0x04
   1195c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   11960:	ed b7       	in	r30, 0x3d	; 61
   11962:	fe b7       	in	r31, 0x3e	; 62
   11964:	36 96       	adiw	r30, 0x06	; 6
   11966:	0f b6       	in	r0, 0x3f	; 63
   11968:	f8 94       	cli
   1196a:	fe bf       	out	0x3e, r31	; 62
   1196c:	0f be       	out	0x3f, r0	; 63
   1196e:	ed bf       	out	0x3d, r30	; 61
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
   11970:	00 d0       	rcall	.+0      	; 0x11972 <FMenuChangeMOP+0x696>
   11972:	00 d0       	rcall	.+0      	; 0x11974 <FMenuChangeMOP+0x698>
   11974:	00 d0       	rcall	.+0      	; 0x11976 <FMenuChangeMOP+0x69a>
   11976:	ed b7       	in	r30, 0x3d	; 61
   11978:	fe b7       	in	r31, 0x3e	; 62
   1197a:	31 96       	adiw	r30, 0x01	; 1
   1197c:	86 e5       	ldi	r24, 0x56	; 86
   1197e:	97 e0       	ldi	r25, 0x07	; 7
   11980:	ad b7       	in	r26, 0x3d	; 61
   11982:	be b7       	in	r27, 0x3e	; 62
   11984:	12 96       	adiw	r26, 0x02	; 2
   11986:	9c 93       	st	X, r25
   11988:	8e 93       	st	-X, r24
   1198a:	11 97       	sbiw	r26, 0x01	; 1
   1198c:	8b ee       	ldi	r24, 0xEB	; 235
   1198e:	9e e0       	ldi	r25, 0x0E	; 14
   11990:	93 83       	std	Z+3, r25	; 0x03
   11992:	82 83       	std	Z+2, r24	; 0x02
   11994:	80 91 ba 01 	lds	r24, 0x01BA
   11998:	84 83       	std	Z+4, r24	; 0x04
   1199a:	15 82       	std	Z+5, r1	; 0x05
   1199c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
		       break;
		  }
		  leadingZero(MOPType,strPaymentType);
		  AddSpaceLead(strRef1,20);
   119a0:	ed b7       	in	r30, 0x3d	; 61
   119a2:	fe b7       	in	r31, 0x3e	; 62
   119a4:	36 96       	adiw	r30, 0x06	; 6
   119a6:	0f b6       	in	r0, 0x3f	; 63
   119a8:	f8 94       	cli
   119aa:	fe bf       	out	0x3e, r31	; 62
   119ac:	0f be       	out	0x3f, r0	; 63
   119ae:	ed bf       	out	0x3d, r30	; 61
   119b0:	84 e9       	ldi	r24, 0x94	; 148
   119b2:	9c e0       	ldi	r25, 0x0C	; 12
   119b4:	64 e1       	ldi	r22, 0x14	; 20
   119b6:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <AddSpaceLead>
		  AddSpaceLead(strRef2,20);
   119ba:	84 ea       	ldi	r24, 0xA4	; 164
   119bc:	9b e0       	ldi	r25, 0x0B	; 11
   119be:	64 e1       	ldi	r22, 0x14	; 20
   119c0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <AddSpaceLead>
		  AddSpaceLead(strRef3,20);
   119c4:	83 e8       	ldi	r24, 0x83	; 131
   119c6:	98 e0       	ldi	r25, 0x08	; 8
   119c8:	64 e1       	ldi	r22, 0x14	; 20
   119ca:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <AddSpaceLead>
		  AddSpaceLead(strRef4,20);
   119ce:	8b ea       	ldi	r24, 0xAB	; 171
   119d0:	93 e0       	ldi	r25, 0x03	; 3
   119d2:	64 e1       	ldi	r22, 0x14	; 20
   119d4:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <AddSpaceLead>
		  iWait=0;
   119d8:	10 92 60 02 	sts	0x0260, r1
		  IsMessage09=False;
   119dc:	10 92 a5 01 	sts	0x01A5, r1
		  stChangeMOP=cmSendMessage32;	      
   119e0:	87 e1       	ldi	r24, 0x17	; 23
   119e2:	52 ce       	rjmp	.-860    	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
     case cmSendMessage32://SendMessage32
	      sendMessage32();
   119e4:	0e 94 6a 89 	call	0x112d4	; 0x112d4 <sendMessage32>
		  iLoop=0;
   119e8:	10 92 5f 02 	sts	0x025F, r1
   119ec:	10 92 5e 02 	sts	0x025E, r1
		  iPos=0;
   119f0:	10 92 61 02 	sts	0x0261, r1
		  lcd_printf(3,1,PSTR("Please Wait"));
   119f4:	83 e0       	ldi	r24, 0x03	; 3
   119f6:	61 e0       	ldi	r22, 0x01	; 1
   119f8:	4c e9       	ldi	r20, 0x9C	; 156
   119fa:	5a e1       	ldi	r21, 0x1A	; 26
   119fc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stChangeMOP=cmWaitReplyMessage;	      
   11a00:	88 e1       	ldi	r24, 0x18	; 24
   11a02:	42 ce       	rjmp	.-892    	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
     case cmWaitReplyMessage:
          iLoop++;
   11a04:	80 91 5e 02 	lds	r24, 0x025E
   11a08:	90 91 5f 02 	lds	r25, 0x025F
   11a0c:	01 96       	adiw	r24, 0x01	; 1
   11a0e:	90 93 5f 02 	sts	0x025F, r25
   11a12:	80 93 5e 02 	sts	0x025E, r24
		  if ((iLoop%MSG_WAIT_TIMOUT)==0){
   11a16:	68 e9       	ldi	r22, 0x98	; 152
   11a18:	7a e3       	ldi	r23, 0x3A	; 58
   11a1a:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
   11a1e:	89 2b       	or	r24, r25
   11a20:	29 f5       	brne	.+74     	; 0x11a6c <FMenuChangeMOP+0x790>
			 if (iPos<5){
   11a22:	60 91 61 02 	lds	r22, 0x0261
   11a26:	65 30       	cpi	r22, 0x05	; 5
   11a28:	68 f4       	brcc	.+26     	; 0x11a44 <FMenuChangeMOP+0x768>
				 lcd_xy(3,(13+iPos));_lcd('.');
   11a2a:	63 5f       	subi	r22, 0xF3	; 243
   11a2c:	83 e0       	ldi	r24, 0x03	; 3
   11a2e:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
   11a32:	8e e2       	ldi	r24, 0x2E	; 46
   11a34:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
				 iPos++;
   11a38:	80 91 61 02 	lds	r24, 0x0261
   11a3c:	8f 5f       	subi	r24, 0xFF	; 255
   11a3e:	80 93 61 02 	sts	0x0261, r24
   11a42:	14 c0       	rjmp	.+40     	; 0x11a6c <FMenuChangeMOP+0x790>
				}
			 else{
				 iPos=0;
   11a44:	10 92 61 02 	sts	0x0261, r1
				 lcd_printf(3,(13+iPos),PSTR("       "));
   11a48:	83 e0       	ldi	r24, 0x03	; 3
   11a4a:	6d e0       	ldi	r22, 0x0D	; 13
   11a4c:	44 e9       	ldi	r20, 0x94	; 148
   11a4e:	5a e1       	ldi	r21, 0x1A	; 26
   11a50:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				 //Resend Message32
				 if (iWait<5)stChangeMOP=cmSendMessage32;
   11a54:	80 91 60 02 	lds	r24, 0x0260
   11a58:	85 30       	cpi	r24, 0x05	; 5
   11a5a:	18 f4       	brcc	.+6      	; 0x11a62 <FMenuChangeMOP+0x786>
   11a5c:	87 e1       	ldi	r24, 0x17	; 23
   11a5e:	80 93 64 02 	sts	0x0264, r24
				iWait++;
   11a62:	80 91 60 02 	lds	r24, 0x0260
   11a66:	8f 5f       	subi	r24, 0xFF	; 255
   11a68:	80 93 60 02 	sts	0x0260, r24
				}
		  }
		  if (iWait>5)stChangeMOP=cmNoReply;
   11a6c:	80 91 60 02 	lds	r24, 0x0260
   11a70:	86 30       	cpi	r24, 0x06	; 6
   11a72:	18 f0       	brcs	.+6      	; 0x11a7a <FMenuChangeMOP+0x79e>
   11a74:	8a e1       	ldi	r24, 0x1A	; 26
   11a76:	80 93 64 02 	sts	0x0264, r24
		  if (IsMessage09==True)stChangeMOP=cmDisplayFreeMessage;
   11a7a:	80 91 a5 01 	lds	r24, 0x01A5
   11a7e:	81 30       	cpi	r24, 0x01	; 1
   11a80:	19 f4       	brne	.+6      	; 0x11a88 <FMenuChangeMOP+0x7ac>
   11a82:	89 e1       	ldi	r24, 0x19	; 25
   11a84:	80 93 64 02 	sts	0x0264, r24
		  if (IsMessage99==True)stChangeMOP=cmFinishChangeMOP;
   11a88:	80 91 a1 01 	lds	r24, 0x01A1
   11a8c:	81 30       	cpi	r24, 0x01	; 1
   11a8e:	f1 f5       	brne	.+124    	; 0x11b0c <FMenuChangeMOP+0x830>
   11a90:	37 c0       	rjmp	.+110    	; 0x11b00 <FMenuChangeMOP+0x824>
		  break;
     case cmDisplayFreeMessage:
	      IsMessage09=False;
   11a92:	10 92 a5 01 	sts	0x01A5, r1
	      msgResult=procMessage09();
   11a96:	0e 94 dd 17 	call	0x2fba	; 0x2fba <procMessage09>
		  lcd_clear();
   11a9a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   11a9e:	81 e0       	ldi	r24, 0x01	; 1
   11aa0:	61 e0       	ldi	r22, 0x01	; 1
   11aa2:	48 e9       	ldi	r20, 0x98	; 152
   11aa4:	58 e0       	ldi	r21, 0x08	; 8
   11aa6:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   11aaa:	82 e0       	ldi	r24, 0x02	; 2
   11aac:	61 e0       	ldi	r22, 0x01	; 1
   11aae:	49 ea       	ldi	r20, 0xA9	; 169
   11ab0:	57 e0       	ldi	r21, 0x07	; 7
   11ab2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   11ab6:	83 e0       	ldi	r24, 0x03	; 3
   11ab8:	61 e0       	ldi	r22, 0x01	; 1
   11aba:	42 e2       	ldi	r20, 0x22	; 34
   11abc:	58 e0       	ldi	r21, 0x08	; 8
   11abe:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   11ac2:	84 e0       	ldi	r24, 0x04	; 4
   11ac4:	61 e0       	ldi	r22, 0x01	; 1
   11ac6:	4c ed       	ldi	r20, 0xDC	; 220
   11ac8:	5b e0       	ldi	r21, 0x0B	; 11
   11aca:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
   11ace:	0e c0       	rjmp	.+28     	; 0x11aec <FMenuChangeMOP+0x810>
		  TimDisplay=0;
          stChangeMOP=cmDelayMOP;
	      break;
     case cmNoReply:
	      lcd_clear();
   11ad0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(2,1,PSTR("No Reply    "));
   11ad4:	82 e0       	ldi	r24, 0x02	; 2
   11ad6:	61 e0       	ldi	r22, 0x01	; 1
   11ad8:	47 e8       	ldi	r20, 0x87	; 135
   11ada:	5a e1       	ldi	r21, 0x1A	; 26
   11adc:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(3,1,PSTR("TCP/IP Error"));
   11ae0:	83 e0       	ldi	r24, 0x03	; 3
   11ae2:	61 e0       	ldi	r22, 0x01	; 1
   11ae4:	4a e7       	ldi	r20, 0x7A	; 122
   11ae6:	5a e1       	ldi	r21, 0x1A	; 26
   11ae8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  TimDisplay=0;
   11aec:	10 92 93 01 	sts	0x0193, r1
          stChangeMOP=cmDelayMOP;
   11af0:	8b e1       	ldi	r24, 0x1B	; 27
   11af2:	ca cd       	rjmp	.-1132   	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
     case cmDelayMOP:
	      if (TimDisplay>9)stChangeMOP=cmExitChangeMOP;
   11af4:	80 91 93 01 	lds	r24, 0x0193
   11af8:	8a 30       	cpi	r24, 0x0A	; 10
   11afa:	40 f0       	brcs	.+16     	; 0x11b0c <FMenuChangeMOP+0x830>
   11afc:	8c e1       	ldi	r24, 0x1C	; 28
   11afe:	c4 cd       	rjmp	.-1144   	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
     case cmExitChangeMOP:
	      stChangeMOP=cmFinishChangeMOP;
   11b00:	8d e1       	ldi	r24, 0x1D	; 29
   11b02:	c2 cd       	rjmp	.-1148   	; 0x11688 <FMenuChangeMOP+0x3ac>
	      break;
     case cmFinishChangeMOP:
	      stChangeMOP=cmInit;
   11b04:	10 92 64 02 	sts	0x0264, r1
   11b08:	81 e0       	ldi	r24, 0x01	; 1
   11b0a:	01 c0       	rjmp	.+2      	; 0x11b0e <FMenuChangeMOP+0x832>
   11b0c:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   11b0e:	a3 96       	adiw	r28, 0x23	; 35
   11b10:	0f b6       	in	r0, 0x3f	; 63
   11b12:	f8 94       	cli
   11b14:	de bf       	out	0x3e, r29	; 62
   11b16:	0f be       	out	0x3f, r0	; 63
   11b18:	cd bf       	out	0x3d, r28	; 61
   11b1a:	cf 91       	pop	r28
   11b1c:	df 91       	pop	r29
   11b1e:	1f 91       	pop	r17
   11b20:	0f 91       	pop	r16
   11b22:	ff 90       	pop	r15
   11b24:	ef 90       	pop	r14
   11b26:	df 90       	pop	r13
   11b28:	cf 90       	pop	r12
   11b2a:	bf 90       	pop	r11
   11b2c:	af 90       	pop	r10
   11b2e:	08 95       	ret

00011b30 <sendMessage28>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strFIP_ID,strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_28);
   11b30:	88 e2       	ldi	r24, 0x28	; 40
   11b32:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   11b36:	08 95       	ret

00011b38 <FMenuReprint>:
	       break;
	 }
return Result;
}

char FMenuReprint(){
   11b38:	0f 93       	push	r16
   11b3a:	1f 93       	push	r17
   11b3c:	df 93       	push	r29
   11b3e:	cf 93       	push	r28
   11b40:	cd b7       	in	r28, 0x3d	; 61
   11b42:	de b7       	in	r29, 0x3e	; 62
   11b44:	64 97       	sbiw	r28, 0x14	; 20
   11b46:	0f b6       	in	r0, 0x3f	; 63
   11b48:	f8 94       	cli
   11b4a:	de bf       	out	0x3e, r29	; 62
   11b4c:	0f be       	out	0x3f, r0	; 63
   11b4e:	cd bf       	out	0x3d, r28	; 61
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
	 switch(stReprint){
   11b50:	80 91 6b 02 	lds	r24, 0x026B
   11b54:	87 30       	cpi	r24, 0x07	; 7
   11b56:	09 f4       	brne	.+2      	; 0x11b5a <FMenuReprint+0x22>
   11b58:	9b c0       	rjmp	.+310    	; 0x11c90 <FMenuReprint+0x158>
   11b5a:	88 30       	cpi	r24, 0x08	; 8
   11b5c:	90 f4       	brcc	.+36     	; 0x11b82 <FMenuReprint+0x4a>
   11b5e:	83 30       	cpi	r24, 0x03	; 3
   11b60:	09 f4       	brne	.+2      	; 0x11b64 <FMenuReprint+0x2c>
   11b62:	43 c0       	rjmp	.+134    	; 0x11bea <FMenuReprint+0xb2>
   11b64:	84 30       	cpi	r24, 0x04	; 4
   11b66:	30 f4       	brcc	.+12     	; 0x11b74 <FMenuReprint+0x3c>
   11b68:	81 30       	cpi	r24, 0x01	; 1
   11b6a:	09 f4       	brne	.+2      	; 0x11b6e <FMenuReprint+0x36>
   11b6c:	52 c0       	rjmp	.+164    	; 0x11c12 <FMenuReprint+0xda>
   11b6e:	82 30       	cpi	r24, 0x02	; 2
   11b70:	48 f5       	brcc	.+82     	; 0x11bc4 <FMenuReprint+0x8c>
   11b72:	1d c0       	rjmp	.+58     	; 0x11bae <FMenuReprint+0x76>
   11b74:	85 30       	cpi	r24, 0x05	; 5
   11b76:	09 f4       	brne	.+2      	; 0x11b7a <FMenuReprint+0x42>
   11b78:	7c c0       	rjmp	.+248    	; 0x11c72 <FMenuReprint+0x13a>
   11b7a:	86 30       	cpi	r24, 0x06	; 6
   11b7c:	08 f0       	brcs	.+2      	; 0x11b80 <FMenuReprint+0x48>
   11b7e:	4d c0       	rjmp	.+154    	; 0x11c1a <FMenuReprint+0xe2>
   11b80:	42 c0       	rjmp	.+132    	; 0x11c06 <FMenuReprint+0xce>
   11b82:	8b 30       	cpi	r24, 0x0B	; 11
   11b84:	09 f4       	brne	.+2      	; 0x11b88 <FMenuReprint+0x50>
   11b86:	e5 c0       	rjmp	.+458    	; 0x11d52 <FMenuReprint+0x21a>
   11b88:	8c 30       	cpi	r24, 0x0C	; 12
   11b8a:	38 f4       	brcc	.+14     	; 0x11b9a <FMenuReprint+0x62>
   11b8c:	89 30       	cpi	r24, 0x09	; 9
   11b8e:	09 f4       	brne	.+2      	; 0x11b92 <FMenuReprint+0x5a>
   11b90:	c5 c0       	rjmp	.+394    	; 0x11d1c <FMenuReprint+0x1e4>
   11b92:	8a 30       	cpi	r24, 0x0A	; 10
   11b94:	08 f0       	brcs	.+2      	; 0x11b98 <FMenuReprint+0x60>
   11b96:	d7 c0       	rjmp	.+430    	; 0x11d46 <FMenuReprint+0x20e>
   11b98:	89 c0       	rjmp	.+274    	; 0x11cac <FMenuReprint+0x174>
   11b9a:	8d 30       	cpi	r24, 0x0D	; 13
   11b9c:	09 f4       	brne	.+2      	; 0x11ba0 <FMenuReprint+0x68>
   11b9e:	f6 c0       	rjmp	.+492    	; 0x11d8c <FMenuReprint+0x254>
   11ba0:	8d 30       	cpi	r24, 0x0D	; 13
   11ba2:	08 f4       	brcc	.+2      	; 0x11ba6 <FMenuReprint+0x6e>
   11ba4:	e0 c0       	rjmp	.+448    	; 0x11d66 <FMenuReprint+0x22e>
   11ba6:	8e 30       	cpi	r24, 0x0E	; 14
   11ba8:	09 f0       	breq	.+2      	; 0x11bac <FMenuReprint+0x74>
   11baa:	f9 c0       	rjmp	.+498    	; 0x11d9e <FMenuReprint+0x266>
   11bac:	f4 c0       	rjmp	.+488    	; 0x11d96 <FMenuReprint+0x25e>
	 case rtInit:
	      lcd_clear();
   11bae:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
          if (IFType==IT_SLAVE)stReprint=rtFIP;
   11bb2:	80 91 00 01 	lds	r24, 0x0100
   11bb6:	81 30       	cpi	r24, 0x01	; 1
   11bb8:	09 f4       	brne	.+2      	; 0x11bbc <FMenuReprint+0x84>
   11bba:	c0 c0       	rjmp	.+384    	; 0x11d3c <FMenuReprint+0x204>
		  else
		  if (IFType==IT_STANDALONE)stReprint=rtStandaloneFIP;//rtValidPassword;//rtStandaloneFIP;
   11bbc:	82 30       	cpi	r24, 0x02	; 2
   11bbe:	09 f0       	breq	.+2      	; 0x11bc2 <FMenuReprint+0x8a>
   11bc0:	ee c0       	rjmp	.+476    	; 0x11d9e <FMenuReprint+0x266>
   11bc2:	04 c0       	rjmp	.+8      	; 0x11bcc <FMenuReprint+0x94>
	      break;
     case rtValidPassword:
	      PassResult=FMenuPassword();
   11bc4:	0e 94 21 77 	call	0xee42	; 0xee42 <FMenuPassword>
	      if (PassResult==MP_VALID_ADMIN)stReprint=rtStandaloneFIP;
   11bc8:	84 30       	cpi	r24, 0x04	; 4
   11bca:	11 f4       	brne	.+4      	; 0x11bd0 <FMenuReprint+0x98>
   11bcc:	81 e0       	ldi	r24, 0x01	; 1
   11bce:	0a c0       	rjmp	.+20     	; 0x11be4 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_VALID_SYSTEM)stReprint=rtInvalidPassword;
   11bd0:	85 30       	cpi	r24, 0x05	; 5
   11bd2:	11 f0       	breq	.+4      	; 0x11bd8 <FMenuReprint+0xa0>
          else
	      if (PassResult==MP_INVALID)stReprint=rtInvalidPassword;
   11bd4:	82 30       	cpi	r24, 0x02	; 2
   11bd6:	11 f4       	brne	.+4      	; 0x11bdc <FMenuReprint+0xa4>
   11bd8:	83 e0       	ldi	r24, 0x03	; 3
   11bda:	04 c0       	rjmp	.+8      	; 0x11be4 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
   11bdc:	81 30       	cpi	r24, 0x01	; 1
   11bde:	09 f0       	breq	.+2      	; 0x11be2 <FMenuReprint+0xaa>
   11be0:	de c0       	rjmp	.+444    	; 0x11d9e <FMenuReprint+0x266>
   11be2:	8e e0       	ldi	r24, 0x0E	; 14
   11be4:	80 93 6b 02 	sts	0x026B, r24
   11be8:	da c0       	rjmp	.+436    	; 0x11d9e <FMenuReprint+0x266>
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
   11bea:	10 92 93 01 	sts	0x0193, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11bee:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11bf0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11bf2:	81 e0       	ldi	r24, 0x01	; 1
   11bf4:	80 93 be 01 	sts	0x01BE, r24
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11bf8:	83 e0       	ldi	r24, 0x03	; 3
   11bfa:	61 e0       	ldi	r22, 0x01	; 1
   11bfc:	4d ec       	ldi	r20, 0xCD	; 205
   11bfe:	5d e1       	ldi	r21, 0x1D	; 29
   11c00:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
   11c04:	43 c0       	rjmp	.+134    	; 0x11c8c <FMenuReprint+0x154>
          stReprint=rtTimDisplayInvalid;
	      break;
     case rtTimDisplayInvalid:
	      if (TimDisplay>2)stReprint=rtExitReprint;
   11c06:	80 91 93 01 	lds	r24, 0x0193
   11c0a:	83 30       	cpi	r24, 0x03	; 3
   11c0c:	08 f4       	brcc	.+2      	; 0x11c10 <FMenuReprint+0xd8>
   11c0e:	c7 c0       	rjmp	.+398    	; 0x11d9e <FMenuReprint+0x266>
   11c10:	e8 cf       	rjmp	.-48     	; 0x11be2 <FMenuReprint+0xaa>
	      break;
     case rtStandaloneFIP:
	      _scr_pump();
   11c12:	0e 94 56 48 	call	0x90ac	; 0x90ac <_scr_pump>
		  stReprint=rtStandaloneInputFIP;
   11c16:	86 e0       	ldi	r24, 0x06	; 6
   11c18:	e5 cf       	rjmp	.-54     	; 0x11be4 <FMenuReprint+0xac>
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
   11c1a:	81 e0       	ldi	r24, 0x01	; 1
   11c1c:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   11c20:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
   11c24:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='8')){
   11c26:	81 53       	subi	r24, 0x31	; 49
   11c28:	88 30       	cpi	r24, 0x08	; 8
   11c2a:	f8 f4       	brcc	.+62     	; 0x11c6a <FMenuReprint+0x132>
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
   11c2c:	09 2f       	mov	r16, r25
   11c2e:	00 53       	subi	r16, 0x30	; 48
   11c30:	80 2f       	mov	r24, r16
   11c32:	0e 94 9a 20 	call	0x4134	; 0x4134 <GetPumpID>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   11c36:	94 e0       	ldi	r25, 0x04	; 4
   11c38:	90 93 ad 05 	sts	0x05AD, r25
	 PoolMsg=plMsg;
   11c3c:	80 93 d9 0b 	sts	0x0BD9, r24
     IsControlPooling=True;
   11c40:	81 e0       	ldi	r24, 0x01	; 1
   11c42:	80 93 84 01 	sts	0x0184, r24
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
		  if ((KeyChar>='1')&&(KeyChar<='8')){
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
			   TimSend=0;
   11c46:	10 92 7e 0c 	sts	0x0C7E, r1
			   while(TimSend<6){};
   11c4a:	80 91 7e 0c 	lds	r24, 0x0C7E
   11c4e:	86 30       	cpi	r24, 0x06	; 6
   11c50:	e0 f3       	brcs	.-8      	; 0x11c4a <FMenuReprint+0x112>
		       ReprintResult=PrintStandalone(KeyChar-'0',True);
   11c52:	80 2f       	mov	r24, r16
   11c54:	61 e0       	ldi	r22, 0x01	; 1
   11c56:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <PrintStandalone>
			   if (ReprintResult==PS_NO_DATA)stReprint=rtDisplayNoTransaction;
   11c5a:	82 31       	cpi	r24, 0x12	; 18
   11c5c:	11 f4       	brne	.+4      	; 0x11c62 <FMenuReprint+0x12a>
   11c5e:	85 e0       	ldi	r24, 0x05	; 5
   11c60:	c1 cf       	rjmp	.-126    	; 0x11be4 <FMenuReprint+0xac>
			   else if (ReprintResult==PS_PRINTED)stReprint=rtExitReprint;               
   11c62:	81 31       	cpi	r24, 0x11	; 17
   11c64:	09 f0       	breq	.+2      	; 0x11c68 <FMenuReprint+0x130>
   11c66:	9b c0       	rjmp	.+310    	; 0x11d9e <FMenuReprint+0x266>
   11c68:	bc cf       	rjmp	.-136    	; 0x11be2 <FMenuReprint+0xaa>
			   //stReprint=rtExitReprint;
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
   11c6a:	9a 32       	cpi	r25, 0x2A	; 42
   11c6c:	09 f0       	breq	.+2      	; 0x11c70 <FMenuReprint+0x138>
   11c6e:	97 c0       	rjmp	.+302    	; 0x11d9e <FMenuReprint+0x266>
   11c70:	b8 cf       	rjmp	.-144    	; 0x11be2 <FMenuReprint+0xaa>
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   11c72:	83 e0       	ldi	r24, 0x03	; 3
   11c74:	61 e0       	ldi	r22, 0x01	; 1
   11c76:	48 eb       	ldi	r20, 0xB8	; 184
   11c78:	5d e1       	ldi	r21, 0x1D	; 29
   11c7a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11c7e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11c80:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11c82:	81 e0       	ldi	r24, 0x01	; 1
   11c84:	80 93 be 01 	sts	0x01BE, r24
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
		  system_beep(1);
          TimDisplay=0;
   11c88:	10 92 93 01 	sts	0x0193, r1
		  stReprint=rtTimDisplayInvalid;
   11c8c:	84 e0       	ldi	r24, 0x04	; 4
   11c8e:	aa cf       	rjmp	.-172    	; 0x11be4 <FMenuReprint+0xac>
	      break;
	 case rtFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11c90:	89 e6       	ldi	r24, 0x69	; 105
   11c92:	92 e0       	ldi	r25, 0x02	; 2
   11c94:	6f eb       	ldi	r22, 0xBF	; 191
   11c96:	77 e0       	ldi	r23, 0x07	; 7
   11c98:	0e 94 bc 55 	call	0xab78	; 0xab78 <menu_FIP>
		  if (FIPResult==FIP_DONE){
   11c9c:	88 23       	and	r24, r24
   11c9e:	11 f4       	brne	.+4      	; 0x11ca4 <FMenuReprint+0x16c>
		      stReprint=rtRFID;
   11ca0:	88 e0       	ldi	r24, 0x08	; 8
   11ca2:	a0 cf       	rjmp	.-192    	; 0x11be4 <FMenuReprint+0xac>
			  }
		  else
		  if (FIPResult==FIP_CANCEL)stReprint=rtExitReprint;
   11ca4:	82 30       	cpi	r24, 0x02	; 2
   11ca6:	09 f0       	breq	.+2      	; 0x11caa <FMenuReprint+0x172>
   11ca8:	7a c0       	rjmp	.+244    	; 0x11d9e <FMenuReprint+0x266>
   11caa:	9b cf       	rjmp	.-202    	; 0x11be2 <FMenuReprint+0xaa>
	      break;
	 case rtRFID:
	      lcd_clear();
   11cac:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("RePrint FIP:%s "),strFIP_ID);lcd_print(1,1,lcdteks);
   11cb0:	00 d0       	rcall	.+0      	; 0x11cb2 <FMenuReprint+0x17a>
   11cb2:	00 d0       	rcall	.+0      	; 0x11cb4 <FMenuReprint+0x17c>
   11cb4:	00 d0       	rcall	.+0      	; 0x11cb6 <FMenuReprint+0x17e>
   11cb6:	ed b7       	in	r30, 0x3d	; 61
   11cb8:	fe b7       	in	r31, 0x3e	; 62
   11cba:	31 96       	adiw	r30, 0x01	; 1
   11cbc:	8e 01       	movw	r16, r28
   11cbe:	0f 5f       	subi	r16, 0xFF	; 255
   11cc0:	1f 4f       	sbci	r17, 0xFF	; 255
   11cc2:	ad b7       	in	r26, 0x3d	; 61
   11cc4:	be b7       	in	r27, 0x3e	; 62
   11cc6:	12 96       	adiw	r26, 0x02	; 2
   11cc8:	1c 93       	st	X, r17
   11cca:	0e 93       	st	-X, r16
   11ccc:	11 97       	sbiw	r26, 0x01	; 1
   11cce:	88 ea       	ldi	r24, 0xA8	; 168
   11cd0:	9d e1       	ldi	r25, 0x1D	; 29
   11cd2:	93 83       	std	Z+3, r25	; 0x03
   11cd4:	82 83       	std	Z+2, r24	; 0x02
   11cd6:	8f eb       	ldi	r24, 0xBF	; 191
   11cd8:	97 e0       	ldi	r25, 0x07	; 7
   11cda:	95 83       	std	Z+5, r25	; 0x05
   11cdc:	84 83       	std	Z+4, r24	; 0x04
   11cde:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   11ce2:	8d b7       	in	r24, 0x3d	; 61
   11ce4:	9e b7       	in	r25, 0x3e	; 62
   11ce6:	06 96       	adiw	r24, 0x06	; 6
   11ce8:	0f b6       	in	r0, 0x3f	; 63
   11cea:	f8 94       	cli
   11cec:	9e bf       	out	0x3e, r25	; 62
   11cee:	0f be       	out	0x3f, r0	; 63
   11cf0:	8d bf       	out	0x3d, r24	; 61
   11cf2:	81 e0       	ldi	r24, 0x01	; 1
   11cf4:	61 e0       	ldi	r22, 0x01	; 1
   11cf6:	a8 01       	movw	r20, r16
   11cf8:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(2,1,PSTR(  "Tap Supervisor Card"));
   11cfc:	82 e0       	ldi	r24, 0x02	; 2
   11cfe:	61 e0       	ldi	r22, 0x01	; 1
   11d00:	44 e9       	ldi	r20, 0x94	; 148
   11d02:	5d e1       	ldi	r21, 0x1D	; 29
   11d04:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          lcd_printf(4,1,PSTR(  "[*]Back    [#]Exit"));
   11d08:	84 e0       	ldi	r24, 0x04	; 4
   11d0a:	61 e0       	ldi	r22, 0x01	; 1
   11d0c:	41 e8       	ldi	r20, 0x81	; 129
   11d0e:	5d e1       	ldi	r21, 0x1D	; 29
   11d10:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  IsRFIDDetected=False;
   11d14:	10 92 9a 01 	sts	0x019A, r1
		  stReprint=rtInputRFID;
   11d18:	89 e0       	ldi	r24, 0x09	; 9
   11d1a:	64 cf       	rjmp	.-312    	; 0x11be4 <FMenuReprint+0xac>
	      break;
	 case rtInputRFID:
	      if (IsRFIDDetected==True){
   11d1c:	80 91 9a 01 	lds	r24, 0x019A
   11d20:	81 30       	cpi	r24, 0x01	; 1
   11d22:	29 f4       	brne	.+10     	; 0x11d2e <FMenuReprint+0x1f6>
		      IsRFIDDetected=False;
   11d24:	10 92 9a 01 	sts	0x019A, r1
		      stReprint=rtSendMessage28;
   11d28:	8a e0       	ldi	r24, 0x0A	; 10
   11d2a:	80 93 6b 02 	sts	0x026B, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11d2e:	81 e0       	ldi	r24, 0x01	; 1
   11d30:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   11d34:	80 93 6a 02 	sts	0x026A, r24
		  if (KeyPressed==_KEY_CANCEL){
   11d38:	87 3e       	cpi	r24, 0xE7	; 231
   11d3a:	11 f4       	brne	.+4      	; 0x11d40 <FMenuReprint+0x208>
		      stReprint=rtFIP;
   11d3c:	87 e0       	ldi	r24, 0x07	; 7
   11d3e:	52 cf       	rjmp	.-348    	; 0x11be4 <FMenuReprint+0xac>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stReprint=rtExitReprint;
   11d40:	87 3b       	cpi	r24, 0xB7	; 183
   11d42:	69 f5       	brne	.+90     	; 0x11d9e <FMenuReprint+0x266>
   11d44:	4e cf       	rjmp	.-356    	; 0x11be2 <FMenuReprint+0xaa>
	      break;
     case rtSendMessage28:
		  sendMessage28();
   11d46:	0e 94 98 8d 	call	0x11b30	; 0x11b30 <sendMessage28>
		  TimSend=0;
   11d4a:	10 92 7e 0c 	sts	0x0C7E, r1
		  stReprint=rtWaitReply;
   11d4e:	8b e0       	ldi	r24, 0x0B	; 11
   11d50:	49 cf       	rjmp	.-366    	; 0x11be4 <FMenuReprint+0xac>
		  break;
     case rtWaitReply:
	      if (TimSend>TIM_SEND*3)stReprint=rtNoConnection;
   11d52:	80 91 7e 0c 	lds	r24, 0x0C7E
   11d56:	8f 31       	cpi	r24, 0x1F	; 31
   11d58:	18 f0       	brcs	.+6      	; 0x11d60 <FMenuReprint+0x228>
   11d5a:	8c e0       	ldi	r24, 0x0C	; 12
   11d5c:	80 93 6b 02 	sts	0x026B, r24
	      if (IsMessage99==True){
   11d60:	80 91 a1 01 	lds	r24, 0x01A1
   11d64:	3b cf       	rjmp	.-394    	; 0x11bdc <FMenuReprint+0xa4>
		      stReprint=rtExitReprint;
		  }
	      break;
     case rtNoConnection:
	      lcd_clear();
   11d66:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   11d6a:	82 e0       	ldi	r24, 0x02	; 2
   11d6c:	61 e0       	ldi	r22, 0x01	; 1
   11d6e:	43 e7       	ldi	r20, 0x73	; 115
   11d70:	5d e1       	ldi	r21, 0x1D	; 29
   11d72:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   11d76:	83 e0       	ldi	r24, 0x03	; 3
   11d78:	61 e0       	ldi	r22, 0x01	; 1
   11d7a:	45 e6       	ldi	r20, 0x65	; 101
   11d7c:	5d e1       	ldi	r21, 0x1D	; 29
   11d7e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  TimDisplay=5;
   11d82:	85 e0       	ldi	r24, 0x05	; 5
   11d84:	80 93 93 01 	sts	0x0193, r24
		  stReprint=rtDelayExitReprint;
   11d88:	8d e0       	ldi	r24, 0x0D	; 13
   11d8a:	2c cf       	rjmp	.-424    	; 0x11be4 <FMenuReprint+0xac>
	      break;
     case rtDelayExitReprint:
	      if(TimDisplay>=10)stReprint=rtExitReprint;
   11d8c:	80 91 93 01 	lds	r24, 0x0193
   11d90:	8a 30       	cpi	r24, 0x0A	; 10
   11d92:	28 f0       	brcs	.+10     	; 0x11d9e <FMenuReprint+0x266>
   11d94:	26 cf       	rjmp	.-436    	; 0x11be2 <FMenuReprint+0xaa>
	      break;
	 case rtExitReprint:
	      stReprint=rtInit;
   11d96:	10 92 6b 02 	sts	0x026B, r1
   11d9a:	81 e0       	ldi	r24, 0x01	; 1
   11d9c:	01 c0       	rjmp	.+2      	; 0x11da0 <FMenuReprint+0x268>
   11d9e:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   11da0:	64 96       	adiw	r28, 0x14	; 20
   11da2:	0f b6       	in	r0, 0x3f	; 63
   11da4:	f8 94       	cli
   11da6:	de bf       	out	0x3e, r29	; 62
   11da8:	0f be       	out	0x3f, r0	; 63
   11daa:	cd bf       	out	0x3d, r28	; 61
   11dac:	cf 91       	pop	r28
   11dae:	df 91       	pop	r29
   11db0:	1f 91       	pop	r17
   11db2:	0f 91       	pop	r16
   11db4:	08 95       	ret

00011db6 <FMenuAdmin>:

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
     
	 switch(stMenuAdmin){
   11db6:	80 91 4e 02 	lds	r24, 0x024E
   11dba:	83 30       	cpi	r24, 0x03	; 3
   11dbc:	09 f4       	brne	.+2      	; 0x11dc0 <FMenuAdmin+0xa>
   11dbe:	66 c0       	rjmp	.+204    	; 0x11e8c <FMenuAdmin+0xd6>
   11dc0:	84 30       	cpi	r24, 0x04	; 4
   11dc2:	30 f4       	brcc	.+12     	; 0x11dd0 <FMenuAdmin+0x1a>
   11dc4:	81 30       	cpi	r24, 0x01	; 1
   11dc6:	69 f1       	breq	.+90     	; 0x11e22 <FMenuAdmin+0x6c>
   11dc8:	82 30       	cpi	r24, 0x02	; 2
   11dca:	08 f0       	brcs	.+2      	; 0x11dce <FMenuAdmin+0x18>
   11dcc:	4d c0       	rjmp	.+154    	; 0x11e68 <FMenuAdmin+0xb2>
   11dce:	0d c0       	rjmp	.+26     	; 0x11dea <FMenuAdmin+0x34>
   11dd0:	85 30       	cpi	r24, 0x05	; 5
   11dd2:	09 f4       	brne	.+2      	; 0x11dd6 <FMenuAdmin+0x20>
   11dd4:	4e c0       	rjmp	.+156    	; 0x11e72 <FMenuAdmin+0xbc>
   11dd6:	85 30       	cpi	r24, 0x05	; 5
   11dd8:	08 f4       	brcc	.+2      	; 0x11ddc <FMenuAdmin+0x26>
   11dda:	49 c0       	rjmp	.+146    	; 0x11e6e <FMenuAdmin+0xb8>
   11ddc:	86 30       	cpi	r24, 0x06	; 6
   11dde:	09 f4       	brne	.+2      	; 0x11de2 <FMenuAdmin+0x2c>
   11de0:	51 c0       	rjmp	.+162    	; 0x11e84 <FMenuAdmin+0xce>
   11de2:	87 30       	cpi	r24, 0x07	; 7
   11de4:	09 f0       	breq	.+2      	; 0x11de8 <FMenuAdmin+0x32>
   11de6:	5a c0       	rjmp	.+180    	; 0x11e9c <FMenuAdmin+0xe6>
   11de8:	55 c0       	rjmp	.+170    	; 0x11e94 <FMenuAdmin+0xde>
	 case maInitAdmin:
		  lcd_clear();
   11dea:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)RePrint           "));
   11dee:	81 e0       	ldi	r24, 0x01	; 1
   11df0:	61 e0       	ldi	r22, 0x01	; 1
   11df2:	44 eb       	ldi	r20, 0xB4	; 180
   11df4:	57 e1       	ldi	r21, 0x17	; 23
   11df6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)CloseShift        "));
   11dfa:	82 e0       	ldi	r24, 0x02	; 2
   11dfc:	61 e0       	ldi	r22, 0x01	; 1
   11dfe:	4f e9       	ldi	r20, 0x9F	; 159
   11e00:	57 e1       	ldi	r21, 0x17	; 23
   11e02:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("3)CloseDay          "));		  
   11e06:	83 e0       	ldi	r24, 0x03	; 3
   11e08:	61 e0       	ldi	r22, 0x01	; 1
   11e0a:	4a e8       	ldi	r20, 0x8A	; 138
   11e0c:	57 e1       	ldi	r21, 0x17	; 23
   11e0e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(4,1,PSTR("4)Settings   *)Exit "));
   11e12:	84 e0       	ldi	r24, 0x04	; 4
   11e14:	61 e0       	ldi	r22, 0x01	; 1
   11e16:	45 e7       	ldi	r20, 0x75	; 117
   11e18:	57 e1       	ldi	r21, 0x17	; 23
   11e1a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      stMenuAdmin=maSelectOptions;
   11e1e:	81 e0       	ldi	r24, 0x01	; 1
   11e20:	2e c0       	rjmp	.+92     	; 0x11e7e <FMenuAdmin+0xc8>
	      break;
	 case maSelectOptions:
          KeyPressed=_key_scan(1);
   11e22:	81 e0       	ldi	r24, 0x01	; 1
   11e24:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   11e28:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
		  switch (KeyChar){
   11e2c:	82 33       	cpi	r24, 0x32	; 50
   11e2e:	71 f0       	breq	.+28     	; 0x11e4c <FMenuAdmin+0x96>
   11e30:	83 33       	cpi	r24, 0x33	; 51
   11e32:	28 f4       	brcc	.+10     	; 0x11e3e <FMenuAdmin+0x88>
   11e34:	8a 32       	cpi	r24, 0x2A	; 42
   11e36:	11 f1       	breq	.+68     	; 0x11e7c <FMenuAdmin+0xc6>
   11e38:	81 33       	cpi	r24, 0x31	; 49
   11e3a:	81 f5       	brne	.+96     	; 0x11e9c <FMenuAdmin+0xe6>
   11e3c:	05 c0       	rjmp	.+10     	; 0x11e48 <FMenuAdmin+0x92>
   11e3e:	83 33       	cpi	r24, 0x33	; 51
   11e40:	59 f0       	breq	.+22     	; 0x11e58 <FMenuAdmin+0xa2>
   11e42:	84 33       	cpi	r24, 0x34	; 52
   11e44:	59 f5       	brne	.+86     	; 0x11e9c <FMenuAdmin+0xe6>
   11e46:	0e c0       	rjmp	.+28     	; 0x11e64 <FMenuAdmin+0xae>
		  case '1':
		       stMenuAdmin=maMenuReprint;//maMenuAdminConfig;
   11e48:	82 e0       	ldi	r24, 0x02	; 2
   11e4a:	19 c0       	rjmp	.+50     	; 0x11e7e <FMenuAdmin+0xc8>
		       break;  
		  case '2':
		       if (IFType==IT_STANDALONE)
   11e4c:	80 91 00 01 	lds	r24, 0x0100
   11e50:	82 30       	cpi	r24, 0x02	; 2
   11e52:	e1 f4       	brne	.+56     	; 0x11e8c <FMenuAdmin+0xd6>
			       stMenuAdmin=maMenuCloseShift;
   11e54:	84 e0       	ldi	r24, 0x04	; 4
   11e56:	13 c0       	rjmp	.+38     	; 0x11e7e <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '3':
		       if (IFType==IT_STANDALONE)stMenuAdmin=maMenuCloseDay;
   11e58:	80 91 00 01 	lds	r24, 0x0100
   11e5c:	82 30       	cpi	r24, 0x02	; 2
   11e5e:	b1 f4       	brne	.+44     	; 0x11e8c <FMenuAdmin+0xd6>
   11e60:	85 e0       	ldi	r24, 0x05	; 5
   11e62:	0d c0       	rjmp	.+26     	; 0x11e7e <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '4':
		  	   stMenuAdmin=maMenuAdminSettings;
   11e64:	86 e0       	ldi	r24, 0x06	; 6
   11e66:	0b c0       	rjmp	.+22     	; 0x11e7e <FMenuAdmin+0xc8>
    		   stMenuAdmin=maExitMenuAdmin;
		       break;  		  
		  }		  
	      break;
     case maMenuReprint:
	      SubMenu=FMenuReprint();
   11e68:	0e 94 9c 8d 	call	0x11b38	; 0x11b38 <FMenuReprint>
   11e6c:	05 c0       	rjmp	.+10     	; 0x11e78 <FMenuAdmin+0xc2>
	 case maMenuAdminConfig://ChangePassword[],RePrint,PumpTest
	      SubMenu=FSubMenuAdmin();
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;
          break;	 
	 case maMenuCloseShift:
	 	  SubMenu=FCloseShift(CONTINUE_SHIFT);
   11e6e:	82 e0       	ldi	r24, 0x02	; 2
   11e70:	01 c0       	rjmp	.+2      	; 0x11e74 <FMenuAdmin+0xbe>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
	      break;
     case maMenuCloseDay://maMenuCloseShift,maMenuCloseDay
	 	  SubMenu=FCloseShift(NEW_SHIFT);
   11e72:	81 e0       	ldi	r24, 0x01	; 1
   11e74:	0e 94 8a 4a 	call	0x9514	; 0x9514 <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
   11e78:	81 30       	cpi	r24, 0x01	; 1
   11e7a:	81 f4       	brne	.+32     	; 0x11e9c <FMenuAdmin+0xe6>
   11e7c:	87 e0       	ldi	r24, 0x07	; 7
   11e7e:	80 93 4e 02 	sts	0x024E, r24
   11e82:	06 c0       	rjmp	.+12     	; 0x11e90 <FMenuAdmin+0xda>
	      break;
     case maMenuAdminSettings:
	      SubMenu=FMenuAdminSettings();
   11e84:	0e 94 96 73 	call	0xe72c	; 0xe72c <FMenuAdminSettings>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;	      
   11e88:	81 30       	cpi	r24, 0x01	; 1
   11e8a:	41 f4       	brne	.+16     	; 0x11e9c <FMenuAdmin+0xe6>
   11e8c:	10 92 4e 02 	sts	0x024E, r1
   11e90:	80 e0       	ldi	r24, 0x00	; 0
   11e92:	08 95       	ret
	      break;
     case maExitMenuAdmin:
	      stMenuAdmin=maInitAdmin;	      
   11e94:	10 92 4e 02 	sts	0x024E, r1
   11e98:	81 e0       	ldi	r24, 0x01	; 1
   11e9a:	08 95       	ret
   11e9c:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
          break;	 
	 }
   return Result;
}
   11e9e:	08 95       	ret

00011ea0 <FMenuAuthorization>:


char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
static char stMenuAuthorization=maInit,PassTry=0;
     switch(stMenuAuthorization){
   11ea0:	80 91 5d 02 	lds	r24, 0x025D
   11ea4:	83 30       	cpi	r24, 0x03	; 3
   11ea6:	51 f1       	breq	.+84     	; 0x11efc <FMenuAuthorization+0x5c>
   11ea8:	84 30       	cpi	r24, 0x04	; 4
   11eaa:	28 f4       	brcc	.+10     	; 0x11eb6 <FMenuAuthorization+0x16>
   11eac:	81 30       	cpi	r24, 0x01	; 1
   11eae:	81 f0       	breq	.+32     	; 0x11ed0 <FMenuAuthorization+0x30>
   11eb0:	82 30       	cpi	r24, 0x02	; 2
   11eb2:	38 f5       	brcc	.+78     	; 0x11f02 <FMenuAuthorization+0x62>
   11eb4:	0a c0       	rjmp	.+20     	; 0x11eca <FMenuAuthorization+0x2a>
   11eb6:	85 30       	cpi	r24, 0x05	; 5
   11eb8:	61 f1       	breq	.+88     	; 0x11f12 <FMenuAuthorization+0x72>
   11eba:	85 30       	cpi	r24, 0x05	; 5
   11ebc:	28 f1       	brcs	.+74     	; 0x11f08 <FMenuAuthorization+0x68>
   11ebe:	86 30       	cpi	r24, 0x06	; 6
   11ec0:	e1 f1       	breq	.+120    	; 0x11f3a <FMenuAuthorization+0x9a>
   11ec2:	87 30       	cpi	r24, 0x07	; 7
   11ec4:	09 f0       	breq	.+2      	; 0x11ec8 <FMenuAuthorization+0x28>
   11ec6:	4c c0       	rjmp	.+152    	; 0x11f60 <FMenuAuthorization+0xc0>
   11ec8:	47 c0       	rjmp	.+142    	; 0x11f58 <FMenuAuthorization+0xb8>
	 case maInit:
	      PassTry=0;
   11eca:	10 92 5c 02 	sts	0x025C, r1
   11ece:	3d c0       	rjmp	.+122    	; 0x11f4a <FMenuAuthorization+0xaa>
		  stMenuAuthorization=maInputPassword;
	      break;
	 case maInputPassword:
	      PassResult=FMenuPassword();
   11ed0:	0e 94 21 77 	call	0xee42	; 0xee42 <FMenuPassword>
		  switch(PassResult){
   11ed4:	83 30       	cpi	r24, 0x03	; 3
   11ed6:	e1 f1       	breq	.+120    	; 0x11f50 <FMenuAuthorization+0xb0>
   11ed8:	84 30       	cpi	r24, 0x04	; 4
   11eda:	28 f4       	brcc	.+10     	; 0x11ee6 <FMenuAuthorization+0x46>
   11edc:	81 30       	cpi	r24, 0x01	; 1
   11ede:	b9 f1       	breq	.+110    	; 0x11f4e <FMenuAuthorization+0xae>
   11ee0:	82 30       	cpi	r24, 0x02	; 2
   11ee2:	f1 f5       	brne	.+124    	; 0x11f60 <FMenuAuthorization+0xc0>
   11ee4:	09 c0       	rjmp	.+18     	; 0x11ef8 <FMenuAuthorization+0x58>
   11ee6:	84 30       	cpi	r24, 0x04	; 4
   11ee8:	19 f0       	breq	.+6      	; 0x11ef0 <FMenuAuthorization+0x50>
   11eea:	85 30       	cpi	r24, 0x05	; 5
   11eec:	c9 f5       	brne	.+114    	; 0x11f60 <FMenuAuthorization+0xc0>
   11eee:	02 c0       	rjmp	.+4      	; 0x11ef4 <FMenuAuthorization+0x54>
		  case MP_VALID_ADMIN:
		       stMenuAuthorization=maMenuAdmin;
   11ef0:	82 e0       	ldi	r24, 0x02	; 2
   11ef2:	2e c0       	rjmp	.+92     	; 0x11f50 <FMenuAuthorization+0xb0>
		       break;
		  case MP_VALID_SYSTEM:
		       stMenuAuthorization=maMenuSettings;
   11ef4:	84 e0       	ldi	r24, 0x04	; 4
   11ef6:	2c c0       	rjmp	.+88     	; 0x11f50 <FMenuAuthorization+0xb0>
		       break;
		  case MP_INVALID:
		       stMenuAuthorization=maInvalidAuthorization;
   11ef8:	85 e0       	ldi	r24, 0x05	; 5
   11efa:	2a c0       	rjmp	.+84     	; 0x11f50 <FMenuAuthorization+0xb0>
		  else
	      if (PassResult==MP_CANCEL)stMenuAuthorization=maExitAuthorization;
		  */
	      break;
	 case maMenuMaster:
	      SubMenu=FMenuMaster();
   11efc:	0e 94 1d 74 	call	0xe83a	; 0xe83a <FMenuMaster>
   11f00:	05 c0       	rjmp	.+10     	; 0x11f0c <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
	      break;
	 case maMenuAdmin:
          SubMenu=FMenuAdmin();
   11f02:	0e 94 db 8e 	call	0x11db6	; 0x11db6 <FMenuAdmin>
   11f06:	02 c0       	rjmp	.+4      	; 0x11f0c <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;          
		  break;
	 case maMenuSettings:
	      SubMenu=FMenuSettings();
   11f08:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <FMenuSettings>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
   11f0c:	81 30       	cpi	r24, 0x01	; 1
   11f0e:	41 f5       	brne	.+80     	; 0x11f60 <FMenuAuthorization+0xc0>
   11f10:	1e c0       	rjmp	.+60     	; 0x11f4e <FMenuAuthorization+0xae>
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
   11f12:	80 91 5c 02 	lds	r24, 0x025C
   11f16:	8f 5f       	subi	r24, 0xFF	; 255
   11f18:	80 93 5c 02 	sts	0x025C, r24
	      TimDisplay=0;
   11f1c:	10 92 93 01 	sts	0x0193, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11f20:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11f22:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11f24:	81 e0       	ldi	r24, 0x01	; 1
   11f26:	80 93 be 01 	sts	0x01BE, r24
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
	      TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11f2a:	83 e0       	ldi	r24, 0x03	; 3
   11f2c:	61 e0       	ldi	r22, 0x01	; 1
   11f2e:	4c e6       	ldi	r20, 0x6C	; 108
   11f30:	5a e1       	ldi	r21, 0x1A	; 26
   11f32:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  stMenuAuthorization=maDelayExitAuthorization;
   11f36:	86 e0       	ldi	r24, 0x06	; 6
   11f38:	0b c0       	rjmp	.+22     	; 0x11f50 <FMenuAuthorization+0xb0>
          break;	 
	 case maDelayExitAuthorization:
	      if (TimDisplay>2){
   11f3a:	80 91 93 01 	lds	r24, 0x0193
   11f3e:	83 30       	cpi	r24, 0x03	; 3
   11f40:	78 f0       	brcs	.+30     	; 0x11f60 <FMenuAuthorization+0xc0>
		      if (PassTry<3)stMenuAuthorization=maInputPassword;
   11f42:	80 91 5c 02 	lds	r24, 0x025C
   11f46:	83 30       	cpi	r24, 0x03	; 3
   11f48:	10 f4       	brcc	.+4      	; 0x11f4e <FMenuAuthorization+0xae>
   11f4a:	81 e0       	ldi	r24, 0x01	; 1
   11f4c:	01 c0       	rjmp	.+2      	; 0x11f50 <FMenuAuthorization+0xb0>
			  else stMenuAuthorization=maExitAuthorization;
   11f4e:	87 e0       	ldi	r24, 0x07	; 7
   11f50:	80 93 5d 02 	sts	0x025D, r24
   11f54:	80 e0       	ldi	r24, 0x00	; 0
   11f56:	08 95       	ret
		  }
	      break;
	 case maExitAuthorization:
	      stMenuAuthorization=maInit;
   11f58:	10 92 5d 02 	sts	0x025D, r1
   11f5c:	81 e0       	ldi	r24, 0x01	; 1
   11f5e:	08 95       	ret
   11f60:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;	 
}
   11f62:	08 95       	ret

00011f64 <sendMessage24>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strCardID,strFIP_ID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_24);
   11f64:	84 e2       	ldi	r24, 0x24	; 36
   11f66:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   11f6a:	08 95       	ret

00011f6c <sendMessage22>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%sF968CFFB"),strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_22);
   11f6c:	82 e2       	ldi	r24, 0x22	; 34
   11f6e:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   11f72:	08 95       	ret

00011f74 <FMenuLoyalty>:
	      break;
	 }
  return Result;
}

char FMenuLoyalty(){
   11f74:	cf 92       	push	r12
   11f76:	df 92       	push	r13
   11f78:	ef 92       	push	r14
   11f7a:	ff 92       	push	r15
   11f7c:	0f 93       	push	r16
   11f7e:	1f 93       	push	r17
   11f80:	df 93       	push	r29
   11f82:	cf 93       	push	r28
   11f84:	cd b7       	in	r28, 0x3d	; 61
   11f86:	de b7       	in	r29, 0x3e	; 62
   11f88:	64 97       	sbiw	r28, 0x14	; 20
   11f8a:	0f b6       	in	r0, 0x3f	; 63
   11f8c:	f8 94       	cli
   11f8e:	de bf       	out	0x3e, r29	; 62
   11f90:	0f be       	out	0x3f, r0	; 63
   11f92:	cd bf       	out	0x3d, r28	; 61
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
	 switch(stLoyalty){
   11f94:	00 91 68 02 	lds	r16, 0x0268
   11f98:	07 30       	cpi	r16, 0x07	; 7
   11f9a:	09 f4       	brne	.+2      	; 0x11f9e <FMenuLoyalty+0x2a>
   11f9c:	04 c1       	rjmp	.+520    	; 0x121a6 <FMenuLoyalty+0x232>
   11f9e:	08 30       	cpi	r16, 0x08	; 8
   11fa0:	98 f4       	brcc	.+38     	; 0x11fc8 <FMenuLoyalty+0x54>
   11fa2:	03 30       	cpi	r16, 0x03	; 3
   11fa4:	09 f4       	brne	.+2      	; 0x11fa8 <FMenuLoyalty+0x34>
   11fa6:	5b c0       	rjmp	.+182    	; 0x1205e <FMenuLoyalty+0xea>
   11fa8:	04 30       	cpi	r16, 0x04	; 4
   11faa:	38 f4       	brcc	.+14     	; 0x11fba <FMenuLoyalty+0x46>
   11fac:	01 30       	cpi	r16, 0x01	; 1
   11fae:	09 f4       	brne	.+2      	; 0x11fb2 <FMenuLoyalty+0x3e>
   11fb0:	42 c0       	rjmp	.+132    	; 0x12036 <FMenuLoyalty+0xc2>
   11fb2:	02 30       	cpi	r16, 0x02	; 2
   11fb4:	08 f0       	brcs	.+2      	; 0x11fb8 <FMenuLoyalty+0x44>
   11fb6:	61 c0       	rjmp	.+194    	; 0x1207a <FMenuLoyalty+0x106>
   11fb8:	20 c0       	rjmp	.+64     	; 0x11ffa <FMenuLoyalty+0x86>
   11fba:	05 30       	cpi	r16, 0x05	; 5
   11fbc:	09 f4       	brne	.+2      	; 0x11fc0 <FMenuLoyalty+0x4c>
   11fbe:	a2 c0       	rjmp	.+324    	; 0x12104 <FMenuLoyalty+0x190>
   11fc0:	06 30       	cpi	r16, 0x06	; 6
   11fc2:	08 f0       	brcs	.+2      	; 0x11fc6 <FMenuLoyalty+0x52>
   11fc4:	ba c0       	rjmp	.+372    	; 0x1213a <FMenuLoyalty+0x1c6>
   11fc6:	8c c0       	rjmp	.+280    	; 0x120e0 <FMenuLoyalty+0x16c>
   11fc8:	0b 30       	cpi	r16, 0x0B	; 11
   11fca:	09 f4       	brne	.+2      	; 0x11fce <FMenuLoyalty+0x5a>
   11fcc:	36 c1       	rjmp	.+620    	; 0x1223a <FMenuLoyalty+0x2c6>
   11fce:	0c 30       	cpi	r16, 0x0C	; 12
   11fd0:	38 f4       	brcc	.+14     	; 0x11fe0 <FMenuLoyalty+0x6c>
   11fd2:	09 30       	cpi	r16, 0x09	; 9
   11fd4:	09 f4       	brne	.+2      	; 0x11fd8 <FMenuLoyalty+0x64>
   11fd6:	f0 c0       	rjmp	.+480    	; 0x121b8 <FMenuLoyalty+0x244>
   11fd8:	0a 30       	cpi	r16, 0x0A	; 10
   11fda:	08 f0       	brcs	.+2      	; 0x11fde <FMenuLoyalty+0x6a>
   11fdc:	10 c1       	rjmp	.+544    	; 0x121fe <FMenuLoyalty+0x28a>
   11fde:	e6 c0       	rjmp	.+460    	; 0x121ac <FMenuLoyalty+0x238>
   11fe0:	0d 30       	cpi	r16, 0x0D	; 13
   11fe2:	09 f4       	brne	.+2      	; 0x11fe6 <FMenuLoyalty+0x72>
   11fe4:	ea c1       	rjmp	.+980    	; 0x123ba <FMenuLoyalty+0x446>
   11fe6:	0d 30       	cpi	r16, 0x0D	; 13
   11fe8:	08 f4       	brcc	.+2      	; 0x11fec <FMenuLoyalty+0x78>
   11fea:	f1 c1       	rjmp	.+994    	; 0x123ce <FMenuLoyalty+0x45a>
   11fec:	0e 30       	cpi	r16, 0x0E	; 14
   11fee:	09 f4       	brne	.+2      	; 0x11ff2 <FMenuLoyalty+0x7e>
   11ff0:	00 c2       	rjmp	.+1024   	; 0x123f2 <FMenuLoyalty+0x47e>
   11ff2:	0f 30       	cpi	r16, 0x0F	; 15
   11ff4:	09 f0       	breq	.+2      	; 0x11ff8 <FMenuLoyalty+0x84>
   11ff6:	09 c2       	rjmp	.+1042   	; 0x1240a <FMenuLoyalty+0x496>
   11ff8:	02 c2       	rjmp	.+1028   	; 0x123fe <FMenuLoyalty+0x48a>
	 case mlInit:
	      lcd_clear();
   11ffa:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("  Menu Loyalty   "));
   11ffe:	81 e0       	ldi	r24, 0x01	; 1
   12000:	61 e0       	ldi	r22, 0x01	; 1
   12002:	43 e5       	ldi	r20, 0x53	; 83
   12004:	5d e1       	ldi	r21, 0x1D	; 29
   12006:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          lcd_printf(1,1,PSTR("1.Enquiry        "));
   1200a:	81 e0       	ldi	r24, 0x01	; 1
   1200c:	61 e0       	ldi	r22, 0x01	; 1
   1200e:	41 e4       	ldi	r20, 0x41	; 65
   12010:	5d e1       	ldi	r21, 0x1D	; 29
   12012:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Loyalty Update "));
   12016:	82 e0       	ldi	r24, 0x02	; 2
   12018:	61 e0       	ldi	r22, 0x01	; 1
   1201a:	4f e2       	ldi	r20, 0x2F	; 47
   1201c:	5d e1       	ldi	r21, 0x1D	; 29
   1201e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back          "));
   12022:	84 e0       	ldi	r24, 0x04	; 4
   12024:	61 e0       	ldi	r22, 0x01	; 1
   12026:	4d e1       	ldi	r20, 0x1D	; 29
   12028:	5d e1       	ldi	r21, 0x1D	; 29
   1202a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  IsLoyaltyUpdate=False;
   1202e:	10 92 66 02 	sts	0x0266, r1
		  stLoyalty=mlLoyaltySelect;
   12032:	81 e0       	ldi	r24, 0x01	; 1
   12034:	08 c0       	rjmp	.+16     	; 0x12046 <FMenuLoyalty+0xd2>
	      break;
	 case mlLoyaltySelect:
	 	  KeyPressed=_key_scan(1);
   12036:	81 e0       	ldi	r24, 0x01	; 1
   12038:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  if (KeyPressed==_KEY_1){
   1203c:	8e 3e       	cpi	r24, 0xEE	; 238
   1203e:	31 f4       	brne	.+12     	; 0x1204c <FMenuLoyalty+0xd8>
		      IsLoyaltyUpdate=False;
   12040:	10 92 66 02 	sts	0x0266, r1
		      stLoyalty=mlShowEnquiry;
   12044:	84 e0       	ldi	r24, 0x04	; 4
   12046:	80 93 68 02 	sts	0x0268, r24
   1204a:	df c1       	rjmp	.+958    	; 0x1240a <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_2){
   1204c:	8e 3d       	cpi	r24, 0xDE	; 222
   1204e:	19 f4       	brne	.+6      	; 0x12056 <FMenuLoyalty+0xe2>
		      IsLoyaltyUpdate=True;
   12050:	00 93 66 02 	sts	0x0266, r16
   12054:	69 c0       	rjmp	.+210    	; 0x12128 <FMenuLoyalty+0x1b4>
			  stLoyalty=mlSelectFIP;
			  }
		  if (KeyPressed==_KEY_CANCEL)stLoyalty=mlExitLoyalty;
   12056:	87 3e       	cpi	r24, 0xE7	; 231
   12058:	09 f4       	brne	.+2      	; 0x1205c <FMenuLoyalty+0xe8>
   1205a:	cf c1       	rjmp	.+926    	; 0x123fa <FMenuLoyalty+0x486>
   1205c:	d6 c1       	rjmp	.+940    	; 0x1240a <FMenuLoyalty+0x496>
	      break;
     case mlSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   1205e:	87 e6       	ldi	r24, 0x67	; 103
   12060:	92 e0       	ldi	r25, 0x02	; 2
   12062:	6f eb       	ldi	r22, 0xBF	; 191
   12064:	77 e0       	ldi	r23, 0x07	; 7
   12066:	0e 94 bc 55 	call	0xab78	; 0xab78 <menu_FIP>
		  if (FIPResult==FIP_DONE)stLoyalty=mlUpdateLoyalty;
   1206a:	88 23       	and	r24, r24
   1206c:	11 f4       	brne	.+4      	; 0x12072 <FMenuLoyalty+0xfe>
   1206e:	82 e0       	ldi	r24, 0x02	; 2
   12070:	ea cf       	rjmp	.-44     	; 0x12046 <FMenuLoyalty+0xd2>
		  else
		  if (FIPResult==FIP_CANCEL)stLoyalty=mlInit;
   12072:	82 30       	cpi	r24, 0x02	; 2
   12074:	09 f0       	breq	.+2      	; 0x12078 <FMenuLoyalty+0x104>
   12076:	c9 c1       	rjmp	.+914    	; 0x1240a <FMenuLoyalty+0x496>
   12078:	59 c0       	rjmp	.+178    	; 0x1212c <FMenuLoyalty+0x1b8>
	      break;
     case mlUpdateLoyalty: 
	      lcd_clear();
   1207a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("FIP:%s"),strFIP_ID);
   1207e:	00 d0       	rcall	.+0      	; 0x12080 <FMenuLoyalty+0x10c>
   12080:	00 d0       	rcall	.+0      	; 0x12082 <FMenuLoyalty+0x10e>
   12082:	00 d0       	rcall	.+0      	; 0x12084 <FMenuLoyalty+0x110>
   12084:	ed b7       	in	r30, 0x3d	; 61
   12086:	fe b7       	in	r31, 0x3e	; 62
   12088:	31 96       	adiw	r30, 0x01	; 1
   1208a:	8e 01       	movw	r16, r28
   1208c:	0f 5f       	subi	r16, 0xFF	; 255
   1208e:	1f 4f       	sbci	r17, 0xFF	; 255
   12090:	ad b7       	in	r26, 0x3d	; 61
   12092:	be b7       	in	r27, 0x3e	; 62
   12094:	12 96       	adiw	r26, 0x02	; 2
   12096:	1c 93       	st	X, r17
   12098:	0e 93       	st	-X, r16
   1209a:	11 97       	sbiw	r26, 0x01	; 1
   1209c:	86 e1       	ldi	r24, 0x16	; 22
   1209e:	9d e1       	ldi	r25, 0x1D	; 29
   120a0:	93 83       	std	Z+3, r25	; 0x03
   120a2:	82 83       	std	Z+2, r24	; 0x02
   120a4:	8f eb       	ldi	r24, 0xBF	; 191
   120a6:	97 e0       	ldi	r25, 0x07	; 7
   120a8:	95 83       	std	Z+5, r25	; 0x05
   120aa:	84 83       	std	Z+4, r24	; 0x04
   120ac:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   120b0:	8d b7       	in	r24, 0x3d	; 61
   120b2:	9e b7       	in	r25, 0x3e	; 62
   120b4:	06 96       	adiw	r24, 0x06	; 6
   120b6:	0f b6       	in	r0, 0x3f	; 63
   120b8:	f8 94       	cli
   120ba:	9e bf       	out	0x3e, r25	; 62
   120bc:	0f be       	out	0x3f, r0	; 63
   120be:	8d bf       	out	0x3d, r24	; 61
   120c0:	81 e0       	ldi	r24, 0x01	; 1
   120c2:	61 e0       	ldi	r22, 0x01	; 1
   120c4:	47 e0       	ldi	r20, 0x07	; 7
   120c6:	5d e1       	ldi	r21, 0x1D	; 29
   120c8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_print(2,1,lcdteks);
   120cc:	82 e0       	ldi	r24, 0x02	; 2
   120ce:	61 e0       	ldi	r22, 0x01	; 1
   120d0:	a8 01       	movw	r20, r16
   120d2:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   120d6:	84 e0       	ldi	r24, 0x04	; 4
   120d8:	61 e0       	ldi	r22, 0x01	; 1
   120da:	44 ef       	ldi	r20, 0xF4	; 244
   120dc:	5c e1       	ldi	r21, 0x1C	; 28
   120de:	0c c0       	rjmp	.+24     	; 0x120f8 <FMenuLoyalty+0x184>
		  IsRFIDDetected=False;
	      stLoyalty=mlInputRFID;
	      break;
	 case mlShowEnquiry:
	      lcd_clear();
   120e0:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   120e4:	81 e0       	ldi	r24, 0x01	; 1
   120e6:	61 e0       	ldi	r22, 0x01	; 1
   120e8:	45 ee       	ldi	r20, 0xE5	; 229
   120ea:	5c e1       	ldi	r21, 0x1C	; 28
   120ec:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   120f0:	84 e0       	ldi	r24, 0x04	; 4
   120f2:	61 e0       	ldi	r22, 0x01	; 1
   120f4:	42 ed       	ldi	r20, 0xD2	; 210
   120f6:	5c e1       	ldi	r21, 0x1C	; 28
   120f8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  IsRFIDDetected=False;
   120fc:	10 92 9a 01 	sts	0x019A, r1
		  stLoyalty=mlInputRFID;
   12100:	85 e0       	ldi	r24, 0x05	; 5
   12102:	a1 cf       	rjmp	.-190    	; 0x12046 <FMenuLoyalty+0xd2>
	      break;
     case mlInputRFID:
	      if (IsRFIDDetected==True){
   12104:	80 91 9a 01 	lds	r24, 0x019A
   12108:	81 30       	cpi	r24, 0x01	; 1
   1210a:	29 f4       	brne	.+10     	; 0x12116 <FMenuLoyalty+0x1a2>
		      IsRFIDDetected=False;
   1210c:	10 92 9a 01 	sts	0x019A, r1
		      stLoyalty=mlShowProsesRFID;
   12110:	86 e0       	ldi	r24, 0x06	; 6
   12112:	80 93 68 02 	sts	0x0268, r24
		  }
	 	  KeyPressed=_key_scan(1);
   12116:	81 e0       	ldi	r24, 0x01	; 1
   12118:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
		  if (KeyPressed==_KEY_CANCEL){
   1211c:	87 3e       	cpi	r24, 0xE7	; 231
   1211e:	49 f4       	brne	.+18     	; 0x12132 <FMenuLoyalty+0x1be>
		      if (IsLoyaltyUpdate==True)
   12120:	80 91 66 02 	lds	r24, 0x0266
   12124:	81 30       	cpi	r24, 0x01	; 1
   12126:	11 f4       	brne	.+4      	; 0x1212c <FMenuLoyalty+0x1b8>
			       stLoyalty=mlSelectFIP;
   12128:	83 e0       	ldi	r24, 0x03	; 3
   1212a:	8d cf       	rjmp	.-230    	; 0x12046 <FMenuLoyalty+0xd2>
			  else stLoyalty=mlInit;
   1212c:	10 92 68 02 	sts	0x0268, r1
   12130:	6c c1       	rjmp	.+728    	; 0x1240a <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stLoyalty=mlExitLoyalty;
   12132:	87 3b       	cpi	r24, 0xB7	; 183
   12134:	09 f0       	breq	.+2      	; 0x12138 <FMenuLoyalty+0x1c4>
   12136:	69 c1       	rjmp	.+722    	; 0x1240a <FMenuLoyalty+0x496>
   12138:	60 c1       	rjmp	.+704    	; 0x123fa <FMenuLoyalty+0x486>
	      break;
     case mlShowProsesRFID:
	      lcd_clear();
   1213a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("ID:%s"),strRFID);
   1213e:	00 d0       	rcall	.+0      	; 0x12140 <FMenuLoyalty+0x1cc>
   12140:	00 d0       	rcall	.+0      	; 0x12142 <FMenuLoyalty+0x1ce>
   12142:	00 d0       	rcall	.+0      	; 0x12144 <FMenuLoyalty+0x1d0>
   12144:	ed b7       	in	r30, 0x3d	; 61
   12146:	fe b7       	in	r31, 0x3e	; 62
   12148:	31 96       	adiw	r30, 0x01	; 1
   1214a:	8e 01       	movw	r16, r28
   1214c:	0f 5f       	subi	r16, 0xFF	; 255
   1214e:	1f 4f       	sbci	r17, 0xFF	; 255
   12150:	ad b7       	in	r26, 0x3d	; 61
   12152:	be b7       	in	r27, 0x3e	; 62
   12154:	12 96       	adiw	r26, 0x02	; 2
   12156:	1c 93       	st	X, r17
   12158:	0e 93       	st	-X, r16
   1215a:	11 97       	sbiw	r26, 0x01	; 1
   1215c:	8c ec       	ldi	r24, 0xCC	; 204
   1215e:	9c e1       	ldi	r25, 0x1C	; 28
   12160:	93 83       	std	Z+3, r25	; 0x03
   12162:	82 83       	std	Z+2, r24	; 0x02
   12164:	87 e5       	ldi	r24, 0x57	; 87
   12166:	9c e0       	ldi	r25, 0x0C	; 12
   12168:	95 83       	std	Z+5, r25	; 0x05
   1216a:	84 83       	std	Z+4, r24	; 0x04
   1216c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print (1,1,lcdteks);	      
   12170:	8d b7       	in	r24, 0x3d	; 61
   12172:	9e b7       	in	r25, 0x3e	; 62
   12174:	06 96       	adiw	r24, 0x06	; 6
   12176:	0f b6       	in	r0, 0x3f	; 63
   12178:	f8 94       	cli
   1217a:	9e bf       	out	0x3e, r25	; 62
   1217c:	0f be       	out	0x3f, r0	; 63
   1217e:	8d bf       	out	0x3d, r24	; 61
   12180:	81 e0       	ldi	r24, 0x01	; 1
   12182:	61 e0       	ldi	r22, 0x01	; 1
   12184:	a8 01       	movw	r20, r16
   12186:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_printf(2,1,PSTR("Proses"));	      
   1218a:	82 e0       	ldi	r24, 0x02	; 2
   1218c:	61 e0       	ldi	r22, 0x01	; 1
   1218e:	45 ec       	ldi	r20, 0xC5	; 197
   12190:	5c e1       	ldi	r21, 0x1C	; 28
   12192:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  if (IsLoyaltyUpdate==True)stLoyalty=mlSendMessage24;
   12196:	80 91 66 02 	lds	r24, 0x0266
   1219a:	81 30       	cpi	r24, 0x01	; 1
   1219c:	11 f4       	brne	.+4      	; 0x121a2 <FMenuLoyalty+0x22e>
   1219e:	88 e0       	ldi	r24, 0x08	; 8
   121a0:	52 cf       	rjmp	.-348    	; 0x12046 <FMenuLoyalty+0xd2>
		  else stLoyalty=mlSendMessage22;
   121a2:	87 e0       	ldi	r24, 0x07	; 7
   121a4:	50 cf       	rjmp	.-352    	; 0x12046 <FMenuLoyalty+0xd2>
	      break;
     case mlSendMessage22:
	      sendMessage22();
   121a6:	0e 94 b6 8f 	call	0x11f6c	; 0x11f6c <sendMessage22>
   121aa:	02 c0       	rjmp	.+4      	; 0x121b0 <FMenuLoyalty+0x23c>
		  TimSend=0;		  
          stLoyalty=mlWaitReply;
	      break;
     case mlSendMessage24:
	      sendMessage24();
   121ac:	0e 94 b2 8f 	call	0x11f64	; 0x11f64 <sendMessage24>
		  TimSend=0;		  
   121b0:	10 92 7e 0c 	sts	0x0C7E, r1
          stLoyalty=mlWaitReply;
   121b4:	89 e0       	ldi	r24, 0x09	; 9
   121b6:	47 cf       	rjmp	.-370    	; 0x12046 <FMenuLoyalty+0xd2>
	      break;
     case mlWaitReply:
	      if (TimSend>(TIM_SEND*3))
   121b8:	80 91 7e 0c 	lds	r24, 0x0C7E
   121bc:	8f 31       	cpi	r24, 0x1F	; 31
   121be:	18 f0       	brcs	.+6      	; 0x121c6 <FMenuLoyalty+0x252>
		      stLoyalty=mlNoConnection;
   121c0:	8c e0       	ldi	r24, 0x0C	; 12
   121c2:	80 93 68 02 	sts	0x0268, r24
	      if (IsMessage23==True){
   121c6:	80 91 a4 01 	lds	r24, 0x01A4
   121ca:	81 30       	cpi	r24, 0x01	; 1
   121cc:	39 f4       	brne	.+14     	; 0x121dc <FMenuLoyalty+0x268>
		      IsMessage23=False;
   121ce:	10 92 a4 01 	sts	0x01A4, r1
			  procMessage23();
   121d2:	0e 94 28 18 	call	0x3050	; 0x3050 <procMessage23>
			  stLoyalty=mlDispEnquiry;
   121d6:	8b e0       	ldi	r24, 0x0B	; 11
   121d8:	80 93 68 02 	sts	0x0268, r24
		  }
	      if (IsMessage09==True){
   121dc:	80 91 a5 01 	lds	r24, 0x01A5
   121e0:	81 30       	cpi	r24, 0x01	; 1
   121e2:	39 f4       	brne	.+14     	; 0x121f2 <FMenuLoyalty+0x27e>
		      IsMessage09=False;
   121e4:	10 92 a5 01 	sts	0x01A5, r1
	          procMessage09();
   121e8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <procMessage09>
              stLoyalty=mlDisplayFreeMessage;
   121ec:	8a e0       	ldi	r24, 0x0A	; 10
   121ee:	80 93 68 02 	sts	0x0268, r24
		  }
	      if (IsMessage99==True){
   121f2:	80 91 a1 01 	lds	r24, 0x01A1
   121f6:	81 30       	cpi	r24, 0x01	; 1
   121f8:	09 f0       	breq	.+2      	; 0x121fc <FMenuLoyalty+0x288>
   121fa:	07 c1       	rjmp	.+526    	; 0x1240a <FMenuLoyalty+0x496>
   121fc:	1c c0       	rjmp	.+56     	; 0x12236 <FMenuLoyalty+0x2c2>
              stLoyalty=mlDelayExitLoyalty;
		  }
	      break;
     case mlDisplayFreeMessage:
		  lcd_clear();
   121fe:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   12202:	81 e0       	ldi	r24, 0x01	; 1
   12204:	61 e0       	ldi	r22, 0x01	; 1
   12206:	48 e9       	ldi	r20, 0x98	; 152
   12208:	58 e0       	ldi	r21, 0x08	; 8
   1220a:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   1220e:	82 e0       	ldi	r24, 0x02	; 2
   12210:	61 e0       	ldi	r22, 0x01	; 1
   12212:	49 ea       	ldi	r20, 0xA9	; 169
   12214:	57 e0       	ldi	r21, 0x07	; 7
   12216:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   1221a:	83 e0       	ldi	r24, 0x03	; 3
   1221c:	61 e0       	ldi	r22, 0x01	; 1
   1221e:	42 e2       	ldi	r20, 0x22	; 34
   12220:	58 e0       	ldi	r21, 0x08	; 8
   12222:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   12226:	84 e0       	ldi	r24, 0x04	; 4
   12228:	61 e0       	ldi	r22, 0x01	; 1
   1222a:	4c ed       	ldi	r20, 0xDC	; 220
   1222c:	5b e0       	ldi	r21, 0x0B	; 11
   1222e:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  TimDisplay=0;
   12232:	10 92 93 01 	sts	0x0193, r1
		  stLoyalty=mlDelayExitLoyalty;
   12236:	8e e0       	ldi	r24, 0x0E	; 14
   12238:	06 cf       	rjmp	.-500    	; 0x12046 <FMenuLoyalty+0xd2>
	      break;
     case mlDispEnquiry:	      
	      lcd_clear();
   1223a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  RemSpaceLag(strCardID);RemSpaceLag(strCardHolder);
   1223e:	4f e8       	ldi	r20, 0x8F	; 143
   12240:	c4 2e       	mov	r12, r20
   12242:	4b e0       	ldi	r20, 0x0B	; 11
   12244:	d4 2e       	mov	r13, r20
   12246:	c6 01       	movw	r24, r12
   12248:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
   1224c:	3a e2       	ldi	r19, 0x2A	; 42
   1224e:	e3 2e       	mov	r14, r19
   12250:	33 e0       	ldi	r19, 0x03	; 3
   12252:	f3 2e       	mov	r15, r19
   12254:	c7 01       	movw	r24, r14
   12256:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("%s:%s"),strCardID,strCardHolder);
   1225a:	ad b7       	in	r26, 0x3d	; 61
   1225c:	be b7       	in	r27, 0x3e	; 62
   1225e:	18 97       	sbiw	r26, 0x08	; 8
   12260:	0f b6       	in	r0, 0x3f	; 63
   12262:	f8 94       	cli
   12264:	be bf       	out	0x3e, r27	; 62
   12266:	0f be       	out	0x3f, r0	; 63
   12268:	ad bf       	out	0x3d, r26	; 61
   1226a:	ed b7       	in	r30, 0x3d	; 61
   1226c:	fe b7       	in	r31, 0x3e	; 62
   1226e:	31 96       	adiw	r30, 0x01	; 1
   12270:	8e 01       	movw	r16, r28
   12272:	0f 5f       	subi	r16, 0xFF	; 255
   12274:	1f 4f       	sbci	r17, 0xFF	; 255
   12276:	12 96       	adiw	r26, 0x02	; 2
   12278:	1c 93       	st	X, r17
   1227a:	0e 93       	st	-X, r16
   1227c:	11 97       	sbiw	r26, 0x01	; 1
   1227e:	8f eb       	ldi	r24, 0xBF	; 191
   12280:	9c e1       	ldi	r25, 0x1C	; 28
   12282:	93 83       	std	Z+3, r25	; 0x03
   12284:	82 83       	std	Z+2, r24	; 0x02
   12286:	d5 82       	std	Z+5, r13	; 0x05
   12288:	c4 82       	std	Z+4, r12	; 0x04
   1228a:	f7 82       	std	Z+7, r15	; 0x07
   1228c:	e6 82       	std	Z+6, r14	; 0x06
   1228e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(1,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   12292:	8d b7       	in	r24, 0x3d	; 61
   12294:	9e b7       	in	r25, 0x3e	; 62
   12296:	08 96       	adiw	r24, 0x08	; 8
   12298:	0f b6       	in	r0, 0x3f	; 63
   1229a:	f8 94       	cli
   1229c:	9e bf       	out	0x3e, r25	; 62
   1229e:	0f be       	out	0x3f, r0	; 63
   122a0:	8d bf       	out	0x3d, r24	; 61
   122a2:	81 e0       	ldi	r24, 0x01	; 1
   122a4:	61 e0       	ldi	r22, 0x01	; 1
   122a6:	a8 01       	movw	r20, r16
   122a8:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
   122ac:	2b e3       	ldi	r18, 0x3B	; 59
   122ae:	e2 2e       	mov	r14, r18
   122b0:	28 e0       	ldi	r18, 0x08	; 8
   122b2:	f2 2e       	mov	r15, r18
   122b4:	c7 01       	movw	r24, r14
   122b6:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Points:%s"),strLoyCurrentPoints);
   122ba:	00 d0       	rcall	.+0      	; 0x122bc <FMenuLoyalty+0x348>
   122bc:	00 d0       	rcall	.+0      	; 0x122be <FMenuLoyalty+0x34a>
   122be:	00 d0       	rcall	.+0      	; 0x122c0 <FMenuLoyalty+0x34c>
   122c0:	ed b7       	in	r30, 0x3d	; 61
   122c2:	fe b7       	in	r31, 0x3e	; 62
   122c4:	31 96       	adiw	r30, 0x01	; 1
   122c6:	ad b7       	in	r26, 0x3d	; 61
   122c8:	be b7       	in	r27, 0x3e	; 62
   122ca:	12 96       	adiw	r26, 0x02	; 2
   122cc:	1c 93       	st	X, r17
   122ce:	0e 93       	st	-X, r16
   122d0:	11 97       	sbiw	r26, 0x01	; 1
   122d2:	85 eb       	ldi	r24, 0xB5	; 181
   122d4:	9c e1       	ldi	r25, 0x1C	; 28
   122d6:	93 83       	std	Z+3, r25	; 0x03
   122d8:	82 83       	std	Z+2, r24	; 0x02
   122da:	f5 82       	std	Z+5, r15	; 0x05
   122dc:	e4 82       	std	Z+4, r14	; 0x04
   122de:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(2,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   122e2:	8d b7       	in	r24, 0x3d	; 61
   122e4:	9e b7       	in	r25, 0x3e	; 62
   122e6:	06 96       	adiw	r24, 0x06	; 6
   122e8:	0f b6       	in	r0, 0x3f	; 63
   122ea:	f8 94       	cli
   122ec:	9e bf       	out	0x3e, r25	; 62
   122ee:	0f be       	out	0x3f, r0	; 63
   122f0:	8d bf       	out	0x3d, r24	; 61
   122f2:	82 e0       	ldi	r24, 0x02	; 2
   122f4:	61 e0       	ldi	r22, 0x01	; 1
   122f6:	a8 01       	movw	r20, r16
   122f8:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
   122fc:	c7 01       	movw	r24, r14
   122fe:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("CM Amt:%s"),strLoyCurrMonConsumeA);
   12302:	00 d0       	rcall	.+0      	; 0x12304 <FMenuLoyalty+0x390>
   12304:	00 d0       	rcall	.+0      	; 0x12306 <FMenuLoyalty+0x392>
   12306:	00 d0       	rcall	.+0      	; 0x12308 <FMenuLoyalty+0x394>
   12308:	ed b7       	in	r30, 0x3d	; 61
   1230a:	fe b7       	in	r31, 0x3e	; 62
   1230c:	31 96       	adiw	r30, 0x01	; 1
   1230e:	ad b7       	in	r26, 0x3d	; 61
   12310:	be b7       	in	r27, 0x3e	; 62
   12312:	12 96       	adiw	r26, 0x02	; 2
   12314:	1c 93       	st	X, r17
   12316:	0e 93       	st	-X, r16
   12318:	11 97       	sbiw	r26, 0x01	; 1
   1231a:	8b ea       	ldi	r24, 0xAB	; 171
   1231c:	9c e1       	ldi	r25, 0x1C	; 28
   1231e:	93 83       	std	Z+3, r25	; 0x03
   12320:	82 83       	std	Z+2, r24	; 0x02
   12322:	84 e8       	ldi	r24, 0x84	; 132
   12324:	93 e0       	ldi	r25, 0x03	; 3
   12326:	95 83       	std	Z+5, r25	; 0x05
   12328:	84 83       	std	Z+4, r24	; 0x04
   1232a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(3,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   1232e:	8d b7       	in	r24, 0x3d	; 61
   12330:	9e b7       	in	r25, 0x3e	; 62
   12332:	06 96       	adiw	r24, 0x06	; 6
   12334:	0f b6       	in	r0, 0x3f	; 63
   12336:	f8 94       	cli
   12338:	9e bf       	out	0x3e, r25	; 62
   1233a:	0f be       	out	0x3f, r0	; 63
   1233c:	8d bf       	out	0x3d, r24	; 61
   1233e:	83 e0       	ldi	r24, 0x03	; 3
   12340:	61 e0       	ldi	r22, 0x01	; 1
   12342:	a8 01       	movw	r20, r16
   12344:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
   12348:	c7 01       	movw	r24, r14
   1234a:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Cm Vol:%s"),strLoyCurrMonConsumeV);
   1234e:	00 d0       	rcall	.+0      	; 0x12350 <FMenuLoyalty+0x3dc>
   12350:	00 d0       	rcall	.+0      	; 0x12352 <FMenuLoyalty+0x3de>
   12352:	00 d0       	rcall	.+0      	; 0x12354 <FMenuLoyalty+0x3e0>
   12354:	ed b7       	in	r30, 0x3d	; 61
   12356:	fe b7       	in	r31, 0x3e	; 62
   12358:	31 96       	adiw	r30, 0x01	; 1
   1235a:	ad b7       	in	r26, 0x3d	; 61
   1235c:	be b7       	in	r27, 0x3e	; 62
   1235e:	12 96       	adiw	r26, 0x02	; 2
   12360:	1c 93       	st	X, r17
   12362:	0e 93       	st	-X, r16
   12364:	11 97       	sbiw	r26, 0x01	; 1
   12366:	81 ea       	ldi	r24, 0xA1	; 161
   12368:	9c e1       	ldi	r25, 0x1C	; 28
   1236a:	93 83       	std	Z+3, r25	; 0x03
   1236c:	82 83       	std	Z+2, r24	; 0x02
   1236e:	83 ef       	ldi	r24, 0xF3	; 243
   12370:	9b e0       	ldi	r25, 0x0B	; 11
   12372:	95 83       	std	Z+5, r25	; 0x05
   12374:	84 83       	std	Z+4, r24	; 0x04
   12376:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  lcd_print(4,1,lcdteks);
   1237a:	8d b7       	in	r24, 0x3d	; 61
   1237c:	9e b7       	in	r25, 0x3e	; 62
   1237e:	06 96       	adiw	r24, 0x06	; 6
   12380:	0f b6       	in	r0, 0x3f	; 63
   12382:	f8 94       	cli
   12384:	9e bf       	out	0x3e, r25	; 62
   12386:	0f be       	out	0x3f, r0	; 63
   12388:	8d bf       	out	0x3d, r24	; 61
   1238a:	84 e0       	ldi	r24, 0x04	; 4
   1238c:	61 e0       	ldi	r22, 0x01	; 1
   1238e:	a8 01       	movw	r20, r16
   12390:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
		  TimDisplay=0;
   12394:	10 92 93 01 	sts	0x0193, r1

		  if (eeprom_read_byte(&DefNotifScreen)==1) {
   12398:	8c e3       	ldi	r24, 0x3C	; 60
   1239a:	90 e0       	ldi	r25, 0x00	; 0
   1239c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   123a0:	81 30       	cpi	r24, 0x01	; 1
   123a2:	09 f0       	breq	.+2      	; 0x123a6 <FMenuLoyalty+0x432>
   123a4:	48 cf       	rjmp	.-368    	; 0x12236 <FMenuLoyalty+0x2c2>
		      stLoyalty=mlPressAnyKey;
   123a6:	8d e0       	ldi	r24, 0x0D	; 13
   123a8:	80 93 68 02 	sts	0x0268, r24
			  lcd_printf(2,1,PSTR("Press Any Key"));
   123ac:	82 e0       	ldi	r24, 0x02	; 2
   123ae:	61 e0       	ldi	r22, 0x01	; 1
   123b0:	43 e9       	ldi	r20, 0x93	; 147
   123b2:	5c e1       	ldi	r21, 0x1C	; 28
   123b4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
   123b8:	28 c0       	rjmp	.+80     	; 0x1240a <FMenuLoyalty+0x496>
          } else stLoyalty=mlDelayExitLoyalty;
		  break;
     case mlPressAnyKey:
	      KeyPressed=_key_scan(1);
   123ba:	81 e0       	ldi	r24, 0x01	; 1
   123bc:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
   123c0:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>
	      switch(KeyChar){		  
   123c4:	83 32       	cpi	r24, 0x23	; 35
   123c6:	c9 f0       	breq	.+50     	; 0x123fa <FMenuLoyalty+0x486>
   123c8:	8a 32       	cpi	r24, 0x2A	; 42
   123ca:	f9 f4       	brne	.+62     	; 0x1240a <FMenuLoyalty+0x496>
   123cc:	16 c0       	rjmp	.+44     	; 0x123fa <FMenuLoyalty+0x486>
               stLoyalty=mlExitLoyalty;
		       break;		  
		  }
	      break;
     case mlNoConnection:
	      lcd_clear();
   123ce:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   123d2:	82 e0       	ldi	r24, 0x02	; 2
   123d4:	61 e0       	ldi	r22, 0x01	; 1
   123d6:	45 e8       	ldi	r20, 0x85	; 133
   123d8:	5c e1       	ldi	r21, 0x1C	; 28
   123da:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   123de:	83 e0       	ldi	r24, 0x03	; 3
   123e0:	61 e0       	ldi	r22, 0x01	; 1
   123e2:	47 e7       	ldi	r20, 0x77	; 119
   123e4:	5c e1       	ldi	r21, 0x1C	; 28
   123e6:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		  TimDisplay=5;
   123ea:	85 e0       	ldi	r24, 0x05	; 5
   123ec:	80 93 93 01 	sts	0x0193, r24
   123f0:	22 cf       	rjmp	.-444    	; 0x12236 <FMenuLoyalty+0x2c2>
		  stLoyalty=mlDelayExitLoyalty;
	      break;
     case mlDelayExitLoyalty:
          if(TimDisplay>=10)stLoyalty=mlExitLoyalty;
   123f2:	80 91 93 01 	lds	r24, 0x0193
   123f6:	8a 30       	cpi	r24, 0x0A	; 10
   123f8:	40 f0       	brcs	.+16     	; 0x1240a <FMenuLoyalty+0x496>
   123fa:	8f e0       	ldi	r24, 0x0F	; 15
   123fc:	24 ce       	rjmp	.-952    	; 0x12046 <FMenuLoyalty+0xd2>
	      break;
	 case mlExitLoyalty:
	      lcd_clear();
   123fe:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	      stLoyalty=mlInit;
   12402:	10 92 68 02 	sts	0x0268, r1
   12406:	81 e0       	ldi	r24, 0x01	; 1
   12408:	01 c0       	rjmp	.+2      	; 0x1240c <FMenuLoyalty+0x498>
   1240a:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 return Result;
}
   1240c:	64 96       	adiw	r28, 0x14	; 20
   1240e:	0f b6       	in	r0, 0x3f	; 63
   12410:	f8 94       	cli
   12412:	de bf       	out	0x3e, r29	; 62
   12414:	0f be       	out	0x3f, r0	; 63
   12416:	cd bf       	out	0x3d, r28	; 61
   12418:	cf 91       	pop	r28
   1241a:	df 91       	pop	r29
   1241c:	1f 91       	pop	r17
   1241e:	0f 91       	pop	r16
   12420:	ff 90       	pop	r15
   12422:	ef 90       	pop	r14
   12424:	df 90       	pop	r13
   12426:	cf 90       	pop	r12
   12428:	08 95       	ret

0001242a <sendMessage10>:
	sprintf_P(strSend,PSTR("%s%s%s%s10F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	IsNewPacket=True;
	*/
	IsNewPacket=True;
   1242a:	81 e0       	ldi	r24, 0x01	; 1
   1242c:	80 93 88 01 	sts	0x0188, r24
	IFTSendMessage(MSG_10);
   12430:	80 e1       	ldi	r24, 0x10	; 16
   12432:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   12436:	08 95       	ret

00012438 <InitializeConnection>:
void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
   12438:	df 92       	push	r13
   1243a:	ef 92       	push	r14
   1243c:	ff 92       	push	r15
   1243e:	0f 93       	push	r16
   12440:	1f 93       	push	r17
   12442:	df 93       	push	r29
   12444:	cf 93       	push	r28
   12446:	cd b7       	in	r28, 0x3d	; 61
   12448:	de b7       	in	r29, 0x3e	; 62
   1244a:	64 97       	sbiw	r28, 0x14	; 20
   1244c:	0f b6       	in	r0, 0x3f	; 63
   1244e:	f8 94       	cli
   12450:	de bf       	out	0x3e, r29	; 62
   12452:	0f be       	out	0x3f, r0	; 63
   12454:	cd bf       	out	0x3d, r28	; 61
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
	char lcdteks[20];
	IFType=eeprom_read_byte(&DefInitIFT);
   12456:	8b e3       	ldi	r24, 0x3B	; 59
   12458:	91 e0       	ldi	r25, 0x01	; 1
   1245a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   1245e:	18 2f       	mov	r17, r24
   12460:	80 93 00 01 	sts	0x0100, r24
	DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   12464:	8c e3       	ldi	r24, 0x3C	; 60
   12466:	91 e0       	ldi	r25, 0x01	; 1
   12468:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   1246c:	80 93 5e 01 	sts	0x015E, r24

	//SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);

    //Send Msg10
	if  (IFType==IT_SLAVE){
   12470:	11 30       	cpi	r17, 0x01	; 1
   12472:	09 f0       	breq	.+2      	; 0x12476 <InitializeConnection+0x3e>
   12474:	5f c0       	rjmp	.+190    	; 0x12534 <InitializeConnection+0xfc>
	     SendSlaveCommand(SC_SLAVE,ST_NONE);
   12476:	81 e0       	ldi	r24, 0x01	; 1
   12478:	60 e0       	ldi	r22, 0x00	; 0
   1247a:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
		 char_count=0;
   1247e:	10 92 8a 01 	sts	0x018A, r1
   12482:	10 92 89 01 	sts	0x0189, r1
		 if (IsPowerOn==True){
   12486:	80 91 c0 02 	lds	r24, 0x02C0
   1248a:	81 30       	cpi	r24, 0x01	; 1
   1248c:	59 f4       	brne	.+22     	; 0x124a4 <InitializeConnection+0x6c>
		     IsPowerOn=False;
   1248e:	10 92 c0 02 	sts	0x02C0, r1
   12492:	8f ef       	ldi	r24, 0xFF	; 255
   12494:	9f ef       	ldi	r25, 0xFF	; 255
   12496:	29 e1       	ldi	r18, 0x19	; 25
   12498:	30 e0       	ldi	r19, 0x00	; 0
   1249a:	f9 01       	movw	r30, r18
   1249c:	31 97       	sbiw	r30, 0x01	; 1
   1249e:	f1 f7       	brne	.-4      	; 0x1249c <InitializeConnection+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   124a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   124a2:	d9 f7       	brne	.-10     	; 0x1249a <InitializeConnection+0x62>
		     _delay_ms(8000);
			 }
         sendMessage10();
   124a4:	0e 94 15 92 	call	0x1242a	; 0x1242a <sendMessage10>
         sendMessage10();
   124a8:	0e 94 15 92 	call	0x1242a	; 0x1242a <sendMessage10>
         sendMessage10();
   124ac:	0e 94 15 92 	call	0x1242a	; 0x1242a <sendMessage10>
         

         lcd_printf(4,1,PSTR("Connect         "));
   124b0:	84 e0       	ldi	r24, 0x04	; 4
   124b2:	61 e0       	ldi	r22, 0x01	; 1
   124b4:	4b ee       	ldi	r20, 0xEB	; 235
   124b6:	5e e1       	ldi	r21, 0x1E	; 30
   124b8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 lcd_printf(4,1,PSTR("Connect"));
   124bc:	84 e0       	ldi	r24, 0x04	; 4
   124be:	61 e0       	ldi	r22, 0x01	; 1
   124c0:	43 ee       	ldi	r20, 0xE3	; 227
   124c2:	5e e1       	ldi	r21, 0x1E	; 30
   124c4:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
   124c8:	10 92 a2 01 	sts	0x01A2, r1
   124cc:	ee 24       	eor	r14, r14
   124ce:	ff 24       	eor	r15, r15
   124d0:	10 e0       	ldi	r17, 0x00	; 0
   124d2:	00 e0       	ldi	r16, 0x00	; 0
   124d4:	2b c0       	rjmp	.+86     	; 0x1252c <InitializeConnection+0xf4>
		  //SlaveIdentification		  
		 while (IsMessage11==False){
		        lcd_put(4,(8+iCon),'.');
   124d6:	61 2f       	mov	r22, r17
   124d8:	68 5f       	subi	r22, 0xF8	; 248
   124da:	84 e0       	ldi	r24, 0x04	; 4
   124dc:	4e e2       	ldi	r20, 0x2E	; 46
   124de:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
                tConnect++;
   124e2:	08 94       	sec
   124e4:	e1 1c       	adc	r14, r1
   124e6:	f1 1c       	adc	r15, r1
				__key_lgtcnt=0;
   124e8:	10 92 b4 02 	sts	0x02B4, r1
			    if ((tConnect%200)==0)iCon++;
   124ec:	c7 01       	movw	r24, r14
   124ee:	68 ec       	ldi	r22, 0xC8	; 200
   124f0:	70 e0       	ldi	r23, 0x00	; 0
   124f2:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
   124f6:	89 2b       	or	r24, r25
   124f8:	09 f4       	brne	.+2      	; 0x124fc <InitializeConnection+0xc4>
   124fa:	1f 5f       	subi	r17, 0xFF	; 255
			    if (iCon>8){
   124fc:	19 30       	cpi	r17, 0x09	; 9
   124fe:	70 f0       	brcs	.+28     	; 0x1251c <InitializeConnection+0xe4>
			        lcd_printf(4,1,PSTR("Connect         "));
   12500:	84 e0       	ldi	r24, 0x04	; 4
   12502:	61 e0       	ldi	r22, 0x01	; 1
   12504:	42 ed       	ldi	r20, 0xD2	; 210
   12506:	5e e1       	ldi	r21, 0x1E	; 30
   12508:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
					
				    sendMessage10();
   1250c:	0e 94 15 92 	call	0x1242a	; 0x1242a <sendMessage10>
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
   12510:	81 e0       	ldi	r24, 0x01	; 1
   12512:	60 e0       	ldi	r22, 0x00	; 0
   12514:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
			        iCon=0;
				    iTry++;}
   12518:	0f 5f       	subi	r16, 0xFF	; 255
   1251a:	10 e0       	ldi	r17, 0x00	; 0
			    if (iTry>3){
   1251c:	04 30       	cpi	r16, 0x04	; 4
   1251e:	30 f0       	brcs	.+12     	; 0x1252c <InitializeConnection+0xf4>
			        //IsErrorTCPIP=True;
				    IsAdvanzStartupInfo=False;		
   12520:	10 92 ac 01 	sts	0x01AC, r1
					IFType=IT_STANDALONE;
   12524:	82 e0       	ldi	r24, 0x02	; 2
   12526:	80 93 00 01 	sts	0x0100, r24
   1252a:	04 c0       	rjmp	.+8      	; 0x12534 <InitializeConnection+0xfc>
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
   1252c:	80 91 a2 01 	lds	r24, 0x01A2
   12530:	88 23       	and	r24, r24
   12532:	89 f2       	breq	.-94     	; 0x124d6 <InitializeConnection+0x9e>

			    }
            }//EndWhile
		}

	if (IFType==IT_STANDALONE){
   12534:	80 91 00 01 	lds	r24, 0x0100
   12538:	82 30       	cpi	r24, 0x02	; 2
   1253a:	09 f0       	breq	.+2      	; 0x1253e <InitializeConnection+0x106>
   1253c:	72 c0       	rjmp	.+228    	; 0x12622 <InitializeConnection+0x1ea>
        IsStandAloneDetected=False;		
   1253e:	10 92 9e 01 	sts	0x019E, r1
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   12542:	60 91 5e 01 	lds	r22, 0x015E
   12546:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
		tConnect=0,iCon=0,iTry=0;
	    lcd_clear();
   1254a:	0e 94 21 a6 	call	0x14c42	; 0x14c42 <lcd_clear>
	    lcd_printf(1,1,PSTR("Scan Pump"));
   1254e:	81 e0       	ldi	r24, 0x01	; 1
   12550:	61 e0       	ldi	r22, 0x01	; 1
   12552:	48 ec       	ldi	r20, 0xC8	; 200
   12554:	5e e1       	ldi	r21, 0x1E	; 30
   12556:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
   1255a:	8c e3       	ldi	r24, 0x3C	; 60
   1255c:	91 e0       	ldi	r25, 0x01	; 1
   1255e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   12562:	e8 2f       	mov	r30, r24
   12564:	f0 e0       	ldi	r31, 0x00	; 0
   12566:	ee 0f       	add	r30, r30
   12568:	ff 1f       	adc	r31, r31
   1256a:	e9 5f       	subi	r30, 0xF9	; 249
   1256c:	fc 4f       	sbci	r31, 0xFC	; 252
   1256e:	65 91       	lpm	r22, Z+
   12570:	74 91       	lpm	r23, Z+
   12572:	8e 01       	movw	r16, r28
   12574:	0f 5f       	subi	r16, 0xFF	; 255
   12576:	1f 4f       	sbci	r17, 0xFF	; 255
   12578:	c8 01       	movw	r24, r16
   1257a:	0e 94 e0 ab 	call	0x157c0	; 0x157c0 <strcpy_P>
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
   1257e:	00 d0       	rcall	.+0      	; 0x12580 <InitializeConnection+0x148>
   12580:	00 d0       	rcall	.+0      	; 0x12582 <InitializeConnection+0x14a>
   12582:	00 d0       	rcall	.+0      	; 0x12584 <InitializeConnection+0x14c>
   12584:	ed b7       	in	r30, 0x3d	; 61
   12586:	fe b7       	in	r31, 0x3e	; 62
   12588:	31 96       	adiw	r30, 0x01	; 1
   1258a:	ad b7       	in	r26, 0x3d	; 61
   1258c:	be b7       	in	r27, 0x3e	; 62
   1258e:	12 96       	adiw	r26, 0x02	; 2
   12590:	1c 93       	st	X, r17
   12592:	0e 93       	st	-X, r16
   12594:	11 97       	sbiw	r26, 0x01	; 1
   12596:	85 ec       	ldi	r24, 0xC5	; 197
   12598:	9e e1       	ldi	r25, 0x1E	; 30
   1259a:	93 83       	std	Z+3, r25	; 0x03
   1259c:	82 83       	std	Z+2, r24	; 0x02
   1259e:	15 83       	std	Z+5, r17	; 0x05
   125a0:	04 83       	std	Z+4, r16	; 0x04
   125a2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	    lcd_print(2,1,lcdteks);
   125a6:	8d b7       	in	r24, 0x3d	; 61
   125a8:	9e b7       	in	r25, 0x3e	; 62
   125aa:	06 96       	adiw	r24, 0x06	; 6
   125ac:	0f b6       	in	r0, 0x3f	; 63
   125ae:	f8 94       	cli
   125b0:	9e bf       	out	0x3e, r25	; 62
   125b2:	0f be       	out	0x3f, r0	; 63
   125b4:	8d bf       	out	0x3d, r24	; 61
   125b6:	82 e0       	ldi	r24, 0x02	; 2
   125b8:	61 e0       	ldi	r22, 0x01	; 1
   125ba:	a8 01       	movw	r20, r16
   125bc:	0e 94 c8 a5 	call	0x14b90	; 0x14b90 <lcd_print>
   125c0:	00 e0       	ldi	r16, 0x00	; 0
   125c2:	10 e0       	ldi	r17, 0x00	; 0
   125c4:	ff 24       	eor	r15, r15
   125c6:	dd 24       	eor	r13, r13
   125c8:	28 c0       	rjmp	.+80     	; 0x1261a <InitializeConnection+0x1e2>

	    while (IsStandAloneDetected==False){
		       lcd_put(4,(1+iCon),'.');
   125ca:	ef 2c       	mov	r14, r15
   125cc:	e3 94       	inc	r14
   125ce:	84 e0       	ldi	r24, 0x04	; 4
   125d0:	6e 2d       	mov	r22, r14
   125d2:	4e e2       	ldi	r20, 0x2E	; 46
   125d4:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <lcd_put>
		       tConnect++;
   125d8:	0f 5f       	subi	r16, 0xFF	; 255
   125da:	1f 4f       	sbci	r17, 0xFF	; 255
		       if ((tConnect%100)==0)iCon++;
   125dc:	c8 01       	movw	r24, r16
   125de:	64 e6       	ldi	r22, 0x64	; 100
   125e0:	70 e0       	ldi	r23, 0x00	; 0
   125e2:	0e 94 79 ab 	call	0x156f2	; 0x156f2 <__udivmodhi4>
   125e6:	89 2b       	or	r24, r25
   125e8:	09 f4       	brne	.+2      	; 0x125ec <InitializeConnection+0x1b4>
   125ea:	fe 2c       	mov	r15, r14
		       if (iCon>16){
   125ec:	90 e1       	ldi	r25, 0x10	; 16
   125ee:	9f 15       	cp	r25, r15
   125f0:	88 f4       	brcc	.+34     	; 0x12614 <InitializeConnection+0x1dc>
			       __key_lgtcnt=0;
   125f2:	10 92 b4 02 	sts	0x02B4, r1
			       lcd_printf(4,1,PSTR("                   "));
   125f6:	84 e0       	ldi	r24, 0x04	; 4
   125f8:	61 e0       	ldi	r22, 0x01	; 1
   125fa:	41 eb       	ldi	r20, 0xB1	; 177
   125fc:	5e e1       	ldi	r21, 0x1E	; 30
   125fe:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   12602:	82 e0       	ldi	r24, 0x02	; 2
   12604:	60 91 5e 01 	lds	r22, 0x015E
   12608:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
                   //InitStandalone();

			       DisplayPumpStatus();
   1260c:	0e 94 24 4a 	call	0x9448	; 0x9448 <DisplayPumpStatus>
			       iCon=0;
			       iTry++;}
   12610:	d3 94       	inc	r13
   12612:	ff 24       	eor	r15, r15
		           if (iTry>3) break; 
   12614:	a3 e0       	ldi	r26, 0x03	; 3
   12616:	ad 15       	cp	r26, r13
   12618:	20 f0       	brcs	.+8      	; 0x12622 <InitializeConnection+0x1ea>
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
   1261a:	80 91 9e 01 	lds	r24, 0x019E
   1261e:	88 23       	and	r24, r24
   12620:	a1 f2       	breq	.-88     	; 0x125ca <InitializeConnection+0x192>
			       iCon=0;
			       iTry++;}
		           if (iTry>3) break; 
	    }
	}//EndIf
	if(IsMessage11==True){
   12622:	10 91 a2 01 	lds	r17, 0x01A2
   12626:	11 30       	cpi	r17, 0x01	; 1
   12628:	d9 f4       	brne	.+54     	; 0x12660 <InitializeConnection+0x228>
	   lcd_printf(4,1,PSTR("Connected           "));
   1262a:	84 e0       	ldi	r24, 0x04	; 4
   1262c:	61 e0       	ldi	r22, 0x01	; 1
   1262e:	4c e9       	ldi	r20, 0x9C	; 156
   12630:	5e e1       	ldi	r21, 0x1E	; 30
   12632:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_SLAVE);
   12636:	8b e3       	ldi	r24, 0x3B	; 59
   12638:	91 e0       	ldi	r25, 0x01	; 1
   1263a:	61 e0       	ldi	r22, 0x01	; 1
   1263c:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	   IFType=IT_SLAVE;
   12640:	10 93 00 01 	sts	0x0100, r17
   12644:	80 e3       	ldi	r24, 0x30	; 48
   12646:	95 e7       	ldi	r25, 0x75	; 117
   12648:	29 e1       	ldi	r18, 0x19	; 25
   1264a:	30 e0       	ldi	r19, 0x00	; 0
   1264c:	f9 01       	movw	r30, r18
   1264e:	31 97       	sbiw	r30, 0x01	; 1
   12650:	f1 f7       	brne	.-4      	; 0x1264e <InitializeConnection+0x216>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   12652:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   12654:	d9 f7       	brne	.-10     	; 0x1264c <InitializeConnection+0x214>
	   _delay_ms(3000);
	   //IsErrorTCPIP=False;
	   procMessage11();
   12656:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <procMessage11>
	   IsAdvanzStartupInfo=True;
   1265a:	81 e0       	ldi	r24, 0x01	; 1
   1265c:	80 93 ac 01 	sts	0x01AC, r24
	}
	if(IsStandAloneDetected==True){
   12660:	80 91 9e 01 	lds	r24, 0x019E
   12664:	81 30       	cpi	r24, 0x01	; 1
   12666:	71 f4       	brne	.+28     	; 0x12684 <InitializeConnection+0x24c>
	   lcd_printf(4,1,PSTR("PumpFound"));
   12668:	84 e0       	ldi	r24, 0x04	; 4
   1266a:	61 e0       	ldi	r22, 0x01	; 1
   1266c:	42 e9       	ldi	r20, 0x92	; 146
   1266e:	5e e1       	ldi	r21, 0x1E	; 30
   12670:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_STANDALONE);
   12674:	8b e3       	ldi	r24, 0x3B	; 59
   12676:	91 e0       	ldi	r25, 0x01	; 1
   12678:	62 e0       	ldi	r22, 0x02	; 2
   1267a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	   IFType=IT_STANDALONE;
   1267e:	82 e0       	ldi	r24, 0x02	; 2
   12680:	80 93 00 01 	sts	0x0100, r24
	}
	//PrintStatus
	if (eeprom_read_byte(&DefPrintInitialize)==True)GeneratePrintInit();
   12684:	8a e3       	ldi	r24, 0x3A	; 58
   12686:	91 e0       	ldi	r25, 0x01	; 1
   12688:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   1268c:	81 30       	cpi	r24, 0x01	; 1
   1268e:	11 f4       	brne	.+4      	; 0x12694 <InitializeConnection+0x25c>
   12690:	0e 94 a9 32 	call	0x6552	; 0x6552 <GeneratePrintInit>
	if ((IsStandAloneDetected==False)&&(IsMessage11==False)){		
   12694:	80 91 9e 01 	lds	r24, 0x019E
   12698:	88 23       	and	r24, r24
   1269a:	89 f5       	brne	.+98     	; 0x126fe <InitializeConnection+0x2c6>
   1269c:	80 91 a2 01 	lds	r24, 0x01A2
   126a0:	88 23       	and	r24, r24
   126a2:	69 f5       	brne	.+90     	; 0x126fe <InitializeConnection+0x2c6>
		 lcd_printf(2,1,PSTR("TCP/IP Error"));
   126a4:	82 e0       	ldi	r24, 0x02	; 2
   126a6:	61 e0       	ldi	r22, 0x01	; 1
   126a8:	45 e8       	ldi	r20, 0x85	; 133
   126aa:	5e e1       	ldi	r21, 0x1E	; 30
   126ac:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		 lcd_printf(3,1,PSTR("No Pump Found"));
   126b0:	83 e0       	ldi	r24, 0x03	; 3
   126b2:	61 e0       	ldi	r22, 0x01	; 1
   126b4:	47 e7       	ldi	r20, 0x77	; 119
   126b6:	5e e1       	ldi	r21, 0x1E	; 30
   126b8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
   126bc:	80 e2       	ldi	r24, 0x20	; 32
   126be:	9e e4       	ldi	r25, 0x4E	; 78
   126c0:	29 e1       	ldi	r18, 0x19	; 25
   126c2:	30 e0       	ldi	r19, 0x00	; 0
   126c4:	f9 01       	movw	r30, r18
   126c6:	31 97       	sbiw	r30, 0x01	; 1
   126c8:	f1 f7       	brne	.-4      	; 0x126c6 <InitializeConnection+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   126ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   126cc:	d9 f7       	brne	.-10     	; 0x126c4 <InitializeConnection+0x28c>
		 _delay_ms(2000);
		 ForceType=systemForceType();
   126ce:	0e 94 fe 53 	call	0xa7fc	; 0xa7fc <systemForceType>
		 if (ForceType=='1'){
   126d2:	81 33       	cpi	r24, 0x31	; 49
   126d4:	29 f4       	brne	.+10     	; 0x126e0 <InitializeConnection+0x2a8>
		     IFType=IT_SLAVE;
   126d6:	81 e0       	ldi	r24, 0x01	; 1
   126d8:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_SLAVE,ST_NONE);
   126dc:	60 e0       	ldi	r22, 0x00	; 0
   126de:	07 c0       	rjmp	.+14     	; 0x126ee <InitializeConnection+0x2b6>
         }
		 else
		 if (ForceType=='2'){
   126e0:	82 33       	cpi	r24, 0x32	; 50
   126e2:	39 f4       	brne	.+14     	; 0x126f2 <InitializeConnection+0x2ba>
		     IFType=IT_STANDALONE;
   126e4:	82 e0       	ldi	r24, 0x02	; 2
   126e6:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   126ea:	60 91 5e 01 	lds	r22, 0x015E
   126ee:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>

			 //SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,eeprom_read_byte(&DefPoolingPumpMax));

			 //InitStandalone();
         }
		 eeprom_write_byte(&DefInitIFT,IFType);
   126f2:	8b e3       	ldi	r24, 0x3B	; 59
   126f4:	91 e0       	ldi	r25, 0x01	; 1
   126f6:	60 91 00 01 	lds	r22, 0x0100
   126fa:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	}
	InitMemory();
   126fe:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <InitMemory>
	//SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	
}
   12702:	64 96       	adiw	r28, 0x14	; 20
   12704:	0f b6       	in	r0, 0x3f	; 63
   12706:	f8 94       	cli
   12708:	de bf       	out	0x3e, r29	; 62
   1270a:	0f be       	out	0x3f, r0	; 63
   1270c:	cd bf       	out	0x3d, r28	; 61
   1270e:	cf 91       	pop	r28
   12710:	df 91       	pop	r29
   12712:	1f 91       	pop	r17
   12714:	0f 91       	pop	r16
   12716:	ff 90       	pop	r15
   12718:	ef 90       	pop	r14
   1271a:	df 90       	pop	r13
   1271c:	08 95       	ret

0001271e <sendMessage04>:
	 UpdateServerIP();//ReadDestIP
	 //strTranNo = strReceiptNum
	 sprintf_P(strSend,PSTR("%s%s%s%s04%s1F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,strTranNo);
     uart_print(1, 0,strSend);
	 uart(1, 1,0x02);
	 */IFTSendMessage(MSG_04);
   1271e:	84 e0       	ldi	r24, 0x04	; 4
   12720:	0e 94 be 7a 	call	0xf57c	; 0xf57c <IFTSendMessage>
}
   12724:	08 95       	ret

00012726 <FreePrinting>:
	 } 
	 else uart(_COM_PRINTER,1,xSend);
	 zSend=xSend;
}

void FreePrinting(){
   12726:	0f 93       	push	r16
   12728:	1f 93       	push	r17
   1272a:	df 93       	push	r29
   1272c:	cf 93       	push	r28
   1272e:	cd b7       	in	r28, 0x3d	; 61
   12730:	de b7       	in	r29, 0x3e	; 62
   12732:	64 97       	sbiw	r28, 0x14	; 20
   12734:	0f b6       	in	r0, 0x3f	; 63
   12736:	f8 94       	cli
   12738:	de bf       	out	0x3e, r29	; 62
   1273a:	0f be       	out	0x3f, r0	; 63
   1273c:	cd bf       	out	0x3d, r28	; 61
static char iPrinted=0,iHeader=0,iFooter=0,PrintCopy=0,iMargin=0,iScroll=0,nScroll=0;
static unsigned int iSend=0,LSend=0,iLoop=0;
       char strOperatorName[20];

     //Normalize FreePrintIdleState
     if ((IsFreePrinting==True)&&(stFreePrinting!=fpInit)){
   1273e:	20 91 aa 01 	lds	r18, 0x01AA
   12742:	21 30       	cpi	r18, 0x01	; 1
   12744:	31 f4       	brne	.+12     	; 0x12752 <FreePrinting+0x2c>
   12746:	80 91 25 01 	lds	r24, 0x0125
   1274a:	81 30       	cpi	r24, 0x01	; 1
   1274c:	11 f0       	breq	.+4      	; 0x12752 <FreePrinting+0x2c>
	     stFreePrinting=fpInit;
   1274e:	20 93 25 01 	sts	0x0125, r18
	 }
	 switch (stFreePrinting){
   12752:	80 91 25 01 	lds	r24, 0x0125
   12756:	90 e0       	ldi	r25, 0x00	; 0
   12758:	fc 01       	movw	r30, r24
   1275a:	31 97       	sbiw	r30, 0x01	; 1
   1275c:	eb 31       	cpi	r30, 0x1B	; 27
   1275e:	f1 05       	cpc	r31, r1
   12760:	08 f0       	brcs	.+2      	; 0x12764 <FreePrinting+0x3e>
   12762:	7b c3       	rjmp	.+1782   	; 0x12e5a <FreePrinting+0x734>
   12764:	e2 53       	subi	r30, 0x32	; 50
   12766:	ff 4f       	sbci	r31, 0xFF	; 255
   12768:	ee 0f       	add	r30, r30
   1276a:	ff 1f       	adc	r31, r31
   1276c:	05 90       	lpm	r0, Z+
   1276e:	f4 91       	lpm	r31, Z+
   12770:	e0 2d       	mov	r30, r0
   12772:	09 94       	ijmp
     case fpInit:
	      //uart_printf(0,1,PSTR("fpInit"));
	      if (IsFreePrinting==True){
   12774:	21 30       	cpi	r18, 0x01	; 1
   12776:	09 f0       	breq	.+2      	; 0x1277a <FreePrinting+0x54>
   12778:	70 c3       	rjmp	.+1760   	; 0x12e5a <FreePrinting+0x734>
		      IsFreePrinting=False;
   1277a:	10 92 aa 01 	sts	0x01AA, r1
			  IsBusyFreePrinting=True;
   1277e:	20 93 b6 01 	sts	0x01B6, r18
			  IsBusyPrint=False;
   12782:	10 92 b5 01 	sts	0x01B5, r1
			  iPrinted=0,iFooter=0;
   12786:	10 92 f7 01 	sts	0x01F7, r1
   1278a:	10 92 f5 01 	sts	0x01F5, r1

			  PrintCopy=(cmdPrint&0x0F);
   1278e:	80 91 b7 01 	lds	r24, 0x01B7
   12792:	8f 70       	andi	r24, 0x0F	; 15
   12794:	80 93 f4 01 	sts	0x01F4, r24

			  //cmdPrint=cmdPrint|0b00100000;
			  //PrintCopy=2;

			  stFreePrinting=fpInitHeader;
   12798:	82 e0       	ldi	r24, 0x02	; 2
   1279a:	80 93 25 01 	sts	0x0125, r24
			  InitPrinter();
   1279e:	0e 94 b5 45 	call	0x8b6a	; 0x8b6a <InitPrinter>
   127a2:	5b c3       	rjmp	.+1718   	; 0x12e5a <FreePrinting+0x734>
			  }
	      break;
     case fpInitHeader:
	      //uart_printf(0,1,PSTR("fpInitHeader"));
		  iHeader=0;
   127a4:	10 92 f6 01 	sts	0x01F6, r1
	      if (((cmdPrint&0b10000000)>>7)==1){
   127a8:	80 91 b7 01 	lds	r24, 0x01B7
   127ac:	88 1f       	adc	r24, r24
   127ae:	88 27       	eor	r24, r24
   127b0:	88 1f       	adc	r24, r24
   127b2:	90 e0       	ldi	r25, 0x00	; 0
   127b4:	81 30       	cpi	r24, 0x01	; 1
   127b6:	91 05       	cpc	r25, r1
   127b8:	11 f1       	breq	.+68     	; 0x127fe <FreePrinting+0xd8>
		      stFreePrinting=fpLoadHeader;
			  }
		  else
	      if (((cmdPrint&0b10000000)>>7)==0) stFreePrinting=fpInitMessage;	      
   127ba:	89 2b       	or	r24, r25
   127bc:	09 f0       	breq	.+2      	; 0x127c0 <FreePrinting+0x9a>
   127be:	4d c3       	rjmp	.+1690   	; 0x12e5a <FreePrinting+0x734>
   127c0:	85 e0       	ldi	r24, 0x05	; 5
   127c2:	80 93 25 01 	sts	0x0125, r24
   127c6:	49 c3       	rjmp	.+1682   	; 0x12e5a <FreePrinting+0x734>
	      break;
     case fpLoadHeader:
	      //uart_printf(0,1,PSTR("fpLoadHeader"));
          //Header 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], 40);
   127c8:	60 91 f6 01 	lds	r22, 0x01F6
   127cc:	89 e2       	ldi	r24, 0x29	; 41
   127ce:	68 9f       	mul	r22, r24
   127d0:	b0 01       	movw	r22, r0
   127d2:	11 24       	eor	r1, r1
   127d4:	63 5d       	subi	r22, 0xD3	; 211
   127d6:	7d 4f       	sbci	r23, 0xFD	; 253
   127d8:	82 ec       	ldi	r24, 0xC2	; 194
   127da:	98 e0       	ldi	r25, 0x08	; 8
   127dc:	48 e2       	ldi	r20, 0x28	; 40
   127de:	50 e0       	ldi	r21, 0x00	; 0
   127e0:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  iHeader++;
   127e4:	80 91 f6 01 	lds	r24, 0x01F6
   127e8:	8f 5f       	subi	r24, 0xFF	; 255
   127ea:	80 93 f6 01 	sts	0x01F6, r24
		  if (iHeader<6){
   127ee:	86 30       	cpi	r24, 0x06	; 6
   127f0:	38 f7       	brcc	.-50     	; 0x127c0 <FreePrinting+0x9a>
		      if (SpaceOnly(strPrint)==True){
   127f2:	82 ec       	ldi	r24, 0xC2	; 194
   127f4:	98 e0       	ldi	r25, 0x08	; 8
   127f6:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   127fa:	81 30       	cpi	r24, 0x01	; 1
   127fc:	11 f4       	brne	.+4      	; 0x12802 <FreePrinting+0xdc>
			      stFreePrinting=fpLoadHeader;
   127fe:	83 e0       	ldi	r24, 0x03	; 3
   12800:	e0 cf       	rjmp	.-64     	; 0x127c2 <FreePrinting+0x9c>
				  }	      
			  else{
			      stFreePrinting=fpPrintHeader;
   12802:	84 e0       	ldi	r24, 0x04	; 4
   12804:	80 93 25 01 	sts	0x0125, r24
			      iSend=0;
   12808:	10 92 f0 01 	sts	0x01F0, r1
   1280c:	10 92 ef 01 	sts	0x01EF, r1
				  iLoop=0;
   12810:	10 92 ec 01 	sts	0x01EC, r1
   12814:	10 92 eb 01 	sts	0x01EB, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   12818:	80 91 f6 01 	lds	r24, 0x01F6
   1281c:	81 30       	cpi	r24, 0x01	; 1
   1281e:	19 f4       	brne	.+6      	; 0x12826 <FreePrinting+0x100>
   12820:	0e 94 5d 46 	call	0x8cba	; 0x8cba <PrintDoubleHeight>
   12824:	1a c3       	rjmp	.+1588   	; 0x12e5a <FreePrinting+0x734>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   12826:	82 30       	cpi	r24, 0x02	; 2
   12828:	09 f0       	breq	.+2      	; 0x1282c <FreePrinting+0x106>
   1282a:	17 c3       	rjmp	.+1582   	; 0x12e5a <FreePrinting+0x734>
   1282c:	0e 94 47 46 	call	0x8c8e	; 0x8c8e <PrintNormalHeight>
   12830:	14 c3       	rjmp	.+1576   	; 0x12e5a <FreePrinting+0x734>
		  {stFreePrinting=fpInitMessage;
		  }
	      break;
     case fpPrintHeader:
	      //uart_printf(0,1,PSTR("fpPrintHeader"));
		  if (iSend<40){
   12832:	80 91 ef 01 	lds	r24, 0x01EF
   12836:	90 91 f0 01 	lds	r25, 0x01F0
   1283a:	88 97       	sbiw	r24, 0x28	; 40
   1283c:	68 f4       	brcc	.+26     	; 0x12858 <FreePrinting+0x132>
		      iLoop++;
   1283e:	80 91 eb 01 	lds	r24, 0x01EB
   12842:	90 91 ec 01 	lds	r25, 0x01EC
   12846:	01 96       	adiw	r24, 0x01	; 1
   12848:	90 93 ec 01 	sts	0x01EC, r25
   1284c:	80 93 eb 01 	sts	0x01EB, r24
			  if ((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
		         //iSend++;
				 TimPrintBusy=0;
   12850:	10 92 b8 01 	sts	0x01B8, r1
				 stFreePrinting=fpCheckPrintStatusHeader;
   12854:	82 e1       	ldi	r24, 0x12	; 18
   12856:	b5 cf       	rjmp	.-150    	; 0x127c2 <FreePrinting+0x9c>
				 }
			  }
          else{ 
		     stFreePrinting=fpLoadHeader;
   12858:	83 e0       	ldi	r24, 0x03	; 3
   1285a:	5c c2       	rjmp	.+1208   	; 0x12d14 <FreePrinting+0x5ee>
			 CarriegeReturn();
		  }
	      break;

     case fpCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   1285c:	80 91 b5 01 	lds	r24, 0x01B5
   12860:	88 23       	and	r24, r24
   12862:	09 f0       	breq	.+2      	; 0x12866 <FreePrinting+0x140>
   12864:	76 c2       	rjmp	.+1260   	; 0x12d52 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12866:	e0 91 ef 01 	lds	r30, 0x01EF
   1286a:	f0 91 f0 01 	lds	r31, 0x01F0
   1286e:	ee 53       	subi	r30, 0x3E	; 62
   12870:	f7 4f       	sbci	r31, 0xF7	; 247
   12872:	61 e0       	ldi	r22, 0x01	; 1
   12874:	40 81       	ld	r20, Z
   12876:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   1287a:	80 91 ef 01 	lds	r24, 0x01EF
   1287e:	90 91 f0 01 	lds	r25, 0x01F0
   12882:	01 96       	adiw	r24, 0x01	; 1
   12884:	90 93 f0 01 	sts	0x01F0, r25
   12888:	80 93 ef 01 	sts	0x01EF, r24
		      stFreePrinting=fpPrintHeader;
   1288c:	84 e0       	ldi	r24, 0x04	; 4
   1288e:	5f c2       	rjmp	.+1214   	; 0x12d4e <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     case fpInitMessage:
	      //uart_printf(0,1,PSTR("fpInitMessage"));
	      iSend=0;iLoop=0;
   12890:	10 92 f0 01 	sts	0x01F0, r1
   12894:	10 92 ef 01 	sts	0x01EF, r1
   12898:	10 92 ec 01 	sts	0x01EC, r1
   1289c:	10 92 eb 01 	sts	0x01EB, r1
          stFreePrinting=fpPrintMessage; 
   128a0:	08 e0       	ldi	r16, 0x08	; 8
   128a2:	00 93 25 01 	sts	0x0125, r16
		  CarriegeReturn();
   128a6:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		  if (iPrinted>0) stFreePrinting=fpInitDuplicate;
   128aa:	80 91 f7 01 	lds	r24, 0x01F7
   128ae:	88 23       	and	r24, r24
   128b0:	11 f0       	breq	.+4      	; 0x128b6 <FreePrinting+0x190>
   128b2:	86 e0       	ldi	r24, 0x06	; 6
   128b4:	86 cf       	rjmp	.-244    	; 0x127c2 <FreePrinting+0x9c>
		  else stFreePrinting=fpPrintMessage; 
   128b6:	00 93 25 01 	sts	0x0125, r16
   128ba:	cf c2       	rjmp	.+1438   	; 0x12e5a <FreePrinting+0x734>
	      break;
     case fpInitDuplicate:
	      //uart_printf(0,1,PSTR("fpInitDuplicate"));
          if (iPrinted>0)sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   128bc:	80 91 f7 01 	lds	r24, 0x01F7
   128c0:	22 ec       	ldi	r18, 0xC2	; 194
   128c2:	38 e0       	ldi	r19, 0x08	; 8
   128c4:	88 23       	and	r24, r24
   128c6:	79 f0       	breq	.+30     	; 0x128e6 <FreePrinting+0x1c0>
   128c8:	00 d0       	rcall	.+0      	; 0x128ca <FreePrinting+0x1a4>
   128ca:	00 d0       	rcall	.+0      	; 0x128cc <FreePrinting+0x1a6>
   128cc:	ad b7       	in	r26, 0x3d	; 61
   128ce:	be b7       	in	r27, 0x3e	; 62
   128d0:	12 96       	adiw	r26, 0x02	; 2
   128d2:	3c 93       	st	X, r19
   128d4:	2e 93       	st	-X, r18
   128d6:	11 97       	sbiw	r26, 0x01	; 1
   128d8:	8f e7       	ldi	r24, 0x7F	; 127
   128da:	97 e0       	ldi	r25, 0x07	; 7
   128dc:	14 96       	adiw	r26, 0x04	; 4
   128de:	9c 93       	st	X, r25
   128e0:	8e 93       	st	-X, r24
   128e2:	13 97       	sbiw	r26, 0x03	; 3
   128e4:	0a c0       	rjmp	.+20     	; 0x128fa <FreePrinting+0x1d4>
          else           sprintf_P(strPrint,PSTR("                                   "));
   128e6:	00 d0       	rcall	.+0      	; 0x128e8 <FreePrinting+0x1c2>
   128e8:	00 d0       	rcall	.+0      	; 0x128ea <FreePrinting+0x1c4>
   128ea:	ed b7       	in	r30, 0x3d	; 61
   128ec:	fe b7       	in	r31, 0x3e	; 62
   128ee:	32 83       	std	Z+2, r19	; 0x02
   128f0:	21 83       	std	Z+1, r18	; 0x01
   128f2:	8b e5       	ldi	r24, 0x5B	; 91
   128f4:	97 e0       	ldi	r25, 0x07	; 7
   128f6:	94 83       	std	Z+4, r25	; 0x04
   128f8:	83 83       	std	Z+3, r24	; 0x03
   128fa:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   128fe:	0f 90       	pop	r0
   12900:	0f 90       	pop	r0
   12902:	0f 90       	pop	r0
   12904:	0f 90       	pop	r0
		  iSend=0;
   12906:	10 92 f0 01 	sts	0x01F0, r1
   1290a:	10 92 ef 01 	sts	0x01EF, r1
		  iLoop=0;
   1290e:	10 92 ec 01 	sts	0x01EC, r1
   12912:	10 92 eb 01 	sts	0x01EB, r1
		  LSend=strlen(strPrint);
   12916:	e2 ec       	ldi	r30, 0xC2	; 194
   12918:	f8 e0       	ldi	r31, 0x08	; 8
   1291a:	01 90       	ld	r0, Z+
   1291c:	00 20       	and	r0, r0
   1291e:	e9 f7       	brne	.-6      	; 0x1291a <FreePrinting+0x1f4>
   12920:	31 97       	sbiw	r30, 0x01	; 1
   12922:	e2 5c       	subi	r30, 0xC2	; 194
   12924:	f8 40       	sbci	r31, 0x08	; 8
   12926:	f0 93 ee 01 	sts	0x01EE, r31
   1292a:	e0 93 ed 01 	sts	0x01ED, r30
          stFreePrinting=fpPrintDuplicate; 
   1292e:	87 e0       	ldi	r24, 0x07	; 7
   12930:	48 cf       	rjmp	.-368    	; 0x127c2 <FreePrinting+0x9c>
	      break;
     case fpPrintDuplicate:
	      //uart_printf(0,1,PSTR("fpPrintDuplicate"));
		  if (iSend<LSend){
   12932:	20 91 ef 01 	lds	r18, 0x01EF
   12936:	30 91 f0 01 	lds	r19, 0x01F0
   1293a:	80 91 ed 01 	lds	r24, 0x01ED
   1293e:	90 91 ee 01 	lds	r25, 0x01EE
   12942:	28 17       	cp	r18, r24
   12944:	39 07       	cpc	r19, r25
   12946:	68 f4       	brcc	.+26     	; 0x12962 <FreePrinting+0x23c>
		      iLoop++;
   12948:	80 91 eb 01 	lds	r24, 0x01EB
   1294c:	90 91 ec 01 	lds	r25, 0x01EC
   12950:	01 96       	adiw	r24, 0x01	; 1
   12952:	90 93 ec 01 	sts	0x01EC, r25
   12956:	80 93 eb 01 	sts	0x01EB, r24
			  if((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
				 //iSend++;
				 TimPrintBusy=0;
   1295a:	10 92 b8 01 	sts	0x01B8, r1
                 stFreePrinting=fpCheckPrintStatusDuplicate;
   1295e:	85 e1       	ldi	r24, 0x15	; 21
   12960:	30 cf       	rjmp	.-416    	; 0x127c2 <FreePrinting+0x9c>
				 }
			  }
          else {
		     iSend=0;
   12962:	10 92 f0 01 	sts	0x01F0, r1
   12966:	10 92 ef 01 	sts	0x01EF, r1
		     stFreePrinting=fpPrintMessage;
   1296a:	88 e0       	ldi	r24, 0x08	; 8
   1296c:	d3 c1       	rjmp	.+934    	; 0x12d14 <FreePrinting+0x5ee>
			 CarriegeReturn();	      
			 }
	      break;
     case fpCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   1296e:	80 91 b5 01 	lds	r24, 0x01B5
   12972:	88 23       	and	r24, r24
   12974:	09 f0       	breq	.+2      	; 0x12978 <FreePrinting+0x252>
   12976:	ed c1       	rjmp	.+986    	; 0x12d52 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12978:	e0 91 ef 01 	lds	r30, 0x01EF
   1297c:	f0 91 f0 01 	lds	r31, 0x01F0
   12980:	ee 53       	subi	r30, 0x3E	; 62
   12982:	f7 4f       	sbci	r31, 0xF7	; 247
   12984:	61 e0       	ldi	r22, 0x01	; 1
   12986:	40 81       	ld	r20, Z
   12988:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   1298c:	80 91 ef 01 	lds	r24, 0x01EF
   12990:	90 91 f0 01 	lds	r25, 0x01F0
   12994:	01 96       	adiw	r24, 0x01	; 1
   12996:	90 93 f0 01 	sts	0x01F0, r25
   1299a:	80 93 ef 01 	sts	0x01EF, r24
		      stFreePrinting=fpPrintDuplicate;
   1299e:	87 e0       	ldi	r24, 0x07	; 7
   129a0:	d6 c1       	rjmp	.+940    	; 0x12d4e <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

     case fpPrintMessage:
		  if (iSend<LengthMessage81){
   129a2:	20 91 ef 01 	lds	r18, 0x01EF
   129a6:	30 91 f0 01 	lds	r19, 0x01F0
   129aa:	80 91 8d 01 	lds	r24, 0x018D
   129ae:	90 91 8e 01 	lds	r25, 0x018E
   129b2:	28 17       	cp	r18, r24
   129b4:	39 07       	cpc	r19, r25
   129b6:	68 f4       	brcc	.+26     	; 0x129d2 <FreePrinting+0x2ac>
		      iLoop++;
   129b8:	80 91 eb 01 	lds	r24, 0x01EB
   129bc:	90 91 ec 01 	lds	r25, 0x01EC
   129c0:	01 96       	adiw	r24, 0x01	; 1
   129c2:	90 93 ec 01 	sts	0x01EC, r25
   129c6:	80 93 eb 01 	sts	0x01EB, r24
			  if((iLoop%PRINT_DELAY)==0){
			     TimPrintBusy=0;
   129ca:	10 92 b8 01 	sts	0x01B8, r1
				 stFreePrinting=fpCheckPrintStatusMessage;
   129ce:	83 e1       	ldi	r24, 0x13	; 19
   129d0:	f8 ce       	rjmp	.-528    	; 0x127c2 <FreePrinting+0x9c>
				 }
			  }
          else stFreePrinting=fpLoadEndLine;//fpInitFooter;
   129d2:	86 e1       	ldi	r24, 0x16	; 22
   129d4:	f6 ce       	rjmp	.-532    	; 0x127c2 <FreePrinting+0x9c>
	      break;
     
     case fpCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   129d6:	80 91 b5 01 	lds	r24, 0x01B5
   129da:	88 23       	and	r24, r24
   129dc:	09 f0       	breq	.+2      	; 0x129e0 <FreePrinting+0x2ba>
   129de:	b9 c1       	rjmp	.+882    	; 0x12d52 <FreePrinting+0x62c>
              if ((PrintBuffer[iSend]!=0x0D)||(PrintBuffer[iSend]!=0x0A))
			      SendPrint(PrintBuffer[iSend],PrintBuffer[iSend+1]);
   129e0:	e0 91 ef 01 	lds	r30, 0x01EF
   129e4:	f0 91 f0 01 	lds	r31, 0x01F0
   129e8:	ee 50       	subi	r30, 0x0E	; 14
   129ea:	fc 4f       	sbci	r31, 0xFC	; 252
   129ec:	80 81       	ld	r24, Z
   129ee:	61 81       	ldd	r22, Z+1	; 0x01
   129f0:	0e 94 92 45 	call	0x8b24	; 0x8b24 <SendPrint>
			     // uart(_COM_PRINTER,1,PrintBuffer[iSend]);
              if ((PrintBuffer[iSend]==0x0D)||(PrintBuffer[iSend+1]==0x0A))
   129f4:	e0 91 ef 01 	lds	r30, 0x01EF
   129f8:	f0 91 f0 01 	lds	r31, 0x01F0
   129fc:	ee 50       	subi	r30, 0x0E	; 14
   129fe:	fc 4f       	sbci	r31, 0xFC	; 252
   12a00:	80 81       	ld	r24, Z
   12a02:	8d 30       	cpi	r24, 0x0D	; 13
   12a04:	19 f0       	breq	.+6      	; 0x12a0c <FreePrinting+0x2e6>
   12a06:	81 81       	ldd	r24, Z+1	; 0x01
   12a08:	8a 30       	cpi	r24, 0x0A	; 10
   12a0a:	11 f4       	brne	.+4      	; 0x12a10 <FreePrinting+0x2ea>
			     CarriegeReturn();
   12a0c:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
             iSend++;
   12a10:	80 91 ef 01 	lds	r24, 0x01EF
   12a14:	90 91 f0 01 	lds	r25, 0x01F0
   12a18:	01 96       	adiw	r24, 0x01	; 1
   12a1a:	90 93 f0 01 	sts	0x01F0, r25
   12a1e:	80 93 ef 01 	sts	0x01EF, r24
		     stFreePrinting=fpPrintMessage;
   12a22:	88 e0       	ldi	r24, 0x08	; 8
   12a24:	94 c1       	rjmp	.+808    	; 0x12d4e <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     //SpaceAdded
	 case fpInitSpace:
	      iLoop=0;
   12a26:	10 92 ec 01 	sts	0x01EC, r1
   12a2a:	10 92 eb 01 	sts	0x01EB, r1
		  iMargin=0;
   12a2e:	10 92 f3 01 	sts	0x01F3, r1
		  stFreePrinting=fpPrintMargin;
   12a32:	8a e0       	ldi	r24, 0x0A	; 10
   12a34:	c6 ce       	rjmp	.-628    	; 0x127c2 <FreePrinting+0x9c>
	      break;
	 case fpPrintMargin:
		  if (iMargin<PRINT_MARGIN){
   12a36:	80 91 f3 01 	lds	r24, 0x01F3
   12a3a:	85 30       	cpi	r24, 0x05	; 5
   12a3c:	90 f4       	brcc	.+36     	; 0x12a62 <FreePrinting+0x33c>
		      iMargin++;
   12a3e:	8f 5f       	subi	r24, 0xFF	; 255
   12a40:	80 93 f3 01 	sts	0x01F3, r24
		      iLoop++;
   12a44:	80 91 eb 01 	lds	r24, 0x01EB
   12a48:	90 91 ec 01 	lds	r25, 0x01EC
   12a4c:	01 96       	adiw	r24, 0x01	; 1
   12a4e:	90 93 ec 01 	sts	0x01EC, r25
   12a52:	80 93 eb 01 	sts	0x01EB, r24
	          if ((iLoop%PRINT_DELAY)==0)uart(_COM_PRINTER,1,' ');
   12a56:	80 e0       	ldi	r24, 0x00	; 0
   12a58:	61 e0       	ldi	r22, 0x01	; 1
   12a5a:	40 e2       	ldi	r20, 0x20	; 32
   12a5c:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
   12a60:	fc c1       	rjmp	.+1016   	; 0x12e5a <FreePrinting+0x734>
			 }
          else stFreePrinting=fpPrintMessage;
   12a62:	88 e0       	ldi	r24, 0x08	; 8
   12a64:	ae ce       	rjmp	.-676    	; 0x127c2 <FreePrinting+0x9c>
	      break;
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   12a66:	8e 01       	movw	r16, r28
   12a68:	0f 5f       	subi	r16, 0xFF	; 255
   12a6a:	1f 4f       	sbci	r17, 0xFF	; 255
   12a6c:	c8 01       	movw	r24, r16
   12a6e:	65 e1       	ldi	r22, 0x15	; 21
   12a70:	70 e0       	ldi	r23, 0x00	; 0
   12a72:	42 e1       	ldi	r20, 0x12	; 18
   12a74:	50 e0       	ldi	r21, 0x00	; 0
   12a76:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
   12a7a:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12a7c:	9e 01       	movw	r18, r28
   12a7e:	20 5f       	subi	r18, 0xF0	; 240
   12a80:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   12a82:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12a84:	82 17       	cp	r24, r18
   12a86:	93 07       	cpc	r25, r19
   12a88:	e1 f7       	brne	.-8      	; 0x12a82 <FreePrinting+0x35c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   12a8a:	18 8a       	std	Y+16, r1	; 0x10
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
          StrPosCopy(strOperatorName,strOperatorName,0,15);
          if (strlen(strOperatorName)>0){
   12a8c:	89 81       	ldd	r24, Y+1	; 0x01
   12a8e:	88 23       	and	r24, r24
   12a90:	09 f4       	brne	.+2      	; 0x12a94 <FreePrinting+0x36e>
   12a92:	d4 c0       	rjmp	.+424    	; 0x12c3c <FreePrinting+0x516>
		  	  if (SpaceOnly(strOperatorName)!=True){
   12a94:	ce 01       	movw	r24, r28
   12a96:	01 96       	adiw	r24, 0x01	; 1
   12a98:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   12a9c:	81 30       	cpi	r24, 0x01	; 1
   12a9e:	09 f4       	brne	.+2      	; 0x12aa2 <FreePrinting+0x37c>
   12aa0:	cd c0       	rjmp	.+410    	; 0x12c3c <FreePrinting+0x516>
			      sprintf_P(strPrint,PSTR("---------------------------------"));
   12aa2:	00 d0       	rcall	.+0      	; 0x12aa4 <FreePrinting+0x37e>
   12aa4:	00 d0       	rcall	.+0      	; 0x12aa6 <FreePrinting+0x380>
   12aa6:	02 ec       	ldi	r16, 0xC2	; 194
   12aa8:	18 e0       	ldi	r17, 0x08	; 8
   12aaa:	ad b7       	in	r26, 0x3d	; 61
   12aac:	be b7       	in	r27, 0x3e	; 62
   12aae:	12 96       	adiw	r26, 0x02	; 2
   12ab0:	1c 93       	st	X, r17
   12ab2:	0e 93       	st	-X, r16
   12ab4:	11 97       	sbiw	r26, 0x01	; 1
   12ab6:	89 e3       	ldi	r24, 0x39	; 57
   12ab8:	97 e0       	ldi	r25, 0x07	; 7
   12aba:	14 96       	adiw	r26, 0x04	; 4
   12abc:	9c 93       	st	X, r25
   12abe:	8e 93       	st	-X, r24
   12ac0:	13 97       	sbiw	r26, 0x03	; 3
   12ac2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			      //AddSpaceLead(strPrint,(strlen(strPrint)+PRINT_MARGIN));
			      iSend=0;
   12ac6:	10 92 f0 01 	sts	0x01F0, r1
   12aca:	10 92 ef 01 	sts	0x01EF, r1
				  iLoop=0;
   12ace:	10 92 ec 01 	sts	0x01EC, r1
   12ad2:	10 92 eb 01 	sts	0x01EB, r1
				  LSend=strlen(strPrint);
   12ad6:	f8 01       	movw	r30, r16
   12ad8:	01 90       	ld	r0, Z+
   12ada:	00 20       	and	r0, r0
   12adc:	e9 f7       	brne	.-6      	; 0x12ad8 <FreePrinting+0x3b2>
   12ade:	8f 01       	movw	r16, r30
   12ae0:	01 50       	subi	r16, 0x01	; 1
   12ae2:	10 40       	sbci	r17, 0x00	; 0
   12ae4:	02 5c       	subi	r16, 0xC2	; 194
   12ae6:	18 40       	sbci	r17, 0x08	; 8
   12ae8:	10 93 ee 01 	sts	0x01EE, r17
   12aec:	00 93 ed 01 	sts	0x01ED, r16
				  stFreePrinting=fpPrintEndLine;	
   12af0:	87 e1       	ldi	r24, 0x17	; 23
   12af2:	80 93 25 01 	sts	0x0125, r24
   12af6:	0f 90       	pop	r0
   12af8:	0f 90       	pop	r0
   12afa:	0f 90       	pop	r0
   12afc:	0f 90       	pop	r0
   12afe:	ad c1       	rjmp	.+858    	; 0x12e5a <FreePrinting+0x734>
			   }else stFreePrinting=fpInitFooter;
		  }else stFreePrinting=fpInitFooter;
	      break;

	 case fpPrintEndLine:
		  if (iSend<LSend){
   12b00:	20 91 ef 01 	lds	r18, 0x01EF
   12b04:	30 91 f0 01 	lds	r19, 0x01F0
   12b08:	80 91 ed 01 	lds	r24, 0x01ED
   12b0c:	90 91 ee 01 	lds	r25, 0x01EE
   12b10:	28 17       	cp	r18, r24
   12b12:	39 07       	cpc	r19, r25
   12b14:	68 f4       	brcc	.+26     	; 0x12b30 <FreePrinting+0x40a>
		      iLoop++;
   12b16:	80 91 eb 01 	lds	r24, 0x01EB
   12b1a:	90 91 ec 01 	lds	r25, 0x01EC
   12b1e:	01 96       	adiw	r24, 0x01	; 1
   12b20:	90 93 ec 01 	sts	0x01EC, r25
   12b24:	80 93 eb 01 	sts	0x01EB, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   12b28:	10 92 b8 01 	sts	0x01B8, r1
				  stFreePrinting=fpCheckPrintEndLine;
   12b2c:	88 e1       	ldi	r24, 0x18	; 24
   12b2e:	49 ce       	rjmp	.-878    	; 0x127c2 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   12b30:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			  stFreePrinting=fpLoadOperatorName;
   12b34:	89 e1       	ldi	r24, 0x19	; 25
   12b36:	45 ce       	rjmp	.-886    	; 0x127c2 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintEndLine:
	      if (IsBusyPrint==False){
   12b38:	80 91 b5 01 	lds	r24, 0x01B5
   12b3c:	88 23       	and	r24, r24
   12b3e:	09 f0       	breq	.+2      	; 0x12b42 <FreePrinting+0x41c>
   12b40:	08 c1       	rjmp	.+528    	; 0x12d52 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12b42:	e0 91 ef 01 	lds	r30, 0x01EF
   12b46:	f0 91 f0 01 	lds	r31, 0x01F0
   12b4a:	ee 53       	subi	r30, 0x3E	; 62
   12b4c:	f7 4f       	sbci	r31, 0xF7	; 247
   12b4e:	61 e0       	ldi	r22, 0x01	; 1
   12b50:	40 81       	ld	r20, Z
   12b52:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   12b56:	80 91 ef 01 	lds	r24, 0x01EF
   12b5a:	90 91 f0 01 	lds	r25, 0x01F0
   12b5e:	01 96       	adiw	r24, 0x01	; 1
   12b60:	90 93 f0 01 	sts	0x01F0, r25
   12b64:	80 93 ef 01 	sts	0x01EF, r24
		      stFreePrinting=fpPrintEndLine;
   12b68:	87 e1       	ldi	r24, 0x17	; 23
   12b6a:	f1 c0       	rjmp	.+482    	; 0x12d4e <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   12b6c:	8e 01       	movw	r16, r28
   12b6e:	0f 5f       	subi	r16, 0xFF	; 255
   12b70:	1f 4f       	sbci	r17, 0xFF	; 255
   12b72:	c8 01       	movw	r24, r16
   12b74:	65 e1       	ldi	r22, 0x15	; 21
   12b76:	70 e0       	ldi	r23, 0x00	; 0
   12b78:	42 e1       	ldi	r20, 0x12	; 18
   12b7a:	50 e0       	ldi	r21, 0x00	; 0
   12b7c:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
   12b80:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12b82:	9e 01       	movw	r18, r28
   12b84:	20 5f       	subi	r18, 0xF0	; 240
   12b86:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   12b88:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12b8a:	82 17       	cp	r24, r18
   12b8c:	93 07       	cpc	r25, r19
   12b8e:	e1 f7       	brne	.-8      	; 0x12b88 <FreePrinting+0x462>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   12b90:	18 8a       	std	Y+16, r1	; 0x10
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  sprintf_P(strPrint,PSTR("Operator: %s"),strOperatorName);
   12b92:	00 d0       	rcall	.+0      	; 0x12b94 <FreePrinting+0x46e>
   12b94:	00 d0       	rcall	.+0      	; 0x12b96 <FreePrinting+0x470>
   12b96:	00 d0       	rcall	.+0      	; 0x12b98 <FreePrinting+0x472>
   12b98:	ed b7       	in	r30, 0x3d	; 61
   12b9a:	fe b7       	in	r31, 0x3e	; 62
   12b9c:	31 96       	adiw	r30, 0x01	; 1
   12b9e:	02 ec       	ldi	r16, 0xC2	; 194
   12ba0:	18 e0       	ldi	r17, 0x08	; 8
   12ba2:	ad b7       	in	r26, 0x3d	; 61
   12ba4:	be b7       	in	r27, 0x3e	; 62
   12ba6:	12 96       	adiw	r26, 0x02	; 2
   12ba8:	1c 93       	st	X, r17
   12baa:	0e 93       	st	-X, r16
   12bac:	11 97       	sbiw	r26, 0x01	; 1
   12bae:	8c e2       	ldi	r24, 0x2C	; 44
   12bb0:	97 e0       	ldi	r25, 0x07	; 7
   12bb2:	93 83       	std	Z+3, r25	; 0x03
   12bb4:	82 83       	std	Z+2, r24	; 0x02
   12bb6:	ce 01       	movw	r24, r28
   12bb8:	01 96       	adiw	r24, 0x01	; 1
   12bba:	95 83       	std	Z+5, r25	; 0x05
   12bbc:	84 83       	std	Z+4, r24	; 0x04
   12bbe:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	      iSend=0;
   12bc2:	10 92 f0 01 	sts	0x01F0, r1
   12bc6:	10 92 ef 01 	sts	0x01EF, r1
		  iLoop=0;
   12bca:	10 92 ec 01 	sts	0x01EC, r1
   12bce:	10 92 eb 01 	sts	0x01EB, r1
		  LSend=strlen(strPrint);
   12bd2:	f8 01       	movw	r30, r16
   12bd4:	01 90       	ld	r0, Z+
   12bd6:	00 20       	and	r0, r0
   12bd8:	e9 f7       	brne	.-6      	; 0x12bd4 <FreePrinting+0x4ae>
   12bda:	8f 01       	movw	r16, r30
   12bdc:	01 50       	subi	r16, 0x01	; 1
   12bde:	10 40       	sbci	r17, 0x00	; 0
   12be0:	02 5c       	subi	r16, 0xC2	; 194
   12be2:	18 40       	sbci	r17, 0x08	; 8
   12be4:	10 93 ee 01 	sts	0x01EE, r17
   12be8:	00 93 ed 01 	sts	0x01ED, r16
		  stFreePrinting=fpPrintOperatorName;	
   12bec:	8a e1       	ldi	r24, 0x1A	; 26
   12bee:	80 93 25 01 	sts	0x0125, r24
   12bf2:	8d b7       	in	r24, 0x3d	; 61
   12bf4:	9e b7       	in	r25, 0x3e	; 62
   12bf6:	06 96       	adiw	r24, 0x06	; 6
   12bf8:	0f b6       	in	r0, 0x3f	; 63
   12bfa:	f8 94       	cli
   12bfc:	9e bf       	out	0x3e, r25	; 62
   12bfe:	0f be       	out	0x3f, r0	; 63
   12c00:	8d bf       	out	0x3d, r24	; 61
   12c02:	2b c1       	rjmp	.+598    	; 0x12e5a <FreePrinting+0x734>
	      break;
	 case fpPrintOperatorName:
		  if (iSend<LSend){
   12c04:	20 91 ef 01 	lds	r18, 0x01EF
   12c08:	30 91 f0 01 	lds	r19, 0x01F0
   12c0c:	80 91 ed 01 	lds	r24, 0x01ED
   12c10:	90 91 ee 01 	lds	r25, 0x01EE
   12c14:	28 17       	cp	r18, r24
   12c16:	39 07       	cpc	r19, r25
   12c18:	68 f4       	brcc	.+26     	; 0x12c34 <FreePrinting+0x50e>
		      iLoop++;
   12c1a:	80 91 eb 01 	lds	r24, 0x01EB
   12c1e:	90 91 ec 01 	lds	r25, 0x01EC
   12c22:	01 96       	adiw	r24, 0x01	; 1
   12c24:	90 93 ec 01 	sts	0x01EC, r25
   12c28:	80 93 eb 01 	sts	0x01EB, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   12c2c:	10 92 b8 01 	sts	0x01B8, r1
				  stFreePrinting=fpCheckPrintOperatorName;
   12c30:	8b e1       	ldi	r24, 0x1B	; 27
   12c32:	c7 cd       	rjmp	.-1138   	; 0x127c2 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   12c34:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			  CarriegeReturn();
   12c38:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			  stFreePrinting=fpInitFooter;
   12c3c:	8b e0       	ldi	r24, 0x0B	; 11
   12c3e:	c1 cd       	rjmp	.-1150   	; 0x127c2 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   12c40:	80 91 b5 01 	lds	r24, 0x01B5
   12c44:	88 23       	and	r24, r24
   12c46:	09 f0       	breq	.+2      	; 0x12c4a <FreePrinting+0x524>
   12c48:	84 c0       	rjmp	.+264    	; 0x12d52 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12c4a:	e0 91 ef 01 	lds	r30, 0x01EF
   12c4e:	f0 91 f0 01 	lds	r31, 0x01F0
   12c52:	ee 53       	subi	r30, 0x3E	; 62
   12c54:	f7 4f       	sbci	r31, 0xF7	; 247
   12c56:	61 e0       	ldi	r22, 0x01	; 1
   12c58:	40 81       	ld	r20, Z
   12c5a:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   12c5e:	80 91 ef 01 	lds	r24, 0x01EF
   12c62:	90 91 f0 01 	lds	r25, 0x01F0
   12c66:	01 96       	adiw	r24, 0x01	; 1
   12c68:	90 93 f0 01 	sts	0x01F0, r25
   12c6c:	80 93 ef 01 	sts	0x01EF, r24
		      stFreePrinting=fpPrintOperatorName;
   12c70:	8a e1       	ldi	r24, 0x1A	; 26
   12c72:	6d c0       	rjmp	.+218    	; 0x12d4e <FreePrinting+0x628>
			  }
	      break;

     case fpInitFooter:
	      //uart_printf(0,1,PSTR("fpInitFooter"));
          if (((cmdPrint&0b01000000)>>6)==1){
   12c74:	80 91 b7 01 	lds	r24, 0x01B7
   12c78:	86 ff       	sbrs	r24, 6
   12c7a:	06 c0       	rjmp	.+12     	; 0x12c88 <FreePrinting+0x562>
		      stFreePrinting=fpLoadFooter;
   12c7c:	8c e0       	ldi	r24, 0x0C	; 12
   12c7e:	80 93 25 01 	sts	0x0125, r24
			  iFooter=0;
   12c82:	10 92 f5 01 	sts	0x01F5, r1
   12c86:	e9 c0       	rjmp	.+466    	; 0x12e5a <FreePrinting+0x734>
			  }
		  else
	      if (((cmdPrint&0b01000000)>>6)==0) stFreePrinting=fpPaperCut;//fpInitScroll;	                
   12c88:	80 e1       	ldi	r24, 0x10	; 16
   12c8a:	9b cd       	rjmp	.-1226   	; 0x127c2 <FreePrinting+0x9c>
	      break;
     case fpLoadFooter:
	 	  //uart_printf(0,1,PSTR("fpLoadFooter"));
          //Footer 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   12c8c:	60 91 f5 01 	lds	r22, 0x01F5
   12c90:	89 e2       	ldi	r24, 0x29	; 41
   12c92:	68 9f       	mul	r22, r24
   12c94:	b0 01       	movw	r22, r0
   12c96:	11 24       	eor	r1, r1
   12c98:	6d 5d       	subi	r22, 0xDD	; 221
   12c9a:	7c 4f       	sbci	r23, 0xFC	; 252
   12c9c:	82 ec       	ldi	r24, 0xC2	; 194
   12c9e:	98 e0       	ldi	r25, 0x08	; 8
   12ca0:	48 e2       	ldi	r20, 0x28	; 40
   12ca2:	50 e0       	ldi	r21, 0x00	; 0
   12ca4:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  iFooter++;
   12ca8:	80 91 f5 01 	lds	r24, 0x01F5
   12cac:	8f 5f       	subi	r24, 0xFF	; 255
   12cae:	80 93 f5 01 	sts	0x01F5, r24
		  if (iFooter<=4){
   12cb2:	85 30       	cpi	r24, 0x05	; 5
   12cb4:	90 f4       	brcc	.+36     	; 0x12cda <FreePrinting+0x5b4>
		      if (SpaceOnly(strPrint)==True){
   12cb6:	82 ec       	ldi	r24, 0xC2	; 194
   12cb8:	98 e0       	ldi	r25, 0x08	; 8
   12cba:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   12cbe:	81 30       	cpi	r24, 0x01	; 1
   12cc0:	11 f4       	brne	.+4      	; 0x12cc6 <FreePrinting+0x5a0>
			      stFreePrinting=fpLoadFooter;
   12cc2:	8c e0       	ldi	r24, 0x0C	; 12
   12cc4:	7e cd       	rjmp	.-1284   	; 0x127c2 <FreePrinting+0x9c>
				  }
			  else{
			      iSend=0;
   12cc6:	10 92 f0 01 	sts	0x01F0, r1
   12cca:	10 92 ef 01 	sts	0x01EF, r1
				  iLoop=0;
   12cce:	10 92 ec 01 	sts	0x01EC, r1
   12cd2:	10 92 eb 01 	sts	0x01EB, r1
				  stFreePrinting=fpPrintFooter;
   12cd6:	8d e0       	ldi	r24, 0x0D	; 13
   12cd8:	74 cd       	rjmp	.-1304   	; 0x127c2 <FreePrinting+0x9c>
			      }
		  }else{
		    CarriegeReturn();
   12cda:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			iPrinted++;
   12cde:	80 91 f7 01 	lds	r24, 0x01F7
   12ce2:	8f 5f       	subi	r24, 0xFF	; 255
   12ce4:	80 93 f7 01 	sts	0x01F7, r24

			//if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_CUBE){
			    stFreePrinting=fpInitScroll;
   12ce8:	8e e0       	ldi	r24, 0x0E	; 14
   12cea:	6b cd       	rjmp	.-1322   	; 0x127c2 <FreePrinting+0x9c>
			//}else stFreePrinting=fpPaperCut;

			}
	      break;
     case fpPrintFooter:
		  if (iSend<40){
   12cec:	80 91 ef 01 	lds	r24, 0x01EF
   12cf0:	90 91 f0 01 	lds	r25, 0x01F0
   12cf4:	88 97       	sbiw	r24, 0x28	; 40
   12cf6:	68 f4       	brcc	.+26     	; 0x12d12 <FreePrinting+0x5ec>
		      iLoop++;
   12cf8:	80 91 eb 01 	lds	r24, 0x01EB
   12cfc:	90 91 ec 01 	lds	r25, 0x01EC
   12d00:	01 96       	adiw	r24, 0x01	; 1
   12d02:	90 93 ec 01 	sts	0x01EC, r25
   12d06:	80 93 eb 01 	sts	0x01EB, r24
			  if((iLoop%PRINT_DELAY)==0){
		        //uart(_COM_PRINTER,1,strPrint[iSend]);
		        //iSend++;
				TimPrintBusy=0;
   12d0a:	10 92 b8 01 	sts	0x01B8, r1
				stFreePrinting=fpCheckPrintStatusFooter;
   12d0e:	84 e1       	ldi	r24, 0x14	; 20
   12d10:	58 cd       	rjmp	.-1360   	; 0x127c2 <FreePrinting+0x9c>
				}
			  }
          else {
		      stFreePrinting=fpLoadFooter;
   12d12:	8c e0       	ldi	r24, 0x0C	; 12
   12d14:	80 93 25 01 	sts	0x0125, r24
			  CarriegeReturn();
   12d18:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   12d1c:	9e c0       	rjmp	.+316    	; 0x12e5a <FreePrinting+0x734>
			  }
	      break;
     
	 case fpCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   12d1e:	80 91 b5 01 	lds	r24, 0x01B5
   12d22:	88 23       	and	r24, r24
   12d24:	b1 f4       	brne	.+44     	; 0x12d52 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12d26:	e0 91 ef 01 	lds	r30, 0x01EF
   12d2a:	f0 91 f0 01 	lds	r31, 0x01F0
   12d2e:	ee 53       	subi	r30, 0x3E	; 62
   12d30:	f7 4f       	sbci	r31, 0xF7	; 247
   12d32:	61 e0       	ldi	r22, 0x01	; 1
   12d34:	40 81       	ld	r20, Z
   12d36:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   12d3a:	80 91 ef 01 	lds	r24, 0x01EF
   12d3e:	90 91 f0 01 	lds	r25, 0x01F0
   12d42:	01 96       	adiw	r24, 0x01	; 1
   12d44:	90 93 f0 01 	sts	0x01F0, r25
   12d48:	80 93 ef 01 	sts	0x01EF, r24
		      stFreePrinting=fpPrintFooter;
   12d4c:	8d e0       	ldi	r24, 0x0D	; 13
   12d4e:	80 93 25 01 	sts	0x0125, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   12d52:	80 91 b8 01 	lds	r24, 0x01B8
   12d56:	8b 30       	cpi	r24, 0x0B	; 11
   12d58:	08 f4       	brcc	.+2      	; 0x12d5c <FreePrinting+0x636>
   12d5a:	7f c0       	rjmp	.+254    	; 0x12e5a <FreePrinting+0x734>
		      IsPrintERROR=True;
   12d5c:	81 e0       	ldi	r24, 0x01	; 1
   12d5e:	80 93 b3 01 	sts	0x01B3, r24
		      stFreePrinting=fpFinishFreePrinting;
   12d62:	81 e1       	ldi	r24, 0x11	; 17
   12d64:	2e cd       	rjmp	.-1444   	; 0x127c2 <FreePrinting+0x9c>
			  }
	      break;

     case fpInitScroll:
	      iScroll=0;
   12d66:	10 92 f2 01 	sts	0x01F2, r1
		  iSend=0;
   12d6a:	10 92 f0 01 	sts	0x01F0, r1
   12d6e:	10 92 ef 01 	sts	0x01EF, r1
		  if (iPrinted<PrintCopy)
   12d72:	90 91 f7 01 	lds	r25, 0x01F7
   12d76:	80 91 f4 01 	lds	r24, 0x01F4
   12d7a:	98 17       	cp	r25, r24
   12d7c:	28 f4       	brcc	.+10     	; 0x12d88 <FreePrinting+0x662>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   12d7e:	82 e3       	ldi	r24, 0x32	; 50
   12d80:	90 e0       	ldi	r25, 0x00	; 0
   12d82:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   12d86:	04 c0       	rjmp	.+8      	; 0x12d90 <FreePrinting+0x66a>
		  else if (iPrinted>=PrintCopy)
		  	  nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   12d88:	81 e3       	ldi	r24, 0x31	; 49
   12d8a:	90 e0       	ldi	r25, 0x00	; 0
   12d8c:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   12d90:	80 93 f1 01 	sts	0x01F1, r24

          stFreePrinting=fpScrollPaper;
   12d94:	8f e0       	ldi	r24, 0x0F	; 15
   12d96:	15 cd       	rjmp	.-1494   	; 0x127c2 <FreePrinting+0x9c>
	      break;
     case fpScrollPaper:
	      if (iScroll>nScroll)stFreePrinting=fpPaperCut;
   12d98:	90 91 f2 01 	lds	r25, 0x01F2
   12d9c:	80 91 f1 01 	lds	r24, 0x01F1
   12da0:	89 17       	cp	r24, r25
   12da2:	18 f4       	brcc	.+6      	; 0x12daa <FreePrinting+0x684>
   12da4:	80 e1       	ldi	r24, 0x10	; 16
   12da6:	80 93 25 01 	sts	0x0125, r24
		  iSend++;
   12daa:	80 91 ef 01 	lds	r24, 0x01EF
   12dae:	90 91 f0 01 	lds	r25, 0x01F0
   12db2:	01 96       	adiw	r24, 0x01	; 1
   12db4:	90 93 f0 01 	sts	0x01F0, r25
   12db8:	80 93 ef 01 	sts	0x01EF, r24
		  if (iSend%PRINT_DELAY==0){
		      CarriegeReturn();
   12dbc:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			  iScroll++;
   12dc0:	80 91 f2 01 	lds	r24, 0x01F2
   12dc4:	8f 5f       	subi	r24, 0xFF	; 255
   12dc6:	80 93 f2 01 	sts	0x01F2, r24
   12dca:	47 c0       	rjmp	.+142    	; 0x12e5a <FreePrinting+0x734>
			  }
	      break;
     case fpPaperCut:
		  //uart_printf(0,1,PSTR("fpPaperCut"));
		  //iPrinted++;
          if (iPrinted<PrintCopy){
   12dcc:	90 91 f7 01 	lds	r25, 0x01F7
   12dd0:	80 91 f4 01 	lds	r24, 0x01F4
   12dd4:	98 17       	cp	r25, r24
   12dd6:	20 f4       	brcc	.+8      	; 0x12de0 <FreePrinting+0x6ba>
		      CarriegeReturn();
   12dd8:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
              stFreePrinting=fpInitHeader;
   12ddc:	82 e0       	ldi	r24, 0x02	; 2
   12dde:	07 c0       	rjmp	.+14     	; 0x12dee <FreePrinting+0x6c8>
			  }
          else{
		      if (IFType==IT_SLAVE)sendMessage04();
   12de0:	80 91 00 01 	lds	r24, 0x0100
   12de4:	81 30       	cpi	r24, 0x01	; 1
   12de6:	11 f4       	brne	.+4      	; 0x12dec <FreePrinting+0x6c6>
   12de8:	0e 94 8f 93 	call	0x1271e	; 0x1271e <sendMessage04>
		      stFreePrinting=fpFinishFreePrinting;
   12dec:	81 e1       	ldi	r24, 0x11	; 17
   12dee:	80 93 25 01 	sts	0x0125, r24
			  }
          
		  if (((cmdPrint&0b00100000)>>5)==1){
   12df2:	80 91 b7 01 	lds	r24, 0x01B7
   12df6:	85 ff       	sbrs	r24, 5
   12df8:	30 c0       	rjmp	.+96     	; 0x12e5a <FreePrinting+0x734>
		      if (iPrinted==0){
   12dfa:	80 91 f7 01 	lds	r24, 0x01F7
   12dfe:	88 23       	and	r24, r24
   12e00:	31 f4       	brne	.+12     	; 0x12e0e <FreePrinting+0x6e8>
			      CarriegeReturn();_delay_ms(50);
   12e02:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   12e06:	84 ed       	ldi	r24, 0xD4	; 212
   12e08:	90 e3       	ldi	r25, 0x30	; 48
   12e0a:	01 97       	sbiw	r24, 0x01	; 1
   12e0c:	f1 f7       	brne	.-4      	; 0x12e0a <FreePrinting+0x6e4>
				 }
              //HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
		      if ((iPrinted==PrintCopy)){
   12e0e:	90 91 f7 01 	lds	r25, 0x01F7
   12e12:	80 91 f4 01 	lds	r24, 0x01F4
   12e16:	98 17       	cp	r25, r24
   12e18:	b1 f4       	brne	.+44     	; 0x12e46 <FreePrinting+0x720>
			      // if (((cmdPrint&0b00010000)>>4)==1){
				  CarriegeReturn();_delay_ms(50);
   12e1a:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   12e1e:	04 ed       	ldi	r16, 0xD4	; 212
   12e20:	10 e3       	ldi	r17, 0x30	; 48
   12e22:	c8 01       	movw	r24, r16
   12e24:	01 97       	sbiw	r24, 0x01	; 1
   12e26:	f1 f7       	brne	.-4      	; 0x12e24 <FreePrinting+0x6fe>
				  CarriegeReturn();_delay_ms(50);
   12e28:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   12e2c:	c8 01       	movw	r24, r16
   12e2e:	01 97       	sbiw	r24, 0x01	; 1
   12e30:	f1 f7       	brne	.-4      	; 0x12e2e <FreePrinting+0x708>
				  CarriegeReturn();_delay_ms(50);
   12e32:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   12e36:	c8 01       	movw	r24, r16
   12e38:	01 97       	sbiw	r24, 0x01	; 1
   12e3a:	f1 f7       	brne	.-4      	; 0x12e38 <FreePrinting+0x712>
				  CarriegeReturn();_delay_ms(50);
   12e3c:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   12e40:	c8 01       	movw	r24, r16
   12e42:	01 97       	sbiw	r24, 0x01	; 1
   12e44:	f1 f7       	brne	.-4      	; 0x12e42 <FreePrinting+0x71c>
				   //}
				 }
		      PaperCut();
   12e46:	0e 94 73 46 	call	0x8ce6	; 0x8ce6 <PaperCut>
   12e4a:	07 c0       	rjmp	.+14     	; 0x12e5a <FreePrinting+0x734>
		   }
	      break;
     case fpFinishFreePrinting:
	 	  //uart_printf(0,1,PSTR("fpFinished"));
		  IsBusyFreePrinting=False;
   12e4c:	10 92 b6 01 	sts	0x01B6, r1
	      stFreePrinting=fpInit;
   12e50:	81 e0       	ldi	r24, 0x01	; 1
   12e52:	80 93 25 01 	sts	0x0125, r24
		  iPrinted=0;
   12e56:	10 92 f7 01 	sts	0x01F7, r1
	      break;
	 }//EndCase
}
   12e5a:	64 96       	adiw	r28, 0x14	; 20
   12e5c:	0f b6       	in	r0, 0x3f	; 63
   12e5e:	f8 94       	cli
   12e60:	de bf       	out	0x3e, r29	; 62
   12e62:	0f be       	out	0x3f, r0	; 63
   12e64:	cd bf       	out	0x3d, r28	; 61
   12e66:	cf 91       	pop	r28
   12e68:	df 91       	pop	r29
   12e6a:	1f 91       	pop	r17
   12e6c:	0f 91       	pop	r16
   12e6e:	08 95       	ret

00012e70 <PrintIdle>:
      /* Set Character size normal */
      uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
	  }
}

void PrintIdle(){
   12e70:	ef 92       	push	r14
   12e72:	ff 92       	push	r15
   12e74:	0f 93       	push	r16
   12e76:	1f 93       	push	r17
   12e78:	df 93       	push	r29
   12e7a:	cf 93       	push	r28
   12e7c:	cd b7       	in	r28, 0x3d	; 61
   12e7e:	de b7       	in	r29, 0x3e	; 62
   12e80:	64 97       	sbiw	r28, 0x14	; 20
   12e82:	0f b6       	in	r0, 0x3f	; 63
   12e84:	f8 94       	cli
   12e86:	de bf       	out	0x3e, r29	; 62
   12e88:	0f be       	out	0x3f, r0	; 63
   12e8a:	cd bf       	out	0x3d, r28	; 61
		uart_print(1,1,strSend);
	 }
	 #endif

     //Normalize PrintIdleState
     if ((IsPrinting==True)&&(stPrintIdle!=piIdle)){
   12e8c:	80 91 ae 01 	lds	r24, 0x01AE
   12e90:	81 30       	cpi	r24, 0x01	; 1
   12e92:	31 f4       	brne	.+12     	; 0x12ea0 <PrintIdle+0x30>
   12e94:	80 91 09 02 	lds	r24, 0x0209
   12e98:	88 23       	and	r24, r24
   12e9a:	11 f0       	breq	.+4      	; 0x12ea0 <PrintIdle+0x30>
	     stPrintIdle=piIdle;
   12e9c:	10 92 09 02 	sts	0x0209, r1
	 }

     switch(stPrintIdle){
   12ea0:	80 91 09 02 	lds	r24, 0x0209
   12ea4:	e8 2f       	mov	r30, r24
   12ea6:	f0 e0       	ldi	r31, 0x00	; 0
   12ea8:	e8 31       	cpi	r30, 0x18	; 24
   12eaa:	f1 05       	cpc	r31, r1
   12eac:	08 f0       	brcs	.+2      	; 0x12eb0 <PrintIdle+0x40>
   12eae:	94 c7       	rjmp	.+3880   	; 0x13dd8 <PrintIdle+0xf68>
   12eb0:	e7 51       	subi	r30, 0x17	; 23
   12eb2:	ff 4f       	sbci	r31, 0xFF	; 255
   12eb4:	ee 0f       	add	r30, r30
   12eb6:	ff 1f       	adc	r31, r31
   12eb8:	05 90       	lpm	r0, Z+
   12eba:	f4 91       	lpm	r31, Z+
   12ebc:	e0 2d       	mov	r30, r0
   12ebe:	09 94       	ijmp
	 case piIdle:
	      if (IsPrinting==True){
   12ec0:	80 91 ae 01 	lds	r24, 0x01AE
   12ec4:	81 30       	cpi	r24, 0x01	; 1
   12ec6:	09 f0       	breq	.+2      	; 0x12eca <PrintIdle+0x5a>
   12ec8:	87 c7       	rjmp	.+3854   	; 0x13dd8 <PrintIdle+0xf68>
		      IsPrinting=False;
   12eca:	10 92 ae 01 	sts	0x01AE, r1
			  IsBusyIdlePrinting=True;
   12ece:	80 93 b4 01 	sts	0x01B4, r24
			  IsBusyPrint=False;
   12ed2:	10 92 b5 01 	sts	0x01B5, r1
			  iPrinted=0;
   12ed6:	10 92 fb 01 	sts	0x01FB, r1
			  PrintCopy=0;
   12eda:	10 92 fa 01 	sts	0x01FA, r1
		      stPrintIdle=piInit;
   12ede:	80 93 09 02 	sts	0x0209, r24
			  InitPrinter();
   12ee2:	0e 94 b5 45 	call	0x8b6a	; 0x8b6a <InitPrinter>
			  IsSignedField=False;
   12ee6:	10 92 02 02 	sts	0x0202, r1
   12eea:	76 c7       	rjmp	.+3820   	; 0x13dd8 <PrintIdle+0xf68>
			  }
	      break;
	 case piInit:
	      iHeader=0;
   12eec:	10 92 08 02 	sts	0x0208, r1
		  //CarriegeReturn();
          //PrintLogo
		  if (eeprom_read_byte(&DefPrintLogo)!=0){
   12ef0:	84 e3       	ldi	r24, 0x34	; 52
   12ef2:	90 e0       	ldi	r25, 0x00	; 0
   12ef4:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   12ef8:	88 23       	and	r24, r24
   12efa:	f1 f0       	breq	.+60     	; 0x12f38 <PrintIdle+0xc8>
		      PrintLogo();
   12efc:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <PrintLogo>
   12f00:	1b c0       	rjmp	.+54     	; 0x12f38 <PrintIdle+0xc8>
		  }

		  stPrintIdle=piLoadHeader;
	      break;
     case piLoadHeader:
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], sizeof(DefHeaderFooter[iHeader]));
   12f02:	60 91 08 02 	lds	r22, 0x0208
   12f06:	89 e2       	ldi	r24, 0x29	; 41
   12f08:	68 9f       	mul	r22, r24
   12f0a:	b0 01       	movw	r22, r0
   12f0c:	11 24       	eor	r1, r1
   12f0e:	63 5d       	subi	r22, 0xD3	; 211
   12f10:	7d 4f       	sbci	r23, 0xFD	; 253
   12f12:	82 ec       	ldi	r24, 0xC2	; 194
   12f14:	98 e0       	ldi	r25, 0x08	; 8
   12f16:	49 e2       	ldi	r20, 0x29	; 41
   12f18:	50 e0       	ldi	r21, 0x00	; 0
   12f1a:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  iHeader++;
   12f1e:	80 91 08 02 	lds	r24, 0x0208
   12f22:	8f 5f       	subi	r24, 0xFF	; 255
   12f24:	80 93 08 02 	sts	0x0208, r24
		  if (iHeader<6){
   12f28:	86 30       	cpi	r24, 0x06	; 6
   12f2a:	00 f5       	brcc	.+64     	; 0x12f6c <PrintIdle+0xfc>
		      if (SpaceOnly(strPrint)==True){
   12f2c:	82 ec       	ldi	r24, 0xC2	; 194
   12f2e:	98 e0       	ldi	r25, 0x08	; 8
   12f30:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   12f34:	81 30       	cpi	r24, 0x01	; 1
   12f36:	11 f4       	brne	.+4      	; 0x12f3c <PrintIdle+0xcc>
			      stPrintIdle=piLoadHeader;
   12f38:	82 e0       	ldi	r24, 0x02	; 2
   12f3a:	11 c7       	rjmp	.+3618   	; 0x13d5e <PrintIdle+0xeee>
				  }	      
			  else{
			      stPrintIdle=piPrintHeader;
   12f3c:	83 e0       	ldi	r24, 0x03	; 3
   12f3e:	80 93 09 02 	sts	0x0209, r24
			      iSend=0;
   12f42:	10 92 01 02 	sts	0x0201, r1
   12f46:	10 92 00 02 	sts	0x0200, r1
				  iLoop=0;
   12f4a:	10 92 fd 01 	sts	0x01FD, r1
   12f4e:	10 92 fc 01 	sts	0x01FC, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   12f52:	80 91 08 02 	lds	r24, 0x0208
   12f56:	81 30       	cpi	r24, 0x01	; 1
   12f58:	19 f4       	brne	.+6      	; 0x12f60 <PrintIdle+0xf0>
   12f5a:	0e 94 5d 46 	call	0x8cba	; 0x8cba <PrintDoubleHeight>
   12f5e:	3c c7       	rjmp	.+3704   	; 0x13dd8 <PrintIdle+0xf68>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   12f60:	82 30       	cpi	r24, 0x02	; 2
   12f62:	09 f0       	breq	.+2      	; 0x12f66 <PrintIdle+0xf6>
   12f64:	39 c7       	rjmp	.+3698   	; 0x13dd8 <PrintIdle+0xf68>
   12f66:	0e 94 47 46 	call	0x8c8e	; 0x8c8e <PrintNormalHeight>
   12f6a:	36 c7       	rjmp	.+3692   	; 0x13dd8 <PrintIdle+0xf68>
			   }
		  }else{stPrintIdle=piInitDuplicate; //stPrintIdle=piInitMessage;//
   12f6c:	84 e0       	ldi	r24, 0x04	; 4
   12f6e:	f7 c6       	rjmp	.+3566   	; 0x13d5e <PrintIdle+0xeee>
		        //else stPrintIdle=piInitMessage;
		  }
	      break;
	 case piPrintHeader:
		  if (iSend<40){
   12f70:	80 91 00 02 	lds	r24, 0x0200
   12f74:	90 91 01 02 	lds	r25, 0x0201
   12f78:	88 97       	sbiw	r24, 0x28	; 40
   12f7a:	68 f4       	brcc	.+26     	; 0x12f96 <PrintIdle+0x126>
		      iLoop++;
   12f7c:	80 91 fc 01 	lds	r24, 0x01FC
   12f80:	90 91 fd 01 	lds	r25, 0x01FD
   12f84:	01 96       	adiw	r24, 0x01	; 1
   12f86:	90 93 fd 01 	sts	0x01FD, r25
   12f8a:	80 93 fc 01 	sts	0x01FC, r24
			  if ((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   12f8e:	10 92 b8 01 	sts	0x01B8, r1
				 stPrintIdle=piCheckPrintStatusHeader;
   12f92:	8b e0       	ldi	r24, 0x0B	; 11
   12f94:	e4 c6       	rjmp	.+3528   	; 0x13d5e <PrintIdle+0xeee>
				 }
			  }
          else{ 
		     stPrintIdle=piLoadHeader;
   12f96:	82 e0       	ldi	r24, 0x02	; 2
   12f98:	79 c6       	rjmp	.+3314   	; 0x13c8c <PrintIdle+0xe1c>
			 CarriegeReturn();
		  }
	      break;
     case piCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   12f9a:	80 91 b5 01 	lds	r24, 0x01B5
   12f9e:	88 23       	and	r24, r24
   12fa0:	09 f0       	breq	.+2      	; 0x12fa4 <PrintIdle+0x134>
   12fa2:	d4 c6       	rjmp	.+3496   	; 0x13d4c <PrintIdle+0xedc>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12fa4:	e0 91 00 02 	lds	r30, 0x0200
   12fa8:	f0 91 01 02 	lds	r31, 0x0201
   12fac:	ee 53       	subi	r30, 0x3E	; 62
   12fae:	f7 4f       	sbci	r31, 0xF7	; 247
   12fb0:	61 e0       	ldi	r22, 0x01	; 1
   12fb2:	40 81       	ld	r20, Z
   12fb4:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   12fb8:	80 91 00 02 	lds	r24, 0x0200
   12fbc:	90 91 01 02 	lds	r25, 0x0201
   12fc0:	01 96       	adiw	r24, 0x01	; 1
   12fc2:	90 93 01 02 	sts	0x0201, r25
   12fc6:	80 93 00 02 	sts	0x0200, r24
		      stPrintIdle=piPrintHeader;
   12fca:	83 e0       	ldi	r24, 0x03	; 3
   12fcc:	bd c6       	rjmp	.+3450   	; 0x13d48 <PrintIdle+0xed8>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitDuplicate:
          if ((iPrinted>0)||(IsReprintTicket==True)){
   12fce:	80 91 fb 01 	lds	r24, 0x01FB
   12fd2:	88 23       	and	r24, r24
   12fd4:	21 f4       	brne	.+8      	; 0x12fde <PrintIdle+0x16e>
   12fd6:	80 91 7f 01 	lds	r24, 0x017F
   12fda:	81 30       	cpi	r24, 0x01	; 1
   12fdc:	a9 f4       	brne	.+42     	; 0x13008 <PrintIdle+0x198>
		      IsReprintTicket=False;
   12fde:	10 92 7f 01 	sts	0x017F, r1
		      CarriegeReturn(); 
   12fe2:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		      sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   12fe6:	00 d0       	rcall	.+0      	; 0x12fe8 <PrintIdle+0x178>
   12fe8:	00 d0       	rcall	.+0      	; 0x12fea <PrintIdle+0x17a>
   12fea:	82 ec       	ldi	r24, 0xC2	; 194
   12fec:	98 e0       	ldi	r25, 0x08	; 8
   12fee:	ad b7       	in	r26, 0x3d	; 61
   12ff0:	be b7       	in	r27, 0x3e	; 62
   12ff2:	12 96       	adiw	r26, 0x02	; 2
   12ff4:	9c 93       	st	X, r25
   12ff6:	8e 93       	st	-X, r24
   12ff8:	11 97       	sbiw	r26, 0x01	; 1
   12ffa:	8c e7       	ldi	r24, 0x7C	; 124
   12ffc:	9b e0       	ldi	r25, 0x0B	; 11
   12ffe:	14 96       	adiw	r26, 0x04	; 4
   13000:	9c 93       	st	X, r25
   13002:	8e 93       	st	-X, r24
   13004:	13 97       	sbiw	r26, 0x03	; 3
   13006:	0c c0       	rjmp	.+24     	; 0x13020 <PrintIdle+0x1b0>
		      }
          else{           sprintf_P(strPrint,PSTR(" "));
   13008:	00 d0       	rcall	.+0      	; 0x1300a <PrintIdle+0x19a>
   1300a:	00 d0       	rcall	.+0      	; 0x1300c <PrintIdle+0x19c>
   1300c:	82 ec       	ldi	r24, 0xC2	; 194
   1300e:	98 e0       	ldi	r25, 0x08	; 8
   13010:	ed b7       	in	r30, 0x3d	; 61
   13012:	fe b7       	in	r31, 0x3e	; 62
   13014:	92 83       	std	Z+2, r25	; 0x02
   13016:	81 83       	std	Z+1, r24	; 0x01
   13018:	8a e7       	ldi	r24, 0x7A	; 122
   1301a:	9b e0       	ldi	r25, 0x0B	; 11
   1301c:	94 83       	std	Z+4, r25	; 0x04
   1301e:	83 83       	std	Z+3, r24	; 0x03
   13020:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   13024:	0f 90       	pop	r0
   13026:	0f 90       	pop	r0
   13028:	0f 90       	pop	r0
   1302a:	0f 90       	pop	r0
		      }
		  iSend=0;
   1302c:	10 92 01 02 	sts	0x0201, r1
   13030:	10 92 00 02 	sts	0x0200, r1
		  iLoop=0;
   13034:	10 92 fd 01 	sts	0x01FD, r1
   13038:	10 92 fc 01 	sts	0x01FC, r1
		  LSend=strlen(strPrint);
   1303c:	e2 ec       	ldi	r30, 0xC2	; 194
   1303e:	f8 e0       	ldi	r31, 0x08	; 8
   13040:	01 90       	ld	r0, Z+
   13042:	00 20       	and	r0, r0
   13044:	e9 f7       	brne	.-6      	; 0x13040 <PrintIdle+0x1d0>
   13046:	31 97       	sbiw	r30, 0x01	; 1
   13048:	e2 5c       	subi	r30, 0xC2	; 194
   1304a:	f8 40       	sbci	r31, 0x08	; 8
   1304c:	f0 93 ff 01 	sts	0x01FF, r31
   13050:	e0 93 fe 01 	sts	0x01FE, r30
          stPrintIdle=piPrintDuplicate; 
   13054:	85 e0       	ldi	r24, 0x05	; 5
   13056:	83 c6       	rjmp	.+3334   	; 0x13d5e <PrintIdle+0xeee>
	      break;
     case piPrintDuplicate:
		  if (iSend<LSend){
   13058:	20 91 00 02 	lds	r18, 0x0200
   1305c:	30 91 01 02 	lds	r19, 0x0201
   13060:	80 91 fe 01 	lds	r24, 0x01FE
   13064:	90 91 ff 01 	lds	r25, 0x01FF
   13068:	28 17       	cp	r18, r24
   1306a:	39 07       	cpc	r19, r25
   1306c:	68 f4       	brcc	.+26     	; 0x13088 <PrintIdle+0x218>
		      iLoop++;
   1306e:	80 91 fc 01 	lds	r24, 0x01FC
   13072:	90 91 fd 01 	lds	r25, 0x01FD
   13076:	01 96       	adiw	r24, 0x01	; 1
   13078:	90 93 fd 01 	sts	0x01FD, r25
   1307c:	80 93 fc 01 	sts	0x01FC, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   13080:	10 92 b8 01 	sts	0x01B8, r1
                 stPrintIdle=piCheckPrintStatusDuplicate;
   13084:	86 e0       	ldi	r24, 0x06	; 6
   13086:	6b c6       	rjmp	.+3286   	; 0x13d5e <PrintIdle+0xeee>
				 }
			  }
          else {
		     iSend=0;
   13088:	10 92 01 02 	sts	0x0201, r1
   1308c:	10 92 00 02 	sts	0x0200, r1
		     stPrintIdle=piInitMessage;
   13090:	87 e0       	ldi	r24, 0x07	; 7
   13092:	65 c6       	rjmp	.+3274   	; 0x13d5e <PrintIdle+0xeee>
			 }
	      break;
     case piCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   13094:	80 91 b5 01 	lds	r24, 0x01B5
   13098:	88 23       	and	r24, r24
   1309a:	09 f0       	breq	.+2      	; 0x1309e <PrintIdle+0x22e>
   1309c:	57 c6       	rjmp	.+3246   	; 0x13d4c <PrintIdle+0xedc>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   1309e:	e0 91 00 02 	lds	r30, 0x0200
   130a2:	f0 91 01 02 	lds	r31, 0x0201
   130a6:	ee 53       	subi	r30, 0x3E	; 62
   130a8:	f7 4f       	sbci	r31, 0xF7	; 247
   130aa:	61 e0       	ldi	r22, 0x01	; 1
   130ac:	40 81       	ld	r20, Z
   130ae:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
   130b2:	84 ec       	ldi	r24, 0xC4	; 196
   130b4:	99 e0       	ldi	r25, 0x09	; 9
   130b6:	01 97       	sbiw	r24, 0x01	; 1
   130b8:	f1 f7       	brne	.-4      	; 0x130b6 <PrintIdle+0x246>
			  _delay_ms(10);
		      iSend++;
   130ba:	80 91 00 02 	lds	r24, 0x0200
   130be:	90 91 01 02 	lds	r25, 0x0201
   130c2:	01 96       	adiw	r24, 0x01	; 1
   130c4:	90 93 01 02 	sts	0x0201, r25
   130c8:	80 93 00 02 	sts	0x0200, r24
		      stPrintIdle=piPrintDuplicate;
   130cc:	85 e0       	ldi	r24, 0x05	; 5
   130ce:	3c c6       	rjmp	.+3192   	; 0x13d48 <PrintIdle+0xed8>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitMessage:
	      iSend=0;iLoop=0;
   130d0:	10 92 01 02 	sts	0x0201, r1
   130d4:	10 92 00 02 	sts	0x0200, r1
   130d8:	10 92 fd 01 	sts	0x01FD, r1
   130dc:	10 92 fc 01 	sts	0x01FC, r1
		  iMessage=0;
   130e0:	10 92 04 02 	sts	0x0204, r1
		  switch(MOPType){
   130e4:	80 91 ba 01 	lds	r24, 0x01BA
   130e8:	83 30       	cpi	r24, 0x03	; 3
   130ea:	81 f0       	breq	.+32     	; 0x1310c <PrintIdle+0x29c>
   130ec:	84 30       	cpi	r24, 0x04	; 4
   130ee:	28 f4       	brcc	.+10     	; 0x130fa <PrintIdle+0x28a>
   130f0:	81 30       	cpi	r24, 0x01	; 1
   130f2:	61 f0       	breq	.+24     	; 0x1310c <PrintIdle+0x29c>
   130f4:	82 30       	cpi	r24, 0x02	; 2
   130f6:	40 f4       	brcc	.+16     	; 0x13108 <PrintIdle+0x298>
   130f8:	10 c0       	rjmp	.+32     	; 0x1311a <PrintIdle+0x2aa>
   130fa:	88 30       	cpi	r24, 0x08	; 8
   130fc:	49 f0       	breq	.+18     	; 0x13110 <PrintIdle+0x2a0>
   130fe:	89 30       	cpi	r24, 0x09	; 9
   13100:	61 f0       	breq	.+24     	; 0x1311a <PrintIdle+0x2aa>
   13102:	87 30       	cpi	r24, 0x07	; 7
   13104:	51 f4       	brne	.+20     	; 0x1311a <PrintIdle+0x2aa>
   13106:	02 c0       	rjmp	.+4      	; 0x1310c <PrintIdle+0x29c>
		  case MOP_CASH:
		       MessageLine=10;
			   PrintCopy=1;
		       break;
          case MOP_CREDIT_CARD:
		       MessageLine=10;
   13108:	8a e0       	ldi	r24, 0x0A	; 10
   1310a:	03 c0       	rjmp	.+6      	; 0x13112 <PrintIdle+0x2a2>
          case MOP_LOCAL_ACCOUNT:
		       MessageLine=20;
			   PrintCopy=2;
		       break;
          case MOP_VOUCHER:
		       MessageLine=20;
   1310c:	84 e1       	ldi	r24, 0x14	; 20
   1310e:	01 c0       	rjmp	.+2      	; 0x13112 <PrintIdle+0x2a2>
			   PrintCopy=2;
		       break;
          case MOP_PUMP_TEST:
		       MessageLine=12;
   13110:	8c e0       	ldi	r24, 0x0C	; 12
   13112:	80 93 03 02 	sts	0x0203, r24
			   PrintCopy=2;
   13116:	82 e0       	ldi	r24, 0x02	; 2
   13118:	04 c0       	rjmp	.+8      	; 0x13122 <PrintIdle+0x2b2>
          case MOP_VOID_CARD:
		       MessageLine=10;
			   PrintCopy=1;
		       break;          
          default:
		       MessageLine=10;
   1311a:	8a e0       	ldi	r24, 0x0A	; 10
   1311c:	80 93 03 02 	sts	0x0203, r24
			   PrintCopy=1;
   13120:	81 e0       	ldi	r24, 0x01	; 1
   13122:	80 93 fa 01 	sts	0x01FA, r24
		       break; 
		  }
		  //LoyaltyDetection
          if ((strlen(strLoyCardID)>0)&&(SpaceOnly(strLoyCardID)==False)){
   13126:	80 91 ed 02 	lds	r24, 0x02ED
   1312a:	88 23       	and	r24, r24
   1312c:	49 f0       	breq	.+18     	; 0x13140 <PrintIdle+0x2d0>
   1312e:	8d ee       	ldi	r24, 0xED	; 237
   13130:	92 e0       	ldi	r25, 0x02	; 2
   13132:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   13136:	88 23       	and	r24, r24
   13138:	19 f4       	brne	.+6      	; 0x13140 <PrintIdle+0x2d0>
		       MessageLine=33;
   1313a:	81 e2       	ldi	r24, 0x21	; 33
   1313c:	80 93 03 02 	sts	0x0203, r24
		  }
          //stPrintIdle=piLoadMessage;
		  stPrintIdle=piFormatingMessage;
   13140:	88 e0       	ldi	r24, 0x08	; 8
   13142:	0d c6       	rjmp	.+3098   	; 0x13d5e <PrintIdle+0xeee>
	      break;
     case piFormatingMessage:
	      if (iPrinted==0){
   13144:	80 91 fb 01 	lds	r24, 0x01FB
   13148:	88 23       	and	r24, r24
   1314a:	09 f0       	breq	.+2      	; 0x1314e <PrintIdle+0x2de>
   1314c:	b6 c4       	rjmp	.+2412   	; 0x13aba <PrintIdle+0xc4a>

		      FormatDate(DATE_LONG_YEAR,strDate);
   1314e:	64 e7       	ldi	r22, 0x74	; 116
   13150:	77 e0       	ldi	r23, 0x07	; 7
   13152:	0e 94 01 25 	call	0x4a02	; 0x4a02 <FormatDate>
              RemZeroLead(strIslandID);
   13156:	8d ef       	ldi	r24, 0xFD	; 253
   13158:	98 e0       	ldi	r25, 0x08	; 8
   1315a:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
			  RemZeroLead(strFIP_ID);
   1315e:	8f eb       	ldi	r24, 0xBF	; 191
   13160:	97 e0       	ldi	r25, 0x07	; 7
   13162:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		      RemZeroLead(strPrice);              
   13166:	84 ea       	ldi	r24, 0xA4	; 164
   13168:	95 e0       	ldi	r25, 0x05	; 5
   1316a:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
              if (IFType==IT_SLAVE)
   1316e:	80 91 00 01 	lds	r24, 0x0100
   13172:	81 30       	cpi	r24, 0x01	; 1
   13174:	21 f4       	brne	.+8      	; 0x1317e <PrintIdle+0x30e>
			      RemZeroLead(strVolume);
   13176:	8b e7       	ldi	r24, 0x7B	; 123
   13178:	93 e0       	ldi	r25, 0x03	; 3
   1317a:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
              RemZeroLead(strAmount);
   1317e:	89 eb       	ldi	r24, 0xB9	; 185
   13180:	9b e0       	ldi	r25, 0x0B	; 11
   13182:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>

			  RemDecimal(strPrice);
   13186:	84 ea       	ldi	r24, 0xA4	; 164
   13188:	95 e0       	ldi	r25, 0x05	; 5
   1318a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <RemDecimal>
			  RemDecimal(strAmount);
   1318e:	89 eb       	ldi	r24, 0xB9	; 185
   13190:	9b e0       	ldi	r25, 0x0B	; 11
   13192:	0e 94 50 24 	call	0x48a0	; 0x48a0 <RemDecimal>
	  
			  FormatCurrency(strPrice);
   13196:	84 ea       	ldi	r24, 0xA4	; 164
   13198:	95 e0       	ldi	r25, 0x05	; 5
   1319a:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
			  FormatCurrency(strAmount);
   1319e:	89 eb       	ldi	r24, 0xB9	; 185
   131a0:	9b e0       	ldi	r25, 0x0B	; 11
   131a2:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
              if (IFType==IT_SLAVE){
   131a6:	80 91 00 01 	lds	r24, 0x0100
   131aa:	81 30       	cpi	r24, 0x01	; 1
   131ac:	09 f0       	breq	.+2      	; 0x131b0 <PrintIdle+0x340>
   131ae:	85 c4       	rjmp	.+2314   	; 0x13aba <PrintIdle+0xc4a>
		          RemSpaceLag(strCardID);
   131b0:	8f e8       	ldi	r24, 0x8F	; 143
   131b2:	9b e0       	ldi	r25, 0x0B	; 11
   131b4:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          RemSpaceLag(strCardHolder);
   131b8:	8a e2       	ldi	r24, 0x2A	; 42
   131ba:	93 e0       	ldi	r25, 0x03	; 3
   131bc:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          RemSpaceLag(strMOPName);
   131c0:	83 e8       	ldi	r24, 0x83	; 131
   131c2:	95 e0       	ldi	r25, 0x05	; 5
   131c4:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          RemSpaceLag(strLoyCardHolder);
   131c8:	8a ec       	ldi	r24, 0xCA	; 202
   131ca:	92 e0       	ldi	r25, 0x02	; 2
   131cc:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          RemSpaceLag(strCorporateID);
   131d0:	80 e1       	ldi	r24, 0x10	; 16
   131d2:	9c e0       	ldi	r25, 0x0C	; 12
   131d4:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          RemSpaceLag(strCorporateName);
   131d8:	83 ed       	ldi	r24, 0xD3	; 211
   131da:	93 e0       	ldi	r25, 0x03	; 3
   131dc:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          RemSpaceLag(strLoyRedeemPoints);
   131e0:	80 ea       	ldi	r24, 0xA0	; 160
   131e2:	93 e0       	ldi	r25, 0x03	; 3
   131e4:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          RemSpaceLag(strLoyCurrMonConsumeV);
   131e8:	83 ef       	ldi	r24, 0xF3	; 243
   131ea:	9b e0       	ldi	r25, 0x0B	; 11
   131ec:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
				  RemSpaceLag(strLoyCurrMonConsumeA);
   131f0:	84 e8       	ldi	r24, 0x84	; 132
   131f2:	93 e0       	ldi	r25, 0x03	; 3
   131f4:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		          FormatCurrency(strLoyCurrMonConsumeV);              
   131f8:	83 ef       	ldi	r24, 0xF3	; 243
   131fa:	9b e0       	ldi	r25, 0x0B	; 11
   131fc:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
		          FormatCurrency(strLoyCurrMonConsumeA);
   13200:	84 e8       	ldi	r24, 0x84	; 132
   13202:	93 e0       	ldi	r25, 0x03	; 3
   13204:	0e 94 20 33 	call	0x6640	; 0x6640 <FormatCurrency>
   13208:	58 c4       	rjmp	.+2224   	; 0x13aba <PrintIdle+0xc4a>
			   }
		  }
          stPrintIdle=piLoadMessage;
	      break;
     case piLoadMessage:
	      switch(iMessage){
   1320a:	80 91 04 02 	lds	r24, 0x0204
   1320e:	e8 2f       	mov	r30, r24
   13210:	f0 e0       	ldi	r31, 0x00	; 0
   13212:	e5 32       	cpi	r30, 0x25	; 37
   13214:	f1 05       	cpc	r31, r1
   13216:	08 f0       	brcs	.+2      	; 0x1321a <PrintIdle+0x3aa>
   13218:	13 c4       	rjmp	.+2086   	; 0x13a40 <PrintIdle+0xbd0>
   1321a:	ef 5f       	subi	r30, 0xFF	; 255
   1321c:	fe 4f       	sbci	r31, 0xFE	; 254
   1321e:	22 ec       	ldi	r18, 0xC2	; 194
   13220:	e2 2e       	mov	r14, r18
   13222:	28 e0       	ldi	r18, 0x08	; 8
   13224:	f2 2e       	mov	r15, r18
   13226:	ee 0f       	add	r30, r30
   13228:	ff 1f       	adc	r31, r31
   1322a:	05 90       	lpm	r0, Z+
   1322c:	f4 91       	lpm	r31, Z+
   1322e:	e0 2d       	mov	r30, r0
   13230:	09 94       	ijmp
		  case 0:
		       CarriegeReturn();
   13232:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Shift: %s  No.Trans: %s "),strShift,strTranNo);
   13236:	2d b7       	in	r18, 0x3d	; 61
   13238:	3e b7       	in	r19, 0x3e	; 62
   1323a:	28 50       	subi	r18, 0x08	; 8
   1323c:	30 40       	sbci	r19, 0x00	; 0
   1323e:	0f b6       	in	r0, 0x3f	; 63
   13240:	f8 94       	cli
   13242:	3e bf       	out	0x3e, r19	; 62
   13244:	0f be       	out	0x3f, r0	; 63
   13246:	2d bf       	out	0x3d, r18	; 61
   13248:	ed b7       	in	r30, 0x3d	; 61
   1324a:	fe b7       	in	r31, 0x3e	; 62
   1324c:	31 96       	adiw	r30, 0x01	; 1
   1324e:	ad b7       	in	r26, 0x3d	; 61
   13250:	be b7       	in	r27, 0x3e	; 62
   13252:	12 96       	adiw	r26, 0x02	; 2
   13254:	fc 92       	st	X, r15
   13256:	ee 92       	st	-X, r14
   13258:	11 97       	sbiw	r26, 0x01	; 1
   1325a:	8b e5       	ldi	r24, 0x5B	; 91
   1325c:	9b e0       	ldi	r25, 0x0B	; 11
   1325e:	93 83       	std	Z+3, r25	; 0x03
   13260:	82 83       	std	Z+2, r24	; 0x02
   13262:	8e e6       	ldi	r24, 0x6E	; 110
   13264:	9c e0       	ldi	r25, 0x0C	; 12
   13266:	95 83       	std	Z+5, r25	; 0x05
   13268:	84 83       	std	Z+4, r24	; 0x04
   1326a:	8d e8       	ldi	r24, 0x8D	; 141
   1326c:	9c e0       	ldi	r25, 0x0C	; 12
   1326e:	1e c0       	rjmp	.+60     	; 0x132ac <PrintIdle+0x43c>
		       break;
		  case 1:
		       //FormatDate(strDate);
			   CarriegeReturn();
   13270:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Waktu: %s %s "),strDate,strTime);
   13274:	2d b7       	in	r18, 0x3d	; 61
   13276:	3e b7       	in	r19, 0x3e	; 62
   13278:	28 50       	subi	r18, 0x08	; 8
   1327a:	30 40       	sbci	r19, 0x00	; 0
   1327c:	0f b6       	in	r0, 0x3f	; 63
   1327e:	f8 94       	cli
   13280:	3e bf       	out	0x3e, r19	; 62
   13282:	0f be       	out	0x3f, r0	; 63
   13284:	2d bf       	out	0x3d, r18	; 61
   13286:	ed b7       	in	r30, 0x3d	; 61
   13288:	fe b7       	in	r31, 0x3e	; 62
   1328a:	31 96       	adiw	r30, 0x01	; 1
   1328c:	ad b7       	in	r26, 0x3d	; 61
   1328e:	be b7       	in	r27, 0x3e	; 62
   13290:	12 96       	adiw	r26, 0x02	; 2
   13292:	fc 92       	st	X, r15
   13294:	ee 92       	st	-X, r14
   13296:	11 97       	sbiw	r26, 0x01	; 1
   13298:	87 e4       	ldi	r24, 0x47	; 71
   1329a:	9b e0       	ldi	r25, 0x0B	; 11
   1329c:	93 83       	std	Z+3, r25	; 0x03
   1329e:	82 83       	std	Z+2, r24	; 0x02
   132a0:	84 e7       	ldi	r24, 0x74	; 116
   132a2:	97 e0       	ldi	r25, 0x07	; 7
   132a4:	95 83       	std	Z+5, r25	; 0x05
   132a6:	84 83       	std	Z+4, r24	; 0x04
   132a8:	83 e5       	ldi	r24, 0x53	; 83
   132aa:	93 e0       	ldi	r25, 0x03	; 3
   132ac:	97 83       	std	Z+7, r25	; 0x07
   132ae:	86 83       	std	Z+6, r24	; 0x06
   132b0:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   132b4:	ed b7       	in	r30, 0x3d	; 61
   132b6:	fe b7       	in	r31, 0x3e	; 62
   132b8:	38 96       	adiw	r30, 0x08	; 8
   132ba:	a6 c3       	rjmp	.+1868   	; 0x13a08 <PrintIdle+0xb98>
		       break;
		  case 2:
		       CarriegeReturn();
   132bc:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   132c0:	00 d0       	rcall	.+0      	; 0x132c2 <PrintIdle+0x452>
   132c2:	00 d0       	rcall	.+0      	; 0x132c4 <PrintIdle+0x454>
   132c4:	ad b7       	in	r26, 0x3d	; 61
   132c6:	be b7       	in	r27, 0x3e	; 62
   132c8:	12 96       	adiw	r26, 0x02	; 2
   132ca:	fc 92       	st	X, r15
   132cc:	ee 92       	st	-X, r14
   132ce:	11 97       	sbiw	r26, 0x01	; 1
   132d0:	84 e2       	ldi	r24, 0x24	; 36
   132d2:	9b e0       	ldi	r25, 0x0B	; 11
   132d4:	ab c3       	rjmp	.+1878   	; 0x13a2c <PrintIdle+0xbbc>
		       break;
		  case 3:
		       CarriegeReturn();
   132d6:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			   //RemZeroLead(strIslandID);
			   //RemZeroLead(strFIP_ID);
			   iPumpID=atoi(strFIP_ID);
   132da:	0f eb       	ldi	r16, 0xBF	; 191
   132dc:	17 e0       	ldi	r17, 0x07	; 7
   132de:	c8 01       	movw	r24, r16
   132e0:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
   132e4:	80 93 f9 01 	sts	0x01F9, r24
		       sprintf_P(strPrint,PSTR("      Pulau/Pompa : [%s]-%s"),strIslandID,strFIP_ID);
   132e8:	ed b7       	in	r30, 0x3d	; 61
   132ea:	fe b7       	in	r31, 0x3e	; 62
   132ec:	38 97       	sbiw	r30, 0x08	; 8
   132ee:	0f b6       	in	r0, 0x3f	; 63
   132f0:	f8 94       	cli
   132f2:	fe bf       	out	0x3e, r31	; 62
   132f4:	0f be       	out	0x3f, r0	; 63
   132f6:	ed bf       	out	0x3d, r30	; 61
   132f8:	31 96       	adiw	r30, 0x01	; 1
   132fa:	ad b7       	in	r26, 0x3d	; 61
   132fc:	be b7       	in	r27, 0x3e	; 62
   132fe:	12 96       	adiw	r26, 0x02	; 2
   13300:	fc 92       	st	X, r15
   13302:	ee 92       	st	-X, r14
   13304:	11 97       	sbiw	r26, 0x01	; 1
   13306:	88 e0       	ldi	r24, 0x08	; 8
   13308:	9b e0       	ldi	r25, 0x0B	; 11
   1330a:	93 83       	std	Z+3, r25	; 0x03
   1330c:	82 83       	std	Z+2, r24	; 0x02
   1330e:	8d ef       	ldi	r24, 0xFD	; 253
   13310:	98 e0       	ldi	r25, 0x08	; 8
   13312:	95 83       	std	Z+5, r25	; 0x05
   13314:	84 83       	std	Z+4, r24	; 0x04
   13316:	17 83       	std	Z+7, r17	; 0x07
   13318:	06 83       	std	Z+6, r16	; 0x06
   1331a:	ca cf       	rjmp	.-108    	; 0x132b0 <PrintIdle+0x440>
		       break;
		  case 4:
		       CarriegeReturn();
   1331c:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Produk      : %s"),strDescription);
   13320:	00 d0       	rcall	.+0      	; 0x13322 <PrintIdle+0x4b2>
   13322:	00 d0       	rcall	.+0      	; 0x13324 <PrintIdle+0x4b4>
   13324:	00 d0       	rcall	.+0      	; 0x13326 <PrintIdle+0x4b6>
   13326:	ed b7       	in	r30, 0x3d	; 61
   13328:	fe b7       	in	r31, 0x3e	; 62
   1332a:	31 96       	adiw	r30, 0x01	; 1
   1332c:	ad b7       	in	r26, 0x3d	; 61
   1332e:	be b7       	in	r27, 0x3e	; 62
   13330:	12 96       	adiw	r26, 0x02	; 2
   13332:	fc 92       	st	X, r15
   13334:	ee 92       	st	-X, r14
   13336:	11 97       	sbiw	r26, 0x01	; 1
   13338:	81 ef       	ldi	r24, 0xF1	; 241
   1333a:	9a e0       	ldi	r25, 0x0A	; 10
   1333c:	93 83       	std	Z+3, r25	; 0x03
   1333e:	82 83       	std	Z+2, r24	; 0x02
   13340:	82 e1       	ldi	r24, 0x12	; 18
   13342:	98 e0       	ldi	r25, 0x08	; 8
   13344:	5a c3       	rjmp	.+1716   	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 5:
		       //RemZeroLead(strPrice);
               //FormatCurrency(strPrice);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   13346:	87 ec       	ldi	r24, 0xC7	; 199
   13348:	93 e0       	ldi	r25, 0x03	; 3
   1334a:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   1334e:	92 ec       	ldi	r25, 0xC2	; 194
   13350:	e9 2e       	mov	r14, r25
   13352:	98 e0       	ldi	r25, 0x08	; 8
   13354:	f9 2e       	mov	r15, r25
   13356:	81 30       	cpi	r24, 0x01	; 1
   13358:	a9 f4       	brne	.+42     	; 0x13384 <PrintIdle+0x514>
			   	   CarriegeReturn();
   1335a:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Harga/L     : Rp.%s"),strPrice);
   1335e:	00 d0       	rcall	.+0      	; 0x13360 <PrintIdle+0x4f0>
   13360:	00 d0       	rcall	.+0      	; 0x13362 <PrintIdle+0x4f2>
   13362:	00 d0       	rcall	.+0      	; 0x13364 <PrintIdle+0x4f4>
   13364:	ed b7       	in	r30, 0x3d	; 61
   13366:	fe b7       	in	r31, 0x3e	; 62
   13368:	31 96       	adiw	r30, 0x01	; 1
   1336a:	ad b7       	in	r26, 0x3d	; 61
   1336c:	be b7       	in	r27, 0x3e	; 62
   1336e:	12 96       	adiw	r26, 0x02	; 2
   13370:	fc 92       	st	X, r15
   13372:	ee 92       	st	-X, r14
   13374:	11 97       	sbiw	r26, 0x01	; 1
   13376:	87 ed       	ldi	r24, 0xD7	; 215
   13378:	9a e0       	ldi	r25, 0x0A	; 10
   1337a:	93 83       	std	Z+3, r25	; 0x03
   1337c:	82 83       	std	Z+2, r24	; 0x02
   1337e:	84 ea       	ldi	r24, 0xA4	; 164
   13380:	95 e0       	ldi	r25, 0x05	; 5
   13382:	3b c3       	rjmp	.+1654   	; 0x139fa <PrintIdle+0xb8a>
			   }else sprintf_P(strPrint,PSTR(""));
   13384:	00 d0       	rcall	.+0      	; 0x13386 <PrintIdle+0x516>
   13386:	00 d0       	rcall	.+0      	; 0x13388 <PrintIdle+0x518>
   13388:	ad b7       	in	r26, 0x3d	; 61
   1338a:	be b7       	in	r27, 0x3e	; 62
   1338c:	12 96       	adiw	r26, 0x02	; 2
   1338e:	fc 92       	st	X, r15
   13390:	ee 92       	st	-X, r14
   13392:	11 97       	sbiw	r26, 0x01	; 1
   13394:	86 ed       	ldi	r24, 0xD6	; 214
   13396:	9a e0       	ldi	r25, 0x0A	; 10
   13398:	49 c3       	rjmp	.+1682   	; 0x13a2c <PrintIdle+0xbbc>

		       break;
		  case 6:
		       //RemZeroLead(strVolume);
		       CarriegeReturn();
   1339a:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Jml Liter   : %s L"),strVolume);
   1339e:	00 d0       	rcall	.+0      	; 0x133a0 <PrintIdle+0x530>
   133a0:	00 d0       	rcall	.+0      	; 0x133a2 <PrintIdle+0x532>
   133a2:	00 d0       	rcall	.+0      	; 0x133a4 <PrintIdle+0x534>
   133a4:	ed b7       	in	r30, 0x3d	; 61
   133a6:	fe b7       	in	r31, 0x3e	; 62
   133a8:	31 96       	adiw	r30, 0x01	; 1
   133aa:	ad b7       	in	r26, 0x3d	; 61
   133ac:	be b7       	in	r27, 0x3e	; 62
   133ae:	12 96       	adiw	r26, 0x02	; 2
   133b0:	fc 92       	st	X, r15
   133b2:	ee 92       	st	-X, r14
   133b4:	11 97       	sbiw	r26, 0x01	; 1
   133b6:	8d eb       	ldi	r24, 0xBD	; 189
   133b8:	9a e0       	ldi	r25, 0x0A	; 10
   133ba:	93 83       	std	Z+3, r25	; 0x03
   133bc:	82 83       	std	Z+2, r24	; 0x02
   133be:	8b e7       	ldi	r24, 0x7B	; 123
   133c0:	93 e0       	ldi	r25, 0x03	; 3
   133c2:	1b c3       	rjmp	.+1590   	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 7:
		       //RemZeroLead(strAmount);		       
			   //FormatCurrency(strAmount);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   133c4:	87 ec       	ldi	r24, 0xC7	; 199
   133c6:	93 e0       	ldi	r25, 0x03	; 3
   133c8:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   133cc:	02 ec       	ldi	r16, 0xC2	; 194
   133ce:	e0 2e       	mov	r14, r16
   133d0:	08 e0       	ldi	r16, 0x08	; 8
   133d2:	f0 2e       	mov	r15, r16
   133d4:	81 30       	cpi	r24, 0x01	; 1
   133d6:	a9 f4       	brne	.+42     	; 0x13402 <PrintIdle+0x592>
			   	   CarriegeReturn();
   133d8:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Jml Rupiah  : Rp.%s"),strAmount);
   133dc:	00 d0       	rcall	.+0      	; 0x133de <PrintIdle+0x56e>
   133de:	00 d0       	rcall	.+0      	; 0x133e0 <PrintIdle+0x570>
   133e0:	00 d0       	rcall	.+0      	; 0x133e2 <PrintIdle+0x572>
   133e2:	ed b7       	in	r30, 0x3d	; 61
   133e4:	fe b7       	in	r31, 0x3e	; 62
   133e6:	31 96       	adiw	r30, 0x01	; 1
   133e8:	ad b7       	in	r26, 0x3d	; 61
   133ea:	be b7       	in	r27, 0x3e	; 62
   133ec:	12 96       	adiw	r26, 0x02	; 2
   133ee:	fc 92       	st	X, r15
   133f0:	ee 92       	st	-X, r14
   133f2:	11 97       	sbiw	r26, 0x01	; 1
   133f4:	83 ea       	ldi	r24, 0xA3	; 163
   133f6:	9a e0       	ldi	r25, 0x0A	; 10
   133f8:	93 83       	std	Z+3, r25	; 0x03
   133fa:	82 83       	std	Z+2, r24	; 0x02
   133fc:	89 eb       	ldi	r24, 0xB9	; 185
   133fe:	9b e0       	ldi	r25, 0x0B	; 11
   13400:	fc c2       	rjmp	.+1528   	; 0x139fa <PrintIdle+0xb8a>
			   }else sprintf_P(strPrint,PSTR(""));
   13402:	00 d0       	rcall	.+0      	; 0x13404 <PrintIdle+0x594>
   13404:	00 d0       	rcall	.+0      	; 0x13406 <PrintIdle+0x596>
   13406:	ad b7       	in	r26, 0x3d	; 61
   13408:	be b7       	in	r27, 0x3e	; 62
   1340a:	12 96       	adiw	r26, 0x02	; 2
   1340c:	fc 92       	st	X, r15
   1340e:	ee 92       	st	-X, r14
   13410:	11 97       	sbiw	r26, 0x01	; 1
   13412:	82 ea       	ldi	r24, 0xA2	; 162
   13414:	9a e0       	ldi	r25, 0x0A	; 10
   13416:	0a c3       	rjmp	.+1556   	; 0x13a2c <PrintIdle+0xbbc>

		       break;
		  case 8:
		       if ((strlen(strLicPlate)>0)&&(SpaceOnly(strLicPlate)==False)){
   13418:	00 e0       	ldi	r16, 0x00	; 0
   1341a:	19 e0       	ldi	r17, 0x09	; 9
   1341c:	80 91 00 09 	lds	r24, 0x0900
   13420:	88 23       	and	r24, r24
   13422:	09 f4       	brne	.+2      	; 0x13426 <PrintIdle+0x5b6>
   13424:	1e c2       	rjmp	.+1084   	; 0x13862 <PrintIdle+0x9f2>
   13426:	c8 01       	movw	r24, r16
   13428:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   1342c:	88 23       	and	r24, r24
   1342e:	09 f0       	breq	.+2      	; 0x13432 <PrintIdle+0x5c2>
   13430:	18 c2       	rjmp	.+1072   	; 0x13862 <PrintIdle+0x9f2>
			       CarriegeReturn();
   13432:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      No.Polisi   : %s"),strLicPlate);
   13436:	00 d0       	rcall	.+0      	; 0x13438 <PrintIdle+0x5c8>
   13438:	00 d0       	rcall	.+0      	; 0x1343a <PrintIdle+0x5ca>
   1343a:	00 d0       	rcall	.+0      	; 0x1343c <PrintIdle+0x5cc>
   1343c:	ed b7       	in	r30, 0x3d	; 61
   1343e:	fe b7       	in	r31, 0x3e	; 62
   13440:	31 96       	adiw	r30, 0x01	; 1
   13442:	82 ec       	ldi	r24, 0xC2	; 194
   13444:	98 e0       	ldi	r25, 0x08	; 8
   13446:	ad b7       	in	r26, 0x3d	; 61
   13448:	be b7       	in	r27, 0x3e	; 62
   1344a:	12 96       	adiw	r26, 0x02	; 2
   1344c:	9c 93       	st	X, r25
   1344e:	8e 93       	st	-X, r24
   13450:	11 97       	sbiw	r26, 0x01	; 1
   13452:	8b e8       	ldi	r24, 0x8B	; 139
   13454:	9a e0       	ldi	r25, 0x0A	; 10
   13456:	1f c0       	rjmp	.+62     	; 0x13496 <PrintIdle+0x626>
                   ClearMem(strLicPlate);
				   }
               else ClearMem(strPrint);
		       break;
		  case 9:
		       if ((strlen(strOdometer)>0)&&(SpaceOnly(strOdometer)==False)){
   13458:	09 ec       	ldi	r16, 0xC9	; 201
   1345a:	13 e0       	ldi	r17, 0x03	; 3
   1345c:	80 91 c9 03 	lds	r24, 0x03C9
   13460:	88 23       	and	r24, r24
   13462:	09 f4       	brne	.+2      	; 0x13466 <PrintIdle+0x5f6>
   13464:	fe c1       	rjmp	.+1020   	; 0x13862 <PrintIdle+0x9f2>
   13466:	c8 01       	movw	r24, r16
   13468:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   1346c:	88 23       	and	r24, r24
   1346e:	09 f0       	breq	.+2      	; 0x13472 <PrintIdle+0x602>
   13470:	f8 c1       	rjmp	.+1008   	; 0x13862 <PrintIdle+0x9f2>
			       CarriegeReturn();
   13472:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("      Odometer    : %s"),strOdometer);
   13476:	00 d0       	rcall	.+0      	; 0x13478 <PrintIdle+0x608>
   13478:	00 d0       	rcall	.+0      	; 0x1347a <PrintIdle+0x60a>
   1347a:	00 d0       	rcall	.+0      	; 0x1347c <PrintIdle+0x60c>
   1347c:	ed b7       	in	r30, 0x3d	; 61
   1347e:	fe b7       	in	r31, 0x3e	; 62
   13480:	31 96       	adiw	r30, 0x01	; 1
   13482:	82 ec       	ldi	r24, 0xC2	; 194
   13484:	98 e0       	ldi	r25, 0x08	; 8
   13486:	ad b7       	in	r26, 0x3d	; 61
   13488:	be b7       	in	r27, 0x3e	; 62
   1348a:	12 96       	adiw	r26, 0x02	; 2
   1348c:	9c 93       	st	X, r25
   1348e:	8e 93       	st	-X, r24
   13490:	11 97       	sbiw	r26, 0x01	; 1
   13492:	84 e7       	ldi	r24, 0x74	; 116
   13494:	9a e0       	ldi	r25, 0x0A	; 10
   13496:	93 83       	std	Z+3, r25	; 0x03
   13498:	82 83       	std	Z+2, r24	; 0x02
   1349a:	15 83       	std	Z+5, r17	; 0x05
   1349c:	04 83       	std	Z+4, r16	; 0x04
   1349e:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				   ClearMem(strOdometer);
   134a2:	ed b7       	in	r30, 0x3d	; 61
   134a4:	fe b7       	in	r31, 0x3e	; 62
   134a6:	36 96       	adiw	r30, 0x06	; 6
   134a8:	0f b6       	in	r0, 0x3f	; 63
   134aa:	f8 94       	cli
   134ac:	fe bf       	out	0x3e, r31	; 62
   134ae:	0f be       	out	0x3f, r0	; 63
   134b0:	ed bf       	out	0x3d, r30	; 61
   134b2:	c8 01       	movw	r24, r16
   134b4:	0e 94 61 a6 	call	0x14cc2	; 0x14cc2 <ClearMem>
   134b8:	c3 c2       	rjmp	.+1414   	; 0x13a40 <PrintIdle+0xbd0>
			   }else ClearMem(strPrint);
		       break;
		  case 10:
		       CarriegeReturn();
   134ba:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   134be:	00 d0       	rcall	.+0      	; 0x134c0 <PrintIdle+0x650>
   134c0:	00 d0       	rcall	.+0      	; 0x134c2 <PrintIdle+0x652>
   134c2:	ad b7       	in	r26, 0x3d	; 61
   134c4:	be b7       	in	r27, 0x3e	; 62
   134c6:	12 96       	adiw	r26, 0x02	; 2
   134c8:	fc 92       	st	X, r15
   134ca:	ee 92       	st	-X, r14
   134cc:	11 97       	sbiw	r26, 0x01	; 1
   134ce:	81 e5       	ldi	r24, 0x51	; 81
   134d0:	9a e0       	ldi	r25, 0x0A	; 10
   134d2:	ac c2       	rjmp	.+1368   	; 0x13a2c <PrintIdle+0xbbc>
		       break;
          //ChangeMOPPrint
		  case 11:
			   if ((MOPType==MOP_LOCAL_ACCOUNT)||(MOPType==MOP_DEBIT_CARD)||(MOPType==MOP_LOYALTY_LOCAL_ACCOUNT)){
   134d4:	80 91 ba 01 	lds	r24, 0x01BA
   134d8:	81 30       	cpi	r24, 0x01	; 1
   134da:	21 f0       	breq	.+8      	; 0x134e4 <PrintIdle+0x674>
   134dc:	83 30       	cpi	r24, 0x03	; 3
   134de:	11 f0       	breq	.+4      	; 0x134e4 <PrintIdle+0x674>
   134e0:	86 30       	cpi	r24, 0x06	; 6
   134e2:	b9 f4       	brne	.+46     	; 0x13512 <PrintIdle+0x6a2>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   134e4:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Kartu ID : %s"),strCardID);
   134e8:	00 d0       	rcall	.+0      	; 0x134ea <PrintIdle+0x67a>
   134ea:	00 d0       	rcall	.+0      	; 0x134ec <PrintIdle+0x67c>
   134ec:	00 d0       	rcall	.+0      	; 0x134ee <PrintIdle+0x67e>
   134ee:	ed b7       	in	r30, 0x3d	; 61
   134f0:	fe b7       	in	r31, 0x3e	; 62
   134f2:	31 96       	adiw	r30, 0x01	; 1
   134f4:	82 ec       	ldi	r24, 0xC2	; 194
   134f6:	98 e0       	ldi	r25, 0x08	; 8
   134f8:	ad b7       	in	r26, 0x3d	; 61
   134fa:	be b7       	in	r27, 0x3e	; 62
   134fc:	12 96       	adiw	r26, 0x02	; 2
   134fe:	9c 93       	st	X, r25
   13500:	8e 93       	st	-X, r24
   13502:	11 97       	sbiw	r26, 0x01	; 1
   13504:	8f e3       	ldi	r24, 0x3F	; 63
   13506:	9a e0       	ldi	r25, 0x0A	; 10
   13508:	93 83       	std	Z+3, r25	; 0x03
   1350a:	82 83       	std	Z+2, r24	; 0x02
   1350c:	8f e8       	ldi	r24, 0x8F	; 143
   1350e:	9b e0       	ldi	r25, 0x0B	; 11
   13510:	18 c0       	rjmp	.+48     	; 0x13542 <PrintIdle+0x6d2>
				   IsSignedField=True;
				   }
	           else
			   if (MOPType==MOP_VOUCHER){
   13512:	87 30       	cpi	r24, 0x07	; 7
   13514:	f1 f4       	brne	.+60     	; 0x13552 <PrintIdle+0x6e2>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   13516:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Voucher No: %s"),strVoucherNum);
   1351a:	00 d0       	rcall	.+0      	; 0x1351c <PrintIdle+0x6ac>
   1351c:	00 d0       	rcall	.+0      	; 0x1351e <PrintIdle+0x6ae>
   1351e:	00 d0       	rcall	.+0      	; 0x13520 <PrintIdle+0x6b0>
   13520:	ed b7       	in	r30, 0x3d	; 61
   13522:	fe b7       	in	r31, 0x3e	; 62
   13524:	31 96       	adiw	r30, 0x01	; 1
   13526:	82 ec       	ldi	r24, 0xC2	; 194
   13528:	98 e0       	ldi	r25, 0x08	; 8
   1352a:	ad b7       	in	r26, 0x3d	; 61
   1352c:	be b7       	in	r27, 0x3e	; 62
   1352e:	12 96       	adiw	r26, 0x02	; 2
   13530:	9c 93       	st	X, r25
   13532:	8e 93       	st	-X, r24
   13534:	11 97       	sbiw	r26, 0x01	; 1
   13536:	8c e2       	ldi	r24, 0x2C	; 44
   13538:	9a e0       	ldi	r25, 0x0A	; 10
   1353a:	93 83       	std	Z+3, r25	; 0x03
   1353c:	82 83       	std	Z+2, r24	; 0x02
   1353e:	82 e4       	ldi	r24, 0x42	; 66
   13540:	9c e0       	ldi	r25, 0x0C	; 12
   13542:	95 83       	std	Z+5, r25	; 0x05
   13544:	84 83       	std	Z+4, r24	; 0x04
   13546:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				   IsSignedField=True;
   1354a:	81 e0       	ldi	r24, 0x01	; 1
   1354c:	80 93 02 02 	sts	0x0202, r24
   13550:	58 c2       	rjmp	.+1200   	; 0x13a02 <PrintIdle+0xb92>
   13552:	12 ec       	ldi	r17, 0xC2	; 194
   13554:	e1 2e       	mov	r14, r17
   13556:	18 e0       	ldi	r17, 0x08	; 8
   13558:	f1 2e       	mov	r15, r17
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   1355a:	88 30       	cpi	r24, 0x08	; 8
   1355c:	09 f0       	breq	.+2      	; 0x13560 <PrintIdle+0x6f0>
   1355e:	0a c1       	rjmp	.+532    	; 0x13774 <PrintIdle+0x904>
			       CarriegeReturn();
   13560:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("          *** PUMP TEST ***       "));
   13564:	00 d0       	rcall	.+0      	; 0x13566 <PrintIdle+0x6f6>
   13566:	00 d0       	rcall	.+0      	; 0x13568 <PrintIdle+0x6f8>
   13568:	ad b7       	in	r26, 0x3d	; 61
   1356a:	be b7       	in	r27, 0x3e	; 62
   1356c:	12 96       	adiw	r26, 0x02	; 2
   1356e:	fc 92       	st	X, r15
   13570:	ee 92       	st	-X, r14
   13572:	11 97       	sbiw	r26, 0x01	; 1
   13574:	89 e0       	ldi	r24, 0x09	; 9
   13576:	9a e0       	ldi	r25, 0x0A	; 10
   13578:	14 96       	adiw	r26, 0x04	; 4
   1357a:	9c 93       	st	X, r25
   1357c:	8e 93       	st	-X, r24
   1357e:	13 97       	sbiw	r26, 0x03	; 3
   13580:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
				   IsSignedField=False;
   13584:	10 92 02 02 	sts	0x0202, r1
   13588:	57 c2       	rjmp	.+1198   	; 0x13a38 <PrintIdle+0xbc8>
				   }
               else ClearMem(strPrint);
		       break;
          case 12:
			   if (MOPType==MOP_LOCAL_ACCOUNT) {
   1358a:	80 91 ba 01 	lds	r24, 0x01BA
   1358e:	81 30       	cpi	r24, 0x01	; 1
   13590:	99 f4       	brne	.+38     	; 0x135b8 <PrintIdle+0x748>
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   13592:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Nama     : %s"),strCardHolder);
   13596:	00 d0       	rcall	.+0      	; 0x13598 <PrintIdle+0x728>
   13598:	00 d0       	rcall	.+0      	; 0x1359a <PrintIdle+0x72a>
   1359a:	00 d0       	rcall	.+0      	; 0x1359c <PrintIdle+0x72c>
   1359c:	ed b7       	in	r30, 0x3d	; 61
   1359e:	fe b7       	in	r31, 0x3e	; 62
   135a0:	31 96       	adiw	r30, 0x01	; 1
   135a2:	82 ec       	ldi	r24, 0xC2	; 194
   135a4:	98 e0       	ldi	r25, 0x08	; 8
   135a6:	ad b7       	in	r26, 0x3d	; 61
   135a8:	be b7       	in	r27, 0x3e	; 62
   135aa:	12 96       	adiw	r26, 0x02	; 2
   135ac:	9c 93       	st	X, r25
   135ae:	8e 93       	st	-X, r24
   135b0:	11 97       	sbiw	r26, 0x01	; 1
   135b2:	87 ef       	ldi	r24, 0xF7	; 247
   135b4:	99 e0       	ldi	r25, 0x09	; 9
   135b6:	3a c0       	rjmp	.+116    	; 0x1362c <PrintIdle+0x7bc>
				   }
               else 
               if (MOPType==MOP_DEBIT_CARD) {//EDCApprovalCode
   135b8:	83 30       	cpi	r24, 0x03	; 3
   135ba:	e9 f5       	brne	.+122    	; 0x13636 <PrintIdle+0x7c6>
			       if (IsPrintApprovalCode==True){
   135bc:	80 91 9c 01 	lds	r24, 0x019C
   135c0:	81 30       	cpi	r24, 0x01	; 1
   135c2:	11 f5       	brne	.+68     	; 0x13608 <PrintIdle+0x798>
				       IsPrintApprovalCode=False;
   135c4:	10 92 9c 01 	sts	0x019C, r1
					   FillChar(strCardHolder,0,sizeof(strCardHolder));
					   sprintf_P(strCardHolder,PSTR("%s  "),strApprovalCode);
   135c8:	00 d0       	rcall	.+0      	; 0x135ca <PrintIdle+0x75a>
   135ca:	00 d0       	rcall	.+0      	; 0x135cc <PrintIdle+0x75c>
   135cc:	00 d0       	rcall	.+0      	; 0x135ce <PrintIdle+0x75e>
   135ce:	ed b7       	in	r30, 0x3d	; 61
   135d0:	fe b7       	in	r31, 0x3e	; 62
   135d2:	31 96       	adiw	r30, 0x01	; 1
   135d4:	8a e2       	ldi	r24, 0x2A	; 42
   135d6:	93 e0       	ldi	r25, 0x03	; 3
   135d8:	ad b7       	in	r26, 0x3d	; 61
   135da:	be b7       	in	r27, 0x3e	; 62
   135dc:	12 96       	adiw	r26, 0x02	; 2
   135de:	9c 93       	st	X, r25
   135e0:	8e 93       	st	-X, r24
   135e2:	11 97       	sbiw	r26, 0x01	; 1
   135e4:	82 ef       	ldi	r24, 0xF2	; 242
   135e6:	99 e0       	ldi	r25, 0x09	; 9
   135e8:	93 83       	std	Z+3, r25	; 0x03
   135ea:	82 83       	std	Z+2, r24	; 0x02
   135ec:	86 ef       	ldi	r24, 0xF6	; 246
   135ee:	97 e0       	ldi	r25, 0x07	; 7
   135f0:	95 83       	std	Z+5, r25	; 0x05
   135f2:	84 83       	std	Z+4, r24	; 0x04
   135f4:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   135f8:	ed b7       	in	r30, 0x3d	; 61
   135fa:	fe b7       	in	r31, 0x3e	; 62
   135fc:	36 96       	adiw	r30, 0x06	; 6
   135fe:	0f b6       	in	r0, 0x3f	; 63
   13600:	f8 94       	cli
   13602:	fe bf       	out	0x3e, r31	; 62
   13604:	0f be       	out	0x3f, r0	; 63
   13606:	ed bf       	out	0x3d, r30	; 61
				   }
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   13608:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Appr Code: %s"),strCardHolder);
   1360c:	00 d0       	rcall	.+0      	; 0x1360e <PrintIdle+0x79e>
   1360e:	00 d0       	rcall	.+0      	; 0x13610 <PrintIdle+0x7a0>
   13610:	00 d0       	rcall	.+0      	; 0x13612 <PrintIdle+0x7a2>
   13612:	ed b7       	in	r30, 0x3d	; 61
   13614:	fe b7       	in	r31, 0x3e	; 62
   13616:	31 96       	adiw	r30, 0x01	; 1
   13618:	82 ec       	ldi	r24, 0xC2	; 194
   1361a:	98 e0       	ldi	r25, 0x08	; 8
   1361c:	ad b7       	in	r26, 0x3d	; 61
   1361e:	be b7       	in	r27, 0x3e	; 62
   13620:	12 96       	adiw	r26, 0x02	; 2
   13622:	9c 93       	st	X, r25
   13624:	8e 93       	st	-X, r24
   13626:	11 97       	sbiw	r26, 0x01	; 1
   13628:	80 ee       	ldi	r24, 0xE0	; 224
   1362a:	99 e0       	ldi	r25, 0x09	; 9
   1362c:	93 83       	std	Z+3, r25	; 0x03
   1362e:	82 83       	std	Z+2, r24	; 0x02
   13630:	8a e2       	ldi	r24, 0x2A	; 42
   13632:	93 e0       	ldi	r25, 0x03	; 3
   13634:	e2 c1       	rjmp	.+964    	; 0x139fa <PrintIdle+0xb8a>
				   }
               else
			   if (MOPType==MOP_VOUCHER){
   13636:	87 30       	cpi	r24, 0x07	; 7
   13638:	79 f4       	brne	.+30     	; 0x13658 <PrintIdle+0x7e8>
			       CarriegeReturn();
   1363a:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("  "));
   1363e:	00 d0       	rcall	.+0      	; 0x13640 <PrintIdle+0x7d0>
   13640:	00 d0       	rcall	.+0      	; 0x13642 <PrintIdle+0x7d2>
   13642:	82 ec       	ldi	r24, 0xC2	; 194
   13644:	98 e0       	ldi	r25, 0x08	; 8
   13646:	ad b7       	in	r26, 0x3d	; 61
   13648:	be b7       	in	r27, 0x3e	; 62
   1364a:	12 96       	adiw	r26, 0x02	; 2
   1364c:	9c 93       	st	X, r25
   1364e:	8e 93       	st	-X, r24
   13650:	11 97       	sbiw	r26, 0x01	; 1
   13652:	8d ed       	ldi	r24, 0xDD	; 221
   13654:	99 e0       	ldi	r25, 0x09	; 9
   13656:	ea c1       	rjmp	.+980    	; 0x13a2c <PrintIdle+0xbbc>
   13658:	b2 ec       	ldi	r27, 0xC2	; 194
   1365a:	eb 2e       	mov	r14, r27
   1365c:	b8 e0       	ldi	r27, 0x08	; 8
   1365e:	fb 2e       	mov	r15, r27
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   13660:	88 30       	cpi	r24, 0x08	; 8
   13662:	09 f0       	breq	.+2      	; 0x13666 <PrintIdle+0x7f6>
   13664:	87 c0       	rjmp	.+270    	; 0x13774 <PrintIdle+0x904>
			       CarriegeReturn();
   13666:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                 "));
   1366a:	00 d0       	rcall	.+0      	; 0x1366c <PrintIdle+0x7fc>
   1366c:	00 d0       	rcall	.+0      	; 0x1366e <PrintIdle+0x7fe>
   1366e:	ed b7       	in	r30, 0x3d	; 61
   13670:	fe b7       	in	r31, 0x3e	; 62
   13672:	f2 82       	std	Z+2, r15	; 0x02
   13674:	e1 82       	std	Z+1, r14	; 0x01
   13676:	8b ec       	ldi	r24, 0xCB	; 203
   13678:	99 e0       	ldi	r25, 0x09	; 9
   1367a:	29 c0       	rjmp	.+82     	; 0x136ce <PrintIdle+0x85e>
				   }
               else ClearMem(strPrint);
		       break;
          case 13:
		       if (IsSignedField==True){
   1367c:	80 91 02 02 	lds	r24, 0x0202
   13680:	a2 ec       	ldi	r26, 0xC2	; 194
   13682:	ea 2e       	mov	r14, r26
   13684:	a8 e0       	ldi	r26, 0x08	; 8
   13686:	fa 2e       	mov	r15, r26
   13688:	81 30       	cpi	r24, 0x01	; 1
   1368a:	09 f0       	breq	.+2      	; 0x1368e <PrintIdle+0x81e>
   1368c:	73 c0       	rjmp	.+230    	; 0x13774 <PrintIdle+0x904>
			       CarriegeReturn();
   1368e:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   13692:	00 d0       	rcall	.+0      	; 0x13694 <PrintIdle+0x824>
   13694:	00 d0       	rcall	.+0      	; 0x13696 <PrintIdle+0x826>
   13696:	ad b7       	in	r26, 0x3d	; 61
   13698:	be b7       	in	r27, 0x3e	; 62
   1369a:	12 96       	adiw	r26, 0x02	; 2
   1369c:	fc 92       	st	X, r15
   1369e:	ee 92       	st	-X, r14
   136a0:	11 97       	sbiw	r26, 0x01	; 1
   136a2:	84 eb       	ldi	r24, 0xB4	; 180
   136a4:	99 e0       	ldi	r25, 0x09	; 9
   136a6:	c2 c1       	rjmp	.+900    	; 0x13a2c <PrintIdle+0xbbc>
               }else ClearMem(strPrint);
		       break;
          case 14:
		       if (IsSignedField==True){
   136a8:	80 91 02 02 	lds	r24, 0x0202
   136ac:	f2 ec       	ldi	r31, 0xC2	; 194
   136ae:	ef 2e       	mov	r14, r31
   136b0:	f8 e0       	ldi	r31, 0x08	; 8
   136b2:	ff 2e       	mov	r15, r31
   136b4:	81 30       	cpi	r24, 0x01	; 1
   136b6:	09 f0       	breq	.+2      	; 0x136ba <PrintIdle+0x84a>
   136b8:	5d c0       	rjmp	.+186    	; 0x13774 <PrintIdle+0x904>
			       CarriegeReturn();
   136ba:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   136be:	00 d0       	rcall	.+0      	; 0x136c0 <PrintIdle+0x850>
   136c0:	00 d0       	rcall	.+0      	; 0x136c2 <PrintIdle+0x852>
   136c2:	ed b7       	in	r30, 0x3d	; 61
   136c4:	fe b7       	in	r31, 0x3e	; 62
   136c6:	f2 82       	std	Z+2, r15	; 0x02
   136c8:	e1 82       	std	Z+1, r14	; 0x01
   136ca:	8d e9       	ldi	r24, 0x9D	; 157
   136cc:	99 e0       	ldi	r25, 0x09	; 9
   136ce:	94 83       	std	Z+4, r25	; 0x04
   136d0:	83 83       	std	Z+3, r24	; 0x03
   136d2:	b0 c1       	rjmp	.+864    	; 0x13a34 <PrintIdle+0xbc4>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 17:
		       if (IsSignedField==True){
   136d4:	80 91 02 02 	lds	r24, 0x0202
   136d8:	e2 ec       	ldi	r30, 0xC2	; 194
   136da:	ee 2e       	mov	r14, r30
   136dc:	e8 e0       	ldi	r30, 0x08	; 8
   136de:	fe 2e       	mov	r15, r30
   136e0:	81 30       	cpi	r24, 0x01	; 1
   136e2:	09 f0       	breq	.+2      	; 0x136e6 <PrintIdle+0x876>
   136e4:	47 c0       	rjmp	.+142    	; 0x13774 <PrintIdle+0x904>
			       CarriegeReturn();
   136e6:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Tanda Tangan  (______________)"));
   136ea:	00 d0       	rcall	.+0      	; 0x136ec <PrintIdle+0x87c>
   136ec:	00 d0       	rcall	.+0      	; 0x136ee <PrintIdle+0x87e>
   136ee:	ad b7       	in	r26, 0x3d	; 61
   136f0:	be b7       	in	r27, 0x3e	; 62
   136f2:	12 96       	adiw	r26, 0x02	; 2
   136f4:	fc 92       	st	X, r15
   136f6:	ee 92       	st	-X, r14
   136f8:	11 97       	sbiw	r26, 0x01	; 1
   136fa:	8a e7       	ldi	r24, 0x7A	; 122
   136fc:	99 e0       	ldi	r25, 0x09	; 9
   136fe:	96 c1       	rjmp	.+812    	; 0x13a2c <PrintIdle+0xbbc>
               }else ClearMem(strPrint);
		       break;
          case 18:
		       if (IsSignedField==True){
   13700:	80 91 02 02 	lds	r24, 0x0202
   13704:	81 30       	cpi	r24, 0x01	; 1
   13706:	09 f0       	breq	.+2      	; 0x1370a <PrintIdle+0x89a>
   13708:	ac c0       	rjmp	.+344    	; 0x13862 <PrintIdle+0x9f2>
			       IsSignedField=False;
   1370a:	10 92 02 02 	sts	0x0202, r1
   1370e:	a9 c0       	rjmp	.+338    	; 0x13862 <PrintIdle+0x9f2>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 19://PrintMOP Name
		       if (MOPType!=MOP_CASH){
   13710:	80 91 ba 01 	lds	r24, 0x01BA
   13714:	72 ec       	ldi	r23, 0xC2	; 194
   13716:	e7 2e       	mov	r14, r23
   13718:	78 e0       	ldi	r23, 0x08	; 8
   1371a:	f7 2e       	mov	r15, r23
   1371c:	88 23       	and	r24, r24
   1371e:	51 f1       	breq	.+84     	; 0x13774 <PrintIdle+0x904>
			       CarriegeReturn();
   13720:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			       //RemSpaceLag(strMOPName);
			       sprintf_P(strPrint,PSTR("    .%s"),strMOPName);
   13724:	00 d0       	rcall	.+0      	; 0x13726 <PrintIdle+0x8b6>
   13726:	00 d0       	rcall	.+0      	; 0x13728 <PrintIdle+0x8b8>
   13728:	00 d0       	rcall	.+0      	; 0x1372a <PrintIdle+0x8ba>
   1372a:	ed b7       	in	r30, 0x3d	; 61
   1372c:	fe b7       	in	r31, 0x3e	; 62
   1372e:	31 96       	adiw	r30, 0x01	; 1
   13730:	ad b7       	in	r26, 0x3d	; 61
   13732:	be b7       	in	r27, 0x3e	; 62
   13734:	12 96       	adiw	r26, 0x02	; 2
   13736:	fc 92       	st	X, r15
   13738:	ee 92       	st	-X, r14
   1373a:	11 97       	sbiw	r26, 0x01	; 1
   1373c:	82 e7       	ldi	r24, 0x72	; 114
   1373e:	99 e0       	ldi	r25, 0x09	; 9
   13740:	93 83       	std	Z+3, r25	; 0x03
   13742:	82 83       	std	Z+2, r24	; 0x02
   13744:	83 e8       	ldi	r24, 0x83	; 131
   13746:	95 e0       	ldi	r25, 0x05	; 5
   13748:	58 c1       	rjmp	.+688    	; 0x139fa <PrintIdle+0xb8a>
			   }else ClearMem(strPrint);
		       break;
		  case 20:
		       if (MOPType!=MOP_CASH){
   1374a:	80 91 ba 01 	lds	r24, 0x01BA
   1374e:	62 ec       	ldi	r22, 0xC2	; 194
   13750:	e6 2e       	mov	r14, r22
   13752:	68 e0       	ldi	r22, 0x08	; 8
   13754:	f6 2e       	mov	r15, r22
   13756:	88 23       	and	r24, r24
   13758:	69 f0       	breq	.+26     	; 0x13774 <PrintIdle+0x904>
			       CarriegeReturn();
   1375a:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("    ------------------------------"));
   1375e:	00 d0       	rcall	.+0      	; 0x13760 <PrintIdle+0x8f0>
   13760:	00 d0       	rcall	.+0      	; 0x13762 <PrintIdle+0x8f2>
   13762:	ad b7       	in	r26, 0x3d	; 61
   13764:	be b7       	in	r27, 0x3e	; 62
   13766:	12 96       	adiw	r26, 0x02	; 2
   13768:	fc 92       	st	X, r15
   1376a:	ee 92       	st	-X, r14
   1376c:	11 97       	sbiw	r26, 0x01	; 1
   1376e:	8f e4       	ldi	r24, 0x4F	; 79
   13770:	99 e0       	ldi	r25, 0x09	; 9
   13772:	5c c1       	rjmp	.+696    	; 0x13a2c <PrintIdle+0xbbc>
			   }else ClearMem(strPrint);
   13774:	c7 01       	movw	r24, r14
   13776:	9e ce       	rjmp	.-708    	; 0x134b4 <PrintIdle+0x644>
		       break;          
          //Loyalty
		  case 21:
		       CarriegeReturn();
   13778:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("         LOYALTY INFORMATION      "));
   1377c:	00 d0       	rcall	.+0      	; 0x1377e <PrintIdle+0x90e>
   1377e:	00 d0       	rcall	.+0      	; 0x13780 <PrintIdle+0x910>
   13780:	ed b7       	in	r30, 0x3d	; 61
   13782:	fe b7       	in	r31, 0x3e	; 62
   13784:	f2 82       	std	Z+2, r15	; 0x02
   13786:	e1 82       	std	Z+1, r14	; 0x01
   13788:	8c e2       	ldi	r24, 0x2C	; 44
   1378a:	99 e0       	ldi	r25, 0x09	; 9
   1378c:	a0 cf       	rjmp	.-192    	; 0x136ce <PrintIdle+0x85e>
		       break; 			            
		  case 22:
		       CarriegeReturn();
   1378e:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Card ID      : %s"),strLoyCardID);
   13792:	00 d0       	rcall	.+0      	; 0x13794 <PrintIdle+0x924>
   13794:	00 d0       	rcall	.+0      	; 0x13796 <PrintIdle+0x926>
   13796:	00 d0       	rcall	.+0      	; 0x13798 <PrintIdle+0x928>
   13798:	ed b7       	in	r30, 0x3d	; 61
   1379a:	fe b7       	in	r31, 0x3e	; 62
   1379c:	31 96       	adiw	r30, 0x01	; 1
   1379e:	ad b7       	in	r26, 0x3d	; 61
   137a0:	be b7       	in	r27, 0x3e	; 62
   137a2:	12 96       	adiw	r26, 0x02	; 2
   137a4:	fc 92       	st	X, r15
   137a6:	ee 92       	st	-X, r14
   137a8:	11 97       	sbiw	r26, 0x01	; 1
   137aa:	85 e1       	ldi	r24, 0x15	; 21
   137ac:	99 e0       	ldi	r25, 0x09	; 9
   137ae:	93 83       	std	Z+3, r25	; 0x03
   137b0:	82 83       	std	Z+2, r24	; 0x02
   137b2:	8d ee       	ldi	r24, 0xED	; 237
   137b4:	92 e0       	ldi	r25, 0x02	; 2
   137b6:	21 c1       	rjmp	.+578    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 23:
		       CarriegeReturn();
   137b8:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			   //RemSpaceLag(strLoyCardHolder);
		       sprintf_P(strPrint,PSTR("     Card Holder  : %s "),strLoyCardHolder);
   137bc:	00 d0       	rcall	.+0      	; 0x137be <PrintIdle+0x94e>
   137be:	00 d0       	rcall	.+0      	; 0x137c0 <PrintIdle+0x950>
   137c0:	00 d0       	rcall	.+0      	; 0x137c2 <PrintIdle+0x952>
   137c2:	ed b7       	in	r30, 0x3d	; 61
   137c4:	fe b7       	in	r31, 0x3e	; 62
   137c6:	31 96       	adiw	r30, 0x01	; 1
   137c8:	ad b7       	in	r26, 0x3d	; 61
   137ca:	be b7       	in	r27, 0x3e	; 62
   137cc:	12 96       	adiw	r26, 0x02	; 2
   137ce:	fc 92       	st	X, r15
   137d0:	ee 92       	st	-X, r14
   137d2:	11 97       	sbiw	r26, 0x01	; 1
   137d4:	8d ef       	ldi	r24, 0xFD	; 253
   137d6:	98 e0       	ldi	r25, 0x08	; 8
   137d8:	93 83       	std	Z+3, r25	; 0x03
   137da:	82 83       	std	Z+2, r24	; 0x02
   137dc:	8a ec       	ldi	r24, 0xCA	; 202
   137de:	92 e0       	ldi	r25, 0x02	; 2
   137e0:	0c c1       	rjmp	.+536    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 24:
		       if ((strlen(strCorporateID)>0)&&(SpaceOnly(strCorporateID)==False)){
   137e2:	00 e1       	ldi	r16, 0x10	; 16
   137e4:	1c e0       	ldi	r17, 0x0C	; 12
   137e6:	80 91 10 0c 	lds	r24, 0x0C10
   137ea:	88 23       	and	r24, r24
   137ec:	d1 f1       	breq	.+116    	; 0x13862 <PrintIdle+0x9f2>
   137ee:	c8 01       	movw	r24, r16
   137f0:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   137f4:	88 23       	and	r24, r24
   137f6:	a9 f5       	brne	.+106    	; 0x13862 <PrintIdle+0x9f2>
		           CarriegeReturn();
   137f8:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
				   //RemSpaceLag(strCorporateID);
		           sprintf_P(strPrint,PSTR("     Corp ID      : %s"),strCorporateID);
   137fc:	00 d0       	rcall	.+0      	; 0x137fe <PrintIdle+0x98e>
   137fe:	00 d0       	rcall	.+0      	; 0x13800 <PrintIdle+0x990>
   13800:	00 d0       	rcall	.+0      	; 0x13802 <PrintIdle+0x992>
   13802:	ed b7       	in	r30, 0x3d	; 61
   13804:	fe b7       	in	r31, 0x3e	; 62
   13806:	31 96       	adiw	r30, 0x01	; 1
   13808:	82 ec       	ldi	r24, 0xC2	; 194
   1380a:	98 e0       	ldi	r25, 0x08	; 8
   1380c:	ad b7       	in	r26, 0x3d	; 61
   1380e:	be b7       	in	r27, 0x3e	; 62
   13810:	12 96       	adiw	r26, 0x02	; 2
   13812:	9c 93       	st	X, r25
   13814:	8e 93       	st	-X, r24
   13816:	11 97       	sbiw	r26, 0x01	; 1
   13818:	86 ee       	ldi	r24, 0xE6	; 230
   1381a:	98 e0       	ldi	r25, 0x08	; 8
   1381c:	1d c0       	rjmp	.+58     	; 0x13858 <PrintIdle+0x9e8>
			   }else ClearMem(strPrint);
		       break;
		  case 25:
		       if ((strlen(strCorporateName)>0)&&(SpaceOnly(strCorporateName)==False)){
   1381e:	03 ed       	ldi	r16, 0xD3	; 211
   13820:	13 e0       	ldi	r17, 0x03	; 3
   13822:	80 91 d3 03 	lds	r24, 0x03D3
   13826:	88 23       	and	r24, r24
   13828:	e1 f0       	breq	.+56     	; 0x13862 <PrintIdle+0x9f2>
   1382a:	c8 01       	movw	r24, r16
   1382c:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   13830:	88 23       	and	r24, r24
   13832:	b9 f4       	brne	.+46     	; 0x13862 <PrintIdle+0x9f2>
		           CarriegeReturn();
   13834:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
				   //RemSpaceLag(strCorporateName);
		           sprintf_P(strPrint,PSTR("     Corp Name    : %s"),strCorporateName);
   13838:	00 d0       	rcall	.+0      	; 0x1383a <PrintIdle+0x9ca>
   1383a:	00 d0       	rcall	.+0      	; 0x1383c <PrintIdle+0x9cc>
   1383c:	00 d0       	rcall	.+0      	; 0x1383e <PrintIdle+0x9ce>
   1383e:	ed b7       	in	r30, 0x3d	; 61
   13840:	fe b7       	in	r31, 0x3e	; 62
   13842:	31 96       	adiw	r30, 0x01	; 1
   13844:	82 ec       	ldi	r24, 0xC2	; 194
   13846:	98 e0       	ldi	r25, 0x08	; 8
   13848:	ad b7       	in	r26, 0x3d	; 61
   1384a:	be b7       	in	r27, 0x3e	; 62
   1384c:	12 96       	adiw	r26, 0x02	; 2
   1384e:	9c 93       	st	X, r25
   13850:	8e 93       	st	-X, r24
   13852:	11 97       	sbiw	r26, 0x01	; 1
   13854:	8f ec       	ldi	r24, 0xCF	; 207
   13856:	98 e0       	ldi	r25, 0x08	; 8
   13858:	93 83       	std	Z+3, r25	; 0x03
   1385a:	82 83       	std	Z+2, r24	; 0x02
   1385c:	15 83       	std	Z+5, r17	; 0x05
   1385e:	04 83       	std	Z+4, r16	; 0x04
   13860:	ce c0       	rjmp	.+412    	; 0x139fe <PrintIdle+0xb8e>
			   }else ClearMem(strPrint);
   13862:	82 ec       	ldi	r24, 0xC2	; 194
   13864:	98 e0       	ldi	r25, 0x08	; 8
   13866:	26 ce       	rjmp	.-948    	; 0x134b4 <PrintIdle+0x644>
		       break;
		  case 26:
		       CarriegeReturn();
   13868:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Gain Points  : %s"),strGainPoints);
   1386c:	00 d0       	rcall	.+0      	; 0x1386e <PrintIdle+0x9fe>
   1386e:	00 d0       	rcall	.+0      	; 0x13870 <PrintIdle+0xa00>
   13870:	00 d0       	rcall	.+0      	; 0x13872 <PrintIdle+0xa02>
   13872:	ed b7       	in	r30, 0x3d	; 61
   13874:	fe b7       	in	r31, 0x3e	; 62
   13876:	31 96       	adiw	r30, 0x01	; 1
   13878:	ad b7       	in	r26, 0x3d	; 61
   1387a:	be b7       	in	r27, 0x3e	; 62
   1387c:	12 96       	adiw	r26, 0x02	; 2
   1387e:	fc 92       	st	X, r15
   13880:	ee 92       	st	-X, r14
   13882:	11 97       	sbiw	r26, 0x01	; 1
   13884:	88 eb       	ldi	r24, 0xB8	; 184
   13886:	98 e0       	ldi	r25, 0x08	; 8
   13888:	93 83       	std	Z+3, r25	; 0x03
   1388a:	82 83       	std	Z+2, r24	; 0x02
   1388c:	81 ec       	ldi	r24, 0xC1	; 193
   1388e:	92 e0       	ldi	r25, 0x02	; 2
   13890:	b4 c0       	rjmp	.+360    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 27:
		       CarriegeReturn();
   13892:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Prev Points  : %s"),strPrevPoints);
   13896:	00 d0       	rcall	.+0      	; 0x13898 <PrintIdle+0xa28>
   13898:	00 d0       	rcall	.+0      	; 0x1389a <PrintIdle+0xa2a>
   1389a:	00 d0       	rcall	.+0      	; 0x1389c <PrintIdle+0xa2c>
   1389c:	ed b7       	in	r30, 0x3d	; 61
   1389e:	fe b7       	in	r31, 0x3e	; 62
   138a0:	31 96       	adiw	r30, 0x01	; 1
   138a2:	ad b7       	in	r26, 0x3d	; 61
   138a4:	be b7       	in	r27, 0x3e	; 62
   138a6:	12 96       	adiw	r26, 0x02	; 2
   138a8:	fc 92       	st	X, r15
   138aa:	ee 92       	st	-X, r14
   138ac:	11 97       	sbiw	r26, 0x01	; 1
   138ae:	81 ea       	ldi	r24, 0xA1	; 161
   138b0:	98 e0       	ldi	r25, 0x08	; 8
   138b2:	93 83       	std	Z+3, r25	; 0x03
   138b4:	82 83       	std	Z+2, r24	; 0x02
   138b6:	8a e1       	ldi	r24, 0x1A	; 26
   138b8:	99 e0       	ldi	r25, 0x09	; 9
   138ba:	9f c0       	rjmp	.+318    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 28:
		       CarriegeReturn();
   138bc:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Curr Points  : %s"),strLoyCurrentPoints);
   138c0:	00 d0       	rcall	.+0      	; 0x138c2 <PrintIdle+0xa52>
   138c2:	00 d0       	rcall	.+0      	; 0x138c4 <PrintIdle+0xa54>
   138c4:	00 d0       	rcall	.+0      	; 0x138c6 <PrintIdle+0xa56>
   138c6:	ed b7       	in	r30, 0x3d	; 61
   138c8:	fe b7       	in	r31, 0x3e	; 62
   138ca:	31 96       	adiw	r30, 0x01	; 1
   138cc:	ad b7       	in	r26, 0x3d	; 61
   138ce:	be b7       	in	r27, 0x3e	; 62
   138d0:	12 96       	adiw	r26, 0x02	; 2
   138d2:	fc 92       	st	X, r15
   138d4:	ee 92       	st	-X, r14
   138d6:	11 97       	sbiw	r26, 0x01	; 1
   138d8:	8a e8       	ldi	r24, 0x8A	; 138
   138da:	98 e0       	ldi	r25, 0x08	; 8
   138dc:	93 83       	std	Z+3, r25	; 0x03
   138de:	82 83       	std	Z+2, r24	; 0x02
   138e0:	8b e3       	ldi	r24, 0x3B	; 59
   138e2:	98 e0       	ldi	r25, 0x08	; 8
   138e4:	8a c0       	rjmp	.+276    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 29:
		       CarriegeReturn();
   138e6:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Expiry       : %s"),strLoyExpiry);
   138ea:	00 d0       	rcall	.+0      	; 0x138ec <PrintIdle+0xa7c>
   138ec:	00 d0       	rcall	.+0      	; 0x138ee <PrintIdle+0xa7e>
   138ee:	00 d0       	rcall	.+0      	; 0x138f0 <PrintIdle+0xa80>
   138f0:	ed b7       	in	r30, 0x3d	; 61
   138f2:	fe b7       	in	r31, 0x3e	; 62
   138f4:	31 96       	adiw	r30, 0x01	; 1
   138f6:	ad b7       	in	r26, 0x3d	; 61
   138f8:	be b7       	in	r27, 0x3e	; 62
   138fa:	12 96       	adiw	r26, 0x02	; 2
   138fc:	fc 92       	st	X, r15
   138fe:	ee 92       	st	-X, r14
   13900:	11 97       	sbiw	r26, 0x01	; 1
   13902:	83 e7       	ldi	r24, 0x73	; 115
   13904:	98 e0       	ldi	r25, 0x08	; 8
   13906:	93 83       	std	Z+3, r25	; 0x03
   13908:	82 83       	std	Z+2, r24	; 0x02
   1390a:	8f e7       	ldi	r24, 0x7F	; 127
   1390c:	9c e0       	ldi	r25, 0x0C	; 12
   1390e:	75 c0       	rjmp	.+234    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 30:
		       CarriegeReturn();
   13910:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			   //RemSpaceLag(strLoyRedeemPoints);
		       sprintf_P(strPrint,PSTR("     Total Redeem : %s"),strLoyRedeemPoints);
   13914:	00 d0       	rcall	.+0      	; 0x13916 <PrintIdle+0xaa6>
   13916:	00 d0       	rcall	.+0      	; 0x13918 <PrintIdle+0xaa8>
   13918:	00 d0       	rcall	.+0      	; 0x1391a <PrintIdle+0xaaa>
   1391a:	ed b7       	in	r30, 0x3d	; 61
   1391c:	fe b7       	in	r31, 0x3e	; 62
   1391e:	31 96       	adiw	r30, 0x01	; 1
   13920:	ad b7       	in	r26, 0x3d	; 61
   13922:	be b7       	in	r27, 0x3e	; 62
   13924:	12 96       	adiw	r26, 0x02	; 2
   13926:	fc 92       	st	X, r15
   13928:	ee 92       	st	-X, r14
   1392a:	11 97       	sbiw	r26, 0x01	; 1
   1392c:	8c e5       	ldi	r24, 0x5C	; 92
   1392e:	98 e0       	ldi	r25, 0x08	; 8
   13930:	93 83       	std	Z+3, r25	; 0x03
   13932:	82 83       	std	Z+2, r24	; 0x02
   13934:	80 ea       	ldi	r24, 0xA0	; 160
   13936:	93 e0       	ldi	r25, 0x03	; 3
   13938:	60 c0       	rjmp	.+192    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 31:
		       CarriegeReturn();
   1393a:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeV);
			   //FormatCurrency(strLoyCurrMonConsumeV);
		       sprintf_P(strPrint,PSTR("     Month Cons V : %s L"),strLoyCurrMonConsumeV);
   1393e:	00 d0       	rcall	.+0      	; 0x13940 <PrintIdle+0xad0>
   13940:	00 d0       	rcall	.+0      	; 0x13942 <PrintIdle+0xad2>
   13942:	00 d0       	rcall	.+0      	; 0x13944 <PrintIdle+0xad4>
   13944:	ed b7       	in	r30, 0x3d	; 61
   13946:	fe b7       	in	r31, 0x3e	; 62
   13948:	31 96       	adiw	r30, 0x01	; 1
   1394a:	ad b7       	in	r26, 0x3d	; 61
   1394c:	be b7       	in	r27, 0x3e	; 62
   1394e:	12 96       	adiw	r26, 0x02	; 2
   13950:	fc 92       	st	X, r15
   13952:	ee 92       	st	-X, r14
   13954:	11 97       	sbiw	r26, 0x01	; 1
   13956:	83 e4       	ldi	r24, 0x43	; 67
   13958:	98 e0       	ldi	r25, 0x08	; 8
   1395a:	93 83       	std	Z+3, r25	; 0x03
   1395c:	82 83       	std	Z+2, r24	; 0x02
   1395e:	83 ef       	ldi	r24, 0xF3	; 243
   13960:	9b e0       	ldi	r25, 0x0B	; 11
   13962:	4b c0       	rjmp	.+150    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 32:
		       CarriegeReturn();
   13964:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeA);
			   //FormatCurrency(strLoyCurrMonConsumeA);
		       sprintf_P(strPrint,PSTR("     Month Cons A : Rp.%s"),strLoyCurrMonConsumeA);
   13968:	00 d0       	rcall	.+0      	; 0x1396a <PrintIdle+0xafa>
   1396a:	00 d0       	rcall	.+0      	; 0x1396c <PrintIdle+0xafc>
   1396c:	00 d0       	rcall	.+0      	; 0x1396e <PrintIdle+0xafe>
   1396e:	ed b7       	in	r30, 0x3d	; 61
   13970:	fe b7       	in	r31, 0x3e	; 62
   13972:	31 96       	adiw	r30, 0x01	; 1
   13974:	ad b7       	in	r26, 0x3d	; 61
   13976:	be b7       	in	r27, 0x3e	; 62
   13978:	12 96       	adiw	r26, 0x02	; 2
   1397a:	fc 92       	st	X, r15
   1397c:	ee 92       	st	-X, r14
   1397e:	11 97       	sbiw	r26, 0x01	; 1
   13980:	89 e2       	ldi	r24, 0x29	; 41
   13982:	98 e0       	ldi	r25, 0x08	; 8
   13984:	93 83       	std	Z+3, r25	; 0x03
   13986:	82 83       	std	Z+2, r24	; 0x02
   13988:	84 e8       	ldi	r24, 0x84	; 132
   1398a:	93 e0       	ldi	r25, 0x03	; 3
   1398c:	36 c0       	rjmp	.+108    	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 33://EndOfLoyalty
		       CarriegeReturn();
   1398e:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13992:	00 d0       	rcall	.+0      	; 0x13994 <PrintIdle+0xb24>
   13994:	00 d0       	rcall	.+0      	; 0x13996 <PrintIdle+0xb26>
   13996:	ad b7       	in	r26, 0x3d	; 61
   13998:	be b7       	in	r27, 0x3e	; 62
   1399a:	12 96       	adiw	r26, 0x02	; 2
   1399c:	fc 92       	st	X, r15
   1399e:	ee 92       	st	-X, r14
   139a0:	11 97       	sbiw	r26, 0x01	; 1
   139a2:	86 e0       	ldi	r24, 0x06	; 6
   139a4:	98 e0       	ldi	r25, 0x08	; 8
   139a6:	42 c0       	rjmp	.+132    	; 0x13a2c <PrintIdle+0xbbc>
		       break;
		  case 34:
		       CarriegeReturn();
   139a8:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Dsc: %s"),strSurchargeDesc);
   139ac:	00 d0       	rcall	.+0      	; 0x139ae <PrintIdle+0xb3e>
   139ae:	00 d0       	rcall	.+0      	; 0x139b0 <PrintIdle+0xb40>
   139b0:	00 d0       	rcall	.+0      	; 0x139b2 <PrintIdle+0xb42>
   139b2:	ed b7       	in	r30, 0x3d	; 61
   139b4:	fe b7       	in	r31, 0x3e	; 62
   139b6:	31 96       	adiw	r30, 0x01	; 1
   139b8:	ad b7       	in	r26, 0x3d	; 61
   139ba:	be b7       	in	r27, 0x3e	; 62
   139bc:	12 96       	adiw	r26, 0x02	; 2
   139be:	fc 92       	st	X, r15
   139c0:	ee 92       	st	-X, r14
   139c2:	11 97       	sbiw	r26, 0x01	; 1
   139c4:	8f ee       	ldi	r24, 0xEF	; 239
   139c6:	97 e0       	ldi	r25, 0x07	; 7
   139c8:	93 83       	std	Z+3, r25	; 0x03
   139ca:	82 83       	std	Z+2, r24	; 0x02
   139cc:	81 ee       	ldi	r24, 0xE1	; 225
   139ce:	97 e0       	ldi	r25, 0x07	; 7
   139d0:	14 c0       	rjmp	.+40     	; 0x139fa <PrintIdle+0xb8a>
		       break;
		  case 35:
		       CarriegeReturn();
   139d2:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Amt: %s"),strSurchargeAmount);
   139d6:	00 d0       	rcall	.+0      	; 0x139d8 <PrintIdle+0xb68>
   139d8:	00 d0       	rcall	.+0      	; 0x139da <PrintIdle+0xb6a>
   139da:	00 d0       	rcall	.+0      	; 0x139dc <PrintIdle+0xb6c>
   139dc:	ed b7       	in	r30, 0x3d	; 61
   139de:	fe b7       	in	r31, 0x3e	; 62
   139e0:	31 96       	adiw	r30, 0x01	; 1
   139e2:	ad b7       	in	r26, 0x3d	; 61
   139e4:	be b7       	in	r27, 0x3e	; 62
   139e6:	12 96       	adiw	r26, 0x02	; 2
   139e8:	fc 92       	st	X, r15
   139ea:	ee 92       	st	-X, r14
   139ec:	11 97       	sbiw	r26, 0x01	; 1
   139ee:	88 ed       	ldi	r24, 0xD8	; 216
   139f0:	97 e0       	ldi	r25, 0x07	; 7
   139f2:	93 83       	std	Z+3, r25	; 0x03
   139f4:	82 83       	std	Z+2, r24	; 0x02
   139f6:	88 e5       	ldi	r24, 0x58	; 88
   139f8:	98 e0       	ldi	r25, 0x08	; 8
   139fa:	95 83       	std	Z+5, r25	; 0x05
   139fc:	84 83       	std	Z+4, r24	; 0x04
   139fe:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   13a02:	ed b7       	in	r30, 0x3d	; 61
   13a04:	fe b7       	in	r31, 0x3e	; 62
   13a06:	36 96       	adiw	r30, 0x06	; 6
   13a08:	0f b6       	in	r0, 0x3f	; 63
   13a0a:	f8 94       	cli
   13a0c:	fe bf       	out	0x3e, r31	; 62
   13a0e:	0f be       	out	0x3f, r0	; 63
   13a10:	ed bf       	out	0x3d, r30	; 61
   13a12:	16 c0       	rjmp	.+44     	; 0x13a40 <PrintIdle+0xbd0>
		       break;
		  case 36:
		       CarriegeReturn();
   13a14:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13a18:	00 d0       	rcall	.+0      	; 0x13a1a <PrintIdle+0xbaa>
   13a1a:	00 d0       	rcall	.+0      	; 0x13a1c <PrintIdle+0xbac>
   13a1c:	ad b7       	in	r26, 0x3d	; 61
   13a1e:	be b7       	in	r27, 0x3e	; 62
   13a20:	12 96       	adiw	r26, 0x02	; 2
   13a22:	fc 92       	st	X, r15
   13a24:	ee 92       	st	-X, r14
   13a26:	11 97       	sbiw	r26, 0x01	; 1
   13a28:	85 eb       	ldi	r24, 0xB5	; 181
   13a2a:	97 e0       	ldi	r25, 0x07	; 7
   13a2c:	14 96       	adiw	r26, 0x04	; 4
   13a2e:	9c 93       	st	X, r25
   13a30:	8e 93       	st	-X, r24
   13a32:	13 97       	sbiw	r26, 0x03	; 3
   13a34:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   13a38:	0f 90       	pop	r0
   13a3a:	0f 90       	pop	r0
   13a3c:	0f 90       	pop	r0
   13a3e:	0f 90       	pop	r0
		       break;
		  }
		  iLoop=0;iSend=0;LSend=strlen(strPrint);
   13a40:	10 92 fd 01 	sts	0x01FD, r1
   13a44:	10 92 fc 01 	sts	0x01FC, r1
   13a48:	10 92 01 02 	sts	0x0201, r1
   13a4c:	10 92 00 02 	sts	0x0200, r1
   13a50:	e2 ec       	ldi	r30, 0xC2	; 194
   13a52:	f8 e0       	ldi	r31, 0x08	; 8
   13a54:	01 90       	ld	r0, Z+
   13a56:	00 20       	and	r0, r0
   13a58:	e9 f7       	brne	.-6      	; 0x13a54 <PrintIdle+0xbe4>
   13a5a:	31 97       	sbiw	r30, 0x01	; 1
   13a5c:	e2 5c       	subi	r30, 0xC2	; 194
   13a5e:	f8 40       	sbci	r31, 0x08	; 8
   13a60:	f0 93 ff 01 	sts	0x01FF, r31
   13a64:	e0 93 fe 01 	sts	0x01FE, r30
          stPrintIdle=piPrintMessage;
   13a68:	8a e0       	ldi	r24, 0x0A	; 10
   13a6a:	79 c1       	rjmp	.+754    	; 0x13d5e <PrintIdle+0xeee>
	      break;
     case piPrintMessage:
	      if (iSend<LSend){
   13a6c:	20 91 00 02 	lds	r18, 0x0200
   13a70:	30 91 01 02 	lds	r19, 0x0201
   13a74:	80 91 fe 01 	lds	r24, 0x01FE
   13a78:	90 91 ff 01 	lds	r25, 0x01FF
   13a7c:	28 17       	cp	r18, r24
   13a7e:	39 07       	cpc	r19, r25
   13a80:	68 f4       	brcc	.+26     	; 0x13a9c <PrintIdle+0xc2c>
		      iLoop++;
   13a82:	80 91 fc 01 	lds	r24, 0x01FC
   13a86:	90 91 fd 01 	lds	r25, 0x01FD
   13a8a:	01 96       	adiw	r24, 0x01	; 1
   13a8c:	90 93 fd 01 	sts	0x01FD, r25
   13a90:	80 93 fc 01 	sts	0x01FC, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   13a94:	10 92 b8 01 	sts	0x01B8, r1
				 stPrintIdle=piCheckPrintStatusMessage;
   13a98:	8c e0       	ldi	r24, 0x0C	; 12
   13a9a:	61 c1       	rjmp	.+706    	; 0x13d5e <PrintIdle+0xeee>
				 }
			  }
          else{iMessage++;
   13a9c:	80 91 04 02 	lds	r24, 0x0204
   13aa0:	8f 5f       	subi	r24, 0xFF	; 255
   13aa2:	80 93 04 02 	sts	0x0204, r24
		      if (iMessage>MessageLine){
   13aa6:	90 91 03 02 	lds	r25, 0x0203
   13aaa:	98 17       	cp	r25, r24
   13aac:	30 f4       	brcc	.+12     	; 0x13aba <PrintIdle+0xc4a>
			      iFooter=0;				  
   13aae:	10 92 07 02 	sts	0x0207, r1
				  CarriegeReturn();
   13ab2:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
				  stPrintIdle=piLoadOperatorName;//piLoadFooter;
   13ab6:	85 e1       	ldi	r24, 0x15	; 21
   13ab8:	52 c1       	rjmp	.+676    	; 0x13d5e <PrintIdle+0xeee>
			  }
			  else stPrintIdle=piLoadMessage;
   13aba:	89 e0       	ldi	r24, 0x09	; 9
   13abc:	50 c1       	rjmp	.+672    	; 0x13d5e <PrintIdle+0xeee>
			  }
	      break;
     case piCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   13abe:	80 91 b5 01 	lds	r24, 0x01B5
   13ac2:	88 23       	and	r24, r24
   13ac4:	09 f0       	breq	.+2      	; 0x13ac8 <PrintIdle+0xc58>
   13ac6:	42 c1       	rjmp	.+644    	; 0x13d4c <PrintIdle+0xedc>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13ac8:	e0 91 00 02 	lds	r30, 0x0200
   13acc:	f0 91 01 02 	lds	r31, 0x0201
   13ad0:	ee 53       	subi	r30, 0x3E	; 62
   13ad2:	f7 4f       	sbci	r31, 0xF7	; 247
   13ad4:	61 e0       	ldi	r22, 0x01	; 1
   13ad6:	40 81       	ld	r20, Z
   13ad8:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   13adc:	80 91 00 02 	lds	r24, 0x0200
   13ae0:	90 91 01 02 	lds	r25, 0x0201
   13ae4:	01 96       	adiw	r24, 0x01	; 1
   13ae6:	90 93 01 02 	sts	0x0201, r25
   13aea:	80 93 00 02 	sts	0x0200, r24
		      stPrintIdle=piPrintMessage;
   13aee:	8a e0       	ldi	r24, 0x0A	; 10
   13af0:	2b c1       	rjmp	.+598    	; 0x13d48 <PrintIdle+0xed8>


	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   13af2:	8e 01       	movw	r16, r28
   13af4:	0f 5f       	subi	r16, 0xFF	; 255
   13af6:	1f 4f       	sbci	r17, 0xFF	; 255
   13af8:	c8 01       	movw	r24, r16
   13afa:	65 e1       	ldi	r22, 0x15	; 21
   13afc:	70 e0       	ldi	r23, 0x00	; 0
   13afe:	42 e1       	ldi	r20, 0x12	; 18
   13b00:	50 e0       	ldi	r21, 0x00	; 0
   13b02:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
   13b06:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13b08:	9e 01       	movw	r18, r28
   13b0a:	20 5f       	subi	r18, 0xF0	; 240
   13b0c:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   13b0e:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13b10:	82 17       	cp	r24, r18
   13b12:	93 07       	cpc	r25, r19
   13b14:	e1 f7       	brne	.-8      	; 0x13b0e <PrintIdle+0xc9e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   13b16:	18 8a       	std	Y+16, r1	; 0x10
	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  if (strlen(strOperatorName)>0){
   13b18:	89 81       	ldd	r24, Y+1	; 0x01
   13b1a:	88 23       	and	r24, r24
   13b1c:	09 f4       	brne	.+2      	; 0x13b20 <PrintIdle+0xcb0>
   13b1e:	94 c0       	rjmp	.+296    	; 0x13c48 <PrintIdle+0xdd8>
			  if (SpaceOnly(strOperatorName)!=True){		      				  
   13b20:	7e 01       	movw	r14, r28
   13b22:	08 94       	sec
   13b24:	e1 1c       	adc	r14, r1
   13b26:	f1 1c       	adc	r15, r1
   13b28:	c7 01       	movw	r24, r14
   13b2a:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   13b2e:	81 30       	cpi	r24, 0x01	; 1
   13b30:	09 f4       	brne	.+2      	; 0x13b34 <PrintIdle+0xcc4>
   13b32:	8a c0       	rjmp	.+276    	; 0x13c48 <PrintIdle+0xdd8>
				  sprintf_P(strPrint,PSTR("     Operator: %s"),strOperatorName);			   
   13b34:	00 d0       	rcall	.+0      	; 0x13b36 <PrintIdle+0xcc6>
   13b36:	00 d0       	rcall	.+0      	; 0x13b38 <PrintIdle+0xcc8>
   13b38:	00 d0       	rcall	.+0      	; 0x13b3a <PrintIdle+0xcca>
   13b3a:	ed b7       	in	r30, 0x3d	; 61
   13b3c:	fe b7       	in	r31, 0x3e	; 62
   13b3e:	31 96       	adiw	r30, 0x01	; 1
   13b40:	02 ec       	ldi	r16, 0xC2	; 194
   13b42:	18 e0       	ldi	r17, 0x08	; 8
   13b44:	ad b7       	in	r26, 0x3d	; 61
   13b46:	be b7       	in	r27, 0x3e	; 62
   13b48:	12 96       	adiw	r26, 0x02	; 2
   13b4a:	1c 93       	st	X, r17
   13b4c:	0e 93       	st	-X, r16
   13b4e:	11 97       	sbiw	r26, 0x01	; 1
   13b50:	83 ea       	ldi	r24, 0xA3	; 163
   13b52:	97 e0       	ldi	r25, 0x07	; 7
   13b54:	93 83       	std	Z+3, r25	; 0x03
   13b56:	82 83       	std	Z+2, r24	; 0x02
   13b58:	f5 82       	std	Z+5, r15	; 0x05
   13b5a:	e4 82       	std	Z+4, r14	; 0x04
   13b5c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			      iSend=0;iLoop=0;
   13b60:	10 92 01 02 	sts	0x0201, r1
   13b64:	10 92 00 02 	sts	0x0200, r1
   13b68:	10 92 fd 01 	sts	0x01FD, r1
   13b6c:	10 92 fc 01 	sts	0x01FC, r1
				  LSend=strlen(strPrint);
   13b70:	f8 01       	movw	r30, r16
   13b72:	01 90       	ld	r0, Z+
   13b74:	00 20       	and	r0, r0
   13b76:	e9 f7       	brne	.-6      	; 0x13b72 <PrintIdle+0xd02>
   13b78:	8f 01       	movw	r16, r30
   13b7a:	01 50       	subi	r16, 0x01	; 1
   13b7c:	10 40       	sbci	r17, 0x00	; 0
   13b7e:	02 5c       	subi	r16, 0xC2	; 194
   13b80:	18 40       	sbci	r17, 0x08	; 8
   13b82:	10 93 ff 01 	sts	0x01FF, r17
   13b86:	00 93 fe 01 	sts	0x01FE, r16
				  stPrintIdle=piPrintOperatorName;
   13b8a:	86 e1       	ldi	r24, 0x16	; 22
   13b8c:	80 93 09 02 	sts	0x0209, r24
   13b90:	2d b7       	in	r18, 0x3d	; 61
   13b92:	3e b7       	in	r19, 0x3e	; 62
   13b94:	2a 5f       	subi	r18, 0xFA	; 250
   13b96:	3f 4f       	sbci	r19, 0xFF	; 255
   13b98:	0f b6       	in	r0, 0x3f	; 63
   13b9a:	f8 94       	cli
   13b9c:	3e bf       	out	0x3e, r19	; 62
   13b9e:	0f be       	out	0x3f, r0	; 63
   13ba0:	2d bf       	out	0x3d, r18	; 61
   13ba2:	1a c1       	rjmp	.+564    	; 0x13dd8 <PrintIdle+0xf68>
			  }else stPrintIdle=piLoadFooter;
          }  
          else stPrintIdle=piLoadFooter;
	      break;
	 case piPrintOperatorName:
		  if (iSend<LSend){
   13ba4:	20 91 00 02 	lds	r18, 0x0200
   13ba8:	30 91 01 02 	lds	r19, 0x0201
   13bac:	80 91 fe 01 	lds	r24, 0x01FE
   13bb0:	90 91 ff 01 	lds	r25, 0x01FF
   13bb4:	28 17       	cp	r18, r24
   13bb6:	39 07       	cpc	r19, r25
   13bb8:	68 f4       	brcc	.+26     	; 0x13bd4 <PrintIdle+0xd64>
		      iLoop++;
   13bba:	80 91 fc 01 	lds	r24, 0x01FC
   13bbe:	90 91 fd 01 	lds	r25, 0x01FD
   13bc2:	01 96       	adiw	r24, 0x01	; 1
   13bc4:	90 93 fd 01 	sts	0x01FD, r25
   13bc8:	80 93 fc 01 	sts	0x01FC, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   13bcc:	10 92 b8 01 	sts	0x01B8, r1
				  stPrintIdle=piCheckPrintOperatorName;
   13bd0:	87 e1       	ldi	r24, 0x17	; 23
   13bd2:	c5 c0       	rjmp	.+394    	; 0x13d5e <PrintIdle+0xeee>
				}
			  }
          else {
			  CarriegeReturn();
   13bd4:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
			  CarriegeReturn();
   13bd8:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   13bdc:	35 c0       	rjmp	.+106    	; 0x13c48 <PrintIdle+0xdd8>
			  stPrintIdle=piLoadFooter;
			  }
	      break;
	 case piCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   13bde:	80 91 b5 01 	lds	r24, 0x01B5
   13be2:	88 23       	and	r24, r24
   13be4:	09 f0       	breq	.+2      	; 0x13be8 <PrintIdle+0xd78>
   13be6:	b2 c0       	rjmp	.+356    	; 0x13d4c <PrintIdle+0xedc>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13be8:	e0 91 00 02 	lds	r30, 0x0200
   13bec:	f0 91 01 02 	lds	r31, 0x0201
   13bf0:	ee 53       	subi	r30, 0x3E	; 62
   13bf2:	f7 4f       	sbci	r31, 0xF7	; 247
   13bf4:	61 e0       	ldi	r22, 0x01	; 1
   13bf6:	40 81       	ld	r20, Z
   13bf8:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   13bfc:	80 91 00 02 	lds	r24, 0x0200
   13c00:	90 91 01 02 	lds	r25, 0x0201
   13c04:	01 96       	adiw	r24, 0x01	; 1
   13c06:	90 93 01 02 	sts	0x0201, r25
   13c0a:	80 93 00 02 	sts	0x0200, r24
		      stPrintIdle=piPrintOperatorName;
   13c0e:	86 e1       	ldi	r24, 0x16	; 22
   13c10:	9b c0       	rjmp	.+310    	; 0x13d48 <PrintIdle+0xed8>
	      break;

	 	       
     case piLoadFooter:
	      FillChar(strPrint,0,sizeof(strPrint));
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   13c12:	60 91 07 02 	lds	r22, 0x0207
   13c16:	89 e2       	ldi	r24, 0x29	; 41
   13c18:	68 9f       	mul	r22, r24
   13c1a:	b0 01       	movw	r22, r0
   13c1c:	11 24       	eor	r1, r1
   13c1e:	6d 5d       	subi	r22, 0xDD	; 221
   13c20:	7c 4f       	sbci	r23, 0xFC	; 252
   13c22:	82 ec       	ldi	r24, 0xC2	; 194
   13c24:	98 e0       	ldi	r25, 0x08	; 8
   13c26:	48 e2       	ldi	r20, 0x28	; 40
   13c28:	50 e0       	ldi	r21, 0x00	; 0
   13c2a:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  iFooter++;
   13c2e:	80 91 07 02 	lds	r24, 0x0207
   13c32:	8f 5f       	subi	r24, 0xFF	; 255
   13c34:	80 93 07 02 	sts	0x0207, r24
		  if (iFooter<=4){
   13c38:	85 30       	cpi	r24, 0x05	; 5
   13c3a:	90 f4       	brcc	.+36     	; 0x13c60 <PrintIdle+0xdf0>
		      if (SpaceOnly(strPrint)==True){
   13c3c:	82 ec       	ldi	r24, 0xC2	; 194
   13c3e:	98 e0       	ldi	r25, 0x08	; 8
   13c40:	0e 94 33 24 	call	0x4866	; 0x4866 <SpaceOnly>
   13c44:	81 30       	cpi	r24, 0x01	; 1
   13c46:	11 f4       	brne	.+4      	; 0x13c4c <PrintIdle+0xddc>
			      stPrintIdle=piLoadFooter;
   13c48:	8e e0       	ldi	r24, 0x0E	; 14
   13c4a:	89 c0       	rjmp	.+274    	; 0x13d5e <PrintIdle+0xeee>
				  }
			  else{
			      iSend=0;
   13c4c:	10 92 01 02 	sts	0x0201, r1
   13c50:	10 92 00 02 	sts	0x0200, r1
				  iLoop=0;
   13c54:	10 92 fd 01 	sts	0x01FD, r1
   13c58:	10 92 fc 01 	sts	0x01FC, r1
				  stPrintIdle=piPrintFooter;
   13c5c:	8f e0       	ldi	r24, 0x0F	; 15
   13c5e:	7f c0       	rjmp	.+254    	; 0x13d5e <PrintIdle+0xeee>
				  //RemSpaceLag(strPrint);
				  //CarriegeReturn();
			      }
		  }else{stPrintIdle=piInitScroll;
   13c60:	81 e1       	ldi	r24, 0x11	; 17
   13c62:	7d c0       	rjmp	.+250    	; 0x13d5e <PrintIdle+0xeee>
		        //iPrinted++;
			}
	      break;
     case piPrintFooter:
		  if (iSend<40){
   13c64:	80 91 00 02 	lds	r24, 0x0200
   13c68:	90 91 01 02 	lds	r25, 0x0201
   13c6c:	88 97       	sbiw	r24, 0x28	; 40
   13c6e:	68 f4       	brcc	.+26     	; 0x13c8a <PrintIdle+0xe1a>
		      iLoop++;
   13c70:	80 91 fc 01 	lds	r24, 0x01FC
   13c74:	90 91 fd 01 	lds	r25, 0x01FD
   13c78:	01 96       	adiw	r24, 0x01	; 1
   13c7a:	90 93 fd 01 	sts	0x01FD, r25
   13c7e:	80 93 fc 01 	sts	0x01FC, r24
			  if((iLoop%PRINT_DELAY)==0){
				TimPrintBusy=0;
   13c82:	10 92 b8 01 	sts	0x01B8, r1
				stPrintIdle=piCheckPrintStatusFooter;
   13c86:	8d e0       	ldi	r24, 0x0D	; 13
   13c88:	6a c0       	rjmp	.+212    	; 0x13d5e <PrintIdle+0xeee>
				}
			  }
          else {
		      stPrintIdle=piLoadFooter;
   13c8a:	8e e0       	ldi	r24, 0x0E	; 14
   13c8c:	80 93 09 02 	sts	0x0209, r24
			  CarriegeReturn();
   13c90:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
   13c94:	a1 c0       	rjmp	.+322    	; 0x13dd8 <PrintIdle+0xf68>
			  }
	      break;
     case piCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   13c96:	80 91 b5 01 	lds	r24, 0x01B5
   13c9a:	88 23       	and	r24, r24
   13c9c:	09 f0       	breq	.+2      	; 0x13ca0 <PrintIdle+0xe30>
   13c9e:	56 c0       	rjmp	.+172    	; 0x13d4c <PrintIdle+0xedc>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13ca0:	e0 91 00 02 	lds	r30, 0x0200
   13ca4:	f0 91 01 02 	lds	r31, 0x0201
   13ca8:	ee 53       	subi	r30, 0x3E	; 62
   13caa:	f7 4f       	sbci	r31, 0xF7	; 247
   13cac:	61 e0       	ldi	r22, 0x01	; 1
   13cae:	40 81       	ld	r20, Z
   13cb0:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		      iSend++;
   13cb4:	80 91 00 02 	lds	r24, 0x0200
   13cb8:	90 91 01 02 	lds	r25, 0x0201
   13cbc:	01 96       	adiw	r24, 0x01	; 1
   13cbe:	90 93 01 02 	sts	0x0201, r25
   13cc2:	80 93 00 02 	sts	0x0200, r24
		      stPrintIdle=piPrintFooter;
   13cc6:	8f e0       	ldi	r24, 0x0F	; 15
   13cc8:	3f c0       	rjmp	.+126    	; 0x13d48 <PrintIdle+0xed8>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitScroll:
	      iPrinted++;
   13cca:	90 91 fb 01 	lds	r25, 0x01FB
   13cce:	9f 5f       	subi	r25, 0xFF	; 255
   13cd0:	90 93 fb 01 	sts	0x01FB, r25
		  iScroll=0;
   13cd4:	10 92 06 02 	sts	0x0206, r1
		  iLoop=0;
   13cd8:	10 92 fd 01 	sts	0x01FD, r1
   13cdc:	10 92 fc 01 	sts	0x01FC, r1
		  if (iPrinted<PrintCopy){
   13ce0:	80 91 fa 01 	lds	r24, 0x01FA
   13ce4:	98 17       	cp	r25, r24
   13ce6:	28 f4       	brcc	.+10     	; 0x13cf2 <PrintIdle+0xe82>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   13ce8:	82 e3       	ldi	r24, 0x32	; 50
   13cea:	90 e0       	ldi	r25, 0x00	; 0
   13cec:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   13cf0:	04 c0       	rjmp	.+8      	; 0x13cfa <PrintIdle+0xe8a>
		  }else if (iPrinted>=PrintCopy){		  	  
		      nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   13cf2:	81 e3       	ldi	r24, 0x31	; 49
   13cf4:	90 e0       	ldi	r25, 0x00	; 0
   13cf6:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
   13cfa:	80 93 05 02 	sts	0x0205, r24
		  if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_TG02){
		      uart_printf(0,1,PSTR("----Scrolled2-----"));

		      stPrintIdle=piPaperCut;
		  }*/
          stPrintIdle=piScrollPaper;              
   13cfe:	80 e1       	ldi	r24, 0x10	; 16
   13d00:	2e c0       	rjmp	.+92     	; 0x13d5e <PrintIdle+0xeee>
	      break;
     case piScrollPaper:
	      iLoop++;
   13d02:	80 91 fc 01 	lds	r24, 0x01FC
   13d06:	90 91 fd 01 	lds	r25, 0x01FD
   13d0a:	01 96       	adiw	r24, 0x01	; 1
   13d0c:	90 93 fd 01 	sts	0x01FD, r25
   13d10:	80 93 fc 01 	sts	0x01FC, r24
		  if (iLoop%PRINT_DELAY==0){
			  TimPrintBusy=0;
   13d14:	10 92 b8 01 	sts	0x01B8, r1
			  stPrintIdle=piCheckPrintStatusScroll;
   13d18:	82 e1       	ldi	r24, 0x12	; 18
   13d1a:	80 93 09 02 	sts	0x0209, r24
			  }
	      if (iScroll>nScroll)stPrintIdle=piPaperCut;
   13d1e:	90 91 06 02 	lds	r25, 0x0206
   13d22:	80 91 05 02 	lds	r24, 0x0205
   13d26:	89 17       	cp	r24, r25
   13d28:	08 f0       	brcs	.+2      	; 0x13d2c <PrintIdle+0xebc>
   13d2a:	56 c0       	rjmp	.+172    	; 0x13dd8 <PrintIdle+0xf68>
   13d2c:	83 e1       	ldi	r24, 0x13	; 19
   13d2e:	17 c0       	rjmp	.+46     	; 0x13d5e <PrintIdle+0xeee>
	      break;
     case piCheckPrintStatusScroll:
	      if (IsBusyPrint==False){
   13d30:	80 91 b5 01 	lds	r24, 0x01B5
   13d34:	88 23       	and	r24, r24
   13d36:	51 f4       	brne	.+20     	; 0x13d4c <PrintIdle+0xedc>
		      iScroll++;
   13d38:	80 91 06 02 	lds	r24, 0x0206
   13d3c:	8f 5f       	subi	r24, 0xFF	; 255
   13d3e:	80 93 06 02 	sts	0x0206, r24
		      CarriegeReturn();
   13d42:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		      stPrintIdle=piScrollPaper;
   13d46:	80 e1       	ldi	r24, 0x10	; 16
   13d48:	80 93 09 02 	sts	0x0209, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   13d4c:	80 91 b8 01 	lds	r24, 0x01B8
   13d50:	8b 30       	cpi	r24, 0x0B	; 11
   13d52:	08 f4       	brcc	.+2      	; 0x13d56 <PrintIdle+0xee6>
   13d54:	41 c0       	rjmp	.+130    	; 0x13dd8 <PrintIdle+0xf68>
		      IsPrintERROR=True;
   13d56:	81 e0       	ldi	r24, 0x01	; 1
   13d58:	80 93 b3 01 	sts	0x01B3, r24
		      stPrintIdle=piFinishPrintIdle;
   13d5c:	84 e1       	ldi	r24, 0x14	; 20
   13d5e:	80 93 09 02 	sts	0x0209, r24
   13d62:	3a c0       	rjmp	.+116    	; 0x13dd8 <PrintIdle+0xf68>
	      break;
     case piPaperCut:
	      //sprintf_P(strSend,PSTR("i:%d Copy:%d"),iPrinted,PrintCopy);
		  //uart_print(0,1,strSend);

          if (iPrinted>=PrintCopy){
   13d64:	90 91 fb 01 	lds	r25, 0x01FB
   13d68:	80 91 fa 01 	lds	r24, 0x01FA
   13d6c:	98 17       	cp	r25, r24
   13d6e:	10 f0       	brcs	.+4      	; 0x13d74 <PrintIdle+0xf04>
		      stPrintIdle=piFinishPrintIdle;
   13d70:	84 e1       	ldi	r24, 0x14	; 20
   13d72:	05 c0       	rjmp	.+10     	; 0x13d7e <PrintIdle+0xf0e>
			  }
		  else {CarriegeReturn();
   13d74:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		        CarriegeReturn();
   13d78:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <CarriegeReturn>
		        stPrintIdle=piInit;
   13d7c:	81 e0       	ldi	r24, 0x01	; 1
   13d7e:	80 93 09 02 	sts	0x0209, r24
		       }
		  PaperCut();
   13d82:	0e 94 73 46 	call	0x8ce6	; 0x8ce6 <PaperCut>
   13d86:	28 c0       	rjmp	.+80     	; 0x13dd8 <PrintIdle+0xf68>
	      break;
     case piFinishPrintIdle:	      

	      switch(IFType){
   13d88:	80 91 00 01 	lds	r24, 0x0100
   13d8c:	81 30       	cpi	r24, 0x01	; 1
   13d8e:	19 f0       	breq	.+6      	; 0x13d96 <PrintIdle+0xf26>
   13d90:	82 30       	cpi	r24, 0x02	; 2
   13d92:	f1 f4       	brne	.+60     	; 0x13dd0 <PrintIdle+0xf60>
   13d94:	03 c0       	rjmp	.+6      	; 0x13d9c <PrintIdle+0xf2c>
		  case IT_SLAVE:
		       sendMessage04();
   13d96:	0e 94 8f 93 	call	0x1271e	; 0x1271e <sendMessage04>
   13d9a:	1a c0       	rjmp	.+52     	; 0x13dd0 <PrintIdle+0xf60>
			   //strPumpStatus[FIPAddr]=GetPumpStatusLabel(PUMP_OFF);

		       //UpdateStandaloneStatus((atoi(strFIP_ID)&0x0F),PS_PRINTED);
			   //PrintUpdatePrintedTransNum((atoi(strFIP_ID)&0x0F));

			   FIPAddr=GetFIPAddr(atoi(strFIP_ID)&0x0F)-1;
   13d9c:	8f eb       	ldi	r24, 0xBF	; 191
   13d9e:	97 e0       	ldi	r25, 0x07	; 7
   13da0:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
   13da4:	8f 70       	andi	r24, 0x0F	; 15
   13da6:	0e 94 0b 20 	call	0x4016	; 0x4016 <GetFIPAddr>
			   CurrentPumpStatus[FIPAddr]=PUMP_OFF;
   13daa:	81 50       	subi	r24, 0x01	; 1
   13dac:	e8 2e       	mov	r14, r24
   13dae:	ff 24       	eor	r15, r15
   13db0:	f7 01       	movw	r30, r14
   13db2:	e1 5a       	subi	r30, 0xA1	; 161
   13db4:	fe 4f       	sbci	r31, 0xFE	; 254
   13db6:	86 e0       	ldi	r24, 0x06	; 6
   13db8:	80 83       	st	Z, r24
			   strPumpStatus[FIPAddr]=GetPumpStatusLabel(PUMP_OFF);			   
   13dba:	0e 94 54 14 	call	0x28a8	; 0x28a8 <GetPumpStatusLabel>
   13dbe:	a2 e0       	ldi	r26, 0x02	; 2
   13dc0:	b1 e0       	ldi	r27, 0x01	; 1
   13dc2:	ea 0e       	add	r14, r26
   13dc4:	fb 1e       	adc	r15, r27
   13dc6:	f7 01       	movw	r30, r14
   13dc8:	80 83       	st	Z, r24
			   IsNewPumpStatus=True;//UpdateDisplay
   13dca:	81 e0       	ldi	r24, 0x01	; 1
   13dcc:	80 93 01 01 	sts	0x0101, r24
		       break;
		  }
		  IsBusyIdlePrinting=False;
   13dd0:	10 92 b4 01 	sts	0x01B4, r1
          stPrintIdle=piIdle;
   13dd4:	10 92 09 02 	sts	0x0209, r1
	      break;	 
	 }
}
   13dd8:	64 96       	adiw	r28, 0x14	; 20
   13dda:	0f b6       	in	r0, 0x3f	; 63
   13ddc:	f8 94       	cli
   13dde:	de bf       	out	0x3e, r29	; 62
   13de0:	0f be       	out	0x3f, r0	; 63
   13de2:	cd bf       	out	0x3d, r28	; 61
   13de4:	cf 91       	pop	r28
   13de6:	df 91       	pop	r29
   13de8:	1f 91       	pop	r17
   13dea:	0f 91       	pop	r16
   13dec:	ff 90       	pop	r15
   13dee:	ef 90       	pop	r14
   13df0:	08 95       	ret

00013df2 <systemPrinting>:
     

}

void systemPrinting(){
	 FreePrinting();
   13df2:	0e 94 93 93 	call	0x12726	; 0x12726 <FreePrinting>
	 PrintIdle();
   13df6:	0e 94 38 97 	call	0x12e70	; 0x12e70 <PrintIdle>
}
   13dfa:	08 95       	ret

00013dfc <SendConfigParamater>:
          stConfigProtocol=cpWaitSend;
	      break;
	 }
}

void SendConfigParamater(){
   13dfc:	8f 92       	push	r8
   13dfe:	9f 92       	push	r9
   13e00:	af 92       	push	r10
   13e02:	bf 92       	push	r11
   13e04:	cf 92       	push	r12
   13e06:	df 92       	push	r13
   13e08:	ef 92       	push	r14
   13e0a:	ff 92       	push	r15
   13e0c:	0f 93       	push	r16
   13e0e:	1f 93       	push	r17
   13e10:	df 93       	push	r29
   13e12:	cf 93       	push	r28
   13e14:	cd b7       	in	r28, 0x3d	; 61
   13e16:	de b7       	in	r29, 0x3e	; 62
   13e18:	c5 56       	subi	r28, 0x65	; 101
   13e1a:	d0 40       	sbci	r29, 0x00	; 0
   13e1c:	0f b6       	in	r0, 0x3f	; 63
   13e1e:	f8 94       	cli
   13e20:	de bf       	out	0x3e, r29	; 62
   13e22:	0f be       	out	0x3f, r0	; 63
   13e24:	cd bf       	out	0x3d, r28	; 61
char i,j,strSend[60];
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
   13e26:	81 e0       	ldi	r24, 0x01	; 1
   13e28:	60 e0       	ldi	r22, 0x00	; 0
   13e2a:	46 ef       	ldi	r20, 0xF6	; 246
   13e2c:	53 e2       	ldi	r21, 0x23	; 35
   13e2e:	0e 94 16 aa 	call	0x1542c	; 0x1542c <uart_printf>
   13e32:	0d e2       	ldi	r16, 0x2D	; 45
   13e34:	12 e0       	ldi	r17, 0x02	; 2
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13e36:	5e 01       	movw	r10, r28
   13e38:	08 94       	sec
   13e3a:	a1 1c       	adc	r10, r1
   13e3c:	b1 1c       	adc	r11, r1
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13e3e:	3a e2       	ldi	r19, 0x2A	; 42
   13e40:	e3 2e       	mov	r14, r19
   13e42:	f1 2c       	mov	r15, r1
   13e44:	ec 0e       	add	r14, r28
   13e46:	fd 1e       	adc	r15, r29
   13e48:	23 ef       	ldi	r18, 0xF3	; 243
   13e4a:	c2 2e       	mov	r12, r18
   13e4c:	23 e2       	ldi	r18, 0x23	; 35
   13e4e:	d2 2e       	mov	r13, r18

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13e50:	c5 01       	movw	r24, r10
   13e52:	b8 01       	movw	r22, r16
   13e54:	49 e2       	ldi	r20, 0x29	; 41
   13e56:	50 e0       	ldi	r21, 0x00	; 0
   13e58:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13e5c:	00 d0       	rcall	.+0      	; 0x13e5e <SendConfigParamater+0x62>
   13e5e:	00 d0       	rcall	.+0      	; 0x13e60 <SendConfigParamater+0x64>
   13e60:	00 d0       	rcall	.+0      	; 0x13e62 <SendConfigParamater+0x66>
   13e62:	ed b7       	in	r30, 0x3d	; 61
   13e64:	fe b7       	in	r31, 0x3e	; 62
   13e66:	31 96       	adiw	r30, 0x01	; 1
   13e68:	ad b7       	in	r26, 0x3d	; 61
   13e6a:	be b7       	in	r27, 0x3e	; 62
   13e6c:	12 96       	adiw	r26, 0x02	; 2
   13e6e:	fc 92       	st	X, r15
   13e70:	ee 92       	st	-X, r14
   13e72:	11 97       	sbiw	r26, 0x01	; 1
   13e74:	d3 82       	std	Z+3, r13	; 0x03
   13e76:	c2 82       	std	Z+2, r12	; 0x02
   13e78:	b5 82       	std	Z+5, r11	; 0x05
   13e7a:	a4 82       	std	Z+4, r10	; 0x04
   13e7c:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  AddSpaceLag(strSend,40);
   13e80:	ed b7       	in	r30, 0x3d	; 61
   13e82:	fe b7       	in	r31, 0x3e	; 62
   13e84:	36 96       	adiw	r30, 0x06	; 6
   13e86:	0f b6       	in	r0, 0x3f	; 63
   13e88:	f8 94       	cli
   13e8a:	fe bf       	out	0x3e, r31	; 62
   13e8c:	0f be       	out	0x3f, r0	; 63
   13e8e:	ed bf       	out	0x3d, r30	; 61
   13e90:	c7 01       	movw	r24, r14
   13e92:	68 e2       	ldi	r22, 0x28	; 40
   13e94:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
		  uart_print(1,0,strSend);
   13e98:	81 e0       	ldi	r24, 0x01	; 1
   13e9a:	60 e0       	ldi	r22, 0x00	; 0
   13e9c:	a7 01       	movw	r20, r14
   13e9e:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
   13ea2:	07 5d       	subi	r16, 0xD7	; 215
   13ea4:	1f 4f       	sbci	r17, 0xFF	; 255
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
   13ea6:	f3 e0       	ldi	r31, 0x03	; 3
   13ea8:	07 3c       	cpi	r16, 0xC7	; 199
   13eaa:	1f 07       	cpc	r17, r31
   13eac:	89 f6       	brne	.-94     	; 0x13e50 <SendConfigParamater+0x54>
   13eae:	00 ec       	ldi	r16, 0xC0	; 192
   13eb0:	10 e0       	ldi	r17, 0x00	; 0
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13eb2:	5e 01       	movw	r10, r28
   13eb4:	08 94       	sec
   13eb6:	a1 1c       	adc	r10, r1
   13eb8:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13eba:	9a e2       	ldi	r25, 0x2A	; 42
   13ebc:	e9 2e       	mov	r14, r25
   13ebe:	f1 2c       	mov	r15, r1
   13ec0:	ec 0e       	add	r14, r28
   13ec2:	fd 1e       	adc	r15, r29
   13ec4:	80 ef       	ldi	r24, 0xF0	; 240
   13ec6:	c8 2e       	mov	r12, r24
   13ec8:	83 e2       	ldi	r24, 0x23	; 35
   13eca:	d8 2e       	mov	r13, r24
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13ecc:	c5 01       	movw	r24, r10
   13ece:	b8 01       	movw	r22, r16
   13ed0:	4d e0       	ldi	r20, 0x0D	; 13
   13ed2:	50 e0       	ldi	r21, 0x00	; 0
   13ed4:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13ed8:	00 d0       	rcall	.+0      	; 0x13eda <SendConfigParamater+0xde>
   13eda:	00 d0       	rcall	.+0      	; 0x13edc <SendConfigParamater+0xe0>
   13edc:	00 d0       	rcall	.+0      	; 0x13ede <SendConfigParamater+0xe2>
   13ede:	ed b7       	in	r30, 0x3d	; 61
   13ee0:	fe b7       	in	r31, 0x3e	; 62
   13ee2:	31 96       	adiw	r30, 0x01	; 1
   13ee4:	ad b7       	in	r26, 0x3d	; 61
   13ee6:	be b7       	in	r27, 0x3e	; 62
   13ee8:	12 96       	adiw	r26, 0x02	; 2
   13eea:	fc 92       	st	X, r15
   13eec:	ee 92       	st	-X, r14
   13eee:	11 97       	sbiw	r26, 0x01	; 1
   13ef0:	d3 82       	std	Z+3, r13	; 0x03
   13ef2:	c2 82       	std	Z+2, r12	; 0x02
   13ef4:	b5 82       	std	Z+5, r11	; 0x05
   13ef6:	a4 82       	std	Z+4, r10	; 0x04
   13ef8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 AddSpaceLag(strSend,12);
   13efc:	ed b7       	in	r30, 0x3d	; 61
   13efe:	fe b7       	in	r31, 0x3e	; 62
   13f00:	36 96       	adiw	r30, 0x06	; 6
   13f02:	0f b6       	in	r0, 0x3f	; 63
   13f04:	f8 94       	cli
   13f06:	fe bf       	out	0x3e, r31	; 62
   13f08:	0f be       	out	0x3f, r0	; 63
   13f0a:	ed bf       	out	0x3d, r30	; 61
   13f0c:	c7 01       	movw	r24, r14
   13f0e:	6c e0       	ldi	r22, 0x0C	; 12
   13f10:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
		 uart_print(1,0,strSend);
   13f14:	81 e0       	ldi	r24, 0x01	; 1
   13f16:	60 e0       	ldi	r22, 0x00	; 0
   13f18:	a7 01       	movw	r20, r14
   13f1a:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
   13f1e:	03 5f       	subi	r16, 0xF3	; 243
   13f20:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
   13f22:	f1 e0       	ldi	r31, 0x01	; 1
   13f24:	0e 30       	cpi	r16, 0x0E	; 14
   13f26:	1f 07       	cpc	r17, r31
   13f28:	89 f6       	brne	.-94     	; 0x13ecc <SendConfigParamater+0xd0>
   13f2a:	0a e8       	ldi	r16, 0x8A	; 138
   13f2c:	10 e0       	ldi	r17, 0x00	; 0
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13f2e:	5e 01       	movw	r10, r28
   13f30:	08 94       	sec
   13f32:	a1 1c       	adc	r10, r1
   13f34:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13f36:	ba e2       	ldi	r27, 0x2A	; 42
   13f38:	eb 2e       	mov	r14, r27
   13f3a:	f1 2c       	mov	r15, r1
   13f3c:	ec 0e       	add	r14, r28
   13f3e:	fd 1e       	adc	r15, r29
   13f40:	ad ee       	ldi	r26, 0xED	; 237
   13f42:	ca 2e       	mov	r12, r26
   13f44:	a3 e2       	ldi	r26, 0x23	; 35
   13f46:	da 2e       	mov	r13, r26
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13f48:	c5 01       	movw	r24, r10
   13f4a:	b8 01       	movw	r22, r16
   13f4c:	49 e0       	ldi	r20, 0x09	; 9
   13f4e:	50 e0       	ldi	r21, 0x00	; 0
   13f50:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13f54:	00 d0       	rcall	.+0      	; 0x13f56 <SendConfigParamater+0x15a>
   13f56:	00 d0       	rcall	.+0      	; 0x13f58 <SendConfigParamater+0x15c>
   13f58:	00 d0       	rcall	.+0      	; 0x13f5a <SendConfigParamater+0x15e>
   13f5a:	ed b7       	in	r30, 0x3d	; 61
   13f5c:	fe b7       	in	r31, 0x3e	; 62
   13f5e:	31 96       	adiw	r30, 0x01	; 1
   13f60:	ad b7       	in	r26, 0x3d	; 61
   13f62:	be b7       	in	r27, 0x3e	; 62
   13f64:	12 96       	adiw	r26, 0x02	; 2
   13f66:	fc 92       	st	X, r15
   13f68:	ee 92       	st	-X, r14
   13f6a:	11 97       	sbiw	r26, 0x01	; 1
   13f6c:	d3 82       	std	Z+3, r13	; 0x03
   13f6e:	c2 82       	std	Z+2, r12	; 0x02
   13f70:	b5 82       	std	Z+5, r11	; 0x05
   13f72:	a4 82       	std	Z+4, r10	; 0x04
   13f74:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		 AddSpaceLag(strSend,5);
   13f78:	ed b7       	in	r30, 0x3d	; 61
   13f7a:	fe b7       	in	r31, 0x3e	; 62
   13f7c:	36 96       	adiw	r30, 0x06	; 6
   13f7e:	0f b6       	in	r0, 0x3f	; 63
   13f80:	f8 94       	cli
   13f82:	fe bf       	out	0x3e, r31	; 62
   13f84:	0f be       	out	0x3f, r0	; 63
   13f86:	ed bf       	out	0x3d, r30	; 61
   13f88:	c7 01       	movw	r24, r14
   13f8a:	65 e0       	ldi	r22, 0x05	; 5
   13f8c:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
		 uart_print(1,0,strSend);
   13f90:	81 e0       	ldi	r24, 0x01	; 1
   13f92:	60 e0       	ldi	r22, 0x00	; 0
   13f94:	a7 01       	movw	r20, r14
   13f96:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
   13f9a:	07 5f       	subi	r16, 0xF7	; 247
   13f9c:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
   13f9e:	f0 e0       	ldi	r31, 0x00	; 0
   13fa0:	00 3c       	cpi	r16, 0xC0	; 192
   13fa2:	1f 07       	cpc	r17, r31
   13fa4:	89 f6       	brne	.-94     	; 0x13f48 <SendConfigParamater+0x14c>
   13fa6:	0a e4       	ldi	r16, 0x4A	; 74
   13fa8:	10 e0       	ldi	r17, 0x00	; 0
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13faa:	fa e2       	ldi	r31, 0x2A	; 42
   13fac:	ef 2e       	mov	r14, r31
   13fae:	f1 2c       	mov	r15, r1
   13fb0:	ec 0e       	add	r14, r28
   13fb2:	fd 1e       	adc	r15, r29
   13fb4:	e8 ee       	ldi	r30, 0xE8	; 232
   13fb6:	ce 2e       	mov	r12, r30
   13fb8:	e3 e2       	ldi	r30, 0x23	; 35
   13fba:	de 2e       	mov	r13, r30
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
   13fbc:	c8 01       	movw	r24, r16
   13fbe:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   13fc2:	84 36       	cpi	r24, 0x64	; 100
   13fc4:	08 f0       	brcs	.+2      	; 0x13fc8 <SendConfigParamater+0x1cc>
   13fc6:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13fc8:	00 d0       	rcall	.+0      	; 0x13fca <SendConfigParamater+0x1ce>
   13fca:	00 d0       	rcall	.+0      	; 0x13fcc <SendConfigParamater+0x1d0>
   13fcc:	00 d0       	rcall	.+0      	; 0x13fce <SendConfigParamater+0x1d2>
   13fce:	ed b7       	in	r30, 0x3d	; 61
   13fd0:	fe b7       	in	r31, 0x3e	; 62
   13fd2:	31 96       	adiw	r30, 0x01	; 1
   13fd4:	ad b7       	in	r26, 0x3d	; 61
   13fd6:	be b7       	in	r27, 0x3e	; 62
   13fd8:	12 96       	adiw	r26, 0x02	; 2
   13fda:	fc 92       	st	X, r15
   13fdc:	ee 92       	st	-X, r14
   13fde:	11 97       	sbiw	r26, 0x01	; 1
   13fe0:	d3 82       	std	Z+3, r13	; 0x03
   13fe2:	c2 82       	std	Z+2, r12	; 0x02
   13fe4:	84 83       	std	Z+4, r24	; 0x04
   13fe6:	15 82       	std	Z+5, r1	; 0x05
   13fe8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  AddSpaceLag(strSend,2);
   13fec:	ed b7       	in	r30, 0x3d	; 61
   13fee:	fe b7       	in	r31, 0x3e	; 62
   13ff0:	36 96       	adiw	r30, 0x06	; 6
   13ff2:	0f b6       	in	r0, 0x3f	; 63
   13ff4:	f8 94       	cli
   13ff6:	fe bf       	out	0x3e, r31	; 62
   13ff8:	0f be       	out	0x3f, r0	; 63
   13ffa:	ed bf       	out	0x3d, r30	; 61
   13ffc:	c7 01       	movw	r24, r14
   13ffe:	62 e0       	ldi	r22, 0x02	; 2
   14000:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
		 uart_print(1,0,strSend);
   14004:	81 e0       	ldi	r24, 0x01	; 1
   14006:	60 e0       	ldi	r22, 0x00	; 0
   14008:	a7 01       	movw	r20, r14
   1400a:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
   1400e:	0f 5f       	subi	r16, 0xFF	; 255
   14010:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
   14012:	f0 e0       	ldi	r31, 0x00	; 0
   14014:	02 35       	cpi	r16, 0x52	; 82
   14016:	1f 07       	cpc	r17, r31
   14018:	89 f6       	brne	.-94     	; 0x13fbc <SendConfigParamater+0x1c0>
   1401a:	7a e5       	ldi	r23, 0x5A	; 90
   1401c:	e7 2e       	mov	r14, r23
   1401e:	70 e0       	ldi	r23, 0x00	; 0
   14020:	f7 2e       	mov	r15, r23
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
			   if (xEEPROM>=10)xEEPROM=0;
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14022:	6a e2       	ldi	r22, 0x2A	; 42
   14024:	a6 2e       	mov	r10, r22
   14026:	b1 2c       	mov	r11, r1
   14028:	ac 0e       	add	r10, r28
   1402a:	bd 1e       	adc	r11, r29
   1402c:	55 ee       	ldi	r21, 0xE5	; 229
   1402e:	85 2e       	mov	r8, r21
   14030:	53 e2       	ldi	r21, 0x23	; 35
   14032:	95 2e       	mov	r9, r21
   14034:	34 c0       	rjmp	.+104    	; 0x1409e <SendConfigParamater+0x2a2>
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
   14036:	c8 01       	movw	r24, r16
   14038:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
			   if (xEEPROM>=10)xEEPROM=0;
   1403c:	8a 30       	cpi	r24, 0x0A	; 10
   1403e:	08 f0       	brcs	.+2      	; 0x14042 <SendConfigParamater+0x246>
   14040:	80 e0       	ldi	r24, 0x00	; 0
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14042:	00 d0       	rcall	.+0      	; 0x14044 <SendConfigParamater+0x248>
   14044:	00 d0       	rcall	.+0      	; 0x14046 <SendConfigParamater+0x24a>
   14046:	00 d0       	rcall	.+0      	; 0x14048 <SendConfigParamater+0x24c>
   14048:	ed b7       	in	r30, 0x3d	; 61
   1404a:	fe b7       	in	r31, 0x3e	; 62
   1404c:	31 96       	adiw	r30, 0x01	; 1
   1404e:	ad b7       	in	r26, 0x3d	; 61
   14050:	be b7       	in	r27, 0x3e	; 62
   14052:	12 96       	adiw	r26, 0x02	; 2
   14054:	bc 92       	st	X, r11
   14056:	ae 92       	st	-X, r10
   14058:	11 97       	sbiw	r26, 0x01	; 1
   1405a:	93 82       	std	Z+3, r9	; 0x03
   1405c:	82 82       	std	Z+2, r8	; 0x02
   1405e:	84 83       	std	Z+4, r24	; 0x04
   14060:	15 82       	std	Z+5, r1	; 0x05
   14062:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
			   uart_print(1,0,strSend);
   14066:	ed b7       	in	r30, 0x3d	; 61
   14068:	fe b7       	in	r31, 0x3e	; 62
   1406a:	36 96       	adiw	r30, 0x06	; 6
   1406c:	0f b6       	in	r0, 0x3f	; 63
   1406e:	f8 94       	cli
   14070:	fe bf       	out	0x3e, r31	; 62
   14072:	0f be       	out	0x3f, r0	; 63
   14074:	ed bf       	out	0x3d, r30	; 61
   14076:	81 e0       	ldi	r24, 0x01	; 1
   14078:	60 e0       	ldi	r22, 0x00	; 0
   1407a:	a5 01       	movw	r20, r10
   1407c:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
   14080:	d3 94       	inc	r13
   14082:	0f 5f       	subi	r16, 0xFF	; 255
   14084:	1f 4f       	sbci	r17, 0xFF	; 255
   14086:	f6 e0       	ldi	r31, 0x06	; 6
   14088:	df 16       	cp	r13, r31
   1408a:	a9 f6       	brne	.-86     	; 0x14036 <SendConfigParamater+0x23a>
   1408c:	86 e0       	ldi	r24, 0x06	; 6
   1408e:	90 e0       	ldi	r25, 0x00	; 0
   14090:	e8 0e       	add	r14, r24
   14092:	f9 1e       	adc	r15, r25
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
   14094:	9a e8       	ldi	r25, 0x8A	; 138
   14096:	e9 16       	cp	r14, r25
   14098:	90 e0       	ldi	r25, 0x00	; 0
   1409a:	f9 06       	cpc	r15, r25
   1409c:	19 f0       	breq	.+6      	; 0x140a4 <SendConfigParamater+0x2a8>
   1409e:	87 01       	movw	r16, r14
   140a0:	dd 24       	eor	r13, r13
   140a2:	c9 cf       	rjmp	.-110    	; 0x14036 <SendConfigParamater+0x23a>
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
			   uart_print(1,0,strSend);
		  }
	 }
	 //PrintNoMoney
	 xEEPROM=eeprom_read_byte(&DefPrintMoney);
   140a4:	87 ec       	ldi	r24, 0xC7	; 199
   140a6:	93 e0       	ldi	r25, 0x03	; 3
   140a8:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
	 if (xEEPROM==True){
   140ac:	81 30       	cpi	r24, 0x01	; 1
   140ae:	79 f4       	brne	.+30     	; 0x140ce <SendConfigParamater+0x2d2>
		 sprintf_P(strSend,PSTR("1"));
   140b0:	00 d0       	rcall	.+0      	; 0x140b2 <SendConfigParamater+0x2b6>
   140b2:	00 d0       	rcall	.+0      	; 0x140b4 <SendConfigParamater+0x2b8>
   140b4:	ad b7       	in	r26, 0x3d	; 61
   140b6:	be b7       	in	r27, 0x3e	; 62
   140b8:	12 96       	adiw	r26, 0x02	; 2
   140ba:	bc 92       	st	X, r11
   140bc:	ae 92       	st	-X, r10
   140be:	11 97       	sbiw	r26, 0x01	; 1
   140c0:	83 ee       	ldi	r24, 0xE3	; 227
   140c2:	93 e2       	ldi	r25, 0x23	; 35
   140c4:	14 96       	adiw	r26, 0x04	; 4
   140c6:	9c 93       	st	X, r25
   140c8:	8e 93       	st	-X, r24
   140ca:	13 97       	sbiw	r26, 0x03	; 3
   140cc:	0a c0       	rjmp	.+20     	; 0x140e2 <SendConfigParamater+0x2e6>
	 }else{
	     sprintf_P(strSend,PSTR("0"));
   140ce:	00 d0       	rcall	.+0      	; 0x140d0 <SendConfigParamater+0x2d4>
   140d0:	00 d0       	rcall	.+0      	; 0x140d2 <SendConfigParamater+0x2d6>
   140d2:	ed b7       	in	r30, 0x3d	; 61
   140d4:	fe b7       	in	r31, 0x3e	; 62
   140d6:	b2 82       	std	Z+2, r11	; 0x02
   140d8:	a1 82       	std	Z+1, r10	; 0x01
   140da:	81 ee       	ldi	r24, 0xE1	; 225
   140dc:	93 e2       	ldi	r25, 0x23	; 35
   140de:	94 83       	std	Z+4, r25	; 0x04
   140e0:	83 83       	std	Z+3, r24	; 0x03
   140e2:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   140e6:	0f 90       	pop	r0
   140e8:	0f 90       	pop	r0
   140ea:	0f 90       	pop	r0
   140ec:	0f 90       	pop	r0
	 }uart_print(1,0,strSend);
   140ee:	8e 01       	movw	r16, r28
   140f0:	06 5d       	subi	r16, 0xD6	; 214
   140f2:	1f 4f       	sbci	r17, 0xFF	; 255
   140f4:	81 e0       	ldi	r24, 0x01	; 1
   140f6:	60 e0       	ldi	r22, 0x00	; 0
   140f8:	a8 01       	movw	r20, r16
   140fa:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
   140fe:	80 e0       	ldi	r24, 0x00	; 0
   14100:	90 e0       	ldi	r25, 0x00	; 0
   14102:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   14106:	00 d0       	rcall	.+0      	; 0x14108 <SendConfigParamater+0x30c>
   14108:	00 d0       	rcall	.+0      	; 0x1410a <SendConfigParamater+0x30e>
   1410a:	00 d0       	rcall	.+0      	; 0x1410c <SendConfigParamater+0x310>
   1410c:	ed b7       	in	r30, 0x3d	; 61
   1410e:	fe b7       	in	r31, 0x3e	; 62
   14110:	31 96       	adiw	r30, 0x01	; 1
   14112:	ad b7       	in	r26, 0x3d	; 61
   14114:	be b7       	in	r27, 0x3e	; 62
   14116:	12 96       	adiw	r26, 0x02	; 2
   14118:	1c 93       	st	X, r17
   1411a:	0e 93       	st	-X, r16
   1411c:	11 97       	sbiw	r26, 0x01	; 1
   1411e:	2c ed       	ldi	r18, 0xDC	; 220
   14120:	33 e2       	ldi	r19, 0x23	; 35
   14122:	33 83       	std	Z+3, r19	; 0x03
   14124:	22 83       	std	Z+2, r18	; 0x02
   14126:	84 83       	std	Z+4, r24	; 0x04
   14128:	15 82       	std	Z+5, r1	; 0x05
   1412a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
     uart_print(1,0,strSend);
   1412e:	ed b7       	in	r30, 0x3d	; 61
   14130:	fe b7       	in	r31, 0x3e	; 62
   14132:	36 96       	adiw	r30, 0x06	; 6
   14134:	0f b6       	in	r0, 0x3f	; 63
   14136:	f8 94       	cli
   14138:	fe bf       	out	0x3e, r31	; 62
   1413a:	0f be       	out	0x3f, r0	; 63
   1413c:	ed bf       	out	0x3d, r30	; 61
   1413e:	81 e0       	ldi	r24, 0x01	; 1
   14140:	60 e0       	ldi	r22, 0x00	; 0
   14142:	a8 01       	movw	r20, r16
   14144:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
   14148:	42 e5       	ldi	r20, 0x52	; 82
   1414a:	e4 2e       	mov	r14, r20
   1414c:	40 e0       	ldi	r20, 0x00	; 0
   1414e:	f4 2e       	mov	r15, r20
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   14150:	d0 2e       	mov	r13, r16
   14152:	01 2f       	mov	r16, r17
   14154:	37 ed       	ldi	r19, 0xD7	; 215
   14156:	a3 2e       	mov	r10, r19
   14158:	33 e2       	ldi	r19, 0x23	; 35
   1415a:	b3 2e       	mov	r11, r19
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
   1415c:	c7 01       	movw	r24, r14
   1415e:	0e 94 3f ae 	call	0x15c7e	; 0x15c7e <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   14162:	84 36       	cpi	r24, 0x64	; 100
   14164:	08 f0       	brcs	.+2      	; 0x14168 <SendConfigParamater+0x36c>
   14166:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   14168:	00 d0       	rcall	.+0      	; 0x1416a <SendConfigParamater+0x36e>
   1416a:	00 d0       	rcall	.+0      	; 0x1416c <SendConfigParamater+0x370>
   1416c:	00 d0       	rcall	.+0      	; 0x1416e <SendConfigParamater+0x372>
   1416e:	ed b7       	in	r30, 0x3d	; 61
   14170:	fe b7       	in	r31, 0x3e	; 62
   14172:	31 96       	adiw	r30, 0x01	; 1
   14174:	ad b7       	in	r26, 0x3d	; 61
   14176:	be b7       	in	r27, 0x3e	; 62
   14178:	11 96       	adiw	r26, 0x01	; 1
   1417a:	dc 92       	st	X, r13
   1417c:	11 97       	sbiw	r26, 0x01	; 1
   1417e:	12 96       	adiw	r26, 0x02	; 2
   14180:	0c 93       	st	X, r16
   14182:	b3 82       	std	Z+3, r11	; 0x03
   14184:	a2 82       	std	Z+2, r10	; 0x02
   14186:	84 83       	std	Z+4, r24	; 0x04
   14188:	15 82       	std	Z+5, r1	; 0x05
   1418a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
		  AddSpaceLag(strSend,2);
   1418e:	ed b7       	in	r30, 0x3d	; 61
   14190:	fe b7       	in	r31, 0x3e	; 62
   14192:	36 96       	adiw	r30, 0x06	; 6
   14194:	0f b6       	in	r0, 0x3f	; 63
   14196:	f8 94       	cli
   14198:	fe bf       	out	0x3e, r31	; 62
   1419a:	0f be       	out	0x3f, r0	; 63
   1419c:	ed bf       	out	0x3d, r30	; 61
   1419e:	8d 2d       	mov	r24, r13
   141a0:	90 2f       	mov	r25, r16
   141a2:	62 e0       	ldi	r22, 0x02	; 2
   141a4:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <AddSpaceLag>
		 uart_print(1,0,strSend);
   141a8:	81 e0       	ldi	r24, 0x01	; 1
   141aa:	60 e0       	ldi	r22, 0x00	; 0
   141ac:	4d 2d       	mov	r20, r13
   141ae:	50 2f       	mov	r21, r16
   141b0:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>
   141b4:	08 94       	sec
   141b6:	e1 1c       	adc	r14, r1
   141b8:	f1 1c       	adc	r15, r1
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
   141ba:	fa e5       	ldi	r31, 0x5A	; 90
   141bc:	ef 16       	cp	r14, r31
   141be:	f0 e0       	ldi	r31, 0x00	; 0
   141c0:	ff 06       	cpc	r15, r31
   141c2:	61 f6       	brne	.-104    	; 0x1415c <SendConfigParamater+0x360>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 uart_printf(1,1,PSTR(">"));
   141c4:	81 e0       	ldi	r24, 0x01	; 1
   141c6:	61 e0       	ldi	r22, 0x01	; 1
   141c8:	45 ed       	ldi	r20, 0xD5	; 213
   141ca:	53 e2       	ldi	r21, 0x23	; 35
   141cc:	0e 94 16 aa 	call	0x1542c	; 0x1542c <uart_printf>
	 //End
}
   141d0:	cb 59       	subi	r28, 0x9B	; 155
   141d2:	df 4f       	sbci	r29, 0xFF	; 255
   141d4:	0f b6       	in	r0, 0x3f	; 63
   141d6:	f8 94       	cli
   141d8:	de bf       	out	0x3e, r29	; 62
   141da:	0f be       	out	0x3f, r0	; 63
   141dc:	cd bf       	out	0x3d, r28	; 61
   141de:	cf 91       	pop	r28
   141e0:	df 91       	pop	r29
   141e2:	1f 91       	pop	r17
   141e4:	0f 91       	pop	r16
   141e6:	ff 90       	pop	r15
   141e8:	ef 90       	pop	r14
   141ea:	df 90       	pop	r13
   141ec:	cf 90       	pop	r12
   141ee:	bf 90       	pop	r11
   141f0:	af 90       	pop	r10
   141f2:	9f 90       	pop	r9
   141f4:	8f 90       	pop	r8
   141f6:	08 95       	ret

000141f8 <SaveConfigParameter>:
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
   141f8:	6f 92       	push	r6
   141fa:	7f 92       	push	r7
   141fc:	8f 92       	push	r8
   141fe:	9f 92       	push	r9
   14200:	af 92       	push	r10
   14202:	bf 92       	push	r11
   14204:	cf 92       	push	r12
   14206:	df 92       	push	r13
   14208:	ef 92       	push	r14
   1420a:	ff 92       	push	r15
   1420c:	0f 93       	push	r16
   1420e:	1f 93       	push	r17
   14210:	df 93       	push	r29
   14212:	cf 93       	push	r28
   14214:	cd b7       	in	r28, 0x3d	; 61
   14216:	de b7       	in	r29, 0x3e	; 62
   14218:	c6 54       	subi	r28, 0x46	; 70
   1421a:	d0 40       	sbci	r29, 0x00	; 0
   1421c:	0f b6       	in	r0, 0x3f	; 63
   1421e:	f8 94       	cli
   14220:	de bf       	out	0x3e, r29	; 62
   14222:	0f be       	out	0x3f, r0	; 63
   14224:	cd bf       	out	0x3d, r28	; 61
char i,j;
char strEEPROM[50],xEEPROM;
unsigned int StrPos;
char strSend[20];
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
   14226:	00 d0       	rcall	.+0      	; 0x14228 <SaveConfigParameter+0x30>
   14228:	00 d0       	rcall	.+0      	; 0x1422a <SaveConfigParameter+0x32>
   1422a:	00 d0       	rcall	.+0      	; 0x1422c <SaveConfigParameter+0x34>
   1422c:	ed b7       	in	r30, 0x3d	; 61
   1422e:	fe b7       	in	r31, 0x3e	; 62
   14230:	31 96       	adiw	r30, 0x01	; 1
   14232:	8e 01       	movw	r16, r28
   14234:	0f 5f       	subi	r16, 0xFF	; 255
   14236:	1f 4f       	sbci	r17, 0xFF	; 255
   14238:	ad b7       	in	r26, 0x3d	; 61
   1423a:	be b7       	in	r27, 0x3e	; 62
   1423c:	12 96       	adiw	r26, 0x02	; 2
   1423e:	1c 93       	st	X, r17
   14240:	0e 93       	st	-X, r16
   14242:	11 97       	sbiw	r26, 0x01	; 1
   14244:	8f e0       	ldi	r24, 0x0F	; 15
   14246:	94 e2       	ldi	r25, 0x24	; 36
   14248:	93 83       	std	Z+3, r25	; 0x03
   1424a:	82 83       	std	Z+2, r24	; 0x02
   1424c:	80 91 8b 01 	lds	r24, 0x018B
   14250:	90 91 8c 01 	lds	r25, 0x018C
   14254:	95 83       	std	Z+5, r25	; 0x05
   14256:	84 83       	std	Z+4, r24	; 0x04
   14258:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	 uart_print(1,1,strSend);
   1425c:	ed b7       	in	r30, 0x3d	; 61
   1425e:	fe b7       	in	r31, 0x3e	; 62
   14260:	36 96       	adiw	r30, 0x06	; 6
   14262:	0f b6       	in	r0, 0x3f	; 63
   14264:	f8 94       	cli
   14266:	fe bf       	out	0x3e, r31	; 62
   14268:	0f be       	out	0x3f, r0	; 63
   1426a:	ed bf       	out	0x3d, r30	; 61
   1426c:	81 e0       	ldi	r24, 0x01	; 1
   1426e:	61 e0       	ldi	r22, 0x01	; 1
   14270:	a8 01       	movw	r20, r16
   14272:	0e 94 ee a9 	call	0x153dc	; 0x153dc <uart_print>

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   14276:	81 e0       	ldi	r24, 0x01	; 1
   14278:	61 e0       	ldi	r22, 0x01	; 1
   1427a:	46 e0       	ldi	r20, 0x06	; 6
   1427c:	54 e2       	ldi	r21, 0x24	; 36
   1427e:	0e 94 16 aa 	call	0x1542c	; 0x1542c <uart_printf>
   14282:	0d e2       	ldi	r16, 0x2D	; 45
   14284:	12 e0       	ldi	r17, 0x02	; 2
   14286:	e3 e2       	ldi	r30, 0x23	; 35
   14288:	ee 2e       	mov	r14, r30
   1428a:	e9 e0       	ldi	r30, 0x09	; 9
   1428c:	fe 2e       	mov	r15, r30
   1428e:	75 e1       	ldi	r23, 0x15	; 21
   14290:	a7 2e       	mov	r10, r23
   14292:	b1 2c       	mov	r11, r1
   14294:	ac 0e       	add	r10, r28
   14296:	bd 1e       	adc	r11, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   14298:	6d e3       	ldi	r22, 0x3D	; 61
   1429a:	c6 2e       	mov	r12, r22
   1429c:	d1 2c       	mov	r13, r1
   1429e:	cc 0e       	add	r12, r28
   142a0:	dd 1e       	adc	r13, r29
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   142a2:	d7 01       	movw	r26, r14
   142a4:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   142a6:	8d 91       	ld	r24, X+
   142a8:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   142aa:	ec 15       	cp	r30, r12
   142ac:	fd 05       	cpc	r31, r13
   142ae:	d9 f7       	brne	.-10     	; 0x142a6 <SaveConfigParameter+0xae>
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(40*i)),40);
		 strEEPROM[40]=0;
   142b0:	1d ae       	std	Y+61, r1	; 0x3d
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
   142b2:	c5 01       	movw	r24, r10
   142b4:	b8 01       	movw	r22, r16
   142b6:	49 e2       	ldi	r20, 0x29	; 41
   142b8:	50 e0       	ldi	r21, 0x00	; 0
   142ba:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
   142be:	07 5d       	subi	r16, 0xD7	; 215
   142c0:	1f 4f       	sbci	r17, 0xFF	; 255
   142c2:	88 e2       	ldi	r24, 0x28	; 40
   142c4:	90 e0       	ldi	r25, 0x00	; 0
   142c6:	e8 0e       	add	r14, r24
   142c8:	f9 1e       	adc	r15, r25
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   142ca:	93 e0       	ldi	r25, 0x03	; 3
   142cc:	07 3c       	cpi	r16, 0xC7	; 199
   142ce:	19 07       	cpc	r17, r25
   142d0:	41 f7       	brne	.-48     	; 0x142a2 <SaveConfigParameter+0xaa>
   142d2:	00 ec       	ldi	r16, 0xC0	; 192
   142d4:	10 e0       	ldi	r17, 0x00	; 0
   142d6:	53 eb       	ldi	r21, 0xB3	; 179
   142d8:	e5 2e       	mov	r14, r21
   142da:	5a e0       	ldi	r21, 0x0A	; 10
   142dc:	f5 2e       	mov	r15, r21
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   142de:	45 e1       	ldi	r20, 0x15	; 21
   142e0:	c4 2e       	mov	r12, r20
   142e2:	d1 2c       	mov	r13, r1
   142e4:	cc 0e       	add	r12, r28
   142e6:	dd 1e       	adc	r13, r29
   142e8:	31 e2       	ldi	r19, 0x21	; 33
   142ea:	83 2e       	mov	r8, r19
   142ec:	91 2c       	mov	r9, r1
   142ee:	8c 0e       	add	r8, r28
   142f0:	9d 1e       	adc	r9, r29
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   142f2:	d7 01       	movw	r26, r14
   142f4:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   142f6:	8d 91       	ld	r24, X+
   142f8:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   142fa:	e8 15       	cp	r30, r8
   142fc:	f9 05       	cpc	r31, r9
   142fe:	d9 f7       	brne	.-10     	; 0x142f6 <SaveConfigParameter+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   14300:	19 a2       	std	Y+33, r1	; 0x21
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(12*i)),12);
		 RemSpaceLag(strEEPROM);
   14302:	c6 01       	movw	r24, r12
   14304:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		 strEEPROM[strlen(strEEPROM)]=0;
   14308:	f6 01       	movw	r30, r12
   1430a:	01 90       	ld	r0, Z+
   1430c:	00 20       	and	r0, r0
   1430e:	e9 f7       	brne	.-6      	; 0x1430a <SaveConfigParameter+0x112>
   14310:	31 97       	sbiw	r30, 0x01	; 1
   14312:	10 82       	st	Z, r1
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductName[i],sizeof(DefProductName[i]));
   14314:	c6 01       	movw	r24, r12
   14316:	b8 01       	movw	r22, r16
   14318:	4d e0       	ldi	r20, 0x0D	; 13
   1431a:	50 e0       	ldi	r21, 0x00	; 0
   1431c:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
   14320:	03 5f       	subi	r16, 0xF3	; 243
   14322:	1f 4f       	sbci	r17, 0xFF	; 255
   14324:	ac e0       	ldi	r26, 0x0C	; 12
   14326:	b0 e0       	ldi	r27, 0x00	; 0
   14328:	ea 0e       	add	r14, r26
   1432a:	fb 1e       	adc	r15, r27
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   1432c:	b1 e0       	ldi	r27, 0x01	; 1
   1432e:	0e 30       	cpi	r16, 0x0E	; 14
   14330:	1b 07       	cpc	r17, r27
   14332:	f9 f6       	brne	.-66     	; 0x142f2 <SaveConfigParameter+0xfa>
   14334:	0a e8       	ldi	r16, 0x8A	; 138
   14336:	10 e0       	ldi	r17, 0x00	; 0
   14338:	2b ef       	ldi	r18, 0xFB	; 251
   1433a:	e2 2e       	mov	r14, r18
   1433c:	2a e0       	ldi	r18, 0x0A	; 10
   1433e:	f2 2e       	mov	r15, r18
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   14340:	95 e1       	ldi	r25, 0x15	; 21
   14342:	c9 2e       	mov	r12, r25
   14344:	d1 2c       	mov	r13, r1
   14346:	cc 0e       	add	r12, r28
   14348:	dd 1e       	adc	r13, r29
   1434a:	8a e1       	ldi	r24, 0x1A	; 26
   1434c:	88 2e       	mov	r8, r24
   1434e:	91 2c       	mov	r9, r1
   14350:	8c 0e       	add	r8, r28
   14352:	9d 1e       	adc	r9, r29
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   14354:	d7 01       	movw	r26, r14
   14356:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14358:	8d 91       	ld	r24, X+
   1435a:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1435c:	e8 15       	cp	r30, r8
   1435e:	f9 05       	cpc	r31, r9
   14360:	d9 f7       	brne	.-10     	; 0x14358 <SaveConfigParameter+0x160>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   14362:	1a 8e       	std	Y+26, r1	; 0x1a
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(5*i)),5);
		 RemSpaceLag(strEEPROM);
   14364:	c6 01       	movw	r24, r12
   14366:	0e 94 e5 25 	call	0x4bca	; 0x4bca <RemSpaceLag>
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   1436a:	c6 01       	movw	r24, r12
   1436c:	b8 01       	movw	r22, r16
   1436e:	49 e0       	ldi	r20, 0x09	; 9
   14370:	50 e0       	ldi	r21, 0x00	; 0
   14372:	0e 94 4d ae 	call	0x15c9a	; 0x15c9a <__eewr_block_m128>
   14376:	07 5f       	subi	r16, 0xF7	; 247
   14378:	1f 4f       	sbci	r17, 0xFF	; 255
   1437a:	e5 e0       	ldi	r30, 0x05	; 5
   1437c:	f0 e0       	ldi	r31, 0x00	; 0
   1437e:	ee 0e       	add	r14, r30
   14380:	ff 1e       	adc	r15, r31
		// uart_print(1,1,strEEPROM);

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
   14382:	f0 e0       	ldi	r31, 0x00	; 0
   14384:	00 3c       	cpi	r16, 0xC0	; 192
   14386:	1f 07       	cpc	r17, r31
   14388:	29 f7       	brne	.-54     	; 0x14354 <SaveConfigParameter+0x15c>
   1438a:	19 e1       	ldi	r17, 0x19	; 25
   1438c:	e1 2e       	mov	r14, r17
   1438e:	1b e0       	ldi	r17, 0x0B	; 11
   14390:	f1 2e       	mov	r15, r17
   14392:	ba e4       	ldi	r27, 0x4A	; 74
   14394:	cb 2e       	mov	r12, r27
   14396:	b0 e0       	ldi	r27, 0x00	; 0
   14398:	db 2e       	mov	r13, r27
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1439a:	a5 e1       	ldi	r26, 0x15	; 21
   1439c:	aa 2e       	mov	r10, r26
   1439e:	b1 2c       	mov	r11, r1
   143a0:	ac 0e       	add	r10, r28
   143a2:	bd 1e       	adc	r11, r29
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   143a4:	3e 01       	movw	r6, r28
   143a6:	08 94       	sec
   143a8:	61 1c       	adc	r6, r1
   143aa:	71 1c       	adc	r7, r1
   143ac:	f3 e0       	ldi	r31, 0x03	; 3
   143ae:	8f 2e       	mov	r8, r31
   143b0:	f4 e2       	ldi	r31, 0x24	; 36
   143b2:	9f 2e       	mov	r9, r31
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   143b4:	d7 01       	movw	r26, r14
   143b6:	8c 91       	ld	r24, X
   143b8:	8d 8b       	std	Y+21, r24	; 0x15
   143ba:	11 96       	adiw	r26, 0x01	; 1
   143bc:	8c 91       	ld	r24, X
   143be:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   143c0:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   143c2:	c5 01       	movw	r24, r10
   143c4:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   143c8:	c5 01       	movw	r24, r10
   143ca:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
   143ce:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
   143d0:	c6 01       	movw	r24, r12
   143d2:	61 2f       	mov	r22, r17
   143d4:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   143d8:	00 d0       	rcall	.+0      	; 0x143da <SaveConfigParameter+0x1e2>
   143da:	00 d0       	rcall	.+0      	; 0x143dc <SaveConfigParameter+0x1e4>
   143dc:	00 d0       	rcall	.+0      	; 0x143de <SaveConfigParameter+0x1e6>
   143de:	ed b7       	in	r30, 0x3d	; 61
   143e0:	fe b7       	in	r31, 0x3e	; 62
   143e2:	31 96       	adiw	r30, 0x01	; 1
   143e4:	ad b7       	in	r26, 0x3d	; 61
   143e6:	be b7       	in	r27, 0x3e	; 62
   143e8:	12 96       	adiw	r26, 0x02	; 2
   143ea:	7c 92       	st	X, r7
   143ec:	6e 92       	st	-X, r6
   143ee:	11 97       	sbiw	r26, 0x01	; 1
   143f0:	93 82       	std	Z+3, r9	; 0x03
   143f2:	82 82       	std	Z+2, r8	; 0x02
   143f4:	14 83       	std	Z+4, r17	; 0x04
   143f6:	15 82       	std	Z+5, r1	; 0x05
   143f8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   143fc:	e2 e0       	ldi	r30, 0x02	; 2
   143fe:	f0 e0       	ldi	r31, 0x00	; 0
   14400:	ee 0e       	add	r14, r30
   14402:	ff 1e       	adc	r15, r31
   14404:	08 94       	sec
   14406:	c1 1c       	adc	r12, r1
   14408:	d1 1c       	adc	r13, r1
		// uart_print(1,1,strEEPROM);

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
   1440a:	8d b7       	in	r24, 0x3d	; 61
   1440c:	9e b7       	in	r25, 0x3e	; 62
   1440e:	06 96       	adiw	r24, 0x06	; 6
   14410:	0f b6       	in	r0, 0x3f	; 63
   14412:	f8 94       	cli
   14414:	9e bf       	out	0x3e, r25	; 62
   14416:	0f be       	out	0x3f, r0	; 63
   14418:	8d bf       	out	0x3d, r24	; 61
   1441a:	99 e2       	ldi	r25, 0x29	; 41
   1441c:	e9 16       	cp	r14, r25
   1441e:	9b e0       	ldi	r25, 0x0B	; 11
   14420:	f9 06       	cpc	r15, r25
   14422:	41 f6       	brne	.-112    	; 0x143b4 <SaveConfigParameter+0x1bc>
   14424:	ea e5       	ldi	r30, 0x5A	; 90
   14426:	ce 2e       	mov	r12, r30
   14428:	e0 e0       	ldi	r30, 0x00	; 0
   1442a:	de 2e       	mov	r13, r30
   1442c:	57 01       	movw	r10, r14
   1442e:	1d c0       	rjmp	.+58     	; 0x1446a <SaveConfigParameter+0x272>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   14430:	d7 01       	movw	r26, r14
   14432:	6c 91       	ld	r22, X
   14434:	60 53       	subi	r22, 0x30	; 48
   14436:	6a 30       	cpi	r22, 0x0A	; 10
   14438:	08 f0       	brcs	.+2      	; 0x1443c <SaveConfigParameter+0x244>
   1443a:	60 e0       	ldi	r22, 0x00	; 0
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
              xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos+(i*6+j)));
		      eeprom_write_byte(&DefNozzleMap[i][j],xEEPROM);
   1443c:	c8 01       	movw	r24, r16
   1443e:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
   14442:	93 94       	inc	r9
   14444:	08 94       	sec
   14446:	e1 1c       	adc	r14, r1
   14448:	f1 1c       	adc	r15, r1
   1444a:	0f 5f       	subi	r16, 0xFF	; 255
   1444c:	1f 4f       	sbci	r17, 0xFF	; 255
   1444e:	b6 e0       	ldi	r27, 0x06	; 6
   14450:	9b 16       	cp	r9, r27
   14452:	71 f7       	brne	.-36     	; 0x14430 <SaveConfigParameter+0x238>
   14454:	e6 e0       	ldi	r30, 0x06	; 6
   14456:	f0 e0       	ldi	r31, 0x00	; 0
   14458:	ce 0e       	add	r12, r30
   1445a:	df 1e       	adc	r13, r31
   1445c:	ae 0e       	add	r10, r30
   1445e:	bf 1e       	adc	r11, r31
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
   14460:	fa e8       	ldi	r31, 0x8A	; 138
   14462:	cf 16       	cp	r12, r31
   14464:	f0 e0       	ldi	r31, 0x00	; 0
   14466:	df 06       	cpc	r13, r31
   14468:	21 f0       	breq	.+8      	; 0x14472 <SaveConfigParameter+0x27a>
   1446a:	75 01       	movw	r14, r10
   1446c:	86 01       	movw	r16, r12
   1446e:	99 24       	eor	r9, r9
   14470:	df cf       	rjmp	.-66     	; 0x14430 <SaveConfigParameter+0x238>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   14472:	80 91 59 0b 	lds	r24, 0x0B59
   14476:	80 53       	subi	r24, 0x30	; 48
   14478:	8a 30       	cpi	r24, 0x0A	; 10
   1447a:	10 f0       	brcs	.+4      	; 0x14480 <SaveConfigParameter+0x288>
   1447c:	60 e0       	ldi	r22, 0x00	; 0
   1447e:	03 c0       	rjmp	.+6      	; 0x14486 <SaveConfigParameter+0x28e>
   14480:	68 2f       	mov	r22, r24
   14482:	81 11       	cpse	r24, r1
   14484:	61 e0       	ldi	r22, 0x01	; 1
	 //PrintNoMoney
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8);
	 xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos));
	 if (xEEPROM==0)xEEPROM=False;
	 else xEEPROM=True;
	 eeprom_write_byte(&DefPrintMoney,xEEPROM);
   14486:	87 ec       	ldi	r24, 0xC7	; 199
   14488:	93 e0       	ldi	r25, 0x03	; 3
   1448a:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1448e:	80 91 5a 0b 	lds	r24, 0x0B5A
   14492:	8d 8b       	std	Y+21, r24	; 0x15
   14494:	80 91 5b 0b 	lds	r24, 0x0B5B
   14498:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   1449a:	1f 8a       	std	Y+23, r1	; 0x17

	 //TermID
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1;
     FillChar(strEEPROM,0,sizeof(strEEPROM));   
	 StrPosCopy(rcv_trans,strEEPROM,StrPos,2);
	 RemZeroLead(strEEPROM);
   1449c:	75 e1       	ldi	r23, 0x15	; 21
   1449e:	e7 2e       	mov	r14, r23
   144a0:	f1 2c       	mov	r15, r1
   144a2:	ec 0e       	add	r14, r28
   144a4:	fd 1e       	adc	r15, r29
   144a6:	c7 01       	movw	r24, r14
   144a8:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
	 xEEPROM=atoi(strEEPROM);
   144ac:	c7 01       	movw	r24, r14
   144ae:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
   144b2:	d8 2e       	mov	r13, r24
	 eeprom_write_byte(&DefIFT_ID,xEEPROM);
   144b4:	80 e0       	ldi	r24, 0x00	; 0
   144b6:	90 e0       	ldi	r25, 0x00	; 0
   144b8:	6d 2d       	mov	r22, r13
   144ba:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   144be:	00 d0       	rcall	.+0      	; 0x144c0 <SaveConfigParameter+0x2c8>
   144c0:	00 d0       	rcall	.+0      	; 0x144c2 <SaveConfigParameter+0x2ca>
   144c2:	00 d0       	rcall	.+0      	; 0x144c4 <SaveConfigParameter+0x2cc>
   144c4:	ed b7       	in	r30, 0x3d	; 61
   144c6:	fe b7       	in	r31, 0x3e	; 62
   144c8:	31 96       	adiw	r30, 0x01	; 1
   144ca:	8e 01       	movw	r16, r28
   144cc:	0f 5f       	subi	r16, 0xFF	; 255
   144ce:	1f 4f       	sbci	r17, 0xFF	; 255
   144d0:	ad b7       	in	r26, 0x3d	; 61
   144d2:	be b7       	in	r27, 0x3e	; 62
   144d4:	12 96       	adiw	r26, 0x02	; 2
   144d6:	1c 93       	st	X, r17
   144d8:	0e 93       	st	-X, r16
   144da:	11 97       	sbiw	r26, 0x01	; 1
   144dc:	80 e0       	ldi	r24, 0x00	; 0
   144de:	94 e2       	ldi	r25, 0x24	; 36
   144e0:	93 83       	std	Z+3, r25	; 0x03
   144e2:	82 83       	std	Z+2, r24	; 0x02
   144e4:	d4 82       	std	Z+4, r13	; 0x04
   144e6:	15 82       	std	Z+5, r1	; 0x05
   144e8:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   144ec:	6c e5       	ldi	r22, 0x5C	; 92
   144ee:	c6 2e       	mov	r12, r22
   144f0:	6b e0       	ldi	r22, 0x0B	; 11
   144f2:	d6 2e       	mov	r13, r22
   144f4:	52 e5       	ldi	r21, 0x52	; 82
   144f6:	a5 2e       	mov	r10, r21
   144f8:	50 e0       	ldi	r21, 0x00	; 0
   144fa:	b5 2e       	mov	r11, r21
   144fc:	ed b7       	in	r30, 0x3d	; 61
   144fe:	fe b7       	in	r31, 0x3e	; 62
   14500:	36 96       	adiw	r30, 0x06	; 6
   14502:	0f b6       	in	r0, 0x3f	; 63
   14504:	f8 94       	cli
   14506:	fe bf       	out	0x3e, r31	; 62
   14508:	0f be       	out	0x3f, r0	; 63
   1450a:	ed bf       	out	0x3d, r30	; 61
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1450c:	9e 2c       	mov	r9, r14
   1450e:	ef 2c       	mov	r14, r15
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14510:	f0 2e       	mov	r15, r16
   14512:	01 2f       	mov	r16, r17
   14514:	4d ef       	ldi	r20, 0xFD	; 253
   14516:	64 2e       	mov	r6, r20
   14518:	43 e2       	ldi	r20, 0x23	; 35
   1451a:	74 2e       	mov	r7, r20
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1451c:	d6 01       	movw	r26, r12
   1451e:	8c 91       	ld	r24, X
   14520:	8d 8b       	std	Y+21, r24	; 0x15
   14522:	11 96       	adiw	r26, 0x01	; 1
   14524:	8c 91       	ld	r24, X
   14526:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   14528:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1452a:	89 2d       	mov	r24, r9
   1452c:	9e 2d       	mov	r25, r14
   1452e:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   14532:	89 2d       	mov	r24, r9
   14534:	9e 2d       	mov	r25, r14
   14536:	0e 94 c2 ab 	call	0x15784	; 0x15784 <atoi>
   1453a:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
   1453c:	c5 01       	movw	r24, r10
   1453e:	61 2f       	mov	r22, r17
   14540:	0e 94 57 ae 	call	0x15cae	; 0x15cae <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14544:	00 d0       	rcall	.+0      	; 0x14546 <SaveConfigParameter+0x34e>
   14546:	00 d0       	rcall	.+0      	; 0x14548 <SaveConfigParameter+0x350>
   14548:	00 d0       	rcall	.+0      	; 0x1454a <SaveConfigParameter+0x352>
   1454a:	ed b7       	in	r30, 0x3d	; 61
   1454c:	fe b7       	in	r31, 0x3e	; 62
   1454e:	31 96       	adiw	r30, 0x01	; 1
   14550:	ad b7       	in	r26, 0x3d	; 61
   14552:	be b7       	in	r27, 0x3e	; 62
   14554:	11 96       	adiw	r26, 0x01	; 1
   14556:	fc 92       	st	X, r15
   14558:	11 97       	sbiw	r26, 0x01	; 1
   1455a:	12 96       	adiw	r26, 0x02	; 2
   1455c:	0c 93       	st	X, r16
   1455e:	73 82       	std	Z+3, r7	; 0x03
   14560:	62 82       	std	Z+2, r6	; 0x02
   14562:	14 83       	std	Z+4, r17	; 0x04
   14564:	15 82       	std	Z+5, r1	; 0x05
   14566:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
   1456a:	e2 e0       	ldi	r30, 0x02	; 2
   1456c:	f0 e0       	ldi	r31, 0x00	; 0
   1456e:	ce 0e       	add	r12, r30
   14570:	df 1e       	adc	r13, r31
   14572:	08 94       	sec
   14574:	a1 1c       	adc	r10, r1
   14576:	b1 1c       	adc	r11, r1
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
   14578:	8d b7       	in	r24, 0x3d	; 61
   1457a:	9e b7       	in	r25, 0x3e	; 62
   1457c:	06 96       	adiw	r24, 0x06	; 6
   1457e:	0f b6       	in	r0, 0x3f	; 63
   14580:	f8 94       	cli
   14582:	9e bf       	out	0x3e, r25	; 62
   14584:	0f be       	out	0x3f, r0	; 63
   14586:	8d bf       	out	0x3d, r24	; 61
   14588:	9c e6       	ldi	r25, 0x6C	; 108
   1458a:	c9 16       	cp	r12, r25
   1458c:	9b e0       	ldi	r25, 0x0B	; 11
   1458e:	d9 06       	cpc	r13, r25
   14590:	29 f6       	brne	.-118    	; 0x1451c <SaveConfigParameter+0x324>
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//		 uart_print(1,1,strSend); 
	 }    
	 uart_printf(1,1,PSTR("<OK>")); 
   14592:	81 e0       	ldi	r24, 0x01	; 1
   14594:	61 e0       	ldi	r22, 0x01	; 1
   14596:	48 ef       	ldi	r20, 0xF8	; 248
   14598:	53 e2       	ldi	r21, 0x23	; 35
   1459a:	0e 94 16 aa 	call	0x1542c	; 0x1542c <uart_printf>
}
   1459e:	ca 5b       	subi	r28, 0xBA	; 186
   145a0:	df 4f       	sbci	r29, 0xFF	; 255
   145a2:	0f b6       	in	r0, 0x3f	; 63
   145a4:	f8 94       	cli
   145a6:	de bf       	out	0x3e, r29	; 62
   145a8:	0f be       	out	0x3f, r0	; 63
   145aa:	cd bf       	out	0x3d, r28	; 61
   145ac:	cf 91       	pop	r28
   145ae:	df 91       	pop	r29
   145b0:	1f 91       	pop	r17
   145b2:	0f 91       	pop	r16
   145b4:	ff 90       	pop	r15
   145b6:	ef 90       	pop	r14
   145b8:	df 90       	pop	r13
   145ba:	cf 90       	pop	r12
   145bc:	bf 90       	pop	r11
   145be:	af 90       	pop	r10
   145c0:	9f 90       	pop	r9
   145c2:	8f 90       	pop	r8
   145c4:	7f 90       	pop	r7
   145c6:	6f 90       	pop	r6
   145c8:	08 95       	ret

000145ca <systemConfigProtocol>:



void systemConfigProtocol(){
     static char stConfigProtocol=cpWaitSend;
	 switch(stConfigProtocol){
   145ca:	80 91 a5 02 	lds	r24, 0x02A5
   145ce:	81 30       	cpi	r24, 0x01	; 1
   145d0:	c1 f0       	breq	.+48     	; 0x14602 <systemConfigProtocol+0x38>
   145d2:	81 30       	cpi	r24, 0x01	; 1
   145d4:	18 f0       	brcs	.+6      	; 0x145dc <systemConfigProtocol+0x12>
   145d6:	82 30       	cpi	r24, 0x02	; 2
   145d8:	e9 f4       	brne	.+58     	; 0x14614 <systemConfigProtocol+0x4a>
   145da:	18 c0       	rjmp	.+48     	; 0x1460c <systemConfigProtocol+0x42>
	 case cpWaitSend:
	      switch(ConfigCommand){
   145dc:	80 91 b2 01 	lds	r24, 0x01B2
   145e0:	81 30       	cpi	r24, 0x01	; 1
   145e2:	31 f0       	breq	.+12     	; 0x145f0 <systemConfigProtocol+0x26>
   145e4:	82 30       	cpi	r24, 0x02	; 2
   145e6:	51 f4       	brne	.+20     	; 0x145fc <systemConfigProtocol+0x32>
		  case CC_SEND_CONFIG:
		       ConfigCommand=CC_NONE;
   145e8:	10 92 b2 01 	sts	0x01B2, r1
			   stConfigProtocol=cpSendingParameter;
   145ec:	81 e0       	ldi	r24, 0x01	; 1
   145ee:	03 c0       	rjmp	.+6      	; 0x145f6 <systemConfigProtocol+0x2c>
		       break;
		  case CC_SAVE_CONFIG:
		       ConfigCommand=CC_NONE;
   145f0:	10 92 b2 01 	sts	0x01B2, r1
			   stConfigProtocol=cpSavingParameter;
   145f4:	82 e0       	ldi	r24, 0x02	; 2
   145f6:	80 93 a5 02 	sts	0x02A5, r24
   145fa:	08 95       	ret
		       break;
          default:
		       ConfigCommand=CC_NONE;
   145fc:	10 92 b2 01 	sts	0x01B2, r1
   14600:	08 95       	ret
		       break;
		  }
	      break;
     case cpSendingParameter:
	      SendConfigParamater();
   14602:	0e 94 fe 9e 	call	0x13dfc	; 0x13dfc <SendConfigParamater>
          stConfigProtocol=cpWaitSend;
   14606:	10 92 a5 02 	sts	0x02A5, r1
   1460a:	08 95       	ret
	      break;
     case cpSavingParameter:
          SaveConfigParameter();
   1460c:	0e 94 fc a0 	call	0x141f8	; 0x141f8 <SaveConfigParameter>
          stConfigProtocol=cpWaitSend;
   14610:	10 92 a5 02 	sts	0x02A5, r1
   14614:	08 95       	ret

00014616 <FMenuIdle>:
	     ProcTimeOut++;
	}
	TimSend++;
}

void FMenuIdle(){
   14616:	1f 93       	push	r17
	static char stMenuIdle=miInit,ButtonID=0;
	       char PrintStandaloneResult=PS_NONE;
	       char KeyPressed=0,KeyChar=0;
	       char lcdteks[20];

	switch(stMenuIdle){
   14618:	80 91 b1 02 	lds	r24, 0x02B1
   1461c:	e8 2f       	mov	r30, r24
   1461e:	f0 e0       	ldi	r31, 0x00	; 0
   14620:	e9 31       	cpi	r30, 0x19	; 25
   14622:	f1 05       	cpc	r31, r1
   14624:	08 f0       	brcs	.+2      	; 0x14628 <FMenuIdle+0x12>
   14626:	7e c1       	rjmp	.+764    	; 0x14924 <FMenuIdle+0x30e>
   14628:	ea 5d       	subi	r30, 0xDA	; 218
   1462a:	fe 4f       	sbci	r31, 0xFE	; 254
   1462c:	ee 0f       	add	r30, r30
   1462e:	ff 1f       	adc	r31, r31
   14630:	05 90       	lpm	r0, Z+
   14632:	f4 91       	lpm	r31, Z+
   14634:	e0 2d       	mov	r30, r0
   14636:	09 94       	ijmp
	case miInit:
         DisplayScreenIdle();
   14638:	0e 94 bb 49 	call	0x9376	; 0x9376 <DisplayScreenIdle>
   1463c:	3a c1       	rjmp	.+628    	; 0x148b2 <FMenuIdle+0x29c>
		 stMenuIdle=miScan;		
	     break;
	case miScan:
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
   1463e:	81 e0       	ldi	r24, 0x01	; 1
   14640:	0e 94 6c a7 	call	0x14ed8	; 0x14ed8 <_key_scan>
   14644:	18 2f       	mov	r17, r24
		 KeyChar= _key_btn(KeyPressed);       
   14646:	0e 94 c7 a6 	call	0x14d8e	; 0x14d8e <_key_btn>

		 switch(KeyPressed){
   1464a:	1b 3b       	cpi	r17, 0xBB	; 187
   1464c:	09 f4       	brne	.+2      	; 0x14650 <FMenuIdle+0x3a>
   1464e:	7a c0       	rjmp	.+244    	; 0x14744 <FMenuIdle+0x12e>
   14650:	1c 3b       	cpi	r17, 0xBC	; 188
   14652:	70 f4       	brcc	.+28     	; 0x14670 <FMenuIdle+0x5a>
   14654:	1b 37       	cpi	r17, 0x7B	; 123
   14656:	69 f1       	breq	.+90     	; 0x146b2 <FMenuIdle+0x9c>
   14658:	1c 37       	cpi	r17, 0x7C	; 124
   1465a:	20 f4       	brcc	.+8      	; 0x14664 <FMenuIdle+0x4e>
   1465c:	17 37       	cpi	r17, 0x77	; 119
   1465e:	09 f0       	breq	.+2      	; 0x14662 <FMenuIdle+0x4c>
   14660:	61 c1       	rjmp	.+706    	; 0x14924 <FMenuIdle+0x30e>
   14662:	2e c0       	rjmp	.+92     	; 0x146c0 <FMenuIdle+0xaa>
   14664:	1d 37       	cpi	r17, 0x7D	; 125
   14666:	e9 f0       	breq	.+58     	; 0x146a2 <FMenuIdle+0x8c>
   14668:	1e 37       	cpi	r17, 0x7E	; 126
   1466a:	09 f0       	breq	.+2      	; 0x1466e <FMenuIdle+0x58>
   1466c:	5b c1       	rjmp	.+694    	; 0x14924 <FMenuIdle+0x30e>
   1466e:	12 c0       	rjmp	.+36     	; 0x14694 <FMenuIdle+0x7e>
   14670:	1d 3d       	cpi	r17, 0xDD	; 221
   14672:	09 f4       	brne	.+2      	; 0x14676 <FMenuIdle+0x60>
   14674:	4f c0       	rjmp	.+158    	; 0x14714 <FMenuIdle+0xfe>
   14676:	1e 3d       	cpi	r17, 0xDE	; 222
   14678:	38 f4       	brcc	.+14     	; 0x14688 <FMenuIdle+0x72>
   1467a:	1d 3b       	cpi	r17, 0xBD	; 189
   1467c:	09 f4       	brne	.+2      	; 0x14680 <FMenuIdle+0x6a>
   1467e:	56 c0       	rjmp	.+172    	; 0x1472c <FMenuIdle+0x116>
   14680:	17 3d       	cpi	r17, 0xD7	; 215
   14682:	09 f0       	breq	.+2      	; 0x14686 <FMenuIdle+0x70>
   14684:	4f c1       	rjmp	.+670    	; 0x14924 <FMenuIdle+0x30e>
   14686:	27 c0       	rjmp	.+78     	; 0x146d6 <FMenuIdle+0xc0>
   14688:	1e 3d       	cpi	r17, 0xDE	; 222
   1468a:	61 f1       	breq	.+88     	; 0x146e4 <FMenuIdle+0xce>
   1468c:	1d 3e       	cpi	r17, 0xED	; 237
   1468e:	09 f0       	breq	.+2      	; 0x14692 <FMenuIdle+0x7c>
   14690:	49 c1       	rjmp	.+658    	; 0x14924 <FMenuIdle+0x30e>
   14692:	34 c0       	rjmp	.+104    	; 0x146fc <FMenuIdle+0xe6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14694:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14696:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14698:	92 e0       	ldi	r25, 0x02	; 2
   1469a:	90 93 be 01 	sts	0x01BE, r25
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
   1469e:	81 e0       	ldi	r24, 0x01	; 1
   146a0:	15 c0       	rjmp	.+42     	; 0x146cc <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   146a2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   146a4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   146a6:	82 e0       	ldi	r24, 0x02	; 2
   146a8:	80 93 be 01 	sts	0x01BE, r24
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
   146ac:	80 93 b0 02 	sts	0x02B0, r24
   146b0:	37 c1       	rjmp	.+622    	; 0x14920 <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   146b2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   146b4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   146b6:	92 e0       	ldi	r25, 0x02	; 2
   146b8:	90 93 be 01 	sts	0x01BE, r25
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
   146bc:	83 e0       	ldi	r24, 0x03	; 3
   146be:	06 c0       	rjmp	.+12     	; 0x146cc <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   146c0:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   146c2:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   146c4:	92 e0       	ldi	r25, 0x02	; 2
   146c6:	90 93 be 01 	sts	0x01BE, r25

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
   146ca:	84 e0       	ldi	r24, 0x04	; 4
   146cc:	80 93 b0 02 	sts	0x02B0, r24
   146d0:	90 93 b1 02 	sts	0x02B1, r25
   146d4:	27 c1       	rjmp	.+590    	; 0x14924 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   146d6:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   146d8:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   146da:	82 e0       	ldi	r24, 0x02	; 2
   146dc:	80 93 be 01 	sts	0x01BE, r24
		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
   146e0:	8c e0       	ldi	r24, 0x0C	; 12
   146e2:	1e c1       	rjmp	.+572    	; 0x14920 <FMenuIdle+0x30a>
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
	     //case _KEY_1:    system_beep(2);           stMenuIdle=miRunLocalAccount; break;	   
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   146e4:	80 91 00 01 	lds	r24, 0x0100
   146e8:	81 30       	cpi	r24, 0x01	; 1
   146ea:	09 f0       	breq	.+2      	; 0x146ee <FMenuIdle+0xd8>
   146ec:	1b c1       	rjmp	.+566    	; 0x14924 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   146ee:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   146f0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   146f2:	82 e0       	ldi	r24, 0x02	; 2
   146f4:	80 93 be 01 	sts	0x01BE, r24
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
	     //case _KEY_1:    system_beep(2);           stMenuIdle=miRunLocalAccount; break;	   
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   146f8:	80 e1       	ldi	r24, 0x10	; 16
   146fa:	12 c1       	rjmp	.+548    	; 0x14920 <FMenuIdle+0x30a>
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   146fc:	80 91 00 01 	lds	r24, 0x0100
   14700:	81 30       	cpi	r24, 0x01	; 1
   14702:	09 f0       	breq	.+2      	; 0x14706 <FMenuIdle+0xf0>
   14704:	0f c1       	rjmp	.+542    	; 0x14924 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14706:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14708:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1470a:	82 e0       	ldi	r24, 0x02	; 2
   1470c:	80 93 be 01 	sts	0x01BE, r24
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
	     //case _KEY_1:    system_beep(2);           stMenuIdle=miRunLocalAccount; break;	   
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   14710:	82 e1       	ldi	r24, 0x12	; 18
   14712:	06 c1       	rjmp	.+524    	; 0x14920 <FMenuIdle+0x30a>
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   14714:	80 91 00 01 	lds	r24, 0x0100
   14718:	81 30       	cpi	r24, 0x01	; 1
   1471a:	09 f0       	breq	.+2      	; 0x1471e <FMenuIdle+0x108>
   1471c:	03 c1       	rjmp	.+518    	; 0x14924 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1471e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14720:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14722:	82 e0       	ldi	r24, 0x02	; 2
   14724:	80 93 be 01 	sts	0x01BE, r24
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
	     //case _KEY_1:    system_beep(2);           stMenuIdle=miRunLocalAccount; break;	   
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   14728:	81 e1       	ldi	r24, 0x11	; 17
   1472a:	fa c0       	rjmp	.+500    	; 0x14920 <FMenuIdle+0x30a>
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   1472c:	80 91 00 01 	lds	r24, 0x0100
   14730:	81 30       	cpi	r24, 0x01	; 1
   14732:	09 f0       	breq	.+2      	; 0x14736 <FMenuIdle+0x120>
   14734:	f7 c0       	rjmp	.+494    	; 0x14924 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14736:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14738:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1473a:	82 e0       	ldi	r24, 0x02	; 2
   1473c:	80 93 be 01 	sts	0x01BE, r24
	     //case _KEY_1:    system_beep(2);           stMenuIdle=miRunLocalAccount; break;	   
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   14740:	8f e0       	ldi	r24, 0x0F	; 15
   14742:	ee c0       	rjmp	.+476    	; 0x14920 <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14744:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14746:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14748:	82 e0       	ldi	r24, 0x02	; 2
   1474a:	80 93 be 01 	sts	0x01BE, r24
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
		 //case _KEY_8:    system_beep(2);           stMenuIdle=miRunTestChar;   break;
		 case _KEY_9:    system_beep(2);stMenuIdle=miRunAuth;      break;
   1474e:	8d e0       	ldi	r24, 0x0D	; 13
   14750:	e7 c0       	rjmp	.+462    	; 0x14920 <FMenuIdle+0x30a>
		 }
	     break;
    case miTestMsg56:
	     sprintf_P(strCardID,PSTR("4356A31A"));
   14752:	00 d0       	rcall	.+0      	; 0x14754 <FMenuIdle+0x13e>
   14754:	00 d0       	rcall	.+0      	; 0x14756 <FMenuIdle+0x140>
   14756:	8f e8       	ldi	r24, 0x8F	; 143
   14758:	9b e0       	ldi	r25, 0x0B	; 11
   1475a:	ed b7       	in	r30, 0x3d	; 61
   1475c:	fe b7       	in	r31, 0x3e	; 62
   1475e:	92 83       	std	Z+2, r25	; 0x02
   14760:	81 83       	std	Z+1, r24	; 0x01
   14762:	87 e2       	ldi	r24, 0x27	; 39
   14764:	95 e2       	ldi	r25, 0x25	; 37
   14766:	94 83       	std	Z+4, r25	; 0x04
   14768:	83 83       	std	Z+3, r24	; 0x03
   1476a:	0e 94 f8 ab 	call	0x157f0	; 0x157f0 <sprintf_P>
	     sendMessage56();
   1476e:	0f 90       	pop	r0
   14770:	0f 90       	pop	r0
   14772:	0f 90       	pop	r0
   14774:	0f 90       	pop	r0
   14776:	0e 94 6d 80 	call	0x100da	; 0x100da <sendMessage56>
         stMenuIdle=miDisplayProses;
   1477a:	82 e0       	ldi	r24, 0x02	; 2
   1477c:	d1 c0       	rjmp	.+418    	; 0x14920 <FMenuIdle+0x30a>
	     break;
	case miDisplayProses:
	     if (IsBusyIdlePrinting==False){
   1477e:	80 91 b4 01 	lds	r24, 0x01B4
   14782:	88 23       	and	r24, r24
   14784:	09 f0       	breq	.+2      	; 0x14788 <FMenuIdle+0x172>
   14786:	95 c0       	rjmp	.+298    	; 0x148b2 <FMenuIdle+0x29c>
		     lcd_printf(3,1,PSTR("SedangProses"));
   14788:	83 e0       	ldi	r24, 0x03	; 3
   1478a:	61 e0       	ldi	r22, 0x01	; 1
   1478c:	4a e1       	ldi	r20, 0x1A	; 26
   1478e:	55 e2       	ldi	r21, 0x25	; 37
   14790:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	         TimDisplay=0;
   14794:	10 92 93 01 	sts	0x0193, r1
			 stMenuIdle=miWaitProses;
   14798:	83 e0       	ldi	r24, 0x03	; 3
   1479a:	c2 c0       	rjmp	.+388    	; 0x14920 <FMenuIdle+0x30a>
         }else stMenuIdle=miScan;
	     break;
    case miWaitProses:
	     if (TimDisplay>1){
   1479c:	80 91 93 01 	lds	r24, 0x0193
   147a0:	82 30       	cpi	r24, 0x02	; 2
   147a2:	08 f4       	brcc	.+2      	; 0x147a6 <FMenuIdle+0x190>
   147a4:	bf c0       	rjmp	.+382    	; 0x14924 <FMenuIdle+0x30e>
		     if (IFType==IT_SLAVE)stMenuIdle=miSendMessage98;
   147a6:	80 91 00 01 	lds	r24, 0x0100
   147aa:	81 30       	cpi	r24, 0x01	; 1
   147ac:	11 f4       	brne	.+4      	; 0x147b2 <FMenuIdle+0x19c>
   147ae:	84 e0       	ldi	r24, 0x04	; 4
   147b0:	b7 c0       	rjmp	.+366    	; 0x14920 <FMenuIdle+0x30a>
			 else
		     if (IFType==IT_STANDALONE)stMenuIdle=miPrintStandalone;
   147b2:	82 30       	cpi	r24, 0x02	; 2
   147b4:	09 f0       	breq	.+2      	; 0x147b8 <FMenuIdle+0x1a2>
   147b6:	b6 c0       	rjmp	.+364    	; 0x14924 <FMenuIdle+0x30e>
   147b8:	87 e0       	ldi	r24, 0x07	; 7
   147ba:	b2 c0       	rjmp	.+356    	; 0x14920 <FMenuIdle+0x30a>
		 }
	     break;
    case miPrintStandalone:
	     PrintStandaloneResult=PrintStandalone(ButtonID,False);
   147bc:	80 91 b0 02 	lds	r24, 0x02B0
   147c0:	60 e0       	ldi	r22, 0x00	; 0
   147c2:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <PrintStandalone>
	     if (PrintStandaloneResult==PS_PRINTED)stMenuIdle=miReady;
   147c6:	81 31       	cpi	r24, 0x11	; 17
   147c8:	09 f4       	brne	.+2      	; 0x147cc <FMenuIdle+0x1b6>
   147ca:	a9 c0       	rjmp	.+338    	; 0x1491e <FMenuIdle+0x308>
		 else
		 if (PrintStandaloneResult==PS_NO_DATA)stMenuIdle=miDisplayNoTransaction;
   147cc:	82 31       	cpi	r24, 0x12	; 18
   147ce:	09 f0       	breq	.+2      	; 0x147d2 <FMenuIdle+0x1bc>
   147d0:	a9 c0       	rjmp	.+338    	; 0x14924 <FMenuIdle+0x30e>
   147d2:	88 e0       	ldi	r24, 0x08	; 8
   147d4:	a5 c0       	rjmp	.+330    	; 0x14920 <FMenuIdle+0x30a>
	     break;
    case miDisplayNoTransaction:
	     lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   147d6:	83 e0       	ldi	r24, 0x03	; 3
   147d8:	61 e0       	ldi	r22, 0x01	; 1
   147da:	45 e0       	ldi	r20, 0x05	; 5
   147dc:	55 e2       	ldi	r21, 0x25	; 37
   147de:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
         TimDisplay=0;
   147e2:	10 92 93 01 	sts	0x0193, r1
		 stMenuIdle=miWaitDisplayNoTransaction;
   147e6:	89 e0       	ldi	r24, 0x09	; 9
   147e8:	9b c0       	rjmp	.+310    	; 0x14920 <FMenuIdle+0x30a>
	     break;
    case miWaitDisplayNoTransaction:
	     if (TimDisplay>1){
   147ea:	80 91 93 01 	lds	r24, 0x0193
   147ee:	82 30       	cpi	r24, 0x02	; 2
   147f0:	08 f4       	brcc	.+2      	; 0x147f4 <FMenuIdle+0x1de>
   147f2:	98 c0       	rjmp	.+304    	; 0x14924 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   147f4:	83 e0       	ldi	r24, 0x03	; 3
   147f6:	61 e0       	ldi	r22, 0x01	; 1
   147f8:	40 ef       	ldi	r20, 0xF0	; 240
   147fa:	54 e2       	ldi	r21, 0x24	; 36
   147fc:	32 c0       	rjmp	.+100    	; 0x14862 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
		 }
	     break;
    case miSendMessage98:
	     lcd_printf(3,1,PSTR("Please Wait..       "));
   147fe:	83 e0       	ldi	r24, 0x03	; 3
   14800:	61 e0       	ldi	r22, 0x01	; 1
   14802:	4b ed       	ldi	r20, 0xDB	; 219
   14804:	54 e2       	ldi	r21, 0x24	; 36
   14806:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	     sendMessage98(ButtonID);
   1480a:	80 91 b0 02 	lds	r24, 0x02B0
   1480e:	0e 94 02 7e 	call	0xfc04	; 0xfc04 <sendMessage98>
		 ProcTimeOut=0;
   14812:	10 92 bd 01 	sts	0x01BD, r1
		 stMenuIdle=miWaitPlease;
   14816:	85 e0       	ldi	r24, 0x05	; 5
   14818:	83 c0       	rjmp	.+262    	; 0x14920 <FMenuIdle+0x30a>
	     break;
    case miWaitPlease:	     
         if (ProcTimeOut>TIM_NO_RESPONSE){
   1481a:	80 91 bd 01 	lds	r24, 0x01BD
   1481e:	8f 30       	cpi	r24, 0x0F	; 15
   14820:	58 f0       	brcs	.+22     	; 0x14838 <FMenuIdle+0x222>
	         lcd_printf(3,1,PSTR("No Response..       "));
   14822:	83 e0       	ldi	r24, 0x03	; 3
   14824:	61 e0       	ldi	r22, 0x01	; 1
   14826:	46 ec       	ldi	r20, 0xC6	; 198
   14828:	54 e2       	ldi	r21, 0x24	; 36
   1482a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		     stMenuIdle=miNoResponse;
   1482e:	86 e0       	ldi	r24, 0x06	; 6
   14830:	80 93 b1 02 	sts	0x02B1, r24
			 TimDisplay=0;		 
   14834:	10 92 93 01 	sts	0x0193, r1
		 }
		 if ((IsMessage99==True)||(IsMessage00==True)){
   14838:	80 91 a1 01 	lds	r24, 0x01A1
   1483c:	81 30       	cpi	r24, 0x01	; 1
   1483e:	29 f0       	breq	.+10     	; 0x1484a <FMenuIdle+0x234>
   14840:	80 91 a0 01 	lds	r24, 0x01A0
   14844:	81 30       	cpi	r24, 0x01	; 1
   14846:	09 f0       	breq	.+2      	; 0x1484a <FMenuIdle+0x234>
   14848:	6d c0       	rjmp	.+218    	; 0x14924 <FMenuIdle+0x30e>
		     ClearMem(strOdometer);
   1484a:	89 ec       	ldi	r24, 0xC9	; 201
   1484c:	93 e0       	ldi	r25, 0x03	; 3
   1484e:	0e 94 61 a6 	call	0x14cc2	; 0x14cc2 <ClearMem>
		     ClearMem(strLicPlate);
   14852:	80 e0       	ldi	r24, 0x00	; 0
   14854:	99 e0       	ldi	r25, 0x09	; 9
   14856:	0e 94 61 a6 	call	0x14cc2	; 0x14cc2 <ClearMem>
	         lcd_printf(3,1,PSTR("Ready...            "));
   1485a:	83 e0       	ldi	r24, 0x03	; 3
   1485c:	61 e0       	ldi	r22, 0x01	; 1
   1485e:	41 eb       	ldi	r20, 0xB1	; 177
   14860:	54 e2       	ldi	r21, 0x24	; 36
   14862:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		     stMenuIdle=miWaitReady;
   14866:	8a e0       	ldi	r24, 0x0A	; 10
   14868:	80 93 b1 02 	sts	0x02B1, r24
			 TimDisplay=0;
   1486c:	10 92 93 01 	sts	0x0193, r1
   14870:	59 c0       	rjmp	.+178    	; 0x14924 <FMenuIdle+0x30e>
			 }
	     break;
    case miNoResponse:
         if (TimDisplay>1){
   14872:	80 91 93 01 	lds	r24, 0x0193
   14876:	82 30       	cpi	r24, 0x02	; 2
   14878:	08 f4       	brcc	.+2      	; 0x1487c <FMenuIdle+0x266>
   1487a:	54 c0       	rjmp	.+168    	; 0x14924 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   1487c:	83 e0       	ldi	r24, 0x03	; 3
   1487e:	61 e0       	ldi	r22, 0x01	; 1
   14880:	4c e9       	ldi	r20, 0x9C	; 156
   14882:	54 e2       	ldi	r21, 0x24	; 36
   14884:	ee cf       	rjmp	.-36     	; 0x14862 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
			 }	     
	     break;
    case miWaitReady:
         if (TimDisplay>1){
   14886:	80 91 93 01 	lds	r24, 0x0193
   1488a:	82 30       	cpi	r24, 0x02	; 2
   1488c:	08 f4       	brcc	.+2      	; 0x14890 <FMenuIdle+0x27a>
   1488e:	4a c0       	rjmp	.+148    	; 0x14924 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("                "));
   14890:	83 e0       	ldi	r24, 0x03	; 3
   14892:	61 e0       	ldi	r22, 0x01	; 1
   14894:	4b e8       	ldi	r20, 0x8B	; 139
   14896:	54 e2       	ldi	r21, 0x24	; 36
   14898:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		     stMenuIdle=miReady;
   1489c:	8b e0       	ldi	r24, 0x0B	; 11
   1489e:	e4 cf       	rjmp	.-56     	; 0x14868 <FMenuIdle+0x252>
			 TimDisplay=0;
			 }	     
	     break;
    case miReady:
	     DisplayScreenIdle();
   148a0:	0e 94 bb 49 	call	0x9376	; 0x9376 <DisplayScreenIdle>
		 if (IFType==IT_STANDALONE)IsNewPumpStatus=True;
   148a4:	80 91 00 01 	lds	r24, 0x0100
   148a8:	82 30       	cpi	r24, 0x02	; 2
   148aa:	19 f4       	brne	.+6      	; 0x148b2 <FMenuIdle+0x29c>
   148ac:	81 e0       	ldi	r24, 0x01	; 1
   148ae:	80 93 01 01 	sts	0x0101, r24
		 stMenuIdle=miScan;
   148b2:	81 e0       	ldi	r24, 0x01	; 1
   148b4:	35 c0       	rjmp	.+106    	; 0x14920 <FMenuIdle+0x30a>
	     break;
	case miRunTicket://Slave,Standalone
		 if (FMenuTicket()==MENU_DONE)
   148b6:	0e 94 29 7e 	call	0xfc52	; 0xfc52 <FMenuTicket>
   148ba:	2f c0       	rjmp	.+94     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
	case miRunAuth://Slave,Standalone
		 if (FMenuAuthorization()==MENU_DONE)
   148bc:	0e 94 50 8f 	call	0x11ea0	; 0x11ea0 <FMenuAuthorization>
   148c0:	2c c0       	rjmp	.+88     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
		 
    case miRunLocalAccount://Slave
		 if (FMenuLocalAccount()==MENU_DONE)
   148c2:	0e 94 71 80 	call	0x100e2	; 0x100e2 <FMenuLocalAccount>
   148c6:	29 c0       	rjmp	.+82     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;  
    case miRunChangeMOP://Slave
	     if (FMenuChangeMOP()==MENU_DONE)
   148c8:	0e 94 6e 89 	call	0x112dc	; 0x112dc <FMenuChangeMOP>
   148cc:	26 c0       	rjmp	.+76     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunEDC://Slave
	     if (FMenuEDCTransaction()==MENU_DONE)
   148ce:	0e 94 80 7f 	call	0xff00	; 0xff00 <FMenuEDCTransaction>
   148d2:	23 c0       	rjmp	.+70     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
         break;
    case miRunLoyalty://Slave
	     if (FMenuLoyalty()==MENU_DONE)
   148d4:	0e 94 ba 8f 	call	0x11f74	; 0x11f74 <FMenuLoyalty>
   148d8:	20 c0       	rjmp	.+64     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunReprint://Slave,Standalone
	     if (FMenuReprint()==MENU_DONE)
   148da:	0e 94 9c 8d 	call	0x11b38	; 0x11b38 <FMenuReprint>
   148de:	1d c0       	rjmp	.+58     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunViewFreeMessage://Slave
	     if (FViewFreeMessage()==MENU_DONE)
   148e0:	0e 94 de 48 	call	0x91bc	; 0x91bc <FViewFreeMessage>
   148e4:	1a c0       	rjmp	.+52     	; 0x1491a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miClearTotalizer://Standalone
	     lcd_printf(3,1,PSTR("Clear Data Totalizer"));
   148e6:	83 e0       	ldi	r24, 0x03	; 3
   148e8:	61 e0       	ldi	r22, 0x01	; 1
   148ea:	46 e7       	ldi	r20, 0x76	; 118
   148ec:	54 e2       	ldi	r21, 0x24	; 36
   148ee:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	     ResetTotalizer(TOTALIZER_LAST);
   148f2:	80 e0       	ldi	r24, 0x00	; 0
   148f4:	0e 94 17 29 	call	0x522e	; 0x522e <ResetTotalizer>
         ResetTotalizer(TOTALIZER_NOW);
   148f8:	81 e0       	ldi	r24, 0x01	; 1
   148fa:	0e 94 17 29 	call	0x522e	; 0x522e <ResetTotalizer>
   148fe:	0f c0       	rjmp	.+30     	; 0x1491e <FMenuIdle+0x308>
         stMenuIdle=miReady;	      
	     break;
    case miRunTotalizer://Standalone
	     lcd_printf(3,1,PSTR("TotalizerAll     "));
   14900:	83 e0       	ldi	r24, 0x03	; 3
   14902:	61 e0       	ldi	r22, 0x01	; 1
   14904:	44 e6       	ldi	r20, 0x64	; 100
   14906:	54 e2       	ldi	r21, 0x24	; 36
   14908:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
	     SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);
   1490c:	85 e0       	ldi	r24, 0x05	; 5
   1490e:	62 e1       	ldi	r22, 0x12	; 18
   14910:	0e 94 a6 60 	call	0xc14c	; 0xc14c <SendSlaveCommand>
   14914:	04 c0       	rjmp	.+8      	; 0x1491e <FMenuIdle+0x308>
		 stMenuIdle=miReady;	      
	     break;
    case miRunTestChar:	     
 	     if (FTestChar()==MENU_DONE)
   14916:	0e 94 18 49 	call	0x9230	; 0x9230 <FTestChar>
   1491a:	81 30       	cpi	r24, 0x01	; 1
   1491c:	19 f4       	brne	.+6      	; 0x14924 <FMenuIdle+0x30e>
         stMenuIdle=miReady;
   1491e:	8b e0       	ldi	r24, 0x0B	; 11
   14920:	80 93 b1 02 	sts	0x02B1, r24
	     break;
	}
//----------SYSTEM_PROC--------------------------------

        //Bank InfoUpdated
        if (IsMessage21==True){
   14924:	80 91 a3 01 	lds	r24, 0x01A3
   14928:	81 30       	cpi	r24, 0x01	; 1
   1492a:	21 f4       	brne	.+8      	; 0x14934 <FMenuIdle+0x31e>
		    IsMessage21=False;
   1492c:	10 92 a3 01 	sts	0x01A3, r1
			procMessage21();
   14930:	0e 94 a9 1b 	call	0x3752	; 0x3752 <procMessage21>

        }
        //Transaction Status
        if (IsMessage00==True){
   14934:	80 91 a0 01 	lds	r24, 0x01A0
   14938:	81 30       	cpi	r24, 0x01	; 1
   1493a:	91 f4       	brne	.+36     	; 0x14960 <FMenuIdle+0x34a>
		    IsMessage00=False;
   1493c:	10 92 a0 01 	sts	0x01A0, r1
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   14940:	20 91 23 09 	lds	r18, 0x0923
   14944:	21 30       	cpi	r18, 0x01	; 1
   14946:	61 f4       	brne	.+24     	; 0x14960 <FMenuIdle+0x34a>
   14948:	80 91 8b 01 	lds	r24, 0x018B
   1494c:	90 91 8c 01 	lds	r25, 0x018C
   14950:	8f 97       	sbiw	r24, 0x2f	; 47
   14952:	31 f4       	brne	.+12     	; 0x14960 <FMenuIdle+0x34a>

        }
        //Transaction Status
        if (IsMessage00==True){
		    IsMessage00=False;
			if (procMessage00()==MSG00_NO_PRINT){
   14954:	80 91 48 09 	lds	r24, 0x0948
   14958:	84 33       	cpi	r24, 0x34	; 52
   1495a:	11 f4       	brne	.+4      	; 0x14960 <FMenuIdle+0x34a>
			    IsNoTransaction=True;
   1495c:	20 93 ad 01 	sts	0x01AD, r18
				}
		}
  
		//Send EDC Message Information;
		if (IsSendMessageEDC==True){
   14960:	80 91 99 01 	lds	r24, 0x0199
   14964:	81 30       	cpi	r24, 0x01	; 1
   14966:	21 f4       	brne	.+8      	; 0x14970 <FMenuIdle+0x35a>
		    IsSendMessageEDC=False;
   14968:	10 92 99 01 	sts	0x0199, r1
			SendEDCMessage();
   1496c:	0e 94 21 60 	call	0xc042	; 0xc042 <SendEDCMessage>
		}
		if (IsEDCApproved==True){
   14970:	80 91 9b 01 	lds	r24, 0x019B
   14974:	81 30       	cpi	r24, 0x01	; 1
   14976:	21 f4       	brne	.+8      	; 0x14980 <FMenuIdle+0x36a>
		    IsEDCApproved=False;
   14978:	10 92 9b 01 	sts	0x019B, r1
            sendMessage92();
   1497c:	0e 94 78 7f 	call	0xfef0	; 0xfef0 <sendMessage92>
		}
		if (IsVoidTransaction==True){
   14980:	80 91 9d 01 	lds	r24, 0x019D
   14984:	81 30       	cpi	r24, 0x01	; 1
   14986:	21 f4       	brne	.+8      	; 0x14990 <FMenuIdle+0x37a>
		    IsVoidTransaction=False;
   14988:	10 92 9d 01 	sts	0x019D, r1
            sendMessage94();
   1498c:	0e 94 74 7f 	call	0xfee8	; 0xfee8 <sendMessage94>
		}


        //Message99 Detection 
        if (IsMessage99==True){
   14990:	10 91 a1 01 	lds	r17, 0x01A1
   14994:	11 30       	cpi	r17, 0x01	; 1
   14996:	31 f4       	brne	.+12     	; 0x149a4 <FMenuIdle+0x38e>
	        IsMessage99=False;
   14998:	10 92 a1 01 	sts	0x01A1, r1
		    procMessage99();
   1499c:	0e 94 22 41 	call	0x8244	; 0x8244 <procMessage99>
		    IsPrinting=True;
   149a0:	10 93 ae 01 	sts	0x01AE, r17
		}
		//No Transaction
		if (IsNoTransaction==True){
   149a4:	80 91 ad 01 	lds	r24, 0x01AD
   149a8:	81 30       	cpi	r24, 0x01	; 1
   149aa:	41 f4       	brne	.+16     	; 0x149bc <FMenuIdle+0x3a6>
			IsNoTransaction=False;
   149ac:	10 92 ad 01 	sts	0x01AD, r1
			lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   149b0:	83 e0       	ldi	r24, 0x03	; 3
   149b2:	61 e0       	ldi	r22, 0x01	; 1
   149b4:	4f e4       	ldi	r20, 0x4F	; 79
   149b6:	54 e2       	ldi	r21, 0x24	; 36
   149b8:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
		}
        
		//Display Idle
		if (stMenuIdle==miScan){//||(stMenuIdle=miWaitPlease)){ 
   149bc:	80 91 b1 02 	lds	r24, 0x02B1
   149c0:	81 30       	cpi	r24, 0x01	; 1
   149c2:	11 f4       	brne	.+4      	; 0x149c8 <FMenuIdle+0x3b2>
		    DisplayIdle();			
   149c4:	0e 94 b9 5e 	call	0xbd72	; 0xbd72 <DisplayIdle>
			}        

        //Display FreeMessage
		if (stMenuIdle==miScan){ 
   149c8:	80 91 b1 02 	lds	r24, 0x02B1
   149cc:	81 30       	cpi	r24, 0x01	; 1
   149ce:	59 f4       	brne	.+22     	; 0x149e6 <FMenuIdle+0x3d0>
		    if (IsMessage09==True){
   149d0:	80 91 a5 01 	lds	r24, 0x01A5
   149d4:	81 30       	cpi	r24, 0x01	; 1
   149d6:	39 f4       	brne	.+14     	; 0x149e6 <FMenuIdle+0x3d0>
			    IsMessage09=False;
   149d8:	10 92 a5 01 	sts	0x01A5, r1
				procMessage09();
   149dc:	0e 94 dd 17 	call	0x2fba	; 0x2fba <procMessage09>
				stMenuIdle=miRunViewFreeMessage;
   149e0:	83 e1       	ldi	r24, 0x13	; 19
   149e2:	80 93 b1 02 	sts	0x02B1, r24
			   }
			}

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
   149e6:	80 91 b1 02 	lds	r24, 0x02B1
   149ea:	81 30       	cpi	r24, 0x01	; 1
   149ec:	71 f4       	brne	.+28     	; 0x14a0a <FMenuIdle+0x3f4>
   149ee:	80 91 9a 01 	lds	r24, 0x019A
   149f2:	81 30       	cpi	r24, 0x01	; 1
   149f4:	51 f4       	brne	.+20     	; 0x14a0a <FMenuIdle+0x3f4>
		    IsRFIDDetected=False;
   149f6:	10 92 9a 01 	sts	0x019A, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   149fa:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   149fc:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   149fe:	82 e0       	ldi	r24, 0x02	; 2
   14a00:	80 93 be 01 	sts	0x01BE, r24

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
		    IsRFIDDetected=False;
		    system_beep(2);           
			stMenuIdle=miRunLocalAccount;
   14a04:	8e e0       	ldi	r24, 0x0E	; 14
   14a06:	80 93 b1 02 	sts	0x02B1, r24
		}
        //Print Spooling
		if (IsMessage81==True){
   14a0a:	10 91 a8 01 	lds	r17, 0x01A8
   14a0e:	11 30       	cpi	r17, 0x01	; 1
   14a10:	41 f4       	brne	.+16     	; 0x14a22 <FMenuIdle+0x40c>
		    IsMessage81=False;
   14a12:	10 92 a8 01 	sts	0x01A8, r1
			//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
			cmdPrint=procMessage81();
   14a16:	0e 94 ba 18 	call	0x3174	; 0x3174 <procMessage81>
   14a1a:	80 93 b7 01 	sts	0x01B7, r24
			IsFreePrinting=True;
   14a1e:	10 93 aa 01 	sts	0x01AA, r17
         }

    //SystemService
      systemGenerateReport();
   14a22:	0e 94 90 34 	call	0x6920	; 0x6920 <systemGenerateReport>
      systemPrinting();
   14a26:	0e 94 f9 9e 	call	0x13df2	; 0x13df2 <systemPrinting>
	  systemEDC();
	  systemConfigProtocol();
   14a2a:	0e 94 e5 a2 	call	0x145ca	; 0x145ca <systemConfigProtocol>
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}
   14a2e:	1f 91       	pop	r17
   14a30:	08 95       	ret

00014a32 <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x06);
}

void lcd_command(unsigned char __chr){
	_LCD_PORT = __chr & 0xF0;
   14a32:	98 2f       	mov	r25, r24
   14a34:	90 7f       	andi	r25, 0xF0	; 240
   14a36:	95 bb       	out	0x15, r25	; 21
	cbi(_LCD_PORT, _LCD_RS);
   14a38:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14a3a:	a9 9a       	sbi	0x15, 1	; 21
   14a3c:	48 ee       	ldi	r20, 0xE8	; 232
   14a3e:	53 e0       	ldi	r21, 0x03	; 3
   14a40:	fa 01       	movw	r30, r20
   14a42:	31 97       	sbiw	r30, 0x01	; 1
   14a44:	f1 f7       	brne	.-4      	; 0x14a42 <lcd_command+0x10>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14a46:	a9 98       	cbi	0x15, 1	; 21
   14a48:	fa 01       	movw	r30, r20
   14a4a:	31 97       	sbiw	r30, 0x01	; 1
   14a4c:	f1 f7       	brne	.-4      	; 0x14a4a <lcd_command+0x18>
	_LCD_BUSY;

	_LCD_PORT = (__chr & 0x0F) << 4;
   14a4e:	28 2f       	mov	r18, r24
   14a50:	30 e0       	ldi	r19, 0x00	; 0
   14a52:	94 e0       	ldi	r25, 0x04	; 4
   14a54:	22 0f       	add	r18, r18
   14a56:	33 1f       	adc	r19, r19
   14a58:	9a 95       	dec	r25
   14a5a:	e1 f7       	brne	.-8      	; 0x14a54 <lcd_command+0x22>
   14a5c:	25 bb       	out	0x15, r18	; 21
	cbi(_LCD_PORT, _LCD_RS);
   14a5e:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14a60:	a9 9a       	sbi	0x15, 1	; 21
   14a62:	fa 01       	movw	r30, r20
   14a64:	31 97       	sbiw	r30, 0x01	; 1
   14a66:	f1 f7       	brne	.-4      	; 0x14a64 <lcd_command+0x32>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14a68:	a9 98       	cbi	0x15, 1	; 21
   14a6a:	fa 01       	movw	r30, r20
   14a6c:	31 97       	sbiw	r30, 0x01	; 1
   14a6e:	f1 f7       	brne	.-4      	; 0x14a6c <lcd_command+0x3a>
	_LCD_BUSY;
	_LCD_BUSY;
	if (__chr==0x01) _delay_ms(50);
   14a70:	fa 01       	movw	r30, r20
   14a72:	31 97       	sbiw	r30, 0x01	; 1
   14a74:	f1 f7       	brne	.-4      	; 0x14a72 <lcd_command+0x40>
   14a76:	81 30       	cpi	r24, 0x01	; 1
   14a78:	21 f4       	brne	.+8      	; 0x14a82 <lcd_command+0x50>
   14a7a:	84 ed       	ldi	r24, 0xD4	; 212
   14a7c:	90 e3       	ldi	r25, 0x30	; 48
   14a7e:	01 97       	sbiw	r24, 0x01	; 1
   14a80:	f1 f7       	brne	.-4      	; 0x14a7e <lcd_command+0x4c>
   14a82:	08 95       	ret

00014a84 <lcd_init>:
   14a84:	86 ea       	ldi	r24, 0xA6	; 166
   14a86:	9e e0       	ldi	r25, 0x0E	; 14
   14a88:	01 97       	sbiw	r24, 0x01	; 1
   14a8a:	f1 f7       	brne	.-4      	; 0x14a88 <lcd_init+0x4>

#define _LCD_BUSY	_delay_ms(4);

void lcd_init(void){
	_delay_ms(15);
	_LCD_PORT = 0x00;
   14a8c:	15 ba       	out	0x15, r1	; 21
	_LCD_DDR |= (1 << _LCD_D7) | (1 << _LCD_D6) | (1 << _LCD_D5) | (1 << _LCD_D4);
   14a8e:	84 b3       	in	r24, 0x14	; 20
   14a90:	80 6f       	ori	r24, 0xF0	; 240
   14a92:	84 bb       	out	0x14, r24	; 20
	_LCD_DDR |= (1 << _LCD_E) | (1 << _LCD_RW) | (1 << _LCD_RS);
   14a94:	84 b3       	in	r24, 0x14	; 20
   14a96:	8e 60       	ori	r24, 0x0E	; 14
   14a98:	84 bb       	out	0x14, r24	; 20

	_LCD_PORT = 0x30;
   14a9a:	20 e3       	ldi	r18, 0x30	; 48
   14a9c:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   14a9e:	a9 9a       	sbi	0x15, 1	; 21
   14aa0:	88 ee       	ldi	r24, 0xE8	; 232
   14aa2:	93 e0       	ldi	r25, 0x03	; 3
   14aa4:	fc 01       	movw	r30, r24
   14aa6:	31 97       	sbiw	r30, 0x01	; 1
   14aa8:	f1 f7       	brne	.-4      	; 0x14aa6 <lcd_init+0x22>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14aaa:	a9 98       	cbi	0x15, 1	; 21
   14aac:	fc 01       	movw	r30, r24
   14aae:	31 97       	sbiw	r30, 0x01	; 1
   14ab0:	f1 f7       	brne	.-4      	; 0x14aae <lcd_init+0x2a>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   14ab2:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   14ab4:	a9 9a       	sbi	0x15, 1	; 21
   14ab6:	fc 01       	movw	r30, r24
   14ab8:	31 97       	sbiw	r30, 0x01	; 1
   14aba:	f1 f7       	brne	.-4      	; 0x14ab8 <lcd_init+0x34>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14abc:	a9 98       	cbi	0x15, 1	; 21
   14abe:	fc 01       	movw	r30, r24
   14ac0:	31 97       	sbiw	r30, 0x01	; 1
   14ac2:	f1 f7       	brne	.-4      	; 0x14ac0 <lcd_init+0x3c>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   14ac4:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   14ac6:	a9 9a       	sbi	0x15, 1	; 21
   14ac8:	fc 01       	movw	r30, r24
   14aca:	31 97       	sbiw	r30, 0x01	; 1
   14acc:	f1 f7       	brne	.-4      	; 0x14aca <lcd_init+0x46>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14ace:	a9 98       	cbi	0x15, 1	; 21
   14ad0:	fc 01       	movw	r30, r24
   14ad2:	31 97       	sbiw	r30, 0x01	; 1
   14ad4:	f1 f7       	brne	.-4      	; 0x14ad2 <lcd_init+0x4e>
	_LCD_BUSY;

	_LCD_PORT = 0x20;
   14ad6:	20 e2       	ldi	r18, 0x20	; 32
   14ad8:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   14ada:	a9 9a       	sbi	0x15, 1	; 21
   14adc:	fc 01       	movw	r30, r24
   14ade:	31 97       	sbiw	r30, 0x01	; 1
   14ae0:	f1 f7       	brne	.-4      	; 0x14ade <lcd_init+0x5a>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14ae2:	a9 98       	cbi	0x15, 1	; 21
   14ae4:	01 97       	sbiw	r24, 0x01	; 1
   14ae6:	f1 f7       	brne	.-4      	; 0x14ae4 <lcd_init+0x60>
	_LCD_BUSY;

	_LIGHT_PORT = 0x01;
   14ae8:	81 e0       	ldi	r24, 0x01	; 1
   14aea:	80 93 65 00 	sts	0x0065, r24
	_LIGHT_DDR |= (1 << _LIGHT_PIN);
   14aee:	e4 e6       	ldi	r30, 0x64	; 100
   14af0:	f0 e0       	ldi	r31, 0x00	; 0
   14af2:	80 81       	ld	r24, Z
   14af4:	82 60       	ori	r24, 0x02	; 2
   14af6:	80 83       	st	Z, r24

	lcd_command(0x28);
   14af8:	88 e2       	ldi	r24, 0x28	; 40
   14afa:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
	lcd_command(0x0c);
   14afe:	8c e0       	ldi	r24, 0x0C	; 12
   14b00:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
	lcd_command(0x06);
   14b04:	86 e0       	ldi	r24, 0x06	; 6
   14b06:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
}
   14b0a:	08 95       	ret

00014b0c <_lcd>:
	if (__chr==0x01) _delay_ms(50);

}

void _lcd(unsigned char __chr){
	_LCD_PORT =((__chr & 0xF0));
   14b0c:	28 2f       	mov	r18, r24
   14b0e:	20 7f       	andi	r18, 0xF0	; 240
   14b10:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_RS);
   14b12:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14b14:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   14b16:	a9 98       	cbi	0x15, 1	; 21

	_LCD_PORT = (((__chr & 0x0F) << 4));
   14b18:	90 e0       	ldi	r25, 0x00	; 0
   14b1a:	24 e0       	ldi	r18, 0x04	; 4
   14b1c:	88 0f       	add	r24, r24
   14b1e:	99 1f       	adc	r25, r25
   14b20:	2a 95       	dec	r18
   14b22:	e1 f7       	brne	.-8      	; 0x14b1c <_lcd+0x10>
   14b24:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_RS);
   14b26:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14b28:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   14b2a:	a9 98       	cbi	0x15, 1	; 21
   14b2c:	88 ee       	ldi	r24, 0xE8	; 232
   14b2e:	93 e0       	ldi	r25, 0x03	; 3
   14b30:	01 97       	sbiw	r24, 0x01	; 1
   14b32:	f1 f7       	brne	.-4      	; 0x14b30 <_lcd+0x24>
	_LCD_BUSY;
	_delay_ms(1);
}
   14b34:	8a ef       	ldi	r24, 0xFA	; 250
   14b36:	90 e0       	ldi	r25, 0x00	; 0
   14b38:	01 97       	sbiw	r24, 0x01	; 1
   14b3a:	f1 f7       	brne	.-4      	; 0x14b38 <_lcd+0x2c>
   14b3c:	08 95       	ret

00014b3e <lcd_string>:
     lcd_printf(2,1,PSTR("                    "));
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
   14b3e:	cf 93       	push	r28
   14b40:	df 93       	push	r29
   14b42:	ec 01       	movw	r28, r24
   14b44:	03 c0       	rjmp	.+6      	; 0x14b4c <lcd_string+0xe>
	while(*__string)
		_lcd(*__string++);
   14b46:	21 96       	adiw	r28, 0x01	; 1
   14b48:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
	while(*__string)
   14b4c:	88 81       	ld	r24, Y
   14b4e:	88 23       	and	r24, r24
   14b50:	d1 f7       	brne	.-12     	; 0x14b46 <lcd_string+0x8>
		_lcd(*__string++);
}
   14b52:	df 91       	pop	r29
   14b54:	cf 91       	pop	r28
   14b56:	08 95       	ret

00014b58 <lcd_xy>:

void lcd_xy(unsigned char __x, unsigned char __y){
	switch(__x){
   14b58:	82 30       	cpi	r24, 0x02	; 2
   14b5a:	69 f0       	breq	.+26     	; 0x14b76 <lcd_xy+0x1e>
   14b5c:	83 30       	cpi	r24, 0x03	; 3
   14b5e:	18 f4       	brcc	.+6      	; 0x14b66 <lcd_xy+0xe>
   14b60:	81 30       	cpi	r24, 0x01	; 1
   14b62:	a9 f4       	brne	.+42     	; 0x14b8e <lcd_xy+0x36>
   14b64:	05 c0       	rjmp	.+10     	; 0x14b70 <lcd_xy+0x18>
   14b66:	83 30       	cpi	r24, 0x03	; 3
   14b68:	49 f0       	breq	.+18     	; 0x14b7c <lcd_xy+0x24>
   14b6a:	84 30       	cpi	r24, 0x04	; 4
   14b6c:	81 f4       	brne	.+32     	; 0x14b8e <lcd_xy+0x36>
   14b6e:	0b c0       	rjmp	.+22     	; 0x14b86 <lcd_xy+0x2e>
		case 1:
			lcd_command(0x80 + __y - 1);
   14b70:	86 2f       	mov	r24, r22
   14b72:	81 58       	subi	r24, 0x81	; 129
   14b74:	05 c0       	rjmp	.+10     	; 0x14b80 <lcd_xy+0x28>
			break;
		case 2:
			lcd_command(0xC0 + __y - 1);
   14b76:	86 2f       	mov	r24, r22
   14b78:	81 54       	subi	r24, 0x41	; 65
   14b7a:	02 c0       	rjmp	.+4      	; 0x14b80 <lcd_xy+0x28>
			break;
		case 3:
			lcd_command(0x94 + __y - 1);
   14b7c:	86 2f       	mov	r24, r22
   14b7e:	8d 56       	subi	r24, 0x6D	; 109
   14b80:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
   14b84:	08 95       	ret
			break;
		case 4:
			lcd_command(0xD4 + __y - 1);
   14b86:	86 2f       	mov	r24, r22
   14b88:	8d 52       	subi	r24, 0x2D	; 45
   14b8a:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
   14b8e:	08 95       	ret

00014b90 <lcd_print>:
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
	 }     
}

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
   14b90:	df 92       	push	r13
   14b92:	ef 92       	push	r14
   14b94:	ff 92       	push	r15
   14b96:	0f 93       	push	r16
   14b98:	1f 93       	push	r17
   14b9a:	cf 93       	push	r28
   14b9c:	df 93       	push	r29
   14b9e:	06 2f       	mov	r16, r22
   14ba0:	d4 2e       	mov	r13, r20
   14ba2:	15 2f       	mov	r17, r21
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
   14ba4:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
   14ba8:	2d 2d       	mov	r18, r13
   14baa:	31 2f       	mov	r19, r17
   14bac:	c9 01       	movw	r24, r18
   14bae:	ec 01       	movw	r28, r24
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   14bb0:	34 e1       	ldi	r19, 0x14	; 20
   14bb2:	e3 2e       	mov	r14, r19
   14bb4:	f1 2c       	mov	r15, r1
   14bb6:	e0 1a       	sub	r14, r16
   14bb8:	f1 08       	sbc	r15, r1
   14bba:	04 c0       	rjmp	.+8      	; 0x14bc4 <lcd_print+0x34>
		_lcd(*__string);__string++;
   14bbc:	82 2f       	mov	r24, r18
   14bbe:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
   14bc2:	21 96       	adiw	r28, 0x01	; 1
   14bc4:	9e 01       	movw	r18, r28
   14bc6:	2d 19       	sub	r18, r13
   14bc8:	82 2f       	mov	r24, r18

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   14bca:	28 81       	ld	r18, Y
   14bcc:	22 23       	and	r18, r18
   14bce:	21 f0       	breq	.+8      	; 0x14bd8 <lcd_print+0x48>
   14bd0:	90 e0       	ldi	r25, 0x00	; 0
   14bd2:	e8 16       	cp	r14, r24
   14bd4:	f9 06       	cpc	r15, r25
   14bd6:	94 f7       	brge	.-28     	; 0x14bbc <lcd_print+0x2c>
		_lcd(*__string);__string++;
		iPos++;
		}    
}
   14bd8:	df 91       	pop	r29
   14bda:	cf 91       	pop	r28
   14bdc:	1f 91       	pop	r17
   14bde:	0f 91       	pop	r16
   14be0:	ff 90       	pop	r15
   14be2:	ef 90       	pop	r14
   14be4:	df 90       	pop	r13
   14be6:	08 95       	ret

00014be8 <lcd_printf>:

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
   14be8:	df 92       	push	r13
   14bea:	ef 92       	push	r14
   14bec:	ff 92       	push	r15
   14bee:	0f 93       	push	r16
   14bf0:	1f 93       	push	r17
   14bf2:	cf 93       	push	r28
   14bf4:	df 93       	push	r29
   14bf6:	06 2f       	mov	r16, r22
   14bf8:	d4 2e       	mov	r13, r20
   14bfa:	15 2f       	mov	r17, r21
    char iPos=0;
	lcd_xy(__x, __y);
   14bfc:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
   14c00:	8d 2d       	mov	r24, r13
   14c02:	91 2f       	mov	r25, r17
   14c04:	fc 01       	movw	r30, r24
   14c06:	ef 01       	movw	r28, r30
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14c08:	44 e1       	ldi	r20, 0x14	; 20
   14c0a:	e4 2e       	mov	r14, r20
   14c0c:	f1 2c       	mov	r15, r1
   14c0e:	e0 1a       	sub	r14, r16
   14c10:	f1 08       	sbc	r15, r1
   14c12:	04 c0       	rjmp	.+8      	; 0x14c1c <lcd_printf+0x34>
		_lcd(pgm_read_byte(&(*__string)));
   14c14:	82 2f       	mov	r24, r18
   14c16:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
		__string++;
   14c1a:	21 96       	adiw	r28, 0x01	; 1
   14c1c:	9e 01       	movw	r18, r28
   14c1e:	2d 19       	sub	r18, r13
   14c20:	82 2f       	mov	r24, r18

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
    char iPos=0;
	lcd_xy(__x, __y);
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14c22:	fe 01       	movw	r30, r28
   14c24:	24 91       	lpm	r18, Z+
   14c26:	22 23       	and	r18, r18
   14c28:	21 f0       	breq	.+8      	; 0x14c32 <lcd_printf+0x4a>
   14c2a:	90 e0       	ldi	r25, 0x00	; 0
   14c2c:	e8 16       	cp	r14, r24
   14c2e:	f9 06       	cpc	r15, r25
   14c30:	8c f7       	brge	.-30     	; 0x14c14 <lcd_printf+0x2c>
		_lcd(pgm_read_byte(&(*__string)));
		__string++;
		iPos++;
		}
}
   14c32:	df 91       	pop	r29
   14c34:	cf 91       	pop	r28
   14c36:	1f 91       	pop	r17
   14c38:	0f 91       	pop	r16
   14c3a:	ff 90       	pop	r15
   14c3c:	ef 90       	pop	r14
   14c3e:	df 90       	pop	r13
   14c40:	08 95       	ret

00014c42 <lcd_clear>:
	_LCD_BUSY;
	_delay_ms(1);
}

void lcd_clear(){
     lcd_printf(1,1,PSTR("                    "));
   14c42:	81 e0       	ldi	r24, 0x01	; 1
   14c44:	61 e0       	ldi	r22, 0x01	; 1
   14c46:	4f e6       	ldi	r20, 0x6F	; 111
   14c48:	55 e2       	ldi	r21, 0x25	; 37
   14c4a:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
     lcd_printf(2,1,PSTR("                    "));
   14c4e:	82 e0       	ldi	r24, 0x02	; 2
   14c50:	61 e0       	ldi	r22, 0x01	; 1
   14c52:	4a e5       	ldi	r20, 0x5A	; 90
   14c54:	55 e2       	ldi	r21, 0x25	; 37
   14c56:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
     lcd_printf(3,1,PSTR("                    "));
   14c5a:	83 e0       	ldi	r24, 0x03	; 3
   14c5c:	61 e0       	ldi	r22, 0x01	; 1
   14c5e:	45 e4       	ldi	r20, 0x45	; 69
   14c60:	55 e2       	ldi	r21, 0x25	; 37
   14c62:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
     lcd_printf(4,1,PSTR("                    "));
   14c66:	84 e0       	ldi	r24, 0x04	; 4
   14c68:	61 e0       	ldi	r22, 0x01	; 1
   14c6a:	40 e3       	ldi	r20, 0x30	; 48
   14c6c:	55 e2       	ldi	r21, 0x25	; 37
   14c6e:	0e 94 f4 a5 	call	0x14be8	; 0x14be8 <lcd_printf>
}
   14c72:	08 95       	ret

00014c74 <lcd_put>:
		__string++;
		iPos++;
		}
}

void lcd_put(unsigned char __x, unsigned char __y, unsigned char __chr){
   14c74:	1f 93       	push	r17
   14c76:	14 2f       	mov	r17, r20
	lcd_xy(__x, __y);
   14c78:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <lcd_xy>
	_lcd(__chr);
   14c7c:	81 2f       	mov	r24, r17
   14c7e:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
}
   14c82:	1f 91       	pop	r17
   14c84:	08 95       	ret

00014c86 <lcd_cgram>:

void lcd_cgram(unsigned char location, char *ptr){
   14c86:	0f 93       	push	r16
   14c88:	1f 93       	push	r17
   14c8a:	cf 93       	push	r28
   14c8c:	df 93       	push	r29
   14c8e:	8b 01       	movw	r16, r22
	unsigned char i;
    if(location < 8){
   14c90:	88 30       	cpi	r24, 0x08	; 8
   14c92:	90 f4       	brcc	.+36     	; 0x14cb8 <lcd_cgram+0x32>
		lcd_command(0x40 + (location * 8));
   14c94:	88 0f       	add	r24, r24
   14c96:	88 0f       	add	r24, r24
   14c98:	88 0f       	add	r24, r24
   14c9a:	80 5c       	subi	r24, 0xC0	; 192
   14c9c:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
   14ca0:	c0 e0       	ldi	r28, 0x00	; 0
   14ca2:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 0; i < 8; i++)
			_lcd(ptr[i]);
   14ca4:	f8 01       	movw	r30, r16
   14ca6:	ec 0f       	add	r30, r28
   14ca8:	fd 1f       	adc	r31, r29
   14caa:	80 81       	ld	r24, Z
   14cac:	0e 94 86 a5 	call	0x14b0c	; 0x14b0c <_lcd>
   14cb0:	21 96       	adiw	r28, 0x01	; 1

void lcd_cgram(unsigned char location, char *ptr){
	unsigned char i;
    if(location < 8){
		lcd_command(0x40 + (location * 8));
		for(i = 0; i < 8; i++)
   14cb2:	c8 30       	cpi	r28, 0x08	; 8
   14cb4:	d1 05       	cpc	r29, r1
   14cb6:	b1 f7       	brne	.-20     	; 0x14ca4 <lcd_cgram+0x1e>
			_lcd(ptr[i]);
	}
}
   14cb8:	df 91       	pop	r29
   14cba:	cf 91       	pop	r28
   14cbc:	1f 91       	pop	r17
   14cbe:	0f 91       	pop	r16
   14cc0:	08 95       	ret

00014cc2 <ClearMem>:
			lcd_command(0xD4 + __y - 1);
			break;
	}
}

void ClearMem(char *string){
   14cc2:	cf 93       	push	r28
   14cc4:	df 93       	push	r29
   14cc6:	20 e0       	ldi	r18, 0x00	; 0
   14cc8:	04 c0       	rjmp	.+8      	; 0x14cd2 <ClearMem+0x10>
     char i;
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
   14cca:	c8 0f       	add	r28, r24
   14ccc:	d9 1f       	adc	r29, r25
   14cce:	18 82       	st	Y, r1
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   14cd0:	2f 5f       	subi	r18, 0xFF	; 255
   14cd2:	c2 2f       	mov	r28, r18
   14cd4:	d0 e0       	ldi	r29, 0x00	; 0
   14cd6:	fc 01       	movw	r30, r24
   14cd8:	01 90       	ld	r0, Z+
   14cda:	00 20       	and	r0, r0
   14cdc:	e9 f7       	brne	.-6      	; 0x14cd8 <ClearMem+0x16>
   14cde:	31 97       	sbiw	r30, 0x01	; 1
   14ce0:	e8 1b       	sub	r30, r24
   14ce2:	f9 0b       	sbc	r31, r25
   14ce4:	ce 17       	cp	r28, r30
   14ce6:	df 07       	cpc	r29, r31
   14ce8:	80 f3       	brcs	.-32     	; 0x14cca <ClearMem+0x8>
          string[i]=0;
	 }     
}
   14cea:	df 91       	pop	r29
   14cec:	cf 91       	pop	r28
   14cee:	08 95       	ret

00014cf0 <_key_hit>:
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   14cf0:	df 93       	push	r29
   14cf2:	cf 93       	push	r28
   14cf4:	00 d0       	rcall	.+0      	; 0x14cf6 <_key_hit+0x6>
   14cf6:	00 d0       	rcall	.+0      	; 0x14cf8 <_key_hit+0x8>
   14cf8:	cd b7       	in	r28, 0x3d	; 61
   14cfa:	de b7       	in	r29, 0x3e	; 62
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};
   14cfc:	8f ee       	ldi	r24, 0xEF	; 239
   14cfe:	89 83       	std	Y+1, r24	; 0x01
   14d00:	8f ed       	ldi	r24, 0xDF	; 223
   14d02:	8a 83       	std	Y+2, r24	; 0x02
   14d04:	8f eb       	ldi	r24, 0xBF	; 191
   14d06:	8b 83       	std	Y+3, r24	; 0x03
   14d08:	8f e7       	ldi	r24, 0x7F	; 127
   14d0a:	8c 83       	std	Y+4, r24	; 0x04
   14d0c:	de 01       	movw	r26, r28
   14d0e:	11 96       	adiw	r26, 0x01	; 1
   14d10:	2a ef       	ldi	r18, 0xFA	; 250
   14d12:	30 e0       	ldi	r19, 0x00	; 0

	for(i=0; i<4; i++){
   14d14:	ae 01       	movw	r20, r28
   14d16:	4b 5f       	subi	r20, 0xFB	; 251
   14d18:	5f 4f       	sbci	r21, 0xFF	; 255
   14d1a:	c9 01       	movw	r24, r18
   14d1c:	01 97       	sbiw	r24, 0x01	; 1
   14d1e:	f1 f7       	brne	.-4      	; 0x14d1c <_key_hit+0x2c>
		_delay_ms(1);
		_KEY_PORT = outmap[i];
   14d20:	8c 91       	ld	r24, X
   14d22:	80 93 62 00 	sts	0x0062, r24
   14d26:	f9 01       	movw	r30, r18
   14d28:	31 97       	sbiw	r30, 0x01	; 1
   14d2a:	f1 f7       	brne	.-4      	; 0x14d28 <_key_hit+0x38>
		_delay_ms(1);
		keyhit = _KEY_MATRIX;
   14d2c:	90 b1       	in	r25, 0x00	; 0
		if (keyhit!=outmap[i]) 
   14d2e:	98 17       	cp	r25, r24
   14d30:	21 f4       	brne	.+8      	; 0x14d3a <_key_hit+0x4a>
		    break;
   14d32:	11 96       	adiw	r26, 0x01	; 1

char _key_hit(void){
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
   14d34:	a4 17       	cp	r26, r20
   14d36:	b5 07       	cpc	r27, r21
   14d38:	81 f7       	brne	.-32     	; 0x14d1a <_key_hit+0x2a>
		keyhit = _KEY_MATRIX;
		if (keyhit!=outmap[i]) 
		    break;
	}
	return keyhit;
}
   14d3a:	89 2f       	mov	r24, r25
   14d3c:	0f 90       	pop	r0
   14d3e:	0f 90       	pop	r0
   14d40:	0f 90       	pop	r0
   14d42:	0f 90       	pop	r0
   14d44:	cf 91       	pop	r28
   14d46:	df 91       	pop	r29
   14d48:	08 95       	ret

00014d4a <_key_crr>:

char _key_crr(char __key){
	if(	__key != _KEY_1 && __key != _KEY_2 &&
   14d4a:	8e 3e       	cpi	r24, 0xEE	; 238
   14d4c:	f9 f0       	breq	.+62     	; 0x14d8c <_key_crr+0x42>
   14d4e:	8e 3d       	cpi	r24, 0xDE	; 222
   14d50:	e9 f0       	breq	.+58     	; 0x14d8c <_key_crr+0x42>
   14d52:	8e 3b       	cpi	r24, 0xBE	; 190
   14d54:	d9 f0       	breq	.+54     	; 0x14d8c <_key_crr+0x42>
   14d56:	8d 3e       	cpi	r24, 0xED	; 237
   14d58:	c9 f0       	breq	.+50     	; 0x14d8c <_key_crr+0x42>
   14d5a:	8d 3d       	cpi	r24, 0xDD	; 221
   14d5c:	b9 f0       	breq	.+46     	; 0x14d8c <_key_crr+0x42>
   14d5e:	8d 3b       	cpi	r24, 0xBD	; 189
   14d60:	a9 f0       	breq	.+42     	; 0x14d8c <_key_crr+0x42>
   14d62:	8b 3e       	cpi	r24, 0xEB	; 235
   14d64:	99 f0       	breq	.+38     	; 0x14d8c <_key_crr+0x42>
   14d66:	8b 3d       	cpi	r24, 0xDB	; 219
   14d68:	89 f0       	breq	.+34     	; 0x14d8c <_key_crr+0x42>
   14d6a:	8b 3b       	cpi	r24, 0xBB	; 187
   14d6c:	79 f0       	breq	.+30     	; 0x14d8c <_key_crr+0x42>
   14d6e:	87 3d       	cpi	r24, 0xD7	; 215
   14d70:	69 f0       	breq	.+26     	; 0x14d8c <_key_crr+0x42>
   14d72:	87 3e       	cpi	r24, 0xE7	; 231
   14d74:	59 f0       	breq	.+22     	; 0x14d8c <_key_crr+0x42>
   14d76:	87 3b       	cpi	r24, 0xB7	; 183
   14d78:	49 f0       	breq	.+18     	; 0x14d8c <_key_crr+0x42>
   14d7a:	8e 37       	cpi	r24, 0x7E	; 126
   14d7c:	39 f0       	breq	.+14     	; 0x14d8c <_key_crr+0x42>
   14d7e:	8d 37       	cpi	r24, 0x7D	; 125
   14d80:	29 f0       	breq	.+10     	; 0x14d8c <_key_crr+0x42>
   14d82:	8b 37       	cpi	r24, 0x7B	; 123
   14d84:	19 f0       	breq	.+6      	; 0x14d8c <_key_crr+0x42>
   14d86:	87 37       	cpi	r24, 0x77	; 119
   14d88:	09 f0       	breq	.+2      	; 0x14d8c <_key_crr+0x42>
   14d8a:	80 e0       	ldi	r24, 0x00	; 0
		__key != _KEY_CANCEL && __key != _KEY_ENTER &&
		__key != _KEY_TIKET && __key != _KEY_MENU &&
		__key != _KEY_SHIFT && __key != _KEY_CLEAR)
		return _KEY_NULL;
	return __key;
}
   14d8c:	08 95       	ret

00014d8e <_key_btn>:

char _key_btn(char __key){
   14d8e:	98 2f       	mov	r25, r24
	char __keychar = 0;
	
	IsKeyPressed = 1;
   14d90:	81 e0       	ldi	r24, 0x01	; 1
   14d92:	80 93 b8 02 	sts	0x02B8, r24
	switch (__key){
   14d96:	9e 3b       	cpi	r25, 0xBE	; 190
   14d98:	91 f1       	breq	.+100    	; 0x14dfe <_key_btn+0x70>
   14d9a:	9f 3b       	cpi	r25, 0xBF	; 191
   14d9c:	a8 f4       	brcc	.+42     	; 0x14dc8 <_key_btn+0x3a>
   14d9e:	9e 37       	cpi	r25, 0x7E	; 126
   14da0:	09 f4       	brne	.+2      	; 0x14da4 <_key_btn+0x16>
   14da2:	41 c0       	rjmp	.+130    	; 0x14e26 <_key_btn+0x98>
   14da4:	9f 37       	cpi	r25, 0x7F	; 127
   14da6:	48 f4       	brcc	.+18     	; 0x14dba <_key_btn+0x2c>
   14da8:	9b 37       	cpi	r25, 0x7B	; 123
   14daa:	09 f4       	brne	.+2      	; 0x14dae <_key_btn+0x20>
   14dac:	40 c0       	rjmp	.+128    	; 0x14e2e <_key_btn+0xa0>
   14dae:	9d 37       	cpi	r25, 0x7D	; 125
   14db0:	e1 f1       	breq	.+120    	; 0x14e2a <_key_btn+0x9c>
   14db2:	97 37       	cpi	r25, 0x77	; 119
   14db4:	09 f0       	breq	.+2      	; 0x14db8 <_key_btn+0x2a>
   14db6:	3f c0       	rjmp	.+126    	; 0x14e36 <_key_btn+0xa8>
   14db8:	3c c0       	rjmp	.+120    	; 0x14e32 <_key_btn+0xa4>
   14dba:	9b 3b       	cpi	r25, 0xBB	; 187
   14dbc:	61 f1       	breq	.+88     	; 0x14e16 <_key_btn+0x88>
   14dbe:	9d 3b       	cpi	r25, 0xBD	; 189
   14dc0:	21 f1       	breq	.+72     	; 0x14e0a <_key_btn+0x7c>
   14dc2:	97 3b       	cpi	r25, 0xB7	; 183
   14dc4:	c1 f5       	brne	.+112    	; 0x14e36 <_key_btn+0xa8>
   14dc6:	2d c0       	rjmp	.+90     	; 0x14e22 <_key_btn+0x94>
   14dc8:	9e 3d       	cpi	r25, 0xDE	; 222
   14dca:	a9 f0       	breq	.+42     	; 0x14df6 <_key_btn+0x68>
   14dcc:	9f 3d       	cpi	r25, 0xDF	; 223
   14dce:	38 f4       	brcc	.+14     	; 0x14dde <_key_btn+0x50>
   14dd0:	9b 3d       	cpi	r25, 0xDB	; 219
   14dd2:	f9 f0       	breq	.+62     	; 0x14e12 <_key_btn+0x84>
   14dd4:	9d 3d       	cpi	r25, 0xDD	; 221
   14dd6:	b9 f0       	breq	.+46     	; 0x14e06 <_key_btn+0x78>
   14dd8:	97 3d       	cpi	r25, 0xD7	; 215
   14dda:	69 f5       	brne	.+90     	; 0x14e36 <_key_btn+0xa8>
   14ddc:	1e c0       	rjmp	.+60     	; 0x14e1a <_key_btn+0x8c>
   14dde:	9b 3e       	cpi	r25, 0xEB	; 235
   14de0:	b1 f0       	breq	.+44     	; 0x14e0e <_key_btn+0x80>
   14de2:	9c 3e       	cpi	r25, 0xEC	; 236
   14de4:	18 f4       	brcc	.+6      	; 0x14dec <_key_btn+0x5e>
   14de6:	97 3e       	cpi	r25, 0xE7	; 231
   14de8:	31 f5       	brne	.+76     	; 0x14e36 <_key_btn+0xa8>
   14dea:	19 c0       	rjmp	.+50     	; 0x14e1e <_key_btn+0x90>
   14dec:	9d 3e       	cpi	r25, 0xED	; 237
   14dee:	49 f0       	breq	.+18     	; 0x14e02 <_key_btn+0x74>
   14df0:	9e 3e       	cpi	r25, 0xEE	; 238
   14df2:	09 f5       	brne	.+66     	; 0x14e36 <_key_btn+0xa8>
   14df4:	02 c0       	rjmp	.+4      	; 0x14dfa <_key_btn+0x6c>
   14df6:	82 e3       	ldi	r24, 0x32	; 50
   14df8:	08 95       	ret
   14dfa:	81 e3       	ldi	r24, 0x31	; 49
   14dfc:	08 95       	ret
   14dfe:	83 e3       	ldi	r24, 0x33	; 51
   14e00:	08 95       	ret
		case 0xDE:
			__keychar = 0x32; //2
			break;
		case 0xBE:
			__keychar = 0x33; //3
			break;
   14e02:	84 e3       	ldi	r24, 0x34	; 52
   14e04:	08 95       	ret
		case 0xED:
			__keychar = 0x34; //4
			break;
   14e06:	85 e3       	ldi	r24, 0x35	; 53
   14e08:	08 95       	ret
		case 0xDD:
			__keychar = 0x35; //5
			break;
   14e0a:	86 e3       	ldi	r24, 0x36	; 54
   14e0c:	08 95       	ret
		case 0xBD:
			__keychar = 0x36; //6
			break;
   14e0e:	87 e3       	ldi	r24, 0x37	; 55
   14e10:	08 95       	ret
		case 0xEB:
			__keychar = 0x37; //7
			break;
   14e12:	88 e3       	ldi	r24, 0x38	; 56
   14e14:	08 95       	ret
		case 0xDB:
			__keychar = 0x38; //8
			break;
   14e16:	89 e3       	ldi	r24, 0x39	; 57
   14e18:	08 95       	ret
		case 0xBB:
			__keychar = 0x39; //9
			break;
   14e1a:	80 e3       	ldi	r24, 0x30	; 48
   14e1c:	08 95       	ret
		case 0xD7:
			__keychar = 0x30; //0
			break;
   14e1e:	8a e2       	ldi	r24, 0x2A	; 42
   14e20:	08 95       	ret
		case 0xE7:
			__keychar = 0x2a; //*
			break;
   14e22:	83 e2       	ldi	r24, 0x23	; 35
   14e24:	08 95       	ret
		case 0xB7:
			__keychar = 0x23; //#
			break;
   14e26:	81 ef       	ldi	r24, 0xF1	; 241
   14e28:	08 95       	ret
		case 0x7E:
			__keychar = 0xF1; //Menu 1
			break;
   14e2a:	82 ef       	ldi	r24, 0xF2	; 242
   14e2c:	08 95       	ret
		case 0x7D:
			__keychar = 0xF2; //Menu 2
			break;
   14e2e:	83 ef       	ldi	r24, 0xF3	; 243
   14e30:	08 95       	ret
		case 0x7B:
			__keychar = 0xF3; //Menu 3
			break;
   14e32:	84 ef       	ldi	r24, 0xF4	; 244
   14e34:	08 95       	ret
		case 0x77:
			__keychar = 0xF4; //Menu 4
			break;
		default:
		    IsKeyPressed = 0;
   14e36:	10 92 b8 02 	sts	0x02B8, r1
   14e3a:	80 e0       	ldi	r24, 0x00	; 0
			__keychar = 0x00;
			break;

	}
	return __keychar;
}
   14e3c:	08 95       	ret

00014e3e <_table_alphanum>:
	}
	_PAD_1st;
	return __key;
}

char _table_alphanum(char __caps, char __key, char __hit){
   14e3e:	98 2f       	mov	r25, r24
unsigned char __retchar = 0;

	switch(__key){
   14e40:	6d 3d       	cpi	r22, 0xDD	; 221
   14e42:	11 f1       	breq	.+68     	; 0x14e88 <_table_alphanum+0x4a>
   14e44:	6e 3d       	cpi	r22, 0xDE	; 222
   14e46:	60 f4       	brcc	.+24     	; 0x14e60 <_table_alphanum+0x22>
   14e48:	6d 3b       	cpi	r22, 0xBD	; 189
   14e4a:	01 f1       	breq	.+64     	; 0x14e8c <_table_alphanum+0x4e>
   14e4c:	6e 3b       	cpi	r22, 0xBE	; 190
   14e4e:	18 f4       	brcc	.+6      	; 0x14e56 <_table_alphanum+0x18>
   14e50:	6b 3b       	cpi	r22, 0xBB	; 187
   14e52:	21 f5       	brne	.+72     	; 0x14e9c <_table_alphanum+0x5e>
   14e54:	21 c0       	rjmp	.+66     	; 0x14e98 <_table_alphanum+0x5a>
   14e56:	6e 3b       	cpi	r22, 0xBE	; 190
   14e58:	99 f0       	breq	.+38     	; 0x14e80 <_table_alphanum+0x42>
   14e5a:	6b 3d       	cpi	r22, 0xDB	; 219
   14e5c:	f9 f4       	brne	.+62     	; 0x14e9c <_table_alphanum+0x5e>
   14e5e:	1a c0       	rjmp	.+52     	; 0x14e94 <_table_alphanum+0x56>
   14e60:	6b 3e       	cpi	r22, 0xEB	; 235
   14e62:	b1 f0       	breq	.+44     	; 0x14e90 <_table_alphanum+0x52>
   14e64:	6c 3e       	cpi	r22, 0xEC	; 236
   14e66:	18 f4       	brcc	.+6      	; 0x14e6e <_table_alphanum+0x30>
   14e68:	6e 3d       	cpi	r22, 0xDE	; 222
   14e6a:	c1 f4       	brne	.+48     	; 0x14e9c <_table_alphanum+0x5e>
   14e6c:	05 c0       	rjmp	.+10     	; 0x14e78 <_table_alphanum+0x3a>
   14e6e:	6d 3e       	cpi	r22, 0xED	; 237
   14e70:	49 f0       	breq	.+18     	; 0x14e84 <_table_alphanum+0x46>
   14e72:	6e 3e       	cpi	r22, 0xEE	; 238
   14e74:	99 f4       	brne	.+38     	; 0x14e9c <_table_alphanum+0x5e>
   14e76:	02 c0       	rjmp	.+4      	; 0x14e7c <_table_alphanum+0x3e>
   14e78:	82 e0       	ldi	r24, 0x02	; 2
   14e7a:	11 c0       	rjmp	.+34     	; 0x14e9e <_table_alphanum+0x60>
   14e7c:	81 e0       	ldi	r24, 0x01	; 1
   14e7e:	0f c0       	rjmp	.+30     	; 0x14e9e <_table_alphanum+0x60>
   14e80:	83 e0       	ldi	r24, 0x03	; 3
   14e82:	0d c0       	rjmp	.+26     	; 0x14e9e <_table_alphanum+0x60>
		case 0xDE:
			__key = 2; //2
			break;
		case 0xBE:
			__key = 3; //3
			break;
   14e84:	84 e0       	ldi	r24, 0x04	; 4
   14e86:	0b c0       	rjmp	.+22     	; 0x14e9e <_table_alphanum+0x60>
		case 0xED:
			__key = 4; //4
			break;
   14e88:	85 e0       	ldi	r24, 0x05	; 5
   14e8a:	09 c0       	rjmp	.+18     	; 0x14e9e <_table_alphanum+0x60>
		case 0xDD:
			__key = 5; //5
			break;
   14e8c:	86 e0       	ldi	r24, 0x06	; 6
   14e8e:	07 c0       	rjmp	.+14     	; 0x14e9e <_table_alphanum+0x60>
		case 0xBD:
			__key = 6; //6
			break;
   14e90:	87 e0       	ldi	r24, 0x07	; 7
   14e92:	05 c0       	rjmp	.+10     	; 0x14e9e <_table_alphanum+0x60>
		case 0xEB:
			__key = 7; //7
			break;
   14e94:	88 e0       	ldi	r24, 0x08	; 8
   14e96:	03 c0       	rjmp	.+6      	; 0x14e9e <_table_alphanum+0x60>
		case 0xDB:
			__key = 8; //8
			break;
   14e98:	89 e0       	ldi	r24, 0x09	; 9
   14e9a:	01 c0       	rjmp	.+2      	; 0x14e9e <_table_alphanum+0x60>
		case 0xBB:
			__key = 9; //9
			break;
   14e9c:	80 e0       	ldi	r24, 0x00	; 0
		default:
			__key = 0;
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
   14e9e:	28 2f       	mov	r18, r24
   14ea0:	30 e0       	ldi	r19, 0x00	; 0
   14ea2:	f9 01       	movw	r30, r18
   14ea4:	e4 50       	subi	r30, 0x04	; 4
   14ea6:	fa 4d       	sbci	r31, 0xDA	; 218
   14ea8:	e4 91       	lpm	r30, Z+
   14eaa:	e4 17       	cp	r30, r20
   14eac:	10 f4       	brcc	.+4      	; 0x14eb2 <_table_alphanum+0x74>
   14eae:	80 e0       	ldi	r24, 0x00	; 0
   14eb0:	08 95       	ret
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
   14eb2:	ec e3       	ldi	r30, 0x3C	; 60
   14eb4:	9e 9f       	mul	r25, r30
   14eb6:	f0 01       	movw	r30, r0
   14eb8:	11 24       	eor	r1, r1
   14eba:	e4 0f       	add	r30, r20
   14ebc:	f1 1d       	adc	r31, r1
   14ebe:	c9 01       	movw	r24, r18
   14ec0:	88 0f       	add	r24, r24
   14ec2:	99 1f       	adc	r25, r25
   14ec4:	82 0f       	add	r24, r18
   14ec6:	93 1f       	adc	r25, r19
   14ec8:	88 0f       	add	r24, r24
   14eca:	99 1f       	adc	r25, r25
   14ecc:	e8 0f       	add	r30, r24
   14ece:	f9 1f       	adc	r31, r25
   14ed0:	ec 57       	subi	r30, 0x7C	; 124
   14ed2:	fa 4d       	sbci	r31, 0xDA	; 218
   14ed4:	84 91       	lpm	r24, Z+
	else __retchar = '\0';

	return __retchar;
}
   14ed6:	08 95       	ret

00014ed8 <_key_scan>:





char _key_scan(char __select){
   14ed8:	1f 93       	push	r17
   14eda:	18 2f       	mov	r17, r24
	char	__key = 0;

	if(__select==_PAD_SINGLE || __select==_PAD_MULTI){
   14edc:	81 50       	subi	r24, 0x01	; 1
   14ede:	82 30       	cpi	r24, 0x02	; 2
   14ee0:	08 f0       	brcs	.+2      	; 0x14ee4 <_key_scan+0xc>
   14ee2:	64 c0       	rjmp	.+200    	; 0x14fac <_key_scan+0xd4>
		__key = _key_hit();
   14ee4:	0e 94 78 a6 	call	0x14cf0	; 0x14cf0 <_key_hit>
		__key = _key_crr(__key);
   14ee8:	0e 94 a5 a6 	call	0x14d4a	; 0x14d4a <_key_crr>
   14eec:	28 2f       	mov	r18, r24

		if(__key!=_KEY_NULL){
   14eee:	88 23       	and	r24, r24
   14ef0:	09 f4       	brne	.+2      	; 0x14ef4 <_key_scan+0x1c>
   14ef2:	5d c0       	rjmp	.+186    	; 0x14fae <_key_scan+0xd6>
			_LIGHT_SET;
   14ef4:	91 e0       	ldi	r25, 0x01	; 1
   14ef6:	90 93 b3 02 	sts	0x02B3, r25
   14efa:	10 92 b4 02 	sts	0x02B4, r1
   14efe:	80 91 65 00 	lds	r24, 0x0065
   14f02:	8d 7f       	andi	r24, 0xFD	; 253
   14f04:	80 93 65 00 	sts	0x0065, r24
			if(__sec_par)
   14f08:	80 91 bf 02 	lds	r24, 0x02BF
   14f0c:	88 23       	and	r24, r24
   14f0e:	31 f0       	breq	.+12     	; 0x14f1c <_key_scan+0x44>
				_SEC_ON;
   14f10:	90 93 ba 02 	sts	0x02BA, r25
   14f14:	10 92 bc 02 	sts	0x02BC, r1
   14f18:	10 92 bb 02 	sts	0x02BB, r1

			if(_IS1st){
   14f1c:	80 91 b5 02 	lds	r24, 0x02B5
   14f20:	88 23       	and	r24, r24
   14f22:	71 f4       	brne	.+28     	; 0x14f40 <_key_scan+0x68>
				if(	__key == _KEY_CANCEL || __key == _KEY_ENTER)
   14f24:	27 3e       	cpi	r18, 0xE7	; 231
   14f26:	11 f0       	breq	.+4      	; 0x14f2c <_key_scan+0x54>
   14f28:	27 3b       	cpi	r18, 0xB7	; 183
   14f2a:	31 f4       	brne	.+12     	; 0x14f38 <_key_scan+0x60>
					if(__lock_num)
   14f2c:	80 91 b2 02 	lds	r24, 0x02B2
   14f30:	88 23       	and	r24, r24
   14f32:	11 f0       	breq	.+4      	; 0x14f38 <_key_scan+0x60>
						__lock_num = 0;
   14f34:	10 92 b2 02 	sts	0x02B2, r1
				_PAD_2nd;
   14f38:	81 e0       	ldi	r24, 0x01	; 1
   14f3a:	80 93 b5 02 	sts	0x02B5, r24
   14f3e:	31 c0       	rjmp	.+98     	; 0x14fa2 <_key_scan+0xca>
				_delay_ms(5);
				return __key;
			}
			if(_IS2nd){
   14f40:	81 30       	cpi	r24, 0x01	; 1
   14f42:	a9 f5       	brne	.+106    	; 0x14fae <_key_scan+0xd6>
				if(__select==_PAD_MULTI){
   14f44:	12 30       	cpi	r17, 0x02	; 2
   14f46:	21 f5       	brne	.+72     	; 0x14f90 <_key_scan+0xb8>
					if(	__key==_KEY_0 || __key==_KEY_1 || __key==_KEY_2 || __key==_KEY_3||
   14f48:	27 3d       	cpi	r18, 0xD7	; 215
   14f4a:	91 f0       	breq	.+36     	; 0x14f70 <_key_scan+0x98>
   14f4c:	2e 3e       	cpi	r18, 0xEE	; 238
   14f4e:	81 f0       	breq	.+32     	; 0x14f70 <_key_scan+0x98>
   14f50:	2e 3d       	cpi	r18, 0xDE	; 222
   14f52:	71 f0       	breq	.+28     	; 0x14f70 <_key_scan+0x98>
   14f54:	2e 3b       	cpi	r18, 0xBE	; 190
   14f56:	61 f0       	breq	.+24     	; 0x14f70 <_key_scan+0x98>
   14f58:	2d 3e       	cpi	r18, 0xED	; 237
   14f5a:	51 f0       	breq	.+20     	; 0x14f70 <_key_scan+0x98>
   14f5c:	2d 3d       	cpi	r18, 0xDD	; 221
   14f5e:	41 f0       	breq	.+16     	; 0x14f70 <_key_scan+0x98>
   14f60:	2d 3b       	cpi	r18, 0xBD	; 189
   14f62:	31 f0       	breq	.+12     	; 0x14f70 <_key_scan+0x98>
   14f64:	2b 3e       	cpi	r18, 0xEB	; 235
   14f66:	21 f0       	breq	.+8      	; 0x14f70 <_key_scan+0x98>
   14f68:	2b 3d       	cpi	r18, 0xDB	; 219
   14f6a:	11 f0       	breq	.+4      	; 0x14f70 <_key_scan+0x98>
   14f6c:	2b 3b       	cpi	r18, 0xBB	; 187
   14f6e:	81 f4       	brne	.+32     	; 0x14f90 <_key_scan+0xb8>
						__key==_KEY_4 || __key==_KEY_5 || __key==_KEY_6 ||
						__key==_KEY_7 || __key==_KEY_8 || __key==_KEY_9){
						if(__lock_num){
   14f70:	80 91 b2 02 	lds	r24, 0x02B2
   14f74:	88 23       	and	r24, r24
   14f76:	49 f0       	breq	.+18     	; 0x14f8a <_key_scan+0xb2>
							_SHIFT_SET;
   14f78:	81 e0       	ldi	r24, 0x01	; 1
   14f7a:	80 93 b6 02 	sts	0x02B6, r24
   14f7e:	10 92 b7 02 	sts	0x02B7, r1
							CURSOR_HIDE;
   14f82:	8c e0       	ldi	r24, 0x0C	; 12
   14f84:	0e 94 19 a5 	call	0x14a32	; 0x14a32 <lcd_command>
   14f88:	03 c0       	rjmp	.+6      	; 0x14f90 <_key_scan+0xb8>
						}
						else
							__lock_num = 1;
   14f8a:	81 e0       	ldi	r24, 0x01	; 1
   14f8c:	80 93 b2 02 	sts	0x02B2, r24
					}
				}
				do{
					__key = _key_hit();
   14f90:	0e 94 78 a6 	call	0x14cf0	; 0x14cf0 <_key_hit>
					__key = _key_crr(__key);
   14f94:	0e 94 a5 a6 	call	0x14d4a	; 0x14d4a <_key_crr>
   14f98:	28 2f       	mov	r18, r24
				}while(__key!=_KEY_NULL);
   14f9a:	88 23       	and	r24, r24
   14f9c:	c9 f7       	brne	.-14     	; 0x14f90 <_key_scan+0xb8>
				_PAD_1st;
   14f9e:	10 92 b5 02 	sts	0x02B5, r1
   14fa2:	82 ee       	ldi	r24, 0xE2	; 226
   14fa4:	94 e0       	ldi	r25, 0x04	; 4
   14fa6:	01 97       	sbiw	r24, 0x01	; 1
   14fa8:	f1 f7       	brne	.-4      	; 0x14fa6 <_key_scan+0xce>
   14faa:	03 c0       	rjmp	.+6      	; 0x14fb2 <_key_scan+0xda>
				_delay_ms(5);
				return _KEY_NULL;
   14fac:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
	}
	_PAD_1st;
   14fae:	10 92 b5 02 	sts	0x02B5, r1
	return __key;
}
   14fb2:	82 2f       	mov	r24, r18
   14fb4:	1f 91       	pop	r17
   14fb6:	08 95       	ret

00014fb8 <_spi_init>:
#include <util/delay.h>
#include <compat/deprecated.h>

#include "SPI.h"
void _spi_init(unsigned char __mode, unsigned char __interrupt){
	if(__mode){
   14fb8:	88 23       	and	r24, r24
   14fba:	41 f0       	breq	.+16     	; 0x14fcc <_spi_init+0x14>
		_SPI_DDR = (1 << _SPI_MOSI) | (1 << _SPI_SCK);
   14fbc:	86 e0       	ldi	r24, 0x06	; 6
   14fbe:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14fc0:	66 23       	and	r22, r22
   14fc2:	11 f0       	breq	.+4      	; 0x14fc8 <_spi_init+0x10>
			SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14fc4:	82 ed       	ldi	r24, 0xD2	; 210
   14fc6:	09 c0       	rjmp	.+18     	; 0x14fda <_spi_init+0x22>
		else
			SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14fc8:	82 e5       	ldi	r24, 0x52	; 82
   14fca:	07 c0       	rjmp	.+14     	; 0x14fda <_spi_init+0x22>
	}
	else{
		_SPI_DDR = (1 << _SPI_MISO);
   14fcc:	88 e0       	ldi	r24, 0x08	; 8
   14fce:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14fd0:	66 23       	and	r22, r22
   14fd2:	11 f0       	breq	.+4      	; 0x14fd8 <_spi_init+0x20>
			SPCR = (1 << SPIE) | (1 << SPE);
   14fd4:	80 ec       	ldi	r24, 0xC0	; 192
   14fd6:	01 c0       	rjmp	.+2      	; 0x14fda <_spi_init+0x22>
		else
			SPCR = (1 << SPE);
   14fd8:	80 e4       	ldi	r24, 0x40	; 64
   14fda:	8d b9       	out	0x0d, r24	; 13
   14fdc:	08 95       	ret

00014fde <_spi_enable>:
	}
}

void _spi_enable(unsigned char __select){
	if(__select == 0){
   14fde:	88 23       	and	r24, r24
   14fe0:	19 f4       	brne	.+6      	; 0x14fe8 <_spi_enable+0xa>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14fe2:	db 9a       	sbi	0x1b, 3	; 27
		sbi(_MMC_PORT, _MMC_PIN);
   14fe4:	1b 9a       	sbi	0x03, 3	; 3
   14fe6:	08 95       	ret
	}
	if(__select == 1){
   14fe8:	81 30       	cpi	r24, 0x01	; 1
   14fea:	39 f4       	brne	.+14     	; 0x14ffa <_spi_enable+0x1c>
		sbi(_MMC_PORT, _MMC_PIN);
   14fec:	1b 9a       	sbi	0x03, 3	; 3
   14fee:	82 ee       	ldi	r24, 0xE2	; 226
   14ff0:	94 e0       	ldi	r25, 0x04	; 4
   14ff2:	01 97       	sbiw	r24, 0x01	; 1
   14ff4:	f1 f7       	brne	.-4      	; 0x14ff2 <_spi_enable+0x14>
		_delay_ms(5);
		cbi(_SLAVE_PORT, _SLAVE_PIN);
   14ff6:	db 98       	cbi	0x1b, 3	; 27
   14ff8:	08 95       	ret
	}
	if(__select == 2){
   14ffa:	82 30       	cpi	r24, 0x02	; 2
   14ffc:	31 f4       	brne	.+12     	; 0x1500a <_spi_enable+0x2c>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14ffe:	db 9a       	sbi	0x1b, 3	; 27
   15000:	82 ee       	ldi	r24, 0xE2	; 226
   15002:	94 e0       	ldi	r25, 0x04	; 4
   15004:	01 97       	sbiw	r24, 0x01	; 1
   15006:	f1 f7       	brne	.-4      	; 0x15004 <_spi_enable+0x26>
		_delay_ms(5);
		cbi(_MMC_PORT, _MMC_PIN);
   15008:	1b 98       	cbi	0x03, 3	; 3
   1500a:	08 95       	ret

0001500c <_spi>:
	}
}

unsigned char _spi(unsigned char __data){
	SPDR = __data;
   1500c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
   1500e:	77 9b       	sbis	0x0e, 7	; 14
   15010:	fe cf       	rjmp	.-4      	; 0x1500e <_spi+0x2>
	return SPDR;
   15012:	8f b1       	in	r24, 0x0f	; 15
}
   15014:	08 95       	ret

00015016 <_rtc>:

#include <compat/twi.h>

#include "RTC.h"

unsigned char _rtc(int __addr, int __len, char* __datetime, unsigned char __dir){
   15016:	98 2f       	mov	r25, r24
	int				__twcr;
	unsigned char	__i = 0;
	
	if(__dir){
   15018:	22 23       	and	r18, r18
   1501a:	09 f4       	brne	.+2      	; 0x1501e <_rtc+0x8>
   1501c:	49 c0       	rjmp	.+146    	; 0x150b0 <_rtc+0x9a>
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   1501e:	84 ea       	ldi	r24, 0xA4	; 164
   15020:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   15024:	80 91 74 00 	lds	r24, 0x0074
   15028:	87 ff       	sbrs	r24, 7
   1502a:	fc cf       	rjmp	.-8      	; 0x15024 <_rtc+0xe>
		if(TW_STATUS != TW_START)
   1502c:	80 91 71 00 	lds	r24, 0x0071
   15030:	88 7f       	andi	r24, 0xF8	; 248
   15032:	88 30       	cpi	r24, 0x08	; 8
   15034:	09 f0       	breq	.+2      	; 0x15038 <_rtc+0x22>
   15036:	af c0       	rjmp	.+350    	; 0x15196 <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   15038:	80 ed       	ldi	r24, 0xD0	; 208
   1503a:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   1503e:	84 e8       	ldi	r24, 0x84	; 132
   15040:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   15044:	80 91 74 00 	lds	r24, 0x0074
   15048:	87 ff       	sbrs	r24, 7
   1504a:	fc cf       	rjmp	.-8      	; 0x15044 <_rtc+0x2e>
		if(TW_STATUS != TW_MT_SLA_ACK)
   1504c:	80 91 71 00 	lds	r24, 0x0071
   15050:	88 7f       	andi	r24, 0xF8	; 248
   15052:	88 31       	cpi	r24, 0x18	; 24
   15054:	09 f0       	breq	.+2      	; 0x15058 <_rtc+0x42>
   15056:	9f c0       	rjmp	.+318    	; 0x15196 <_rtc+0x180>
			return 1;

		TWDR = __addr;
   15058:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   1505c:	84 e8       	ldi	r24, 0x84	; 132
   1505e:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   15062:	80 91 74 00 	lds	r24, 0x0074
   15066:	87 ff       	sbrs	r24, 7
   15068:	fc cf       	rjmp	.-8      	; 0x15062 <_rtc+0x4c>
		if(TW_STATUS != TW_MT_DATA_ACK)
   1506a:	80 91 71 00 	lds	r24, 0x0071
   1506e:	88 7f       	andi	r24, 0xF8	; 248
   15070:	88 32       	cpi	r24, 0x28	; 40
   15072:	09 f0       	breq	.+2      	; 0x15076 <_rtc+0x60>
   15074:	90 c0       	rjmp	.+288    	; 0x15196 <_rtc+0x180>
   15076:	9b 01       	movw	r18, r22
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
			TWCR = _BV(TWINT) | _BV(TWEN);
   15078:	94 e8       	ldi	r25, 0x84	; 132
   1507a:	14 c0       	rjmp	.+40     	; 0x150a4 <_rtc+0x8e>
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
   1507c:	fa 01       	movw	r30, r20
   1507e:	e8 0f       	add	r30, r24
   15080:	f1 1d       	adc	r31, r1
   15082:	80 81       	ld	r24, Z
   15084:	80 93 73 00 	sts	0x0073, r24
			TWCR = _BV(TWINT) | _BV(TWEN);
   15088:	90 93 74 00 	sts	0x0074, r25
			_rtc_response;
   1508c:	80 91 74 00 	lds	r24, 0x0074
   15090:	87 ff       	sbrs	r24, 7
   15092:	fc cf       	rjmp	.-8      	; 0x1508c <_rtc+0x76>
			if(TW_STATUS == TW_MT_DATA_NACK)
   15094:	80 91 71 00 	lds	r24, 0x0071
   15098:	88 7f       	andi	r24, 0xF8	; 248
   1509a:	80 33       	cpi	r24, 0x30	; 48
   1509c:	09 f4       	brne	.+2      	; 0x150a0 <_rtc+0x8a>
   1509e:	7b c0       	rjmp	.+246    	; 0x15196 <_rtc+0x180>
		TWCR = _BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
   150a0:	21 50       	subi	r18, 0x01	; 1
   150a2:	30 40       	sbci	r19, 0x00	; 0
   150a4:	86 2f       	mov	r24, r22
   150a6:	82 1b       	sub	r24, r18
   150a8:	12 16       	cp	r1, r18
   150aa:	13 06       	cpc	r1, r19
   150ac:	3c f3       	brlt	.-50     	; 0x1507c <_rtc+0x66>
   150ae:	6e c0       	rjmp	.+220    	; 0x1518c <_rtc+0x176>
		}

		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}
	else{
		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   150b0:	84 ea       	ldi	r24, 0xA4	; 164
   150b2:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   150b6:	80 91 74 00 	lds	r24, 0x0074
   150ba:	87 ff       	sbrs	r24, 7
   150bc:	fc cf       	rjmp	.-8      	; 0x150b6 <_rtc+0xa0>
		if(TW_STATUS != TW_START)
   150be:	80 91 71 00 	lds	r24, 0x0071
   150c2:	88 7f       	andi	r24, 0xF8	; 248
   150c4:	88 30       	cpi	r24, 0x08	; 8
   150c6:	09 f0       	breq	.+2      	; 0x150ca <_rtc+0xb4>
   150c8:	66 c0       	rjmp	.+204    	; 0x15196 <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   150ca:	80 ed       	ldi	r24, 0xD0	; 208
   150cc:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   150d0:	84 e8       	ldi	r24, 0x84	; 132
   150d2:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   150d6:	80 91 74 00 	lds	r24, 0x0074
   150da:	87 ff       	sbrs	r24, 7
   150dc:	fc cf       	rjmp	.-8      	; 0x150d6 <_rtc+0xc0>
		if(TW_STATUS != TW_MT_SLA_ACK)
   150de:	80 91 71 00 	lds	r24, 0x0071
   150e2:	88 7f       	andi	r24, 0xF8	; 248
   150e4:	88 31       	cpi	r24, 0x18	; 24
   150e6:	09 f0       	breq	.+2      	; 0x150ea <_rtc+0xd4>
   150e8:	56 c0       	rjmp	.+172    	; 0x15196 <_rtc+0x180>
			return 1;

		TWDR = __addr;
   150ea:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   150ee:	84 e8       	ldi	r24, 0x84	; 132
   150f0:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   150f4:	80 91 74 00 	lds	r24, 0x0074
   150f8:	87 ff       	sbrs	r24, 7
   150fa:	fc cf       	rjmp	.-8      	; 0x150f4 <_rtc+0xde>
		if(TW_STATUS != TW_MT_DATA_ACK)
   150fc:	80 91 71 00 	lds	r24, 0x0071
   15100:	88 7f       	andi	r24, 0xF8	; 248
   15102:	88 32       	cpi	r24, 0x28	; 40
   15104:	09 f0       	breq	.+2      	; 0x15108 <_rtc+0xf2>
   15106:	47 c0       	rjmp	.+142    	; 0x15196 <_rtc+0x180>
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   15108:	84 ea       	ldi	r24, 0xA4	; 164
   1510a:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   1510e:	80 91 74 00 	lds	r24, 0x0074
   15112:	87 ff       	sbrs	r24, 7
   15114:	fc cf       	rjmp	.-8      	; 0x1510e <_rtc+0xf8>
		if(TW_STATUS != TW_REP_START)
   15116:	80 91 71 00 	lds	r24, 0x0071
   1511a:	88 7f       	andi	r24, 0xF8	; 248
   1511c:	80 31       	cpi	r24, 0x10	; 16
   1511e:	d9 f5       	brne	.+118    	; 0x15196 <_rtc+0x180>
			return 1;

		TWDR = _DS1307R;
   15120:	81 ed       	ldi	r24, 0xD1	; 209
   15122:	80 93 73 00 	sts	0x0073, r24
		TWCR =_BV(TWINT) | _BV(TWEN);
   15126:	84 e8       	ldi	r24, 0x84	; 132
   15128:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   1512c:	80 91 74 00 	lds	r24, 0x0074
   15130:	87 ff       	sbrs	r24, 7
   15132:	fc cf       	rjmp	.-8      	; 0x1512c <_rtc+0x116>
		if(TW_STATUS != TW_MR_SLA_ACK)
   15134:	80 91 71 00 	lds	r24, 0x0071
   15138:	88 7f       	andi	r24, 0xF8	; 248
   1513a:	80 34       	cpi	r24, 0x40	; 64
   1513c:	61 f5       	brne	.+88     	; 0x15196 <_rtc+0x180>
   1513e:	24 ec       	ldi	r18, 0xC4	; 196
   15140:	30 e0       	ldi	r19, 0x00	; 0
   15142:	90 e0       	ldi	r25, 0x00	; 0
   15144:	20 c0       	rjmp	.+64     	; 0x15186 <_rtc+0x170>
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
			if(__len == 1)
   15146:	61 30       	cpi	r22, 0x01	; 1
   15148:	71 05       	cpc	r23, r1
   1514a:	11 f4       	brne	.+4      	; 0x15150 <_rtc+0x13a>
   1514c:	24 e8       	ldi	r18, 0x84	; 132
   1514e:	30 e0       	ldi	r19, 0x00	; 0
				__twcr = _BV(TWINT) | _BV(TWEN);
			TWCR = __twcr;
   15150:	20 93 74 00 	sts	0x0074, r18
			_rtc_response;
   15154:	80 91 74 00 	lds	r24, 0x0074
   15158:	87 ff       	sbrs	r24, 7
   1515a:	fc cf       	rjmp	.-8      	; 0x15154 <_rtc+0x13e>
			if(TW_STATUS == TW_MR_DATA_NACK)
   1515c:	80 91 71 00 	lds	r24, 0x0071
   15160:	88 7f       	andi	r24, 0xF8	; 248
   15162:	88 35       	cpi	r24, 0x58	; 88
   15164:	11 f4       	brne	.+4      	; 0x1516a <_rtc+0x154>
   15166:	60 e0       	ldi	r22, 0x00	; 0
   15168:	70 e0       	ldi	r23, 0x00	; 0
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
   1516a:	80 91 71 00 	lds	r24, 0x0071
   1516e:	88 7f       	andi	r24, 0xF8	; 248
   15170:	80 35       	cpi	r24, 0x50	; 80
   15172:	39 f4       	brne	.+14     	; 0x15182 <_rtc+0x16c>
				__datetime[__i++] = TWDR;
   15174:	80 91 73 00 	lds	r24, 0x0073
   15178:	fa 01       	movw	r30, r20
   1517a:	e9 0f       	add	r30, r25
   1517c:	f1 1d       	adc	r31, r1
   1517e:	80 83       	st	Z, r24
   15180:	9f 5f       	subi	r25, 0xFF	; 255
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
   15182:	61 50       	subi	r22, 0x01	; 1
   15184:	70 40       	sbci	r23, 0x00	; 0
   15186:	16 16       	cp	r1, r22
   15188:	17 06       	cpc	r1, r23
   1518a:	ec f2       	brlt	.-70     	; 0x15146 <_rtc+0x130>
			if(TW_STATUS == TW_MR_DATA_NACK)
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
				__datetime[__i++] = TWDR;
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
   1518c:	84 e9       	ldi	r24, 0x94	; 148
   1518e:	80 93 74 00 	sts	0x0074, r24
   15192:	80 e0       	ldi	r24, 0x00	; 0
   15194:	08 95       	ret
   15196:	81 e0       	ldi	r24, 0x01	; 1
	}

    return 0;
}
   15198:	08 95       	ret

0001519a <_datetime>:

void _datetime(unsigned char __mode, char* __date, char* __time){
   1519a:	ef 92       	push	r14
   1519c:	ff 92       	push	r15
   1519e:	0f 93       	push	r16
   151a0:	1f 93       	push	r17
   151a2:	df 93       	push	r29
   151a4:	cf 93       	push	r28
   151a6:	cd b7       	in	r28, 0x3d	; 61
   151a8:	de b7       	in	r29, 0x3e	; 62
   151aa:	64 97       	sbiw	r28, 0x14	; 20
   151ac:	0f b6       	in	r0, 0x3f	; 63
   151ae:	f8 94       	cli
   151b0:	de bf       	out	0x3e, r29	; 62
   151b2:	0f be       	out	0x3f, r0	; 63
   151b4:	cd bf       	out	0x3d, r28	; 61
   151b6:	28 2f       	mov	r18, r24
   151b8:	8b 01       	movw	r16, r22
   151ba:	7a 01       	movw	r14, r20
   151bc:	ae 01       	movw	r20, r28
   151be:	4f 5f       	subi	r20, 0xFF	; 255
   151c0:	5f 4f       	sbci	r21, 0xFF	; 255
	char	__datetime[20];

	if(__mode){
   151c2:	88 23       	and	r24, r24
   151c4:	99 f1       	breq	.+102    	; 0x1522c <_datetime+0x92>
		__datetime[4] = (((__date[0] - 0x30) & 0x0F) << 4) + ((__date[1] - 0x30) & 0x0F);
   151c6:	fb 01       	movw	r30, r22
   151c8:	90 81       	ld	r25, Z
   151ca:	92 95       	swap	r25
   151cc:	90 7f       	andi	r25, 0xF0	; 240
   151ce:	81 81       	ldd	r24, Z+1	; 0x01
   151d0:	8f 70       	andi	r24, 0x0F	; 15
   151d2:	98 0f       	add	r25, r24
   151d4:	9d 83       	std	Y+5, r25	; 0x05
		__datetime[5] = (((__date[3] - 0x30) & 0x0F) << 4) + ((__date[4] - 0x30) & 0x0F);
   151d6:	93 81       	ldd	r25, Z+3	; 0x03
   151d8:	92 95       	swap	r25
   151da:	90 7f       	andi	r25, 0xF0	; 240
   151dc:	84 81       	ldd	r24, Z+4	; 0x04
   151de:	8f 70       	andi	r24, 0x0F	; 15
   151e0:	98 0f       	add	r25, r24
   151e2:	9e 83       	std	Y+6, r25	; 0x06
		__datetime[6] = (((__date[6] - 0x30) & 0x0F) << 4) + ((__date[7] - 0x30) & 0x0F);
   151e4:	96 81       	ldd	r25, Z+6	; 0x06
   151e6:	92 95       	swap	r25
   151e8:	90 7f       	andi	r25, 0xF0	; 240
   151ea:	87 81       	ldd	r24, Z+7	; 0x07
   151ec:	8f 70       	andi	r24, 0x0F	; 15
   151ee:	98 0f       	add	r25, r24
   151f0:	9f 83       	std	Y+7, r25	; 0x07

		__datetime[2] = (((__time[0] - 0x30) & 0x0F) << 4) + ((__time[1] - 0x30) & 0x0F);
   151f2:	f7 01       	movw	r30, r14
   151f4:	90 81       	ld	r25, Z
   151f6:	92 95       	swap	r25
   151f8:	90 7f       	andi	r25, 0xF0	; 240
   151fa:	81 81       	ldd	r24, Z+1	; 0x01
   151fc:	8f 70       	andi	r24, 0x0F	; 15
   151fe:	98 0f       	add	r25, r24
   15200:	9b 83       	std	Y+3, r25	; 0x03
		__datetime[1] = (((__time[3] - 0x30) & 0x0F) << 4) + ((__time[4] - 0x30) & 0x0F);
   15202:	93 81       	ldd	r25, Z+3	; 0x03
   15204:	92 95       	swap	r25
   15206:	90 7f       	andi	r25, 0xF0	; 240
   15208:	84 81       	ldd	r24, Z+4	; 0x04
   1520a:	8f 70       	andi	r24, 0x0F	; 15
   1520c:	98 0f       	add	r25, r24
   1520e:	9a 83       	std	Y+2, r25	; 0x02
		__datetime[0] = (((__time[6] - 0x30) & 0x0F) << 4) + ((__time[7] - 0x30) & 0x0F);
   15210:	96 81       	ldd	r25, Z+6	; 0x06
   15212:	92 95       	swap	r25
   15214:	90 7f       	andi	r25, 0xF0	; 240
   15216:	87 81       	ldd	r24, Z+7	; 0x07
   15218:	8f 70       	andi	r24, 0x0F	; 15
   1521a:	98 0f       	add	r25, r24
   1521c:	99 83       	std	Y+1, r25	; 0x01
		_rtc(0, 8, __datetime, __mode);
   1521e:	80 e0       	ldi	r24, 0x00	; 0
   15220:	90 e0       	ldi	r25, 0x00	; 0
   15222:	68 e0       	ldi	r22, 0x08	; 8
   15224:	70 e0       	ldi	r23, 0x00	; 0
   15226:	0e 94 0b a8 	call	0x15016	; 0x15016 <_rtc>
   1522a:	4a c0       	rjmp	.+148    	; 0x152c0 <_datetime+0x126>
	}
	else
		if(_rtc(0, 8, __datetime, __mode) != 1){
   1522c:	80 e0       	ldi	r24, 0x00	; 0
   1522e:	90 e0       	ldi	r25, 0x00	; 0
   15230:	68 e0       	ldi	r22, 0x08	; 8
   15232:	70 e0       	ldi	r23, 0x00	; 0
   15234:	20 e0       	ldi	r18, 0x00	; 0
   15236:	0e 94 0b a8 	call	0x15016	; 0x15016 <_rtc>
   1523a:	81 30       	cpi	r24, 0x01	; 1
   1523c:	09 f4       	brne	.+2      	; 0x15240 <_datetime+0xa6>
   1523e:	40 c0       	rjmp	.+128    	; 0x152c0 <_datetime+0x126>
			__date[0] = (__datetime[4] >> 4) + 0x30;
   15240:	9d 81       	ldd	r25, Y+5	; 0x05
   15242:	89 2f       	mov	r24, r25
   15244:	82 95       	swap	r24
   15246:	8f 70       	andi	r24, 0x0F	; 15
   15248:	80 5d       	subi	r24, 0xD0	; 208
   1524a:	f8 01       	movw	r30, r16
   1524c:	80 83       	st	Z, r24
			__date[1] = (__datetime[4] & 0x0F) + 0x30;
   1524e:	9f 70       	andi	r25, 0x0F	; 15
   15250:	90 5d       	subi	r25, 0xD0	; 208
   15252:	91 83       	std	Z+1, r25	; 0x01
			__date[2] = '/';
   15254:	2f e2       	ldi	r18, 0x2F	; 47
   15256:	22 83       	std	Z+2, r18	; 0x02
			__date[3] = (__datetime[5] >> 4) + 0x30;
   15258:	9e 81       	ldd	r25, Y+6	; 0x06
   1525a:	89 2f       	mov	r24, r25
   1525c:	82 95       	swap	r24
   1525e:	8f 70       	andi	r24, 0x0F	; 15
   15260:	80 5d       	subi	r24, 0xD0	; 208
   15262:	83 83       	std	Z+3, r24	; 0x03
			__date[4] = (__datetime[5] & 0x0F) + 0x30;
   15264:	9f 70       	andi	r25, 0x0F	; 15
   15266:	90 5d       	subi	r25, 0xD0	; 208
   15268:	94 83       	std	Z+4, r25	; 0x04
			__date[5] = '/';
   1526a:	25 83       	std	Z+5, r18	; 0x05
			__date[6] = (__datetime[6] >> 4) + 0x30;
   1526c:	9f 81       	ldd	r25, Y+7	; 0x07
   1526e:	89 2f       	mov	r24, r25
   15270:	82 95       	swap	r24
   15272:	8f 70       	andi	r24, 0x0F	; 15
   15274:	80 5d       	subi	r24, 0xD0	; 208
   15276:	86 83       	std	Z+6, r24	; 0x06
			__date[7] = (__datetime[6] & 0x0F) + 0x30;
   15278:	9f 70       	andi	r25, 0x0F	; 15
   1527a:	90 5d       	subi	r25, 0xD0	; 208
   1527c:	97 83       	std	Z+7, r25	; 0x07
			__date[8] = '\0';
   1527e:	10 86       	std	Z+8, r1	; 0x08

			__time[0] = (__datetime[2] >> 4) + 0x30;
   15280:	9b 81       	ldd	r25, Y+3	; 0x03
   15282:	89 2f       	mov	r24, r25
   15284:	82 95       	swap	r24
   15286:	8f 70       	andi	r24, 0x0F	; 15
   15288:	80 5d       	subi	r24, 0xD0	; 208
   1528a:	f7 01       	movw	r30, r14
   1528c:	80 83       	st	Z, r24
			__time[1] = (__datetime[2] & 0x0F) + 0x30;
   1528e:	9f 70       	andi	r25, 0x0F	; 15
   15290:	90 5d       	subi	r25, 0xD0	; 208
   15292:	91 83       	std	Z+1, r25	; 0x01
			__time[2] = ':';
   15294:	2a e3       	ldi	r18, 0x3A	; 58
   15296:	22 83       	std	Z+2, r18	; 0x02
			__time[3] = (__datetime[1] >> 4) + 0x30;
   15298:	9a 81       	ldd	r25, Y+2	; 0x02
   1529a:	89 2f       	mov	r24, r25
   1529c:	82 95       	swap	r24
   1529e:	8f 70       	andi	r24, 0x0F	; 15
   152a0:	80 5d       	subi	r24, 0xD0	; 208
   152a2:	83 83       	std	Z+3, r24	; 0x03
			__time[4] = (__datetime[1] & 0x0F) + 0x30;
   152a4:	9f 70       	andi	r25, 0x0F	; 15
   152a6:	90 5d       	subi	r25, 0xD0	; 208
   152a8:	94 83       	std	Z+4, r25	; 0x04
			__time[5] = ':';
   152aa:	25 83       	std	Z+5, r18	; 0x05
			__time[6] = (__datetime[0] >> 4) + 0x30;
   152ac:	99 81       	ldd	r25, Y+1	; 0x01
   152ae:	89 2f       	mov	r24, r25
   152b0:	82 95       	swap	r24
   152b2:	8f 70       	andi	r24, 0x0F	; 15
   152b4:	80 5d       	subi	r24, 0xD0	; 208
   152b6:	86 83       	std	Z+6, r24	; 0x06
			__time[7] = (__datetime[0] & 0x0F) + 0x30;
   152b8:	9f 70       	andi	r25, 0x0F	; 15
   152ba:	90 5d       	subi	r25, 0xD0	; 208
   152bc:	97 83       	std	Z+7, r25	; 0x07
			__time[8] = '\0';
   152be:	10 86       	std	Z+8, r1	; 0x08
		}
}
   152c0:	64 96       	adiw	r28, 0x14	; 20
   152c2:	0f b6       	in	r0, 0x3f	; 63
   152c4:	f8 94       	cli
   152c6:	de bf       	out	0x3e, r29	; 62
   152c8:	0f be       	out	0x3f, r0	; 63
   152ca:	cd bf       	out	0x3d, r28	; 61
   152cc:	cf 91       	pop	r28
   152ce:	df 91       	pop	r29
   152d0:	1f 91       	pop	r17
   152d2:	0f 91       	pop	r16
   152d4:	ff 90       	pop	r15
   152d6:	ef 90       	pop	r14
   152d8:	08 95       	ret

000152da <_day>:

unsigned char _day(void){
   152da:	df 93       	push	r29
   152dc:	cf 93       	push	r28
   152de:	cd b7       	in	r28, 0x3d	; 61
   152e0:	de b7       	in	r29, 0x3e	; 62
   152e2:	64 97       	sbiw	r28, 0x14	; 20
   152e4:	0f b6       	in	r0, 0x3f	; 63
   152e6:	f8 94       	cli
   152e8:	de bf       	out	0x3e, r29	; 62
   152ea:	0f be       	out	0x3f, r0	; 63
   152ec:	cd bf       	out	0x3d, r28	; 61
	char	__datetime[20];

	if(_rtc(0, 8, __datetime, 0) != 1)
   152ee:	80 e0       	ldi	r24, 0x00	; 0
   152f0:	90 e0       	ldi	r25, 0x00	; 0
   152f2:	68 e0       	ldi	r22, 0x08	; 8
   152f4:	70 e0       	ldi	r23, 0x00	; 0
   152f6:	ae 01       	movw	r20, r28
   152f8:	4f 5f       	subi	r20, 0xFF	; 255
   152fa:	5f 4f       	sbci	r21, 0xFF	; 255
   152fc:	20 e0       	ldi	r18, 0x00	; 0
   152fe:	0e 94 0b a8 	call	0x15016	; 0x15016 <_rtc>
   15302:	81 30       	cpi	r24, 0x01	; 1
   15304:	11 f4       	brne	.+4      	; 0x1530a <_day+0x30>
   15306:	80 e0       	ldi	r24, 0x00	; 0
   15308:	02 c0       	rjmp	.+4      	; 0x1530e <_day+0x34>
		return __datetime[3] & 0x0F;
   1530a:	8c 81       	ldd	r24, Y+4	; 0x04
   1530c:	8f 70       	andi	r24, 0x0F	; 15
	return 0;
   1530e:	64 96       	adiw	r28, 0x14	; 20
   15310:	0f b6       	in	r0, 0x3f	; 63
   15312:	f8 94       	cli
   15314:	de bf       	out	0x3e, r29	; 62
   15316:	0f be       	out	0x3f, r0	; 63
   15318:	cd bf       	out	0x3d, r28	; 61
   1531a:	cf 91       	pop	r28
   1531c:	df 91       	pop	r29
   1531e:	08 95       	ret

00015320 <uart_baudrate>:
	}

	uart_baudrate(__com, __baudrate);
}

void uart_baudrate(unsigned char __com, unsigned long __baudrate){
   15320:	1f 93       	push	r17
   15322:	18 2f       	mov	r17, r24
   15324:	9a 01       	movw	r18, r20
   15326:	ab 01       	movw	r20, r22
	unsigned long __br;

	__br = (unsigned long)((_CPU_DEFAULT + (__baudrate * 8)) / (__baudrate * 16) - 1);
   15328:	ca 01       	movw	r24, r20
   1532a:	b9 01       	movw	r22, r18
   1532c:	60 50       	subi	r22, 0x00	; 0
   1532e:	70 4e       	sbci	r23, 0xE0	; 224
   15330:	83 4e       	sbci	r24, 0xE3	; 227
   15332:	9f 4f       	sbci	r25, 0xFF	; 255
   15334:	f3 e0       	ldi	r31, 0x03	; 3
   15336:	66 0f       	add	r22, r22
   15338:	77 1f       	adc	r23, r23
   1533a:	88 1f       	adc	r24, r24
   1533c:	99 1f       	adc	r25, r25
   1533e:	fa 95       	dec	r31
   15340:	d1 f7       	brne	.-12     	; 0x15336 <uart_baudrate+0x16>
   15342:	e4 e0       	ldi	r30, 0x04	; 4
   15344:	22 0f       	add	r18, r18
   15346:	33 1f       	adc	r19, r19
   15348:	44 1f       	adc	r20, r20
   1534a:	55 1f       	adc	r21, r21
   1534c:	ea 95       	dec	r30
   1534e:	d1 f7       	brne	.-12     	; 0x15344 <uart_baudrate+0x24>
   15350:	0e 94 a0 ab 	call	0x15740	; 0x15740 <__udivmodsi4>
   15354:	21 50       	subi	r18, 0x01	; 1
   15356:	30 40       	sbci	r19, 0x00	; 0
   15358:	40 40       	sbci	r20, 0x00	; 0
   1535a:	50 40       	sbci	r21, 0x00	; 0
   1535c:	bb 27       	eor	r27, r27
   1535e:	a5 2f       	mov	r26, r21
   15360:	94 2f       	mov	r25, r20
   15362:	83 2f       	mov	r24, r19

	if(__com){
   15364:	11 23       	and	r17, r17
   15366:	29 f0       	breq	.+10     	; 0x15372 <uart_baudrate+0x52>
		UBRR1L = __br;
   15368:	20 93 99 00 	sts	0x0099, r18
		UBRR1H = __br >> 8;
   1536c:	80 93 98 00 	sts	0x0098, r24
   15370:	03 c0       	rjmp	.+6      	; 0x15378 <uart_baudrate+0x58>
	}
	else{
		UBRR0L = __br;
   15372:	29 b9       	out	0x09, r18	; 9
		UBRR0H = __br >> 8;
   15374:	80 93 90 00 	sts	0x0090, r24
	}
}
   15378:	1f 91       	pop	r17
   1537a:	08 95       	ret

0001537c <uart_init>:
#include <util/delay.h>
#include <string.h>

#include "UART.h"

void uart_init(unsigned char __com, unsigned long __baudrate){
   1537c:	98 2f       	mov	r25, r24
	if(__com){
   1537e:	88 23       	and	r24, r24
   15380:	39 f0       	breq	.+14     	; 0x15390 <uart_init+0x14>
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
   15382:	88 e9       	ldi	r24, 0x98	; 152
   15384:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
   15388:	86 e0       	ldi	r24, 0x06	; 6
   1538a:	80 93 9d 00 	sts	0x009D, r24
   1538e:	05 c0       	rjmp	.+10     	; 0x1539a <uart_init+0x1e>
	}
	else{
		UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
   15390:	88 e9       	ldi	r24, 0x98	; 152
   15392:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
   15394:	86 e0       	ldi	r24, 0x06	; 6
   15396:	80 93 95 00 	sts	0x0095, r24
	}

	uart_baudrate(__com, __baudrate);
   1539a:	89 2f       	mov	r24, r25
   1539c:	0e 94 90 a9 	call	0x15320	; 0x15320 <uart_baudrate>
}
   153a0:	08 95       	ret

000153a2 <uart>:
		UBRR0H = __br >> 8;
	}
}

unsigned char uart(unsigned char __com, unsigned char __dir, unsigned char __chr){
	if(__com){
   153a2:	88 23       	and	r24, r24
   153a4:	81 f0       	breq	.+32     	; 0x153c6 <uart+0x24>
		if(__dir){
   153a6:	66 23       	and	r22, r22
   153a8:	39 f0       	breq	.+14     	; 0x153b8 <uart+0x16>
			loop_until_bit_is_set(UCSR1A, UDRE1);
   153aa:	80 91 9b 00 	lds	r24, 0x009B
   153ae:	85 ff       	sbrs	r24, 5
   153b0:	fc cf       	rjmp	.-8      	; 0x153aa <uart+0x8>
			UDR1 = __chr;
   153b2:	40 93 9c 00 	sts	0x009C, r20
   153b6:	0c c0       	rjmp	.+24     	; 0x153d0 <uart+0x2e>
		}
		else{
			loop_until_bit_is_set(UCSR1A, RXC);
   153b8:	80 91 9b 00 	lds	r24, 0x009B
   153bc:	87 ff       	sbrs	r24, 7
   153be:	fc cf       	rjmp	.-8      	; 0x153b8 <uart+0x16>
			return UDR1;
   153c0:	80 91 9c 00 	lds	r24, 0x009C
   153c4:	08 95       	ret
		}
	}
	else{
		if(__dir){
   153c6:	66 23       	and	r22, r22
   153c8:	29 f0       	breq	.+10     	; 0x153d4 <uart+0x32>
			loop_until_bit_is_set(UCSR0A, UDRE0);
   153ca:	5d 9b       	sbis	0x0b, 5	; 11
   153cc:	fe cf       	rjmp	.-4      	; 0x153ca <uart+0x28>
			UDR0 = __chr;
   153ce:	4c b9       	out	0x0c, r20	; 12
   153d0:	81 e0       	ldi	r24, 0x01	; 1
   153d2:	08 95       	ret
		}
		else{
			loop_until_bit_is_set(UCSR0A,  RXC);
   153d4:	5f 9b       	sbis	0x0b, 7	; 11
   153d6:	fe cf       	rjmp	.-4      	; 0x153d4 <uart+0x32>
			return UDR0;
   153d8:	8c b1       	in	r24, 0x0c	; 12
		}

	}

	return 1;
}
   153da:	08 95       	ret

000153dc <uart_print>:

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
   153dc:	0f 93       	push	r16
   153de:	1f 93       	push	r17
   153e0:	cf 93       	push	r28
   153e2:	df 93       	push	r29
   153e4:	18 2f       	mov	r17, r24
   153e6:	06 2f       	mov	r16, r22
   153e8:	ea 01       	movw	r28, r20
	if(strlen(__str)>0)
   153ea:	88 81       	ld	r24, Y
   153ec:	88 23       	and	r24, r24
   153ee:	31 f4       	brne	.+12     	; 0x153fc <uart_print+0x20>
   153f0:	08 c0       	rjmp	.+16     	; 0x15402 <uart_print+0x26>
		while(*__str)
		     uart(__com, 1, *__str++);
   153f2:	21 96       	adiw	r28, 0x01	; 1
   153f4:	81 2f       	mov	r24, r17
   153f6:	61 e0       	ldi	r22, 0x01	; 1
   153f8:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
	return 1;
}

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
	if(strlen(__str)>0)
		while(*__str)
   153fc:	48 81       	ld	r20, Y
   153fe:	44 23       	and	r20, r20
   15400:	c1 f7       	brne	.-16     	; 0x153f2 <uart_print+0x16>
		     uart(__com, 1, *__str++);

	if(__ret){
   15402:	00 23       	and	r16, r16
   15404:	51 f0       	breq	.+20     	; 0x1541a <uart_print+0x3e>
		uart(__com, 1, 0x0D);
   15406:	81 2f       	mov	r24, r17
   15408:	61 e0       	ldi	r22, 0x01	; 1
   1540a:	4d e0       	ldi	r20, 0x0D	; 13
   1540c:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		uart(__com, 1, 0x0A);
   15410:	81 2f       	mov	r24, r17
   15412:	61 e0       	ldi	r22, 0x01	; 1
   15414:	4a e0       	ldi	r20, 0x0A	; 10
   15416:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
   1541a:	82 ee       	ldi	r24, 0xE2	; 226
   1541c:	94 e0       	ldi	r25, 0x04	; 4
   1541e:	01 97       	sbiw	r24, 0x01	; 1
   15420:	f1 f7       	brne	.-4      	; 0x1541e <uart_print+0x42>
	}
	_delay_ms(5);
}
   15422:	df 91       	pop	r29
   15424:	cf 91       	pop	r28
   15426:	1f 91       	pop	r17
   15428:	0f 91       	pop	r16
   1542a:	08 95       	ret

0001542c <uart_printf>:

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
   1542c:	0f 93       	push	r16
   1542e:	1f 93       	push	r17
   15430:	cf 93       	push	r28
   15432:	df 93       	push	r29
   15434:	18 2f       	mov	r17, r24
   15436:	06 2f       	mov	r16, r22
   15438:	ea 01       	movw	r28, r20
   1543a:	07 c0       	rjmp	.+14     	; 0x1544a <uart_printf+0x1e>
	while(pgm_read_byte(&(*__str)))
		uart(__com, 1, pgm_read_byte(&(*__str++)));
   1543c:	21 96       	adiw	r28, 0x01	; 1
   1543e:	f9 01       	movw	r30, r18
   15440:	44 91       	lpm	r20, Z+
   15442:	81 2f       	mov	r24, r17
   15444:	61 e0       	ldi	r22, 0x01	; 1
   15446:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
   1544a:	9e 01       	movw	r18, r28
	}
	_delay_ms(5);
}

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
	while(pgm_read_byte(&(*__str)))
   1544c:	fe 01       	movw	r30, r28
   1544e:	84 91       	lpm	r24, Z+
   15450:	88 23       	and	r24, r24
   15452:	a1 f7       	brne	.-24     	; 0x1543c <uart_printf+0x10>
		uart(__com, 1, pgm_read_byte(&(*__str++)));

	if(__ret){
   15454:	00 23       	and	r16, r16
   15456:	51 f0       	breq	.+20     	; 0x1546c <uart_printf+0x40>
		uart(__com, 1, 0x0D);
   15458:	81 2f       	mov	r24, r17
   1545a:	61 e0       	ldi	r22, 0x01	; 1
   1545c:	4d e0       	ldi	r20, 0x0D	; 13
   1545e:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
		uart(__com, 1, 0x0A);
   15462:	81 2f       	mov	r24, r17
   15464:	61 e0       	ldi	r22, 0x01	; 1
   15466:	4a e0       	ldi	r20, 0x0A	; 10
   15468:	0e 94 d1 a9 	call	0x153a2	; 0x153a2 <uart>
   1546c:	86 ea       	ldi	r24, 0xA6	; 166
   1546e:	9e e0       	ldi	r25, 0x0E	; 14
   15470:	01 97       	sbiw	r24, 0x01	; 1
   15472:	f1 f7       	brne	.-4      	; 0x15470 <uart_printf+0x44>
	}
	_delay_ms(15);
}
   15474:	df 91       	pop	r29
   15476:	cf 91       	pop	r28
   15478:	1f 91       	pop	r17
   1547a:	0f 91       	pop	r16
   1547c:	08 95       	ret

0001547e <Int2Str>:

void Int2Str(char* __string, unsigned long __value){
   1547e:	6f 92       	push	r6
   15480:	7f 92       	push	r7
   15482:	8f 92       	push	r8
   15484:	9f 92       	push	r9
   15486:	af 92       	push	r10
   15488:	bf 92       	push	r11
   1548a:	cf 92       	push	r12
   1548c:	df 92       	push	r13
   1548e:	ef 92       	push	r14
   15490:	ff 92       	push	r15
   15492:	0f 93       	push	r16
   15494:	1f 93       	push	r17
   15496:	cf 93       	push	r28
   15498:	df 93       	push	r29
   1549a:	ec 01       	movw	r28, r24
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
   1549c:	41 15       	cp	r20, r1
   1549e:	51 05       	cpc	r21, r1
   154a0:	61 05       	cpc	r22, r1
   154a2:	71 05       	cpc	r23, r1
   154a4:	21 f4       	brne	.+8      	; 0x154ae <Int2Str+0x30>
		__string[0] = '0';
   154a6:	80 e3       	ldi	r24, 0x30	; 48
   154a8:	88 83       	st	Y, r24
		__string[1] = '\0';
   154aa:	19 82       	std	Y+1, r1	; 0x01
   154ac:	48 c0       	rjmp	.+144    	; 0x1553e <Int2Str+0xc0>
		return;
   154ae:	4a 01       	movw	r8, r20
   154b0:	5b 01       	movw	r10, r22
   154b2:	c1 2c       	mov	r12, r1
   154b4:	ba ec       	ldi	r27, 0xCA	; 202
   154b6:	db 2e       	mov	r13, r27
   154b8:	ba e9       	ldi	r27, 0x9A	; 154
   154ba:	eb 2e       	mov	r14, r27
   154bc:	bb e3       	ldi	r27, 0x3B	; 59
   154be:	fb 2e       	mov	r15, r27
   154c0:	10 e0       	ldi	r17, 0x00	; 0
   154c2:	00 e0       	ldi	r16, 0x00	; 0
   154c4:	77 24       	eor	r7, r7
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   154c6:	a0 e3       	ldi	r26, 0x30	; 48
   154c8:	6a 2e       	mov	r6, r26
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
		if(__num >= __devider){
   154ca:	8c 14       	cp	r8, r12
   154cc:	9d 04       	cpc	r9, r13
   154ce:	ae 04       	cpc	r10, r14
   154d0:	bf 04       	cpc	r11, r15
   154d2:	d0 f0       	brcs	.+52     	; 0x15508 <Int2Str+0x8a>
			__tmp = (int)(__num / __devider);
   154d4:	c5 01       	movw	r24, r10
   154d6:	b4 01       	movw	r22, r8
   154d8:	a7 01       	movw	r20, r14
   154da:	96 01       	movw	r18, r12
   154dc:	0e 94 a0 ab 	call	0x15740	; 0x15740 <__udivmodsi4>
   154e0:	12 2f       	mov	r17, r18
			__num = __num % __devider;
   154e2:	c5 01       	movw	r24, r10
   154e4:	b4 01       	movw	r22, r8
   154e6:	a7 01       	movw	r20, r14
   154e8:	96 01       	movw	r18, r12
   154ea:	0e 94 a0 ab 	call	0x15740	; 0x15740 <__udivmodsi4>
   154ee:	ac 01       	movw	r20, r24
   154f0:	cb 01       	movw	r24, r22
   154f2:	da 01       	movw	r26, r20
   154f4:	4c 01       	movw	r8, r24
   154f6:	5d 01       	movw	r10, r26
			__string[__i++] = __tmp + 0x30;
   154f8:	fe 01       	movw	r30, r28
   154fa:	e0 0f       	add	r30, r16
   154fc:	f1 1d       	adc	r31, r1
   154fe:	10 5d       	subi	r17, 0xD0	; 208
   15500:	10 83       	st	Z, r17
   15502:	0f 5f       	subi	r16, 0xFF	; 255
   15504:	11 e0       	ldi	r17, 0x01	; 1
   15506:	07 c0       	rjmp	.+14     	; 0x15516 <Int2Str+0x98>
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
   15508:	11 23       	and	r17, r17
   1550a:	29 f0       	breq	.+10     	; 0x15516 <Int2Str+0x98>
				__string[__i++] = 0x30;
   1550c:	fe 01       	movw	r30, r28
   1550e:	e0 0f       	add	r30, r16
   15510:	f1 1d       	adc	r31, r1
   15512:	60 82       	st	Z, r6
   15514:	0f 5f       	subi	r16, 0xFF	; 255
		__string[1] = '\0';
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
   15516:	73 94       	inc	r7
   15518:	8a e0       	ldi	r24, 0x0A	; 10
   1551a:	78 16       	cp	r7, r24
   1551c:	69 f0       	breq	.+26     	; 0x15538 <Int2Str+0xba>
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
		__devider = __devider / 10;
   1551e:	c7 01       	movw	r24, r14
   15520:	b6 01       	movw	r22, r12
   15522:	2a e0       	ldi	r18, 0x0A	; 10
   15524:	30 e0       	ldi	r19, 0x00	; 0
   15526:	40 e0       	ldi	r20, 0x00	; 0
   15528:	50 e0       	ldi	r21, 0x00	; 0
   1552a:	0e 94 a0 ab 	call	0x15740	; 0x15740 <__udivmodsi4>
   1552e:	c9 01       	movw	r24, r18
   15530:	da 01       	movw	r26, r20
   15532:	6c 01       	movw	r12, r24
   15534:	7d 01       	movw	r14, r26
   15536:	c9 cf       	rjmp	.-110    	; 0x154ca <Int2Str+0x4c>
	}
	__string[__i] = '\0';
   15538:	c0 0f       	add	r28, r16
   1553a:	d1 1d       	adc	r29, r1
   1553c:	18 82       	st	Y, r1
}
   1553e:	df 91       	pop	r29
   15540:	cf 91       	pop	r28
   15542:	1f 91       	pop	r17
   15544:	0f 91       	pop	r16
   15546:	ff 90       	pop	r15
   15548:	ef 90       	pop	r14
   1554a:	df 90       	pop	r13
   1554c:	cf 90       	pop	r12
   1554e:	bf 90       	pop	r11
   15550:	af 90       	pop	r10
   15552:	9f 90       	pop	r9
   15554:	8f 90       	pop	r8
   15556:	7f 90       	pop	r7
   15558:	6f 90       	pop	r6
   1555a:	08 95       	ret

0001555c <Str2Int>:

unsigned long Str2Int(char* __string){
   1555c:	6f 92       	push	r6
   1555e:	7f 92       	push	r7
   15560:	8f 92       	push	r8
   15562:	9f 92       	push	r9
   15564:	af 92       	push	r10
   15566:	bf 92       	push	r11
   15568:	cf 92       	push	r12
   1556a:	df 92       	push	r13
   1556c:	ef 92       	push	r14
   1556e:	ff 92       	push	r15
   15570:	0f 93       	push	r16
   15572:	1f 93       	push	r17
   15574:	cf 93       	push	r28
   15576:	df 93       	push	r29
   15578:	ec 01       	movw	r28, r24
	unsigned char	__i, __len;
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);
   1557a:	dc 01       	movw	r26, r24
   1557c:	0d 90       	ld	r0, X+
   1557e:	00 20       	and	r0, r0
   15580:	e9 f7       	brne	.-6      	; 0x1557c <Str2Int+0x20>
   15582:	11 97       	sbiw	r26, 0x01	; 1
   15584:	7a 2e       	mov	r7, r26
   15586:	78 1a       	sub	r7, r24

	if(__len > 0 && __len < 11){
   15588:	87 2d       	mov	r24, r7
   1558a:	81 50       	subi	r24, 0x01	; 1
   1558c:	8a 30       	cpi	r24, 0x0A	; 10
   1558e:	08 f0       	brcs	.+2      	; 0x15592 <Str2Int+0x36>
   15590:	64 c0       	rjmp	.+200    	; 0x1565a <Str2Int+0xfe>
   15592:	4e 01       	movw	r8, r28
   15594:	fe 01       	movw	r30, r28
		__devider = __devider / 10;
	}
	__string[__i] = '\0';
}

unsigned long Str2Int(char* __string){
   15596:	6c 2e       	mov	r6, r28
   15598:	05 c0       	rjmp	.+10     	; 0x155a4 <Str2Int+0x48>

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
   1559a:	81 91       	ld	r24, Z+
   1559c:	80 53       	subi	r24, 0x30	; 48
   1559e:	8a 30       	cpi	r24, 0x0A	; 10
   155a0:	08 f0       	brcs	.+2      	; 0x155a4 <Str2Int+0x48>
   155a2:	5b c0       	rjmp	.+182    	; 0x1565a <Str2Int+0xfe>
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
   155a4:	8e 2f       	mov	r24, r30
   155a6:	86 19       	sub	r24, r6
   155a8:	87 15       	cp	r24, r7
   155aa:	b8 f3       	brcs	.-18     	; 0x1559a <Str2Int+0x3e>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
   155ac:	8a e0       	ldi	r24, 0x0A	; 10
   155ae:	78 16       	cp	r7, r24
   155b0:	f9 f4       	brne	.+62     	; 0x155f0 <Str2Int+0x94>
			if(__string[0] < 0x30 || __string[0] > 0x32)
   155b2:	98 81       	ld	r25, Y
   155b4:	89 2f       	mov	r24, r25
   155b6:	80 53       	subi	r24, 0x30	; 48
   155b8:	83 30       	cpi	r24, 0x03	; 3
   155ba:	08 f0       	brcs	.+2      	; 0x155be <Str2Int+0x62>
   155bc:	4e c0       	rjmp	.+156    	; 0x1565a <Str2Int+0xfe>
				return 0;
			if(__string[0] == 0x32){
   155be:	92 33       	cpi	r25, 0x32	; 50
   155c0:	b9 f4       	brne	.+46     	; 0x155f0 <Str2Int+0x94>
   155c2:	fe 01       	movw	r30, r28
   155c4:	91 e0       	ldi	r25, 0x01	; 1
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
   155c6:	81 81       	ldd	r24, Z+1	; 0x01
   155c8:	80 33       	cpi	r24, 0x30	; 48
   155ca:	09 f0       	breq	.+2      	; 0x155ce <Str2Int+0x72>
   155cc:	46 c0       	rjmp	.+140    	; 0x1565a <Str2Int+0xfe>
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
   155ce:	9f 5f       	subi	r25, 0xFF	; 255
   155d0:	31 96       	adiw	r30, 0x01	; 1
   155d2:	9a 30       	cpi	r25, 0x0A	; 10
   155d4:	c1 f7       	brne	.-16     	; 0x155c6 <Str2Int+0x6a>
   155d6:	0c c0       	rjmp	.+24     	; 0x155f0 <Str2Int+0x94>
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
   155d8:	c6 01       	movw	r24, r12
   155da:	b5 01       	movw	r22, r10
   155dc:	2a e0       	ldi	r18, 0x0A	; 10
   155de:	30 e0       	ldi	r19, 0x00	; 0
   155e0:	40 e0       	ldi	r20, 0x00	; 0
   155e2:	50 e0       	ldi	r21, 0x00	; 0
   155e4:	0e 94 41 ab 	call	0x15682	; 0x15682 <__mulsi3>
   155e8:	5b 01       	movw	r10, r22
   155ea:	6c 01       	movw	r12, r24
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   155ec:	1f 5f       	subi	r17, 0xFF	; 255
   155ee:	09 c0       	rjmp	.+18     	; 0x15602 <Str2Int+0xa6>
   155f0:	10 e0       	ldi	r17, 0x00	; 0
   155f2:	01 e0       	ldi	r16, 0x01	; 1
   155f4:	a0 2e       	mov	r10, r16
   155f6:	b1 2c       	mov	r11, r1
   155f8:	c1 2c       	mov	r12, r1
   155fa:	d1 2c       	mov	r13, r1
   155fc:	c7 2d       	mov	r28, r7
   155fe:	d0 e0       	ldi	r29, 0x00	; 0
   15600:	21 97       	sbiw	r28, 0x01	; 1
   15602:	81 2f       	mov	r24, r17
   15604:	90 e0       	ldi	r25, 0x00	; 0
   15606:	8c 17       	cp	r24, r28
   15608:	9d 07       	cpc	r25, r29
   1560a:	34 f3       	brlt	.-52     	; 0x155d8 <Str2Int+0x7c>
   1560c:	ee 24       	eor	r14, r14
   1560e:	ff 24       	eor	r15, r15
   15610:	87 01       	movw	r16, r14
   15612:	1e c0       	rjmp	.+60     	; 0x15650 <Str2Int+0xf4>
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
   15614:	f4 01       	movw	r30, r8
   15616:	21 91       	ld	r18, Z+
   15618:	4f 01       	movw	r8, r30
   1561a:	30 e0       	ldi	r19, 0x00	; 0
   1561c:	20 53       	subi	r18, 0x30	; 48
   1561e:	30 40       	sbci	r19, 0x00	; 0
   15620:	44 27       	eor	r20, r20
   15622:	37 fd       	sbrc	r19, 7
   15624:	40 95       	com	r20
   15626:	54 2f       	mov	r21, r20
   15628:	c6 01       	movw	r24, r12
   1562a:	b5 01       	movw	r22, r10
   1562c:	0e 94 41 ab 	call	0x15682	; 0x15682 <__mulsi3>
   15630:	e6 0e       	add	r14, r22
   15632:	f7 1e       	adc	r15, r23
   15634:	08 1f       	adc	r16, r24
   15636:	19 1f       	adc	r17, r25
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   15638:	c6 01       	movw	r24, r12
   1563a:	b5 01       	movw	r22, r10
   1563c:	2a e0       	ldi	r18, 0x0A	; 10
   1563e:	30 e0       	ldi	r19, 0x00	; 0
   15640:	40 e0       	ldi	r20, 0x00	; 0
   15642:	50 e0       	ldi	r21, 0x00	; 0
   15644:	0e 94 a0 ab 	call	0x15740	; 0x15740 <__udivmodsi4>
   15648:	c9 01       	movw	r24, r18
   1564a:	da 01       	movw	r26, r20
   1564c:	5c 01       	movw	r10, r24
   1564e:	6d 01       	movw	r12, r26
   15650:	88 2d       	mov	r24, r8
   15652:	86 19       	sub	r24, r6
   15654:	87 15       	cp	r24, r7
   15656:	f0 f2       	brcs	.-68     	; 0x15614 <Str2Int+0xb8>
   15658:	03 c0       	rjmp	.+6      	; 0x15660 <Str2Int+0x104>
   1565a:	ee 24       	eor	r14, r14
   1565c:	ff 24       	eor	r15, r15
   1565e:	87 01       	movw	r16, r14
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
	}
	return __retval;
}
   15660:	b7 01       	movw	r22, r14
   15662:	c8 01       	movw	r24, r16
   15664:	df 91       	pop	r29
   15666:	cf 91       	pop	r28
   15668:	1f 91       	pop	r17
   1566a:	0f 91       	pop	r16
   1566c:	ff 90       	pop	r15
   1566e:	ef 90       	pop	r14
   15670:	df 90       	pop	r13
   15672:	cf 90       	pop	r12
   15674:	bf 90       	pop	r11
   15676:	af 90       	pop	r10
   15678:	9f 90       	pop	r9
   1567a:	8f 90       	pop	r8
   1567c:	7f 90       	pop	r7
   1567e:	6f 90       	pop	r6
   15680:	08 95       	ret

00015682 <__mulsi3>:
   15682:	62 9f       	mul	r22, r18
   15684:	d0 01       	movw	r26, r0
   15686:	73 9f       	mul	r23, r19
   15688:	f0 01       	movw	r30, r0
   1568a:	82 9f       	mul	r24, r18
   1568c:	e0 0d       	add	r30, r0
   1568e:	f1 1d       	adc	r31, r1
   15690:	64 9f       	mul	r22, r20
   15692:	e0 0d       	add	r30, r0
   15694:	f1 1d       	adc	r31, r1
   15696:	92 9f       	mul	r25, r18
   15698:	f0 0d       	add	r31, r0
   1569a:	83 9f       	mul	r24, r19
   1569c:	f0 0d       	add	r31, r0
   1569e:	74 9f       	mul	r23, r20
   156a0:	f0 0d       	add	r31, r0
   156a2:	65 9f       	mul	r22, r21
   156a4:	f0 0d       	add	r31, r0
   156a6:	99 27       	eor	r25, r25
   156a8:	72 9f       	mul	r23, r18
   156aa:	b0 0d       	add	r27, r0
   156ac:	e1 1d       	adc	r30, r1
   156ae:	f9 1f       	adc	r31, r25
   156b0:	63 9f       	mul	r22, r19
   156b2:	b0 0d       	add	r27, r0
   156b4:	e1 1d       	adc	r30, r1
   156b6:	f9 1f       	adc	r31, r25
   156b8:	bd 01       	movw	r22, r26
   156ba:	cf 01       	movw	r24, r30
   156bc:	11 24       	eor	r1, r1
   156be:	08 95       	ret

000156c0 <__udivmodqi4>:
   156c0:	99 1b       	sub	r25, r25
   156c2:	79 e0       	ldi	r23, 0x09	; 9
   156c4:	04 c0       	rjmp	.+8      	; 0x156ce <__udivmodqi4_ep>

000156c6 <__udivmodqi4_loop>:
   156c6:	99 1f       	adc	r25, r25
   156c8:	96 17       	cp	r25, r22
   156ca:	08 f0       	brcs	.+2      	; 0x156ce <__udivmodqi4_ep>
   156cc:	96 1b       	sub	r25, r22

000156ce <__udivmodqi4_ep>:
   156ce:	88 1f       	adc	r24, r24
   156d0:	7a 95       	dec	r23
   156d2:	c9 f7       	brne	.-14     	; 0x156c6 <__udivmodqi4_loop>
   156d4:	80 95       	com	r24
   156d6:	08 95       	ret

000156d8 <__divmodqi4>:
   156d8:	87 fb       	bst	r24, 7
   156da:	08 2e       	mov	r0, r24
   156dc:	06 26       	eor	r0, r22
   156de:	87 fd       	sbrc	r24, 7
   156e0:	81 95       	neg	r24
   156e2:	67 fd       	sbrc	r22, 7
   156e4:	61 95       	neg	r22
   156e6:	ec df       	rcall	.-40     	; 0x156c0 <__udivmodqi4>
   156e8:	0e f4       	brtc	.+2      	; 0x156ec <__divmodqi4_1>
   156ea:	91 95       	neg	r25

000156ec <__divmodqi4_1>:
   156ec:	07 fc       	sbrc	r0, 7
   156ee:	81 95       	neg	r24

000156f0 <__divmodqi4_exit>:
   156f0:	08 95       	ret

000156f2 <__udivmodhi4>:
   156f2:	aa 1b       	sub	r26, r26
   156f4:	bb 1b       	sub	r27, r27
   156f6:	51 e1       	ldi	r21, 0x11	; 17
   156f8:	07 c0       	rjmp	.+14     	; 0x15708 <__udivmodhi4_ep>

000156fa <__udivmodhi4_loop>:
   156fa:	aa 1f       	adc	r26, r26
   156fc:	bb 1f       	adc	r27, r27
   156fe:	a6 17       	cp	r26, r22
   15700:	b7 07       	cpc	r27, r23
   15702:	10 f0       	brcs	.+4      	; 0x15708 <__udivmodhi4_ep>
   15704:	a6 1b       	sub	r26, r22
   15706:	b7 0b       	sbc	r27, r23

00015708 <__udivmodhi4_ep>:
   15708:	88 1f       	adc	r24, r24
   1570a:	99 1f       	adc	r25, r25
   1570c:	5a 95       	dec	r21
   1570e:	a9 f7       	brne	.-22     	; 0x156fa <__udivmodhi4_loop>
   15710:	80 95       	com	r24
   15712:	90 95       	com	r25
   15714:	bc 01       	movw	r22, r24
   15716:	cd 01       	movw	r24, r26
   15718:	08 95       	ret

0001571a <__divmodhi4>:
   1571a:	97 fb       	bst	r25, 7
   1571c:	09 2e       	mov	r0, r25
   1571e:	07 26       	eor	r0, r23
   15720:	0a d0       	rcall	.+20     	; 0x15736 <__divmodhi4_neg1>
   15722:	77 fd       	sbrc	r23, 7
   15724:	04 d0       	rcall	.+8      	; 0x1572e <__divmodhi4_neg2>
   15726:	e5 df       	rcall	.-54     	; 0x156f2 <__udivmodhi4>
   15728:	06 d0       	rcall	.+12     	; 0x15736 <__divmodhi4_neg1>
   1572a:	00 20       	and	r0, r0
   1572c:	1a f4       	brpl	.+6      	; 0x15734 <__divmodhi4_exit>

0001572e <__divmodhi4_neg2>:
   1572e:	70 95       	com	r23
   15730:	61 95       	neg	r22
   15732:	7f 4f       	sbci	r23, 0xFF	; 255

00015734 <__divmodhi4_exit>:
   15734:	08 95       	ret

00015736 <__divmodhi4_neg1>:
   15736:	f6 f7       	brtc	.-4      	; 0x15734 <__divmodhi4_exit>
   15738:	90 95       	com	r25
   1573a:	81 95       	neg	r24
   1573c:	9f 4f       	sbci	r25, 0xFF	; 255
   1573e:	08 95       	ret

00015740 <__udivmodsi4>:
   15740:	a1 e2       	ldi	r26, 0x21	; 33
   15742:	1a 2e       	mov	r1, r26
   15744:	aa 1b       	sub	r26, r26
   15746:	bb 1b       	sub	r27, r27
   15748:	fd 01       	movw	r30, r26
   1574a:	0d c0       	rjmp	.+26     	; 0x15766 <__udivmodsi4_ep>

0001574c <__udivmodsi4_loop>:
   1574c:	aa 1f       	adc	r26, r26
   1574e:	bb 1f       	adc	r27, r27
   15750:	ee 1f       	adc	r30, r30
   15752:	ff 1f       	adc	r31, r31
   15754:	a2 17       	cp	r26, r18
   15756:	b3 07       	cpc	r27, r19
   15758:	e4 07       	cpc	r30, r20
   1575a:	f5 07       	cpc	r31, r21
   1575c:	20 f0       	brcs	.+8      	; 0x15766 <__udivmodsi4_ep>
   1575e:	a2 1b       	sub	r26, r18
   15760:	b3 0b       	sbc	r27, r19
   15762:	e4 0b       	sbc	r30, r20
   15764:	f5 0b       	sbc	r31, r21

00015766 <__udivmodsi4_ep>:
   15766:	66 1f       	adc	r22, r22
   15768:	77 1f       	adc	r23, r23
   1576a:	88 1f       	adc	r24, r24
   1576c:	99 1f       	adc	r25, r25
   1576e:	1a 94       	dec	r1
   15770:	69 f7       	brne	.-38     	; 0x1574c <__udivmodsi4_loop>
   15772:	60 95       	com	r22
   15774:	70 95       	com	r23
   15776:	80 95       	com	r24
   15778:	90 95       	com	r25
   1577a:	9b 01       	movw	r18, r22
   1577c:	ac 01       	movw	r20, r24
   1577e:	bd 01       	movw	r22, r26
   15780:	cf 01       	movw	r24, r30
   15782:	08 95       	ret

00015784 <atoi>:
   15784:	fc 01       	movw	r30, r24
   15786:	88 27       	eor	r24, r24
   15788:	99 27       	eor	r25, r25
   1578a:	e8 94       	clt
   1578c:	21 91       	ld	r18, Z+
   1578e:	20 32       	cpi	r18, 0x20	; 32
   15790:	e9 f3       	breq	.-6      	; 0x1578c <atoi+0x8>
   15792:	29 30       	cpi	r18, 0x09	; 9
   15794:	10 f0       	brcs	.+4      	; 0x1579a <atoi+0x16>
   15796:	2e 30       	cpi	r18, 0x0E	; 14
   15798:	c8 f3       	brcs	.-14     	; 0x1578c <atoi+0x8>
   1579a:	2b 32       	cpi	r18, 0x2B	; 43
   1579c:	41 f0       	breq	.+16     	; 0x157ae <atoi+0x2a>
   1579e:	2d 32       	cpi	r18, 0x2D	; 45
   157a0:	39 f4       	brne	.+14     	; 0x157b0 <atoi+0x2c>
   157a2:	68 94       	set
   157a4:	04 c0       	rjmp	.+8      	; 0x157ae <atoi+0x2a>
   157a6:	0e 94 f0 ab 	call	0x157e0	; 0x157e0 <__mulhi_const_10>
   157aa:	82 0f       	add	r24, r18
   157ac:	91 1d       	adc	r25, r1
   157ae:	21 91       	ld	r18, Z+
   157b0:	20 53       	subi	r18, 0x30	; 48
   157b2:	2a 30       	cpi	r18, 0x0A	; 10
   157b4:	c0 f3       	brcs	.-16     	; 0x157a6 <atoi+0x22>
   157b6:	1e f4       	brtc	.+6      	; 0x157be <atoi+0x3a>
   157b8:	90 95       	com	r25
   157ba:	81 95       	neg	r24
   157bc:	9f 4f       	sbci	r25, 0xFF	; 255
   157be:	08 95       	ret

000157c0 <strcpy_P>:
   157c0:	fb 01       	movw	r30, r22
   157c2:	dc 01       	movw	r26, r24
   157c4:	05 90       	lpm	r0, Z+
   157c6:	0d 92       	st	X+, r0
   157c8:	00 20       	and	r0, r0
   157ca:	e1 f7       	brne	.-8      	; 0x157c4 <strcpy_P+0x4>
   157cc:	08 95       	ret

000157ce <strcmp>:
   157ce:	fb 01       	movw	r30, r22
   157d0:	dc 01       	movw	r26, r24
   157d2:	8d 91       	ld	r24, X+
   157d4:	01 90       	ld	r0, Z+
   157d6:	80 19       	sub	r24, r0
   157d8:	01 10       	cpse	r0, r1
   157da:	d9 f3       	breq	.-10     	; 0x157d2 <strcmp+0x4>
   157dc:	99 0b       	sbc	r25, r25
   157de:	08 95       	ret

000157e0 <__mulhi_const_10>:
   157e0:	7a e0       	ldi	r23, 0x0A	; 10
   157e2:	97 9f       	mul	r25, r23
   157e4:	90 2d       	mov	r25, r0
   157e6:	87 9f       	mul	r24, r23
   157e8:	80 2d       	mov	r24, r0
   157ea:	91 0d       	add	r25, r1
   157ec:	11 24       	eor	r1, r1
   157ee:	08 95       	ret

000157f0 <sprintf_P>:
   157f0:	0f 93       	push	r16
   157f2:	1f 93       	push	r17
   157f4:	df 93       	push	r29
   157f6:	cf 93       	push	r28
   157f8:	cd b7       	in	r28, 0x3d	; 61
   157fa:	de b7       	in	r29, 0x3e	; 62
   157fc:	2e 97       	sbiw	r28, 0x0e	; 14
   157fe:	0f b6       	in	r0, 0x3f	; 63
   15800:	f8 94       	cli
   15802:	de bf       	out	0x3e, r29	; 62
   15804:	0f be       	out	0x3f, r0	; 63
   15806:	cd bf       	out	0x3d, r28	; 61
   15808:	0d 89       	ldd	r16, Y+21	; 0x15
   1580a:	1e 89       	ldd	r17, Y+22	; 0x16
   1580c:	8e e0       	ldi	r24, 0x0E	; 14
   1580e:	8c 83       	std	Y+4, r24	; 0x04
   15810:	1a 83       	std	Y+2, r17	; 0x02
   15812:	09 83       	std	Y+1, r16	; 0x01
   15814:	8f ef       	ldi	r24, 0xFF	; 255
   15816:	9f e7       	ldi	r25, 0x7F	; 127
   15818:	9e 83       	std	Y+6, r25	; 0x06
   1581a:	8d 83       	std	Y+5, r24	; 0x05
   1581c:	9e 01       	movw	r18, r28
   1581e:	27 5e       	subi	r18, 0xE7	; 231
   15820:	3f 4f       	sbci	r19, 0xFF	; 255
   15822:	ce 01       	movw	r24, r28
   15824:	01 96       	adiw	r24, 0x01	; 1
   15826:	6f 89       	ldd	r22, Y+23	; 0x17
   15828:	78 8d       	ldd	r23, Y+24	; 0x18
   1582a:	a9 01       	movw	r20, r18
   1582c:	0e 94 29 ac 	call	0x15852	; 0x15852 <vfprintf>
   15830:	2f 81       	ldd	r18, Y+7	; 0x07
   15832:	38 85       	ldd	r19, Y+8	; 0x08
   15834:	02 0f       	add	r16, r18
   15836:	13 1f       	adc	r17, r19
   15838:	f8 01       	movw	r30, r16
   1583a:	10 82       	st	Z, r1
   1583c:	2e 96       	adiw	r28, 0x0e	; 14
   1583e:	0f b6       	in	r0, 0x3f	; 63
   15840:	f8 94       	cli
   15842:	de bf       	out	0x3e, r29	; 62
   15844:	0f be       	out	0x3f, r0	; 63
   15846:	cd bf       	out	0x3d, r28	; 61
   15848:	cf 91       	pop	r28
   1584a:	df 91       	pop	r29
   1584c:	1f 91       	pop	r17
   1584e:	0f 91       	pop	r16
   15850:	08 95       	ret

00015852 <vfprintf>:
   15852:	2f 92       	push	r2
   15854:	3f 92       	push	r3
   15856:	4f 92       	push	r4
   15858:	5f 92       	push	r5
   1585a:	6f 92       	push	r6
   1585c:	7f 92       	push	r7
   1585e:	8f 92       	push	r8
   15860:	9f 92       	push	r9
   15862:	af 92       	push	r10
   15864:	bf 92       	push	r11
   15866:	cf 92       	push	r12
   15868:	df 92       	push	r13
   1586a:	ef 92       	push	r14
   1586c:	ff 92       	push	r15
   1586e:	0f 93       	push	r16
   15870:	1f 93       	push	r17
   15872:	df 93       	push	r29
   15874:	cf 93       	push	r28
   15876:	cd b7       	in	r28, 0x3d	; 61
   15878:	de b7       	in	r29, 0x3e	; 62
   1587a:	2b 97       	sbiw	r28, 0x0b	; 11
   1587c:	0f b6       	in	r0, 0x3f	; 63
   1587e:	f8 94       	cli
   15880:	de bf       	out	0x3e, r29	; 62
   15882:	0f be       	out	0x3f, r0	; 63
   15884:	cd bf       	out	0x3d, r28	; 61
   15886:	3c 01       	movw	r6, r24
   15888:	2b 01       	movw	r4, r22
   1588a:	5a 01       	movw	r10, r20
   1588c:	fc 01       	movw	r30, r24
   1588e:	17 82       	std	Z+7, r1	; 0x07
   15890:	16 82       	std	Z+6, r1	; 0x06
   15892:	83 81       	ldd	r24, Z+3	; 0x03
   15894:	81 fd       	sbrc	r24, 1
   15896:	03 c0       	rjmp	.+6      	; 0x1589e <vfprintf+0x4c>
   15898:	6f ef       	ldi	r22, 0xFF	; 255
   1589a:	7f ef       	ldi	r23, 0xFF	; 255
   1589c:	c6 c1       	rjmp	.+908    	; 0x15c2a <vfprintf+0x3d8>
   1589e:	9a e0       	ldi	r25, 0x0A	; 10
   158a0:	89 2e       	mov	r8, r25
   158a2:	1e 01       	movw	r2, r28
   158a4:	08 94       	sec
   158a6:	21 1c       	adc	r2, r1
   158a8:	31 1c       	adc	r3, r1
   158aa:	f3 01       	movw	r30, r6
   158ac:	23 81       	ldd	r18, Z+3	; 0x03
   158ae:	f2 01       	movw	r30, r4
   158b0:	23 fd       	sbrc	r18, 3
   158b2:	85 91       	lpm	r24, Z+
   158b4:	23 ff       	sbrs	r18, 3
   158b6:	81 91       	ld	r24, Z+
   158b8:	2f 01       	movw	r4, r30
   158ba:	88 23       	and	r24, r24
   158bc:	09 f4       	brne	.+2      	; 0x158c0 <vfprintf+0x6e>
   158be:	b2 c1       	rjmp	.+868    	; 0x15c24 <vfprintf+0x3d2>
   158c0:	85 32       	cpi	r24, 0x25	; 37
   158c2:	39 f4       	brne	.+14     	; 0x158d2 <vfprintf+0x80>
   158c4:	23 fd       	sbrc	r18, 3
   158c6:	85 91       	lpm	r24, Z+
   158c8:	23 ff       	sbrs	r18, 3
   158ca:	81 91       	ld	r24, Z+
   158cc:	2f 01       	movw	r4, r30
   158ce:	85 32       	cpi	r24, 0x25	; 37
   158d0:	29 f4       	brne	.+10     	; 0x158dc <vfprintf+0x8a>
   158d2:	90 e0       	ldi	r25, 0x00	; 0
   158d4:	b3 01       	movw	r22, r6
   158d6:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   158da:	e7 cf       	rjmp	.-50     	; 0x158aa <vfprintf+0x58>
   158dc:	98 2f       	mov	r25, r24
   158de:	ff 24       	eor	r15, r15
   158e0:	ee 24       	eor	r14, r14
   158e2:	99 24       	eor	r9, r9
   158e4:	ff e1       	ldi	r31, 0x1F	; 31
   158e6:	ff 15       	cp	r31, r15
   158e8:	d0 f0       	brcs	.+52     	; 0x1591e <vfprintf+0xcc>
   158ea:	9b 32       	cpi	r25, 0x2B	; 43
   158ec:	69 f0       	breq	.+26     	; 0x15908 <vfprintf+0xb6>
   158ee:	9c 32       	cpi	r25, 0x2C	; 44
   158f0:	28 f4       	brcc	.+10     	; 0x158fc <vfprintf+0xaa>
   158f2:	90 32       	cpi	r25, 0x20	; 32
   158f4:	59 f0       	breq	.+22     	; 0x1590c <vfprintf+0xba>
   158f6:	93 32       	cpi	r25, 0x23	; 35
   158f8:	91 f4       	brne	.+36     	; 0x1591e <vfprintf+0xcc>
   158fa:	0e c0       	rjmp	.+28     	; 0x15918 <vfprintf+0xc6>
   158fc:	9d 32       	cpi	r25, 0x2D	; 45
   158fe:	49 f0       	breq	.+18     	; 0x15912 <vfprintf+0xc0>
   15900:	90 33       	cpi	r25, 0x30	; 48
   15902:	69 f4       	brne	.+26     	; 0x1591e <vfprintf+0xcc>
   15904:	41 e0       	ldi	r20, 0x01	; 1
   15906:	24 c0       	rjmp	.+72     	; 0x15950 <vfprintf+0xfe>
   15908:	52 e0       	ldi	r21, 0x02	; 2
   1590a:	f5 2a       	or	r15, r21
   1590c:	84 e0       	ldi	r24, 0x04	; 4
   1590e:	f8 2a       	or	r15, r24
   15910:	28 c0       	rjmp	.+80     	; 0x15962 <vfprintf+0x110>
   15912:	98 e0       	ldi	r25, 0x08	; 8
   15914:	f9 2a       	or	r15, r25
   15916:	25 c0       	rjmp	.+74     	; 0x15962 <vfprintf+0x110>
   15918:	e0 e1       	ldi	r30, 0x10	; 16
   1591a:	fe 2a       	or	r15, r30
   1591c:	22 c0       	rjmp	.+68     	; 0x15962 <vfprintf+0x110>
   1591e:	f7 fc       	sbrc	r15, 7
   15920:	29 c0       	rjmp	.+82     	; 0x15974 <vfprintf+0x122>
   15922:	89 2f       	mov	r24, r25
   15924:	80 53       	subi	r24, 0x30	; 48
   15926:	8a 30       	cpi	r24, 0x0A	; 10
   15928:	70 f4       	brcc	.+28     	; 0x15946 <vfprintf+0xf4>
   1592a:	f6 fe       	sbrs	r15, 6
   1592c:	05 c0       	rjmp	.+10     	; 0x15938 <vfprintf+0xe6>
   1592e:	98 9c       	mul	r9, r8
   15930:	90 2c       	mov	r9, r0
   15932:	11 24       	eor	r1, r1
   15934:	98 0e       	add	r9, r24
   15936:	15 c0       	rjmp	.+42     	; 0x15962 <vfprintf+0x110>
   15938:	e8 9c       	mul	r14, r8
   1593a:	e0 2c       	mov	r14, r0
   1593c:	11 24       	eor	r1, r1
   1593e:	e8 0e       	add	r14, r24
   15940:	f0 e2       	ldi	r31, 0x20	; 32
   15942:	ff 2a       	or	r15, r31
   15944:	0e c0       	rjmp	.+28     	; 0x15962 <vfprintf+0x110>
   15946:	9e 32       	cpi	r25, 0x2E	; 46
   15948:	29 f4       	brne	.+10     	; 0x15954 <vfprintf+0x102>
   1594a:	f6 fc       	sbrc	r15, 6
   1594c:	6b c1       	rjmp	.+726    	; 0x15c24 <vfprintf+0x3d2>
   1594e:	40 e4       	ldi	r20, 0x40	; 64
   15950:	f4 2a       	or	r15, r20
   15952:	07 c0       	rjmp	.+14     	; 0x15962 <vfprintf+0x110>
   15954:	9c 36       	cpi	r25, 0x6C	; 108
   15956:	19 f4       	brne	.+6      	; 0x1595e <vfprintf+0x10c>
   15958:	50 e8       	ldi	r21, 0x80	; 128
   1595a:	f5 2a       	or	r15, r21
   1595c:	02 c0       	rjmp	.+4      	; 0x15962 <vfprintf+0x110>
   1595e:	98 36       	cpi	r25, 0x68	; 104
   15960:	49 f4       	brne	.+18     	; 0x15974 <vfprintf+0x122>
   15962:	f2 01       	movw	r30, r4
   15964:	23 fd       	sbrc	r18, 3
   15966:	95 91       	lpm	r25, Z+
   15968:	23 ff       	sbrs	r18, 3
   1596a:	91 91       	ld	r25, Z+
   1596c:	2f 01       	movw	r4, r30
   1596e:	99 23       	and	r25, r25
   15970:	09 f0       	breq	.+2      	; 0x15974 <vfprintf+0x122>
   15972:	b8 cf       	rjmp	.-144    	; 0x158e4 <vfprintf+0x92>
   15974:	89 2f       	mov	r24, r25
   15976:	85 54       	subi	r24, 0x45	; 69
   15978:	83 30       	cpi	r24, 0x03	; 3
   1597a:	18 f0       	brcs	.+6      	; 0x15982 <vfprintf+0x130>
   1597c:	80 52       	subi	r24, 0x20	; 32
   1597e:	83 30       	cpi	r24, 0x03	; 3
   15980:	38 f4       	brcc	.+14     	; 0x15990 <vfprintf+0x13e>
   15982:	44 e0       	ldi	r20, 0x04	; 4
   15984:	50 e0       	ldi	r21, 0x00	; 0
   15986:	a4 0e       	add	r10, r20
   15988:	b5 1e       	adc	r11, r21
   1598a:	5f e3       	ldi	r21, 0x3F	; 63
   1598c:	59 83       	std	Y+1, r21	; 0x01
   1598e:	0f c0       	rjmp	.+30     	; 0x159ae <vfprintf+0x15c>
   15990:	93 36       	cpi	r25, 0x63	; 99
   15992:	31 f0       	breq	.+12     	; 0x159a0 <vfprintf+0x14e>
   15994:	93 37       	cpi	r25, 0x73	; 115
   15996:	79 f0       	breq	.+30     	; 0x159b6 <vfprintf+0x164>
   15998:	93 35       	cpi	r25, 0x53	; 83
   1599a:	09 f0       	breq	.+2      	; 0x1599e <vfprintf+0x14c>
   1599c:	56 c0       	rjmp	.+172    	; 0x15a4a <vfprintf+0x1f8>
   1599e:	20 c0       	rjmp	.+64     	; 0x159e0 <vfprintf+0x18e>
   159a0:	f5 01       	movw	r30, r10
   159a2:	80 81       	ld	r24, Z
   159a4:	89 83       	std	Y+1, r24	; 0x01
   159a6:	42 e0       	ldi	r20, 0x02	; 2
   159a8:	50 e0       	ldi	r21, 0x00	; 0
   159aa:	a4 0e       	add	r10, r20
   159ac:	b5 1e       	adc	r11, r21
   159ae:	61 01       	movw	r12, r2
   159b0:	01 e0       	ldi	r16, 0x01	; 1
   159b2:	10 e0       	ldi	r17, 0x00	; 0
   159b4:	12 c0       	rjmp	.+36     	; 0x159da <vfprintf+0x188>
   159b6:	f5 01       	movw	r30, r10
   159b8:	c0 80       	ld	r12, Z
   159ba:	d1 80       	ldd	r13, Z+1	; 0x01
   159bc:	f6 fc       	sbrc	r15, 6
   159be:	03 c0       	rjmp	.+6      	; 0x159c6 <vfprintf+0x174>
   159c0:	6f ef       	ldi	r22, 0xFF	; 255
   159c2:	7f ef       	ldi	r23, 0xFF	; 255
   159c4:	02 c0       	rjmp	.+4      	; 0x159ca <vfprintf+0x178>
   159c6:	69 2d       	mov	r22, r9
   159c8:	70 e0       	ldi	r23, 0x00	; 0
   159ca:	42 e0       	ldi	r20, 0x02	; 2
   159cc:	50 e0       	ldi	r21, 0x00	; 0
   159ce:	a4 0e       	add	r10, r20
   159d0:	b5 1e       	adc	r11, r21
   159d2:	c6 01       	movw	r24, r12
   159d4:	0e 94 6f ae 	call	0x15cde	; 0x15cde <strnlen>
   159d8:	8c 01       	movw	r16, r24
   159da:	5f e7       	ldi	r21, 0x7F	; 127
   159dc:	f5 22       	and	r15, r21
   159de:	14 c0       	rjmp	.+40     	; 0x15a08 <vfprintf+0x1b6>
   159e0:	f5 01       	movw	r30, r10
   159e2:	c0 80       	ld	r12, Z
   159e4:	d1 80       	ldd	r13, Z+1	; 0x01
   159e6:	f6 fc       	sbrc	r15, 6
   159e8:	03 c0       	rjmp	.+6      	; 0x159f0 <vfprintf+0x19e>
   159ea:	6f ef       	ldi	r22, 0xFF	; 255
   159ec:	7f ef       	ldi	r23, 0xFF	; 255
   159ee:	02 c0       	rjmp	.+4      	; 0x159f4 <vfprintf+0x1a2>
   159f0:	69 2d       	mov	r22, r9
   159f2:	70 e0       	ldi	r23, 0x00	; 0
   159f4:	42 e0       	ldi	r20, 0x02	; 2
   159f6:	50 e0       	ldi	r21, 0x00	; 0
   159f8:	a4 0e       	add	r10, r20
   159fa:	b5 1e       	adc	r11, r21
   159fc:	c6 01       	movw	r24, r12
   159fe:	0e 94 64 ae 	call	0x15cc8	; 0x15cc8 <strnlen_P>
   15a02:	8c 01       	movw	r16, r24
   15a04:	50 e8       	ldi	r21, 0x80	; 128
   15a06:	f5 2a       	or	r15, r21
   15a08:	f3 fe       	sbrs	r15, 3
   15a0a:	07 c0       	rjmp	.+14     	; 0x15a1a <vfprintf+0x1c8>
   15a0c:	1a c0       	rjmp	.+52     	; 0x15a42 <vfprintf+0x1f0>
   15a0e:	80 e2       	ldi	r24, 0x20	; 32
   15a10:	90 e0       	ldi	r25, 0x00	; 0
   15a12:	b3 01       	movw	r22, r6
   15a14:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15a18:	ea 94       	dec	r14
   15a1a:	8e 2d       	mov	r24, r14
   15a1c:	90 e0       	ldi	r25, 0x00	; 0
   15a1e:	08 17       	cp	r16, r24
   15a20:	19 07       	cpc	r17, r25
   15a22:	a8 f3       	brcs	.-22     	; 0x15a0e <vfprintf+0x1bc>
   15a24:	0e c0       	rjmp	.+28     	; 0x15a42 <vfprintf+0x1f0>
   15a26:	f6 01       	movw	r30, r12
   15a28:	f7 fc       	sbrc	r15, 7
   15a2a:	85 91       	lpm	r24, Z+
   15a2c:	f7 fe       	sbrs	r15, 7
   15a2e:	81 91       	ld	r24, Z+
   15a30:	6f 01       	movw	r12, r30
   15a32:	90 e0       	ldi	r25, 0x00	; 0
   15a34:	b3 01       	movw	r22, r6
   15a36:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15a3a:	e1 10       	cpse	r14, r1
   15a3c:	ea 94       	dec	r14
   15a3e:	01 50       	subi	r16, 0x01	; 1
   15a40:	10 40       	sbci	r17, 0x00	; 0
   15a42:	01 15       	cp	r16, r1
   15a44:	11 05       	cpc	r17, r1
   15a46:	79 f7       	brne	.-34     	; 0x15a26 <vfprintf+0x1d4>
   15a48:	ea c0       	rjmp	.+468    	; 0x15c1e <vfprintf+0x3cc>
   15a4a:	94 36       	cpi	r25, 0x64	; 100
   15a4c:	11 f0       	breq	.+4      	; 0x15a52 <vfprintf+0x200>
   15a4e:	99 36       	cpi	r25, 0x69	; 105
   15a50:	69 f5       	brne	.+90     	; 0x15aac <vfprintf+0x25a>
   15a52:	f7 fe       	sbrs	r15, 7
   15a54:	08 c0       	rjmp	.+16     	; 0x15a66 <vfprintf+0x214>
   15a56:	f5 01       	movw	r30, r10
   15a58:	20 81       	ld	r18, Z
   15a5a:	31 81       	ldd	r19, Z+1	; 0x01
   15a5c:	42 81       	ldd	r20, Z+2	; 0x02
   15a5e:	53 81       	ldd	r21, Z+3	; 0x03
   15a60:	84 e0       	ldi	r24, 0x04	; 4
   15a62:	90 e0       	ldi	r25, 0x00	; 0
   15a64:	0a c0       	rjmp	.+20     	; 0x15a7a <vfprintf+0x228>
   15a66:	f5 01       	movw	r30, r10
   15a68:	80 81       	ld	r24, Z
   15a6a:	91 81       	ldd	r25, Z+1	; 0x01
   15a6c:	9c 01       	movw	r18, r24
   15a6e:	44 27       	eor	r20, r20
   15a70:	37 fd       	sbrc	r19, 7
   15a72:	40 95       	com	r20
   15a74:	54 2f       	mov	r21, r20
   15a76:	82 e0       	ldi	r24, 0x02	; 2
   15a78:	90 e0       	ldi	r25, 0x00	; 0
   15a7a:	a8 0e       	add	r10, r24
   15a7c:	b9 1e       	adc	r11, r25
   15a7e:	9f e6       	ldi	r25, 0x6F	; 111
   15a80:	f9 22       	and	r15, r25
   15a82:	57 ff       	sbrs	r21, 7
   15a84:	09 c0       	rjmp	.+18     	; 0x15a98 <vfprintf+0x246>
   15a86:	50 95       	com	r21
   15a88:	40 95       	com	r20
   15a8a:	30 95       	com	r19
   15a8c:	21 95       	neg	r18
   15a8e:	3f 4f       	sbci	r19, 0xFF	; 255
   15a90:	4f 4f       	sbci	r20, 0xFF	; 255
   15a92:	5f 4f       	sbci	r21, 0xFF	; 255
   15a94:	e0 e8       	ldi	r30, 0x80	; 128
   15a96:	fe 2a       	or	r15, r30
   15a98:	ca 01       	movw	r24, r20
   15a9a:	b9 01       	movw	r22, r18
   15a9c:	a1 01       	movw	r20, r2
   15a9e:	2a e0       	ldi	r18, 0x0A	; 10
   15aa0:	30 e0       	ldi	r19, 0x00	; 0
   15aa2:	0e 94 a6 ae 	call	0x15d4c	; 0x15d4c <__ultoa_invert>
   15aa6:	d8 2e       	mov	r13, r24
   15aa8:	d2 18       	sub	r13, r2
   15aaa:	40 c0       	rjmp	.+128    	; 0x15b2c <vfprintf+0x2da>
   15aac:	95 37       	cpi	r25, 0x75	; 117
   15aae:	29 f4       	brne	.+10     	; 0x15aba <vfprintf+0x268>
   15ab0:	1f 2d       	mov	r17, r15
   15ab2:	1f 7e       	andi	r17, 0xEF	; 239
   15ab4:	2a e0       	ldi	r18, 0x0A	; 10
   15ab6:	30 e0       	ldi	r19, 0x00	; 0
   15ab8:	1d c0       	rjmp	.+58     	; 0x15af4 <vfprintf+0x2a2>
   15aba:	1f 2d       	mov	r17, r15
   15abc:	19 7f       	andi	r17, 0xF9	; 249
   15abe:	9f 36       	cpi	r25, 0x6F	; 111
   15ac0:	61 f0       	breq	.+24     	; 0x15ada <vfprintf+0x288>
   15ac2:	90 37       	cpi	r25, 0x70	; 112
   15ac4:	20 f4       	brcc	.+8      	; 0x15ace <vfprintf+0x27c>
   15ac6:	98 35       	cpi	r25, 0x58	; 88
   15ac8:	09 f0       	breq	.+2      	; 0x15acc <vfprintf+0x27a>
   15aca:	ac c0       	rjmp	.+344    	; 0x15c24 <vfprintf+0x3d2>
   15acc:	0f c0       	rjmp	.+30     	; 0x15aec <vfprintf+0x29a>
   15ace:	90 37       	cpi	r25, 0x70	; 112
   15ad0:	39 f0       	breq	.+14     	; 0x15ae0 <vfprintf+0x28e>
   15ad2:	98 37       	cpi	r25, 0x78	; 120
   15ad4:	09 f0       	breq	.+2      	; 0x15ad8 <vfprintf+0x286>
   15ad6:	a6 c0       	rjmp	.+332    	; 0x15c24 <vfprintf+0x3d2>
   15ad8:	04 c0       	rjmp	.+8      	; 0x15ae2 <vfprintf+0x290>
   15ada:	28 e0       	ldi	r18, 0x08	; 8
   15adc:	30 e0       	ldi	r19, 0x00	; 0
   15ade:	0a c0       	rjmp	.+20     	; 0x15af4 <vfprintf+0x2a2>
   15ae0:	10 61       	ori	r17, 0x10	; 16
   15ae2:	14 fd       	sbrc	r17, 4
   15ae4:	14 60       	ori	r17, 0x04	; 4
   15ae6:	20 e1       	ldi	r18, 0x10	; 16
   15ae8:	30 e0       	ldi	r19, 0x00	; 0
   15aea:	04 c0       	rjmp	.+8      	; 0x15af4 <vfprintf+0x2a2>
   15aec:	14 fd       	sbrc	r17, 4
   15aee:	16 60       	ori	r17, 0x06	; 6
   15af0:	20 e1       	ldi	r18, 0x10	; 16
   15af2:	32 e0       	ldi	r19, 0x02	; 2
   15af4:	17 ff       	sbrs	r17, 7
   15af6:	08 c0       	rjmp	.+16     	; 0x15b08 <vfprintf+0x2b6>
   15af8:	f5 01       	movw	r30, r10
   15afa:	60 81       	ld	r22, Z
   15afc:	71 81       	ldd	r23, Z+1	; 0x01
   15afe:	82 81       	ldd	r24, Z+2	; 0x02
   15b00:	93 81       	ldd	r25, Z+3	; 0x03
   15b02:	44 e0       	ldi	r20, 0x04	; 4
   15b04:	50 e0       	ldi	r21, 0x00	; 0
   15b06:	08 c0       	rjmp	.+16     	; 0x15b18 <vfprintf+0x2c6>
   15b08:	f5 01       	movw	r30, r10
   15b0a:	80 81       	ld	r24, Z
   15b0c:	91 81       	ldd	r25, Z+1	; 0x01
   15b0e:	bc 01       	movw	r22, r24
   15b10:	80 e0       	ldi	r24, 0x00	; 0
   15b12:	90 e0       	ldi	r25, 0x00	; 0
   15b14:	42 e0       	ldi	r20, 0x02	; 2
   15b16:	50 e0       	ldi	r21, 0x00	; 0
   15b18:	a4 0e       	add	r10, r20
   15b1a:	b5 1e       	adc	r11, r21
   15b1c:	a1 01       	movw	r20, r2
   15b1e:	0e 94 a6 ae 	call	0x15d4c	; 0x15d4c <__ultoa_invert>
   15b22:	d8 2e       	mov	r13, r24
   15b24:	d2 18       	sub	r13, r2
   15b26:	8f e7       	ldi	r24, 0x7F	; 127
   15b28:	f8 2e       	mov	r15, r24
   15b2a:	f1 22       	and	r15, r17
   15b2c:	f6 fe       	sbrs	r15, 6
   15b2e:	0b c0       	rjmp	.+22     	; 0x15b46 <vfprintf+0x2f4>
   15b30:	5e ef       	ldi	r21, 0xFE	; 254
   15b32:	f5 22       	and	r15, r21
   15b34:	d9 14       	cp	r13, r9
   15b36:	38 f4       	brcc	.+14     	; 0x15b46 <vfprintf+0x2f4>
   15b38:	f4 fe       	sbrs	r15, 4
   15b3a:	07 c0       	rjmp	.+14     	; 0x15b4a <vfprintf+0x2f8>
   15b3c:	f2 fc       	sbrc	r15, 2
   15b3e:	05 c0       	rjmp	.+10     	; 0x15b4a <vfprintf+0x2f8>
   15b40:	8f ee       	ldi	r24, 0xEF	; 239
   15b42:	f8 22       	and	r15, r24
   15b44:	02 c0       	rjmp	.+4      	; 0x15b4a <vfprintf+0x2f8>
   15b46:	1d 2d       	mov	r17, r13
   15b48:	01 c0       	rjmp	.+2      	; 0x15b4c <vfprintf+0x2fa>
   15b4a:	19 2d       	mov	r17, r9
   15b4c:	f4 fe       	sbrs	r15, 4
   15b4e:	0d c0       	rjmp	.+26     	; 0x15b6a <vfprintf+0x318>
   15b50:	fe 01       	movw	r30, r28
   15b52:	ed 0d       	add	r30, r13
   15b54:	f1 1d       	adc	r31, r1
   15b56:	80 81       	ld	r24, Z
   15b58:	80 33       	cpi	r24, 0x30	; 48
   15b5a:	19 f4       	brne	.+6      	; 0x15b62 <vfprintf+0x310>
   15b5c:	99 ee       	ldi	r25, 0xE9	; 233
   15b5e:	f9 22       	and	r15, r25
   15b60:	08 c0       	rjmp	.+16     	; 0x15b72 <vfprintf+0x320>
   15b62:	1f 5f       	subi	r17, 0xFF	; 255
   15b64:	f2 fe       	sbrs	r15, 2
   15b66:	05 c0       	rjmp	.+10     	; 0x15b72 <vfprintf+0x320>
   15b68:	03 c0       	rjmp	.+6      	; 0x15b70 <vfprintf+0x31e>
   15b6a:	8f 2d       	mov	r24, r15
   15b6c:	86 78       	andi	r24, 0x86	; 134
   15b6e:	09 f0       	breq	.+2      	; 0x15b72 <vfprintf+0x320>
   15b70:	1f 5f       	subi	r17, 0xFF	; 255
   15b72:	0f 2d       	mov	r16, r15
   15b74:	f3 fc       	sbrc	r15, 3
   15b76:	14 c0       	rjmp	.+40     	; 0x15ba0 <vfprintf+0x34e>
   15b78:	f0 fe       	sbrs	r15, 0
   15b7a:	0f c0       	rjmp	.+30     	; 0x15b9a <vfprintf+0x348>
   15b7c:	1e 15       	cp	r17, r14
   15b7e:	10 f0       	brcs	.+4      	; 0x15b84 <vfprintf+0x332>
   15b80:	9d 2c       	mov	r9, r13
   15b82:	0b c0       	rjmp	.+22     	; 0x15b9a <vfprintf+0x348>
   15b84:	9d 2c       	mov	r9, r13
   15b86:	9e 0c       	add	r9, r14
   15b88:	91 1a       	sub	r9, r17
   15b8a:	1e 2d       	mov	r17, r14
   15b8c:	06 c0       	rjmp	.+12     	; 0x15b9a <vfprintf+0x348>
   15b8e:	80 e2       	ldi	r24, 0x20	; 32
   15b90:	90 e0       	ldi	r25, 0x00	; 0
   15b92:	b3 01       	movw	r22, r6
   15b94:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15b98:	1f 5f       	subi	r17, 0xFF	; 255
   15b9a:	1e 15       	cp	r17, r14
   15b9c:	c0 f3       	brcs	.-16     	; 0x15b8e <vfprintf+0x33c>
   15b9e:	04 c0       	rjmp	.+8      	; 0x15ba8 <vfprintf+0x356>
   15ba0:	1e 15       	cp	r17, r14
   15ba2:	10 f4       	brcc	.+4      	; 0x15ba8 <vfprintf+0x356>
   15ba4:	e1 1a       	sub	r14, r17
   15ba6:	01 c0       	rjmp	.+2      	; 0x15baa <vfprintf+0x358>
   15ba8:	ee 24       	eor	r14, r14
   15baa:	04 ff       	sbrs	r16, 4
   15bac:	0f c0       	rjmp	.+30     	; 0x15bcc <vfprintf+0x37a>
   15bae:	80 e3       	ldi	r24, 0x30	; 48
   15bb0:	90 e0       	ldi	r25, 0x00	; 0
   15bb2:	b3 01       	movw	r22, r6
   15bb4:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15bb8:	02 ff       	sbrs	r16, 2
   15bba:	1d c0       	rjmp	.+58     	; 0x15bf6 <vfprintf+0x3a4>
   15bbc:	01 fd       	sbrc	r16, 1
   15bbe:	03 c0       	rjmp	.+6      	; 0x15bc6 <vfprintf+0x374>
   15bc0:	88 e7       	ldi	r24, 0x78	; 120
   15bc2:	90 e0       	ldi	r25, 0x00	; 0
   15bc4:	0e c0       	rjmp	.+28     	; 0x15be2 <vfprintf+0x390>
   15bc6:	88 e5       	ldi	r24, 0x58	; 88
   15bc8:	90 e0       	ldi	r25, 0x00	; 0
   15bca:	0b c0       	rjmp	.+22     	; 0x15be2 <vfprintf+0x390>
   15bcc:	80 2f       	mov	r24, r16
   15bce:	86 78       	andi	r24, 0x86	; 134
   15bd0:	91 f0       	breq	.+36     	; 0x15bf6 <vfprintf+0x3a4>
   15bd2:	01 ff       	sbrs	r16, 1
   15bd4:	02 c0       	rjmp	.+4      	; 0x15bda <vfprintf+0x388>
   15bd6:	8b e2       	ldi	r24, 0x2B	; 43
   15bd8:	01 c0       	rjmp	.+2      	; 0x15bdc <vfprintf+0x38a>
   15bda:	80 e2       	ldi	r24, 0x20	; 32
   15bdc:	f7 fc       	sbrc	r15, 7
   15bde:	8d e2       	ldi	r24, 0x2D	; 45
   15be0:	90 e0       	ldi	r25, 0x00	; 0
   15be2:	b3 01       	movw	r22, r6
   15be4:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15be8:	06 c0       	rjmp	.+12     	; 0x15bf6 <vfprintf+0x3a4>
   15bea:	80 e3       	ldi	r24, 0x30	; 48
   15bec:	90 e0       	ldi	r25, 0x00	; 0
   15bee:	b3 01       	movw	r22, r6
   15bf0:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15bf4:	9a 94       	dec	r9
   15bf6:	d9 14       	cp	r13, r9
   15bf8:	c0 f3       	brcs	.-16     	; 0x15bea <vfprintf+0x398>
   15bfa:	da 94       	dec	r13
   15bfc:	f1 01       	movw	r30, r2
   15bfe:	ed 0d       	add	r30, r13
   15c00:	f1 1d       	adc	r31, r1
   15c02:	80 81       	ld	r24, Z
   15c04:	90 e0       	ldi	r25, 0x00	; 0
   15c06:	b3 01       	movw	r22, r6
   15c08:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15c0c:	dd 20       	and	r13, r13
   15c0e:	a9 f7       	brne	.-22     	; 0x15bfa <vfprintf+0x3a8>
   15c10:	06 c0       	rjmp	.+12     	; 0x15c1e <vfprintf+0x3cc>
   15c12:	80 e2       	ldi	r24, 0x20	; 32
   15c14:	90 e0       	ldi	r25, 0x00	; 0
   15c16:	b3 01       	movw	r22, r6
   15c18:	0e 94 7a ae 	call	0x15cf4	; 0x15cf4 <fputc>
   15c1c:	ea 94       	dec	r14
   15c1e:	ee 20       	and	r14, r14
   15c20:	c1 f7       	brne	.-16     	; 0x15c12 <vfprintf+0x3c0>
   15c22:	43 ce       	rjmp	.-890    	; 0x158aa <vfprintf+0x58>
   15c24:	f3 01       	movw	r30, r6
   15c26:	66 81       	ldd	r22, Z+6	; 0x06
   15c28:	77 81       	ldd	r23, Z+7	; 0x07
   15c2a:	cb 01       	movw	r24, r22
   15c2c:	2b 96       	adiw	r28, 0x0b	; 11
   15c2e:	0f b6       	in	r0, 0x3f	; 63
   15c30:	f8 94       	cli
   15c32:	de bf       	out	0x3e, r29	; 62
   15c34:	0f be       	out	0x3f, r0	; 63
   15c36:	cd bf       	out	0x3d, r28	; 61
   15c38:	cf 91       	pop	r28
   15c3a:	df 91       	pop	r29
   15c3c:	1f 91       	pop	r17
   15c3e:	0f 91       	pop	r16
   15c40:	ff 90       	pop	r15
   15c42:	ef 90       	pop	r14
   15c44:	df 90       	pop	r13
   15c46:	cf 90       	pop	r12
   15c48:	bf 90       	pop	r11
   15c4a:	af 90       	pop	r10
   15c4c:	9f 90       	pop	r9
   15c4e:	8f 90       	pop	r8
   15c50:	7f 90       	pop	r7
   15c52:	6f 90       	pop	r6
   15c54:	5f 90       	pop	r5
   15c56:	4f 90       	pop	r4
   15c58:	3f 90       	pop	r3
   15c5a:	2f 90       	pop	r2
   15c5c:	08 95       	ret

00015c5e <__eerd_block_m128>:
   15c5e:	dc 01       	movw	r26, r24
   15c60:	cb 01       	movw	r24, r22

00015c62 <__eerd_blraw_m128>:
   15c62:	fc 01       	movw	r30, r24
   15c64:	e1 99       	sbic	0x1c, 1	; 28
   15c66:	fe cf       	rjmp	.-4      	; 0x15c64 <__eerd_blraw_m128+0x2>
   15c68:	06 c0       	rjmp	.+12     	; 0x15c76 <__eerd_blraw_m128+0x14>
   15c6a:	ff bb       	out	0x1f, r31	; 31
   15c6c:	ee bb       	out	0x1e, r30	; 30
   15c6e:	e0 9a       	sbi	0x1c, 0	; 28
   15c70:	31 96       	adiw	r30, 0x01	; 1
   15c72:	0d b2       	in	r0, 0x1d	; 29
   15c74:	0d 92       	st	X+, r0
   15c76:	41 50       	subi	r20, 0x01	; 1
   15c78:	50 40       	sbci	r21, 0x00	; 0
   15c7a:	b8 f7       	brcc	.-18     	; 0x15c6a <__eerd_blraw_m128+0x8>
   15c7c:	08 95       	ret

00015c7e <__eerd_byte_m128>:
   15c7e:	e1 99       	sbic	0x1c, 1	; 28
   15c80:	fe cf       	rjmp	.-4      	; 0x15c7e <__eerd_byte_m128>
   15c82:	9f bb       	out	0x1f, r25	; 31
   15c84:	8e bb       	out	0x1e, r24	; 30
   15c86:	e0 9a       	sbi	0x1c, 0	; 28
   15c88:	99 27       	eor	r25, r25
   15c8a:	8d b3       	in	r24, 0x1d	; 29
   15c8c:	08 95       	ret

00015c8e <__eerd_dword_m128>:
   15c8e:	a6 e1       	ldi	r26, 0x16	; 22
   15c90:	b0 e0       	ldi	r27, 0x00	; 0
   15c92:	44 e0       	ldi	r20, 0x04	; 4
   15c94:	50 e0       	ldi	r21, 0x00	; 0
   15c96:	0c 94 31 ae 	jmp	0x15c62	; 0x15c62 <__eerd_blraw_m128>

00015c9a <__eewr_block_m128>:
   15c9a:	dc 01       	movw	r26, r24
   15c9c:	cb 01       	movw	r24, r22
   15c9e:	03 c0       	rjmp	.+6      	; 0x15ca6 <__eewr_block_m128+0xc>
   15ca0:	2d 91       	ld	r18, X+
   15ca2:	0e 94 58 ae 	call	0x15cb0	; 0x15cb0 <__eewr_r18_m128>
   15ca6:	41 50       	subi	r20, 0x01	; 1
   15ca8:	50 40       	sbci	r21, 0x00	; 0
   15caa:	d0 f7       	brcc	.-12     	; 0x15ca0 <__eewr_block_m128+0x6>
   15cac:	08 95       	ret

00015cae <__eewr_byte_m128>:
   15cae:	26 2f       	mov	r18, r22

00015cb0 <__eewr_r18_m128>:
   15cb0:	e1 99       	sbic	0x1c, 1	; 28
   15cb2:	fe cf       	rjmp	.-4      	; 0x15cb0 <__eewr_r18_m128>
   15cb4:	9f bb       	out	0x1f, r25	; 31
   15cb6:	8e bb       	out	0x1e, r24	; 30
   15cb8:	2d bb       	out	0x1d, r18	; 29
   15cba:	0f b6       	in	r0, 0x3f	; 63
   15cbc:	f8 94       	cli
   15cbe:	e2 9a       	sbi	0x1c, 2	; 28
   15cc0:	e1 9a       	sbi	0x1c, 1	; 28
   15cc2:	0f be       	out	0x3f, r0	; 63
   15cc4:	01 96       	adiw	r24, 0x01	; 1
   15cc6:	08 95       	ret

00015cc8 <strnlen_P>:
   15cc8:	fc 01       	movw	r30, r24
   15cca:	05 90       	lpm	r0, Z+
   15ccc:	61 50       	subi	r22, 0x01	; 1
   15cce:	70 40       	sbci	r23, 0x00	; 0
   15cd0:	01 10       	cpse	r0, r1
   15cd2:	d8 f7       	brcc	.-10     	; 0x15cca <strnlen_P+0x2>
   15cd4:	80 95       	com	r24
   15cd6:	90 95       	com	r25
   15cd8:	8e 0f       	add	r24, r30
   15cda:	9f 1f       	adc	r25, r31
   15cdc:	08 95       	ret

00015cde <strnlen>:
   15cde:	fc 01       	movw	r30, r24
   15ce0:	61 50       	subi	r22, 0x01	; 1
   15ce2:	70 40       	sbci	r23, 0x00	; 0
   15ce4:	01 90       	ld	r0, Z+
   15ce6:	01 10       	cpse	r0, r1
   15ce8:	d8 f7       	brcc	.-10     	; 0x15ce0 <strnlen+0x2>
   15cea:	80 95       	com	r24
   15cec:	90 95       	com	r25
   15cee:	8e 0f       	add	r24, r30
   15cf0:	9f 1f       	adc	r25, r31
   15cf2:	08 95       	ret

00015cf4 <fputc>:
   15cf4:	0f 93       	push	r16
   15cf6:	1f 93       	push	r17
   15cf8:	cf 93       	push	r28
   15cfa:	df 93       	push	r29
   15cfc:	8c 01       	movw	r16, r24
   15cfe:	eb 01       	movw	r28, r22
   15d00:	8b 81       	ldd	r24, Y+3	; 0x03
   15d02:	81 ff       	sbrs	r24, 1
   15d04:	1b c0       	rjmp	.+54     	; 0x15d3c <fputc+0x48>
   15d06:	82 ff       	sbrs	r24, 2
   15d08:	0d c0       	rjmp	.+26     	; 0x15d24 <fputc+0x30>
   15d0a:	2e 81       	ldd	r18, Y+6	; 0x06
   15d0c:	3f 81       	ldd	r19, Y+7	; 0x07
   15d0e:	8c 81       	ldd	r24, Y+4	; 0x04
   15d10:	9d 81       	ldd	r25, Y+5	; 0x05
   15d12:	28 17       	cp	r18, r24
   15d14:	39 07       	cpc	r19, r25
   15d16:	64 f4       	brge	.+24     	; 0x15d30 <fputc+0x3c>
   15d18:	e8 81       	ld	r30, Y
   15d1a:	f9 81       	ldd	r31, Y+1	; 0x01
   15d1c:	01 93       	st	Z+, r16
   15d1e:	f9 83       	std	Y+1, r31	; 0x01
   15d20:	e8 83       	st	Y, r30
   15d22:	06 c0       	rjmp	.+12     	; 0x15d30 <fputc+0x3c>
   15d24:	e8 85       	ldd	r30, Y+8	; 0x08
   15d26:	f9 85       	ldd	r31, Y+9	; 0x09
   15d28:	80 2f       	mov	r24, r16
   15d2a:	09 95       	icall
   15d2c:	89 2b       	or	r24, r25
   15d2e:	31 f4       	brne	.+12     	; 0x15d3c <fputc+0x48>
   15d30:	8e 81       	ldd	r24, Y+6	; 0x06
   15d32:	9f 81       	ldd	r25, Y+7	; 0x07
   15d34:	01 96       	adiw	r24, 0x01	; 1
   15d36:	9f 83       	std	Y+7, r25	; 0x07
   15d38:	8e 83       	std	Y+6, r24	; 0x06
   15d3a:	02 c0       	rjmp	.+4      	; 0x15d40 <fputc+0x4c>
   15d3c:	0f ef       	ldi	r16, 0xFF	; 255
   15d3e:	1f ef       	ldi	r17, 0xFF	; 255
   15d40:	c8 01       	movw	r24, r16
   15d42:	df 91       	pop	r29
   15d44:	cf 91       	pop	r28
   15d46:	1f 91       	pop	r17
   15d48:	0f 91       	pop	r16
   15d4a:	08 95       	ret

00015d4c <__ultoa_invert>:
   15d4c:	fa 01       	movw	r30, r20
   15d4e:	aa 27       	eor	r26, r26
   15d50:	28 30       	cpi	r18, 0x08	; 8
   15d52:	51 f1       	breq	.+84     	; 0x15da8 <__ultoa_invert+0x5c>
   15d54:	20 31       	cpi	r18, 0x10	; 16
   15d56:	81 f1       	breq	.+96     	; 0x15db8 <__ultoa_invert+0x6c>
   15d58:	e8 94       	clt
   15d5a:	6f 93       	push	r22
   15d5c:	6e 7f       	andi	r22, 0xFE	; 254
   15d5e:	6e 5f       	subi	r22, 0xFE	; 254
   15d60:	7f 4f       	sbci	r23, 0xFF	; 255
   15d62:	8f 4f       	sbci	r24, 0xFF	; 255
   15d64:	9f 4f       	sbci	r25, 0xFF	; 255
   15d66:	af 4f       	sbci	r26, 0xFF	; 255
   15d68:	b1 e0       	ldi	r27, 0x01	; 1
   15d6a:	3e d0       	rcall	.+124    	; 0x15de8 <__ultoa_invert+0x9c>
   15d6c:	b4 e0       	ldi	r27, 0x04	; 4
   15d6e:	3c d0       	rcall	.+120    	; 0x15de8 <__ultoa_invert+0x9c>
   15d70:	67 0f       	add	r22, r23
   15d72:	78 1f       	adc	r23, r24
   15d74:	89 1f       	adc	r24, r25
   15d76:	9a 1f       	adc	r25, r26
   15d78:	a1 1d       	adc	r26, r1
   15d7a:	68 0f       	add	r22, r24
   15d7c:	79 1f       	adc	r23, r25
   15d7e:	8a 1f       	adc	r24, r26
   15d80:	91 1d       	adc	r25, r1
   15d82:	a1 1d       	adc	r26, r1
   15d84:	6a 0f       	add	r22, r26
   15d86:	71 1d       	adc	r23, r1
   15d88:	81 1d       	adc	r24, r1
   15d8a:	91 1d       	adc	r25, r1
   15d8c:	a1 1d       	adc	r26, r1
   15d8e:	20 d0       	rcall	.+64     	; 0x15dd0 <__ultoa_invert+0x84>
   15d90:	09 f4       	brne	.+2      	; 0x15d94 <__ultoa_invert+0x48>
   15d92:	68 94       	set
   15d94:	3f 91       	pop	r19
   15d96:	2a e0       	ldi	r18, 0x0A	; 10
   15d98:	26 9f       	mul	r18, r22
   15d9a:	11 24       	eor	r1, r1
   15d9c:	30 19       	sub	r19, r0
   15d9e:	30 5d       	subi	r19, 0xD0	; 208
   15da0:	31 93       	st	Z+, r19
   15da2:	de f6       	brtc	.-74     	; 0x15d5a <__ultoa_invert+0xe>
   15da4:	cf 01       	movw	r24, r30
   15da6:	08 95       	ret
   15da8:	46 2f       	mov	r20, r22
   15daa:	47 70       	andi	r20, 0x07	; 7
   15dac:	40 5d       	subi	r20, 0xD0	; 208
   15dae:	41 93       	st	Z+, r20
   15db0:	b3 e0       	ldi	r27, 0x03	; 3
   15db2:	0f d0       	rcall	.+30     	; 0x15dd2 <__ultoa_invert+0x86>
   15db4:	c9 f7       	brne	.-14     	; 0x15da8 <__ultoa_invert+0x5c>
   15db6:	f6 cf       	rjmp	.-20     	; 0x15da4 <__ultoa_invert+0x58>
   15db8:	46 2f       	mov	r20, r22
   15dba:	4f 70       	andi	r20, 0x0F	; 15
   15dbc:	40 5d       	subi	r20, 0xD0	; 208
   15dbe:	4a 33       	cpi	r20, 0x3A	; 58
   15dc0:	18 f0       	brcs	.+6      	; 0x15dc8 <__ultoa_invert+0x7c>
   15dc2:	49 5d       	subi	r20, 0xD9	; 217
   15dc4:	31 fd       	sbrc	r19, 1
   15dc6:	40 52       	subi	r20, 0x20	; 32
   15dc8:	41 93       	st	Z+, r20
   15dca:	02 d0       	rcall	.+4      	; 0x15dd0 <__ultoa_invert+0x84>
   15dcc:	a9 f7       	brne	.-22     	; 0x15db8 <__ultoa_invert+0x6c>
   15dce:	ea cf       	rjmp	.-44     	; 0x15da4 <__ultoa_invert+0x58>
   15dd0:	b4 e0       	ldi	r27, 0x04	; 4
   15dd2:	a6 95       	lsr	r26
   15dd4:	97 95       	ror	r25
   15dd6:	87 95       	ror	r24
   15dd8:	77 95       	ror	r23
   15dda:	67 95       	ror	r22
   15ddc:	ba 95       	dec	r27
   15dde:	c9 f7       	brne	.-14     	; 0x15dd2 <__ultoa_invert+0x86>
   15de0:	00 97       	sbiw	r24, 0x00	; 0
   15de2:	61 05       	cpc	r22, r1
   15de4:	71 05       	cpc	r23, r1
   15de6:	08 95       	ret
   15de8:	9b 01       	movw	r18, r22
   15dea:	ac 01       	movw	r20, r24
   15dec:	0a 2e       	mov	r0, r26
   15dee:	06 94       	lsr	r0
   15df0:	57 95       	ror	r21
   15df2:	47 95       	ror	r20
   15df4:	37 95       	ror	r19
   15df6:	27 95       	ror	r18
   15df8:	ba 95       	dec	r27
   15dfa:	c9 f7       	brne	.-14     	; 0x15dee <__ultoa_invert+0xa2>
   15dfc:	62 0f       	add	r22, r18
   15dfe:	73 1f       	adc	r23, r19
   15e00:	84 1f       	adc	r24, r20
   15e02:	95 1f       	adc	r25, r21
   15e04:	a0 1d       	adc	r26, r0
   15e06:	08 95       	ret

00015e08 <_exit>:
   15e08:	f8 94       	cli

00015e0a <__stop_program>:
   15e0a:	ff cf       	rjmp	.-2      	; 0x15e0a <__stop_program>
